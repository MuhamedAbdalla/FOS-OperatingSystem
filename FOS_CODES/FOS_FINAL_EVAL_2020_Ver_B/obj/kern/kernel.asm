
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 70 15 00 	lgdtl  0x157018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 6f 15 f0       	mov    $0xf0156fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 02 00 00 00       	call   f010003f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <FOS_initialize>:
extern uint32 isBufferingEnabled();
extern uint32 setModifiedBufferLength();

//First ever function called in FOS kernel
void FOS_initialize()
{
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100045:	ba 70 db 3c f0       	mov    $0xf03cdb70,%edx
f010004a:	b8 eb 1e 34 f0       	mov    $0xf0341eeb,%eax
f010004f:	29 c2                	sub    %eax,%edx
f0100051:	89 d0                	mov    %edx,%eax
f0100053:	83 ec 04             	sub    $0x4,%esp
f0100056:	50                   	push   %eax
f0100057:	6a 00                	push   $0x0
f0100059:	68 eb 1e 34 f0       	push   $0xf0341eeb
f010005e:	e8 4a b4 01 00       	call   f011b4ad <memset>
f0100063:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100066:	e8 6f 0c 00 00       	call   f0100cda <console_initialize>

	//print welcome message
	print_welcome_message();
f010006b:	e8 aa 00 00 00       	call   f010011a <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100070:	e8 5c 2e 00 00       	call   f0102ed1 <detect_memory>
	initialize_kernel_VM();
f0100075:	e8 d6 34 00 00       	call   f0103550 <initialize_kernel_VM>
	initialize_paging();
f010007a:	e8 f3 38 00 00       	call   f0103972 <initialize_paging>
//	page_check();


	// Lab 3 user environment initialization functions
	env_init();
f010007f:	e8 69 66 00 00       	call   f01066ed <env_init>
	idt_init();
f0100084:	e8 fe 73 00 00       	call   f0107487 <idt_init>
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmModifiedCLOCK();
f0100089:	e8 2d 89 00 00       	call   f01089bb <setPageReplacmentAlgorithmModifiedCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f010008e:	e8 50 4b 00 00       	call   f0104be3 <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f0100093:	e8 07 4c 00 00       	call   f0104c9f <setKHeapPlacementStrategyFIRSTFIT>
	enableBuffering(0);
f0100098:	83 ec 0c             	sub    $0xc,%esp
f010009b:	6a 00                	push   $0x0
f010009d:	e8 c8 89 00 00       	call   f0108a6a <enableBuffering>
f01000a2:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000a5:	83 ec 0c             	sub    $0xc,%esp
f01000a8:	6a 00                	push   $0x0
f01000aa:	e8 a3 89 00 00       	call   f0108a52 <enableModifiedBuffer>
f01000af:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(50);
f01000b2:	83 ec 0c             	sub    $0xc,%esp
f01000b5:	6a 32                	push   $0x32
f01000b7:	e8 c6 89 00 00       	call   f0108a82 <setModifiedBufferLength>
f01000bc:	83 c4 10             	add    $0x10,%esp

	//chksch(1);
	chksch(0);
f01000bf:	83 ec 0c             	sub    $0xc,%esp
f01000c2:	6a 00                	push   $0x0
f01000c4:	e8 b9 c0 01 00       	call   f011c182 <chksch>
f01000c9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000cc:	e8 96 71 00 00       	call   f0107267 <pic_init>
	sched_init() ;
f01000d1:	e8 6d ad 00 00       	call   f010ae43 <sched_init>
#if USE_KHEAP
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif

	create_shares_array(MAX_SHARES);
f01000d6:	83 ec 0c             	sub    $0xc,%esp
f01000d9:	6a 64                	push   $0x64
f01000db:	e8 fa e5 00 00       	call   f010e6da <create_shares_array>
f01000e0:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000e3:	83 ec 0c             	sub    $0xc,%esp
f01000e6:	68 2c 01 00 00       	push   $0x12c
f01000eb:	e8 bd e2 00 00       	call   f010e3ad <create_semaphores_array>
f01000f0:	83 c4 10             	add    $0x10,%esp

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f01000f3:	83 ec 0c             	sub    $0xc,%esp
f01000f6:	68 e0 c6 11 f0       	push   $0xf011c6e0
f01000fb:	e8 36 73 00 00       	call   f0107436 <cprintf>
f0100100:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100103:	83 ec 0c             	sub    $0xc,%esp
f0100106:	68 0c c7 11 f0       	push   $0xf011c70c
f010010b:	e8 26 73 00 00       	call   f0107436 <cprintf>
f0100110:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100113:	e8 f9 16 00 00       	call   f0101811 <run_command_prompt>
	}
f0100118:	eb d9                	jmp    f01000f3 <FOS_initialize+0xb4>

f010011a <print_welcome_message>:
}


void print_welcome_message()
{
f010011a:	55                   	push   %ebp
f010011b:	89 e5                	mov    %esp,%ebp
f010011d:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 31 c7 11 f0       	push   $0xf011c731
f0100128:	e8 09 73 00 00       	call   f0107436 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100130:	83 ec 0c             	sub    $0xc,%esp
f0100133:	68 38 c7 11 f0       	push   $0xf011c738
f0100138:	e8 f9 72 00 00       	call   f0107436 <cprintf>
f010013d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100140:	83 ec 0c             	sub    $0xc,%esp
f0100143:	68 80 c7 11 f0       	push   $0xf011c780
f0100148:	e8 e9 72 00 00       	call   f0107436 <cprintf>
f010014d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100150:	83 ec 0c             	sub    $0xc,%esp
f0100153:	68 c8 c7 11 f0       	push   $0xf011c7c8
f0100158:	e8 d9 72 00 00       	call   f0107436 <cprintf>
f010015d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100160:	83 ec 0c             	sub    $0xc,%esp
f0100163:	68 80 c7 11 f0       	push   $0xf011c780
f0100168:	e8 c9 72 00 00       	call   f0107436 <cprintf>
f010016d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100170:	83 ec 0c             	sub    $0xc,%esp
f0100173:	68 38 c7 11 f0       	push   $0xf011c738
f0100178:	e8 b9 72 00 00       	call   f0107436 <cprintf>
f010017d:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100180:	83 ec 0c             	sub    $0xc,%esp
f0100183:	68 0d c8 11 f0       	push   $0xf011c80d
f0100188:	e8 a9 72 00 00       	call   f0107436 <cprintf>
f010018d:	83 c4 10             	add    $0x10,%esp
}
f0100190:	90                   	nop
f0100191:	c9                   	leave  
f0100192:	c3                   	ret    

f0100193 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100193:	55                   	push   %ebp
f0100194:	89 e5                	mov    %esp,%ebp
f0100196:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100199:	8b 45 10             	mov    0x10(%ebp),%eax
f010019c:	a3 00 1f 34 f0       	mov    %eax,0xf0341f00

	va_start(ap, fmt);
f01001a1:	8d 45 10             	lea    0x10(%ebp),%eax
f01001a4:	83 c0 04             	add    $0x4,%eax
f01001a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001aa:	83 ec 04             	sub    $0x4,%esp
f01001ad:	ff 75 0c             	pushl  0xc(%ebp)
f01001b0:	ff 75 08             	pushl  0x8(%ebp)
f01001b3:	68 12 c8 11 f0       	push   $0xf011c812
f01001b8:	e8 79 72 00 00       	call   f0107436 <cprintf>
f01001bd:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01001c3:	83 ec 08             	sub    $0x8,%esp
f01001c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01001c9:	50                   	push   %eax
f01001ca:	e8 3e 72 00 00       	call   f010740d <vcprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 2b c8 11 f0       	push   $0xf011c82b
f01001da:	e8 57 72 00 00       	call   f0107436 <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001e2:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f01001e7:	85 c0                	test   %eax,%eax
f01001e9:	74 12                	je     f01001fd <_panic+0x6a>
f01001eb:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f01001f0:	8b 40 54             	mov    0x54(%eax),%eax
f01001f3:	83 f8 02             	cmp    $0x2,%eax
f01001f6:	75 05                	jne    f01001fd <_panic+0x6a>
	{
		//2015
		env_exit();
f01001f8:	e8 97 6b 00 00       	call   f0106d94 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f01001fd:	e8 60 aa 00 00       	call   f010ac62 <fos_scheduler>

f0100202 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100202:	55                   	push   %ebp
f0100203:	89 e5                	mov    %esp,%ebp
f0100205:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100208:	8b 45 10             	mov    0x10(%ebp),%eax
f010020b:	a3 00 1f 34 f0       	mov    %eax,0xf0341f00

	va_start(ap, fmt);
f0100210:	8d 45 10             	lea    0x10(%ebp),%eax
f0100213:	83 c0 04             	add    $0x4,%eax
f0100216:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100219:	83 ec 04             	sub    $0x4,%esp
f010021c:	ff 75 0c             	pushl  0xc(%ebp)
f010021f:	ff 75 08             	pushl  0x8(%ebp)
f0100222:	68 12 c8 11 f0       	push   $0xf011c812
f0100227:	e8 0a 72 00 00       	call   f0107436 <cprintf>
f010022c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010022f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100232:	83 ec 08             	sub    $0x8,%esp
f0100235:	ff 75 f4             	pushl  -0xc(%ebp)
f0100238:	50                   	push   %eax
f0100239:	e8 cf 71 00 00       	call   f010740d <vcprintf>
f010023e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100241:	83 ec 0c             	sub    $0xc,%esp
f0100244:	68 2b c8 11 f0       	push   $0xf011c82b
f0100249:	e8 e8 71 00 00       	call   f0107436 <cprintf>
f010024e:	83 c4 10             	add    $0x10,%esp

dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100251:	e8 25 b7 00 00       	call   f010b97b <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100256:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010025b:	85 c0                	test   %eax,%eax
f010025d:	74 14                	je     f0100273 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f010025f:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0100264:	8b 40 4c             	mov    0x4c(%eax),%eax
f0100267:	83 ec 0c             	sub    $0xc,%esp
f010026a:	50                   	push   %eax
f010026b:	e8 eb b4 00 00       	call   f010b75b <sched_exit_env>
f0100270:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100273:	e8 ea a9 00 00       	call   f010ac62 <fos_scheduler>

f0100278 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100278:	55                   	push   %ebp
f0100279:	89 e5                	mov    %esp,%ebp
f010027b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010027e:	8b 45 10             	mov    0x10(%ebp),%eax
f0100281:	a3 00 1f 34 f0       	mov    %eax,0xf0341f00

	va_start(ap, fmt);
f0100286:	8d 45 10             	lea    0x10(%ebp),%eax
f0100289:	83 c0 04             	add    $0x4,%eax
f010028c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010028f:	83 ec 04             	sub    $0x4,%esp
f0100292:	ff 75 0c             	pushl  0xc(%ebp)
f0100295:	ff 75 08             	pushl  0x8(%ebp)
f0100298:	68 12 c8 11 f0       	push   $0xf011c812
f010029d:	e8 94 71 00 00       	call   f0107436 <cprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002a5:	8b 45 10             	mov    0x10(%ebp),%eax
f01002a8:	83 ec 08             	sub    $0x8,%esp
f01002ab:	ff 75 f4             	pushl  -0xc(%ebp)
f01002ae:	50                   	push   %eax
f01002af:	e8 59 71 00 00       	call   f010740d <vcprintf>
f01002b4:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002b7:	83 ec 0c             	sub    $0xc,%esp
f01002ba:	68 2b c8 11 f0       	push   $0xf011c82b
f01002bf:	e8 72 71 00 00       	call   f0107436 <cprintf>
f01002c4:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002c7:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f01002cc:	85 c0                	test   %eax,%eax
f01002ce:	74 28                	je     f01002f8 <_panic_into_prompt+0x80>
f01002d0:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f01002d5:	8b 40 54             	mov    0x54(%eax),%eax
f01002d8:	83 f8 02             	cmp    $0x2,%eax
f01002db:	75 1b                	jne    f01002f8 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002dd:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f01002e2:	83 ec 0c             	sub    $0xc,%esp
f01002e5:	50                   	push   %eax
f01002e6:	e8 a0 ac 00 00       	call   f010af8b <sched_insert_exit>
f01002eb:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01002ee:	c7 05 50 21 34 f0 00 	movl   $0x0,0xf0342150
f01002f5:	00 00 00 
	}

	lcr3(phys_page_directory);
f01002f8:	a1 78 da 3c f0       	mov    0xf03cda78,%eax
f01002fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100300:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100303:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100306:	c7 05 00 f6 3a f0 00 	movl   $0x0,0xf03af600
f010030d:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100310:	83 ec 0c             	sub    $0xc,%esp
f0100313:	6a 00                	push   $0x0
f0100315:	e8 f7 14 00 00       	call   f0101811 <run_command_prompt>
f010031a:	83 c4 10             	add    $0x10,%esp
f010031d:	eb f1                	jmp    f0100310 <_panic_into_prompt+0x98>

f010031f <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f010031f:	55                   	push   %ebp
f0100320:	89 e5                	mov    %esp,%ebp
f0100322:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100325:	8d 45 10             	lea    0x10(%ebp),%eax
f0100328:	83 c0 04             	add    $0x4,%eax
f010032b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f010032e:	83 ec 04             	sub    $0x4,%esp
f0100331:	ff 75 0c             	pushl  0xc(%ebp)
f0100334:	ff 75 08             	pushl  0x8(%ebp)
f0100337:	68 2d c8 11 f0       	push   $0xf011c82d
f010033c:	e8 f5 70 00 00       	call   f0107436 <cprintf>
f0100341:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100344:	8b 45 10             	mov    0x10(%ebp),%eax
f0100347:	83 ec 08             	sub    $0x8,%esp
f010034a:	ff 75 f4             	pushl  -0xc(%ebp)
f010034d:	50                   	push   %eax
f010034e:	e8 ba 70 00 00       	call   f010740d <vcprintf>
f0100353:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100356:	83 ec 0c             	sub    $0xc,%esp
f0100359:	68 2b c8 11 f0       	push   $0xf011c82b
f010035e:	e8 d3 70 00 00       	call   f0107436 <cprintf>
f0100363:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100366:	90                   	nop
f0100367:	c9                   	leave  
f0100368:	c3                   	ret    

f0100369 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100369:	55                   	push   %ebp
f010036a:	89 e5                	mov    %esp,%ebp
f010036c:	83 ec 10             	sub    $0x10,%esp
f010036f:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100376:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100379:	89 c2                	mov    %eax,%edx
f010037b:	ec                   	in     (%dx),%al
f010037c:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010037f:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100382:	0f b6 c0             	movzbl %al,%eax
f0100385:	83 e0 01             	and    $0x1,%eax
f0100388:	85 c0                	test   %eax,%eax
f010038a:	75 07                	jne    f0100393 <serial_proc_data+0x2a>
		return -1;
f010038c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100391:	eb 16                	jmp    f01003a9 <serial_proc_data+0x40>
f0100393:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010039a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010039d:	89 c2                	mov    %eax,%edx
f010039f:	ec                   	in     (%dx),%al
f01003a0:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003a3:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003a6:	0f b6 c0             	movzbl %al,%eax
}
f01003a9:	c9                   	leave  
f01003aa:	c3                   	ret    

f01003ab <serial_intr>:

void
serial_intr(void)
{
f01003ab:	55                   	push   %ebp
f01003ac:	89 e5                	mov    %esp,%ebp
f01003ae:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003b1:	a1 24 1f 34 f0       	mov    0xf0341f24,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 10                	je     f01003ca <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003ba:	83 ec 0c             	sub    $0xc,%esp
f01003bd:	68 69 03 10 f0       	push   $0xf0100369
f01003c2:	e8 58 07 00 00       	call   f0100b1f <cons_intr>
f01003c7:	83 c4 10             	add    $0x10,%esp
}
f01003ca:	90                   	nop
f01003cb:	c9                   	leave  
f01003cc:	c3                   	ret    

f01003cd <serial_init>:

void
serial_init(void)
{
f01003cd:	55                   	push   %ebp
f01003ce:	89 e5                	mov    %esp,%ebp
f01003d0:	83 ec 40             	sub    $0x40,%esp
f01003d3:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003da:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003de:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003e1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003e4:	ee                   	out    %al,(%dx)
f01003e5:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ec:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01003f0:	8a 45 cf             	mov    -0x31(%ebp),%al
f01003f3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01003f6:	ee                   	out    %al,(%dx)
f01003f7:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01003fe:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100402:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100405:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100408:	ee                   	out    %al,(%dx)
f0100409:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100410:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100414:	8a 45 d1             	mov    -0x2f(%ebp),%al
f0100417:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010041a:	ee                   	out    %al,(%dx)
f010041b:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100422:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100426:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100429:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010042c:	ee                   	out    %al,(%dx)
f010042d:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100434:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f0100438:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010043b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010043e:	ee                   	out    %al,(%dx)
f010043f:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100446:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010044a:	8a 45 d4             	mov    -0x2c(%ebp),%al
f010044d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100450:	ee                   	out    %al,(%dx)
f0100451:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100458:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010045b:	89 c2                	mov    %eax,%edx
f010045d:	ec                   	in     (%dx),%al
f010045e:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100461:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100464:	3c ff                	cmp    $0xff,%al
f0100466:	0f 95 c0             	setne  %al
f0100469:	0f b6 c0             	movzbl %al,%eax
f010046c:	a3 24 1f 34 f0       	mov    %eax,0xf0341f24
f0100471:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100478:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010047b:	89 c2                	mov    %eax,%edx
f010047d:	ec                   	in     (%dx),%al
f010047e:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100481:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100488:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010048b:	89 c2                	mov    %eax,%edx
f010048d:	ec                   	in     (%dx),%al
f010048e:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100491:	90                   	nop
f0100492:	c9                   	leave  
f0100493:	c3                   	ret    

f0100494 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100494:	55                   	push   %ebp
f0100495:	89 e5                	mov    %esp,%ebp
f0100497:	83 ec 20             	sub    $0x20,%esp
f010049a:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004a4:	89 c2                	mov    %eax,%edx
f01004a6:	ec                   	in     (%dx),%al
f01004a7:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004aa:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004b4:	89 c2                	mov    %eax,%edx
f01004b6:	ec                   	in     (%dx),%al
f01004b7:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004ba:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004c4:	89 c2                	mov    %eax,%edx
f01004c6:	ec                   	in     (%dx),%al
f01004c7:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004ca:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004d4:	89 c2                	mov    %eax,%edx
f01004d6:	ec                   	in     (%dx),%al
f01004d7:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004da:	90                   	nop
f01004db:	c9                   	leave  
f01004dc:	c3                   	ret    

f01004dd <lpt_putc>:

static void
lpt_putc(int c)
{
f01004dd:	55                   	push   %ebp
f01004de:	89 e5                	mov    %esp,%ebp
f01004e0:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004ea:	eb 08                	jmp    f01004f4 <lpt_putc+0x17>
		delay();
f01004ec:	e8 a3 ff ff ff       	call   f0100494 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f1:	ff 45 fc             	incl   -0x4(%ebp)
f01004f4:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01004fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01004fe:	89 c2                	mov    %eax,%edx
f0100500:	ec                   	in     (%dx),%al
f0100501:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100504:	8a 45 eb             	mov    -0x15(%ebp),%al
f0100507:	84 c0                	test   %al,%al
f0100509:	78 09                	js     f0100514 <lpt_putc+0x37>
f010050b:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100512:	7e d8                	jle    f01004ec <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100514:	8b 45 08             	mov    0x8(%ebp),%eax
f0100517:	0f b6 c0             	movzbl %al,%eax
f010051a:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100521:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100524:	8a 45 e8             	mov    -0x18(%ebp),%al
f0100527:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010052a:	ee                   	out    %al,(%dx)
f010052b:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100532:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100536:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100539:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010053c:	ee                   	out    %al,(%dx)
f010053d:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100544:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100548:	8a 45 ea             	mov    -0x16(%ebp),%al
f010054b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010054e:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f010054f:	90                   	nop
f0100550:	c9                   	leave  
f0100551:	c3                   	ret    

f0100552 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100552:	55                   	push   %ebp
f0100553:	89 e5                	mov    %esp,%ebp
f0100555:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100558:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f010055f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100562:	66 8b 00             	mov    (%eax),%ax
f0100565:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100569:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010056c:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100571:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100574:	66 8b 00             	mov    (%eax),%ax
f0100577:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010057b:	74 13                	je     f0100590 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010057d:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100584:	c7 05 28 1f 34 f0 b4 	movl   $0x3b4,0xf0341f28
f010058b:	03 00 00 
f010058e:	eb 14                	jmp    f01005a4 <cga_init+0x52>
	} else {
		*cp = was;
f0100590:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100593:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100597:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010059a:	c7 05 28 1f 34 f0 d4 	movl   $0x3d4,0xf0341f28
f01005a1:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005a4:	a1 28 1f 34 f0       	mov    0xf0341f28,%eax
f01005a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005ac:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005b0:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005b6:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005b7:	a1 28 1f 34 f0       	mov    0xf0341f28,%eax
f01005bc:	40                   	inc    %eax
f01005bd:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005c3:	89 c2                	mov    %eax,%edx
f01005c5:	ec                   	in     (%dx),%al
f01005c6:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005c9:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005cc:	0f b6 c0             	movzbl %al,%eax
f01005cf:	c1 e0 08             	shl    $0x8,%eax
f01005d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005d5:	a1 28 1f 34 f0       	mov    0xf0341f28,%eax
f01005da:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005dd:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005e1:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005e7:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005e8:	a1 28 1f 34 f0       	mov    0xf0341f28,%eax
f01005ed:	40                   	inc    %eax
f01005ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01005f4:	89 c2                	mov    %eax,%edx
f01005f6:	ec                   	in     (%dx),%al
f01005f7:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01005fa:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01005fd:	0f b6 c0             	movzbl %al,%eax
f0100600:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100603:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100606:	a3 2c 1f 34 f0       	mov    %eax,0xf0341f2c
	crt_pos = pos;
f010060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010060e:	66 a3 30 1f 34 f0    	mov    %ax,0xf0341f30
}
f0100614:	90                   	nop
f0100615:	c9                   	leave  
f0100616:	c3                   	ret    

f0100617 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f0100617:	55                   	push   %ebp
f0100618:	89 e5                	mov    %esp,%ebp
f010061a:	53                   	push   %ebx
f010061b:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f010061e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100621:	b0 00                	mov    $0x0,%al
f0100623:	85 c0                	test   %eax,%eax
f0100625:	75 07                	jne    f010062e <cga_putc+0x17>
		c |= 0x0700;
f0100627:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f010062e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100631:	0f b6 c0             	movzbl %al,%eax
f0100634:	83 f8 0a             	cmp    $0xa,%eax
f0100637:	74 77                	je     f01006b0 <cga_putc+0x99>
f0100639:	83 f8 0a             	cmp    $0xa,%eax
f010063c:	7f 13                	jg     f0100651 <cga_putc+0x3a>
f010063e:	83 f8 08             	cmp    $0x8,%eax
f0100641:	74 2e                	je     f0100671 <cga_putc+0x5a>
f0100643:	83 f8 09             	cmp    $0x9,%eax
f0100646:	0f 84 a8 00 00 00    	je     f01006f4 <cga_putc+0xdd>
f010064c:	e9 22 01 00 00       	jmp    f0100773 <cga_putc+0x15c>
f0100651:	3d e4 00 00 00       	cmp    $0xe4,%eax
f0100656:	0f 84 de 00 00 00    	je     f010073a <cga_putc+0x123>
f010065c:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100661:	0f 84 f1 00 00 00    	je     f0100758 <cga_putc+0x141>
f0100667:	83 f8 0d             	cmp    $0xd,%eax
f010066a:	74 5d                	je     f01006c9 <cga_putc+0xb2>
f010066c:	e9 02 01 00 00       	jmp    f0100773 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100671:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100677:	66 85 c0             	test   %ax,%ax
f010067a:	0f 84 4f 01 00 00    	je     f01007cf <cga_putc+0x1b8>
			crt_pos--;
f0100680:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100686:	48                   	dec    %eax
f0100687:	66 a3 30 1f 34 f0    	mov    %ax,0xf0341f30
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068d:	8b 15 2c 1f 34 f0    	mov    0xf0341f2c,%edx
f0100693:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100699:	0f b7 c0             	movzwl %ax,%eax
f010069c:	01 c0                	add    %eax,%eax
f010069e:	01 c2                	add    %eax,%edx
f01006a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a3:	b0 00                	mov    $0x0,%al
f01006a5:	83 c8 20             	or     $0x20,%eax
f01006a8:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006ab:	e9 1f 01 00 00       	jmp    f01007cf <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f01006b0:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f01006b6:	83 c0 50             	add    $0x50,%eax
f01006b9:	66 a3 30 1f 34 f0    	mov    %ax,0xf0341f30
		text_length = 0;
f01006bf:	c7 05 20 1f 34 f0 00 	movl   $0x0,0xf0341f20
f01006c6:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006c9:	66 8b 0d 30 1f 34 f0 	mov    0xf0341f30,%cx
f01006d0:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f01006d6:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006db:	ba 00 00 00 00       	mov    $0x0,%edx
f01006e0:	66 f7 f3             	div    %bx
f01006e3:	89 d0                	mov    %edx,%eax
f01006e5:	29 c1                	sub    %eax,%ecx
f01006e7:	89 c8                	mov    %ecx,%eax
f01006e9:	66 a3 30 1f 34 f0    	mov    %ax,0xf0341f30
		break;
f01006ef:	e9 e5 00 00 00       	jmp    f01007d9 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01006f4:	83 ec 0c             	sub    $0xc,%esp
f01006f7:	6a 20                	push   $0x20
f01006f9:	e8 ba 05 00 00       	call   f0100cb8 <cons_putc>
f01006fe:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100701:	83 ec 0c             	sub    $0xc,%esp
f0100704:	6a 20                	push   $0x20
f0100706:	e8 ad 05 00 00       	call   f0100cb8 <cons_putc>
f010070b:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070e:	83 ec 0c             	sub    $0xc,%esp
f0100711:	6a 20                	push   $0x20
f0100713:	e8 a0 05 00 00       	call   f0100cb8 <cons_putc>
f0100718:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010071b:	83 ec 0c             	sub    $0xc,%esp
f010071e:	6a 20                	push   $0x20
f0100720:	e8 93 05 00 00       	call   f0100cb8 <cons_putc>
f0100725:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100728:	83 ec 0c             	sub    $0xc,%esp
f010072b:	6a 20                	push   $0x20
f010072d:	e8 86 05 00 00       	call   f0100cb8 <cons_putc>
f0100732:	83 c4 10             	add    $0x10,%esp
		break;
f0100735:	e9 9f 00 00 00       	jmp    f01007d9 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f010073a:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100740:	66 85 c0             	test   %ax,%ax
f0100743:	0f 84 89 00 00 00    	je     f01007d2 <cga_putc+0x1bb>
		     crt_pos--;
f0100749:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f010074f:	48                   	dec    %eax
f0100750:	66 a3 30 1f 34 f0    	mov    %ax,0xf0341f30
		     break;
f0100756:	eb 7a                	jmp    f01007d2 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100758:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f010075e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100762:	77 71                	ja     f01007d5 <cga_putc+0x1be>
			     crt_pos++;
f0100764:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f010076a:	40                   	inc    %eax
f010076b:	66 a3 30 1f 34 f0    	mov    %ax,0xf0341f30
			     break;
f0100771:	eb 62                	jmp    f01007d5 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100773:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f010077a:	74 5c                	je     f01007d8 <cga_putc+0x1c1>
f010077c:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100783:	74 53                	je     f01007d8 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100785:	8b 0d 2c 1f 34 f0    	mov    0xf0341f2c,%ecx
f010078b:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100791:	8d 50 01             	lea    0x1(%eax),%edx
f0100794:	66 89 15 30 1f 34 f0 	mov    %dx,0xf0341f30
f010079b:	0f b7 c0             	movzwl %ax,%eax
f010079e:	01 c0                	add    %eax,%eax
f01007a0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01007a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01007a6:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f01007a9:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f01007af:	0f b7 c0             	movzwl %ax,%eax
f01007b2:	8b 15 20 1f 34 f0    	mov    0xf0341f20,%edx
f01007b8:	81 c2 80 07 00 00    	add    $0x780,%edx
f01007be:	39 d0                	cmp    %edx,%eax
f01007c0:	7e 16                	jle    f01007d8 <cga_putc+0x1c1>
				text_length++;
f01007c2:	a1 20 1f 34 f0       	mov    0xf0341f20,%eax
f01007c7:	40                   	inc    %eax
f01007c8:	a3 20 1f 34 f0       	mov    %eax,0xf0341f20
		}
		break;
f01007cd:	eb 09                	jmp    f01007d8 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007cf:	90                   	nop
f01007d0:	eb 07                	jmp    f01007d9 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f01007d2:	90                   	nop
f01007d3:	eb 04                	jmp    f01007d9 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f01007d5:	90                   	nop
f01007d6:	eb 01                	jmp    f01007d9 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01007d8:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007d9:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f01007df:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007e3:	76 58                	jbe    f010083d <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007e5:	a1 2c 1f 34 f0       	mov    0xf0341f2c,%eax
f01007ea:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007f0:	a1 2c 1f 34 f0       	mov    0xf0341f2c,%eax
f01007f5:	83 ec 04             	sub    $0x4,%esp
f01007f8:	68 00 0f 00 00       	push   $0xf00
f01007fd:	52                   	push   %edx
f01007fe:	50                   	push   %eax
f01007ff:	e8 d9 ac 01 00       	call   f011b4dd <memcpy>
f0100804:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100807:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f010080e:	eb 15                	jmp    f0100825 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f0100810:	8b 15 2c 1f 34 f0    	mov    0xf0341f2c,%edx
f0100816:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100819:	01 c0                	add    %eax,%eax
f010081b:	01 d0                	add    %edx,%eax
f010081d:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100822:	ff 45 f4             	incl   -0xc(%ebp)
f0100825:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f010082c:	7e e2                	jle    f0100810 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f010082e:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100834:	83 e8 50             	sub    $0x50,%eax
f0100837:	66 a3 30 1f 34 f0    	mov    %ax,0xf0341f30
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f010083d:	a1 28 1f 34 f0       	mov    0xf0341f28,%eax
f0100842:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100845:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100849:	8a 45 e0             	mov    -0x20(%ebp),%al
f010084c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010084f:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100850:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100856:	66 c1 e8 08          	shr    $0x8,%ax
f010085a:	0f b6 c0             	movzbl %al,%eax
f010085d:	8b 15 28 1f 34 f0    	mov    0xf0341f28,%edx
f0100863:	42                   	inc    %edx
f0100864:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100867:	88 45 e1             	mov    %al,-0x1f(%ebp)
f010086a:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010086d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100870:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100871:	a1 28 1f 34 f0       	mov    0xf0341f28,%eax
f0100876:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100879:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010087d:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100880:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100883:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100884:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f010088a:	0f b6 c0             	movzbl %al,%eax
f010088d:	8b 15 28 1f 34 f0    	mov    0xf0341f28,%edx
f0100893:	42                   	inc    %edx
f0100894:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100897:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010089a:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010089d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008a0:	ee                   	out    %al,(%dx)
}
f01008a1:	90                   	nop
f01008a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008a5:	c9                   	leave  
f01008a6:	c3                   	ret    

f01008a7 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008a7:	55                   	push   %ebp
f01008a8:	89 e5                	mov    %esp,%ebp
f01008aa:	83 ec 28             	sub    $0x28,%esp
f01008ad:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01008b7:	89 c2                	mov    %eax,%edx
f01008b9:	ec                   	in     (%dx),%al
f01008ba:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01008bd:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f01008c0:	0f b6 c0             	movzbl %al,%eax
f01008c3:	83 e0 01             	and    $0x1,%eax
f01008c6:	85 c0                	test   %eax,%eax
f01008c8:	75 0a                	jne    f01008d4 <kbd_proc_data+0x2d>
		return -1;
f01008ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01008cf:	e9 2a 02 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
f01008d4:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01008de:	89 c2                	mov    %eax,%edx
f01008e0:	ec                   	in     (%dx),%al
f01008e1:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f01008e4:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f01008e7:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008ea:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008ee:	75 17                	jne    f0100907 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008f0:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f01008f5:	83 c8 40             	or     $0x40,%eax
f01008f8:	a3 48 21 34 f0       	mov    %eax,0xf0342148
		return 0;
f01008fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0100902:	e9 f7 01 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100907:	8a 45 f3             	mov    -0xd(%ebp),%al
f010090a:	84 c0                	test   %al,%al
f010090c:	79 44                	jns    f0100952 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f010090e:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100913:	83 e0 40             	and    $0x40,%eax
f0100916:	85 c0                	test   %eax,%eax
f0100918:	75 08                	jne    f0100922 <kbd_proc_data+0x7b>
f010091a:	8a 45 f3             	mov    -0xd(%ebp),%al
f010091d:	83 e0 7f             	and    $0x7f,%eax
f0100920:	eb 03                	jmp    f0100925 <kbd_proc_data+0x7e>
f0100922:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100925:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100928:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010092c:	8a 80 20 70 15 f0    	mov    -0xfea8fe0(%eax),%al
f0100932:	83 c8 40             	or     $0x40,%eax
f0100935:	0f b6 c0             	movzbl %al,%eax
f0100938:	f7 d0                	not    %eax
f010093a:	89 c2                	mov    %eax,%edx
f010093c:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100941:	21 d0                	and    %edx,%eax
f0100943:	a3 48 21 34 f0       	mov    %eax,0xf0342148
		return 0;
f0100948:	b8 00 00 00 00       	mov    $0x0,%eax
f010094d:	e9 ac 01 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100952:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100957:	83 e0 40             	and    $0x40,%eax
f010095a:	85 c0                	test   %eax,%eax
f010095c:	74 11                	je     f010096f <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f010095e:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100962:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100967:	83 e0 bf             	and    $0xffffffbf,%eax
f010096a:	a3 48 21 34 f0       	mov    %eax,0xf0342148
	}

	shift |= shiftcode[data];
f010096f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100973:	8a 80 20 70 15 f0    	mov    -0xfea8fe0(%eax),%al
f0100979:	0f b6 d0             	movzbl %al,%edx
f010097c:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100981:	09 d0                	or     %edx,%eax
f0100983:	a3 48 21 34 f0       	mov    %eax,0xf0342148
	shift ^= togglecode[data];
f0100988:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010098c:	8a 80 20 71 15 f0    	mov    -0xfea8ee0(%eax),%al
f0100992:	0f b6 d0             	movzbl %al,%edx
f0100995:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f010099a:	31 d0                	xor    %edx,%eax
f010099c:	a3 48 21 34 f0       	mov    %eax,0xf0342148

	c = charcode[shift & (CTL | SHIFT)][data];
f01009a1:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f01009a6:	83 e0 03             	and    $0x3,%eax
f01009a9:	8b 14 85 20 75 15 f0 	mov    -0xfea8ae0(,%eax,4),%edx
f01009b0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009b4:	01 d0                	add    %edx,%eax
f01009b6:	8a 00                	mov    (%eax),%al
f01009b8:	0f b6 c0             	movzbl %al,%eax
f01009bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f01009be:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009c5:	0f 85 9c 00 00 00    	jne    f0100a67 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f01009cb:	a1 20 1f 34 f0       	mov    0xf0341f20,%eax
f01009d0:	85 c0                	test   %eax,%eax
f01009d2:	0f 8e 85 00 00 00    	jle    f0100a5d <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f01009d8:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f01009de:	0f b7 c0             	movzwl %ax,%eax
f01009e1:	8b 15 20 1f 34 f0    	mov    0xf0341f20,%edx
f01009e7:	81 c2 80 07 00 00    	add    $0x780,%edx
f01009ed:	39 d0                	cmp    %edx,%eax
f01009ef:	75 0a                	jne    f01009fb <kbd_proc_data+0x154>
				return 0;
f01009f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01009f6:	e9 03 01 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
			else {
			text_length--;
f01009fb:	a1 20 1f 34 f0       	mov    0xf0341f20,%eax
f0100a00:	48                   	dec    %eax
f0100a01:	a3 20 1f 34 f0       	mov    %eax,0xf0341f20
				int crt_pos_Length = crt_pos - 1925;
f0100a06:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100a0c:	0f b7 c0             	movzwl %ax,%eax
f0100a0f:	2d 85 07 00 00       	sub    $0x785,%eax
f0100a14:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a17:	66 a1 30 1f 34 f0    	mov    0xf0341f30,%ax
f0100a1d:	0f b7 c0             	movzwl %ax,%eax
f0100a20:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a23:	eb 26                	jmp    f0100a4b <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100a25:	8b 15 2c 1f 34 f0    	mov    0xf0341f2c,%edx
f0100a2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100a2e:	01 c0                	add    %eax,%eax
f0100a30:	01 c2                	add    %eax,%edx
f0100a32:	a1 2c 1f 34 f0       	mov    0xf0341f2c,%eax
f0100a37:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100a3a:	41                   	inc    %ecx
f0100a3b:	01 c9                	add    %ecx,%ecx
f0100a3d:	01 c8                	add    %ecx,%eax
f0100a3f:	66 8b 00             	mov    (%eax),%ax
f0100a42:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100a45:	ff 45 e8             	incl   -0x18(%ebp)
f0100a48:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a4b:	a1 20 1f 34 f0       	mov    0xf0341f20,%eax
f0100a50:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100a53:	7e d0                	jle    f0100a25 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a58:	e9 a1 00 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100a5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a62:	e9 97 00 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100a67:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100a6c:	83 e0 08             	and    $0x8,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	74 22                	je     f0100a95 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100a73:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a77:	7e 0c                	jle    f0100a85 <kbd_proc_data+0x1de>
f0100a79:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a7d:	7f 06                	jg     f0100a85 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100a7f:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a83:	eb 10                	jmp    f0100a95 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100a85:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a89:	7e 0a                	jle    f0100a95 <kbd_proc_data+0x1ee>
f0100a8b:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a8f:	7f 04                	jg     f0100a95 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100a91:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100a95:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100a9a:	83 f8 10             	cmp    $0x10,%eax
f0100a9d:	75 13                	jne    f0100ab2 <kbd_proc_data+0x20b>
f0100a9f:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100aa3:	7e 0d                	jle    f0100ab2 <kbd_proc_data+0x20b>
f0100aa5:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100aa9:	7f 07                	jg     f0100ab2 <kbd_proc_data+0x20b>
		return 0;
f0100aab:	b8 00 00 00 00       	mov    $0x0,%eax
f0100ab0:	eb 4c                	jmp    f0100afe <kbd_proc_data+0x257>
	if (c == 255)
f0100ab2:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100ab9:	75 07                	jne    f0100ac2 <kbd_proc_data+0x21b>
		return 0;
f0100abb:	b8 00 00 00 00       	mov    $0x0,%eax
f0100ac0:	eb 3c                	jmp    f0100afe <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100ac2:	a1 48 21 34 f0       	mov    0xf0342148,%eax
f0100ac7:	f7 d0                	not    %eax
f0100ac9:	83 e0 06             	and    $0x6,%eax
f0100acc:	85 c0                	test   %eax,%eax
f0100ace:	75 2b                	jne    f0100afb <kbd_proc_data+0x254>
f0100ad0:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100ad7:	75 22                	jne    f0100afb <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100ad9:	83 ec 0c             	sub    $0xc,%esp
f0100adc:	68 48 c8 11 f0       	push   $0xf011c848
f0100ae1:	e8 50 69 00 00       	call   f0107436 <cprintf>
f0100ae6:	83 c4 10             	add    $0x10,%esp
f0100ae9:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100af0:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100af4:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100af7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100afa:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100afb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100afe:	c9                   	leave  
f0100aff:	c3                   	ret    

f0100b00 <kbd_intr>:

void
kbd_intr(void)
{
f0100b00:	55                   	push   %ebp
f0100b01:	89 e5                	mov    %esp,%ebp
f0100b03:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100b06:	83 ec 0c             	sub    $0xc,%esp
f0100b09:	68 a7 08 10 f0       	push   $0xf01008a7
f0100b0e:	e8 0c 00 00 00       	call   f0100b1f <cons_intr>
f0100b13:	83 c4 10             	add    $0x10,%esp
}
f0100b16:	90                   	nop
f0100b17:	c9                   	leave  
f0100b18:	c3                   	ret    

f0100b19 <kbd_init>:

void
kbd_init(void)
{
f0100b19:	55                   	push   %ebp
f0100b1a:	89 e5                	mov    %esp,%ebp
}
f0100b1c:	90                   	nop
f0100b1d:	5d                   	pop    %ebp
f0100b1e:	c3                   	ret    

f0100b1f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100b1f:	55                   	push   %ebp
f0100b20:	89 e5                	mov    %esp,%ebp
f0100b22:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100b25:	eb 35                	jmp    f0100b5c <cons_intr+0x3d>
		if (c == 0)
f0100b27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b2b:	75 02                	jne    f0100b2f <cons_intr+0x10>
			continue;
f0100b2d:	eb 2d                	jmp    f0100b5c <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100b2f:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100b34:	8d 50 01             	lea    0x1(%eax),%edx
f0100b37:	89 15 44 21 34 f0    	mov    %edx,0xf0342144
f0100b3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b40:	88 90 40 1f 34 f0    	mov    %dl,-0xfcbe0c0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100b46:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100b4b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b50:	75 0a                	jne    f0100b5c <cons_intr+0x3d>
			cons.wpos = 0;
f0100b52:	c7 05 44 21 34 f0 00 	movl   $0x0,0xf0342144
f0100b59:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100b5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100b5f:	ff d0                	call   *%eax
f0100b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b64:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b68:	75 bd                	jne    f0100b27 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100b6a:	90                   	nop
f0100b6b:	c9                   	leave  
f0100b6c:	c3                   	ret    

f0100b6d <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100b6d:	55                   	push   %ebp
f0100b6e:	89 e5                	mov    %esp,%ebp
f0100b70:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100b73:	e8 33 f8 ff ff       	call   f01003ab <serial_intr>
	kbd_intr();
f0100b78:	e8 83 ff ff ff       	call   f0100b00 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100b7d:	8b 15 40 21 34 f0    	mov    0xf0342140,%edx
f0100b83:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100b88:	39 c2                	cmp    %eax,%edx
f0100b8a:	74 35                	je     f0100bc1 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b8c:	a1 40 21 34 f0       	mov    0xf0342140,%eax
f0100b91:	8d 50 01             	lea    0x1(%eax),%edx
f0100b94:	89 15 40 21 34 f0    	mov    %edx,0xf0342140
f0100b9a:	8a 80 40 1f 34 f0    	mov    -0xfcbe0c0(%eax),%al
f0100ba0:	0f b6 c0             	movzbl %al,%eax
f0100ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100ba6:	a1 40 21 34 f0       	mov    0xf0342140,%eax
f0100bab:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bb0:	75 0a                	jne    f0100bbc <cons_getc+0x4f>
			cons.rpos = 0;
f0100bb2:	c7 05 40 21 34 f0 00 	movl   $0x0,0xf0342140
f0100bb9:	00 00 00 
		return c;
f0100bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100bbf:	eb 05                	jmp    f0100bc6 <cons_getc+0x59>
	}
	return 0;
f0100bc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100bc6:	c9                   	leave  
f0100bc7:	c3                   	ret    

f0100bc8 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100bc8:	55                   	push   %ebp
f0100bc9:	89 e5                	mov    %esp,%ebp
f0100bcb:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100bce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100bd5:	a1 24 1f 34 f0       	mov    0xf0341f24,%eax
f0100bda:	85 c0                	test   %eax,%eax
f0100bdc:	74 41                	je     f0100c1f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100bde:	e8 86 f7 ff ff       	call   f0100369 <serial_proc_data>
f0100be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100be6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100bea:	74 33                	je     f0100c1f <cons_getc2+0x57>
				if (c1 == 0)
f0100bec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bf0:	74 2d                	je     f0100c1f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100bf2:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100bf7:	8d 50 01             	lea    0x1(%eax),%edx
f0100bfa:	89 15 44 21 34 f0    	mov    %edx,0xf0342144
f0100c00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100c03:	88 90 40 1f 34 f0    	mov    %dl,-0xfcbe0c0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100c09:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100c0e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c13:	75 0a                	jne    f0100c1f <cons_getc2+0x57>
						cons.wpos = 0;
f0100c15:	c7 05 44 21 34 f0 00 	movl   $0x0,0xf0342144
f0100c1c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100c1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100c26:	e8 7c fc ff ff       	call   f01008a7 <kbd_proc_data>
f0100c2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100c2e:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100c32:	74 33                	je     f0100c67 <cons_getc2+0x9f>
			if (c2 == 0)
f0100c34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c38:	74 2d                	je     f0100c67 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100c3a:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100c3f:	8d 50 01             	lea    0x1(%eax),%edx
f0100c42:	89 15 44 21 34 f0    	mov    %edx,0xf0342144
f0100c48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100c4b:	88 90 40 1f 34 f0    	mov    %dl,-0xfcbe0c0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100c51:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100c56:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c5b:	75 0a                	jne    f0100c67 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100c5d:	c7 05 44 21 34 f0 00 	movl   $0x0,0xf0342144
f0100c64:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100c67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c6b:	7e 44                	jle    f0100cb1 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100c6d:	8b 15 40 21 34 f0    	mov    0xf0342140,%edx
f0100c73:	a1 44 21 34 f0       	mov    0xf0342144,%eax
f0100c78:	39 c2                	cmp    %eax,%edx
f0100c7a:	74 35                	je     f0100cb1 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100c7c:	a1 40 21 34 f0       	mov    0xf0342140,%eax
f0100c81:	8d 50 01             	lea    0x1(%eax),%edx
f0100c84:	89 15 40 21 34 f0    	mov    %edx,0xf0342140
f0100c8a:	8a 80 40 1f 34 f0    	mov    -0xfcbe0c0(%eax),%al
f0100c90:	0f b6 c0             	movzbl %al,%eax
f0100c93:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c96:	a1 40 21 34 f0       	mov    0xf0342140,%eax
f0100c9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ca0:	75 0a                	jne    f0100cac <cons_getc2+0xe4>
				cons.rpos = 0;
f0100ca2:	c7 05 40 21 34 f0 00 	movl   $0x0,0xf0342140
f0100ca9:	00 00 00 
			return c;
f0100cac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100caf:	eb 05                	jmp    f0100cb6 <cons_getc2+0xee>
		}
	}
	return 0;
f0100cb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100cb6:	c9                   	leave  
f0100cb7:	c3                   	ret    

f0100cb8 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100cb8:	55                   	push   %ebp
f0100cb9:	89 e5                	mov    %esp,%ebp
f0100cbb:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100cbe:	ff 75 08             	pushl  0x8(%ebp)
f0100cc1:	e8 17 f8 ff ff       	call   f01004dd <lpt_putc>
f0100cc6:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100cc9:	83 ec 0c             	sub    $0xc,%esp
f0100ccc:	ff 75 08             	pushl  0x8(%ebp)
f0100ccf:	e8 43 f9 ff ff       	call   f0100617 <cga_putc>
f0100cd4:	83 c4 10             	add    $0x10,%esp
}
f0100cd7:	90                   	nop
f0100cd8:	c9                   	leave  
f0100cd9:	c3                   	ret    

f0100cda <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100cda:	55                   	push   %ebp
f0100cdb:	89 e5                	mov    %esp,%ebp
f0100cdd:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100ce0:	e8 6d f8 ff ff       	call   f0100552 <cga_init>
	kbd_init();
f0100ce5:	e8 2f fe ff ff       	call   f0100b19 <kbd_init>
	serial_init();
f0100cea:	e8 de f6 ff ff       	call   f01003cd <serial_init>

	if (!serial_exists)
f0100cef:	a1 24 1f 34 f0       	mov    0xf0341f24,%eax
f0100cf4:	85 c0                	test   %eax,%eax
f0100cf6:	75 10                	jne    f0100d08 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100cf8:	83 ec 0c             	sub    $0xc,%esp
f0100cfb:	68 54 c8 11 f0       	push   $0xf011c854
f0100d00:	e8 31 67 00 00       	call   f0107436 <cprintf>
f0100d05:	83 c4 10             	add    $0x10,%esp
}
f0100d08:	90                   	nop
f0100d09:	c9                   	leave  
f0100d0a:	c3                   	ret    

f0100d0b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100d0b:	55                   	push   %ebp
f0100d0c:	89 e5                	mov    %esp,%ebp
f0100d0e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100d11:	83 ec 0c             	sub    $0xc,%esp
f0100d14:	ff 75 08             	pushl  0x8(%ebp)
f0100d17:	e8 9c ff ff ff       	call   f0100cb8 <cons_putc>
f0100d1c:	83 c4 10             	add    $0x10,%esp
}
f0100d1f:	90                   	nop
f0100d20:	c9                   	leave  
f0100d21:	c3                   	ret    

f0100d22 <getchar>:

int
getchar(void)
{
f0100d22:	55                   	push   %ebp
f0100d23:	89 e5                	mov    %esp,%ebp
f0100d25:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100d28:	e8 40 fe ff ff       	call   f0100b6d <cons_getc>
f0100d2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d34:	74 f2                	je     f0100d28 <getchar+0x6>
		/* do nothing */;
	return c;
f0100d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d39:	c9                   	leave  
f0100d3a:	c3                   	ret    

f0100d3b <iscons>:

int
iscons(int fdnum)
{
f0100d3b:	55                   	push   %ebp
f0100d3c:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100d3e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100d43:	5d                   	pop    %ebp
f0100d44:	c3                   	ret    

f0100d45 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f0100d45:	55                   	push   %ebp
f0100d46:	89 e5                	mov    %esp,%ebp
f0100d48:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100d4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d4e:	c1 e8 0c             	shr    $0xc,%eax
f0100d51:	89 c2                	mov    %eax,%edx
f0100d53:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f0100d58:	39 c2                	cmp    %eax,%edx
f0100d5a:	72 14                	jb     f0100d70 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100d5c:	83 ec 04             	sub    $0x4,%esp
f0100d5f:	68 74 c8 11 f0       	push   $0xf011c874
f0100d64:	6a 78                	push   $0x78
f0100d66:	68 99 c8 11 f0       	push   $0xf011c899
f0100d6b:	e8 23 f4 ff ff       	call   f0100193 <_panic>
	return &frames_info[PPN(physical_address)];
f0100d70:	8b 15 64 da 3c f0    	mov    0xf03cda64,%edx
f0100d76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d79:	c1 e8 0c             	shr    $0xc,%eax
f0100d7c:	89 c1                	mov    %eax,%ecx
f0100d7e:	89 c8                	mov    %ecx,%eax
f0100d80:	01 c0                	add    %eax,%eax
f0100d82:	01 c8                	add    %ecx,%eax
f0100d84:	c1 e0 03             	shl    $0x3,%eax
f0100d87:	01 d0                	add    %edx,%eax
}
f0100d89:	c9                   	leave  
f0100d8a:	c3                   	ret    

f0100d8b <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100d8b:	55                   	push   %ebp
f0100d8c:	89 e5                	mov    %esp,%ebp
f0100d8e:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100d91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100d98:	eb 10                	jmp    f0100daa <clearandwritecommand+0x1f>
		cputchar('\b');
f0100d9a:	83 ec 0c             	sub    $0xc,%esp
f0100d9d:	6a 08                	push   $0x8
f0100d9f:	e8 67 ff ff ff       	call   f0100d0b <cputchar>
f0100da4:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100da7:	ff 45 f4             	incl   -0xc(%ebp)
f0100daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dad:	8b 00                	mov    (%eax),%eax
f0100daf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100db2:	7f e6                	jg     f0100d9a <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100db4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100db7:	c1 e0 0a             	shl    $0xa,%eax
f0100dba:	05 20 86 3c f0       	add    $0xf03c8620,%eax
f0100dbf:	83 ec 0c             	sub    $0xc,%esp
f0100dc2:	50                   	push   %eax
f0100dc3:	e8 f7 a4 01 00       	call   f011b2bf <strlen>
f0100dc8:	83 c4 10             	add    $0x10,%esp
f0100dcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100dce:	83 ec 04             	sub    $0x4,%esp
f0100dd1:	68 00 04 00 00       	push   $0x400
f0100dd6:	68 40 d6 3c f0       	push   $0xf03cd640
f0100ddb:	ff 75 10             	pushl  0x10(%ebp)
f0100dde:	e8 fa a6 01 00       	call   f011b4dd <memcpy>
f0100de3:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100de6:	8b 45 08             	mov    0x8(%ebp),%eax
f0100de9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100def:	eb 52                	jmp    f0100e43 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100df1:	8b 45 08             	mov    0x8(%ebp),%eax
f0100df4:	8b 00                	mov    (%eax),%eax
f0100df6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100df9:	c1 e2 0a             	shl    $0xa,%edx
f0100dfc:	01 d0                	add    %edx,%eax
f0100dfe:	05 20 86 3c f0       	add    $0xf03c8620,%eax
f0100e03:	8a 00                	mov    (%eax),%al
f0100e05:	0f be c0             	movsbl %al,%eax
f0100e08:	83 ec 0c             	sub    $0xc,%esp
f0100e0b:	50                   	push   %eax
f0100e0c:	e8 fa fe ff ff       	call   f0100d0b <cputchar>
f0100e11:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100e14:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e17:	8b 00                	mov    (%eax),%eax
f0100e19:	89 c2                	mov    %eax,%edx
f0100e1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0100e1e:	01 c2                	add    %eax,%edx
f0100e20:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e23:	8b 00                	mov    (%eax),%eax
f0100e25:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100e28:	c1 e1 0a             	shl    $0xa,%ecx
f0100e2b:	01 c8                	add    %ecx,%eax
f0100e2d:	05 20 86 3c f0       	add    $0xf03c8620,%eax
f0100e32:	8a 00                	mov    (%eax),%al
f0100e34:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100e36:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e39:	8b 00                	mov    (%eax),%eax
f0100e3b:	8d 50 01             	lea    0x1(%eax),%edx
f0100e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e41:	89 10                	mov    %edx,(%eax)
f0100e43:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e46:	8b 00                	mov    (%eax),%eax
f0100e48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100e4b:	7c a4                	jl     f0100df1 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100e4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e53:	89 10                	mov    %edx,(%eax)
}
f0100e55:	90                   	nop
f0100e56:	c9                   	leave  
f0100e57:	c3                   	ret    

f0100e58 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100e58:	55                   	push   %ebp
f0100e59:	89 e5                	mov    %esp,%ebp
f0100e5b:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100e5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e65:	eb 10                	jmp    f0100e77 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100e67:	83 ec 0c             	sub    $0xc,%esp
f0100e6a:	6a 08                	push   $0x8
f0100e6c:	e8 9a fe ff ff       	call   f0100d0b <cputchar>
f0100e71:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100e74:	ff 45 f4             	incl   -0xc(%ebp)
f0100e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100e7a:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100e7d:	7c e8                	jl     f0100e67 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100e7f:	83 ec 0c             	sub    $0xc,%esp
f0100e82:	ff 75 0c             	pushl  0xc(%ebp)
f0100e85:	e8 35 a4 01 00       	call   f011b2bf <strlen>
f0100e8a:	83 c4 10             	add    $0x10,%esp
f0100e8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e90:	83 ec 04             	sub    $0x4,%esp
f0100e93:	68 00 04 00 00       	push   $0x400
f0100e98:	68 40 d6 3c f0       	push   $0xf03cd640
f0100e9d:	ff 75 10             	pushl  0x10(%ebp)
f0100ea0:	e8 38 a6 01 00       	call   f011b4dd <memcpy>
f0100ea5:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100ea8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100eb1:	eb 46                	jmp    f0100ef9 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100eb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eb6:	8b 00                	mov    (%eax),%eax
f0100eb8:	89 c2                	mov    %eax,%edx
f0100eba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ebd:	01 d0                	add    %edx,%eax
f0100ebf:	8a 00                	mov    (%eax),%al
f0100ec1:	0f be c0             	movsbl %al,%eax
f0100ec4:	83 ec 0c             	sub    $0xc,%esp
f0100ec7:	50                   	push   %eax
f0100ec8:	e8 3e fe ff ff       	call   f0100d0b <cputchar>
f0100ecd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100ed0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ed3:	8b 00                	mov    (%eax),%eax
f0100ed5:	89 c2                	mov    %eax,%edx
f0100ed7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eda:	01 c2                	add    %eax,%edx
f0100edc:	8b 45 14             	mov    0x14(%ebp),%eax
f0100edf:	8b 00                	mov    (%eax),%eax
f0100ee1:	89 c1                	mov    %eax,%ecx
f0100ee3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ee6:	01 c8                	add    %ecx,%eax
f0100ee8:	8a 00                	mov    (%eax),%al
f0100eea:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100eec:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8d 50 01             	lea    0x1(%eax),%edx
f0100ef4:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ef7:	89 10                	mov    %edx,(%eax)
f0100ef9:	8b 45 14             	mov    0x14(%ebp),%eax
f0100efc:	8b 00                	mov    (%eax),%eax
f0100efe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f01:	7c b0                	jl     f0100eb3 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100f03:	8b 45 18             	mov    0x18(%ebp),%eax
f0100f06:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f09:	89 10                	mov    %edx,(%eax)
}
f0100f0b:	90                   	nop
f0100f0c:	c9                   	leave  
f0100f0d:	c3                   	ret    

f0100f0e <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100f0e:	55                   	push   %ebp
f0100f0f:	89 e5                	mov    %esp,%ebp
f0100f11:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100f14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f1b:	eb 21                	jmp    f0100f3e <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f20:	c1 e0 0a             	shl    $0xa,%eax
f0100f23:	05 20 f6 3a f0       	add    $0xf03af620,%eax
f0100f28:	83 ec 04             	sub    $0x4,%esp
f0100f2b:	68 00 04 00 00       	push   $0x400
f0100f30:	6a 00                	push   $0x0
f0100f32:	50                   	push   %eax
f0100f33:	e8 75 a5 01 00       	call   f011b4ad <memset>
f0100f38:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0100f3b:	ff 45 f4             	incl   -0xc(%ebp)
f0100f3e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0100f42:	7e d9                	jle    f0100f1d <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0100f44:	90                   	nop
f0100f45:	c9                   	leave  
f0100f46:	c3                   	ret    

f0100f47 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	57                   	push   %edi
f0100f4b:	53                   	push   %ebx
f0100f4c:	81 ec b0 08 00 00    	sub    $0x8b0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0100f52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0100f56:	74 13                	je     f0100f6b <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0100f58:	83 ec 08             	sub    $0x8,%esp
f0100f5b:	ff 75 08             	pushl  0x8(%ebp)
f0100f5e:	68 cd d2 11 f0       	push   $0xf011d2cd
f0100f63:	e8 ce 64 00 00       	call   f0107436 <cprintf>
f0100f68:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0100f6b:	a1 d4 77 15 f0       	mov    0xf01577d4,%eax
f0100f70:	40                   	inc    %eax
f0100f71:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0100f74:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
f0100f7b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f7e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0100f81:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f84:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f0100f87:	83 ec 0c             	sub    $0xc,%esp
f0100f8a:	6a 00                	push   $0x0
f0100f8c:	e8 aa fd ff ff       	call   f0100d3b <iscons>
f0100f91:	83 c4 10             	add    $0x10,%esp
f0100f94:	89 45 ac             	mov    %eax,-0x54(%ebp)
	while (1) {
		c = getchar();
f0100f97:	e8 86 fd ff ff       	call   f0100d22 <getchar>
f0100f9c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (i > lastIndex)
f0100f9f:	8b 55 90             	mov    -0x70(%ebp),%edx
f0100fa2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100fa5:	39 c2                	cmp    %eax,%edx
f0100fa7:	7e 06                	jle    f0100faf <command_prompt_readline+0x68>
			lastIndex = i;
f0100fa9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100fac:	89 45 8c             	mov    %eax,-0x74(%ebp)
		if (c < 0) {
f0100faf:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0100fb3:	79 22                	jns    f0100fd7 <command_prompt_readline+0x90>

			if (c != -E_EOF)
f0100fb5:	83 7d a8 07          	cmpl   $0x7,-0x58(%ebp)
f0100fb9:	0f 84 47 08 00 00    	je     f0101806 <command_prompt_readline+0x8bf>
				cprintf("read error: %e\n", c);
f0100fbf:	83 ec 08             	sub    $0x8,%esp
f0100fc2:	ff 75 a8             	pushl  -0x58(%ebp)
f0100fc5:	68 d0 d2 11 f0       	push   $0xf011d2d0
f0100fca:	e8 67 64 00 00       	call   f0107436 <cprintf>
f0100fcf:	83 c4 10             	add    $0x10,%esp
			return;
f0100fd2:	e9 2f 08 00 00       	jmp    f0101806 <command_prompt_readline+0x8bf>
		} else if (c == 226) { // Up arrow
f0100fd7:	81 7d a8 e2 00 00 00 	cmpl   $0xe2,-0x58(%ebp)
f0100fde:	75 24                	jne    f0101004 <command_prompt_readline+0xbd>
			if (commandidx)
f0100fe0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100fe4:	74 03                	je     f0100fe9 <command_prompt_readline+0xa2>
				commandidx--;
f0100fe6:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0100fe9:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0100fec:	50                   	push   %eax
f0100fed:	ff 75 0c             	pushl  0xc(%ebp)
f0100ff0:	ff 75 f4             	pushl  -0xc(%ebp)
f0100ff3:	8d 45 90             	lea    -0x70(%ebp),%eax
f0100ff6:	50                   	push   %eax
f0100ff7:	e8 8f fd ff ff       	call   f0100d8b <clearandwritecommand>
f0100ffc:	83 c4 10             	add    $0x10,%esp
f0100fff:	e9 eb 07 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == 227) { // Down arrow
f0101004:	81 7d a8 e3 00 00 00 	cmpl   $0xe3,-0x58(%ebp)
f010100b:	75 35                	jne    f0101042 <command_prompt_readline+0xfb>
			if (commandidx < last_command_idx)
f010100d:	a1 d4 77 15 f0       	mov    0xf01577d4,%eax
f0101012:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101015:	7d 03                	jge    f010101a <command_prompt_readline+0xd3>
				commandidx++;
f0101017:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f010101a:	a1 d4 77 15 f0       	mov    0xf01577d4,%eax
f010101f:	85 c0                	test   %eax,%eax
f0101021:	0f 88 c8 07 00 00    	js     f01017ef <command_prompt_readline+0x8a8>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101027:	8d 45 8c             	lea    -0x74(%ebp),%eax
f010102a:	50                   	push   %eax
f010102b:	ff 75 0c             	pushl  0xc(%ebp)
f010102e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101031:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101034:	50                   	push   %eax
f0101035:	e8 51 fd ff ff       	call   f0100d8b <clearandwritecommand>
f010103a:	83 c4 10             	add    $0x10,%esp
f010103d:	e9 ad 07 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == 9) { // Tab button
f0101042:	83 7d a8 09          	cmpl   $0x9,-0x58(%ebp)
f0101046:	0f 85 71 05 00 00    	jne    f01015bd <command_prompt_readline+0x676>
			if (last_c != 9) {
f010104c:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101050:	0f 84 0c 05 00 00    	je     f0101562 <command_prompt_readline+0x61b>
				clear_prefix_list(PrefixList, 100);
f0101056:	83 ec 08             	sub    $0x8,%esp
f0101059:	6a 64                	push   $0x64
f010105b:	68 20 f6 3a f0       	push   $0xf03af620
f0101060:	e8 a9 fe ff ff       	call   f0100f0e <clear_prefix_list>
f0101065:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101068:	83 ec 0c             	sub    $0xc,%esp
f010106b:	ff 75 0c             	pushl  0xc(%ebp)
f010106e:	e8 4c a2 01 00       	call   f011b2bf <strlen>
f0101073:	83 c4 10             	add    $0x10,%esp
f0101076:	85 c0                	test   %eax,%eax
f0101078:	0f 84 7c 07 00 00    	je     f01017fa <command_prompt_readline+0x8b3>
f010107e:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101085:	0f 84 6f 07 00 00    	je     f01017fa <command_prompt_readline+0x8b3>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f010108b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101092:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101095:	89 45 88             	mov    %eax,-0x78(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101098:	83 ec 08             	sub    $0x8,%esp
f010109b:	ff 75 0c             	pushl  0xc(%ebp)
f010109e:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010a4:	50                   	push   %eax
f01010a5:	e8 64 a2 01 00       	call   f011b30e <strcpy>
f01010aa:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01010ad:	83 ec 0c             	sub    $0xc,%esp
f01010b0:	ff 75 0c             	pushl  0xc(%ebp)
f01010b3:	e8 07 a2 01 00       	call   f011b2bf <strlen>
f01010b8:	83 c4 10             	add    $0x10,%esp
f01010bb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
				if (buf[bufLength - 1] == ' ')
f01010be:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01010c1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01010c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010c7:	01 d0                	add    %edx,%eax
f01010c9:	8a 00                	mov    (%eax),%al
f01010cb:	3c 20                	cmp    $0x20,%al
f01010cd:	0f 84 2d 07 00 00    	je     f0101800 <command_prompt_readline+0x8b9>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01010d3:	8d 45 88             	lea    -0x78(%ebp),%eax
f01010d6:	50                   	push   %eax
f01010d7:	8d 85 48 f7 ff ff    	lea    -0x8b8(%ebp),%eax
f01010dd:	50                   	push   %eax
f01010de:	68 e0 d2 11 f0       	push   $0xf011d2e0
f01010e3:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010e9:	50                   	push   %eax
f01010ea:	e8 04 a8 01 00       	call   f011b8f3 <strsplit>
f01010ef:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01010f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				if (number_of_arguments > 1) {
f01010f9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01010fc:	83 f8 01             	cmp    $0x1,%eax
f01010ff:	0f 8e dc 00 00 00    	jle    f01011e1 <command_prompt_readline+0x29a>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
f0101105:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f010110b:	83 ec 08             	sub    $0x8,%esp
f010110e:	68 4f cb 11 f0       	push   $0xf011cb4f
f0101113:	50                   	push   %eax
f0101114:	e8 b2 a2 01 00       	call   f011b3cb <strcmp>
f0101119:	83 c4 10             	add    $0x10,%esp
f010111c:	85 c0                	test   %eax,%eax
f010111e:	74 21                	je     f0101141 <command_prompt_readline+0x1fa>
f0101120:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f0101126:	83 ec 08             	sub    $0x8,%esp
f0101129:	68 6e cb 11 f0       	push   $0xf011cb6e
f010112e:	50                   	push   %eax
f010112f:	e8 97 a2 01 00       	call   f011b3cb <strcmp>
f0101134:	83 c4 10             	add    $0x10,%esp
f0101137:	85 c0                	test   %eax,%eax
f0101139:	74 06                	je     f0101141 <command_prompt_readline+0x1fa>
						continue;
f010113b:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010113c:	e9 b9 06 00 00       	jmp    f01017fa <command_prompt_readline+0x8b3>
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
f0101141:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101148:	00 00 00 
f010114b:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101151:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101156:	b8 00 00 00 00       	mov    $0x0,%eax
f010115b:	89 d7                	mov    %edx,%edi
f010115d:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f010115f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101162:	48                   	dec    %eax
f0101163:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f010116a:	83 ec 0c             	sub    $0xc,%esp
f010116d:	50                   	push   %eax
f010116e:	e8 4c a1 01 00       	call   f011b2bf <strlen>
f0101173:	83 c4 10             	add    $0x10,%esp
f0101176:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0101179:	29 c2                	sub    %eax,%edx
f010117b:	89 d0                	mov    %edx,%eax
f010117d:	89 45 a0             	mov    %eax,-0x60(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101180:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0101187:	eb 1d                	jmp    f01011a6 <command_prompt_readline+0x25f>
						temp[it_str++] = buf[var];
f0101189:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010118c:	8d 50 01             	lea    0x1(%eax),%edx
f010118f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101192:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101195:	8b 55 0c             	mov    0xc(%ebp),%edx
f0101198:	01 ca                	add    %ecx,%edx
f010119a:	8a 12                	mov    (%edx),%dl
f010119c:	88 94 05 88 fb ff ff 	mov    %dl,-0x478(%ebp,%eax,1)
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01011a3:	ff 45 e0             	incl   -0x20(%ebp)
f01011a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01011a9:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f01011ac:	7c db                	jl     f0101189 <command_prompt_readline+0x242>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01011ae:	83 ec 08             	sub    $0x8,%esp
f01011b1:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01011b7:	50                   	push   %eax
f01011b8:	ff 75 0c             	pushl  0xc(%ebp)
f01011bb:	e8 4e a1 01 00       	call   f011b30e <strcpy>
f01011c0:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f01011c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011c6:	48                   	dec    %eax
f01011c7:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f01011ce:	83 ec 08             	sub    $0x8,%esp
f01011d1:	50                   	push   %eax
f01011d2:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011d8:	50                   	push   %eax
f01011d9:	e8 30 a1 01 00       	call   f011b30e <strcpy>
f01011de:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f01011e1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if(number_of_arguments == 1)
f01011e8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011eb:	83 f8 01             	cmp    $0x1,%eax
f01011ee:	0f 85 2c 01 00 00    	jne    f0101320 <command_prompt_readline+0x3d9>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01011f4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01011fb:	e9 0f 01 00 00       	jmp    f010130f <command_prompt_readline+0x3c8>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101200:	83 ec 0c             	sub    $0xc,%esp
f0101203:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101209:	50                   	push   %eax
f010120a:	e8 b0 a0 01 00       	call   f011b2bf <strlen>
f010120f:	83 c4 10             	add    $0x10,%esp
f0101212:	89 c1                	mov    %eax,%ecx
f0101214:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0101217:	89 d0                	mov    %edx,%eax
f0101219:	01 c0                	add    %eax,%eax
f010121b:	01 d0                	add    %edx,%eax
f010121d:	c1 e0 02             	shl    $0x2,%eax
f0101220:	05 40 75 15 f0       	add    $0xf0157540,%eax
f0101225:	8b 00                	mov    (%eax),%eax
f0101227:	83 ec 04             	sub    $0x4,%esp
f010122a:	51                   	push   %ecx
f010122b:	50                   	push   %eax
f010122c:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101232:	50                   	push   %eax
f0101233:	e8 cb a1 01 00       	call   f011b403 <strncmp>
f0101238:	83 c4 10             	add    $0x10,%esp
f010123b:	89 45 9c             	mov    %eax,-0x64(%ebp)
						if (x == 0) {
f010123e:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0101242:	0f 85 c4 00 00 00    	jne    f010130c <command_prompt_readline+0x3c5>
							it_str = -1;
f0101248:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f010124f:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101256:	00 00 00 
f0101259:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f010125f:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101264:	b8 00 00 00 00       	mov    $0x0,%eax
f0101269:	89 d7                	mov    %edx,%edi
f010126b:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f010126d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0101274:	eb 2d                	jmp    f01012a3 <command_prompt_readline+0x35c>
								string[++it_str] = commands[var].name[var3];
f0101276:	ff 45 e4             	incl   -0x1c(%ebp)
f0101279:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010127c:	89 d0                	mov    %edx,%eax
f010127e:	01 c0                	add    %eax,%eax
f0101280:	01 d0                	add    %edx,%eax
f0101282:	c1 e0 02             	shl    $0x2,%eax
f0101285:	05 40 75 15 f0       	add    $0xf0157540,%eax
f010128a:	8b 10                	mov    (%eax),%edx
f010128c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010128f:	01 d0                	add    %edx,%eax
f0101291:	8a 00                	mov    (%eax),%al
f0101293:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f0101299:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010129c:	01 ca                	add    %ecx,%edx
f010129e:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01012a0:	ff 45 d4             	incl   -0x2c(%ebp)
f01012a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01012a6:	89 d0                	mov    %edx,%eax
f01012a8:	01 c0                	add    %eax,%eax
f01012aa:	01 d0                	add    %edx,%eax
f01012ac:	c1 e0 02             	shl    $0x2,%eax
f01012af:	05 40 75 15 f0       	add    $0xf0157540,%eax
f01012b4:	8b 00                	mov    (%eax),%eax
f01012b6:	83 ec 0c             	sub    $0xc,%esp
f01012b9:	50                   	push   %eax
f01012ba:	e8 00 a0 01 00       	call   f011b2bf <strlen>
f01012bf:	83 c4 10             	add    $0x10,%esp
f01012c2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01012c5:	7f af                	jg     f0101276 <command_prompt_readline+0x32f>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f01012c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012ca:	c1 e0 0a             	shl    $0xa,%eax
f01012cd:	05 20 f6 3a f0       	add    $0xf03af620,%eax
f01012d2:	83 ec 04             	sub    $0x4,%esp
f01012d5:	68 00 04 00 00       	push   $0x400
f01012da:	6a 00                	push   $0x0
f01012dc:	50                   	push   %eax
f01012dd:	e8 cb a1 01 00       	call   f011b4ad <memset>
f01012e2:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01012e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01012e8:	40                   	inc    %eax
f01012e9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01012ec:	c1 e2 0a             	shl    $0xa,%edx
f01012ef:	81 c2 20 f6 3a f0    	add    $0xf03af620,%edx
f01012f5:	83 ec 04             	sub    $0x4,%esp
f01012f8:	50                   	push   %eax
f01012f9:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01012ff:	50                   	push   %eax
f0101300:	52                   	push   %edx
f0101301:	e8 36 a0 01 00       	call   f011b33c <strncpy>
f0101306:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f0101309:	ff 45 dc             	incl   -0x24(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010130c:	ff 45 d8             	incl   -0x28(%ebp)
f010130f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101312:	83 f8 36             	cmp    $0x36,%eax
f0101315:	0f 86 e5 fe ff ff    	jbe    f0101200 <command_prompt_readline+0x2b9>
f010131b:	e9 73 01 00 00       	jmp    f0101493 <command_prompt_readline+0x54c>
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101320:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101327:	e9 59 01 00 00       	jmp    f0101485 <command_prompt_readline+0x53e>
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f010132c:	83 ec 0c             	sub    $0xc,%esp
f010132f:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101335:	50                   	push   %eax
f0101336:	e8 84 9f 01 00       	call   f011b2bf <strlen>
f010133b:	83 c4 10             	add    $0x10,%esp
f010133e:	89 c1                	mov    %eax,%ecx
f0101340:	8b 1d a0 79 15 f0    	mov    0xf01579a0,%ebx
f0101346:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101349:	89 d0                	mov    %edx,%eax
f010134b:	01 c0                	add    %eax,%eax
f010134d:	01 d0                	add    %edx,%eax
f010134f:	c1 e0 02             	shl    $0x2,%eax
f0101352:	01 d8                	add    %ebx,%eax
f0101354:	8b 00                	mov    (%eax),%eax
f0101356:	83 ec 04             	sub    $0x4,%esp
f0101359:	51                   	push   %ecx
f010135a:	50                   	push   %eax
f010135b:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101361:	50                   	push   %eax
f0101362:	e8 9c a0 01 00       	call   f011b403 <strncmp>
f0101367:	83 c4 10             	add    $0x10,%esp
f010136a:	89 45 98             	mov    %eax,-0x68(%ebp)
						if (x == 0) {
f010136d:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101371:	0f 85 0b 01 00 00    	jne    f0101482 <command_prompt_readline+0x53b>
							it_str = -1;
f0101377:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f010137e:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101385:	00 00 00 
f0101388:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f010138e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101393:	b8 00 00 00 00       	mov    $0x0,%eax
f0101398:	89 d7                	mov    %edx,%edi
f010139a:	f3 ab                	rep stos %eax,%es:(%edi)
							if (number_of_arguments > 1) {
f010139c:	8b 45 88             	mov    -0x78(%ebp),%eax
f010139f:	83 f8 01             	cmp    $0x1,%eax
f01013a2:	7e 39                	jle    f01013dd <command_prompt_readline+0x496>
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013a4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ab:	eb 1d                	jmp    f01013ca <command_prompt_readline+0x483>
									string[++it_str] = buf[var2];
f01013ad:	ff 45 e4             	incl   -0x1c(%ebp)
f01013b0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01013b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b6:	01 d0                	add    %edx,%eax
f01013b8:	8a 00                	mov    (%eax),%al
f01013ba:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013c3:	01 ca                	add    %ecx,%edx
f01013c5:	88 02                	mov    %al,(%edx)
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013c7:	ff 45 cc             	incl   -0x34(%ebp)
f01013ca:	83 ec 0c             	sub    $0xc,%esp
f01013cd:	ff 75 0c             	pushl  0xc(%ebp)
f01013d0:	e8 ea 9e 01 00       	call   f011b2bf <strlen>
f01013d5:	83 c4 10             	add    $0x10,%esp
f01013d8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01013db:	7f d0                	jg     f01013ad <command_prompt_readline+0x466>
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013dd:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01013e4:	eb 30                	jmp    f0101416 <command_prompt_readline+0x4cf>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
f01013e6:	ff 45 e4             	incl   -0x1c(%ebp)
f01013e9:	8b 0d a0 79 15 f0    	mov    0xf01579a0,%ecx
f01013ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013f2:	89 d0                	mov    %edx,%eax
f01013f4:	01 c0                	add    %eax,%eax
f01013f6:	01 d0                	add    %edx,%eax
f01013f8:	c1 e0 02             	shl    $0x2,%eax
f01013fb:	01 c8                	add    %ecx,%eax
f01013fd:	8b 10                	mov    (%eax),%edx
f01013ff:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0101402:	01 d0                	add    %edx,%eax
f0101404:	8a 00                	mov    (%eax),%al
f0101406:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f010140c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010140f:	01 ca                	add    %ecx,%edx
f0101411:	88 02                	mov    %al,(%edx)
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101413:	ff 45 c8             	incl   -0x38(%ebp)
f0101416:	8b 0d a0 79 15 f0    	mov    0xf01579a0,%ecx
f010141c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010141f:	89 d0                	mov    %edx,%eax
f0101421:	01 c0                	add    %eax,%eax
f0101423:	01 d0                	add    %edx,%eax
f0101425:	c1 e0 02             	shl    $0x2,%eax
f0101428:	01 c8                	add    %ecx,%eax
f010142a:	8b 00                	mov    (%eax),%eax
f010142c:	83 ec 0c             	sub    $0xc,%esp
f010142f:	50                   	push   %eax
f0101430:	e8 8a 9e 01 00       	call   f011b2bf <strlen>
f0101435:	83 c4 10             	add    $0x10,%esp
f0101438:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010143b:	7f a9                	jg     f01013e6 <command_prompt_readline+0x49f>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010143d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101440:	c1 e0 0a             	shl    $0xa,%eax
f0101443:	05 20 f6 3a f0       	add    $0xf03af620,%eax
f0101448:	83 ec 04             	sub    $0x4,%esp
f010144b:	68 00 04 00 00       	push   $0x400
f0101450:	6a 00                	push   $0x0
f0101452:	50                   	push   %eax
f0101453:	e8 55 a0 01 00       	call   f011b4ad <memset>
f0101458:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010145b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010145e:	40                   	inc    %eax
f010145f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101462:	c1 e2 0a             	shl    $0xa,%edx
f0101465:	81 c2 20 f6 3a f0    	add    $0xf03af620,%edx
f010146b:	83 ec 04             	sub    $0x4,%esp
f010146e:	50                   	push   %eax
f010146f:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f0101475:	50                   	push   %eax
f0101476:	52                   	push   %edx
f0101477:	e8 c0 9e 01 00       	call   f011b33c <strncpy>
f010147c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010147f:	ff 45 dc             	incl   -0x24(%ebp)
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101482:	ff 45 d0             	incl   -0x30(%ebp)
f0101485:	a1 a4 79 15 f0       	mov    0xf01579a4,%eax
f010148a:	39 45 d0             	cmp    %eax,-0x30(%ebp)
f010148d:	0f 8c 99 fe ff ff    	jl     f010132c <command_prompt_readline+0x3e5>
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
							it_prefix_list++;
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101493:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101496:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f0101499:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010149d:	0f 84 4c 03 00 00    	je     f01017ef <command_prompt_readline+0x8a8>
					prefix_list_idx = it_str = 0;
f01014a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01014aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01014ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014b0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01014b7:	eb 1f                	jmp    f01014d8 <command_prompt_readline+0x591>
						buf[it_str++] = PrefixList[0][var2];}
f01014b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01014bc:	8d 50 01             	lea    0x1(%eax),%edx
f01014bf:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01014c2:	89 c2                	mov    %eax,%edx
f01014c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014c7:	01 c2                	add    %eax,%edx
f01014c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01014cc:	05 20 f6 3a f0       	add    $0xf03af620,%eax
f01014d1:	8a 00                	mov    (%eax),%al
f01014d3:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014d5:	ff 45 c4             	incl   -0x3c(%ebp)
f01014d8:	83 ec 0c             	sub    $0xc,%esp
f01014db:	68 20 f6 3a f0       	push   $0xf03af620
f01014e0:	e8 da 9d 01 00       	call   f011b2bf <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01014eb:	7f cc                	jg     f01014b9 <command_prompt_readline+0x572>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014ed:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01014f4:	eb 10                	jmp    f0101506 <command_prompt_readline+0x5bf>
						cputchar('\b');}
f01014f6:	83 ec 0c             	sub    $0xc,%esp
f01014f9:	6a 08                	push   $0x8
f01014fb:	e8 0b f8 ff ff       	call   f0100d0b <cputchar>
f0101500:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101503:	ff 45 c0             	incl   -0x40(%ebp)
f0101506:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101509:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f010150c:	7c e8                	jl     f01014f6 <command_prompt_readline+0x5af>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010150e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101515:	eb 1c                	jmp    f0101533 <command_prompt_readline+0x5ec>
						cputchar(buf[j]);}
f0101517:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	0f be c0             	movsbl %al,%eax
f0101524:	83 ec 0c             	sub    $0xc,%esp
f0101527:	50                   	push   %eax
f0101528:	e8 de f7 ff ff       	call   f0100d0b <cputchar>
f010152d:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101530:	ff 45 bc             	incl   -0x44(%ebp)
f0101533:	83 ec 0c             	sub    $0xc,%esp
f0101536:	ff 75 0c             	pushl  0xc(%ebp)
f0101539:	e8 81 9d 01 00       	call   f011b2bf <strlen>
f010153e:	83 c4 10             	add    $0x10,%esp
f0101541:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0101544:	7f d1                	jg     f0101517 <command_prompt_readline+0x5d0>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101546:	83 ec 0c             	sub    $0xc,%esp
f0101549:	ff 75 0c             	pushl  0xc(%ebp)
f010154c:	e8 6e 9d 01 00       	call   f011b2bf <strlen>
f0101551:	83 c4 10             	add    $0x10,%esp
f0101554:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101557:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010155a:	89 45 90             	mov    %eax,-0x70(%ebp)
f010155d:	e9 8d 02 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101562:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101566:	0f 8e 83 02 00 00    	jle    f01017ef <command_prompt_readline+0x8a8>
f010156c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010156f:	89 45 94             	mov    %eax,-0x6c(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101572:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101575:	40                   	inc    %eax
f0101576:	99                   	cltd   
f0101577:	f7 7d ec             	idivl  -0x14(%ebp)
f010157a:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010157d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101580:	c1 e0 0a             	shl    $0xa,%eax
f0101583:	8d 98 20 f6 3a f0    	lea    -0xfc509e0(%eax),%ebx
f0101589:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010158c:	c1 e0 0a             	shl    $0xa,%eax
f010158f:	05 20 f6 3a f0       	add    $0xf03af620,%eax
f0101594:	83 ec 0c             	sub    $0xc,%esp
f0101597:	50                   	push   %eax
f0101598:	e8 22 9d 01 00       	call   f011b2bf <strlen>
f010159d:	83 c4 10             	add    $0x10,%esp
f01015a0:	83 ec 0c             	sub    $0xc,%esp
f01015a3:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01015a6:	52                   	push   %edx
f01015a7:	8d 55 90             	lea    -0x70(%ebp),%edx
f01015aa:	52                   	push   %edx
f01015ab:	ff 75 0c             	pushl  0xc(%ebp)
f01015ae:	53                   	push   %ebx
f01015af:	50                   	push   %eax
f01015b0:	e8 a3 f8 ff ff       	call   f0100e58 <RoundAutoCompleteCommandWithTheSamePrefix>
f01015b5:	83 c4 20             	add    $0x20,%esp
f01015b8:	e9 32 02 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
				}
			}
		}

		else if (c == 228) { // left arrow
f01015bd:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f01015c4:	75 25                	jne    f01015eb <command_prompt_readline+0x6a4>
			if (i > 0) {
f01015c6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015c9:	85 c0                	test   %eax,%eax
f01015cb:	0f 8e 1e 02 00 00    	jle    f01017ef <command_prompt_readline+0x8a8>
				i--;
f01015d1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015d4:	48                   	dec    %eax
f01015d5:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015d8:	83 ec 0c             	sub    $0xc,%esp
f01015db:	ff 75 a8             	pushl  -0x58(%ebp)
f01015de:	e8 28 f7 ff ff       	call   f0100d0b <cputchar>
f01015e3:	83 c4 10             	add    $0x10,%esp
f01015e6:	e9 04 02 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
			}
		} else if (c == 229) { // right arrow
f01015eb:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f01015f2:	75 28                	jne    f010161c <command_prompt_readline+0x6d5>
			if (i < lastIndex) {
f01015f4:	8b 55 90             	mov    -0x70(%ebp),%edx
f01015f7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01015fa:	39 c2                	cmp    %eax,%edx
f01015fc:	0f 8d ed 01 00 00    	jge    f01017ef <command_prompt_readline+0x8a8>
				i++;
f0101602:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101605:	40                   	inc    %eax
f0101606:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f0101609:	83 ec 0c             	sub    $0xc,%esp
f010160c:	ff 75 a8             	pushl  -0x58(%ebp)
f010160f:	e8 f7 f6 ff ff       	call   f0100d0b <cputchar>
f0101614:	83 c4 10             	add    $0x10,%esp
f0101617:	e9 d3 01 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010161c:	81 7d a8 e9 00 00 00 	cmpl   $0xe9,-0x58(%ebp)
f0101623:	75 3d                	jne    f0101662 <command_prompt_readline+0x71b>
f0101625:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101628:	85 c0                	test   %eax,%eax
f010162a:	7e 36                	jle    f0101662 <command_prompt_readline+0x71b>
			for (int var = i; var <= lastIndex; ++var) {
f010162c:	8b 45 90             	mov    -0x70(%ebp),%eax
f010162f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0101632:	eb 1a                	jmp    f010164e <command_prompt_readline+0x707>
				buf[var] = buf[var + 1];
f0101634:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0101637:	8b 45 0c             	mov    0xc(%ebp),%eax
f010163a:	01 c2                	add    %eax,%edx
f010163c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010163f:	8d 48 01             	lea    0x1(%eax),%ecx
f0101642:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101645:	01 c8                	add    %ecx,%eax
f0101647:	8a 00                	mov    (%eax),%al
f0101649:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f010164b:	ff 45 b8             	incl   -0x48(%ebp)
f010164e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101651:	39 45 b8             	cmp    %eax,-0x48(%ebp)
f0101654:	7e de                	jle    f0101634 <command_prompt_readline+0x6ed>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101656:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101659:	48                   	dec    %eax
f010165a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010165d:	e9 8d 01 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101662:	83 7d a8 1f          	cmpl   $0x1f,-0x58(%ebp)
f0101666:	7e 51                	jle    f01016b9 <command_prompt_readline+0x772>
f0101668:	8b 45 90             	mov    -0x70(%ebp),%eax
f010166b:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101670:	7f 47                	jg     f01016b9 <command_prompt_readline+0x772>
f0101672:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f0101679:	74 3e                	je     f01016b9 <command_prompt_readline+0x772>
f010167b:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f0101682:	74 35                	je     f01016b9 <command_prompt_readline+0x772>
			if (echoing)
f0101684:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101688:	74 0e                	je     f0101698 <command_prompt_readline+0x751>
				cputchar(c);
f010168a:	83 ec 0c             	sub    $0xc,%esp
f010168d:	ff 75 a8             	pushl  -0x58(%ebp)
f0101690:	e8 76 f6 ff ff       	call   f0100d0b <cputchar>
f0101695:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0101698:	8b 45 90             	mov    -0x70(%ebp),%eax
f010169b:	8d 50 01             	lea    0x1(%eax),%edx
f010169e:	89 55 90             	mov    %edx,-0x70(%ebp)
f01016a1:	89 c2                	mov    %eax,%edx
f01016a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016a6:	01 d0                	add    %edx,%eax
f01016a8:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01016ab:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01016ad:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01016b0:	40                   	inc    %eax
f01016b1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01016b4:	e9 36 01 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == '\b' && i > 0) {
f01016b9:	83 7d a8 08          	cmpl   $0x8,-0x58(%ebp)
f01016bd:	75 51                	jne    f0101710 <command_prompt_readline+0x7c9>
f01016bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016c2:	85 c0                	test   %eax,%eax
f01016c4:	7e 4a                	jle    f0101710 <command_prompt_readline+0x7c9>

			if (echoing)
f01016c6:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01016ca:	74 0e                	je     f01016da <command_prompt_readline+0x793>
				cputchar(c);
f01016cc:	83 ec 0c             	sub    $0xc,%esp
f01016cf:	ff 75 a8             	pushl  -0x58(%ebp)
f01016d2:	e8 34 f6 ff ff       	call   f0100d0b <cputchar>
f01016d7:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f01016da:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016dd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01016e0:	eb 1a                	jmp    f01016fc <command_prompt_readline+0x7b5>
				buf[var - 1] = buf[var];
f01016e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e5:	8d 50 ff             	lea    -0x1(%eax),%edx
f01016e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016eb:	01 c2                	add    %eax,%edx
f01016ed:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f01016f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016f3:	01 c8                	add    %ecx,%eax
f01016f5:	8a 00                	mov    (%eax),%al
f01016f7:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016ff:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f0101702:	7e de                	jle    f01016e2 <command_prompt_readline+0x79b>
				buf[var - 1] = buf[var];
			}
			i--;
f0101704:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101707:	48                   	dec    %eax
f0101708:	89 45 90             	mov    %eax,-0x70(%ebp)
f010170b:	e9 df 00 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == '\n' || c == '\r') {
f0101710:	83 7d a8 0a          	cmpl   $0xa,-0x58(%ebp)
f0101714:	74 0a                	je     f0101720 <command_prompt_readline+0x7d9>
f0101716:	83 7d a8 0d          	cmpl   $0xd,-0x58(%ebp)
f010171a:	0f 85 cf 00 00 00    	jne    f01017ef <command_prompt_readline+0x8a8>

			if (echoing)
f0101720:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101724:	74 0e                	je     f0101734 <command_prompt_readline+0x7ed>
				cputchar(c);
f0101726:	83 ec 0c             	sub    $0xc,%esp
f0101729:	ff 75 a8             	pushl  -0x58(%ebp)
f010172c:	e8 da f5 ff ff       	call   f0100d0b <cputchar>
f0101731:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101734:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101737:	89 c2                	mov    %eax,%edx
f0101739:	8b 45 0c             	mov    0xc(%ebp),%eax
f010173c:	01 d0                	add    %edx,%eax
f010173e:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101741:	a1 d4 77 15 f0       	mov    0xf01577d4,%eax
f0101746:	83 f8 13             	cmp    $0x13,%eax
f0101749:	75 56                	jne    f01017a1 <command_prompt_readline+0x85a>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010174b:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f0101752:	eb 2d                	jmp    f0101781 <command_prompt_readline+0x83a>
					memcpy(command_history[idx], command_history[idx + 1],
f0101754:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101757:	40                   	inc    %eax
f0101758:	c1 e0 0a             	shl    $0xa,%eax
f010175b:	8d 90 20 86 3c f0    	lea    -0xfc379e0(%eax),%edx
f0101761:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101764:	c1 e0 0a             	shl    $0xa,%eax
f0101767:	05 20 86 3c f0       	add    $0xf03c8620,%eax
f010176c:	83 ec 04             	sub    $0x4,%esp
f010176f:	68 00 04 00 00       	push   $0x400
f0101774:	52                   	push   %edx
f0101775:	50                   	push   %eax
f0101776:	e8 62 9d 01 00       	call   f011b4dd <memcpy>
f010177b:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010177e:	ff 45 b0             	incl   -0x50(%ebp)
f0101781:	83 7d b0 12          	cmpl   $0x12,-0x50(%ebp)
f0101785:	7e cd                	jle    f0101754 <command_prompt_readline+0x80d>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101787:	83 ec 04             	sub    $0x4,%esp
f010178a:	68 00 04 00 00       	push   $0x400
f010178f:	ff 75 0c             	pushl  0xc(%ebp)
f0101792:	68 20 d2 3c f0       	push   $0xf03cd220
f0101797:	e8 41 9d 01 00       	call   f011b4dd <memcpy>
f010179c:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f010179f:	eb 68                	jmp    f0101809 <command_prompt_readline+0x8c2>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f01017a1:	a1 d4 77 15 f0       	mov    0xf01577d4,%eax
f01017a6:	c1 e0 0a             	shl    $0xa,%eax
f01017a9:	05 20 86 3c f0       	add    $0xf03c8620,%eax
f01017ae:	83 ec 08             	sub    $0x8,%esp
f01017b1:	ff 75 0c             	pushl  0xc(%ebp)
f01017b4:	50                   	push   %eax
f01017b5:	e8 11 9c 01 00       	call   f011b3cb <strcmp>
f01017ba:	83 c4 10             	add    $0x10,%esp
f01017bd:	85 c0                	test   %eax,%eax
f01017bf:	74 48                	je     f0101809 <command_prompt_readline+0x8c2>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f01017c1:	a1 d4 77 15 f0       	mov    0xf01577d4,%eax
f01017c6:	40                   	inc    %eax
f01017c7:	a3 d4 77 15 f0       	mov    %eax,0xf01577d4
f01017cc:	a1 d4 77 15 f0       	mov    0xf01577d4,%eax
f01017d1:	c1 e0 0a             	shl    $0xa,%eax
f01017d4:	05 20 86 3c f0       	add    $0xf03c8620,%eax
f01017d9:	83 ec 04             	sub    $0x4,%esp
f01017dc:	68 00 04 00 00       	push   $0x400
f01017e1:	ff 75 0c             	pushl  0xc(%ebp)
f01017e4:	50                   	push   %eax
f01017e5:	e8 f3 9c 01 00       	call   f011b4dd <memcpy>
f01017ea:	83 c4 10             	add    $0x10,%esp
			}
			return;
f01017ed:	eb 1a                	jmp    f0101809 <command_prompt_readline+0x8c2>

		}
		last_c = c;
f01017ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01017f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01017f5:	e9 9d f7 ff ff       	jmp    f0100f97 <command_prompt_readline+0x50>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01017fa:	90                   	nop
f01017fb:	e9 97 f7 ff ff       	jmp    f0100f97 <command_prompt_readline+0x50>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101800:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101801:	e9 91 f7 ff ff       	jmp    f0100f97 <command_prompt_readline+0x50>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101806:	90                   	nop
f0101807:	eb 01                	jmp    f010180a <command_prompt_readline+0x8c3>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101809:	90                   	nop

		}
		last_c = c;
	}
}
f010180a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010180d:	5b                   	pop    %ebx
f010180e:	5f                   	pop    %edi
f010180f:	5d                   	pop    %ebp
f0101810:	c3                   	ret    

f0101811 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101811:	55                   	push   %ebp
f0101812:	89 e5                	mov    %esp,%ebp
f0101814:	81 ec 08 04 00 00    	sub    $0x408,%esp
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f010181a:	83 ec 04             	sub    $0x4,%esp
f010181d:	68 00 04 00 00       	push   $0x400
f0101822:	6a 00                	push   $0x0
f0101824:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010182a:	50                   	push   %eax
f010182b:	e8 7d 9c 01 00       	call   f011b4ad <memset>
f0101830:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101833:	83 ec 08             	sub    $0x8,%esp
f0101836:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010183c:	50                   	push   %eax
f010183d:	68 e5 d2 11 f0       	push   $0xf011d2e5
f0101842:	e8 00 f7 ff ff       	call   f0100f47 <command_prompt_readline>
f0101847:	83 c4 10             	add    $0x10,%esp


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f010184a:	83 ec 0c             	sub    $0xc,%esp
f010184d:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101853:	50                   	push   %eax
f0101854:	e8 0d 00 00 00       	call   f0101866 <execute_command>
f0101859:	83 c4 10             	add    $0x10,%esp
f010185c:	85 c0                	test   %eax,%eax
f010185e:	78 02                	js     f0101862 <run_command_prompt+0x51>
				break;
	}
f0101860:	eb b8                	jmp    f010181a <run_command_prompt+0x9>


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101862:	90                   	nop
	}
}
f0101863:	90                   	nop
f0101864:	c9                   	leave  
f0101865:	c3                   	ret    

f0101866 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101866:	55                   	push   %ebp
f0101867:	89 e5                	mov    %esp,%ebp
f0101869:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f010186c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010186f:	50                   	push   %eax
f0101870:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0101873:	50                   	push   %eax
f0101874:	68 e0 d2 11 f0       	push   $0xf011d2e0
f0101879:	ff 75 08             	pushl  0x8(%ebp)
f010187c:	e8 72 a0 01 00       	call   f011b8f3 <strsplit>
f0101881:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101884:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101887:	85 c0                	test   %eax,%eax
f0101889:	75 0a                	jne    f0101895 <execute_command+0x2f>
		return 0;
f010188b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101890:	e9 95 00 00 00       	jmp    f010192a <execute_command+0xc4>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0101895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010189c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01018a3:	eb 33                	jmp    f01018d8 <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f01018a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018a8:	89 d0                	mov    %edx,%eax
f01018aa:	01 c0                	add    %eax,%eax
f01018ac:	01 d0                	add    %edx,%eax
f01018ae:	c1 e0 02             	shl    $0x2,%eax
f01018b1:	05 40 75 15 f0       	add    $0xf0157540,%eax
f01018b6:	8b 10                	mov    (%eax),%edx
f01018b8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01018bb:	83 ec 08             	sub    $0x8,%esp
f01018be:	52                   	push   %edx
f01018bf:	50                   	push   %eax
f01018c0:	e8 06 9b 01 00       	call   f011b3cb <strcmp>
f01018c5:	83 c4 10             	add    $0x10,%esp
f01018c8:	85 c0                	test   %eax,%eax
f01018ca:	75 09                	jne    f01018d5 <execute_command+0x6f>
		{
			command_found = 1;
f01018cc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f01018d3:	eb 0b                	jmp    f01018e0 <execute_command+0x7a>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01018d5:	ff 45 f0             	incl   -0x10(%ebp)
f01018d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018db:	83 f8 36             	cmp    $0x36,%eax
f01018de:	76 c5                	jbe    f01018a5 <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f01018e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01018e4:	74 2b                	je     f0101911 <execute_command+0xab>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f01018e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018e9:	89 d0                	mov    %edx,%eax
f01018eb:	01 c0                	add    %eax,%eax
f01018ed:	01 d0                	add    %edx,%eax
f01018ef:	c1 e0 02             	shl    $0x2,%eax
f01018f2:	05 48 75 15 f0       	add    $0xf0157548,%eax
f01018f7:	8b 00                	mov    (%eax),%eax
f01018f9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01018fc:	83 ec 08             	sub    $0x8,%esp
f01018ff:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f0101902:	51                   	push   %ecx
f0101903:	52                   	push   %edx
f0101904:	ff d0                	call   *%eax
f0101906:	83 c4 10             	add    $0x10,%esp
f0101909:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f010190c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010190f:	eb 19                	jmp    f010192a <execute_command+0xc4>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101911:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0101914:	83 ec 08             	sub    $0x8,%esp
f0101917:	50                   	push   %eax
f0101918:	68 eb d2 11 f0       	push   $0xf011d2eb
f010191d:	e8 14 5b 00 00       	call   f0107436 <cprintf>
f0101922:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101925:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010192a:	c9                   	leave  
f010192b:	c3                   	ret    

f010192c <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010192c:	55                   	push   %ebp
f010192d:	89 e5                	mov    %esp,%ebp
f010192f:	53                   	push   %ebx
f0101930:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010193a:	eb 3b                	jmp    f0101977 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010193c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010193f:	89 d0                	mov    %edx,%eax
f0101941:	01 c0                	add    %eax,%eax
f0101943:	01 d0                	add    %edx,%eax
f0101945:	c1 e0 02             	shl    $0x2,%eax
f0101948:	05 44 75 15 f0       	add    $0xf0157544,%eax
f010194d:	8b 10                	mov    (%eax),%edx
f010194f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101952:	89 c8                	mov    %ecx,%eax
f0101954:	01 c0                	add    %eax,%eax
f0101956:	01 c8                	add    %ecx,%eax
f0101958:	c1 e0 02             	shl    $0x2,%eax
f010195b:	05 40 75 15 f0       	add    $0xf0157540,%eax
f0101960:	8b 00                	mov    (%eax),%eax
f0101962:	83 ec 04             	sub    $0x4,%esp
f0101965:	52                   	push   %edx
f0101966:	50                   	push   %eax
f0101967:	68 01 d3 11 f0       	push   $0xf011d301
f010196c:	e8 c5 5a 00 00       	call   f0107436 <cprintf>
f0101971:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101974:	ff 45 f4             	incl   -0xc(%ebp)
f0101977:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010197a:	83 f8 36             	cmp    $0x36,%eax
f010197d:	76 bd                	jbe    f010193c <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f010197f:	83 ec 0c             	sub    $0xc,%esp
f0101982:	68 0a d3 11 f0       	push   $0xf011d30a
f0101987:	e8 aa 5a 00 00       	call   f0107436 <cprintf>
f010198c:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f010198f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101996:	eb 42                	jmp    f01019da <command_help+0xae>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101998:	8b 0d a0 79 15 f0    	mov    0xf01579a0,%ecx
f010199e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01019a1:	89 d0                	mov    %edx,%eax
f01019a3:	01 c0                	add    %eax,%eax
f01019a5:	01 d0                	add    %edx,%eax
f01019a7:	c1 e0 02             	shl    $0x2,%eax
f01019aa:	01 c8                	add    %ecx,%eax
f01019ac:	8b 50 04             	mov    0x4(%eax),%edx
f01019af:	8b 1d a0 79 15 f0    	mov    0xf01579a0,%ebx
f01019b5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019b8:	89 c8                	mov    %ecx,%eax
f01019ba:	01 c0                	add    %eax,%eax
f01019bc:	01 c8                	add    %ecx,%eax
f01019be:	c1 e0 02             	shl    $0x2,%eax
f01019c1:	01 d8                	add    %ebx,%eax
f01019c3:	8b 00                	mov    (%eax),%eax
f01019c5:	83 ec 04             	sub    $0x4,%esp
f01019c8:	52                   	push   %edx
f01019c9:	50                   	push   %eax
f01019ca:	68 1f d3 11 f0       	push   $0xf011d31f
f01019cf:	e8 62 5a 00 00       	call   f0107436 <cprintf>
f01019d4:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f01019d7:	ff 45 f4             	incl   -0xc(%ebp)
f01019da:	a1 a4 79 15 f0       	mov    0xf01579a4,%eax
f01019df:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01019e2:	7c b4                	jl     f0101998 <command_help+0x6c>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f01019e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01019ec:	c9                   	leave  
f01019ed:	c3                   	ret    

f01019ee <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01019ee:	55                   	push   %ebp
f01019ef:	89 e5                	mov    %esp,%ebp
f01019f1:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01019f4:	83 ec 0c             	sub    $0xc,%esp
f01019f7:	68 3b d3 11 f0       	push   $0xf011d33b
f01019fc:	e8 35 5a 00 00       	call   f0107436 <cprintf>
f0101a01:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101a04:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0101a09:	83 ec 04             	sub    $0x4,%esp
f0101a0c:	50                   	push   %eax
f0101a0d:	68 0c 00 10 f0       	push   $0xf010000c
f0101a12:	68 54 d3 11 f0       	push   $0xf011d354
f0101a17:	e8 1a 5a 00 00       	call   f0107436 <cprintf>
f0101a1c:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101a1f:	b8 c1 c6 11 00       	mov    $0x11c6c1,%eax
f0101a24:	83 ec 04             	sub    $0x4,%esp
f0101a27:	50                   	push   %eax
f0101a28:	68 c1 c6 11 f0       	push   $0xf011c6c1
f0101a2d:	68 90 d3 11 f0       	push   $0xf011d390
f0101a32:	e8 ff 59 00 00       	call   f0107436 <cprintf>
f0101a37:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0101a3a:	b8 eb 1e 34 00       	mov    $0x341eeb,%eax
f0101a3f:	83 ec 04             	sub    $0x4,%esp
f0101a42:	50                   	push   %eax
f0101a43:	68 eb 1e 34 f0       	push   $0xf0341eeb
f0101a48:	68 cc d3 11 f0       	push   $0xf011d3cc
f0101a4d:	e8 e4 59 00 00       	call   f0107436 <cprintf>
f0101a52:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101a55:	b8 70 db 3c 00       	mov    $0x3cdb70,%eax
f0101a5a:	83 ec 04             	sub    $0x4,%esp
f0101a5d:	50                   	push   %eax
f0101a5e:	68 70 db 3c f0       	push   $0xf03cdb70
f0101a63:	68 14 d4 11 f0       	push   $0xf011d414
f0101a68:	e8 c9 59 00 00       	call   f0107436 <cprintf>
f0101a6d:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101a70:	b8 70 db 3c f0       	mov    $0xf03cdb70,%eax
f0101a75:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101a7b:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101a80:	29 c2                	sub    %eax,%edx
f0101a82:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101a84:	85 c0                	test   %eax,%eax
f0101a86:	79 05                	jns    f0101a8d <command_kernel_info+0x9f>
f0101a88:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101a8d:	c1 f8 0a             	sar    $0xa,%eax
f0101a90:	83 ec 08             	sub    $0x8,%esp
f0101a93:	50                   	push   %eax
f0101a94:	68 50 d4 11 f0       	push   $0xf011d450
f0101a99:	e8 98 59 00 00       	call   f0107436 <cprintf>
f0101a9e:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101aa1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aa6:	c9                   	leave  
f0101aa7:	c3                   	ret    

f0101aa8 <command_writeusermem>:

int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101aa8:	55                   	push   %ebp
f0101aa9:	89 e5                	mov    %esp,%ebp
f0101aab:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101aae:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ab1:	83 c0 04             	add    $0x4,%eax
f0101ab4:	8b 00                	mov    (%eax),%eax
f0101ab6:	83 ec 04             	sub    $0x4,%esp
f0101ab9:	6a 0a                	push   $0xa
f0101abb:	6a 00                	push   $0x0
f0101abd:	50                   	push   %eax
f0101abe:	e8 5c 9b 01 00       	call   f011b61f <strtol>
f0101ac3:	83 c4 10             	add    $0x10,%esp
f0101ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101ac9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101ad0:	83 ec 04             	sub    $0x4,%esp
f0101ad3:	6a 00                	push   $0x0
f0101ad5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101ad8:	50                   	push   %eax
f0101ad9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101adc:	e8 23 19 00 00       	call   f0103404 <envid2env>
f0101ae1:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[3], NULL, 16);
f0101ae4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ae7:	83 c0 0c             	add    $0xc,%eax
f0101aea:	8b 00                	mov    (%eax),%eax
f0101aec:	83 ec 04             	sub    $0x4,%esp
f0101aef:	6a 10                	push   $0x10
f0101af1:	6a 00                	push   $0x0
f0101af3:	50                   	push   %eax
f0101af4:	e8 26 9b 01 00       	call   f011b61f <strtol>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101aff:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101b02:	85 c0                	test   %eax,%eax
f0101b04:	75 07                	jne    f0101b0d <command_writeusermem+0x65>
f0101b06:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b0b:	eb 43                	jmp    f0101b50 <command_writeusermem+0xa8>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101b0d:	0f 20 d8             	mov    %cr3,%eax
f0101b10:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101b13:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101b16:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32) (env->env_cr3));
f0101b19:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101b1c:	8b 40 60             	mov    0x60(%eax),%eax
f0101b1f:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101b22:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101b25:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101b28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101b2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	*ptr = arguments[2][0];
f0101b2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b31:	83 c0 08             	add    $0x8,%eax
f0101b34:	8b 00                	mov    (%eax),%eax
f0101b36:	8a 00                	mov    (%eax),%al
f0101b38:	88 c2                	mov    %al,%dl
f0101b3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101b3d:	88 10                	mov    %dl,(%eax)
f0101b3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101b42:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101b45:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101b48:	0f 22 d8             	mov    %eax,%cr3
	lcr3(oldDir);

	return 0;
f0101b4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b50:	c9                   	leave  
f0101b51:	c3                   	ret    

f0101b52 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101b52:	55                   	push   %ebp
f0101b53:	89 e5                	mov    %esp,%ebp
f0101b55:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101b58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b5b:	83 c0 04             	add    $0x4,%eax
f0101b5e:	8b 00                	mov    (%eax),%eax
f0101b60:	83 ec 04             	sub    $0x4,%esp
f0101b63:	6a 10                	push   $0x10
f0101b65:	6a 00                	push   $0x0
f0101b67:	50                   	push   %eax
f0101b68:	e8 b2 9a 01 00       	call   f011b61f <strtol>
f0101b6d:	83 c4 10             	add    $0x10,%esp
f0101b70:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b7b:	83 c0 08             	add    $0x8,%eax
f0101b7e:	8b 00                	mov    (%eax),%eax
f0101b80:	83 ec 04             	sub    $0x4,%esp
f0101b83:	6a 0a                	push   $0xa
f0101b85:	6a 00                	push   $0x0
f0101b87:	50                   	push   %eax
f0101b88:	e8 92 9a 01 00       	call   f011b61f <strtol>
f0101b8d:	83 c4 10             	add    $0x10,%esp
f0101b90:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101b93:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 0c             	sub    $0xc,%esp
f0101ba5:	50                   	push   %eax
f0101ba6:	e8 14 97 01 00       	call   f011b2bf <strlen>
f0101bab:	83 c4 10             	add    $0x10,%esp
f0101bae:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101bb1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101bb8:	eb 30                	jmp    f0101bea <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101bba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101bc1:	eb 1c                	jmp    f0101bdf <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101bc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc6:	83 c0 0c             	add    $0xc,%eax
f0101bc9:	8b 10                	mov    (%eax),%edx
f0101bcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bce:	01 d0                	add    %edx,%eax
f0101bd0:	8a 00                	mov    (%eax),%al
f0101bd2:	88 c2                	mov    %al,%dl
f0101bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101bd7:	88 10                	mov    %dl,(%eax)
			address++;
f0101bd9:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101bdc:	ff 45 ec             	incl   -0x14(%ebp)
f0101bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101be2:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101be5:	7c dc                	jl     f0101bc3 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101be7:	ff 45 f0             	incl   -0x10(%ebp)
f0101bea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101bed:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101bf0:	7c c8                	jl     f0101bba <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101bf2:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101bf7:	c9                   	leave  
f0101bf8:	c3                   	ret    

f0101bf9 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101bf9:	55                   	push   %ebp
f0101bfa:	89 e5                	mov    %esp,%ebp
f0101bfc:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101bff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c02:	83 c0 04             	add    $0x4,%eax
f0101c05:	8b 00                	mov    (%eax),%eax
f0101c07:	83 ec 04             	sub    $0x4,%esp
f0101c0a:	6a 0a                	push   $0xa
f0101c0c:	6a 00                	push   $0x0
f0101c0e:	50                   	push   %eax
f0101c0f:	e8 0b 9a 01 00       	call   f011b61f <strtol>
f0101c14:	83 c4 10             	add    $0x10,%esp
f0101c17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101c1a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101c21:	83 ec 04             	sub    $0x4,%esp
f0101c24:	6a 00                	push   $0x0
f0101c26:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101c29:	50                   	push   %eax
f0101c2a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c2d:	e8 d2 17 00 00       	call   f0103404 <envid2env>
f0101c32:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101c35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c38:	83 c0 08             	add    $0x8,%eax
f0101c3b:	8b 00                	mov    (%eax),%eax
f0101c3d:	83 ec 04             	sub    $0x4,%esp
f0101c40:	6a 10                	push   $0x10
f0101c42:	6a 00                	push   $0x0
f0101c44:	50                   	push   %eax
f0101c45:	e8 d5 99 01 00       	call   f011b61f <strtol>
f0101c4a:	83 c4 10             	add    $0x10,%esp
f0101c4d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101c50:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c53:	85 c0                	test   %eax,%eax
f0101c55:	75 07                	jne    f0101c5e <command_readusermem+0x65>
f0101c57:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c5c:	eb 4e                	jmp    f0101cac <command_readusermem+0xb3>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101c5e:	0f 20 d8             	mov    %cr3,%eax
f0101c61:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101c64:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101c67:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101c6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c6d:	8b 40 60             	mov    0x60(%eax),%eax
f0101c70:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101c73:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101c76:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101c7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);
f0101c7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101c82:	8a 00                	mov    (%eax),%al
f0101c84:	0f b6 c0             	movzbl %al,%eax
f0101c87:	83 ec 04             	sub    $0x4,%esp
f0101c8a:	50                   	push   %eax
f0101c8b:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c8e:	68 7b d4 11 f0       	push   $0xf011d47b
f0101c93:	e8 9e 57 00 00       	call   f0107436 <cprintf>
f0101c98:	83 c4 10             	add    $0x10,%esp
f0101c9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101c9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101ca1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101ca4:	0f 22 d8             	mov    %eax,%cr3

	lcr3(oldDir);
	return 0;
f0101ca7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cac:	c9                   	leave  
f0101cad:	c3                   	ret    

f0101cae <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101cae:	55                   	push   %ebp
f0101caf:	89 e5                	mov    %esp,%ebp
f0101cb1:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cb7:	83 c0 04             	add    $0x4,%eax
f0101cba:	8b 00                	mov    (%eax),%eax
f0101cbc:	83 ec 04             	sub    $0x4,%esp
f0101cbf:	6a 10                	push   $0x10
f0101cc1:	6a 00                	push   $0x0
f0101cc3:	50                   	push   %eax
f0101cc4:	e8 56 99 01 00       	call   f011b61f <strtol>
f0101cc9:	83 c4 10             	add    $0x10,%esp
f0101ccc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101cd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101cd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cd7:	83 c0 08             	add    $0x8,%eax
f0101cda:	8b 00                	mov    (%eax),%eax
f0101cdc:	83 ec 04             	sub    $0x4,%esp
f0101cdf:	6a 0a                	push   $0xa
f0101ce1:	6a 00                	push   $0x0
f0101ce3:	50                   	push   %eax
f0101ce4:	e8 36 99 01 00       	call   f011b61f <strtol>
f0101ce9:	83 c4 10             	add    $0x10,%esp
f0101cec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101cef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101cf6:	eb 22                	jmp    f0101d1a <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cfb:	8d 50 01             	lea    0x1(%eax),%edx
f0101cfe:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101d01:	8a 00                	mov    (%eax),%al
f0101d03:	0f b6 c0             	movzbl %al,%eax
f0101d06:	83 ec 08             	sub    $0x8,%esp
f0101d09:	50                   	push   %eax
f0101d0a:	68 95 d4 11 f0       	push   $0xf011d495
f0101d0f:	e8 22 57 00 00       	call   f0107436 <cprintf>
f0101d14:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101d17:	ff 45 f0             	incl   -0x10(%ebp)
f0101d1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d1d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101d20:	7c d6                	jl     f0101cf8 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101d22:	83 ec 0c             	sub    $0xc,%esp
f0101d25:	68 98 d4 11 f0       	push   $0xf011d498
f0101d2a:	e8 07 57 00 00       	call   f0107436 <cprintf>
f0101d2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d37:	c9                   	leave  
f0101d38:	c3                   	ret    

f0101d39 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101d39:	55                   	push   %ebp
f0101d3a:	89 e5                	mov    %esp,%ebp
f0101d3c:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d42:	83 c0 04             	add    $0x4,%eax
f0101d45:	8b 00                	mov    (%eax),%eax
f0101d47:	83 ec 04             	sub    $0x4,%esp
f0101d4a:	6a 0a                	push   $0xa
f0101d4c:	6a 00                	push   $0x0
f0101d4e:	50                   	push   %eax
f0101d4f:	e8 cb 98 01 00       	call   f011b61f <strtol>
f0101d54:	83 c4 10             	add    $0x10,%esp
f0101d57:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101d5a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101d61:	83 ec 04             	sub    $0x4,%esp
f0101d64:	6a 00                	push   $0x0
f0101d66:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101d69:	50                   	push   %eax
f0101d6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101d6d:	e8 92 16 00 00       	call   f0103404 <envid2env>
f0101d72:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101d75:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d78:	83 c0 08             	add    $0x8,%eax
f0101d7b:	8b 00                	mov    (%eax),%eax
f0101d7d:	83 ec 04             	sub    $0x4,%esp
f0101d80:	6a 10                	push   $0x10
f0101d82:	6a 00                	push   $0x0
f0101d84:	50                   	push   %eax
f0101d85:	e8 95 98 01 00       	call   f011b61f <strtol>
f0101d8a:	83 c4 10             	add    $0x10,%esp
f0101d8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101d90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d93:	83 c0 0c             	add    $0xc,%eax
f0101d96:	8b 00                	mov    (%eax),%eax
f0101d98:	83 ec 04             	sub    $0x4,%esp
f0101d9b:	6a 0a                	push   $0xa
f0101d9d:	6a 00                	push   $0x0
f0101d9f:	50                   	push   %eax
f0101da0:	e8 7a 98 01 00       	call   f011b61f <strtol>
f0101da5:	83 c4 10             	add    $0x10,%esp
f0101da8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101dab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dae:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101db1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101db4:	85 c0                	test   %eax,%eax
f0101db6:	75 07                	jne    f0101dbf <command_readuserblock+0x86>
f0101db8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dbd:	eb 65                	jmp    f0101e24 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101dbf:	0f 20 d8             	mov    %cr3,%eax
f0101dc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101dc5:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101dc8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101dcb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101dce:	8b 40 60             	mov    0x60(%eax),%eax
f0101dd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101dd4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101dd7:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101dda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101de1:	eb 28                	jmp    f0101e0b <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101de6:	8a 00                	mov    (%eax),%al
f0101de8:	0f b6 d0             	movzbl %al,%edx
f0101deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dee:	8a 00                	mov    (%eax),%al
f0101df0:	0f b6 c0             	movzbl %al,%eax
f0101df3:	52                   	push   %edx
f0101df4:	50                   	push   %eax
f0101df5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101df8:	68 9a d4 11 f0       	push   $0xf011d49a
f0101dfd:	e8 34 56 00 00       	call   f0107436 <cprintf>
f0101e02:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101e05:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101e08:	ff 45 f0             	incl   -0x10(%ebp)
f0101e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e0e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101e11:	7c d0                	jl     f0101de3 <command_readuserblock+0xaa>
f0101e13:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101e16:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101e19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101e1c:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e2f:	83 c0 04             	add    $0x4,%eax
f0101e32:	8b 00                	mov    (%eax),%eax
f0101e34:	83 ec 04             	sub    $0x4,%esp
f0101e37:	6a 0a                	push   $0xa
f0101e39:	6a 00                	push   $0x0
f0101e3b:	50                   	push   %eax
f0101e3c:	e8 de 97 01 00       	call   f011b61f <strtol>
f0101e41:	83 c4 10             	add    $0x10,%esp
f0101e44:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101e47:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101e4e:	83 ec 04             	sub    $0x4,%esp
f0101e51:	6a 00                	push   $0x0
f0101e53:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101e56:	50                   	push   %eax
f0101e57:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e5a:	e8 a5 15 00 00       	call   f0103404 <envid2env>
f0101e5f:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101e62:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e65:	85 c0                	test   %eax,%eax
f0101e67:	75 0a                	jne    f0101e73 <command_remove_table+0x4d>
f0101e69:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e6e:	e9 a1 00 00 00       	jmp    f0101f14 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101e73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e76:	83 c0 08             	add    $0x8,%eax
f0101e79:	8b 00                	mov    (%eax),%eax
f0101e7b:	83 ec 04             	sub    $0x4,%esp
f0101e7e:	6a 10                	push   $0x10
f0101e80:	6a 00                	push   $0x0
f0101e82:	50                   	push   %eax
f0101e83:	e8 97 97 01 00       	call   f011b61f <strtol>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101e8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e91:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101e94:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e97:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101e9a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101e9d:	c1 ea 16             	shr    $0x16,%edx
f0101ea0:	c1 e2 02             	shl    $0x2,%edx
f0101ea3:	01 d0                	add    %edx,%eax
f0101ea5:	8b 00                	mov    (%eax),%eax
f0101ea7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101eac:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and Frame_Info of the page table
		struct Frame_Info *table_frame_info = to_frame_info(table_pa);
f0101eaf:	83 ec 0c             	sub    $0xc,%esp
f0101eb2:	ff 75 e8             	pushl  -0x18(%ebp)
f0101eb5:	e8 8b ee ff ff       	call   f0100d45 <to_frame_info>
f0101eba:	83 c4 10             	add    $0x10,%esp
f0101ebd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_frame_info->references = 0;
f0101ec0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101ec3:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_frame_info);
f0101ec9:	83 ec 0c             	sub    $0xc,%esp
f0101ecc:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101ecf:	e8 0a 1f 00 00       	call   f0103dde <free_frame>
f0101ed4:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101ed7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101eda:	c1 e8 16             	shr    $0x16,%eax
f0101edd:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101ee0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101ee3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101ee6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101ee9:	c1 e2 02             	shl    $0x2,%edx
f0101eec:	01 c2                	add    %eax,%edx
f0101eee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101ef1:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101ef4:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101ef7:	c1 e1 02             	shl    $0x2,%ecx
f0101efa:	01 c8                	add    %ecx,%eax
f0101efc:	8b 00                	mov    (%eax),%eax
f0101efe:	83 e0 fe             	and    $0xfffffffe,%eax
f0101f01:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0101f03:	0f 20 d8             	mov    %cr3,%eax
f0101f06:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101f09:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101f0c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101f0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f14:	c9                   	leave  
f0101f15:	c3                   	ret    

f0101f16 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101f16:	55                   	push   %ebp
f0101f17:	89 e5                	mov    %esp,%ebp
f0101f19:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101f1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f1f:	83 c0 04             	add    $0x4,%eax
f0101f22:	8b 00                	mov    (%eax),%eax
f0101f24:	83 ec 04             	sub    $0x4,%esp
f0101f27:	6a 0a                	push   $0xa
f0101f29:	6a 00                	push   $0x0
f0101f2b:	50                   	push   %eax
f0101f2c:	e8 ee 96 01 00       	call   f011b61f <strtol>
f0101f31:	83 c4 10             	add    $0x10,%esp
f0101f34:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101f37:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	envid2env(envId, &env, 0 );
f0101f3e:	83 ec 04             	sub    $0x4,%esp
f0101f41:	6a 00                	push   $0x0
f0101f43:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101f46:	50                   	push   %eax
f0101f47:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f4a:	e8 b5 14 00 00       	call   f0103404 <envid2env>
f0101f4f:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101f52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101f55:	85 c0                	test   %eax,%eax
f0101f57:	75 07                	jne    f0101f60 <command_allocuserpage+0x4a>
f0101f59:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f5e:	eb 6d                	jmp    f0101fcd <command_allocuserpage+0xb7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101f60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f63:	83 c0 08             	add    $0x8,%eax
f0101f66:	8b 00                	mov    (%eax),%eax
f0101f68:	83 ec 04             	sub    $0x4,%esp
f0101f6b:	6a 10                	push   $0x10
f0101f6d:	6a 00                	push   $0x0
f0101f6f:	50                   	push   %eax
f0101f70:	e8 aa 96 01 00       	call   f011b61f <strtol>
f0101f75:	83 c4 10             	add    $0x10,%esp
f0101f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct Frame_Info * ptr_frame_info ;
	int ret = allocate_frame(&ptr_frame_info);
f0101f81:	83 ec 0c             	sub    $0xc,%esp
f0101f84:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101f87:	50                   	push   %eax
f0101f88:	e8 5f 1d 00 00       	call   f0103cec <allocate_frame>
f0101f8d:	83 c4 10             	add    $0x10,%esp
f0101f90:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101f93:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101f97:	75 17                	jne    f0101fb0 <command_allocuserpage+0x9a>
	{
		cprintf("ERROR: no enough memory\n");
f0101f99:	83 ec 0c             	sub    $0xc,%esp
f0101f9c:	68 ab d4 11 f0       	push   $0xf011d4ab
f0101fa1:	e8 90 54 00 00       	call   f0107436 <cprintf>
f0101fa6:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101fa9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fae:	eb 1d                	jmp    f0101fcd <command_allocuserpage+0xb7>
	}

	// Map this frame to the given user virtual address
	map_frame(env->env_page_directory, ptr_frame_info, va, PERM_WRITEABLE | PERM_USER);
f0101fb0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101fb6:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101fb9:	6a 06                	push   $0x6
f0101fbb:	ff 75 ec             	pushl  -0x14(%ebp)
f0101fbe:	52                   	push   %edx
f0101fbf:	50                   	push   %eax
f0101fc0:	e8 7c 20 00 00       	call   f0104041 <map_frame>
f0101fc5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fc8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fcd:	c9                   	leave  
f0101fce:	c3                   	ret    

f0101fcf <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101fcf:	55                   	push   %ebp
f0101fd0:	89 e5                	mov    %esp,%ebp
f0101fd2:	56                   	push   %esi
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101fd7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101fda:	83 ec 0c             	sub    $0xc,%esp
f0101fdd:	50                   	push   %eax
f0101fde:	e8 f4 23 00 00       	call   f01043d7 <calculate_available_frames>
f0101fe3:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101fe6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101fe9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101fec:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101fef:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101ff2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101ff5:	01 de                	add    %ebx,%esi
f0101ff7:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101ffa:	01 f3                	add    %esi,%ebx
f0101ffc:	83 ec 0c             	sub    $0xc,%esp
f0101fff:	51                   	push   %ecx
f0102000:	52                   	push   %edx
f0102001:	50                   	push   %eax
f0102002:	53                   	push   %ebx
f0102003:	68 c4 d4 11 f0       	push   $0xf011d4c4
f0102008:	e8 29 54 00 00       	call   f0107436 <cprintf>
f010200d:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102010:	a1 20 d6 3c f0       	mov    0xf03cd620,%eax
f0102015:	83 ec 08             	sub    $0x8,%esp
f0102018:	50                   	push   %eax
f0102019:	68 1c d5 11 f0       	push   $0xf011d51c
f010201e:	e8 13 54 00 00       	call   f0107436 <cprintf>
f0102023:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102026:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010202b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010202e:	5b                   	pop    %ebx
f010202f:	5e                   	pop    %esi
f0102030:	5d                   	pop    %ebp
f0102031:	c3                   	ret    

f0102032 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102032:	55                   	push   %ebp
f0102033:	89 e5                	mov    %esp,%ebp
f0102035:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102038:	c7 45 f4 e8 03 00 00 	movl   $0x3e8,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f010203f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102046:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
//#if USE_KHEAP
	{
		switch (number_of_arguments)
f010204d:	8b 45 08             	mov    0x8(%ebp),%eax
f0102050:	83 f8 04             	cmp    $0x4,%eax
f0102053:	0f 84 8c 00 00 00    	je     f01020e5 <CreateEnv+0xb3>
f0102059:	83 f8 05             	cmp    $0x5,%eax
f010205c:	74 0e                	je     f010206c <CreateEnv+0x3a>
f010205e:	83 f8 03             	cmp    $0x3,%eax
f0102061:	0f 84 dc 00 00 00    	je     f0102143 <CreateEnv+0x111>
f0102067:	e9 17 01 00 00       	jmp    f0102183 <CreateEnv+0x151>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRULists())
f010206c:	e8 75 69 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f0102071:	85 c0                	test   %eax,%eax
f0102073:	75 1a                	jne    f010208f <CreateEnv+0x5d>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102075:	83 ec 0c             	sub    $0xc,%esp
f0102078:	68 58 d5 11 f0       	push   $0xf011d558
f010207d:	e8 b4 53 00 00       	call   f0107436 <cprintf>
f0102082:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0102085:	b8 00 00 00 00       	mov    $0x0,%eax
f010208a:	e9 bd 01 00 00       	jmp    f010224c <CreateEnv+0x21a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f010208f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102092:	83 c0 10             	add    $0x10,%eax
f0102095:	8b 00                	mov    (%eax),%eax
f0102097:	83 ec 04             	sub    $0x4,%esp
f010209a:	6a 0a                	push   $0xa
f010209c:	6a 00                	push   $0x0
f010209e:	50                   	push   %eax
f010209f:	e8 7b 95 01 00       	call   f011b61f <strtol>
f01020a4:	83 c4 10             	add    $0x10,%esp
f01020a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f01020aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020ad:	83 c0 0c             	add    $0xc,%eax
f01020b0:	8b 00                	mov    (%eax),%eax
f01020b2:	83 ec 04             	sub    $0x4,%esp
f01020b5:	6a 0a                	push   $0xa
f01020b7:	6a 00                	push   $0x0
f01020b9:	50                   	push   %eax
f01020ba:	e8 60 95 01 00       	call   f011b61f <strtol>
f01020bf:	83 c4 10             	add    $0x10,%esp
f01020c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f01020c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020c8:	83 c0 08             	add    $0x8,%eax
f01020cb:	8b 00                	mov    (%eax),%eax
f01020cd:	83 ec 04             	sub    $0x4,%esp
f01020d0:	6a 0a                	push   $0xa
f01020d2:	6a 00                	push   $0x0
f01020d4:	50                   	push   %eax
f01020d5:	e8 45 95 01 00       	call   f011b61f <strtol>
f01020da:	83 c4 10             	add    $0x10,%esp
f01020dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01020e0:	e9 b8 00 00 00       	jmp    f010219d <CreateEnv+0x16b>
		case 4:
			if(!isPageReplacmentAlgorithmLRULists())
f01020e5:	e8 fc 68 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f01020ea:	85 c0                	test   %eax,%eax
f01020ec:	75 1d                	jne    f010210b <CreateEnv+0xd9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f01020ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020f1:	83 c0 0c             	add    $0xc,%eax
f01020f4:	8b 00                	mov    (%eax),%eax
f01020f6:	83 ec 04             	sub    $0x4,%esp
f01020f9:	6a 0a                	push   $0xa
f01020fb:	6a 00                	push   $0x0
f01020fd:	50                   	push   %eax
f01020fe:	e8 1c 95 01 00       	call   f011b61f <strtol>
f0102103:	83 c4 10             	add    $0x10,%esp
f0102106:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102109:	eb 1b                	jmp    f0102126 <CreateEnv+0xf4>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f010210b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010210e:	83 c0 0c             	add    $0xc,%eax
f0102111:	8b 00                	mov    (%eax),%eax
f0102113:	83 ec 04             	sub    $0x4,%esp
f0102116:	6a 0a                	push   $0xa
f0102118:	6a 00                	push   $0x0
f010211a:	50                   	push   %eax
f010211b:	e8 ff 94 01 00       	call   f011b61f <strtol>
f0102120:	83 c4 10             	add    $0x10,%esp
f0102123:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0102126:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102129:	83 c0 08             	add    $0x8,%eax
f010212c:	8b 00                	mov    (%eax),%eax
f010212e:	83 ec 04             	sub    $0x4,%esp
f0102131:	6a 0a                	push   $0xa
f0102133:	6a 00                	push   $0x0
f0102135:	50                   	push   %eax
f0102136:	e8 e4 94 01 00       	call   f011b61f <strtol>
f010213b:	83 c4 10             	add    $0x10,%esp
f010213e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0102141:	eb 5a                	jmp    f010219d <CreateEnv+0x16b>
		case 3:
			if(isPageReplacmentAlgorithmLRULists())
f0102143:	e8 9e 68 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f0102148:	85 c0                	test   %eax,%eax
f010214a:	74 1a                	je     f0102166 <CreateEnv+0x134>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f010214c:	83 ec 0c             	sub    $0xc,%esp
f010214f:	68 18 d6 11 f0       	push   $0xf011d618
f0102154:	e8 dd 52 00 00       	call   f0107436 <cprintf>
f0102159:	83 c4 10             	add    $0x10,%esp
				return NULL;
f010215c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102161:	e9 e6 00 00 00       	jmp    f010224c <CreateEnv+0x21a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0102166:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102169:	83 c0 08             	add    $0x8,%eax
f010216c:	8b 00                	mov    (%eax),%eax
f010216e:	83 ec 04             	sub    $0x4,%esp
f0102171:	6a 0a                	push   $0xa
f0102173:	6a 00                	push   $0x0
f0102175:	50                   	push   %eax
f0102176:	e8 a4 94 01 00       	call   f011b61f <strtol>
f010217b:	83 c4 10             	add    $0x10,%esp
f010217e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0102181:	eb 1a                	jmp    f010219d <CreateEnv+0x16b>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102183:	83 ec 0c             	sub    $0xc,%esp
f0102186:	68 a8 d6 11 f0       	push   $0xf011d6a8
f010218b:	e8 a6 52 00 00       	call   f0107436 <cprintf>
f0102190:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102193:	b8 00 00 00 00       	mov    $0x0,%eax
f0102198:	e9 af 00 00 00       	jmp    f010224c <CreateEnv+0x21a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f010219d:	81 7d f4 e8 03 00 00 	cmpl   $0x3e8,-0xc(%ebp)
f01021a4:	76 1f                	jbe    f01021c5 <CreateEnv+0x193>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f01021a6:	83 ec 08             	sub    $0x8,%esp
f01021a9:	68 e8 03 00 00       	push   $0x3e8
f01021ae:	68 40 d7 11 f0       	push   $0xf011d740
f01021b3:	e8 7e 52 00 00       	call   f0107436 <cprintf>
f01021b8:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01021bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01021c0:	e9 87 00 00 00       	jmp    f010224c <CreateEnv+0x21a>
		}
		if(isPageReplacmentAlgorithmLRULists())
f01021c5:	e8 1c 68 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f01021ca:	85 c0                	test   %eax,%eax
f01021cc:	74 20                	je     f01021ee <CreateEnv+0x1bc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f01021ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021d1:	48                   	dec    %eax
f01021d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01021d5:	73 17                	jae    f01021ee <CreateEnv+0x1bc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f01021d7:	83 ec 0c             	sub    $0xc,%esp
f01021da:	68 80 d7 11 f0       	push   $0xf011d780
f01021df:	e8 52 52 00 00       	call   f0107436 <cprintf>
f01021e4:	83 c4 10             	add    $0x10,%esp
				return NULL;
f01021e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01021ec:	eb 5e                	jmp    f010224c <CreateEnv+0x21a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f01021ee:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f01021f2:	76 19                	jbe    f010220d <CreateEnv+0x1db>
f01021f4:	68 d8 d7 11 f0       	push   $0xf011d7d8
f01021f9:	68 1d d8 11 f0       	push   $0xf011d81d
f01021fe:	68 ef 02 00 00       	push   $0x2ef
f0102203:	68 32 d8 11 f0       	push   $0xf011d832
f0102208:	e8 86 df ff ff       	call   f0100193 <_panic>
//		{
//			LRUSecondListSize = __LRU_SNDLST_SIZE;
//		}
//	}
//#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f010220d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0102211:	76 19                	jbe    f010222c <CreateEnv+0x1fa>
f0102213:	68 d8 d7 11 f0       	push   $0xf011d7d8
f0102218:	68 1d d8 11 f0       	push   $0xf011d81d
f010221d:	68 06 03 00 00       	push   $0x306
f0102222:	68 32 d8 11 f0       	push   $0xf011d832
f0102227:	e8 67 df ff ff       	call   f0100193 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f010222c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010222f:	83 c0 04             	add    $0x4,%eax
f0102232:	8b 00                	mov    (%eax),%eax
f0102234:	ff 75 ec             	pushl  -0x14(%ebp)
f0102237:	ff 75 f0             	pushl  -0x10(%ebp)
f010223a:	ff 75 f4             	pushl  -0xc(%ebp)
f010223d:	50                   	push   %eax
f010223e:	e8 f1 36 00 00       	call   f0105934 <env_create>
f0102243:	83 c4 10             	add    $0x10,%esp
f0102246:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102249:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010224c:	c9                   	leave  
f010224d:	c3                   	ret    

f010224e <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f010224e:	55                   	push   %ebp
f010224f:	89 e5                	mov    %esp,%ebp
f0102251:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102254:	83 ec 08             	sub    $0x8,%esp
f0102257:	ff 75 0c             	pushl  0xc(%ebp)
f010225a:	ff 75 08             	pushl  0x8(%ebp)
f010225d:	e8 d0 fd ff ff       	call   f0102032 <CreateEnv>
f0102262:	83 c4 10             	add    $0x10,%esp
f0102265:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102268:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010226c:	75 07                	jne    f0102275 <command_run_program+0x27>
f010226e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102273:	eb 46                	jmp    f01022bb <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102275:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102278:	8b 40 4c             	mov    0x4c(%eax),%eax
f010227b:	83 ec 08             	sub    $0x8,%esp
f010227e:	50                   	push   %eax
f010227f:	68 48 d8 11 f0       	push   $0xf011d848
f0102284:	e8 ad 51 00 00       	call   f0107436 <cprintf>
f0102289:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f010228c:	c7 05 20 d6 3c f0 00 	movl   $0x0,0xf03cd620
f0102293:	00 00 00 

	sched_new_env(env);
f0102296:	83 ec 0c             	sub    $0xc,%esp
f0102299:	ff 75 f4             	pushl  -0xc(%ebp)
f010229c:	e8 d9 93 00 00       	call   f010b67a <sched_new_env>
f01022a1:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f01022a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01022a7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01022aa:	83 ec 0c             	sub    $0xc,%esp
f01022ad:	50                   	push   %eax
f01022ae:	e8 de 93 00 00       	call   f010b691 <sched_run_env>
f01022b3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022bb:	c9                   	leave  
f01022bc:	c3                   	ret    

f01022bd <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f01022bd:	55                   	push   %ebp
f01022be:	89 e5                	mov    %esp,%ebp
f01022c0:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01022c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022c6:	83 c0 04             	add    $0x4,%eax
f01022c9:	8b 00                	mov    (%eax),%eax
f01022cb:	83 ec 04             	sub    $0x4,%esp
f01022ce:	6a 0a                	push   $0xa
f01022d0:	6a 00                	push   $0x0
f01022d2:	50                   	push   %eax
f01022d3:	e8 47 93 01 00       	call   f011b61f <strtol>
f01022d8:	83 c4 10             	add    $0x10,%esp
f01022db:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f01022de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	50                   	push   %eax
f01022e5:	e8 df 97 00 00       	call   f010bac9 <sched_kill_env>
f01022ea:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f2:	c9                   	leave  
f01022f3:	c3                   	ret    

f01022f4 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f01022f4:	55                   	push   %ebp
f01022f5:	89 e5                	mov    %esp,%ebp
f01022f7:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f01022fa:	83 ec 08             	sub    $0x8,%esp
f01022fd:	ff 75 0c             	pushl  0xc(%ebp)
f0102300:	ff 75 08             	pushl  0x8(%ebp)
f0102303:	e8 2a fd ff ff       	call   f0102032 <CreateEnv>
f0102308:	83 c4 10             	add    $0x10,%esp
f010230b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f010230e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102312:	75 07                	jne    f010231b <commnad_load_env+0x27>
		return 0 ;
f0102314:	b8 00 00 00 00       	mov    $0x0,%eax
f0102319:	eb 2a                	jmp    f0102345 <commnad_load_env+0x51>

	sched_new_env(env) ;
f010231b:	83 ec 0c             	sub    $0xc,%esp
f010231e:	ff 75 f4             	pushl  -0xc(%ebp)
f0102321:	e8 54 93 00 00       	call   f010b67a <sched_new_env>
f0102326:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102329:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010232c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010232f:	83 ec 08             	sub    $0x8,%esp
f0102332:	50                   	push   %eax
f0102333:	68 48 d8 11 f0       	push   $0xf011d848
f0102338:	e8 f9 50 00 00       	call   f0107436 <cprintf>
f010233d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102340:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102345:	c9                   	leave  
f0102346:	c3                   	ret    

f0102347 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102347:	55                   	push   %ebp
f0102348:	89 e5                	mov    %esp,%ebp
f010234a:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f010234d:	c7 05 20 d6 3c f0 00 	movl   $0x0,0xf03cd620
f0102354:	00 00 00 
	sched_run_all();
f0102357:	e8 33 8f 00 00       	call   f010b28f <sched_run_all>

	return 0 ;
f010235c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102361:	c9                   	leave  
f0102362:	c3                   	ret    

f0102363 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102363:	55                   	push   %ebp
f0102364:	89 e5                	mov    %esp,%ebp
f0102366:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102369:	e8 16 8d 00 00       	call   f010b084 <sched_print_all>

	return 0 ;
f010236e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102373:	c9                   	leave  
f0102374:	c3                   	ret    

f0102375 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102375:	55                   	push   %ebp
f0102376:	89 e5                	mov    %esp,%ebp
f0102378:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f010237b:	e8 cb 8f 00 00       	call   f010b34b <sched_kill_all>

	return 0 ;
f0102380:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102385:	c9                   	leave  
f0102386:	c3                   	ret    

f0102387 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102387:	55                   	push   %ebp
f0102388:	89 e5                	mov    %esp,%ebp
f010238a:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f010238d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102391:	7f 1a                	jg     f01023ad <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102393:	83 ec 0c             	sub    $0xc,%esp
f0102396:	68 60 d8 11 f0       	push   $0xf011d860
f010239b:	e8 96 50 00 00       	call   f0107436 <cprintf>
f01023a0:	83 c4 10             	add    $0x10,%esp
		return 0;
f01023a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01023a8:	e9 83 00 00 00       	jmp    f0102430 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f01023ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023b0:	83 c0 04             	add    $0x4,%eax
f01023b3:	8b 00                	mov    (%eax),%eax
f01023b5:	83 ec 04             	sub    $0x4,%esp
f01023b8:	6a 0a                	push   $0xa
f01023ba:	6a 00                	push   $0x0
f01023bc:	50                   	push   %eax
f01023bd:	e8 5d 92 01 00       	call   f011b61f <strtol>
f01023c2:	83 c4 10             	add    $0x10,%esp
f01023c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f01023c8:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01023cc:	75 20                	jne    f01023ee <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f01023ce:	83 ec 0c             	sub    $0xc,%esp
f01023d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01023d4:	e8 8c 65 00 00       	call   f0108965 <setPageReplacmentAlgorithmLRU>
f01023d9:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f01023dc:	83 ec 0c             	sub    $0xc,%esp
f01023df:	68 c0 d8 11 f0       	push   $0xf011d8c0
f01023e4:	e8 4d 50 00 00       	call   f0107436 <cprintf>
f01023e9:	83 c4 10             	add    $0x10,%esp
f01023ec:	eb 3d                	jmp    f010242b <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f01023ee:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01023f2:	75 20                	jne    f0102414 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f01023f4:	83 ec 0c             	sub    $0xc,%esp
f01023f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01023fa:	e8 66 65 00 00       	call   f0108965 <setPageReplacmentAlgorithmLRU>
f01023ff:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102402:	83 ec 0c             	sub    $0xc,%esp
f0102405:	68 04 d9 11 f0       	push   $0xf011d904
f010240a:	e8 27 50 00 00       	call   f0107436 <cprintf>
f010240f:	83 c4 10             	add    $0x10,%esp
f0102412:	eb 17                	jmp    f010242b <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 44 d9 11 f0       	push   $0xf011d944
f010241c:	e8 15 50 00 00       	call   f0107436 <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
f0102429:	eb 05                	jmp    f0102430 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f010242b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102430:	c9                   	leave  
f0102431:	c3                   	ret    

f0102432 <command_set_page_rep_CLOCK>:

int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102432:	55                   	push   %ebp
f0102433:	89 e5                	mov    %esp,%ebp
f0102435:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102438:	e8 5e 65 00 00       	call   f010899b <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f010243d:	83 ec 0c             	sub    $0xc,%esp
f0102440:	68 98 d9 11 f0       	push   $0xf011d998
f0102445:	e8 ec 4f 00 00       	call   f0107436 <cprintf>
f010244a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010244d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102452:	c9                   	leave  
f0102453:	c3                   	ret    

f0102454 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102454:	55                   	push   %ebp
f0102455:	89 e5                	mov    %esp,%ebp
f0102457:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f010245a:	e8 4c 65 00 00       	call   f01089ab <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f010245f:	83 ec 0c             	sub    $0xc,%esp
f0102462:	68 c4 d9 11 f0       	push   $0xf011d9c4
f0102467:	e8 ca 4f 00 00       	call   f0107436 <cprintf>
f010246c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010246f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102474:	c9                   	leave  
f0102475:	c3                   	ret    

f0102476 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102476:	55                   	push   %ebp
f0102477:	89 e5                	mov    %esp,%ebp
f0102479:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f010247c:	e8 3a 65 00 00       	call   f01089bb <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102481:	83 ec 0c             	sub    $0xc,%esp
f0102484:	68 ec d9 11 f0       	push   $0xf011d9ec
f0102489:	e8 a8 4f 00 00       	call   f0107436 <cprintf>
f010248e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102491:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102496:	c9                   	leave  
f0102497:	c3                   	ret    

f0102498 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102498:	55                   	push   %ebp
f0102499:	89 e5                	mov    %esp,%ebp
f010249b:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f010249e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024a1:	83 c0 04             	add    $0x4,%eax
f01024a4:	8b 00                	mov    (%eax),%eax
f01024a6:	83 ec 04             	sub    $0x4,%esp
f01024a9:	6a 0a                	push   $0xa
f01024ab:	6a 00                	push   $0x0
f01024ad:	50                   	push   %eax
f01024ae:	e8 6c 91 01 00       	call   f011b61f <strtol>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f01024b9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01024bd:	83 ec 0c             	sub    $0xc,%esp
f01024c0:	50                   	push   %eax
f01024c1:	e8 27 89 00 00       	call   f010aded <sched_init_RR>
f01024c6:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f01024c9:	a0 d4 f5 3a f0       	mov    0xf03af5d4,%al
f01024ce:	0f b6 c0             	movzbl %al,%eax
f01024d1:	83 ec 08             	sub    $0x8,%esp
f01024d4:	50                   	push   %eax
f01024d5:	68 20 da 11 f0       	push   $0xf011da20
f01024da:	e8 57 4f 00 00       	call   f0107436 <cprintf>
f01024df:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e7:	c9                   	leave  
f01024e8:	c3                   	ret    

f01024e9 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f01024e9:	55                   	push   %ebp
f01024ea:	89 e5                	mov    %esp,%ebp
f01024ec:	53                   	push   %ebx
f01024ed:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01024f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024f3:	83 c0 04             	add    $0x4,%eax
f01024f6:	8b 00                	mov    (%eax),%eax
f01024f8:	83 ec 04             	sub    $0x4,%esp
f01024fb:	6a 0a                	push   $0xa
f01024fd:	6a 00                	push   $0x0
f01024ff:	50                   	push   %eax
f0102500:	e8 1a 91 01 00       	call   f011b61f <strtol>
f0102505:	83 c4 10             	add    $0x10,%esp
f0102508:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010250b:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102512:	eb 2e                	jmp    f0102542 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102514:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102517:	8d 58 fe             	lea    -0x2(%eax),%ebx
f010251a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010251d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102524:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102527:	01 d0                	add    %edx,%eax
f0102529:	8b 00                	mov    (%eax),%eax
f010252b:	83 ec 04             	sub    $0x4,%esp
f010252e:	6a 0a                	push   $0xa
f0102530:	6a 00                	push   $0x0
f0102532:	50                   	push   %eax
f0102533:	e8 e7 90 01 00       	call   f011b61f <strtol>
f0102538:	83 c4 10             	add    $0x10,%esp
f010253b:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010253f:	ff 45 f4             	incl   -0xc(%ebp)
f0102542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102545:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102548:	7c ca                	jl     f0102514 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010254a:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010254e:	83 ec 08             	sub    $0x8,%esp
f0102551:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102554:	52                   	push   %edx
f0102555:	50                   	push   %eax
f0102556:	e8 ea 83 00 00       	call   f010a945 <sched_init_MLFQ>
f010255b:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010255e:	83 ec 0c             	sub    $0xc,%esp
f0102561:	68 58 da 11 f0       	push   $0xf011da58
f0102566:	e8 cb 4e 00 00       	call   f0107436 <cprintf>
f010256b:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010256e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102575:	eb 21                	jmp    f0102598 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0102577:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010257a:	05 d4 f5 3a f0       	add    $0xf03af5d4,%eax
f010257f:	8a 00                	mov    (%eax),%al
f0102581:	0f b6 c0             	movzbl %al,%eax
f0102584:	83 ec 08             	sub    $0x8,%esp
f0102587:	50                   	push   %eax
f0102588:	68 85 da 11 f0       	push   $0xf011da85
f010258d:	e8 a4 4e 00 00       	call   f0107436 <cprintf>
f0102592:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102595:	ff 45 f0             	incl   -0x10(%ebp)
f0102598:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010259d:	0f b6 c0             	movzbl %al,%eax
f01025a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01025a3:	7f d2                	jg     f0102577 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01025a5:	83 ec 0c             	sub    $0xc,%esp
f01025a8:	68 98 d4 11 f0       	push   $0xf011d498
f01025ad:	e8 84 4e 00 00       	call   f0107436 <cprintf>
f01025b2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01025bd:	c9                   	leave  
f01025be:	c3                   	ret    

f01025bf <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01025bf:	55                   	push   %ebp
f01025c0:	89 e5                	mov    %esp,%ebp
f01025c2:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01025c5:	e8 d7 82 00 00       	call   f010a8a1 <isSchedMethodMLFQ>
f01025ca:	85 c0                	test   %eax,%eax
f01025cc:	74 59                	je     f0102627 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01025ce:	83 ec 0c             	sub    $0xc,%esp
f01025d1:	68 8c da 11 f0       	push   $0xf011da8c
f01025d6:	e8 5b 4e 00 00       	call   f0107436 <cprintf>
f01025db:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01025de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01025e5:	eb 21                	jmp    f0102608 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f01025e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01025ea:	05 d4 f5 3a f0       	add    $0xf03af5d4,%eax
f01025ef:	8a 00                	mov    (%eax),%al
f01025f1:	0f b6 c0             	movzbl %al,%eax
f01025f4:	83 ec 08             	sub    $0x8,%esp
f01025f7:	50                   	push   %eax
f01025f8:	68 85 da 11 f0       	push   $0xf011da85
f01025fd:	e8 34 4e 00 00       	call   f0107436 <cprintf>
f0102602:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102605:	ff 45 f4             	incl   -0xc(%ebp)
f0102608:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010260d:	0f b6 c0             	movzbl %al,%eax
f0102610:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102613:	7f d2                	jg     f01025e7 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102615:	83 ec 0c             	sub    $0xc,%esp
f0102618:	68 98 d4 11 f0       	push   $0xf011d498
f010261d:	e8 14 4e 00 00       	call   f0107436 <cprintf>
f0102622:	83 c4 10             	add    $0x10,%esp
f0102625:	eb 34                	jmp    f010265b <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0102627:	e8 5b 82 00 00       	call   f010a887 <isSchedMethodRR>
f010262c:	85 c0                	test   %eax,%eax
f010262e:	74 1b                	je     f010264b <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102630:	a0 d4 f5 3a f0       	mov    0xf03af5d4,%al
f0102635:	0f b6 c0             	movzbl %al,%eax
f0102638:	83 ec 08             	sub    $0x8,%esp
f010263b:	50                   	push   %eax
f010263c:	68 c0 da 11 f0       	push   $0xf011dac0
f0102641:	e8 f0 4d 00 00       	call   f0107436 <cprintf>
f0102646:	83 c4 10             	add    $0x10,%esp
f0102649:	eb 10                	jmp    f010265b <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010264b:	83 ec 0c             	sub    $0xc,%esp
f010264e:	68 fc da 11 f0       	push   $0xf011dafc
f0102653:	e8 de 4d 00 00       	call   f0107436 <cprintf>
f0102658:	83 c4 10             	add    $0x10,%esp

	return 0;
f010265b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102660:	c9                   	leave  
f0102661:	c3                   	ret    

f0102662 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102662:	55                   	push   %ebp
f0102663:	89 e5                	mov    %esp,%ebp
f0102665:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102668:	8b 45 0c             	mov    0xc(%ebp),%eax
f010266b:	83 c0 04             	add    $0x4,%eax
f010266e:	8b 00                	mov    (%eax),%eax
f0102670:	83 ec 04             	sub    $0x4,%esp
f0102673:	6a 0a                	push   $0xa
f0102675:	6a 00                	push   $0x0
f0102677:	50                   	push   %eax
f0102678:	e8 a2 8f 01 00       	call   f011b61f <strtol>
f010267d:	83 c4 10             	add    $0x10,%esp
f0102680:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102683:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102686:	0f b6 c0             	movzbl %al,%eax
f0102689:	83 ec 0c             	sub    $0xc,%esp
f010268c:	50                   	push   %eax
f010268d:	e8 f0 9a 01 00       	call   f011c182 <chksch>
f0102692:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102695:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102699:	75 12                	jne    f01026ad <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010269b:	83 ec 0c             	sub    $0xc,%esp
f010269e:	68 24 db 11 f0       	push   $0xf011db24
f01026a3:	e8 8e 4d 00 00       	call   f0107436 <cprintf>
f01026a8:	83 c4 10             	add    $0x10,%esp
f01026ab:	eb 16                	jmp    f01026c3 <command_sch_test+0x61>
	else if (status == 1)
f01026ad:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01026b1:	75 10                	jne    f01026c3 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 4c db 11 f0       	push   $0xf011db4c
f01026bb:	e8 76 4d 00 00       	call   f0107436 <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026c8:	c9                   	leave  
f01026c9:	c3                   	ret    

f01026ca <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01026ca:	55                   	push   %ebp
f01026cb:	89 e5                	mov    %esp,%ebp
f01026cd:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01026d0:	e8 2c 63 00 00       	call   f0108a01 <isPageReplacmentAlgorithmCLOCK>
f01026d5:	85 c0                	test   %eax,%eax
f01026d7:	74 12                	je     f01026eb <command_print_page_rep+0x21>
		cprintf("Page replacement algorithm is CLOCK\n");
f01026d9:	83 ec 0c             	sub    $0xc,%esp
f01026dc:	68 70 db 11 f0       	push   $0xf011db70
f01026e1:	e8 50 4d 00 00       	call   f0107436 <cprintf>
f01026e6:	83 c4 10             	add    $0x10,%esp
f01026e9:	eb 7c                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmLRUTimeStamp())
f01026eb:	e8 db 62 00 00       	call   f01089cb <isPageReplacmentAlgorithmLRUTimeStamp>
f01026f0:	85 c0                	test   %eax,%eax
f01026f2:	74 12                	je     f0102706 <command_print_page_rep+0x3c>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01026f4:	83 ec 0c             	sub    $0xc,%esp
f01026f7:	68 98 db 11 f0       	push   $0xf011db98
f01026fc:	e8 35 4d 00 00       	call   f0107436 <cprintf>
f0102701:	83 c4 10             	add    $0x10,%esp
f0102704:	eb 61                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmLRULists())
f0102706:	e8 db 62 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f010270b:	85 c0                	test   %eax,%eax
f010270d:	74 12                	je     f0102721 <command_print_page_rep+0x57>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f010270f:	83 ec 0c             	sub    $0xc,%esp
f0102712:	68 d8 db 11 f0       	push   $0xf011dbd8
f0102717:	e8 1a 4d 00 00       	call   f0107436 <cprintf>
f010271c:	83 c4 10             	add    $0x10,%esp
f010271f:	eb 46                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmFIFO())
f0102721:	e8 f6 62 00 00       	call   f0108a1c <isPageReplacmentAlgorithmFIFO>
f0102726:	85 c0                	test   %eax,%eax
f0102728:	74 12                	je     f010273c <command_print_page_rep+0x72>
		cprintf("Page replacement algorithm is FIFO\n");
f010272a:	83 ec 0c             	sub    $0xc,%esp
f010272d:	68 14 dc 11 f0       	push   $0xf011dc14
f0102732:	e8 ff 4c 00 00       	call   f0107436 <cprintf>
f0102737:	83 c4 10             	add    $0x10,%esp
f010273a:	eb 2b                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010273c:	e8 f6 62 00 00       	call   f0108a37 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102741:	85 c0                	test   %eax,%eax
f0102743:	74 12                	je     f0102757 <command_print_page_rep+0x8d>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102745:	83 ec 0c             	sub    $0xc,%esp
f0102748:	68 38 dc 11 f0       	push   $0xf011dc38
f010274d:	e8 e4 4c 00 00       	call   f0107436 <cprintf>
f0102752:	83 c4 10             	add    $0x10,%esp
f0102755:	eb 10                	jmp    f0102767 <command_print_page_rep+0x9d>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102757:	83 ec 0c             	sub    $0xc,%esp
f010275a:	68 68 dc 11 f0       	push   $0xf011dc68
f010275f:	e8 d2 4c 00 00       	call   f0107436 <cprintf>
f0102764:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102767:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010276c:	c9                   	leave  
f010276d:	c3                   	ret    

f010276e <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010276e:	55                   	push   %ebp
f010276f:	89 e5                	mov    %esp,%ebp
f0102771:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102774:	e8 6a 24 00 00       	call   f0104be3 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0102779:	83 ec 0c             	sub    $0xc,%esp
f010277c:	68 94 dc 11 f0       	push   $0xf011dc94
f0102781:	e8 b0 4c 00 00       	call   f0107436 <cprintf>
f0102786:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102789:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010278e:	c9                   	leave  
f010278f:	c3                   	ret    

f0102790 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102790:	55                   	push   %ebp
f0102791:	89 e5                	mov    %esp,%ebp
f0102793:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102796:	e8 58 24 00 00       	call   f0104bf3 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010279b:	83 ec 0c             	sub    $0xc,%esp
f010279e:	68 c4 dc 11 f0       	push   $0xf011dcc4
f01027a3:	e8 8e 4c 00 00       	call   f0107436 <cprintf>
f01027a8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01027ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027b0:	c9                   	leave  
f01027b1:	c3                   	ret    

f01027b2 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01027b2:	55                   	push   %ebp
f01027b3:	89 e5                	mov    %esp,%ebp
f01027b5:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01027b8:	e8 46 24 00 00       	call   f0104c03 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01027bd:	83 ec 0c             	sub    $0xc,%esp
f01027c0:	68 f4 dc 11 f0       	push   $0xf011dcf4
f01027c5:	e8 6c 4c 00 00       	call   f0107436 <cprintf>
f01027ca:	83 c4 10             	add    $0x10,%esp
	return 0;
f01027cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027d2:	c9                   	leave  
f01027d3:	c3                   	ret    

f01027d4 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01027d4:	55                   	push   %ebp
f01027d5:	89 e5                	mov    %esp,%ebp
f01027d7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01027da:	e8 34 24 00 00       	call   f0104c13 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01027df:	83 ec 0c             	sub    $0xc,%esp
f01027e2:	68 24 dd 11 f0       	push   $0xf011dd24
f01027e7:	e8 4a 4c 00 00       	call   f0107436 <cprintf>
f01027ec:	83 c4 10             	add    $0x10,%esp
	return 0;
f01027ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027f4:	c9                   	leave  
f01027f5:	c3                   	ret    

f01027f6 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01027f6:	55                   	push   %ebp
f01027f7:	89 e5                	mov    %esp,%ebp
f01027f9:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01027fc:	e8 22 24 00 00       	call   f0104c23 <isUHeapPlacementStrategyFIRSTFIT>
f0102801:	85 c0                	test   %eax,%eax
f0102803:	74 12                	je     f0102817 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102805:	83 ec 0c             	sub    $0xc,%esp
f0102808:	68 54 dd 11 f0       	push   $0xf011dd54
f010280d:	e8 24 4c 00 00       	call   f0107436 <cprintf>
f0102812:	83 c4 10             	add    $0x10,%esp
f0102815:	eb 61                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102817:	e8 22 24 00 00       	call   f0104c3e <isUHeapPlacementStrategyBESTFIT>
f010281c:	85 c0                	test   %eax,%eax
f010281e:	74 12                	je     f0102832 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102820:	83 ec 0c             	sub    $0xc,%esp
f0102823:	68 80 dd 11 f0       	push   $0xf011dd80
f0102828:	e8 09 4c 00 00       	call   f0107436 <cprintf>
f010282d:	83 c4 10             	add    $0x10,%esp
f0102830:	eb 46                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102832:	e8 22 24 00 00       	call   f0104c59 <isUHeapPlacementStrategyNEXTFIT>
f0102837:	85 c0                	test   %eax,%eax
f0102839:	74 12                	je     f010284d <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010283b:	83 ec 0c             	sub    $0xc,%esp
f010283e:	68 ac dd 11 f0       	push   $0xf011ddac
f0102843:	e8 ee 4b 00 00       	call   f0107436 <cprintf>
f0102848:	83 c4 10             	add    $0x10,%esp
f010284b:	eb 2b                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010284d:	e8 22 24 00 00       	call   f0104c74 <isUHeapPlacementStrategyWORSTFIT>
f0102852:	85 c0                	test   %eax,%eax
f0102854:	74 12                	je     f0102868 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102856:	83 ec 0c             	sub    $0xc,%esp
f0102859:	68 d8 dd 11 f0       	push   $0xf011ddd8
f010285e:	e8 d3 4b 00 00       	call   f0107436 <cprintf>
f0102863:	83 c4 10             	add    $0x10,%esp
f0102866:	eb 10                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102868:	83 ec 0c             	sub    $0xc,%esp
f010286b:	68 04 de 11 f0       	push   $0xf011de04
f0102870:	e8 c1 4b 00 00       	call   f0107436 <cprintf>
f0102875:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102878:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010287d:	c9                   	leave  
f010287e:	c3                   	ret    

f010287f <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010287f:	55                   	push   %ebp
f0102880:	89 e5                	mov    %esp,%ebp
f0102882:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102885:	e8 05 24 00 00       	call   f0104c8f <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010288a:	83 ec 0c             	sub    $0xc,%esp
f010288d:	68 30 de 11 f0       	push   $0xf011de30
f0102892:	e8 9f 4b 00 00       	call   f0107436 <cprintf>
f0102897:	83 c4 10             	add    $0x10,%esp
	return 0;
f010289a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010289f:	c9                   	leave  
f01028a0:	c3                   	ret    

f01028a1 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01028a1:	55                   	push   %ebp
f01028a2:	89 e5                	mov    %esp,%ebp
f01028a4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01028a7:	e8 f3 23 00 00       	call   f0104c9f <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01028ac:	83 ec 0c             	sub    $0xc,%esp
f01028af:	68 30 de 11 f0       	push   $0xf011de30
f01028b4:	e8 7d 4b 00 00       	call   f0107436 <cprintf>
f01028b9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c1:	c9                   	leave  
f01028c2:	c3                   	ret    

f01028c3 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01028c3:	55                   	push   %ebp
f01028c4:	89 e5                	mov    %esp,%ebp
f01028c6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01028c9:	e8 e1 23 00 00       	call   f0104caf <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01028ce:	83 ec 0c             	sub    $0xc,%esp
f01028d1:	68 64 de 11 f0       	push   $0xf011de64
f01028d6:	e8 5b 4b 00 00       	call   f0107436 <cprintf>
f01028db:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028e3:	c9                   	leave  
f01028e4:	c3                   	ret    

f01028e5 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01028e5:	55                   	push   %ebp
f01028e6:	89 e5                	mov    %esp,%ebp
f01028e8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01028eb:	e8 cf 23 00 00       	call   f0104cbf <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01028f0:	83 ec 0c             	sub    $0xc,%esp
f01028f3:	68 94 de 11 f0       	push   $0xf011de94
f01028f8:	e8 39 4b 00 00       	call   f0107436 <cprintf>
f01028fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102900:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102905:	c9                   	leave  
f0102906:	c3                   	ret    

f0102907 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102907:	55                   	push   %ebp
f0102908:	89 e5                	mov    %esp,%ebp
f010290a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010290d:	e8 bd 23 00 00       	call   f0104ccf <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102912:	83 ec 0c             	sub    $0xc,%esp
f0102915:	68 c4 de 11 f0       	push   $0xf011dec4
f010291a:	e8 17 4b 00 00       	call   f0107436 <cprintf>
f010291f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102922:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102927:	c9                   	leave  
f0102928:	c3                   	ret    

f0102929 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102929:	55                   	push   %ebp
f010292a:	89 e5                	mov    %esp,%ebp
f010292c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010292f:	e8 ab 23 00 00       	call   f0104cdf <isKHeapPlacementStrategyCONTALLOC>
f0102934:	85 c0                	test   %eax,%eax
f0102936:	74 12                	je     f010294a <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102938:	83 ec 0c             	sub    $0xc,%esp
f010293b:	68 f8 de 11 f0       	push   $0xf011def8
f0102940:	e8 f1 4a 00 00       	call   f0107436 <cprintf>
f0102945:	83 c4 10             	add    $0x10,%esp
f0102948:	eb 7c                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010294a:	e8 aa 23 00 00       	call   f0104cf9 <isKHeapPlacementStrategyFIRSTFIT>
f010294f:	85 c0                	test   %eax,%eax
f0102951:	74 12                	je     f0102965 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102953:	83 ec 0c             	sub    $0xc,%esp
f0102956:	68 34 df 11 f0       	push   $0xf011df34
f010295b:	e8 d6 4a 00 00       	call   f0107436 <cprintf>
f0102960:	83 c4 10             	add    $0x10,%esp
f0102963:	eb 61                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102965:	e8 aa 23 00 00       	call   f0104d14 <isKHeapPlacementStrategyBESTFIT>
f010296a:	85 c0                	test   %eax,%eax
f010296c:	74 12                	je     f0102980 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010296e:	83 ec 0c             	sub    $0xc,%esp
f0102971:	68 64 df 11 f0       	push   $0xf011df64
f0102976:	e8 bb 4a 00 00       	call   f0107436 <cprintf>
f010297b:	83 c4 10             	add    $0x10,%esp
f010297e:	eb 46                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102980:	e8 aa 23 00 00       	call   f0104d2f <isKHeapPlacementStrategyNEXTFIT>
f0102985:	85 c0                	test   %eax,%eax
f0102987:	74 12                	je     f010299b <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102989:	83 ec 0c             	sub    $0xc,%esp
f010298c:	68 90 df 11 f0       	push   $0xf011df90
f0102991:	e8 a0 4a 00 00       	call   f0107436 <cprintf>
f0102996:	83 c4 10             	add    $0x10,%esp
f0102999:	eb 2b                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010299b:	e8 aa 23 00 00       	call   f0104d4a <isKHeapPlacementStrategyWORSTFIT>
f01029a0:	85 c0                	test   %eax,%eax
f01029a2:	74 12                	je     f01029b6 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01029a4:	83 ec 0c             	sub    $0xc,%esp
f01029a7:	68 bc df 11 f0       	push   $0xf011dfbc
f01029ac:	e8 85 4a 00 00       	call   f0107436 <cprintf>
f01029b1:	83 c4 10             	add    $0x10,%esp
f01029b4:	eb 10                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01029b6:	83 ec 0c             	sub    $0xc,%esp
f01029b9:	68 ec df 11 f0       	push   $0xf011dfec
f01029be:	e8 73 4a 00 00       	call   f0107436 <cprintf>
f01029c3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01029c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029cb:	c9                   	leave  
f01029cc:	c3                   	ret    

f01029cd <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01029cd:	55                   	push   %ebp
f01029ce:	89 e5                	mov    %esp,%ebp
f01029d0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01029d3:	e8 a0 60 00 00       	call   f0108a78 <isBufferingEnabled>
f01029d8:	85 c0                	test   %eax,%eax
f01029da:	75 12                	jne    f01029ee <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01029dc:	83 ec 0c             	sub    $0xc,%esp
f01029df:	68 1c e0 11 f0       	push   $0xf011e01c
f01029e4:	e8 4d 4a 00 00       	call   f0107436 <cprintf>
f01029e9:	83 c4 10             	add    $0x10,%esp
f01029ec:	eb 1d                	jmp    f0102a0b <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01029ee:	83 ec 0c             	sub    $0xc,%esp
f01029f1:	6a 00                	push   $0x0
f01029f3:	e8 5a 60 00 00       	call   f0108a52 <enableModifiedBuffer>
f01029f8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01029fb:	83 ec 0c             	sub    $0xc,%esp
f01029fe:	68 58 e0 11 f0       	push   $0xf011e058
f0102a03:	e8 2e 4a 00 00       	call   f0107436 <cprintf>
f0102a08:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102a0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a10:	c9                   	leave  
f0102a11:	c3                   	ret    

f0102a12 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102a12:	55                   	push   %ebp
f0102a13:	89 e5                	mov    %esp,%ebp
f0102a15:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102a18:	e8 5b 60 00 00       	call   f0108a78 <isBufferingEnabled>
f0102a1d:	85 c0                	test   %eax,%eax
f0102a1f:	75 12                	jne    f0102a33 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102a21:	83 ec 0c             	sub    $0xc,%esp
f0102a24:	68 1c e0 11 f0       	push   $0xf011e01c
f0102a29:	e8 08 4a 00 00       	call   f0107436 <cprintf>
f0102a2e:	83 c4 10             	add    $0x10,%esp
f0102a31:	eb 1d                	jmp    f0102a50 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102a33:	83 ec 0c             	sub    $0xc,%esp
f0102a36:	6a 01                	push   $0x1
f0102a38:	e8 15 60 00 00       	call   f0108a52 <enableModifiedBuffer>
f0102a3d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102a40:	83 ec 0c             	sub    $0xc,%esp
f0102a43:	68 7c e0 11 f0       	push   $0xf011e07c
f0102a48:	e8 e9 49 00 00       	call   f0107436 <cprintf>
f0102a4d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102a50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a55:	c9                   	leave  
f0102a56:	c3                   	ret    

f0102a57 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102a57:	55                   	push   %ebp
f0102a58:	89 e5                	mov    %esp,%ebp
f0102a5a:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0102a5d:	83 ec 0c             	sub    $0xc,%esp
f0102a60:	6a 00                	push   $0x0
f0102a62:	e8 03 60 00 00       	call   f0108a6a <enableBuffering>
f0102a67:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102a6a:	83 ec 0c             	sub    $0xc,%esp
f0102a6d:	6a 00                	push   $0x0
f0102a6f:	e8 de 5f 00 00       	call   f0108a52 <enableModifiedBuffer>
f0102a74:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102a77:	83 ec 0c             	sub    $0xc,%esp
f0102a7a:	68 9c e0 11 f0       	push   $0xf011e09c
f0102a7f:	e8 b2 49 00 00       	call   f0107436 <cprintf>
f0102a84:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a8c:	c9                   	leave  
f0102a8d:	c3                   	ret    

f0102a8e <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102a8e:	55                   	push   %ebp
f0102a8f:	89 e5                	mov    %esp,%ebp
f0102a91:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102a94:	83 ec 0c             	sub    $0xc,%esp
f0102a97:	6a 01                	push   $0x1
f0102a99:	e8 cc 5f 00 00       	call   f0108a6a <enableBuffering>
f0102a9e:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102aa1:	83 ec 0c             	sub    $0xc,%esp
f0102aa4:	6a 01                	push   $0x1
f0102aa6:	e8 a7 5f 00 00       	call   f0108a52 <enableModifiedBuffer>
f0102aab:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102aae:	e8 dd 5f 00 00       	call   f0108a90 <getModifiedBufferLength>
f0102ab3:	85 c0                	test   %eax,%eax
f0102ab5:	75 59                	jne    f0102b10 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102ab7:	83 ec 0c             	sub    $0xc,%esp
f0102aba:	68 b8 e0 11 f0       	push   $0xf011e0b8
f0102abf:	e8 72 49 00 00       	call   f0107436 <cprintf>
f0102ac4:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102ac7:	83 ec 08             	sub    $0x8,%esp
f0102aca:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102acd:	50                   	push   %eax
f0102ace:	68 e8 e0 11 f0       	push   $0xf011e0e8
f0102ad3:	e8 e1 85 01 00       	call   f011b0b9 <readline>
f0102ad8:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102adb:	83 ec 04             	sub    $0x4,%esp
f0102ade:	6a 0a                	push   $0xa
f0102ae0:	6a 00                	push   $0x0
f0102ae2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102ae5:	50                   	push   %eax
f0102ae6:	e8 34 8b 01 00       	call   f011b61f <strtol>
f0102aeb:	83 c4 10             	add    $0x10,%esp
f0102aee:	83 ec 0c             	sub    $0xc,%esp
f0102af1:	50                   	push   %eax
f0102af2:	e8 8b 5f 00 00       	call   f0108a82 <setModifiedBufferLength>
f0102af7:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102afa:	e8 91 5f 00 00       	call   f0108a90 <getModifiedBufferLength>
f0102aff:	83 ec 08             	sub    $0x8,%esp
f0102b02:	50                   	push   %eax
f0102b03:	68 14 e1 11 f0       	push   $0xf011e114
f0102b08:	e8 29 49 00 00       	call   f0107436 <cprintf>
f0102b0d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102b10:	83 ec 0c             	sub    $0xc,%esp
f0102b13:	68 39 e1 11 f0       	push   $0xf011e139
f0102b18:	e8 19 49 00 00       	call   f0107436 <cprintf>
f0102b1d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b25:	c9                   	leave  
f0102b26:	c3                   	ret    

f0102b27 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102b27:	55                   	push   %ebp
f0102b28:	89 e5                	mov    %esp,%ebp
f0102b2a:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102b2d:	e8 46 5f 00 00       	call   f0108a78 <isBufferingEnabled>
f0102b32:	85 c0                	test   %eax,%eax
f0102b34:	75 12                	jne    f0102b48 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102b36:	83 ec 0c             	sub    $0xc,%esp
f0102b39:	68 54 e1 11 f0       	push   $0xf011e154
f0102b3e:	e8 f3 48 00 00       	call   f0107436 <cprintf>
f0102b43:	83 c4 10             	add    $0x10,%esp
f0102b46:	eb 19                	jmp    f0102b61 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102b48:	e8 13 5f 00 00       	call   f0108a60 <isModifiedBufferEnabled>
f0102b4d:	85 c0                	test   %eax,%eax
f0102b4f:	75 10                	jne    f0102b61 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102b51:	83 ec 0c             	sub    $0xc,%esp
f0102b54:	68 a4 e1 11 f0       	push   $0xf011e1a4
f0102b59:	e8 d8 48 00 00       	call   f0107436 <cprintf>
f0102b5e:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102b61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b64:	83 c0 04             	add    $0x4,%eax
f0102b67:	8b 00                	mov    (%eax),%eax
f0102b69:	83 ec 04             	sub    $0x4,%esp
f0102b6c:	6a 0a                	push   $0xa
f0102b6e:	6a 00                	push   $0x0
f0102b70:	50                   	push   %eax
f0102b71:	e8 a9 8a 01 00       	call   f011b61f <strtol>
f0102b76:	83 c4 10             	add    $0x10,%esp
f0102b79:	83 ec 0c             	sub    $0xc,%esp
f0102b7c:	50                   	push   %eax
f0102b7d:	e8 00 5f 00 00       	call   f0108a82 <setModifiedBufferLength>
f0102b82:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102b85:	e8 06 5f 00 00       	call   f0108a90 <getModifiedBufferLength>
f0102b8a:	83 ec 08             	sub    $0x8,%esp
f0102b8d:	50                   	push   %eax
f0102b8e:	68 14 e1 11 f0       	push   $0xf011e114
f0102b93:	e8 9e 48 00 00       	call   f0107436 <cprintf>
f0102b98:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ba0:	c9                   	leave  
f0102ba1:	c3                   	ret    

f0102ba2 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102ba2:	55                   	push   %ebp
f0102ba3:	89 e5                	mov    %esp,%ebp
f0102ba5:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102ba8:	e8 cb 5e 00 00       	call   f0108a78 <isBufferingEnabled>
f0102bad:	85 c0                	test   %eax,%eax
f0102baf:	75 12                	jne    f0102bc3 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102bb1:	83 ec 0c             	sub    $0xc,%esp
f0102bb4:	68 54 e1 11 f0       	push   $0xf011e154
f0102bb9:	e8 78 48 00 00       	call   f0107436 <cprintf>
f0102bbe:	83 c4 10             	add    $0x10,%esp
f0102bc1:	eb 19                	jmp    f0102bdc <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102bc3:	e8 98 5e 00 00       	call   f0108a60 <isModifiedBufferEnabled>
f0102bc8:	85 c0                	test   %eax,%eax
f0102bca:	75 10                	jne    f0102bdc <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102bcc:	83 ec 0c             	sub    $0xc,%esp
f0102bcf:	68 a4 e1 11 f0       	push   $0xf011e1a4
f0102bd4:	e8 5d 48 00 00       	call   f0107436 <cprintf>
f0102bd9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102bdc:	e8 af 5e 00 00       	call   f0108a90 <getModifiedBufferLength>
f0102be1:	83 ec 08             	sub    $0x8,%esp
f0102be4:	50                   	push   %eax
f0102be5:	68 ea e1 11 f0       	push   $0xf011e1ea
f0102bea:	e8 47 48 00 00       	call   f0107436 <cprintf>
f0102bef:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	c9                   	leave  
f0102bf8:	c3                   	ret    

f0102bf9 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102bf9:	55                   	push   %ebp
f0102bfa:	89 e5                	mov    %esp,%ebp
f0102bfc:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102bff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102c06:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102c0a:	75 1b                	jne    f0102c27 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0f:	83 c0 04             	add    $0x4,%eax
f0102c12:	8b 00                	mov    (%eax),%eax
f0102c14:	83 ec 04             	sub    $0x4,%esp
f0102c17:	6a 0a                	push   $0xa
f0102c19:	6a 00                	push   $0x0
f0102c1b:	50                   	push   %eax
f0102c1c:	e8 fe 89 01 00       	call   f011b61f <strtol>
f0102c21:	83 c4 10             	add    $0x10,%esp
f0102c24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102c27:	e8 b3 20 00 00       	call   f0104cdf <isKHeapPlacementStrategyCONTALLOC>
f0102c2c:	85 c0                	test   %eax,%eax
f0102c2e:	74 0a                	je     f0102c3a <command_test_kmalloc+0x41>
		test_kmalloc();
f0102c30:	e8 58 be 00 00       	call   f010ea8d <test_kmalloc>
f0102c35:	e9 e8 00 00 00       	jmp    f0102d22 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102c3a:	e8 ba 20 00 00       	call   f0104cf9 <isKHeapPlacementStrategyFIRSTFIT>
f0102c3f:	85 c0                	test   %eax,%eax
f0102c41:	74 44                	je     f0102c87 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102c43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102c47:	75 1a                	jne    f0102c63 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102c49:	83 ec 0c             	sub    $0xc,%esp
f0102c4c:	68 08 e2 11 f0       	push   $0xf011e208
f0102c51:	e8 e0 47 00 00       	call   f0107436 <cprintf>
f0102c56:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102c59:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c5e:	e9 c4 00 00 00       	jmp    f0102d27 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102c63:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102c67:	75 0a                	jne    f0102c73 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f0102c69:	e8 64 00 01 00       	call   f0112cd2 <test_kmalloc_firstfit1>
f0102c6e:	e9 af 00 00 00       	jmp    f0102d22 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102c73:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102c77:	0f 85 a5 00 00 00    	jne    f0102d22 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f0102c7d:	e8 fe 10 01 00       	call   f0113d80 <test_kmalloc_firstfit2>
f0102c82:	e9 9b 00 00 00       	jmp    f0102d22 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102c87:	e8 88 20 00 00       	call   f0104d14 <isKHeapPlacementStrategyBESTFIT>
f0102c8c:	85 c0                	test   %eax,%eax
f0102c8e:	74 44                	je     f0102cd4 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102c94:	75 17                	jne    f0102cad <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1 or 2) as an argument\n");
f0102c96:	83 ec 0c             	sub    $0xc,%esp
f0102c99:	68 58 e2 11 f0       	push   $0xf011e258
f0102c9e:	e8 93 47 00 00       	call   f0107436 <cprintf>
f0102ca3:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102ca6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cab:	eb 7a                	jmp    f0102d27 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102cad:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102cb1:	75 07                	jne    f0102cba <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102cb3:	e8 d5 bd 00 00       	call   f010ea8d <test_kmalloc>
f0102cb8:	eb 68                	jmp    f0102d22 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102cba:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102cbe:	75 07                	jne    f0102cc7 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102cc0:	e8 89 e0 00 00       	call   f0110d4e <test_kmalloc_bestfit1>
f0102cc5:	eb 5b                	jmp    f0102d22 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102cc7:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102ccb:	75 55                	jne    f0102d22 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102ccd:	e8 14 f0 00 00       	call   f0111ce6 <test_kmalloc_bestfit2>
f0102cd2:	eb 4e                	jmp    f0102d22 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102cd4:	e8 56 20 00 00       	call   f0104d2f <isKHeapPlacementStrategyNEXTFIT>
f0102cd9:	85 c0                	test   %eax,%eax
f0102cdb:	74 37                	je     f0102d14 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102cdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102ce1:	75 17                	jne    f0102cfa <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102ce3:	83 ec 0c             	sub    $0xc,%esp
f0102ce6:	68 08 e2 11 f0       	push   $0xf011e208
f0102ceb:	e8 46 47 00 00       	call   f0107436 <cprintf>
f0102cf0:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102cf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cf8:	eb 2d                	jmp    f0102d27 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102cfa:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102cfe:	75 07                	jne    f0102d07 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102d00:	e8 88 bd 00 00       	call   f010ea8d <test_kmalloc>
f0102d05:	eb 1b                	jmp    f0102d22 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102d07:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d0b:	75 15                	jne    f0102d22 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102d0d:	e8 7f cd 00 00       	call   f010fa91 <test_kmalloc_nextfit>
f0102d12:	eb 0e                	jmp    f0102d22 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102d14:	e8 31 20 00 00       	call   f0104d4a <isKHeapPlacementStrategyWORSTFIT>
f0102d19:	85 c0                	test   %eax,%eax
f0102d1b:	74 05                	je     f0102d22 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102d1d:	e8 a1 1c 01 00       	call   f01149c3 <test_kmalloc_worstfit>
	return 0;
f0102d22:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d27:	c9                   	leave  
f0102d28:	c3                   	ret    

f0102d29 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102d29:	55                   	push   %ebp
f0102d2a:	89 e5                	mov    %esp,%ebp
f0102d2c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT())
f0102d2f:	e8 e0 1f 00 00       	call   f0104d14 <isKHeapPlacementStrategyBESTFIT>
f0102d34:	85 c0                	test   %eax,%eax
f0102d36:	74 07                	je     f0102d3f <command_test_kfree+0x16>
	{
		test_kfree_bestfit();
f0102d38:	e8 54 45 01 00       	call   f0117291 <test_kfree_bestfit>
f0102d3d:	eb 05                	jmp    f0102d44 <command_test_kfree+0x1b>
	}
	else
	{
		test_kfree();
f0102d3f:	e8 03 2f 01 00       	call   f0115c47 <test_kfree>
	}
	return 0;
f0102d44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d49:	c9                   	leave  
f0102d4a:	c3                   	ret    

f0102d4b <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102d4b:	55                   	push   %ebp
f0102d4c:	89 e5                	mov    %esp,%ebp
f0102d4e:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102d51:	e8 85 5b 01 00       	call   f01188db <test_kheap_phys_addr>
	return 0;
f0102d56:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d5b:	c9                   	leave  
f0102d5c:	c3                   	ret    

f0102d5d <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102d5d:	55                   	push   %ebp
f0102d5e:	89 e5                	mov    %esp,%ebp
f0102d60:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102d63:	e8 a7 6c 01 00       	call   f0119a0f <test_kheap_virt_addr>
	return 0;
f0102d68:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d6d:	c9                   	leave  
f0102d6e:	c3                   	ret    

f0102d6f <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102d6f:	55                   	push   %ebp
f0102d70:	89 e5                	mov    %esp,%ebp
f0102d72:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102d75:	e8 10 7d 01 00       	call   f011aa8a <test_three_creation_functions>
	return 0;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7f:	c9                   	leave  
f0102d80:	c3                   	ret    

f0102d81 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments)
{
f0102d81:	55                   	push   %ebp
f0102d82:	89 e5                	mov    %esp,%ebp
	return 0;
f0102d84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d89:	5d                   	pop    %ebp
f0102d8a:	c3                   	ret    

f0102d8b <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102d8b:	55                   	push   %ebp
f0102d8c:	89 e5                	mov    %esp,%ebp
	return 0;
f0102d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d93:	5d                   	pop    %ebp
f0102d94:	c3                   	ret    

f0102d95 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102d95:	55                   	push   %ebp
f0102d96:	89 e5                	mov    %esp,%ebp
	return 0;
f0102d98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d9d:	5d                   	pop    %ebp
f0102d9e:	c3                   	ret    

f0102d9f <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102d9f:	55                   	push   %ebp
f0102da0:	89 e5                	mov    %esp,%ebp
	return 0;
f0102da2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102da7:	5d                   	pop    %ebp
f0102da8:	c3                   	ret    

f0102da9 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102da9:	55                   	push   %ebp
f0102daa:	89 e5                	mov    %esp,%ebp
	return 0;
f0102dac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db1:	5d                   	pop    %ebp
f0102db2:	c3                   	ret    

f0102db3 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102db3:	55                   	push   %ebp
f0102db4:	89 e5                	mov    %esp,%ebp
	return 0;
f0102db6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dbb:	5d                   	pop    %ebp
f0102dbc:	c3                   	ret    

f0102dbd <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102dbd:	55                   	push   %ebp
f0102dbe:	89 e5                	mov    %esp,%ebp
	return 0;
f0102dc0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dc5:	5d                   	pop    %ebp
f0102dc6:	c3                   	ret    

f0102dc7 <command_test_sc_MLFQ>:

//END======================================================

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102dc7:	55                   	push   %ebp
f0102dc8:	89 e5                	mov    %esp,%ebp
f0102dca:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102dcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd0:	83 c0 04             	add    $0x4,%eax
f0102dd3:	8b 00                	mov    (%eax),%eax
f0102dd5:	83 ec 04             	sub    $0x4,%esp
f0102dd8:	6a 0a                	push   $0xa
f0102dda:	6a 00                	push   $0x0
f0102ddc:	50                   	push   %eax
f0102ddd:	e8 3d 88 01 00       	call   f011b61f <strtol>
f0102de2:	83 c4 10             	add    $0x10,%esp
f0102de5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102de8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f0102def:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102df6:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f0102dfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102dfe:	eb 3d                	jmp    f0102e3d <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f0102e00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102e03:	05 b0 52 00 00       	add    $0x52b0,%eax
f0102e08:	83 ec 08             	sub    $0x8,%esp
f0102e0b:	68 a6 e2 11 f0       	push   $0xf011e2a6
f0102e10:	50                   	push   %eax
f0102e11:	e8 b5 85 01 00       	call   f011b3cb <strcmp>
f0102e16:	83 c4 10             	add    $0x10,%esp
f0102e19:	85 c0                	test   %eax,%eax
f0102e1b:	75 12                	jne    f0102e2f <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102e1d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102e21:	74 07                	je     f0102e2a <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f0102e23:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102e2a:	ff 45 f4             	incl   -0xc(%ebp)
f0102e2d:	eb 06                	jmp    f0102e35 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f0102e2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102e33:	74 31                	je     f0102e66 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102e35:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f0102e3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102e3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102e41:	74 08                	je     f0102e4b <command_test_sc_MLFQ+0x84>
f0102e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102e46:	8b 40 44             	mov    0x44(%eax),%eax
f0102e49:	eb 05                	jmp    f0102e50 <command_test_sc_MLFQ+0x89>
f0102e4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e50:	a3 ec 89 3a f0       	mov    %eax,0xf03a89ec
f0102e55:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f0102e5a:	85 c0                	test   %eax,%eax
f0102e5c:	75 a2                	jne    f0102e00 <command_test_sc_MLFQ+0x39>
f0102e5e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102e62:	75 9c                	jne    f0102e00 <command_test_sc_MLFQ+0x39>
f0102e64:	eb 01                	jmp    f0102e67 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102e66:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e6a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102e6d:	75 12                	jne    f0102e81 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f0102e6f:	83 ec 0c             	sub    $0xc,%esp
f0102e72:	68 b0 e2 11 f0       	push   $0xf011e2b0
f0102e77:	e8 ba 45 00 00       	call   f0107436 <cprintf>
f0102e7c:	83 c4 10             	add    $0x10,%esp
f0102e7f:	eb 17                	jmp    f0102e98 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102e81:	83 ec 04             	sub    $0x4,%esp
f0102e84:	68 e9 e2 11 f0       	push   $0xf011e2e9
f0102e89:	68 10 05 00 00       	push   $0x510
f0102e8e:	68 32 d8 11 f0       	push   $0xf011d832
f0102e93:	e8 fb d2 ff ff       	call   f0100193 <_panic>
	}
	return 0;
f0102e98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e9d:	c9                   	leave  
f0102e9e:	c3                   	ret    

f0102e9f <nvram_read>:
{
		sizeof(gdt) - 1, (unsigned long) gdt
};

int nvram_read(int r)
{
f0102e9f:	55                   	push   %ebp
f0102ea0:	89 e5                	mov    %esp,%ebp
f0102ea2:	53                   	push   %ebx
f0102ea3:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0102ea6:	8b 45 08             	mov    0x8(%ebp),%eax
f0102ea9:	83 ec 0c             	sub    $0xc,%esp
f0102eac:	50                   	push   %eax
f0102ead:	e8 16 40 00 00       	call   f0106ec8 <mc146818_read>
f0102eb2:	83 c4 10             	add    $0x10,%esp
f0102eb5:	89 c3                	mov    %eax,%ebx
f0102eb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0102eba:	40                   	inc    %eax
f0102ebb:	83 ec 0c             	sub    $0xc,%esp
f0102ebe:	50                   	push   %eax
f0102ebf:	e8 04 40 00 00       	call   f0106ec8 <mc146818_read>
f0102ec4:	83 c4 10             	add    $0x10,%esp
f0102ec7:	c1 e0 08             	shl    $0x8,%eax
f0102eca:	09 d8                	or     %ebx,%eax
}
f0102ecc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102ecf:	c9                   	leave  
f0102ed0:	c3                   	ret    

f0102ed1 <detect_memory>:

void detect_memory()
{
f0102ed1:	55                   	push   %ebp
f0102ed2:	89 e5                	mov    %esp,%ebp
f0102ed4:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0102ed7:	83 ec 0c             	sub    $0xc,%esp
f0102eda:	6a 15                	push   $0x15
f0102edc:	e8 be ff ff ff       	call   f0102e9f <nvram_read>
f0102ee1:	83 c4 10             	add    $0x10,%esp
f0102ee4:	c1 e0 0a             	shl    $0xa,%eax
f0102ee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102eea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102eed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102ef2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0102ef5:	83 ec 0c             	sub    $0xc,%esp
f0102ef8:	6a 17                	push   $0x17
f0102efa:	e8 a0 ff ff ff       	call   f0102e9f <nvram_read>
f0102eff:	83 c4 10             	add    $0x10,%esp
f0102f02:	c1 e0 0a             	shl    $0xa,%eax
f0102f05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102f0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102f10:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0102f13:	83 ec 0c             	sub    $0xc,%esp
f0102f16:	6a 34                	push   $0x34
f0102f18:	e8 82 ff ff ff       	call   f0102e9f <nvram_read>
f0102f1d:	83 c4 10             	add    $0x10,%esp
f0102f20:	c1 e0 10             	shl    $0x10,%eax
f0102f23:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102f26:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102f29:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102f2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0102f31:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0102f35:	74 18                	je     f0102f4f <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0102f37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102f3a:	05 00 00 00 01       	add    $0x1000000,%eax
f0102f3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0102f42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f45:	2d 00 00 10 00       	sub    $0x100000,%eax
f0102f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102f4d:	eb 19                	jmp    f0102f68 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0102f4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102f53:	74 0d                	je     f0102f62 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0102f55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102f58:	05 00 00 10 00       	add    $0x100000,%eax
f0102f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102f60:	eb 06                	jmp    f0102f68 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0102f62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0102f68:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0102f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f72:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0102f75:	76 32                	jbe    f0102fa9 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0102f77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102f7a:	c1 e8 0a             	shr    $0xa,%eax
f0102f7d:	89 c2                	mov    %eax,%edx
f0102f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f82:	c1 e8 0a             	shr    $0xa,%eax
f0102f85:	83 ec 04             	sub    $0x4,%esp
f0102f88:	52                   	push   %edx
f0102f89:	50                   	push   %eax
f0102f8a:	68 00 e3 11 f0       	push   $0xf011e300
f0102f8f:	e8 a2 44 00 00       	call   f0107436 <cprintf>
f0102f94:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0102f97:	83 ec 0c             	sub    $0xc,%esp
f0102f9a:	68 48 e3 11 f0       	push   $0xf011e348
f0102f9f:	e8 92 44 00 00       	call   f0107436 <cprintf>
f0102fa4:	83 c4 10             	add    $0x10,%esp
		while(1);
f0102fa7:	eb fe                	jmp    f0102fa7 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0102fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102fac:	c1 e8 0c             	shr    $0xc,%eax
f0102faf:	a3 d0 f5 3a f0       	mov    %eax,0xf03af5d0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0102fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102fb7:	c1 e8 0a             	shr    $0xa,%eax
f0102fba:	83 ec 08             	sub    $0x8,%esp
f0102fbd:	50                   	push   %eax
f0102fbe:	68 dc e3 11 f0       	push   $0xf011e3dc
f0102fc3:	e8 6e 44 00 00       	call   f0107436 <cprintf>
f0102fc8:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0102fcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102fce:	c1 e8 0a             	shr    $0xa,%eax
f0102fd1:	89 c2                	mov    %eax,%edx
f0102fd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102fd6:	c1 e8 0a             	shr    $0xa,%eax
f0102fd9:	83 ec 04             	sub    $0x4,%esp
f0102fdc:	52                   	push   %edx
f0102fdd:	50                   	push   %eax
f0102fde:	68 fd e3 11 f0       	push   $0xf011e3fd
f0102fe3:	e8 4e 44 00 00       	call   f0107436 <cprintf>
f0102fe8:	83 c4 10             	add    $0x10,%esp
}
f0102feb:	90                   	nop
f0102fec:	c9                   	leave  
f0102fed:	c3                   	ret    

f0102fee <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0102fee:	55                   	push   %ebp
f0102fef:	89 e5                	mov    %esp,%ebp
f0102ff1:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0102ff4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102ffb:	eb 40                	jmp    f010303d <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0102ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103000:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0103006:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010300b:	83 ec 08             	sub    $0x8,%esp
f010300e:	52                   	push   %edx
f010300f:	50                   	push   %eax
f0103010:	e8 92 01 00 00       	call   f01031a7 <check_va2pa>
f0103015:	83 c4 10             	add    $0x10,%esp
f0103018:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010301b:	74 19                	je     f0103036 <check_boot_pgdir+0x48>
f010301d:	68 1c e4 11 f0       	push   $0xf011e41c
f0103022:	68 52 e4 11 f0       	push   $0xf011e452
f0103027:	68 8b 00 00 00       	push   $0x8b
f010302c:	68 67 e4 11 f0       	push   $0xf011e467
f0103031:	e8 5d d1 ff ff       	call   f0100193 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0103036:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010303d:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f0103044:	75 b7                	jne    f0102ffd <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0103046:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010304d:	eb 74                	jmp    f01030c3 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f010304f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103052:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0103058:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010305d:	83 ec 08             	sub    $0x8,%esp
f0103060:	52                   	push   %edx
f0103061:	50                   	push   %eax
f0103062:	e8 40 01 00 00       	call   f01031a7 <check_va2pa>
f0103067:	83 c4 10             	add    $0x10,%esp
f010306a:	c7 45 f0 00 f0 14 f0 	movl   $0xf014f000,-0x10(%ebp)
f0103071:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0103078:	77 17                	ja     f0103091 <check_boot_pgdir+0xa3>
f010307a:	ff 75 f0             	pushl  -0x10(%ebp)
f010307d:	68 78 e4 11 f0       	push   $0xf011e478
f0103082:	68 90 00 00 00       	push   $0x90
f0103087:	68 67 e4 11 f0       	push   $0xf011e467
f010308c:	e8 02 d1 ff ff       	call   f0100193 <_panic>
f0103091:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103094:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f010309a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010309d:	01 ca                	add    %ecx,%edx
f010309f:	39 d0                	cmp    %edx,%eax
f01030a1:	74 19                	je     f01030bc <check_boot_pgdir+0xce>
f01030a3:	68 ac e4 11 f0       	push   $0xf011e4ac
f01030a8:	68 52 e4 11 f0       	push   $0xf011e452
f01030ad:	68 90 00 00 00       	push   $0x90
f01030b2:	68 67 e4 11 f0       	push   $0xf011e467
f01030b7:	e8 d7 d0 ff ff       	call   f0100193 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01030bc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01030c3:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f01030ca:	76 83                	jbe    f010304f <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01030cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01030d3:	e9 af 00 00 00       	jmp    f0103187 <check_boot_pgdir+0x199>
		switch (i) {
f01030d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01030db:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01030e0:	74 11                	je     f01030f3 <check_boot_pgdir+0x105>
f01030e2:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01030e7:	72 36                	jb     f010311f <check_boot_pgdir+0x131>
f01030e9:	2d bd 03 00 00       	sub    $0x3bd,%eax
f01030ee:	83 f8 02             	cmp    $0x2,%eax
f01030f1:	77 2c                	ja     f010311f <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f01030f3:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f01030f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030fb:	c1 e2 02             	shl    $0x2,%edx
f01030fe:	01 d0                	add    %edx,%eax
f0103100:	8b 00                	mov    (%eax),%eax
f0103102:	85 c0                	test   %eax,%eax
f0103104:	75 7a                	jne    f0103180 <check_boot_pgdir+0x192>
f0103106:	68 2e e5 11 f0       	push   $0xf011e52e
f010310b:	68 52 e4 11 f0       	push   $0xf011e452
f0103110:	68 9b 00 00 00       	push   $0x9b
f0103115:	68 67 e4 11 f0       	push   $0xf011e467
f010311a:	e8 74 d0 ff ff       	call   f0100193 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f010311f:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0103126:	76 2c                	jbe    f0103154 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f0103128:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010312d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103130:	c1 e2 02             	shl    $0x2,%edx
f0103133:	01 d0                	add    %edx,%eax
f0103135:	8b 00                	mov    (%eax),%eax
f0103137:	85 c0                	test   %eax,%eax
f0103139:	75 48                	jne    f0103183 <check_boot_pgdir+0x195>
f010313b:	68 2e e5 11 f0       	push   $0xf011e52e
f0103140:	68 52 e4 11 f0       	push   $0xf011e452
f0103145:	68 9f 00 00 00       	push   $0x9f
f010314a:	68 67 e4 11 f0       	push   $0xf011e467
f010314f:	e8 3f d0 ff ff       	call   f0100193 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0103154:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103159:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010315c:	c1 e2 02             	shl    $0x2,%edx
f010315f:	01 d0                	add    %edx,%eax
f0103161:	8b 00                	mov    (%eax),%eax
f0103163:	85 c0                	test   %eax,%eax
f0103165:	74 1c                	je     f0103183 <check_boot_pgdir+0x195>
f0103167:	68 44 e5 11 f0       	push   $0xf011e544
f010316c:	68 52 e4 11 f0       	push   $0xf011e452
f0103171:	68 a1 00 00 00       	push   $0xa1
f0103176:	68 67 e4 11 f0       	push   $0xf011e467
f010317b:	e8 13 d0 ff ff       	call   f0100193 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0103180:	90                   	nop
f0103181:	eb 01                	jmp    f0103184 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0103183:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0103184:	ff 45 f4             	incl   -0xc(%ebp)
f0103187:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010318e:	0f 86 44 ff ff ff    	jbe    f01030d8 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0103194:	83 ec 0c             	sub    $0xc,%esp
f0103197:	68 60 e5 11 f0       	push   $0xf011e560
f010319c:	e8 95 42 00 00       	call   f0107436 <cprintf>
f01031a1:	83 c4 10             	add    $0x10,%esp
}
f01031a4:	90                   	nop
f01031a5:	c9                   	leave  
f01031a6:	c3                   	ret    

f01031a7 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01031a7:	55                   	push   %ebp
f01031a8:	89 e5                	mov    %esp,%ebp
f01031aa:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01031ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031b0:	c1 e8 16             	shr    $0x16,%eax
f01031b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01031ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01031bd:	01 d0                	add    %edx,%eax
f01031bf:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f01031c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031c5:	8b 00                	mov    (%eax),%eax
f01031c7:	83 e0 01             	and    $0x1,%eax
f01031ca:	85 c0                	test   %eax,%eax
f01031cc:	75 0a                	jne    f01031d8 <check_va2pa+0x31>
		return ~0;
f01031ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01031d3:	e9 87 00 00 00       	jmp    f010325f <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f01031d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031db:	8b 00                	mov    (%eax),%eax
f01031dd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01031e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01031e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01031e8:	c1 e8 0c             	shr    $0xc,%eax
f01031eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01031ee:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f01031f3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01031f6:	72 17                	jb     f010320f <check_va2pa+0x68>
f01031f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01031fb:	68 80 e5 11 f0       	push   $0xf011e580
f0103200:	68 b7 00 00 00       	push   $0xb7
f0103205:	68 67 e4 11 f0       	push   $0xf011e467
f010320a:	e8 84 cf ff ff       	call   f0100193 <_panic>
f010320f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103212:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103217:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f010321a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010321d:	c1 e8 0c             	shr    $0xc,%eax
f0103220:	25 ff 03 00 00       	and    $0x3ff,%eax
f0103225:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010322c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010322f:	01 d0                	add    %edx,%eax
f0103231:	8b 00                	mov    (%eax),%eax
f0103233:	83 e0 01             	and    $0x1,%eax
f0103236:	85 c0                	test   %eax,%eax
f0103238:	75 07                	jne    f0103241 <check_va2pa+0x9a>
		return ~0;
f010323a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010323f:	eb 1e                	jmp    f010325f <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0103241:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103244:	c1 e8 0c             	shr    $0xc,%eax
f0103247:	25 ff 03 00 00       	and    $0x3ff,%eax
f010324c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103253:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103256:	01 d0                	add    %edx,%eax
f0103258:	8b 00                	mov    (%eax),%eax
f010325a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010325f:	c9                   	leave  
f0103260:	c3                   	ret    

f0103261 <tlb_invalidate>:

void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0103261:	55                   	push   %ebp
f0103262:	89 e5                	mov    %esp,%ebp
f0103264:	83 ec 10             	sub    $0x10,%esp
f0103267:	8b 45 0c             	mov    0xc(%ebp),%eax
f010326a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010326d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103270:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0103273:	90                   	nop
f0103274:	c9                   	leave  
f0103275:	c3                   	ret    

f0103276 <turn_on_paging>:
	cprintf("page_check() succeeded!\n");
}
*/

void turn_on_paging()
{
f0103276:	55                   	push   %ebp
f0103277:	89 e5                	mov    %esp,%ebp
f0103279:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f010327c:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0103283:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010328a:	eb 24                	jmp    f01032b0 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f010328c:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103291:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0103294:	c1 e2 02             	shl    $0x2,%edx
f0103297:	01 c2                	add    %eax,%edx
f0103299:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010329e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01032a1:	c1 e1 02             	shl    $0x2,%ecx
f01032a4:	01 c8                	add    %ecx,%eax
f01032a6:	8b 00                	mov    (%eax),%eax
f01032a8:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01032aa:	ff 45 fc             	incl   -0x4(%ebp)
f01032ad:	ff 45 f8             	incl   -0x8(%ebp)
f01032b0:	a1 6c da 3c f0       	mov    0xf03cda6c,%eax
f01032b5:	c1 e8 16             	shr    $0x16,%eax
f01032b8:	89 c2                	mov    %eax,%edx
f01032ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01032bd:	39 c2                	cmp    %eax,%edx
f01032bf:	77 cb                	ja     f010328c <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01032c1:	a1 78 da 3c f0       	mov    0xf03cda78,%eax
f01032c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01032c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01032cc:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f01032cf:	0f 20 c0             	mov    %cr0,%eax
f01032d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f01032d5:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f01032d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f01032db:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f01032e2:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f01032e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01032e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f01032ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01032ef:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f01032f2:	0f 01 15 10 78 15 f0 	lgdtl  0xf0157810
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f01032f9:	b8 23 00 00 00       	mov    $0x23,%eax
f01032fe:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0103300:	b8 23 00 00 00       	mov    $0x23,%eax
f0103305:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0103307:	b8 10 00 00 00       	mov    $0x10,%eax
f010330c:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010330e:	b8 10 00 00 00       	mov    $0x10,%eax
f0103313:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0103315:	b8 10 00 00 00       	mov    $0x10,%eax
f010331a:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010331c:	ea 23 33 10 f0 08 00 	ljmp   $0x8,$0xf0103323
	asm volatile("lldt %%ax" :: "a" (0));
f0103323:	b8 00 00 00 00       	mov    $0x0,%eax
f0103328:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010332b:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0103332:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0103339:	eb 19                	jmp    f0103354 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010333b:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103340:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103343:	c1 e2 02             	shl    $0x2,%edx
f0103346:	01 d0                	add    %edx,%eax
f0103348:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010334e:	ff 45 f4             	incl   -0xc(%ebp)
f0103351:	ff 45 f0             	incl   -0x10(%ebp)
f0103354:	a1 6c da 3c f0       	mov    0xf03cda6c,%eax
f0103359:	c1 e8 16             	shr    $0x16,%eax
f010335c:	89 c2                	mov    %eax,%edx
f010335e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103361:	39 c2                	cmp    %eax,%edx
f0103363:	77 d6                	ja     f010333b <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0103365:	a1 78 da 3c f0       	mov    0xf03cda78,%eax
f010336a:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010336d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103370:	0f 22 d8             	mov    %eax,%cr3
}
f0103373:	90                   	nop
f0103374:	c9                   	leave  
f0103375:	c3                   	ret    

f0103376 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0103376:	55                   	push   %ebp
f0103377:	89 e5                	mov    %esp,%ebp
f0103379:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010337c:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103381:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103384:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f010338b:	77 17                	ja     f01033a4 <setup_listing_to_all_page_tables_entries+0x2e>
f010338d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103390:	68 78 e4 11 f0       	push   $0xf011e478
f0103395:	68 86 01 00 00       	push   $0x186
f010339a:	68 67 e4 11 f0       	push   $0xf011e467
f010339f:	e8 ef cd ff ff       	call   f0100193 <_panic>
f01033a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a7:	05 00 00 00 10       	add    $0x10000000,%eax
f01033ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01033af:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f01033b4:	05 fc 0e 00 00       	add    $0xefc,%eax
f01033b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01033bc:	83 ca 03             	or     $0x3,%edx
f01033bf:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01033c1:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f01033c6:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01033cc:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f01033d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01033d4:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f01033db:	77 17                	ja     f01033f4 <setup_listing_to_all_page_tables_entries+0x7e>
f01033dd:	ff 75 ec             	pushl  -0x14(%ebp)
f01033e0:	68 78 e4 11 f0       	push   $0xf011e478
f01033e5:	68 8b 01 00 00       	push   $0x18b
f01033ea:	68 67 e4 11 f0       	push   $0xf011e467
f01033ef:	e8 9f cd ff ff       	call   f0100193 <_panic>
f01033f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01033f7:	05 00 00 00 10       	add    $0x10000000,%eax
f01033fc:	83 c8 05             	or     $0x5,%eax
f01033ff:	89 02                	mov    %eax,(%edx)

}
f0103401:	90                   	nop
f0103402:	c9                   	leave  
f0103403:	c3                   	ret    

f0103404 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0103404:	55                   	push   %ebp
f0103405:	89 e5                	mov    %esp,%ebp
f0103407:	53                   	push   %ebx
f0103408:	83 ec 10             	sub    $0x10,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010340b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010340f:	75 15                	jne    f0103426 <envid2env+0x22>
		*env_store = curenv;
f0103411:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f0103417:	8b 45 0c             	mov    0xc(%ebp),%eax
f010341a:	89 10                	mov    %edx,(%eax)
		return 0;
f010341c:	b8 00 00 00 00       	mov    $0x0,%eax
f0103421:	e9 93 00 00 00       	jmp    f01034b9 <envid2env+0xb5>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0103426:	8b 0d 4c 21 34 f0    	mov    0xf034214c,%ecx
f010342c:	8b 45 08             	mov    0x8(%ebp),%eax
f010342f:	83 e0 30             	and    $0x30,%eax
f0103432:	89 c2                	mov    %eax,%edx
f0103434:	89 d0                	mov    %edx,%eax
f0103436:	c1 e0 03             	shl    $0x3,%eax
f0103439:	01 d0                	add    %edx,%eax
f010343b:	c1 e0 02             	shl    $0x2,%eax
f010343e:	01 d0                	add    %edx,%eax
f0103440:	c1 e0 06             	shl    $0x6,%eax
f0103443:	29 d0                	sub    %edx,%eax
f0103445:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010344c:	01 d8                	add    %ebx,%eax
f010344e:	01 d0                	add    %edx,%eax
f0103450:	01 c8                	add    %ecx,%eax
f0103452:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0103455:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103458:	8b 40 54             	mov    0x54(%eax),%eax
f010345b:	85 c0                	test   %eax,%eax
f010345d:	74 0b                	je     f010346a <envid2env+0x66>
f010345f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103462:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103465:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103468:	74 10                	je     f010347a <envid2env+0x76>
		*env_store = 0;
f010346a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010346d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103473:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103478:	eb 3f                	jmp    f01034b9 <envid2env+0xb5>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010347a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010347e:	74 2c                	je     f01034ac <envid2env+0xa8>
f0103480:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0103485:	39 45 f8             	cmp    %eax,-0x8(%ebp)
f0103488:	74 22                	je     f01034ac <envid2env+0xa8>
f010348a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010348d:	8b 50 50             	mov    0x50(%eax),%edx
f0103490:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0103495:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103498:	39 c2                	cmp    %eax,%edx
f010349a:	74 10                	je     f01034ac <envid2env+0xa8>
		*env_store = 0;
f010349c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010349f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01034a5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01034aa:	eb 0d                	jmp    f01034b9 <envid2env+0xb5>
	}

	*env_store = e;
f01034ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034af:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01034b2:	89 10                	mov    %edx,(%eax)
	return 0;
f01034b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034b9:	83 c4 10             	add    $0x10,%esp
f01034bc:	5b                   	pop    %ebx
f01034bd:	5d                   	pop    %ebp
f01034be:	c3                   	ret    

f01034bf <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f01034bf:	55                   	push   %ebp
f01034c0:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01034c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01034c5:	8b 15 64 da 3c f0    	mov    0xf03cda64,%edx
f01034cb:	29 d0                	sub    %edx,%eax
f01034cd:	c1 f8 03             	sar    $0x3,%eax
f01034d0:	89 c2                	mov    %eax,%edx
f01034d2:	89 d0                	mov    %edx,%eax
f01034d4:	c1 e0 02             	shl    $0x2,%eax
f01034d7:	01 d0                	add    %edx,%eax
f01034d9:	c1 e0 02             	shl    $0x2,%eax
f01034dc:	01 d0                	add    %edx,%eax
f01034de:	c1 e0 02             	shl    $0x2,%eax
f01034e1:	01 d0                	add    %edx,%eax
f01034e3:	89 c1                	mov    %eax,%ecx
f01034e5:	c1 e1 08             	shl    $0x8,%ecx
f01034e8:	01 c8                	add    %ecx,%eax
f01034ea:	89 c1                	mov    %eax,%ecx
f01034ec:	c1 e1 10             	shl    $0x10,%ecx
f01034ef:	01 c8                	add    %ecx,%eax
f01034f1:	01 c0                	add    %eax,%eax
f01034f3:	01 d0                	add    %edx,%eax
}
f01034f5:	5d                   	pop    %ebp
f01034f6:	c3                   	ret    

f01034f7 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f01034f7:	55                   	push   %ebp
f01034f8:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01034fa:	ff 75 08             	pushl  0x8(%ebp)
f01034fd:	e8 bd ff ff ff       	call   f01034bf <to_frame_number>
f0103502:	83 c4 04             	add    $0x4,%esp
f0103505:	c1 e0 0c             	shl    $0xc,%eax
}
f0103508:	c9                   	leave  
f0103509:	c3                   	ret    

f010350a <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f010350a:	55                   	push   %ebp
f010350b:	89 e5                	mov    %esp,%ebp
f010350d:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103510:	8b 45 08             	mov    0x8(%ebp),%eax
f0103513:	c1 e8 0c             	shr    $0xc,%eax
f0103516:	89 c2                	mov    %eax,%edx
f0103518:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010351d:	39 c2                	cmp    %eax,%edx
f010351f:	72 14                	jb     f0103535 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0103521:	83 ec 04             	sub    $0x4,%esp
f0103524:	68 b0 e5 11 f0       	push   $0xf011e5b0
f0103529:	6a 78                	push   $0x78
f010352b:	68 d5 e5 11 f0       	push   $0xf011e5d5
f0103530:	e8 5e cc ff ff       	call   f0100193 <_panic>
	return &frames_info[PPN(physical_address)];
f0103535:	8b 15 64 da 3c f0    	mov    0xf03cda64,%edx
f010353b:	8b 45 08             	mov    0x8(%ebp),%eax
f010353e:	c1 e8 0c             	shr    $0xc,%eax
f0103541:	89 c1                	mov    %eax,%ecx
f0103543:	89 c8                	mov    %ecx,%eax
f0103545:	01 c0                	add    %eax,%eax
f0103547:	01 c8                	add    %ecx,%eax
f0103549:	c1 e0 03             	shl    $0x3,%eax
f010354c:	01 d0                	add    %edx,%eax
}
f010354e:	c9                   	leave  
f010354f:	c3                   	ret    

f0103550 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0103550:	55                   	push   %ebp
f0103551:	89 e5                	mov    %esp,%ebp
f0103553:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0103556:	83 ec 08             	sub    $0x8,%esp
f0103559:	68 00 10 00 00       	push   $0x1000
f010355e:	68 00 10 00 00       	push   $0x1000
f0103563:	e8 4f 02 00 00       	call   f01037b7 <boot_allocate_space>
f0103568:	83 c4 10             	add    $0x10,%esp
f010356b:	a3 70 da 3c f0       	mov    %eax,0xf03cda70
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0103570:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103575:	83 ec 04             	sub    $0x4,%esp
f0103578:	68 00 10 00 00       	push   $0x1000
f010357d:	6a 00                	push   $0x0
f010357f:	50                   	push   %eax
f0103580:	e8 28 7f 01 00       	call   f011b4ad <memset>
f0103585:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0103588:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010358d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103590:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0103597:	77 14                	ja     f01035ad <initialize_kernel_VM+0x5d>
f0103599:	ff 75 e8             	pushl  -0x18(%ebp)
f010359c:	68 f0 e5 11 f0       	push   $0xf011e5f0
f01035a1:	6a 53                	push   $0x53
f01035a3:	68 21 e6 11 f0       	push   $0xf011e621
f01035a8:	e8 e6 cb ff ff       	call   f0100193 <_panic>
f01035ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01035b0:	05 00 00 00 10       	add    $0x10000000,%eax
f01035b5:	a3 78 da 3c f0       	mov    %eax,0xf03cda78
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01035ba:	c7 45 e4 00 f0 14 f0 	movl   $0xf014f000,-0x1c(%ebp)
f01035c1:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01035c8:	77 14                	ja     f01035de <initialize_kernel_VM+0x8e>
f01035ca:	ff 75 e4             	pushl  -0x1c(%ebp)
f01035cd:	68 f0 e5 11 f0       	push   $0xf011e5f0
f01035d2:	6a 5b                	push   $0x5b
f01035d4:	68 21 e6 11 f0       	push   $0xf011e621
f01035d9:	e8 b5 cb ff ff       	call   f0100193 <_panic>
f01035de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01035e1:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01035e7:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f01035ec:	83 ec 0c             	sub    $0xc,%esp
f01035ef:	6a 02                	push   $0x2
f01035f1:	52                   	push   %edx
f01035f2:	68 00 80 00 00       	push   $0x8000
f01035f7:	68 00 80 bf ef       	push   $0xefbf8000
f01035fc:	50                   	push   %eax
f01035fd:	e8 16 02 00 00       	call   f0103818 <boot_map_range>
f0103602:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0103605:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f010360c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0103613:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f010361a:	eb 25                	jmp    f0103641 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f010361c:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f010361f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103622:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103627:	83 ec 04             	sub    $0x4,%esp
f010362a:	6a 01                	push   $0x1
f010362c:	52                   	push   %edx
f010362d:	50                   	push   %eax
f010362e:	e8 59 02 00 00       	call   f010388c <boot_get_page_table>
f0103633:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0103636:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f010363d:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0103641:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103645:	72 d5                	jb     f010361c <initialize_kernel_VM+0xcc>
f0103647:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010364b:	77 06                	ja     f0103653 <initialize_kernel_VM+0x103>
f010364d:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0103651:	76 c9                	jbe    f010361c <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct Frame_Info) ;
f0103653:	8b 15 d0 f5 3a f0    	mov    0xf03af5d0,%edx
f0103659:	89 d0                	mov    %edx,%eax
f010365b:	01 c0                	add    %eax,%eax
f010365d:	01 d0                	add    %edx,%eax
f010365f:	c1 e0 03             	shl    $0x3,%eax
f0103662:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0103665:	83 ec 08             	sub    $0x8,%esp
f0103668:	68 00 10 00 00       	push   $0x1000
f010366d:	ff 75 e0             	pushl  -0x20(%ebp)
f0103670:	e8 42 01 00 00       	call   f01037b7 <boot_allocate_space>
f0103675:	83 c4 10             	add    $0x10,%esp
f0103678:	a3 64 da 3c f0       	mov    %eax,0xf03cda64
	memset(frames_info, 0, array_size);
f010367d:	a1 64 da 3c f0       	mov    0xf03cda64,%eax
f0103682:	83 ec 04             	sub    $0x4,%esp
f0103685:	ff 75 e0             	pushl  -0x20(%ebp)
f0103688:	6a 00                	push   $0x0
f010368a:	50                   	push   %eax
f010368b:	e8 1d 7e 01 00       	call   f011b4ad <memset>
f0103690:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct Frame_Info);
f0103693:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f010369a:	83 ec 08             	sub    $0x8,%esp
f010369d:	68 00 10 00 00       	push   $0x1000
f01036a2:	ff 75 dc             	pushl  -0x24(%ebp)
f01036a5:	e8 0d 01 00 00       	call   f01037b7 <boot_allocate_space>
f01036aa:	83 c4 10             	add    $0x10,%esp
f01036ad:	a3 50 da 3c f0       	mov    %eax,0xf03cda50
	memset(disk_frames_info , 0, disk_array_size);
f01036b2:	a1 50 da 3c f0       	mov    0xf03cda50,%eax
f01036b7:	83 ec 04             	sub    $0x4,%esp
f01036ba:	ff 75 dc             	pushl  -0x24(%ebp)
f01036bd:	6a 00                	push   $0x0
f01036bf:	50                   	push   %eax
f01036c0:	e8 e8 7d 01 00       	call   f011b4ad <memset>
f01036c5:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f01036c8:	e8 a9 fc ff ff       	call   f0103376 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d\n",NENV);
f01036cd:	83 ec 08             	sub    $0x8,%esp
f01036d0:	6a 31                	push   $0x31
f01036d2:	68 37 e6 11 f0       	push   $0xf011e637
f01036d7:	e8 5a 3d 00 00       	call   f0107436 <cprintf>
f01036dc:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01036df:	c7 45 d8 b8 ed 0f 00 	movl   $0xfedb8,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01036e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01036e9:	83 ec 08             	sub    $0x8,%esp
f01036ec:	68 00 10 00 00       	push   $0x1000
f01036f1:	50                   	push   %eax
f01036f2:	e8 c0 00 00 00       	call   f01037b7 <boot_allocate_space>
f01036f7:	83 c4 10             	add    $0x10,%esp
f01036fa:	a3 4c 21 34 f0       	mov    %eax,0xf034214c
	memset(envs , 0, envs_size);
f01036ff:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0103702:	a1 4c 21 34 f0       	mov    0xf034214c,%eax
f0103707:	83 ec 04             	sub    $0x4,%esp
f010370a:	52                   	push   %edx
f010370b:	6a 00                	push   $0x0
f010370d:	50                   	push   %eax
f010370e:	e8 9a 7d 01 00       	call   f011b4ad <memset>
f0103713:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0103716:	a1 4c 21 34 f0       	mov    0xf034214c,%eax
f010371b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010371e:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0103725:	77 17                	ja     f010373e <initialize_kernel_VM+0x1ee>
f0103727:	ff 75 d4             	pushl  -0x2c(%ebp)
f010372a:	68 f0 e5 11 f0       	push   $0xf011e5f0
f010372f:	68 a4 00 00 00       	push   $0xa4
f0103734:	68 21 e6 11 f0       	push   $0xf011e621
f0103739:	e8 55 ca ff ff       	call   f0100193 <_panic>
f010373e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103741:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0103747:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010374a:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010374f:	83 ec 0c             	sub    $0xc,%esp
f0103752:	6a 04                	push   $0x4
f0103754:	51                   	push   %ecx
f0103755:	52                   	push   %edx
f0103756:	68 00 00 c0 ee       	push   $0xeec00000
f010375b:	50                   	push   %eax
f010375c:	e8 b7 00 00 00       	call   f0103818 <boot_map_range>
f0103761:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0103764:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103769:	05 ec 0e 00 00       	add    $0xeec,%eax
f010376e:	8b 15 70 da 3c f0    	mov    0xf03cda70,%edx
f0103774:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010377a:	8b 12                	mov    (%edx),%edx
f010377c:	83 ca 05             	or     $0x5,%edx
f010377f:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0103781:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0103786:	83 ec 0c             	sub    $0xc,%esp
f0103789:	6a 02                	push   $0x2
f010378b:	6a 00                	push   $0x0
f010378d:	68 ff ff ff 0f       	push   $0xfffffff
f0103792:	68 00 00 00 f0       	push   $0xf0000000
f0103797:	50                   	push   %eax
f0103798:	e8 7b 00 00 00       	call   f0103818 <boot_map_range>
f010379d:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f01037a0:	e8 49 f8 ff ff       	call   f0102fee <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f01037a5:	c7 05 e0 89 3a f0 19 	movl   $0x19,0xf03a89e0
f01037ac:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f01037af:	e8 c2 fa ff ff       	call   f0103276 <turn_on_paging>
}
f01037b4:	90                   	nop
f01037b5:	c9                   	leave  
f01037b6:	c3                   	ret    

f01037b7 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f01037b7:	55                   	push   %ebp
f01037b8:	89 e5                	mov    %esp,%ebp
f01037ba:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f01037bd:	a1 6c da 3c f0       	mov    0xf03cda6c,%eax
f01037c2:	85 c0                	test   %eax,%eax
f01037c4:	75 0a                	jne    f01037d0 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f01037c6:	c7 05 6c da 3c f0 70 	movl   $0xf03cdb70,0xf03cda6c
f01037cd:	db 3c f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f01037d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01037d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01037d6:	a1 6c da 3c f0       	mov    0xf03cda6c,%eax
f01037db:	89 c2                	mov    %eax,%edx
f01037dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01037e0:	01 d0                	add    %edx,%eax
f01037e2:	48                   	dec    %eax
f01037e3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01037e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01037e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01037ee:	f7 75 fc             	divl   -0x4(%ebp)
f01037f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01037f4:	29 d0                	sub    %edx,%eax
f01037f6:	a3 6c da 3c f0       	mov    %eax,0xf03cda6c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01037fb:	a1 6c da 3c f0       	mov    0xf03cda6c,%eax
f0103800:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0103803:	8b 15 6c da 3c f0    	mov    0xf03cda6c,%edx
f0103809:	8b 45 08             	mov    0x8(%ebp),%eax
f010380c:	01 d0                	add    %edx,%eax
f010380e:	a3 6c da 3c f0       	mov    %eax,0xf03cda6c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0103813:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0103816:	c9                   	leave  
f0103817:	c3                   	ret    

f0103818 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0103818:	55                   	push   %ebp
f0103819:	89 e5                	mov    %esp,%ebp
f010381b:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f010381e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0103825:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010382c:	eb 53                	jmp    f0103881 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f010382e:	83 ec 04             	sub    $0x4,%esp
f0103831:	6a 01                	push   $0x1
f0103833:	ff 75 0c             	pushl  0xc(%ebp)
f0103836:	ff 75 08             	pushl  0x8(%ebp)
f0103839:	e8 4e 00 00 00       	call   f010388c <boot_get_page_table>
f010383e:	83 c4 10             	add    $0x10,%esp
f0103841:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0103844:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103847:	c1 e8 0c             	shr    $0xc,%eax
f010384a:	25 ff 03 00 00       	and    $0x3ff,%eax
f010384f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0103852:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103855:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010385c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010385f:	01 c2                	add    %eax,%edx
f0103861:	8b 45 18             	mov    0x18(%ebp),%eax
f0103864:	0b 45 14             	or     0x14(%ebp),%eax
f0103867:	83 c8 01             	or     $0x1,%eax
f010386a:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f010386c:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0103873:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010387a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0103881:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103884:	3b 45 10             	cmp    0x10(%ebp),%eax
f0103887:	72 a5                	jb     f010382e <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0103889:	90                   	nop
f010388a:	c9                   	leave  
f010388b:	c3                   	ret    

f010388c <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010388c:	55                   	push   %ebp
f010388d:	89 e5                	mov    %esp,%ebp
f010388f:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0103892:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103895:	c1 e8 16             	shr    $0x16,%eax
f0103898:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010389b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010389e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01038a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01038a8:	01 d0                	add    %edx,%eax
f01038aa:	8b 00                	mov    (%eax),%eax
f01038ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f01038af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01038b2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01038b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f01038ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01038bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01038c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038c3:	c1 e8 0c             	shr    $0xc,%eax
f01038c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01038c9:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f01038ce:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01038d1:	72 17                	jb     f01038ea <boot_get_page_table+0x5e>
f01038d3:	ff 75 e8             	pushl  -0x18(%ebp)
f01038d6:	68 48 e6 11 f0       	push   $0xf011e648
f01038db:	68 23 01 00 00       	push   $0x123
f01038e0:	68 21 e6 11 f0       	push   $0xf011e621
f01038e5:	e8 a9 c8 ff ff       	call   f0100193 <_panic>
f01038ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038ed:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01038f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01038f5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01038f9:	75 72                	jne    f010396d <boot_get_page_table+0xe1>
	{
		if (create)
f01038fb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01038ff:	74 65                	je     f0103966 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0103901:	83 ec 08             	sub    $0x8,%esp
f0103904:	68 00 10 00 00       	push   $0x1000
f0103909:	68 00 10 00 00       	push   $0x1000
f010390e:	e8 a4 fe ff ff       	call   f01037b7 <boot_allocate_space>
f0103913:	83 c4 10             	add    $0x10,%esp
f0103916:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0103919:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010391c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010391f:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0103926:	77 17                	ja     f010393f <boot_get_page_table+0xb3>
f0103928:	ff 75 dc             	pushl  -0x24(%ebp)
f010392b:	68 f0 e5 11 f0       	push   $0xf011e5f0
f0103930:	68 29 01 00 00       	push   $0x129
f0103935:	68 21 e6 11 f0       	push   $0xf011e621
f010393a:	e8 54 c8 ff ff       	call   f0100193 <_panic>
f010393f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103942:	05 00 00 00 10       	add    $0x10000000,%eax
f0103947:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f010394a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010394d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103954:	8b 45 08             	mov    0x8(%ebp),%eax
f0103957:	01 d0                	add    %edx,%eax
f0103959:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010395c:	83 ca 03             	or     $0x3,%edx
f010395f:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0103961:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103964:	eb 0a                	jmp    f0103970 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0103966:	b8 00 00 00 00       	mov    $0x0,%eax
f010396b:	eb 03                	jmp    f0103970 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f010396d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0103970:	c9                   	leave  
f0103971:	c3                   	ret    

f0103972 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0103972:	55                   	push   %ebp
f0103973:	89 e5                	mov    %esp,%ebp
f0103975:	53                   	push   %ebx
f0103976:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0103979:	c7 05 54 da 3c f0 00 	movl   $0x0,0xf03cda54
f0103980:	00 00 00 
f0103983:	c7 05 58 da 3c f0 00 	movl   $0x0,0xf03cda58
f010398a:	00 00 00 
f010398d:	c7 05 60 da 3c f0 00 	movl   $0x0,0xf03cda60
f0103994:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0103997:	c7 05 40 da 3c f0 00 	movl   $0x0,0xf03cda40
f010399e:	00 00 00 
f01039a1:	c7 05 44 da 3c f0 00 	movl   $0x0,0xf03cda44
f01039a8:	00 00 00 
f01039ab:	c7 05 4c da 3c f0 00 	movl   $0x0,0xf03cda4c
f01039b2:	00 00 00 

	frames_info[0].references = 1;
f01039b5:	a1 64 da 3c f0       	mov    0xf03cda64,%eax
f01039ba:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f01039c0:	a1 64 da 3c f0       	mov    0xf03cda64,%eax
f01039c5:	83 c0 18             	add    $0x18,%eax
f01039c8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01039ce:	a1 64 da 3c f0       	mov    0xf03cda64,%eax
f01039d3:	83 c0 30             	add    $0x30,%eax
f01039d6:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01039dc:	c7 05 68 da 3c f0 00 	movl   $0xf0001000,0xf03cda68
f01039e3:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01039e6:	c7 05 74 da 3c f0 00 	movl   $0xf0002000,0xf03cda74
f01039ed:	20 00 f0 
	i =0;
f01039f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01039f7:	eb 1f                	jmp    f0103a18 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01039f9:	8b 15 68 da 3c f0    	mov    0xf03cda68,%edx
f01039ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a02:	01 d0                	add    %edx,%eax
f0103a04:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0103a07:	8b 15 74 da 3c f0    	mov    0xf03cda74,%edx
f0103a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a10:	01 d0                	add    %edx,%eax
f0103a12:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0103a15:	ff 45 f4             	incl   -0xc(%ebp)
f0103a18:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0103a1f:	7e d8                	jle    f01039f9 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0103a21:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103a28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a2b:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0103a30:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103a33:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103a36:	ba 00 00 00 00       	mov    $0x0,%edx
f0103a3b:	f7 75 f0             	divl   -0x10(%ebp)
f0103a3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103a41:	29 d0                	sub    %edx,%eax
f0103a43:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0103a46:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0103a4d:	e9 bc 00 00 00       	jmp    f0103b0e <initialize_paging+0x19c>
	{

		initialize_frame_info(&(frames_info[i]));
f0103a52:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103a58:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a5b:	89 d0                	mov    %edx,%eax
f0103a5d:	01 c0                	add    %eax,%eax
f0103a5f:	01 d0                	add    %edx,%eax
f0103a61:	c1 e0 03             	shl    $0x3,%eax
f0103a64:	01 c8                	add    %ecx,%eax
f0103a66:	83 ec 0c             	sub    $0xc,%esp
f0103a69:	50                   	push   %eax
f0103a6a:	e8 62 02 00 00       	call   f0103cd1 <initialize_frame_info>
f0103a6f:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0103a72:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103a78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a7b:	89 d0                	mov    %edx,%eax
f0103a7d:	01 c0                	add    %eax,%eax
f0103a7f:	01 d0                	add    %edx,%eax
f0103a81:	c1 e0 03             	shl    $0x3,%eax
f0103a84:	01 c8                	add    %ecx,%eax
f0103a86:	8b 15 54 da 3c f0    	mov    0xf03cda54,%edx
f0103a8c:	89 10                	mov    %edx,(%eax)
f0103a8e:	8b 00                	mov    (%eax),%eax
f0103a90:	85 c0                	test   %eax,%eax
f0103a92:	74 1f                	je     f0103ab3 <initialize_paging+0x141>
f0103a94:	8b 15 54 da 3c f0    	mov    0xf03cda54,%edx
f0103a9a:	8b 1d 64 da 3c f0    	mov    0xf03cda64,%ebx
f0103aa0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103aa3:	89 c8                	mov    %ecx,%eax
f0103aa5:	01 c0                	add    %eax,%eax
f0103aa7:	01 c8                	add    %ecx,%eax
f0103aa9:	c1 e0 03             	shl    $0x3,%eax
f0103aac:	01 d8                	add    %ebx,%eax
f0103aae:	89 42 04             	mov    %eax,0x4(%edx)
f0103ab1:	eb 19                	jmp    f0103acc <initialize_paging+0x15a>
f0103ab3:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103ab9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103abc:	89 d0                	mov    %edx,%eax
f0103abe:	01 c0                	add    %eax,%eax
f0103ac0:	01 d0                	add    %edx,%eax
f0103ac2:	c1 e0 03             	shl    $0x3,%eax
f0103ac5:	01 c8                	add    %ecx,%eax
f0103ac7:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f0103acc:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103ad2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ad5:	89 d0                	mov    %edx,%eax
f0103ad7:	01 c0                	add    %eax,%eax
f0103ad9:	01 d0                	add    %edx,%eax
f0103adb:	c1 e0 03             	shl    $0x3,%eax
f0103ade:	01 c8                	add    %ecx,%eax
f0103ae0:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f0103ae5:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103aeb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103aee:	89 d0                	mov    %edx,%eax
f0103af0:	01 c0                	add    %eax,%eax
f0103af2:	01 d0                	add    %edx,%eax
f0103af4:	c1 e0 03             	shl    $0x3,%eax
f0103af7:	01 c8                	add    %ecx,%eax
f0103af9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b00:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f0103b05:	40                   	inc    %eax
f0103b06:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0103b0b:	ff 45 f4             	incl   -0xc(%ebp)
f0103b0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b11:	85 c0                	test   %eax,%eax
f0103b13:	79 05                	jns    f0103b1a <initialize_paging+0x1a8>
f0103b15:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103b1a:	c1 f8 0c             	sar    $0xc,%eax
f0103b1d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103b20:	0f 8f 2c ff ff ff    	jg     f0103a52 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0103b26:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0103b2d:	eb 1d                	jmp    f0103b4c <initialize_paging+0x1da>
	{
		frames_info[i].references = 1;
f0103b2f:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103b35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b38:	89 d0                	mov    %edx,%eax
f0103b3a:	01 c0                	add    %eax,%eax
f0103b3c:	01 d0                	add    %edx,%eax
f0103b3e:	c1 e0 03             	shl    $0x3,%eax
f0103b41:	01 c8                	add    %ecx,%eax
f0103b43:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0103b49:	ff 45 f4             	incl   -0xc(%ebp)
f0103b4c:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0103b53:	7e da                	jle    f0103b2f <initialize_paging+0x1bd>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0103b55:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0103b5c:	a1 6c da 3c f0       	mov    0xf03cda6c,%eax
f0103b61:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103b64:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0103b6b:	77 17                	ja     f0103b84 <initialize_paging+0x212>
f0103b6d:	ff 75 e0             	pushl  -0x20(%ebp)
f0103b70:	68 f0 e5 11 f0       	push   $0xf011e5f0
f0103b75:	68 76 01 00 00       	push   $0x176
f0103b7a:	68 21 e6 11 f0       	push   $0xf011e621
f0103b7f:	e8 0f c6 ff ff       	call   f0100193 <_panic>
f0103b84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103b87:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103b8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103b90:	01 d0                	add    %edx,%eax
f0103b92:	48                   	dec    %eax
f0103b93:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103b96:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103b99:	ba 00 00 00 00       	mov    $0x0,%edx
f0103b9e:	f7 75 e4             	divl   -0x1c(%ebp)
f0103ba1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103ba4:	29 d0                	sub    %edx,%eax
f0103ba6:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103ba9:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0103bb0:	eb 1d                	jmp    f0103bcf <initialize_paging+0x25d>
	{
		frames_info[i].references = 1;
f0103bb2:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103bb8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bbb:	89 d0                	mov    %edx,%eax
f0103bbd:	01 c0                	add    %eax,%eax
f0103bbf:	01 d0                	add    %edx,%eax
f0103bc1:	c1 e0 03             	shl    $0x3,%eax
f0103bc4:	01 c8                	add    %ecx,%eax
f0103bc6:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103bcc:	ff 45 f4             	incl   -0xc(%ebp)
f0103bcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bd2:	85 c0                	test   %eax,%eax
f0103bd4:	79 05                	jns    f0103bdb <initialize_paging+0x269>
f0103bd6:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103bdb:	c1 f8 0c             	sar    $0xc,%eax
f0103bde:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103be1:	7f cf                	jg     f0103bb2 <initialize_paging+0x240>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0103be3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103be6:	85 c0                	test   %eax,%eax
f0103be8:	79 05                	jns    f0103bef <initialize_paging+0x27d>
f0103bea:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103bef:	c1 f8 0c             	sar    $0xc,%eax
f0103bf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103bf5:	e9 bc 00 00 00       	jmp    f0103cb6 <initialize_paging+0x344>
	{
		initialize_frame_info(&(frames_info[i]));
f0103bfa:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103c00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c03:	89 d0                	mov    %edx,%eax
f0103c05:	01 c0                	add    %eax,%eax
f0103c07:	01 d0                	add    %edx,%eax
f0103c09:	c1 e0 03             	shl    $0x3,%eax
f0103c0c:	01 c8                	add    %ecx,%eax
f0103c0e:	83 ec 0c             	sub    $0xc,%esp
f0103c11:	50                   	push   %eax
f0103c12:	e8 ba 00 00 00       	call   f0103cd1 <initialize_frame_info>
f0103c17:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0103c1a:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103c20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c23:	89 d0                	mov    %edx,%eax
f0103c25:	01 c0                	add    %eax,%eax
f0103c27:	01 d0                	add    %edx,%eax
f0103c29:	c1 e0 03             	shl    $0x3,%eax
f0103c2c:	01 c8                	add    %ecx,%eax
f0103c2e:	8b 15 54 da 3c f0    	mov    0xf03cda54,%edx
f0103c34:	89 10                	mov    %edx,(%eax)
f0103c36:	8b 00                	mov    (%eax),%eax
f0103c38:	85 c0                	test   %eax,%eax
f0103c3a:	74 1f                	je     f0103c5b <initialize_paging+0x2e9>
f0103c3c:	8b 15 54 da 3c f0    	mov    0xf03cda54,%edx
f0103c42:	8b 1d 64 da 3c f0    	mov    0xf03cda64,%ebx
f0103c48:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103c4b:	89 c8                	mov    %ecx,%eax
f0103c4d:	01 c0                	add    %eax,%eax
f0103c4f:	01 c8                	add    %ecx,%eax
f0103c51:	c1 e0 03             	shl    $0x3,%eax
f0103c54:	01 d8                	add    %ebx,%eax
f0103c56:	89 42 04             	mov    %eax,0x4(%edx)
f0103c59:	eb 19                	jmp    f0103c74 <initialize_paging+0x302>
f0103c5b:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103c61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c64:	89 d0                	mov    %edx,%eax
f0103c66:	01 c0                	add    %eax,%eax
f0103c68:	01 d0                	add    %edx,%eax
f0103c6a:	c1 e0 03             	shl    $0x3,%eax
f0103c6d:	01 c8                	add    %ecx,%eax
f0103c6f:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f0103c74:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103c7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c7d:	89 d0                	mov    %edx,%eax
f0103c7f:	01 c0                	add    %eax,%eax
f0103c81:	01 d0                	add    %edx,%eax
f0103c83:	c1 e0 03             	shl    $0x3,%eax
f0103c86:	01 c8                	add    %ecx,%eax
f0103c88:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f0103c8d:	8b 0d 64 da 3c f0    	mov    0xf03cda64,%ecx
f0103c93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c96:	89 d0                	mov    %edx,%eax
f0103c98:	01 c0                	add    %eax,%eax
f0103c9a:	01 d0                	add    %edx,%eax
f0103c9c:	c1 e0 03             	shl    $0x3,%eax
f0103c9f:	01 c8                	add    %ecx,%eax
f0103ca1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ca8:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f0103cad:	40                   	inc    %eax
f0103cae:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0103cb3:	ff 45 f4             	incl   -0xc(%ebp)
f0103cb6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cb9:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f0103cbe:	39 c2                	cmp    %eax,%edx
f0103cc0:	0f 82 34 ff ff ff    	jb     f0103bfa <initialize_paging+0x288>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0103cc6:	e8 82 98 00 00       	call   f010d54d <initialize_disk_page_file>
}
f0103ccb:	90                   	nop
f0103ccc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103ccf:	c9                   	leave  
f0103cd0:	c3                   	ret    

f0103cd1 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct Frame_Info *ptr_frame_info)
{
f0103cd1:	55                   	push   %ebp
f0103cd2:	89 e5                	mov    %esp,%ebp
f0103cd4:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0103cd7:	83 ec 04             	sub    $0x4,%esp
f0103cda:	6a 18                	push   $0x18
f0103cdc:	6a 00                	push   $0x0
f0103cde:	ff 75 08             	pushl  0x8(%ebp)
f0103ce1:	e8 c7 77 01 00       	call   f011b4ad <memset>
f0103ce6:	83 c4 10             	add    $0x10,%esp
}
f0103ce9:	90                   	nop
f0103cea:	c9                   	leave  
f0103ceb:	c3                   	ret    

f0103cec <allocate_frame>:
// Hint: references should not be incremented

extern void env_free(struct Env *e);

int allocate_frame(struct Frame_Info **ptr_frame_info)
{
f0103cec:	55                   	push   %ebp
f0103ced:	89 e5                	mov    %esp,%ebp
f0103cef:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0103cf2:	8b 15 54 da 3c f0    	mov    0xf03cda54,%edx
f0103cf8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cfb:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0103cfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0103d04:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d07:	8b 00                	mov    (%eax),%eax
f0103d09:	85 c0                	test   %eax,%eax
f0103d0b:	75 17                	jne    f0103d24 <allocate_frame+0x38>
	{
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0103d0d:	83 ec 04             	sub    $0x4,%esp
f0103d10:	68 78 e6 11 f0       	push   $0xf011e678
f0103d15:	68 a9 01 00 00       	push   $0x1a9
f0103d1a:	68 21 e6 11 f0       	push   $0xf011e621
f0103d1f:	e8 6f c4 ff ff       	call   f0100193 <_panic>
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the second list of the working set of EACH process

	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0103d24:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d27:	8b 00                	mov    (%eax),%eax
f0103d29:	8b 00                	mov    (%eax),%eax
f0103d2b:	85 c0                	test   %eax,%eax
f0103d2d:	74 14                	je     f0103d43 <allocate_frame+0x57>
f0103d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d32:	8b 00                	mov    (%eax),%eax
f0103d34:	8b 00                	mov    (%eax),%eax
f0103d36:	8b 55 08             	mov    0x8(%ebp),%edx
f0103d39:	8b 12                	mov    (%edx),%edx
f0103d3b:	8b 52 04             	mov    0x4(%edx),%edx
f0103d3e:	89 50 04             	mov    %edx,0x4(%eax)
f0103d41:	eb 0d                	jmp    f0103d50 <allocate_frame+0x64>
f0103d43:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d46:	8b 00                	mov    (%eax),%eax
f0103d48:	8b 40 04             	mov    0x4(%eax),%eax
f0103d4b:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f0103d50:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d53:	8b 00                	mov    (%eax),%eax
f0103d55:	8b 40 04             	mov    0x4(%eax),%eax
f0103d58:	85 c0                	test   %eax,%eax
f0103d5a:	74 13                	je     f0103d6f <allocate_frame+0x83>
f0103d5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d5f:	8b 00                	mov    (%eax),%eax
f0103d61:	8b 40 04             	mov    0x4(%eax),%eax
f0103d64:	8b 55 08             	mov    0x8(%ebp),%edx
f0103d67:	8b 12                	mov    (%edx),%edx
f0103d69:	8b 12                	mov    (%edx),%edx
f0103d6b:	89 10                	mov    %edx,(%eax)
f0103d6d:	eb 0c                	jmp    f0103d7b <allocate_frame+0x8f>
f0103d6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d72:	8b 00                	mov    (%eax),%eax
f0103d74:	8b 00                	mov    (%eax),%eax
f0103d76:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f0103d7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d7e:	8b 00                	mov    (%eax),%eax
f0103d80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103d86:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d89:	8b 00                	mov    (%eax),%eax
f0103d8b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103d92:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f0103d97:	48                   	dec    %eax
f0103d98:	a3 60 da 3c f0       	mov    %eax,0xf03cda60

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0103d9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103da0:	8b 00                	mov    (%eax),%eax
f0103da2:	8a 40 14             	mov    0x14(%eax),%al
f0103da5:	84 c0                	test   %al,%al
f0103da7:	74 1d                	je     f0103dc6 <allocate_frame+0xda>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment,(*ptr_frame_info)->va);
f0103da9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dac:	8b 00                	mov    (%eax),%eax
f0103dae:	8b 50 0c             	mov    0xc(%eax),%edx
f0103db1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103db4:	8b 00                	mov    (%eax),%eax
f0103db6:	8b 40 10             	mov    0x10(%eax),%eax
f0103db9:	83 ec 08             	sub    $0x8,%esp
f0103dbc:	52                   	push   %edx
f0103dbd:	50                   	push   %eax
f0103dbe:	e8 91 0b 00 00       	call   f0104954 <pt_clear_page_table_entry>
f0103dc3:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0103dc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dc9:	8b 00                	mov    (%eax),%eax
f0103dcb:	83 ec 0c             	sub    $0xc,%esp
f0103dce:	50                   	push   %eax
f0103dcf:	e8 fd fe ff ff       	call   f0103cd1 <initialize_frame_info>
f0103dd4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103dd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103ddc:	c9                   	leave  
f0103ddd:	c3                   	ret    

f0103dde <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct Frame_Info *ptr_frame_info)
{
f0103dde:	55                   	push   %ebp
f0103ddf:	89 e5                	mov    %esp,%ebp
f0103de1:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0103de4:	83 ec 0c             	sub    $0xc,%esp
f0103de7:	ff 75 08             	pushl  0x8(%ebp)
f0103dea:	e8 e2 fe ff ff       	call   f0103cd1 <initialize_frame_info>
f0103def:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0103df2:	8b 15 54 da 3c f0    	mov    0xf03cda54,%edx
f0103df8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfb:	89 10                	mov    %edx,(%eax)
f0103dfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e00:	8b 00                	mov    (%eax),%eax
f0103e02:	85 c0                	test   %eax,%eax
f0103e04:	74 0d                	je     f0103e13 <free_frame+0x35>
f0103e06:	a1 54 da 3c f0       	mov    0xf03cda54,%eax
f0103e0b:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e0e:	89 50 04             	mov    %edx,0x4(%eax)
f0103e11:	eb 08                	jmp    f0103e1b <free_frame+0x3d>
f0103e13:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e16:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f0103e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e1e:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f0103e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e26:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103e2d:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f0103e32:	40                   	inc    %eax
f0103e33:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f0103e38:	90                   	nop
f0103e39:	c9                   	leave  
f0103e3a:	c3                   	ret    

f0103e3b <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct Frame_Info* ptr_frame_info)
{
f0103e3b:	55                   	push   %ebp
f0103e3c:	89 e5                	mov    %esp,%ebp
f0103e3e:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0103e41:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e44:	8b 40 08             	mov    0x8(%eax),%eax
f0103e47:	48                   	dec    %eax
f0103e48:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e4b:	66 89 42 08          	mov    %ax,0x8(%edx)
f0103e4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e52:	8b 40 08             	mov    0x8(%eax),%eax
f0103e55:	66 85 c0             	test   %ax,%ax
f0103e58:	75 0e                	jne    f0103e68 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0103e5a:	83 ec 0c             	sub    $0xc,%esp
f0103e5d:	ff 75 08             	pushl  0x8(%ebp)
f0103e60:	e8 79 ff ff ff       	call   f0103dde <free_frame>
f0103e65:	83 c4 10             	add    $0x10,%esp
}
f0103e68:	90                   	nop
f0103e69:	c9                   	leave  
f0103e6a:	c3                   	ret    

f0103e6b <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const void *virtual_address, uint32 **ptr_page_table)
{
f0103e6b:	55                   	push   %ebp
f0103e6c:	89 e5                	mov    %esp,%ebp
f0103e6e:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103e71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e74:	c1 e8 16             	shr    $0x16,%eax
f0103e77:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103e7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e81:	01 d0                	add    %edx,%eax
f0103e83:	8b 00                	mov    (%eax),%eax
f0103e85:	89 45 f4             	mov    %eax,-0xc(%ebp)
		*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
	}
	else
	{
		*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e90:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103e93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e96:	c1 e8 0c             	shr    $0xc,%eax
f0103e99:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103e9c:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f0103ea1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ea4:	72 17                	jb     f0103ebd <get_page_table+0x52>
f0103ea6:	ff 75 f0             	pushl  -0x10(%ebp)
f0103ea9:	68 48 e6 11 f0       	push   $0xf011e648
f0103eae:	68 f1 01 00 00       	push   $0x1f1
f0103eb3:	68 21 e6 11 f0       	push   $0xf011e621
f0103eb8:	e8 d6 c2 ff ff       	call   f0100193 <_panic>
f0103ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ec0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103ec5:	89 c2                	mov    %eax,%edx
f0103ec7:	8b 45 10             	mov    0x10(%ebp),%eax
f0103eca:	89 10                	mov    %edx,(%eax)
	}

	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0103ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ecf:	83 e0 01             	and    $0x1,%eax
f0103ed2:	85 c0                	test   %eax,%eax
f0103ed4:	74 0a                	je     f0103ee0 <get_page_table+0x75>
	{
		return TABLE_IN_MEMORY;
f0103ed6:	b8 00 00 00 00       	mov    $0x0,%eax
f0103edb:	e9 8f 00 00 00       	jmp    f0103f6f <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0103ee0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ee4:	74 7b                	je     f0103f61 <get_page_table+0xf6>
	{
		// Put the faulted address in CR2 and then
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;
f0103ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ee9:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0103eec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103eef:	0f 22 d0             	mov    %eax,%cr2

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0103ef2:	83 ec 0c             	sub    $0xc,%esp
f0103ef5:	6a 00                	push   $0x0
f0103ef7:	e8 49 4d 00 00       	call   f0108c45 <fault_handler>
f0103efc:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103eff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103f02:	c1 e8 16             	shr    $0x16,%eax
f0103f05:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103f0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f0f:	01 d0                	add    %edx,%eax
f0103f11:	8b 00                	mov    (%eax),%eax
f0103f13:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103f16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103f21:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f24:	c1 e8 0c             	shr    $0xc,%eax
f0103f27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f2a:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f0103f2f:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103f32:	72 17                	jb     f0103f4b <get_page_table+0xe0>
f0103f34:	ff 75 e8             	pushl  -0x18(%ebp)
f0103f37:	68 48 e6 11 f0       	push   $0xf011e648
f0103f3c:	68 0c 02 00 00       	push   $0x20c
f0103f41:	68 21 e6 11 f0       	push   $0xf011e621
f0103f46:	e8 48 c2 ff ff       	call   f0100193 <_panic>
f0103f4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f4e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f53:	89 c2                	mov    %eax,%edx
f0103f55:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f58:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0103f5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0103f5f:	eb 0e                	jmp    f0103f6f <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0103f61:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f64:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0103f6a:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0103f6f:	c9                   	leave  
f0103f70:	c3                   	ret    

f0103f71 <create_page_table>:

void * create_page_table(uint32 *ptr_page_directory, const uint32 virtual_address)
{
f0103f71:	55                   	push   %ebp
f0103f72:	89 e5                	mov    %esp,%ebp
f0103f74:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0103f77:	83 ec 04             	sub    $0x4,%esp
f0103f7a:	68 c8 e6 11 f0       	push   $0xf011e6c8
f0103f7f:	68 1b 02 00 00       	push   $0x21b
f0103f84:	68 21 e6 11 f0       	push   $0xf011e621
f0103f89:	e8 05 c2 ff ff       	call   f0100193 <_panic>

f0103f8e <__static_cpt>:
	return NULL;
}

void __static_cpt(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0103f8e:	55                   	push   %ebp
f0103f8f:	89 e5                	mov    %esp,%ebp
f0103f91:	83 ec 28             	sub    $0x28,%esp
	struct Frame_Info* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0103f94:	83 ec 0c             	sub    $0xc,%esp
f0103f97:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0103f9a:	50                   	push   %eax
f0103f9b:	e8 4c fd ff ff       	call   f0103cec <allocate_frame>
f0103fa0:	83 c4 10             	add    $0x10,%esp
f0103fa3:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0103fa6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103fa9:	83 ec 0c             	sub    $0xc,%esp
f0103fac:	50                   	push   %eax
f0103fad:	e8 45 f5 ff ff       	call   f01034f7 <to_physical_address>
f0103fb2:	83 c4 10             	add    $0x10,%esp
f0103fb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103fbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fc1:	c1 e8 0c             	shr    $0xc,%eax
f0103fc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103fc7:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f0103fcc:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0103fcf:	72 17                	jb     f0103fe8 <__static_cpt+0x5a>
f0103fd1:	ff 75 ec             	pushl  -0x14(%ebp)
f0103fd4:	68 48 e6 11 f0       	push   $0xf011e648
f0103fd9:	68 25 02 00 00       	push   $0x225
f0103fde:	68 21 e6 11 f0       	push   $0xf011e621
f0103fe3:	e8 ab c1 ff ff       	call   f0100193 <_panic>
f0103fe8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103feb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103ff0:	89 c2                	mov    %eax,%edx
f0103ff2:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ff5:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0103ff7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103ffa:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0104000:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104003:	c1 e8 16             	shr    $0x16,%eax
f0104006:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010400d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104010:	01 d0                	add    %edx,%eax
f0104012:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104015:	83 ca 07             	or     $0x7,%edx
f0104018:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f010401a:	8b 45 10             	mov    0x10(%ebp),%eax
f010401d:	8b 00                	mov    (%eax),%eax
f010401f:	83 ec 04             	sub    $0x4,%esp
f0104022:	68 00 10 00 00       	push   $0x1000
f0104027:	6a 00                	push   $0x0
f0104029:	50                   	push   %eax
f010402a:	e8 7e 74 01 00       	call   f011b4ad <memset>
f010402f:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104032:	0f 20 d8             	mov    %cr3,%eax
f0104035:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0104038:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010403b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010403e:	90                   	nop
f010403f:	c9                   	leave  
f0104040:	c3                   	ret    

f0104041 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0104041:	55                   	push   %ebp
f0104042:	89 e5                	mov    %esp,%ebp
f0104044:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0104047:	ff 75 0c             	pushl  0xc(%ebp)
f010404a:	e8 a8 f4 ff ff       	call   f01034f7 <to_physical_address>
f010404f:	83 c4 04             	add    $0x4,%esp
f0104052:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0104055:	83 ec 04             	sub    $0x4,%esp
f0104058:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010405b:	50                   	push   %eax
f010405c:	ff 75 10             	pushl  0x10(%ebp)
f010405f:	ff 75 08             	pushl  0x8(%ebp)
f0104062:	e8 04 fe ff ff       	call   f0103e6b <get_page_table>
f0104067:	83 c4 10             	add    $0x10,%esp
f010406a:	83 f8 01             	cmp    $0x1,%eax
f010406d:	75 16                	jne    f0104085 <map_frame+0x44>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f010406f:	8b 45 10             	mov    0x10(%ebp),%eax
f0104072:	83 ec 04             	sub    $0x4,%esp
f0104075:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0104078:	52                   	push   %edx
f0104079:	50                   	push   %eax
f010407a:	ff 75 08             	pushl  0x8(%ebp)
f010407d:	e8 0c ff ff ff       	call   f0103f8e <__static_cpt>
f0104082:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0104085:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104088:	8b 55 10             	mov    0x10(%ebp),%edx
f010408b:	c1 ea 0c             	shr    $0xc,%edx
f010408e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104094:	c1 e2 02             	shl    $0x2,%edx
f0104097:	01 d0                	add    %edx,%eax
f0104099:	8b 00                	mov    (%eax),%eax
f010409b:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f010409e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01040a1:	83 e0 01             	and    $0x1,%eax
f01040a4:	85 c0                	test   %eax,%eax
f01040a6:	74 25                	je     f01040cd <map_frame+0x8c>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f01040a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01040ab:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01040b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01040b3:	75 07                	jne    f01040bc <map_frame+0x7b>
			return 0;
f01040b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01040ba:	eb 43                	jmp    f01040ff <map_frame+0xbe>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f01040bc:	83 ec 08             	sub    $0x8,%esp
f01040bf:	ff 75 10             	pushl  0x10(%ebp)
f01040c2:	ff 75 08             	pushl  0x8(%ebp)
f01040c5:	e8 a7 00 00 00       	call   f0104171 <unmap_frame>
f01040ca:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f01040cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040d0:	8b 40 08             	mov    0x8(%eax),%eax
f01040d3:	40                   	inc    %eax
f01040d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01040d7:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f01040db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01040de:	8b 55 10             	mov    0x10(%ebp),%edx
f01040e1:	c1 ea 0c             	shr    $0xc,%edx
f01040e4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01040ea:	c1 e2 02             	shl    $0x2,%edx
f01040ed:	01 c2                	add    %eax,%edx
f01040ef:	8b 45 14             	mov    0x14(%ebp),%eax
f01040f2:	0b 45 f4             	or     -0xc(%ebp),%eax
f01040f5:	83 c8 01             	or     $0x1,%eax
f01040f8:	89 02                	mov    %eax,(%edx)

	return 0;
f01040fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01040ff:	c9                   	leave  
f0104100:	c3                   	ret    

f0104101 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct Frame_Info * get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table)
{
f0104101:	55                   	push   %ebp
f0104102:	89 e5                	mov    %esp,%ebp
f0104104:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0104107:	83 ec 04             	sub    $0x4,%esp
f010410a:	ff 75 10             	pushl  0x10(%ebp)
f010410d:	ff 75 0c             	pushl  0xc(%ebp)
f0104110:	ff 75 08             	pushl  0x8(%ebp)
f0104113:	e8 53 fd ff ff       	call   f0103e6b <get_page_table>
f0104118:	83 c4 10             	add    $0x10,%esp
f010411b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f010411e:	8b 45 10             	mov    0x10(%ebp),%eax
f0104121:	8b 00                	mov    (%eax),%eax
f0104123:	85 c0                	test   %eax,%eax
f0104125:	74 43                	je     f010416a <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0104127:	8b 45 0c             	mov    0xc(%ebp),%eax
f010412a:	c1 e8 0c             	shr    $0xc,%eax
f010412d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104132:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0104135:	8b 45 10             	mov    0x10(%ebp),%eax
f0104138:	8b 00                	mov    (%eax),%eax
f010413a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010413d:	c1 e2 02             	shl    $0x2,%edx
f0104140:	01 d0                	add    %edx,%eax
f0104142:	8b 00                	mov    (%eax),%eax
f0104144:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0104147:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010414b:	74 16                	je     f0104163 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f010414d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104150:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104155:	83 ec 0c             	sub    $0xc,%esp
f0104158:	50                   	push   %eax
f0104159:	e8 ac f3 ff ff       	call   f010350a <to_frame_info>
f010415e:	83 c4 10             	add    $0x10,%esp
f0104161:	eb 0c                	jmp    f010416f <get_frame_info+0x6e>
		}
		return 0;
f0104163:	b8 00 00 00 00       	mov    $0x0,%eax
f0104168:	eb 05                	jmp    f010416f <get_frame_info+0x6e>
	}
	return 0;
f010416a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010416f:	c9                   	leave  
f0104170:	c3                   	ret    

f0104171 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, void *virtual_address)
{
f0104171:	55                   	push   %ebp
f0104172:	89 e5                	mov    %esp,%ebp
f0104174:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct Frame_Info* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0104177:	83 ec 04             	sub    $0x4,%esp
f010417a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010417d:	50                   	push   %eax
f010417e:	ff 75 0c             	pushl  0xc(%ebp)
f0104181:	ff 75 08             	pushl  0x8(%ebp)
f0104184:	e8 78 ff ff ff       	call   f0104101 <get_frame_info>
f0104189:	83 c4 10             	add    $0x10,%esp
f010418c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010418f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104193:	74 60                	je     f01041f5 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0104195:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104198:	8a 40 14             	mov    0x14(%eax),%al
f010419b:	84 c0                	test   %al,%al
f010419d:	74 1d                	je     f01041bc <unmap_frame+0x4b>
f010419f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041a2:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f01041a7:	77 13                	ja     f01041bc <unmap_frame+0x4b>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f01041a9:	83 ec 08             	sub    $0x8,%esp
f01041ac:	ff 75 0c             	pushl  0xc(%ebp)
f01041af:	68 ec e6 11 f0       	push   $0xf011e6ec
f01041b4:	e8 7d 32 00 00       	call   f0107436 <cprintf>
f01041b9:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f01041bc:	83 ec 0c             	sub    $0xc,%esp
f01041bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01041c2:	e8 74 fc ff ff       	call   f0103e3b <decrement_references>
f01041c7:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f01041ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041cd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041d0:	c1 ea 0c             	shr    $0xc,%edx
f01041d3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041d9:	c1 e2 02             	shl    $0x2,%edx
f01041dc:	01 d0                	add    %edx,%eax
f01041de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, virtual_address);
f01041e4:	83 ec 08             	sub    $0x8,%esp
f01041e7:	ff 75 0c             	pushl  0xc(%ebp)
f01041ea:	ff 75 08             	pushl  0x8(%ebp)
f01041ed:	e8 6f f0 ff ff       	call   f0103261 <tlb_invalidate>
f01041f2:	83 c4 10             	add    $0x10,%esp
	}
}
f01041f5:	90                   	nop
f01041f6:	c9                   	leave  
f01041f7:	c3                   	ret    

f01041f8 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f01041f8:	55                   	push   %ebp
f01041f9:	89 e5                	mov    %esp,%ebp
f01041fb:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01041fe:	ff 75 0c             	pushl  0xc(%ebp)
f0104201:	e8 f1 f2 ff ff       	call   f01034f7 <to_physical_address>
f0104206:	83 c4 04             	add    $0x4,%esp
f0104209:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010420c:	8b 45 10             	mov    0x10(%ebp),%eax
f010420f:	c1 e8 16             	shr    $0x16,%eax
f0104212:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104219:	8b 45 08             	mov    0x8(%ebp),%eax
f010421c:	01 d0                	add    %edx,%eax
f010421e:	8b 00                	mov    (%eax),%eax
f0104220:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104223:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104226:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010422b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010422e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104231:	c1 e8 0c             	shr    $0xc,%eax
f0104234:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104237:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010423c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010423f:	72 17                	jb     f0104258 <loadtime_map_frame+0x60>
f0104241:	ff 75 ec             	pushl  -0x14(%ebp)
f0104244:	68 48 e6 11 f0       	push   $0xf011e648
f0104249:	68 db 02 00 00       	push   $0x2db
f010424e:	68 21 e6 11 f0       	push   $0xf011e621
f0104253:	e8 3b bf ff ff       	call   f0100193 <_panic>
f0104258:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010425b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0104263:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104267:	75 16                	jne    f010427f <loadtime_map_frame+0x87>
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0104269:	8b 45 10             	mov    0x10(%ebp),%eax
f010426c:	83 ec 04             	sub    $0x4,%esp
f010426f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f0104272:	52                   	push   %edx
f0104273:	50                   	push   %eax
f0104274:	ff 75 08             	pushl  0x8(%ebp)
f0104277:	e8 12 fd ff ff       	call   f0103f8e <__static_cpt>
f010427c:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f010427f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104282:	8b 40 08             	mov    0x8(%eax),%eax
f0104285:	40                   	inc    %eax
f0104286:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104289:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f010428d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104290:	8b 55 10             	mov    0x10(%ebp),%edx
f0104293:	c1 ea 0c             	shr    $0xc,%edx
f0104296:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010429c:	c1 e2 02             	shl    $0x2,%edx
f010429f:	01 c2                	add    %eax,%edx
f01042a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01042a4:	0b 45 f4             	or     -0xc(%ebp),%eax
f01042a7:	83 c8 01             	or     $0x1,%eax
f01042aa:	89 02                	mov    %eax,(%edx)

	return 0;
f01042ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01042b1:	c9                   	leave  
f01042b2:	c3                   	ret    

f01042b3 <allocateMem>:
//======================================================

// [1] allocateMem

void allocateMem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01042b3:	55                   	push   %ebp
f01042b4:	89 e5                	mov    %esp,%ebp
f01042b6:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocateMem() is not implemented yet...!!");
f01042b9:	83 ec 04             	sub    $0x4,%esp
f01042bc:	68 10 e7 11 f0       	push   $0xf011e710
f01042c1:	68 01 03 00 00       	push   $0x301
f01042c6:	68 21 e6 11 f0       	push   $0xf011e621
f01042cb:	e8 c3 be ff ff       	call   f0100193 <_panic>

f01042d0 <freeMem>:


// [2] freeMem

void freeMem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01042d0:	55                   	push   %ebp
f01042d1:	89 e5                	mov    %esp,%ebp
f01042d3:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("freeMem() is not implemented yet...!!");
f01042d6:	83 ec 04             	sub    $0x4,%esp
f01042d9:	68 3c e7 11 f0       	push   $0xf011e73c
f01042de:	68 0e 03 00 00       	push   $0x30e
f01042e3:	68 21 e6 11 f0       	push   $0xf011e621
f01042e8:	e8 a6 be ff ff       	call   f0100193 <_panic>

f01042ed <__freeMem_with_buffering>:
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

}

void __freeMem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01042ed:	55                   	push   %ebp
f01042ee:	89 e5                	mov    %esp,%ebp
f01042f0:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f01042f3:	83 ec 04             	sub    $0x4,%esp
f01042f6:	68 c8 e6 11 f0       	push   $0xf011e6c8
f01042fb:	68 19 03 00 00       	push   $0x319
f0104300:	68 21 e6 11 f0       	push   $0xf011e621
f0104305:	e8 89 be ff ff       	call   f0100193 <_panic>

f010430a <moveMem>:

//================= [BONUS] =====================
// [3] moveMem

void moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010430a:	55                   	push   %ebp
f010430b:	89 e5                	mov    %esp,%ebp
f010430d:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0104310:	83 ec 04             	sub    $0x4,%esp
f0104313:	68 c8 e6 11 f0       	push   $0xf011e6c8
f0104318:	68 21 03 00 00       	push   $0x321
f010431d:	68 21 e6 11 f0       	push   $0xf011e621
f0104322:	e8 6c be ff ff       	call   f0100193 <_panic>

f0104327 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocatino size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* ptr_page_directory, uint32 start_virtual_address, uint32 size)
{
f0104327:	55                   	push   %ebp
f0104328:	89 e5                	mov    %esp,%ebp
f010432a:	83 ec 28             	sub    $0x28,%esp
	LOG_STATMENT(cprintf("calculate_required_frames: Starting at address %x",start_virtual_address));
	//calculate the required page tables
	uint32 number_of_tables = 0;
f010432d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	long i = 0;
f0104334:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);
f010433b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010433e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104341:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104344:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104349:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f010434c:	eb 27                	jmp    f0104375 <calculate_required_frames+0x4e>
	{
		uint32 *ptr_page_table;
		get_page_table(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table);
f010434e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104351:	83 ec 04             	sub    $0x4,%esp
f0104354:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0104357:	52                   	push   %edx
f0104358:	50                   	push   %eax
f0104359:	ff 75 08             	pushl  0x8(%ebp)
f010435c:	e8 0a fb ff ff       	call   f0103e6b <get_page_table>
f0104361:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table == 0)
f0104364:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104367:	85 c0                	test   %eax,%eax
f0104369:	75 03                	jne    f010436e <calculate_required_frames+0x47>
		{
			(number_of_tables)++;
f010436b:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 number_of_tables = 0;

	long i = 0;
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f010436e:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0104375:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104378:	8b 45 10             	mov    0x10(%ebp),%eax
f010437b:	01 d0                	add    %edx,%eax
f010437d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104380:	77 cc                	ja     f010434e <calculate_required_frames+0x27>
			(number_of_tables)++;
		}
	}

	//calc the required page frames
	uint32 number_of_pages = 0;
f0104382:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);
f0104389:	8b 45 0c             	mov    0xc(%ebp),%eax
f010438c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010438f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0104392:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104397:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f010439a:	eb 24                	jmp    f01043c0 <calculate_required_frames+0x99>
	{
		uint32 *ptr_page_table;
		if (get_frame_info(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table) == 0)
f010439c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010439f:	83 ec 04             	sub    $0x4,%esp
f01043a2:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01043a5:	52                   	push   %edx
f01043a6:	50                   	push   %eax
f01043a7:	ff 75 08             	pushl  0x8(%ebp)
f01043aa:	e8 52 fd ff ff       	call   f0104101 <get_frame_info>
f01043af:	83 c4 10             	add    $0x10,%esp
f01043b2:	85 c0                	test   %eax,%eax
f01043b4:	75 03                	jne    f01043b9 <calculate_required_frames+0x92>
		{
			(number_of_pages)++;
f01043b6:	ff 45 ec             	incl   -0x14(%ebp)

	//calc the required page frames
	uint32 number_of_pages = 0;
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f01043b9:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01043c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043c3:	8b 45 10             	mov    0x10(%ebp),%eax
f01043c6:	01 d0                	add    %edx,%eax
f01043c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01043cb:	77 cf                	ja     f010439c <calculate_required_frames+0x75>
		}
	}

	//return total number of frames
	LOG_STATMENT(cprintf("calculate_required_frames: Done!"));
	return number_of_tables+number_of_pages;
f01043cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043d3:	01 d0                	add    %edx,%eax
}
f01043d5:	c9                   	leave  
f01043d6:	c3                   	ret    

f01043d7 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f01043d7:	55                   	push   %ebp
f01043d8:	89 e5                	mov    %esp,%ebp
f01043da:	57                   	push   %edi
f01043db:	56                   	push   %esi
f01043dc:	53                   	push   %ebx
f01043dd:	83 ec 20             	sub    $0x20,%esp
	}
	cprintf("finished loop detction\n");
	 */
	//calculate the free frames from the free frame list
	struct Frame_Info *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f01043e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f01043e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f01043ee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)


	LIST_FOREACH(ptr, &free_frame_list)
f01043f5:	a1 54 da 3c f0       	mov    0xf03cda54,%eax
f01043fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01043fd:	eb 1a                	jmp    f0104419 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f01043ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104402:	8a 40 14             	mov    0x14(%eax),%al
f0104405:	84 c0                	test   %al,%al
f0104407:	74 05                	je     f010440e <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0104409:	ff 45 e8             	incl   -0x18(%ebp)
f010440c:	eb 03                	jmp    f0104411 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f010440e:	ff 45 ec             	incl   -0x14(%ebp)
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;


	LIST_FOREACH(ptr, &free_frame_list)
f0104411:	a1 5c da 3c f0       	mov    0xf03cda5c,%eax
f0104416:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104419:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010441d:	74 07                	je     f0104426 <calculate_available_frames+0x4f>
f010441f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104422:	8b 00                	mov    (%eax),%eax
f0104424:	eb 05                	jmp    f010442b <calculate_available_frames+0x54>
f0104426:	b8 00 00 00 00       	mov    $0x0,%eax
f010442b:	a3 5c da 3c f0       	mov    %eax,0xf03cda5c
f0104430:	a1 5c da 3c f0       	mov    0xf03cda5c,%eax
f0104435:	85 c0                	test   %eax,%eax
f0104437:	75 c6                	jne    f01043ff <calculate_available_frames+0x28>
f0104439:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010443d:	75 c0                	jne    f01043ff <calculate_available_frames+0x28>
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f010443f:	a1 40 da 3c f0       	mov    0xf03cda40,%eax
f0104444:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104447:	eb 0b                	jmp    f0104454 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0104449:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f010444c:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f0104451:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104454:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104458:	74 07                	je     f0104461 <calculate_available_frames+0x8a>
f010445a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010445d:	8b 00                	mov    (%eax),%eax
f010445f:	eb 05                	jmp    f0104466 <calculate_available_frames+0x8f>
f0104461:	b8 00 00 00 00       	mov    $0x0,%eax
f0104466:	a3 48 da 3c f0       	mov    %eax,0xf03cda48
f010446b:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f0104470:	85 c0                	test   %eax,%eax
f0104472:	75 d5                	jne    f0104449 <calculate_available_frames+0x72>
f0104474:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104478:	75 cf                	jne    f0104449 <calculate_available_frames+0x72>
		totalModified++ ;
	}


	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010447a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010447d:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0104480:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104483:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0104486:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104489:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f010448c:	8b 45 08             	mov    0x8(%ebp),%eax
f010448f:	89 c3                	mov    %eax,%ebx
f0104491:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0104494:	ba 03 00 00 00       	mov    $0x3,%edx
f0104499:	89 df                	mov    %ebx,%edi
f010449b:	89 c6                	mov    %eax,%esi
f010449d:	89 d1                	mov    %edx,%ecx
f010449f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f01044a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a4:	83 c4 20             	add    $0x20,%esp
f01044a7:	5b                   	pop    %ebx
f01044a8:	5e                   	pop    %esi
f01044a9:	5f                   	pop    %edi
f01044aa:	5d                   	pop    %ebp
f01044ab:	c2 04 00             	ret    $0x4

f01044ae <calculate_free_frames>:

//2018
// calculate_free_frames:
uint32 calculate_free_frames()
{
f01044ae:	55                   	push   %ebp
f01044af:	89 e5                	mov    %esp,%ebp
	return LIST_SIZE(&free_frame_list);
f01044b1:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
}
f01044b6:	5d                   	pop    %ebp
f01044b7:	c3                   	ret    

f01044b8 <env_page_ws_get_time_stamp>:
/// Dealing with environment working set



inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01044b8:	55                   	push   %ebp
f01044b9:	89 e5                	mov    %esp,%ebp
f01044bb:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01044be:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c1:	8b 40 74             	mov    0x74(%eax),%eax
f01044c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01044c7:	77 19                	ja     f01044e2 <env_page_ws_get_time_stamp+0x2a>
f01044c9:	68 64 e7 11 f0       	push   $0xf011e764
f01044ce:	68 9c e7 11 f0       	push   $0xf011e79c
f01044d3:	68 a1 03 00 00       	push   $0x3a1
f01044d8:	68 21 e6 11 f0       	push   $0xf011e621
f01044dd:	e8 b1 bc ff ff       	call   f0100193 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01044e2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01044e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044e8:	89 d0                	mov    %edx,%eax
f01044ea:	c1 e0 02             	shl    $0x2,%eax
f01044ed:	01 d0                	add    %edx,%eax
f01044ef:	c1 e0 02             	shl    $0x2,%eax
f01044f2:	01 c8                	add    %ecx,%eax
f01044f4:	83 e8 80             	sub    $0xffffff80,%eax
f01044f7:	8b 00                	mov    (%eax),%eax
}
f01044f9:	c9                   	leave  
f01044fa:	c3                   	ret    

f01044fb <env_page_ws_set_time_stamp>:
inline void env_page_ws_set_time_stamp(struct Env* e, uint32 entry_index)
{
f01044fb:	55                   	push   %ebp
f01044fc:	89 e5                	mov    %esp,%ebp
f01044fe:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0104501:	8b 45 08             	mov    0x8(%ebp),%eax
f0104504:	8b 40 74             	mov    0x74(%eax),%eax
f0104507:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010450a:	77 19                	ja     f0104525 <env_page_ws_set_time_stamp+0x2a>
f010450c:	68 64 e7 11 f0       	push   $0xf011e764
f0104511:	68 9c e7 11 f0       	push   $0xf011e79c
f0104516:	68 a6 03 00 00       	push   $0x3a6
f010451b:	68 21 e6 11 f0       	push   $0xf011e621
f0104520:	e8 6e bc ff ff       	call   f0100193 <_panic>
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0104525:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104528:	8b 55 0c             	mov    0xc(%ebp),%edx
f010452b:	89 d0                	mov    %edx,%eax
f010452d:	c1 e0 02             	shl    $0x2,%eax
f0104530:	01 d0                	add    %edx,%eax
f0104532:	c1 e0 02             	shl    $0x2,%eax
f0104535:	01 c8                	add    %ecx,%eax
f0104537:	83 e8 80             	sub    $0xffffff80,%eax
f010453a:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
}
f0104540:	90                   	nop
f0104541:	c9                   	leave  
f0104542:	c3                   	ret    

f0104543 <env_page_ws_print>:


void env_page_ws_print(struct Env *curenv)
{
f0104543:	55                   	push   %ebp
f0104544:	89 e5                	mov    %esp,%ebp
f0104546:	83 ec 28             	sub    $0x28,%esp
	uint32 i;
	cprintf("PAGE WS:\n");
f0104549:	83 ec 0c             	sub    $0xc,%esp
f010454c:	68 b1 e7 11 f0       	push   $0xf011e7b1
f0104551:	e8 e0 2e 00 00       	call   f0107436 <cprintf>
f0104556:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f0104559:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104560:	e9 76 01 00 00       	jmp    f01046db <env_page_ws_print+0x198>
	{
		if (curenv->ptr_pageWorkingSet[i].empty)
f0104565:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104568:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010456b:	89 d0                	mov    %edx,%eax
f010456d:	c1 e0 02             	shl    $0x2,%eax
f0104570:	01 d0                	add    %edx,%eax
f0104572:	c1 e0 02             	shl    $0x2,%eax
f0104575:	01 c8                	add    %ecx,%eax
f0104577:	83 c0 7c             	add    $0x7c,%eax
f010457a:	8a 00                	mov    (%eax),%al
f010457c:	84 c0                	test   %al,%al
f010457e:	74 43                	je     f01045c3 <env_page_ws_print+0x80>
		{
			cprintf("EMPTY LOCATION");
f0104580:	83 ec 0c             	sub    $0xc,%esp
f0104583:	68 bb e7 11 f0       	push   $0xf011e7bb
f0104588:	e8 a9 2e 00 00       	call   f0107436 <cprintf>
f010458d:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->page_last_WS_index )
f0104590:	8b 45 08             	mov    0x8(%ebp),%eax
f0104593:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0104599:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010459c:	75 10                	jne    f01045ae <env_page_ws_print+0x6b>
			{
				cprintf("		<--");
f010459e:	83 ec 0c             	sub    $0xc,%esp
f01045a1:	68 ca e7 11 f0       	push   $0xf011e7ca
f01045a6:	e8 8b 2e 00 00       	call   f0107436 <cprintf>
f01045ab:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f01045ae:	83 ec 0c             	sub    $0xc,%esp
f01045b1:	68 d0 e7 11 f0       	push   $0xf011e7d0
f01045b6:	e8 7b 2e 00 00       	call   f0107436 <cprintf>
f01045bb:	83 c4 10             	add    $0x10,%esp
f01045be:	e9 15 01 00 00       	jmp    f01046d8 <env_page_ws_print+0x195>
			continue;
		}
		uint32 virtual_address = curenv->ptr_pageWorkingSet[i].virtual_address;
f01045c3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01045c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045c9:	89 d0                	mov    %edx,%eax
f01045cb:	c1 e0 02             	shl    $0x2,%eax
f01045ce:	01 d0                	add    %edx,%eax
f01045d0:	c1 e0 02             	shl    $0x2,%eax
f01045d3:	01 c8                	add    %ecx,%eax
f01045d5:	83 c0 78             	add    $0x78,%eax
f01045d8:	8b 00                	mov    (%eax),%eax
f01045da:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 time_stamp = curenv->ptr_pageWorkingSet[i].time_stamp;
f01045dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01045e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045e3:	89 d0                	mov    %edx,%eax
f01045e5:	c1 e0 02             	shl    $0x2,%eax
f01045e8:	01 d0                	add    %edx,%eax
f01045ea:	c1 e0 02             	shl    $0x2,%eax
f01045ed:	01 c8                	add    %ecx,%eax
f01045ef:	83 e8 80             	sub    $0xffffff80,%eax
f01045f2:	8b 00                	mov    (%eax),%eax
f01045f4:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 *ptr_table = NULL;
f01045f7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		get_page_table(curenv->env_page_directory,(void*) virtual_address, &ptr_table);
f01045fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104601:	8b 45 08             	mov    0x8(%ebp),%eax
f0104604:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104607:	83 ec 04             	sub    $0x4,%esp
f010460a:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f010460d:	51                   	push   %ecx
f010460e:	52                   	push   %edx
f010460f:	50                   	push   %eax
f0104610:	e8 56 f8 ff ff       	call   f0103e6b <get_page_table>
f0104615:	83 c4 10             	add    $0x10,%esp
		uint32 perm = ptr_table[PTX(virtual_address)];
f0104618:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010461b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010461e:	c1 ea 0c             	shr    $0xc,%edx
f0104621:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104627:	c1 e2 02             	shl    $0x2,%edx
f010462a:	01 d0                	add    %edx,%eax
f010462c:	8b 00                	mov    (%eax),%eax
f010462e:	89 45 e8             	mov    %eax,-0x18(%ebp)

		char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0104631:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104634:	83 e0 40             	and    $0x40,%eax
f0104637:	85 c0                	test   %eax,%eax
f0104639:	0f 95 c0             	setne  %al
f010463c:	88 45 e7             	mov    %al,-0x19(%ebp)
		char isUsed= ((perm&PERM_USED) ? 1 : 0);
f010463f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104642:	83 e0 20             	and    $0x20,%eax
f0104645:	85 c0                	test   %eax,%eax
f0104647:	0f 95 c0             	setne  %al
f010464a:	88 45 e6             	mov    %al,-0x1a(%ebp)
		char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f010464d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104650:	25 00 02 00 00       	and    $0x200,%eax
f0104655:	85 c0                	test   %eax,%eax
f0104657:	0f 95 c0             	setne  %al
f010465a:	88 45 e5             	mov    %al,-0x1b(%ebp)


		cprintf("address @ %d = %x",i, curenv->ptr_pageWorkingSet[i].virtual_address);
f010465d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104660:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104663:	89 d0                	mov    %edx,%eax
f0104665:	c1 e0 02             	shl    $0x2,%eax
f0104668:	01 d0                	add    %edx,%eax
f010466a:	c1 e0 02             	shl    $0x2,%eax
f010466d:	01 c8                	add    %ecx,%eax
f010466f:	83 c0 78             	add    $0x78,%eax
f0104672:	8b 00                	mov    (%eax),%eax
f0104674:	83 ec 04             	sub    $0x4,%esp
f0104677:	50                   	push   %eax
f0104678:	ff 75 f4             	pushl  -0xc(%ebp)
f010467b:	68 d2 e7 11 f0       	push   $0xf011e7d2
f0104680:	e8 b1 2d 00 00       	call   f0107436 <cprintf>
f0104685:	83 c4 10             	add    $0x10,%esp

		cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x", isUsed, isModified, isBuffered, time_stamp) ;
f0104688:	0f be 4d e5          	movsbl -0x1b(%ebp),%ecx
f010468c:	0f be 55 e7          	movsbl -0x19(%ebp),%edx
f0104690:	0f be 45 e6          	movsbl -0x1a(%ebp),%eax
f0104694:	83 ec 0c             	sub    $0xc,%esp
f0104697:	ff 75 ec             	pushl  -0x14(%ebp)
f010469a:	51                   	push   %ecx
f010469b:	52                   	push   %edx
f010469c:	50                   	push   %eax
f010469d:	68 e4 e7 11 f0       	push   $0xf011e7e4
f01046a2:	e8 8f 2d 00 00       	call   f0107436 <cprintf>
f01046a7:	83 c4 20             	add    $0x20,%esp

		if(i==curenv->page_last_WS_index )
f01046aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01046ad:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01046b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01046b6:	75 10                	jne    f01046c8 <env_page_ws_print+0x185>
		{
			cprintf(" <--");
f01046b8:	83 ec 0c             	sub    $0xc,%esp
f01046bb:	68 1b e8 11 f0       	push   $0xf011e81b
f01046c0:	e8 71 2d 00 00       	call   f0107436 <cprintf>
f01046c5:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01046c8:	83 ec 0c             	sub    $0xc,%esp
f01046cb:	68 d0 e7 11 f0       	push   $0xf011e7d0
f01046d0:	e8 61 2d 00 00       	call   f0107436 <cprintf>
f01046d5:	83 c4 10             	add    $0x10,%esp

void env_page_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("PAGE WS:\n");
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f01046d8:	ff 45 f4             	incl   -0xc(%ebp)
f01046db:	8b 45 08             	mov    0x8(%ebp),%eax
f01046de:	8b 40 74             	mov    0x74(%eax),%eax
f01046e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01046e4:	0f 87 7b fe ff ff    	ja     f0104565 <env_page_ws_print+0x22>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01046ea:	90                   	nop
f01046eb:	c9                   	leave  
f01046ec:	c3                   	ret    

f01046ed <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *curenv)
{
f01046ed:	55                   	push   %ebp
f01046ee:	89 e5                	mov    %esp,%ebp
f01046f0:	83 ec 18             	sub    $0x18,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01046f3:	83 ec 0c             	sub    $0xc,%esp
f01046f6:	68 20 e8 11 f0       	push   $0xf011e820
f01046fb:	e8 36 2d 00 00       	call   f0107436 <cprintf>
f0104700:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0104703:	83 ec 0c             	sub    $0xc,%esp
f0104706:	68 55 e8 11 f0       	push   $0xf011e855
f010470b:	e8 26 2d 00 00       	call   f0107436 <cprintf>
f0104710:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0104713:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010471a:	e9 fc 00 00 00       	jmp    f010481b <env_table_ws_print+0x12e>
	{
		if (curenv->__ptr_tws[i].empty)
f010471f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104722:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104725:	89 d0                	mov    %edx,%eax
f0104727:	c1 e0 02             	shl    $0x2,%eax
f010472a:	01 d0                	add    %edx,%eax
f010472c:	c1 e0 02             	shl    $0x2,%eax
f010472f:	01 c8                	add    %ecx,%eax
f0104731:	05 9c 4e 00 00       	add    $0x4e9c,%eax
f0104736:	8a 00                	mov    (%eax),%al
f0104738:	84 c0                	test   %al,%al
f010473a:	74 43                	je     f010477f <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f010473c:	83 ec 0c             	sub    $0xc,%esp
f010473f:	68 bb e7 11 f0       	push   $0xf011e7bb
f0104744:	e8 ed 2c 00 00       	call   f0107436 <cprintf>
f0104749:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->table_last_WS_index )
f010474c:	8b 45 08             	mov    0x8(%ebp),%eax
f010474f:	8b 80 84 52 00 00    	mov    0x5284(%eax),%eax
f0104755:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104758:	75 10                	jne    f010476a <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f010475a:	83 ec 0c             	sub    $0xc,%esp
f010475d:	68 ca e7 11 f0       	push   $0xf011e7ca
f0104762:	e8 cf 2c 00 00       	call   f0107436 <cprintf>
f0104767:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010476a:	83 ec 0c             	sub    $0xc,%esp
f010476d:	68 d0 e7 11 f0       	push   $0xf011e7d0
f0104772:	e8 bf 2c 00 00       	call   f0107436 <cprintf>
f0104777:	83 c4 10             	add    $0x10,%esp
			continue;
f010477a:	e9 99 00 00 00       	jmp    f0104818 <env_table_ws_print+0x12b>
		}
		uint32 virtual_address = curenv->__ptr_tws[i].virtual_address;
f010477f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104785:	89 d0                	mov    %edx,%eax
f0104787:	c1 e0 02             	shl    $0x2,%eax
f010478a:	01 d0                	add    %edx,%eax
f010478c:	c1 e0 02             	shl    $0x2,%eax
f010478f:	01 c8                	add    %ecx,%eax
f0104791:	05 98 4e 00 00       	add    $0x4e98,%eax
f0104796:	8b 00                	mov    (%eax),%eax
f0104798:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, curenv->__ptr_tws[i].virtual_address);
f010479b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010479e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047a1:	89 d0                	mov    %edx,%eax
f01047a3:	c1 e0 02             	shl    $0x2,%eax
f01047a6:	01 d0                	add    %edx,%eax
f01047a8:	c1 e0 02             	shl    $0x2,%eax
f01047ab:	01 c8                	add    %ecx,%eax
f01047ad:	05 98 4e 00 00       	add    $0x4e98,%eax
f01047b2:	8b 00                	mov    (%eax),%eax
f01047b4:	83 ec 04             	sub    $0x4,%esp
f01047b7:	50                   	push   %eax
f01047b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01047bb:	68 60 e8 11 f0       	push   $0xf011e860
f01047c0:	e8 71 2c 00 00       	call   f0107436 <cprintf>
f01047c5:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d", pd_is_table_used(curenv, virtual_address));
f01047c8:	83 ec 08             	sub    $0x8,%esp
f01047cb:	ff 75 f0             	pushl  -0x10(%ebp)
f01047ce:	ff 75 08             	pushl  0x8(%ebp)
f01047d1:	e8 e2 00 00 00       	call   f01048b8 <pd_is_table_used>
f01047d6:	83 c4 10             	add    $0x10,%esp
f01047d9:	83 ec 08             	sub    $0x8,%esp
f01047dc:	50                   	push   %eax
f01047dd:	68 77 e8 11 f0       	push   $0xf011e877
f01047e2:	e8 4f 2c 00 00       	call   f0107436 <cprintf>
f01047e7:	83 c4 10             	add    $0x10,%esp
		if(i==curenv->table_last_WS_index )
f01047ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01047ed:	8b 80 84 52 00 00    	mov    0x5284(%eax),%eax
f01047f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01047f6:	75 10                	jne    f0104808 <env_table_ws_print+0x11b>
		{
			cprintf(" <--");
f01047f8:	83 ec 0c             	sub    $0xc,%esp
f01047fb:	68 1b e8 11 f0       	push   $0xf011e81b
f0104800:	e8 31 2c 00 00       	call   f0107436 <cprintf>
f0104805:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0104808:	83 ec 0c             	sub    $0xc,%esp
f010480b:	68 d0 e7 11 f0       	push   $0xf011e7d0
f0104810:	e8 21 2c 00 00       	call   f0107436 <cprintf>
f0104815:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0104818:	ff 45 f4             	incl   -0xc(%ebp)
f010481b:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010481f:	0f 86 fa fe ff ff    	jbe    f010471f <env_table_ws_print+0x32>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0104825:	90                   	nop
f0104826:	c9                   	leave  
f0104827:	c3                   	ret    

f0104828 <addTableToTableWorkingSet>:


void addTableToTableWorkingSet(struct Env *e, uint32 tableAddress)
{
f0104828:	55                   	push   %ebp
f0104829:	89 e5                	mov    %esp,%ebp
f010482b:	83 ec 10             	sub    $0x10,%esp
	tableAddress = ROUNDDOWN(tableAddress, PAGE_SIZE*1024);
f010482e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104831:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104834:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104837:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010483c:	89 45 0c             	mov    %eax,0xc(%ebp)
	e->__ptr_tws[e->table_last_WS_index].virtual_address = tableAddress;
f010483f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104842:	8b 90 84 52 00 00    	mov    0x5284(%eax),%edx
f0104848:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010484b:	89 d0                	mov    %edx,%eax
f010484d:	c1 e0 02             	shl    $0x2,%eax
f0104850:	01 d0                	add    %edx,%eax
f0104852:	c1 e0 02             	shl    $0x2,%eax
f0104855:	01 c8                	add    %ecx,%eax
f0104857:	8d 90 98 4e 00 00    	lea    0x4e98(%eax),%edx
f010485d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104860:	89 02                	mov    %eax,(%edx)
	e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0104862:	8b 45 08             	mov    0x8(%ebp),%eax
f0104865:	8b 90 84 52 00 00    	mov    0x5284(%eax),%edx
f010486b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010486e:	89 d0                	mov    %edx,%eax
f0104870:	c1 e0 02             	shl    $0x2,%eax
f0104873:	01 d0                	add    %edx,%eax
f0104875:	c1 e0 02             	shl    $0x2,%eax
f0104878:	01 c8                	add    %ecx,%eax
f010487a:	05 9c 4e 00 00       	add    $0x4e9c,%eax
f010487f:	c6 00 00             	movb   $0x0,(%eax)

	e->table_last_WS_index ++;
f0104882:	8b 45 08             	mov    0x8(%ebp),%eax
f0104885:	8b 80 84 52 00 00    	mov    0x5284(%eax),%eax
f010488b:	8d 50 01             	lea    0x1(%eax),%edx
f010488e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104891:	89 90 84 52 00 00    	mov    %edx,0x5284(%eax)
	e->table_last_WS_index %= __TWS_MAX_SIZE;
f0104897:	8b 45 08             	mov    0x8(%ebp),%eax
f010489a:	8b 80 84 52 00 00    	mov    0x5284(%eax),%eax
f01048a0:	b9 32 00 00 00       	mov    $0x32,%ecx
f01048a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01048aa:	f7 f1                	div    %ecx
f01048ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01048af:	89 90 84 52 00 00    	mov    %edx,0x5284(%eax)
}
f01048b5:	90                   	nop
f01048b6:	c9                   	leave  
f01048b7:	c3                   	ret    

f01048b8 <pd_is_table_used>:

///============================================================================================
/// Dealing with page and page table entry flags

inline uint32 pd_is_table_used(struct Env* ptr_env, uint32 virtual_address)
{
f01048b8:	55                   	push   %ebp
f01048b9:	89 e5                	mov    %esp,%ebp
	return ( (ptr_env->env_page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01048bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01048be:	8b 40 5c             	mov    0x5c(%eax),%eax
f01048c1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01048c4:	c1 ea 16             	shr    $0x16,%edx
f01048c7:	c1 e2 02             	shl    $0x2,%edx
f01048ca:	01 d0                	add    %edx,%eax
f01048cc:	8b 00                	mov    (%eax),%eax
f01048ce:	83 e0 20             	and    $0x20,%eax
f01048d1:	85 c0                	test   %eax,%eax
f01048d3:	0f 95 c0             	setne  %al
f01048d6:	0f b6 c0             	movzbl %al,%eax
}
f01048d9:	5d                   	pop    %ebp
f01048da:	c3                   	ret    

f01048db <pd_set_table_unused>:

inline void pd_set_table_unused(struct Env* ptr_env, uint32 virtual_address)
{
f01048db:	55                   	push   %ebp
f01048dc:	89 e5                	mov    %esp,%ebp
f01048de:	83 ec 08             	sub    $0x8,%esp
	ptr_env->env_page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01048e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01048e7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01048ea:	c1 ea 16             	shr    $0x16,%edx
f01048ed:	c1 e2 02             	shl    $0x2,%edx
f01048f0:	01 c2                	add    %eax,%edx
f01048f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01048f5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01048f8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01048fb:	c1 e9 16             	shr    $0x16,%ecx
f01048fe:	c1 e1 02             	shl    $0x2,%ecx
f0104901:	01 c8                	add    %ecx,%eax
f0104903:	8b 00                	mov    (%eax),%eax
f0104905:	83 e0 df             	and    $0xffffffdf,%eax
f0104908:	89 02                	mov    %eax,(%edx)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f010490a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010490d:	83 ec 08             	sub    $0x8,%esp
f0104910:	50                   	push   %eax
f0104911:	6a 00                	push   $0x0
f0104913:	e8 49 e9 ff ff       	call   f0103261 <tlb_invalidate>
f0104918:	83 c4 10             	add    $0x10,%esp
}
f010491b:	90                   	nop
f010491c:	c9                   	leave  
f010491d:	c3                   	ret    

f010491e <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(struct Env* ptr_env, uint32 virtual_address)
{
f010491e:	55                   	push   %ebp
f010491f:	89 e5                	mov    %esp,%ebp
f0104921:	83 ec 10             	sub    $0x10,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104924:	8b 45 08             	mov    0x8(%ebp),%eax
f0104927:	8b 40 5c             	mov    0x5c(%eax),%eax
f010492a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	ptr_pgdir[PDX(virtual_address)] = 0 ;
f010492d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104930:	c1 e8 16             	shr    $0x16,%eax
f0104933:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010493a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010493d:	01 d0                	add    %edx,%eax
f010493f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104945:	0f 20 d8             	mov    %cr3,%eax
f0104948:	89 45 f8             	mov    %eax,-0x8(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010494b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010494e:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0104951:	90                   	nop
f0104952:	c9                   	leave  
f0104953:	c3                   	ret    

f0104954 <pt_clear_page_table_entry>:

extern int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);
extern int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);

inline void pt_clear_page_table_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104954:	55                   	push   %ebp
f0104955:	89 e5                	mov    %esp,%ebp
f0104957:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f010495a:	8b 45 08             	mov    0x8(%ebp),%eax
f010495d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104960:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104963:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104966:	c1 e8 16             	shr    $0x16,%eax
f0104969:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104970:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104973:	01 d0                	add    %edx,%eax
f0104975:	8b 00                	mov    (%eax),%eax
f0104977:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010497a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010497d:	83 e0 01             	and    $0x1,%eax
f0104980:	85 c0                	test   %eax,%eax
f0104982:	74 62                	je     f01049e6 <pt_clear_page_table_entry+0x92>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104984:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104987:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010498c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010498f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104992:	c1 e8 0c             	shr    $0xc,%eax
f0104995:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104998:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010499d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01049a0:	72 17                	jb     f01049b9 <pt_clear_page_table_entry+0x65>
f01049a2:	ff 75 ec             	pushl  -0x14(%ebp)
f01049a5:	68 48 e6 11 f0       	push   $0xf011e648
f01049aa:	68 2d 04 00 00       	push   $0x42d
f01049af:	68 21 e6 11 f0       	push   $0xf011e621
f01049b4:	e8 da b7 ff ff       	call   f0100193 <_panic>
f01049b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01049bc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01049c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}

		ptr_page_table[PTX(virtual_address)] = 0 ;
f01049c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01049c7:	c1 e8 0c             	shr    $0xc,%eax
f01049ca:	25 ff 03 00 00       	and    $0x3ff,%eax
f01049cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01049d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01049d9:	01 d0                	add    %edx,%eax
f01049db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01049e1:	e9 92 00 00 00       	jmp    f0104a78 <pt_clear_page_table_entry+0x124>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01049e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049ea:	74 75                	je     f0104a61 <pt_clear_page_table_entry+0x10d>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory

		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f01049ec:	a1 74 da 3c f0       	mov    0xf03cda74,%eax
f01049f1:	83 ec 04             	sub    $0x4,%esp
f01049f4:	50                   	push   %eax
f01049f5:	ff 75 0c             	pushl  0xc(%ebp)
f01049f8:	ff 75 08             	pushl  0x8(%ebp)
f01049fb:	e8 5b 98 00 00       	call   f010e25b <__pf_read_env_table>
f0104a00:	83 c4 10             	add    $0x10,%esp
f0104a03:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104a06:	a1 74 da 3c f0       	mov    0xf03cda74,%eax
f0104a0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104a0e:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104a12:	75 17                	jne    f0104a2b <pt_clear_page_table_entry+0xd7>
			panic("pt_clear_page_table_entry: table not found in PF when expected to find one !. please revise your table fault\
f0104a14:	83 ec 04             	sub    $0x4,%esp
f0104a17:	68 88 e8 11 f0       	push   $0xf011e888
f0104a1c:	68 3b 04 00 00       	push   $0x43b
f0104a21:	68 21 e6 11 f0       	push   $0xf011e621
f0104a26:	e8 68 b7 ff ff       	call   f0100193 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104a2b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a2e:	c1 e8 0c             	shr    $0xc,%eax
f0104a31:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104a36:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104a3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104a40:	01 d0                	add    %edx,%eax
f0104a42:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104a48:	a1 74 da 3c f0       	mov    0xf03cda74,%eax
f0104a4d:	83 ec 04             	sub    $0x4,%esp
f0104a50:	50                   	push   %eax
f0104a51:	ff 75 0c             	pushl  0xc(%ebp)
f0104a54:	ff 75 08             	pushl  0x8(%ebp)
f0104a57:	e8 5a 97 00 00       	call   f010e1b6 <__pf_write_env_table>
f0104a5c:	83 c4 10             	add    $0x10,%esp
f0104a5f:	eb 17                	jmp    f0104a78 <pt_clear_page_table_entry+0x124>
	}
	else
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0104a61:	83 ec 04             	sub    $0x4,%esp
f0104a64:	68 08 e9 11 f0       	push   $0xf011e908
f0104a69:	68 42 04 00 00       	push   $0x442
f0104a6e:	68 21 e6 11 f0       	push   $0xf011e621
f0104a73:	e8 1b b7 ff ff       	call   f0100193 <_panic>


	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104a78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104a7b:	83 ec 08             	sub    $0x8,%esp
f0104a7e:	50                   	push   %eax
f0104a7f:	6a 00                	push   $0x0
f0104a81:	e8 db e7 ff ff       	call   f0103261 <tlb_invalidate>
f0104a86:	83 c4 10             	add    $0x10,%esp
}
f0104a89:	90                   	nop
f0104a8a:	c9                   	leave  
f0104a8b:	c3                   	ret    

f0104a8c <create_frames_storage>:
//=============================================================
// 2014 - edited in 2017
//=============================================================
// [1] if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0104a8c:	55                   	push   %ebp
f0104a8d:	89 e5                	mov    %esp,%ebp
f0104a8f:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = (void *)kmalloc(PAGE_SIZE);
f0104a92:	83 ec 0c             	sub    $0xc,%esp
f0104a95:	68 00 10 00 00       	push   $0x1000
f0104a9a:	e8 86 9f 00 00       	call   f010ea25 <kmalloc>
f0104a9f:	83 c4 10             	add    $0x10,%esp
f0104aa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0104aa5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104aa9:	75 17                	jne    f0104ac2 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0104aab:	83 ec 04             	sub    $0x4,%esp
f0104aae:	68 7e e9 11 f0       	push   $0xf011e97e
f0104ab3:	68 52 04 00 00       	push   $0x452
f0104ab8:	68 21 e6 11 f0       	push   $0xf011e621
f0104abd:	e8 d1 b6 ff ff       	call   f0100193 <_panic>
	}
	return frames_storage;
f0104ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104ac5:	c9                   	leave  
f0104ac6:	c3                   	ret    

f0104ac7 <add_frame_to_storage>:
// [2] Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct Frame_Info* ptr_frame_info, uint32 index)
{
f0104ac7:	55                   	push   %ebp
f0104ac8:	89 e5                	mov    %esp,%ebp
f0104aca:	53                   	push   %ebx
f0104acb:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0104ace:	8b 45 10             	mov    0x10(%ebp),%eax
f0104ad1:	c1 e0 0c             	shl    $0xc,%eax
f0104ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage, (void*) va, &ptr_page_table);
f0104ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ada:	83 ec 04             	sub    $0x4,%esp
f0104add:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0104ae0:	52                   	push   %edx
f0104ae1:	50                   	push   %eax
f0104ae2:	ff 75 08             	pushl  0x8(%ebp)
f0104ae5:	e8 81 f3 ff ff       	call   f0103e6b <get_page_table>
f0104aea:	83 c4 10             	add    $0x10,%esp
f0104aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0104af0:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0104af4:	75 15                	jne    f0104b0b <add_frame_to_storage+0x44>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0104af6:	83 ec 04             	sub    $0x4,%esp
f0104af9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0104afc:	50                   	push   %eax
f0104afd:	ff 75 f4             	pushl  -0xc(%ebp)
f0104b00:	ff 75 08             	pushl  0x8(%ebp)
f0104b03:	e8 86 f4 ff ff       	call   f0103f8e <__static_cpt>
f0104b08:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0104b0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104b0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b11:	c1 ea 0c             	shr    $0xc,%edx
f0104b14:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104b1a:	c1 e2 02             	shl    $0x2,%edx
f0104b1d:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0104b20:	83 ec 0c             	sub    $0xc,%esp
f0104b23:	ff 75 0c             	pushl  0xc(%ebp)
f0104b26:	e8 cc e9 ff ff       	call   f01034f7 <to_physical_address>
f0104b2b:	83 c4 10             	add    $0x10,%esp
f0104b2e:	83 c8 01             	or     $0x1,%eax
f0104b31:	89 03                	mov    %eax,(%ebx)
}
f0104b33:	90                   	nop
f0104b34:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104b37:	c9                   	leave  
f0104b38:	c3                   	ret    

f0104b39 <get_frame_from_storage>:

// [3] Get a frame info from the storage of frames at the given index
inline struct Frame_Info* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0104b39:	55                   	push   %ebp
f0104b3a:	89 e5                	mov    %esp,%ebp
f0104b3c:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0104b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b42:	c1 e0 0c             	shl    $0xc,%eax
f0104b45:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage, (void*) va, &ptr_page_table);
f0104b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b4b:	83 ec 04             	sub    $0x4,%esp
f0104b4e:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0104b51:	52                   	push   %edx
f0104b52:	50                   	push   %eax
f0104b53:	ff 75 08             	pushl  0x8(%ebp)
f0104b56:	e8 a6 f5 ff ff       	call   f0104101 <get_frame_info>
f0104b5b:	83 c4 10             	add    $0x10,%esp
f0104b5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0104b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104b64:	c9                   	leave  
f0104b65:	c3                   	ret    

f0104b66 <clear_frames_storage>:

// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
f0104b66:	55                   	push   %ebp
f0104b67:	89 e5                	mov    %esp,%ebp
f0104b69:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0104b6c:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0104b73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104b7a:	eb 5b                	jmp    f0104bd7 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0104b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b7f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104b86:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b89:	01 d0                	add    %edx,%eax
f0104b8b:	8b 00                	mov    (%eax),%eax
f0104b8d:	85 c0                	test   %eax,%eax
f0104b8f:	74 43                	je     f0104bd4 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0104b91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b94:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104b9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b9e:	01 d0                	add    %edx,%eax
f0104ba0:	8b 00                	mov    (%eax),%eax
f0104ba2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104ba7:	83 ec 0c             	sub    $0xc,%esp
f0104baa:	50                   	push   %eax
f0104bab:	e8 5a e9 ff ff       	call   f010350a <to_frame_info>
f0104bb0:	83 c4 10             	add    $0x10,%esp
f0104bb3:	83 ec 0c             	sub    $0xc,%esp
f0104bb6:	50                   	push   %eax
f0104bb7:	e8 22 f2 ff ff       	call   f0103dde <free_frame>
f0104bbc:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0104bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bc2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104bc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcc:	01 d0                	add    %edx,%eax
f0104bce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0104bd4:	ff 45 f4             	incl   -0xc(%ebp)
f0104bd7:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0104bde:	7e 9c                	jle    f0104b7c <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0104be0:	90                   	nop
f0104be1:	c9                   	leave  
f0104be2:	c3                   	ret    

f0104be3 <setUHeapPlacementStrategyFIRSTFIT>:
//********************************************************************************//
/*2015*/
void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0104be3:	55                   	push   %ebp
f0104be4:	89 e5                	mov    %esp,%ebp
f0104be6:	c7 05 dc f5 3a f0 01 	movl   $0x1,0xf03af5dc
f0104bed:	00 00 00 
f0104bf0:	90                   	nop
f0104bf1:	5d                   	pop    %ebp
f0104bf2:	c3                   	ret    

f0104bf3 <setUHeapPlacementStrategyBESTFIT>:
void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0104bf3:	55                   	push   %ebp
f0104bf4:	89 e5                	mov    %esp,%ebp
f0104bf6:	c7 05 dc f5 3a f0 02 	movl   $0x2,0xf03af5dc
f0104bfd:	00 00 00 
f0104c00:	90                   	nop
f0104c01:	5d                   	pop    %ebp
f0104c02:	c3                   	ret    

f0104c03 <setUHeapPlacementStrategyNEXTFIT>:
void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0104c03:	55                   	push   %ebp
f0104c04:	89 e5                	mov    %esp,%ebp
f0104c06:	c7 05 dc f5 3a f0 03 	movl   $0x3,0xf03af5dc
f0104c0d:	00 00 00 
f0104c10:	90                   	nop
f0104c11:	5d                   	pop    %ebp
f0104c12:	c3                   	ret    

f0104c13 <setUHeapPlacementStrategyWORSTFIT>:
void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0104c13:	55                   	push   %ebp
f0104c14:	89 e5                	mov    %esp,%ebp
f0104c16:	c7 05 dc f5 3a f0 04 	movl   $0x4,0xf03af5dc
f0104c1d:	00 00 00 
f0104c20:	90                   	nop
f0104c21:	5d                   	pop    %ebp
f0104c22:	c3                   	ret    

f0104c23 <isUHeapPlacementStrategyFIRSTFIT>:

uint32 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0104c23:	55                   	push   %ebp
f0104c24:	89 e5                	mov    %esp,%ebp
f0104c26:	a1 dc f5 3a f0       	mov    0xf03af5dc,%eax
f0104c2b:	83 f8 01             	cmp    $0x1,%eax
f0104c2e:	75 07                	jne    f0104c37 <isUHeapPlacementStrategyFIRSTFIT+0x14>
f0104c30:	b8 01 00 00 00       	mov    $0x1,%eax
f0104c35:	eb 05                	jmp    f0104c3c <isUHeapPlacementStrategyFIRSTFIT+0x19>
f0104c37:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c3c:	5d                   	pop    %ebp
f0104c3d:	c3                   	ret    

f0104c3e <isUHeapPlacementStrategyBESTFIT>:
uint32 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0104c3e:	55                   	push   %ebp
f0104c3f:	89 e5                	mov    %esp,%ebp
f0104c41:	a1 dc f5 3a f0       	mov    0xf03af5dc,%eax
f0104c46:	83 f8 02             	cmp    $0x2,%eax
f0104c49:	75 07                	jne    f0104c52 <isUHeapPlacementStrategyBESTFIT+0x14>
f0104c4b:	b8 01 00 00 00       	mov    $0x1,%eax
f0104c50:	eb 05                	jmp    f0104c57 <isUHeapPlacementStrategyBESTFIT+0x19>
f0104c52:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c57:	5d                   	pop    %ebp
f0104c58:	c3                   	ret    

f0104c59 <isUHeapPlacementStrategyNEXTFIT>:
uint32 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0104c59:	55                   	push   %ebp
f0104c5a:	89 e5                	mov    %esp,%ebp
f0104c5c:	a1 dc f5 3a f0       	mov    0xf03af5dc,%eax
f0104c61:	83 f8 03             	cmp    $0x3,%eax
f0104c64:	75 07                	jne    f0104c6d <isUHeapPlacementStrategyNEXTFIT+0x14>
f0104c66:	b8 01 00 00 00       	mov    $0x1,%eax
f0104c6b:	eb 05                	jmp    f0104c72 <isUHeapPlacementStrategyNEXTFIT+0x19>
f0104c6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c72:	5d                   	pop    %ebp
f0104c73:	c3                   	ret    

f0104c74 <isUHeapPlacementStrategyWORSTFIT>:
uint32 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0104c74:	55                   	push   %ebp
f0104c75:	89 e5                	mov    %esp,%ebp
f0104c77:	a1 dc f5 3a f0       	mov    0xf03af5dc,%eax
f0104c7c:	83 f8 04             	cmp    $0x4,%eax
f0104c7f:	75 07                	jne    f0104c88 <isUHeapPlacementStrategyWORSTFIT+0x14>
f0104c81:	b8 01 00 00 00       	mov    $0x1,%eax
f0104c86:	eb 05                	jmp    f0104c8d <isUHeapPlacementStrategyWORSTFIT+0x19>
f0104c88:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c8d:	5d                   	pop    %ebp
f0104c8e:	c3                   	ret    

f0104c8f <setKHeapPlacementStrategyCONTALLOC>:

//********************************************************************************//
/*2017*/
void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0104c8f:	55                   	push   %ebp
f0104c90:	89 e5                	mov    %esp,%ebp
f0104c92:	c7 05 04 f6 3a f0 00 	movl   $0x0,0xf03af604
f0104c99:	00 00 00 
f0104c9c:	90                   	nop
f0104c9d:	5d                   	pop    %ebp
f0104c9e:	c3                   	ret    

f0104c9f <setKHeapPlacementStrategyFIRSTFIT>:
void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0104c9f:	55                   	push   %ebp
f0104ca0:	89 e5                	mov    %esp,%ebp
f0104ca2:	c7 05 04 f6 3a f0 01 	movl   $0x1,0xf03af604
f0104ca9:	00 00 00 
f0104cac:	90                   	nop
f0104cad:	5d                   	pop    %ebp
f0104cae:	c3                   	ret    

f0104caf <setKHeapPlacementStrategyBESTFIT>:
void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0104caf:	55                   	push   %ebp
f0104cb0:	89 e5                	mov    %esp,%ebp
f0104cb2:	c7 05 04 f6 3a f0 02 	movl   $0x2,0xf03af604
f0104cb9:	00 00 00 
f0104cbc:	90                   	nop
f0104cbd:	5d                   	pop    %ebp
f0104cbe:	c3                   	ret    

f0104cbf <setKHeapPlacementStrategyNEXTFIT>:
void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0104cbf:	55                   	push   %ebp
f0104cc0:	89 e5                	mov    %esp,%ebp
f0104cc2:	c7 05 04 f6 3a f0 03 	movl   $0x3,0xf03af604
f0104cc9:	00 00 00 
f0104ccc:	90                   	nop
f0104ccd:	5d                   	pop    %ebp
f0104cce:	c3                   	ret    

f0104ccf <setKHeapPlacementStrategyWORSTFIT>:
void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0104ccf:	55                   	push   %ebp
f0104cd0:	89 e5                	mov    %esp,%ebp
f0104cd2:	c7 05 04 f6 3a f0 04 	movl   $0x4,0xf03af604
f0104cd9:	00 00 00 
f0104cdc:	90                   	nop
f0104cdd:	5d                   	pop    %ebp
f0104cde:	c3                   	ret    

f0104cdf <isKHeapPlacementStrategyCONTALLOC>:

uint32 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0104cdf:	55                   	push   %ebp
f0104ce0:	89 e5                	mov    %esp,%ebp
f0104ce2:	a1 04 f6 3a f0       	mov    0xf03af604,%eax
f0104ce7:	85 c0                	test   %eax,%eax
f0104ce9:	75 07                	jne    f0104cf2 <isKHeapPlacementStrategyCONTALLOC+0x13>
f0104ceb:	b8 01 00 00 00       	mov    $0x1,%eax
f0104cf0:	eb 05                	jmp    f0104cf7 <isKHeapPlacementStrategyCONTALLOC+0x18>
f0104cf2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104cf7:	5d                   	pop    %ebp
f0104cf8:	c3                   	ret    

f0104cf9 <isKHeapPlacementStrategyFIRSTFIT>:
uint32 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0104cf9:	55                   	push   %ebp
f0104cfa:	89 e5                	mov    %esp,%ebp
f0104cfc:	a1 04 f6 3a f0       	mov    0xf03af604,%eax
f0104d01:	83 f8 01             	cmp    $0x1,%eax
f0104d04:	75 07                	jne    f0104d0d <isKHeapPlacementStrategyFIRSTFIT+0x14>
f0104d06:	b8 01 00 00 00       	mov    $0x1,%eax
f0104d0b:	eb 05                	jmp    f0104d12 <isKHeapPlacementStrategyFIRSTFIT+0x19>
f0104d0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d12:	5d                   	pop    %ebp
f0104d13:	c3                   	ret    

f0104d14 <isKHeapPlacementStrategyBESTFIT>:
uint32 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0104d14:	55                   	push   %ebp
f0104d15:	89 e5                	mov    %esp,%ebp
f0104d17:	a1 04 f6 3a f0       	mov    0xf03af604,%eax
f0104d1c:	83 f8 02             	cmp    $0x2,%eax
f0104d1f:	75 07                	jne    f0104d28 <isKHeapPlacementStrategyBESTFIT+0x14>
f0104d21:	b8 01 00 00 00       	mov    $0x1,%eax
f0104d26:	eb 05                	jmp    f0104d2d <isKHeapPlacementStrategyBESTFIT+0x19>
f0104d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d2d:	5d                   	pop    %ebp
f0104d2e:	c3                   	ret    

f0104d2f <isKHeapPlacementStrategyNEXTFIT>:
uint32 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0104d2f:	55                   	push   %ebp
f0104d30:	89 e5                	mov    %esp,%ebp
f0104d32:	a1 04 f6 3a f0       	mov    0xf03af604,%eax
f0104d37:	83 f8 03             	cmp    $0x3,%eax
f0104d3a:	75 07                	jne    f0104d43 <isKHeapPlacementStrategyNEXTFIT+0x14>
f0104d3c:	b8 01 00 00 00       	mov    $0x1,%eax
f0104d41:	eb 05                	jmp    f0104d48 <isKHeapPlacementStrategyNEXTFIT+0x19>
f0104d43:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d48:	5d                   	pop    %ebp
f0104d49:	c3                   	ret    

f0104d4a <isKHeapPlacementStrategyWORSTFIT>:
uint32 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0104d4a:	55                   	push   %ebp
f0104d4b:	89 e5                	mov    %esp,%ebp
f0104d4d:	a1 04 f6 3a f0       	mov    0xf03af604,%eax
f0104d52:	83 f8 04             	cmp    $0x4,%eax
f0104d55:	75 07                	jne    f0104d5e <isKHeapPlacementStrategyWORSTFIT+0x14>
f0104d57:	b8 01 00 00 00       	mov    $0x1,%eax
f0104d5c:	eb 05                	jmp    f0104d63 <isKHeapPlacementStrategyWORSTFIT+0x19>
f0104d5e:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d63:	5d                   	pop    %ebp
f0104d64:	c3                   	ret    

f0104d65 <__new>:



void __new(struct Env* e, uint32 virtual_address, uint32 size)
{
f0104d65:	55                   	push   %ebp
f0104d66:	89 e5                	mov    %esp,%ebp
f0104d68:	83 ec 18             	sub    $0x18,%esp
	uint32 current_virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0104d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104d71:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104d74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104d79:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (; current_virtual_address < (virtual_address + size); current_virtual_address += PAGE_SIZE)
f0104d7c:	eb 36                	jmp    f0104db4 <__new+0x4f>
	{
		if (pf_add_empty_env_page(e, current_virtual_address, 0) == E_NO_PAGE_FILE_SPACE)
f0104d7e:	83 ec 04             	sub    $0x4,%esp
f0104d81:	6a 00                	push   $0x0
f0104d83:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d86:	ff 75 08             	pushl  0x8(%ebp)
f0104d89:	e8 7a 8b 00 00       	call   f010d908 <pf_add_empty_env_page>
f0104d8e:	83 c4 10             	add    $0x10,%esp
f0104d91:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0104d94:	75 17                	jne    f0104dad <__new+0x48>
			panic("run out of disk pages!!");
f0104d96:	83 ec 04             	sub    $0x4,%esp
f0104d99:	68 9b e9 11 f0       	push   $0xf011e99b
f0104d9e:	68 ae 04 00 00       	push   $0x4ae
f0104da3:	68 21 e6 11 f0       	push   $0xf011e621
f0104da8:	e8 e6 b3 ff ff       	call   f0100193 <_panic>


void __new(struct Env* e, uint32 virtual_address, uint32 size)
{
	uint32 current_virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
	for (; current_virtual_address < (virtual_address + size); current_virtual_address += PAGE_SIZE)
f0104dad:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0104db4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104db7:	8b 45 10             	mov    0x10(%ebp),%eax
f0104dba:	01 d0                	add    %edx,%eax
f0104dbc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104dbf:	77 bd                	ja     f0104d7e <__new+0x19>
	{
		if (pf_add_empty_env_page(e, current_virtual_address, 0) == E_NO_PAGE_FILE_SPACE)
			panic("run out of disk pages!!");
	}

}
f0104dc1:	90                   	nop
f0104dc2:	c9                   	leave  
f0104dc3:	c3                   	ret    

f0104dc4 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f0104dc4:	55                   	push   %ebp
f0104dc5:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0104dc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dca:	8b 15 64 da 3c f0    	mov    0xf03cda64,%edx
f0104dd0:	29 d0                	sub    %edx,%eax
f0104dd2:	c1 f8 03             	sar    $0x3,%eax
f0104dd5:	89 c2                	mov    %eax,%edx
f0104dd7:	89 d0                	mov    %edx,%eax
f0104dd9:	c1 e0 02             	shl    $0x2,%eax
f0104ddc:	01 d0                	add    %edx,%eax
f0104dde:	c1 e0 02             	shl    $0x2,%eax
f0104de1:	01 d0                	add    %edx,%eax
f0104de3:	c1 e0 02             	shl    $0x2,%eax
f0104de6:	01 d0                	add    %edx,%eax
f0104de8:	89 c1                	mov    %eax,%ecx
f0104dea:	c1 e1 08             	shl    $0x8,%ecx
f0104ded:	01 c8                	add    %ecx,%eax
f0104def:	89 c1                	mov    %eax,%ecx
f0104df1:	c1 e1 10             	shl    $0x10,%ecx
f0104df4:	01 c8                	add    %ecx,%eax
f0104df6:	01 c0                	add    %eax,%eax
f0104df8:	01 d0                	add    %edx,%eax
}
f0104dfa:	5d                   	pop    %ebp
f0104dfb:	c3                   	ret    

f0104dfc <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f0104dfc:	55                   	push   %ebp
f0104dfd:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0104dff:	ff 75 08             	pushl  0x8(%ebp)
f0104e02:	e8 bd ff ff ff       	call   f0104dc4 <to_frame_number>
f0104e07:	83 c4 04             	add    $0x4,%esp
f0104e0a:	c1 e0 0c             	shl    $0xc,%eax
}
f0104e0d:	c9                   	leave  
f0104e0e:	c3                   	ret    

f0104e0f <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0104e0f:	55                   	push   %ebp
f0104e10:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0104e12:	8b 15 54 21 34 f0    	mov    0xf0342154,%edx
f0104e18:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e1b:	89 10                	mov    %edx,(%eax)
f0104e1d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e20:	8b 00                	mov    (%eax),%eax
f0104e22:	85 c0                	test   %eax,%eax
f0104e24:	75 07                	jne    f0104e2d <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0104e26:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0104e2b:	eb 11                	jmp    f0104e3e <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0104e2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e30:	8b 00                	mov    (%eax),%eax
f0104e32:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0104e39:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104e3e:	5d                   	pop    %ebp
f0104e3f:	c3                   	ret    

f0104e40 <free_environment>:

// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0104e40:	55                   	push   %ebp
f0104e41:	89 e5                	mov    %esp,%ebp
f0104e43:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0104e46:	83 ec 04             	sub    $0x4,%esp
f0104e49:	68 38 53 00 00       	push   $0x5338
f0104e4e:	6a 00                	push   $0x0
f0104e50:	ff 75 08             	pushl  0x8(%ebp)
f0104e53:	e8 55 66 01 00       	call   f011b4ad <memset>
f0104e58:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0104e5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e5e:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0104e65:	8b 15 54 21 34 f0    	mov    0xf0342154,%edx
f0104e6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e6e:	89 50 44             	mov    %edx,0x44(%eax)
f0104e71:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e74:	8b 40 44             	mov    0x44(%eax),%eax
f0104e77:	85 c0                	test   %eax,%eax
f0104e79:	74 0d                	je     f0104e88 <free_environment+0x48>
f0104e7b:	a1 54 21 34 f0       	mov    0xf0342154,%eax
f0104e80:	8b 55 08             	mov    0x8(%ebp),%edx
f0104e83:	89 50 48             	mov    %edx,0x48(%eax)
f0104e86:	eb 08                	jmp    f0104e90 <free_environment+0x50>
f0104e88:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e8b:	a3 58 21 34 f0       	mov    %eax,0xf0342158
f0104e90:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e93:	a3 54 21 34 f0       	mov    %eax,0xf0342154
f0104e98:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e9b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104ea2:	a1 60 21 34 f0       	mov    0xf0342160,%eax
f0104ea7:	40                   	inc    %eax
f0104ea8:	a3 60 21 34 f0       	mov    %eax,0xf0342160
}
f0104ead:	90                   	nop
f0104eae:	c9                   	leave  
f0104eaf:	c3                   	ret    

f0104eb0 <create_user_page_WS>:


void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0104eb0:	55                   	push   %ebp
f0104eb1:	89 e5                	mov    %esp,%ebp
f0104eb3:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0104eb6:	83 ec 04             	sub    $0x4,%esp
f0104eb9:	68 d0 ee 11 f0       	push   $0xf011eed0
f0104ebe:	68 da 00 00 00       	push   $0xda
f0104ec3:	68 f3 ee 11 f0       	push   $0xf011eef3
f0104ec8:	e8 c6 b2 ff ff       	call   f0100193 <_panic>

f0104ecd <create_user_directory>:
	return NULL;
}


void * create_user_directory()
{
f0104ecd:	55                   	push   %ebp
f0104ece:	89 e5                	mov    %esp,%ebp
f0104ed0:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0104ed3:	83 ec 04             	sub    $0x4,%esp
f0104ed6:	68 d0 ee 11 f0       	push   $0xf011eed0
f0104edb:	68 e1 00 00 00       	push   $0xe1
f0104ee0:	68 f3 ee 11 f0       	push   $0xf011eef3
f0104ee5:	e8 a9 b2 ff ff       	call   f0100193 <_panic>

f0104eea <ShareWSAtUserSpace>:
	return NULL;
}

void ShareWSAtUserSpace(struct Env* e)
{
f0104eea:	55                   	push   %ebp
f0104eeb:	89 e5                	mov    %esp,%ebp
f0104eed:	83 ec 28             	sub    $0x28,%esp
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f0104ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ef3:	c7 80 f0 52 00 00 00 	movl   $0xa0000000,0x52f0(%eax)
f0104efa:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f0104efd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f00:	83 c0 78             	add    $0x78,%eax
f0104f03:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f0104f06:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f09:	8b 50 74             	mov    0x74(%eax),%edx
f0104f0c:	89 d0                	mov    %edx,%eax
f0104f0e:	c1 e0 02             	shl    $0x2,%eax
f0104f11:	01 d0                	add    %edx,%eax
f0104f13:	c1 e0 02             	shl    $0x2,%eax
f0104f16:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f0104f19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f1c:	8b 80 f0 52 00 00    	mov    0x52f0(%eax),%eax
f0104f22:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f0104f25:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f28:	83 c0 78             	add    $0x78,%eax
f0104f2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f2e:	eb 72                	jmp    f0104fa2 <ShareWSAtUserSpace+0xb8>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), (void*)dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f0104f30:	83 ec 0c             	sub    $0xc,%esp
f0104f33:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f36:	e8 38 9b 00 00       	call   f010ea73 <kheap_physical_address>
f0104f3b:	83 c4 10             	add    $0x10,%esp
f0104f3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory, (void*) dva, &ptr_page_table) == TABLE_NOT_EXIST)
f0104f41:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f44:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f47:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104f4a:	83 ec 04             	sub    $0x4,%esp
f0104f4d:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f0104f50:	51                   	push   %ecx
f0104f51:	52                   	push   %edx
f0104f52:	50                   	push   %eax
f0104f53:	e8 13 ef ff ff       	call   f0103e6b <get_page_table>
f0104f58:	83 c4 10             	add    $0x10,%esp
f0104f5b:	83 f8 01             	cmp    $0x1,%eax
f0104f5e:	75 18                	jne    f0104f78 <ShareWSAtUserSpace+0x8e>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f0104f60:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f63:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104f66:	83 ec 08             	sub    $0x8,%esp
f0104f69:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f6c:	50                   	push   %eax
f0104f6d:	e8 ff ef ff ff       	call   f0103f71 <create_page_table>
f0104f72:	83 c4 10             	add    $0x10,%esp
f0104f75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f0104f78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104f7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f7e:	c1 ea 0c             	shr    $0xc,%edx
f0104f81:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104f87:	c1 e2 02             	shl    $0x2,%edx
f0104f8a:	01 d0                	add    %edx,%eax
f0104f8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0104f8f:	83 ca 05             	or     $0x5,%edx
f0104f92:	89 10                	mov    %edx,(%eax)
{
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f0104f94:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0104f9b:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0104fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fa5:	83 c0 78             	add    $0x78,%eax
f0104fa8:	89 c2                	mov    %eax,%edx
f0104faa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104fad:	01 d0                	add    %edx,%eax
f0104faf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104fb2:	0f 87 78 ff ff ff    	ja     f0104f30 <ShareWSAtUserSpace+0x46>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
}
f0104fb8:	90                   	nop
f0104fb9:	c9                   	leave  
f0104fba:	c3                   	ret    

f0104fbb <initialize_environment>:
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory
		, unsigned int phys_user_page_directory)
{
f0104fbb:	55                   	push   %ebp
f0104fbc:	89 e5                	mov    %esp,%ebp
f0104fbe:	53                   	push   %ebx
f0104fbf:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f0104fc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fc5:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fc8:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f0104fcb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fce:	8b 55 10             	mov    0x10(%ebp),%edx
f0104fd1:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0104fd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104fdb:	eb 17                	jmp    f0104ff4 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f0104fdd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe0:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104fe3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104fe6:	c1 e2 02             	shl    $0x2,%edx
f0104fe9:	01 d0                	add    %edx,%eax
f0104feb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0104ff1:	ff 45 f4             	incl   -0xc(%ebp)
f0104ff4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ff7:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0104ffc:	76 df                	jbe    f0104fdd <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0104ffe:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0105005:	eb 22                	jmp    f0105029 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0105007:	8b 45 08             	mov    0x8(%ebp),%eax
f010500a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010500d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105010:	c1 e2 02             	shl    $0x2,%edx
f0105013:	01 c2                	add    %eax,%edx
f0105015:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010501a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010501d:	c1 e1 02             	shl    $0x2,%ecx
f0105020:	01 c8                	add    %ecx,%eax
f0105022:	8b 00                	mov    (%eax),%eax
f0105024:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0105026:	ff 45 f4             	incl   -0xc(%ebp)
f0105029:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105030:	7e d5                	jle    f0105007 <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		ShareWSAtUserSpace(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f0105032:	8b 45 08             	mov    0x8(%ebp),%eax
f0105035:	8b 15 4c 21 34 f0    	mov    0xf034214c,%edx
f010503b:	29 d0                	sub    %edx,%eax
f010503d:	c1 f8 03             	sar    $0x3,%eax
f0105040:	89 c1                	mov    %eax,%ecx
f0105042:	89 ca                	mov    %ecx,%edx
f0105044:	c1 e2 02             	shl    $0x2,%edx
f0105047:	01 ca                	add    %ecx,%edx
f0105049:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0105050:	01 c2                	add    %eax,%edx
f0105052:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0105059:	01 c2                	add    %eax,%edx
f010505b:	89 d0                	mov    %edx,%eax
f010505d:	c1 e0 06             	shl    $0x6,%eax
f0105060:	29 d0                	sub    %edx,%eax
f0105062:	c1 e0 03             	shl    $0x3,%eax
f0105065:	01 c8                	add    %ecx,%eax
f0105067:	c1 e0 03             	shl    $0x3,%eax
f010506a:	01 c8                	add    %ecx,%eax
f010506c:	01 c0                	add    %eax,%eax
f010506e:	01 c8                	add    %ecx,%eax
f0105070:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0105077:	01 d0                	add    %edx,%eax
f0105079:	c1 e0 03             	shl    $0x3,%eax
f010507c:	29 c8                	sub    %ecx,%eax
f010507e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*)
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f0105081:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105084:	89 d0                	mov    %edx,%eax
f0105086:	c1 e0 03             	shl    $0x3,%eax
f0105089:	01 d0                	add    %edx,%eax
f010508b:	c1 e0 02             	shl    $0x2,%eax
f010508e:	01 d0                	add    %edx,%eax
f0105090:	c1 e0 06             	shl    $0x6,%eax
f0105093:	29 d0                	sub    %edx,%eax
f0105095:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010509c:	01 c8                	add    %ecx,%eax
f010509e:	01 d0                	add    %edx,%eax
f01050a0:	2d 00 00 40 11       	sub    $0x11400000,%eax
f01050a5:	8d 50 78             	lea    0x78(%eax),%edx
		ShareWSAtUserSpace(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
		e->__uptr_pws = (struct WorkingSetElement*)
f01050a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01050ab:	89 90 f0 52 00 00    	mov    %edx,0x52f0(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRULists())
f01050b1:	e8 30 39 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f01050b6:	85 c0                	test   %eax,%eax
f01050b8:	0f 84 f9 00 00 00    	je     f01051b7 <initialize_environment+0x1fc>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f01050be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01050c5:	e9 dc 00 00 00       	jmp    f01051a6 <initialize_environment+0x1eb>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f01050ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01050cd:	8b 90 00 53 00 00    	mov    0x5300(%eax),%edx
f01050d3:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01050d6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01050d9:	89 c8                	mov    %ecx,%eax
f01050db:	c1 e0 02             	shl    $0x2,%eax
f01050de:	01 c8                	add    %ecx,%eax
f01050e0:	c1 e0 02             	shl    $0x2,%eax
f01050e3:	01 d8                	add    %ebx,%eax
f01050e5:	05 84 00 00 00       	add    $0x84,%eax
f01050ea:	89 10                	mov    %edx,(%eax)
f01050ec:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01050ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050f2:	89 d0                	mov    %edx,%eax
f01050f4:	c1 e0 02             	shl    $0x2,%eax
f01050f7:	01 d0                	add    %edx,%eax
f01050f9:	c1 e0 02             	shl    $0x2,%eax
f01050fc:	01 c8                	add    %ecx,%eax
f01050fe:	05 84 00 00 00       	add    $0x84,%eax
f0105103:	8b 00                	mov    (%eax),%eax
f0105105:	85 c0                	test   %eax,%eax
f0105107:	74 26                	je     f010512f <initialize_environment+0x174>
f0105109:	8b 45 08             	mov    0x8(%ebp),%eax
f010510c:	8b 90 00 53 00 00    	mov    0x5300(%eax),%edx
f0105112:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0105115:	89 c8                	mov    %ecx,%eax
f0105117:	c1 e0 02             	shl    $0x2,%eax
f010511a:	01 c8                	add    %ecx,%eax
f010511c:	c1 e0 02             	shl    $0x2,%eax
f010511f:	8d 48 70             	lea    0x70(%eax),%ecx
f0105122:	8b 45 08             	mov    0x8(%ebp),%eax
f0105125:	01 c8                	add    %ecx,%eax
f0105127:	83 c0 08             	add    $0x8,%eax
f010512a:	89 42 10             	mov    %eax,0x10(%edx)
f010512d:	eb 21                	jmp    f0105150 <initialize_environment+0x195>
f010512f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105132:	89 d0                	mov    %edx,%eax
f0105134:	c1 e0 02             	shl    $0x2,%eax
f0105137:	01 d0                	add    %edx,%eax
f0105139:	c1 e0 02             	shl    $0x2,%eax
f010513c:	8d 50 70             	lea    0x70(%eax),%edx
f010513f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105142:	01 d0                	add    %edx,%eax
f0105144:	8d 50 08             	lea    0x8(%eax),%edx
f0105147:	8b 45 08             	mov    0x8(%ebp),%eax
f010514a:	89 90 04 53 00 00    	mov    %edx,0x5304(%eax)
f0105150:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105153:	89 d0                	mov    %edx,%eax
f0105155:	c1 e0 02             	shl    $0x2,%eax
f0105158:	01 d0                	add    %edx,%eax
f010515a:	c1 e0 02             	shl    $0x2,%eax
f010515d:	8d 50 70             	lea    0x70(%eax),%edx
f0105160:	8b 45 08             	mov    0x8(%ebp),%eax
f0105163:	01 d0                	add    %edx,%eax
f0105165:	8d 50 08             	lea    0x8(%eax),%edx
f0105168:	8b 45 08             	mov    0x8(%ebp),%eax
f010516b:	89 90 00 53 00 00    	mov    %edx,0x5300(%eax)
f0105171:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105174:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105177:	89 d0                	mov    %edx,%eax
f0105179:	c1 e0 02             	shl    $0x2,%eax
f010517c:	01 d0                	add    %edx,%eax
f010517e:	c1 e0 02             	shl    $0x2,%eax
f0105181:	01 c8                	add    %ecx,%eax
f0105183:	05 88 00 00 00       	add    $0x88,%eax
f0105188:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010518e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105191:	8b 80 0c 53 00 00    	mov    0x530c(%eax),%eax
f0105197:	8d 50 01             	lea    0x1(%eax),%edx
f010519a:	8b 45 08             	mov    0x8(%ebp),%eax
f010519d:	89 90 0c 53 00 00    	mov    %edx,0x530c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRULists())
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f01051a3:	ff 45 f0             	incl   -0x10(%ebp)
f01051a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01051a9:	8b 50 74             	mov    0x74(%eax),%edx
f01051ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01051af:	39 c2                	cmp    %eax,%edx
f01051b1:	0f 87 13 ff ff ff    	ja     f01050ca <initialize_environment+0x10f>
		e->ptr_sharing_variables[i].owner_flag = -1;
		e->ptr_sharing_variables[i].id_in_shares_array = -1;
	}*/

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f01051b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01051be:	eb 51                	jmp    f0105211 <initialize_environment+0x256>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f01051c0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01051c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01051c6:	89 d0                	mov    %edx,%eax
f01051c8:	c1 e0 02             	shl    $0x2,%eax
f01051cb:	01 d0                	add    %edx,%eax
f01051cd:	c1 e0 02             	shl    $0x2,%eax
f01051d0:	01 c8                	add    %ecx,%eax
f01051d2:	83 c0 78             	add    $0x78,%eax
f01051d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f01051db:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01051de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01051e1:	89 d0                	mov    %edx,%eax
f01051e3:	c1 e0 02             	shl    $0x2,%eax
f01051e6:	01 d0                	add    %edx,%eax
f01051e8:	c1 e0 02             	shl    $0x2,%eax
f01051eb:	01 c8                	add    %ecx,%eax
f01051ed:	83 c0 7c             	add    $0x7c,%eax
f01051f0:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f01051f3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01051f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01051f9:	89 d0                	mov    %edx,%eax
f01051fb:	c1 e0 02             	shl    $0x2,%eax
f01051fe:	01 d0                	add    %edx,%eax
f0105200:	c1 e0 02             	shl    $0x2,%eax
f0105203:	01 c8                	add    %ecx,%eax
f0105205:	83 e8 80             	sub    $0xffffff80,%eax
f0105208:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_sharing_variables[i].owner_flag = -1;
		e->ptr_sharing_variables[i].id_in_shares_array = -1;
	}*/

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010520e:	ff 45 f4             	incl   -0xc(%ebp)
f0105211:	8b 45 08             	mov    0x8(%ebp),%eax
f0105214:	8b 50 74             	mov    0x74(%eax),%edx
f0105217:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010521a:	39 c2                	cmp    %eax,%edx
f010521c:	77 a2                	ja     f01051c0 <initialize_environment+0x205>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010521e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105221:	c7 80 80 52 00 00 00 	movl   $0x0,0x5280(%eax)
f0105228:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010522b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105232:	eb 3a                	jmp    f010526e <initialize_environment+0x2b3>
	{
		e->__ptr_tws[i].virtual_address = 0;
f0105234:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105237:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010523a:	89 d0                	mov    %edx,%eax
f010523c:	c1 e0 02             	shl    $0x2,%eax
f010523f:	01 d0                	add    %edx,%eax
f0105241:	c1 e0 02             	shl    $0x2,%eax
f0105244:	01 c8                	add    %ecx,%eax
f0105246:	05 98 4e 00 00       	add    $0x4e98,%eax
f010524b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f0105251:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105254:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105257:	89 d0                	mov    %edx,%eax
f0105259:	c1 e0 02             	shl    $0x2,%eax
f010525c:	01 d0                	add    %edx,%eax
f010525e:	c1 e0 02             	shl    $0x2,%eax
f0105261:	01 c8                	add    %ecx,%eax
f0105263:	05 9c 4e 00 00       	add    $0x4e9c,%eax
f0105268:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010526b:	ff 45 f4             	incl   -0xc(%ebp)
f010526e:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0105272:	7e c0                	jle    f0105234 <initialize_environment+0x279>
	{
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
	}

	e->table_last_WS_index = 0;
f0105274:	8b 45 08             	mov    0x8(%ebp),%eax
f0105277:	c7 80 84 52 00 00 00 	movl   $0x0,0x5284(%eax)
f010527e:	00 00 00 

	e->pageFaultsCounter=0;
f0105281:	8b 45 08             	mov    0x8(%ebp),%eax
f0105284:	c7 80 88 52 00 00 00 	movl   $0x0,0x5288(%eax)
f010528b:	00 00 00 
	e->tableFaultsCounter=0;
f010528e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105291:	c7 80 8c 52 00 00 00 	movl   $0x0,0x528c(%eax)
f0105298:	00 00 00 

	e->freeingFullWSCounter = 0;
f010529b:	8b 45 08             	mov    0x8(%ebp),%eax
f010529e:	c7 80 90 52 00 00 00 	movl   $0x0,0x5290(%eax)
f01052a5:	00 00 00 
	e->freeingScarceMemCounter = 0;
f01052a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ab:	c7 80 94 52 00 00 00 	movl   $0x0,0x5294(%eax)
f01052b2:	00 00 00 

	e->nModifiedPages=0;
f01052b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01052b8:	c7 80 98 52 00 00 00 	movl   $0x0,0x5298(%eax)
f01052bf:	00 00 00 
	e->nNotModifiedPages=0;
f01052c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c5:	c7 80 9c 52 00 00 00 	movl   $0x0,0x529c(%eax)
f01052cc:	00 00 00 
	e->nClocks = 0;
f01052cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01052d2:	c7 80 f8 52 00 00 00 	movl   $0x0,0x52f8(%eax)
f01052d9:	00 00 00 

	//2020
	e->nPageIn = 0;
f01052dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052df:	c7 80 a0 52 00 00 00 	movl   $0x0,0x52a0(%eax)
f01052e6:	00 00 00 
	e->nPageOut = 0;
f01052e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01052ec:	c7 80 a4 52 00 00 00 	movl   $0x0,0x52a4(%eax)
f01052f3:	00 00 00 
	e->nNewPageAdded = 0;
f01052f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052f9:	c7 80 a8 52 00 00 00 	movl   $0x0,0x52a8(%eax)
f0105300:	00 00 00 
	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0105303:	83 ec 0c             	sub    $0xc,%esp
f0105306:	ff 75 08             	pushl  0x8(%ebp)
f0105309:	e8 5e 15 00 00       	call   f010686c <complete_environment_initialization>
f010530e:	83 c4 10             	add    $0x10,%esp
}
f0105311:	90                   	nop
f0105312:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105315:	c9                   	leave  
f0105316:	c3                   	ret    

f0105317 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0105317:	55                   	push   %ebp
f0105318:	89 e5                	mov    %esp,%ebp
f010531a:	53                   	push   %ebx
f010531b:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010531e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105321:	8b 40 0c             	mov    0xc(%eax),%eax
f0105324:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0105327:	8b 45 0c             	mov    0xc(%ebp),%eax
f010532a:	8b 40 08             	mov    0x8(%eax),%eax
f010532d:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0105330:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0105337:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010533a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010533d:	01 c2                	add    %eax,%edx
f010533f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105342:	01 d0                	add    %edx,%eax
f0105344:	48                   	dec    %eax
f0105345:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105348:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010534b:	ba 00 00 00 00       	mov    $0x0,%edx
f0105350:	f7 75 dc             	divl   -0x24(%ebp)
f0105353:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105356:	29 d0                	sub    %edx,%eax
f0105358:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010535b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010535e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0105361:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105364:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105369:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010536c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info *p = NULL;
f0105373:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010537a:	8b 45 10             	mov    0x10(%ebp),%eax
f010537d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000)
f0105383:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010538a:	0f 85 04 05 00 00    	jne    f0105894 <program_segment_alloc_map_copy_workingset+0x57d>
	{
		if (strcmp(e->prog_name, "tpp")!=0)
f0105390:	8b 45 08             	mov    0x8(%ebp),%eax
f0105393:	05 b0 52 00 00       	add    $0x52b0,%eax
f0105398:	83 ec 08             	sub    $0x8,%esp
f010539b:	68 38 ea 11 f0       	push   $0xf011ea38
f01053a0:	50                   	push   %eax
f01053a1:	e8 25 60 01 00       	call   f011b3cb <strcmp>
f01053a6:	83 c4 10             	add    $0x10,%esp
f01053a9:	85 c0                	test   %eax,%eax
f01053ab:	74 15                	je     f01053c2 <program_segment_alloc_map_copy_workingset+0xab>
			remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f01053ad:	8b 45 14             	mov    0x14(%ebp),%eax
f01053b0:	83 f8 06             	cmp    $0x6,%eax
f01053b3:	76 05                	jbe    f01053ba <program_segment_alloc_map_copy_workingset+0xa3>
f01053b5:	b8 06 00 00 00       	mov    $0x6,%eax
f01053ba:	89 45 14             	mov    %eax,0x14(%ebp)
f01053bd:	e9 d2 04 00 00       	jmp    f0105894 <program_segment_alloc_map_copy_workingset+0x57d>
		else
			remaining_ws_pages = remaining_ws_pages < 7 ? remaining_ws_pages:7 ;
f01053c2:	8b 45 14             	mov    0x14(%ebp),%eax
f01053c5:	83 f8 07             	cmp    $0x7,%eax
f01053c8:	76 05                	jbe    f01053cf <program_segment_alloc_map_copy_workingset+0xb8>
f01053ca:	b8 07 00 00 00       	mov    $0x7,%eax
f01053cf:	89 45 14             	mov    %eax,0x14(%ebp)
	}
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f01053d2:	e9 bd 04 00 00       	jmp    f0105894 <program_segment_alloc_map_copy_workingset+0x57d>
	{
		// Allocate a page
		allocate_frame(&p) ;
f01053d7:	83 ec 0c             	sub    $0xc,%esp
f01053da:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01053dd:	50                   	push   %eax
f01053de:	e8 09 e9 ff ff       	call   f0103cec <allocate_frame>
f01053e3:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, (void *)iVA, PERM_USER | PERM_WRITEABLE);
f01053e6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01053e9:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01053ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01053ef:	8b 40 5c             	mov    0x5c(%eax),%eax
f01053f2:	6a 06                	push   $0x6
f01053f4:	51                   	push   %ecx
f01053f5:	52                   	push   %edx
f01053f6:	50                   	push   %eax
f01053f7:	e8 fc ed ff ff       	call   f01041f8 <loadtime_map_frame>
f01053fc:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01053ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0105402:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105408:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010540b:	89 d0                	mov    %edx,%eax
f010540d:	c1 e0 02             	shl    $0x2,%eax
f0105410:	01 d0                	add    %edx,%eax
f0105412:	c1 e0 02             	shl    $0x2,%eax
f0105415:	01 c8                	add    %ecx,%eax
f0105417:	8d 50 78             	lea    0x78(%eax),%edx
f010541a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010541d:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010541f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105422:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105428:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010542b:	89 d0                	mov    %edx,%eax
f010542d:	c1 e0 02             	shl    $0x2,%eax
f0105430:	01 d0                	add    %edx,%eax
f0105432:	c1 e0 02             	shl    $0x2,%eax
f0105435:	01 c8                	add    %ecx,%eax
f0105437:	83 c0 7c             	add    $0x7c,%eax
f010543a:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010543d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105440:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105446:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105449:	89 d0                	mov    %edx,%eax
f010544b:	c1 e0 02             	shl    $0x2,%eax
f010544e:	01 d0                	add    %edx,%eax
f0105450:	c1 e0 02             	shl    $0x2,%eax
f0105453:	01 c8                	add    %ecx,%eax
f0105455:	83 e8 80             	sub    $0xffffff80,%eax
f0105458:	c7 00 00 00 00 00    	movl   $0x0,(%eax)


		//2020
		if (isPageReplacmentAlgorithmLRULists())
f010545e:	e8 83 35 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f0105463:	85 c0                	test   %eax,%eax
f0105465:	0f 84 7f 03 00 00    	je     f01057ea <program_segment_alloc_map_copy_workingset+0x4d3>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010546b:	8b 45 08             	mov    0x8(%ebp),%eax
f010546e:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105474:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105477:	89 d0                	mov    %edx,%eax
f0105479:	c1 e0 02             	shl    $0x2,%eax
f010547c:	01 d0                	add    %edx,%eax
f010547e:	c1 e0 02             	shl    $0x2,%eax
f0105481:	01 c8                	add    %ecx,%eax
f0105483:	05 84 00 00 00       	add    $0x84,%eax
f0105488:	8b 00                	mov    (%eax),%eax
f010548a:	85 c0                	test   %eax,%eax
f010548c:	74 43                	je     f01054d1 <program_segment_alloc_map_copy_workingset+0x1ba>
f010548e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105491:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105497:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010549a:	89 d0                	mov    %edx,%eax
f010549c:	c1 e0 02             	shl    $0x2,%eax
f010549f:	01 d0                	add    %edx,%eax
f01054a1:	c1 e0 02             	shl    $0x2,%eax
f01054a4:	01 c8                	add    %ecx,%eax
f01054a6:	05 84 00 00 00       	add    $0x84,%eax
f01054ab:	8b 10                	mov    (%eax),%edx
f01054ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01054b0:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f01054b6:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01054b9:	89 c8                	mov    %ecx,%eax
f01054bb:	c1 e0 02             	shl    $0x2,%eax
f01054be:	01 c8                	add    %ecx,%eax
f01054c0:	c1 e0 02             	shl    $0x2,%eax
f01054c3:	01 d8                	add    %ebx,%eax
f01054c5:	05 88 00 00 00       	add    $0x88,%eax
f01054ca:	8b 00                	mov    (%eax),%eax
f01054cc:	89 42 10             	mov    %eax,0x10(%edx)
f01054cf:	eb 28                	jmp    f01054f9 <program_segment_alloc_map_copy_workingset+0x1e2>
f01054d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01054d4:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01054da:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01054dd:	89 d0                	mov    %edx,%eax
f01054df:	c1 e0 02             	shl    $0x2,%eax
f01054e2:	01 d0                	add    %edx,%eax
f01054e4:	c1 e0 02             	shl    $0x2,%eax
f01054e7:	01 c8                	add    %ecx,%eax
f01054e9:	05 88 00 00 00       	add    $0x88,%eax
f01054ee:	8b 10                	mov    (%eax),%edx
f01054f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01054f3:	89 90 04 53 00 00    	mov    %edx,0x5304(%eax)
f01054f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01054fc:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105502:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105505:	89 d0                	mov    %edx,%eax
f0105507:	c1 e0 02             	shl    $0x2,%eax
f010550a:	01 d0                	add    %edx,%eax
f010550c:	c1 e0 02             	shl    $0x2,%eax
f010550f:	01 c8                	add    %ecx,%eax
f0105511:	05 88 00 00 00       	add    $0x88,%eax
f0105516:	8b 00                	mov    (%eax),%eax
f0105518:	85 c0                	test   %eax,%eax
f010551a:	74 43                	je     f010555f <program_segment_alloc_map_copy_workingset+0x248>
f010551c:	8b 45 08             	mov    0x8(%ebp),%eax
f010551f:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105525:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105528:	89 d0                	mov    %edx,%eax
f010552a:	c1 e0 02             	shl    $0x2,%eax
f010552d:	01 d0                	add    %edx,%eax
f010552f:	c1 e0 02             	shl    $0x2,%eax
f0105532:	01 c8                	add    %ecx,%eax
f0105534:	05 88 00 00 00       	add    $0x88,%eax
f0105539:	8b 10                	mov    (%eax),%edx
f010553b:	8b 45 08             	mov    0x8(%ebp),%eax
f010553e:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f0105544:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0105547:	89 c8                	mov    %ecx,%eax
f0105549:	c1 e0 02             	shl    $0x2,%eax
f010554c:	01 c8                	add    %ecx,%eax
f010554e:	c1 e0 02             	shl    $0x2,%eax
f0105551:	01 d8                	add    %ebx,%eax
f0105553:	05 84 00 00 00       	add    $0x84,%eax
f0105558:	8b 00                	mov    (%eax),%eax
f010555a:	89 42 0c             	mov    %eax,0xc(%edx)
f010555d:	eb 28                	jmp    f0105587 <program_segment_alloc_map_copy_workingset+0x270>
f010555f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105562:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105568:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010556b:	89 d0                	mov    %edx,%eax
f010556d:	c1 e0 02             	shl    $0x2,%eax
f0105570:	01 d0                	add    %edx,%eax
f0105572:	c1 e0 02             	shl    $0x2,%eax
f0105575:	01 c8                	add    %ecx,%eax
f0105577:	05 84 00 00 00       	add    $0x84,%eax
f010557c:	8b 10                	mov    (%eax),%edx
f010557e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105581:	89 90 00 53 00 00    	mov    %edx,0x5300(%eax)
f0105587:	8b 45 08             	mov    0x8(%ebp),%eax
f010558a:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105590:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105593:	89 d0                	mov    %edx,%eax
f0105595:	c1 e0 02             	shl    $0x2,%eax
f0105598:	01 d0                	add    %edx,%eax
f010559a:	c1 e0 02             	shl    $0x2,%eax
f010559d:	01 c8                	add    %ecx,%eax
f010559f:	05 84 00 00 00       	add    $0x84,%eax
f01055a4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01055aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01055ad:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01055b3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01055b6:	89 d0                	mov    %edx,%eax
f01055b8:	c1 e0 02             	shl    $0x2,%eax
f01055bb:	01 d0                	add    %edx,%eax
f01055bd:	c1 e0 02             	shl    $0x2,%eax
f01055c0:	01 c8                	add    %ecx,%eax
f01055c2:	05 88 00 00 00       	add    $0x88,%eax
f01055c7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01055cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01055d0:	8b 80 0c 53 00 00    	mov    0x530c(%eax),%eax
f01055d6:	8d 50 ff             	lea    -0x1(%eax),%edx
f01055d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01055dc:	89 90 0c 53 00 00    	mov    %edx,0x530c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f01055e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01055e5:	8b 90 1c 53 00 00    	mov    0x531c(%eax),%edx
f01055eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01055ee:	8b 80 30 53 00 00    	mov    0x5330(%eax),%eax
f01055f4:	48                   	dec    %eax
f01055f5:	39 c2                	cmp    %eax,%edx
f01055f7:	0f 83 f9 00 00 00    	jae    f01056f6 <program_segment_alloc_map_copy_workingset+0x3df>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01055fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0105600:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105606:	8b 45 08             	mov    0x8(%ebp),%eax
f0105609:	8b 88 10 53 00 00    	mov    0x5310(%eax),%ecx
f010560f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0105612:	89 d0                	mov    %edx,%eax
f0105614:	c1 e0 02             	shl    $0x2,%eax
f0105617:	01 d0                	add    %edx,%eax
f0105619:	c1 e0 02             	shl    $0x2,%eax
f010561c:	01 d8                	add    %ebx,%eax
f010561e:	05 84 00 00 00       	add    $0x84,%eax
f0105623:	89 08                	mov    %ecx,(%eax)
f0105625:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105628:	89 d0                	mov    %edx,%eax
f010562a:	c1 e0 02             	shl    $0x2,%eax
f010562d:	01 d0                	add    %edx,%eax
f010562f:	c1 e0 02             	shl    $0x2,%eax
f0105632:	01 c8                	add    %ecx,%eax
f0105634:	05 84 00 00 00       	add    $0x84,%eax
f0105639:	8b 00                	mov    (%eax),%eax
f010563b:	85 c0                	test   %eax,%eax
f010563d:	74 2c                	je     f010566b <program_segment_alloc_map_copy_workingset+0x354>
f010563f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105642:	8b 90 10 53 00 00    	mov    0x5310(%eax),%edx
f0105648:	8b 45 08             	mov    0x8(%ebp),%eax
f010564b:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f0105651:	89 c8                	mov    %ecx,%eax
f0105653:	c1 e0 02             	shl    $0x2,%eax
f0105656:	01 c8                	add    %ecx,%eax
f0105658:	c1 e0 02             	shl    $0x2,%eax
f010565b:	8d 48 70             	lea    0x70(%eax),%ecx
f010565e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105661:	01 c8                	add    %ecx,%eax
f0105663:	83 c0 08             	add    $0x8,%eax
f0105666:	89 42 10             	mov    %eax,0x10(%edx)
f0105669:	eb 27                	jmp    f0105692 <program_segment_alloc_map_copy_workingset+0x37b>
f010566b:	8b 45 08             	mov    0x8(%ebp),%eax
f010566e:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105674:	89 d0                	mov    %edx,%eax
f0105676:	c1 e0 02             	shl    $0x2,%eax
f0105679:	01 d0                	add    %edx,%eax
f010567b:	c1 e0 02             	shl    $0x2,%eax
f010567e:	8d 50 70             	lea    0x70(%eax),%edx
f0105681:	8b 45 08             	mov    0x8(%ebp),%eax
f0105684:	01 d0                	add    %edx,%eax
f0105686:	8d 50 08             	lea    0x8(%eax),%edx
f0105689:	8b 45 08             	mov    0x8(%ebp),%eax
f010568c:	89 90 14 53 00 00    	mov    %edx,0x5314(%eax)
f0105692:	8b 45 08             	mov    0x8(%ebp),%eax
f0105695:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f010569b:	89 d0                	mov    %edx,%eax
f010569d:	c1 e0 02             	shl    $0x2,%eax
f01056a0:	01 d0                	add    %edx,%eax
f01056a2:	c1 e0 02             	shl    $0x2,%eax
f01056a5:	8d 50 70             	lea    0x70(%eax),%edx
f01056a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01056ab:	01 d0                	add    %edx,%eax
f01056ad:	8d 50 08             	lea    0x8(%eax),%edx
f01056b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01056b3:	89 90 10 53 00 00    	mov    %edx,0x5310(%eax)
f01056b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01056bc:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01056c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01056c5:	89 d0                	mov    %edx,%eax
f01056c7:	c1 e0 02             	shl    $0x2,%eax
f01056ca:	01 d0                	add    %edx,%eax
f01056cc:	c1 e0 02             	shl    $0x2,%eax
f01056cf:	01 c8                	add    %ecx,%eax
f01056d1:	05 88 00 00 00       	add    $0x88,%eax
f01056d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01056dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01056df:	8b 80 1c 53 00 00    	mov    0x531c(%eax),%eax
f01056e5:	8d 50 01             	lea    0x1(%eax),%edx
f01056e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01056eb:	89 90 1c 53 00 00    	mov    %edx,0x531c(%eax)
f01056f1:	e9 f4 00 00 00       	jmp    f01057ea <program_segment_alloc_map_copy_workingset+0x4d3>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01056f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01056f9:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01056ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0105702:	8b 88 20 53 00 00    	mov    0x5320(%eax),%ecx
f0105708:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010570b:	89 d0                	mov    %edx,%eax
f010570d:	c1 e0 02             	shl    $0x2,%eax
f0105710:	01 d0                	add    %edx,%eax
f0105712:	c1 e0 02             	shl    $0x2,%eax
f0105715:	01 d8                	add    %ebx,%eax
f0105717:	05 84 00 00 00       	add    $0x84,%eax
f010571c:	89 08                	mov    %ecx,(%eax)
f010571e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105721:	89 d0                	mov    %edx,%eax
f0105723:	c1 e0 02             	shl    $0x2,%eax
f0105726:	01 d0                	add    %edx,%eax
f0105728:	c1 e0 02             	shl    $0x2,%eax
f010572b:	01 c8                	add    %ecx,%eax
f010572d:	05 84 00 00 00       	add    $0x84,%eax
f0105732:	8b 00                	mov    (%eax),%eax
f0105734:	85 c0                	test   %eax,%eax
f0105736:	74 2c                	je     f0105764 <program_segment_alloc_map_copy_workingset+0x44d>
f0105738:	8b 45 08             	mov    0x8(%ebp),%eax
f010573b:	8b 90 20 53 00 00    	mov    0x5320(%eax),%edx
f0105741:	8b 45 08             	mov    0x8(%ebp),%eax
f0105744:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f010574a:	89 c8                	mov    %ecx,%eax
f010574c:	c1 e0 02             	shl    $0x2,%eax
f010574f:	01 c8                	add    %ecx,%eax
f0105751:	c1 e0 02             	shl    $0x2,%eax
f0105754:	8d 48 70             	lea    0x70(%eax),%ecx
f0105757:	8b 45 08             	mov    0x8(%ebp),%eax
f010575a:	01 c8                	add    %ecx,%eax
f010575c:	83 c0 08             	add    $0x8,%eax
f010575f:	89 42 10             	mov    %eax,0x10(%edx)
f0105762:	eb 27                	jmp    f010578b <program_segment_alloc_map_copy_workingset+0x474>
f0105764:	8b 45 08             	mov    0x8(%ebp),%eax
f0105767:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f010576d:	89 d0                	mov    %edx,%eax
f010576f:	c1 e0 02             	shl    $0x2,%eax
f0105772:	01 d0                	add    %edx,%eax
f0105774:	c1 e0 02             	shl    $0x2,%eax
f0105777:	8d 50 70             	lea    0x70(%eax),%edx
f010577a:	8b 45 08             	mov    0x8(%ebp),%eax
f010577d:	01 d0                	add    %edx,%eax
f010577f:	8d 50 08             	lea    0x8(%eax),%edx
f0105782:	8b 45 08             	mov    0x8(%ebp),%eax
f0105785:	89 90 24 53 00 00    	mov    %edx,0x5324(%eax)
f010578b:	8b 45 08             	mov    0x8(%ebp),%eax
f010578e:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0105794:	89 d0                	mov    %edx,%eax
f0105796:	c1 e0 02             	shl    $0x2,%eax
f0105799:	01 d0                	add    %edx,%eax
f010579b:	c1 e0 02             	shl    $0x2,%eax
f010579e:	8d 50 70             	lea    0x70(%eax),%edx
f01057a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01057a4:	01 d0                	add    %edx,%eax
f01057a6:	8d 50 08             	lea    0x8(%eax),%edx
f01057a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01057ac:	89 90 20 53 00 00    	mov    %edx,0x5320(%eax)
f01057b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01057b5:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01057bb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01057be:	89 d0                	mov    %edx,%eax
f01057c0:	c1 e0 02             	shl    $0x2,%eax
f01057c3:	01 d0                	add    %edx,%eax
f01057c5:	c1 e0 02             	shl    $0x2,%eax
f01057c8:	01 c8                	add    %ecx,%eax
f01057ca:	05 88 00 00 00       	add    $0x88,%eax
f01057cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01057d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01057d8:	8b 80 2c 53 00 00    	mov    0x532c(%eax),%eax
f01057de:	8d 50 01             	lea    0x1(%eax),%edx
f01057e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01057e4:	89 90 2c 53 00 00    	mov    %edx,0x532c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f01057ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01057ed:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01057f3:	8d 50 01             	lea    0x1(%eax),%edx
f01057f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01057f9:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f01057ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0105802:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0105808:	8b 55 08             	mov    0x8(%ebp),%edx
f010580b:	8b 4a 74             	mov    0x74(%edx),%ecx
f010580e:	ba 00 00 00 00       	mov    $0x0,%edx
f0105813:	f7 f1                	div    %ecx
f0105815:	8b 45 08             	mov    0x8(%ebp),%eax
f0105818:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010581e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105821:	c1 e8 16             	shr    $0x16,%eax
f0105824:	89 c2                	mov    %eax,%edx
f0105826:	8b 45 18             	mov    0x18(%ebp),%eax
f0105829:	8b 00                	mov    (%eax),%eax
f010582b:	39 c2                	cmp    %eax,%edx
f010582d:	74 4e                	je     f010587d <program_segment_alloc_map_copy_workingset+0x566>
		{
			addTableToTableWorkingSet(e, ROUNDDOWN(iVA, PAGE_SIZE*1024));
f010582f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105832:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105835:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105838:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010583d:	83 ec 08             	sub    $0x8,%esp
f0105840:	50                   	push   %eax
f0105841:	ff 75 08             	pushl  0x8(%ebp)
f0105844:	e8 df ef ff ff       	call   f0104828 <addTableToTableWorkingSet>
f0105849:	83 c4 10             	add    $0x10,%esp
			if (e->table_last_WS_index == 0)
f010584c:	8b 45 08             	mov    0x8(%ebp),%eax
f010584f:	8b 80 84 52 00 00    	mov    0x5284(%eax),%eax
f0105855:	85 c0                	test   %eax,%eax
f0105857:	75 17                	jne    f0105870 <program_segment_alloc_map_copy_workingset+0x559>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0105859:	83 ec 04             	sub    $0x4,%esp
f010585c:	68 0c ef 11 f0       	push   $0xf011ef0c
f0105861:	68 a4 01 00 00       	push   $0x1a4
f0105866:	68 f3 ee 11 f0       	push   $0xf011eef3
f010586b:	e8 23 a9 ff ff       	call   f0100193 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0105870:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105873:	c1 e8 16             	shr    $0x16,%eax
f0105876:	89 c2                	mov    %eax,%edx
f0105878:	8b 45 18             	mov    0x18(%ebp),%eax
f010587b:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010587d:	8b 45 10             	mov    0x10(%ebp),%eax
f0105880:	8b 00                	mov    (%eax),%eax
f0105882:	8d 50 01             	lea    0x1(%eax),%edx
f0105885:	8b 45 10             	mov    0x10(%ebp),%eax
f0105888:	89 10                	mov    %edx,(%eax)
			remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
		else
			remaining_ws_pages = remaining_ws_pages < 7 ? remaining_ws_pages:7 ;
	}
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010588a:	ff 45 f0             	incl   -0x10(%ebp)
f010588d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105897:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010589a:	73 0c                	jae    f01058a8 <program_segment_alloc_map_copy_workingset+0x591>
f010589c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010589f:	3b 45 14             	cmp    0x14(%ebp),%eax
f01058a2:	0f 82 2f fb ff ff    	jb     f01053d7 <program_segment_alloc_map_copy_workingset+0xc0>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f01058a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01058ab:	8b 00                	mov    (%eax),%eax
f01058ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f01058b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01058b3:	8b 40 0c             	mov    0xc(%eax),%eax
f01058b6:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01058b9:	eb 10                	jmp    f01058cb <program_segment_alloc_map_copy_workingset+0x5b4>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f01058bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01058be:	8a 10                	mov    (%eax),%dl
f01058c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01058c3:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f01058c5:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f01058c8:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01058cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01058ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01058d1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01058d4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01058d9:	89 c2                	mov    %eax,%edx
f01058db:	8b 45 10             	mov    0x10(%ebp),%eax
f01058de:	8b 00                	mov    (%eax),%eax
f01058e0:	c1 e0 0c             	shl    $0xc,%eax
f01058e3:	01 c2                	add    %eax,%edx
f01058e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01058e8:	39 c2                	cmp    %eax,%edx
f01058ea:	76 1d                	jbe    f0105909 <program_segment_alloc_map_copy_workingset+0x5f2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f01058ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01058ef:	8b 50 04             	mov    0x4(%eax),%edx
f01058f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01058f5:	01 c2                	add    %eax,%edx
f01058f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f01058fa:	39 c2                	cmp    %eax,%edx
f01058fc:	77 bd                	ja     f01058bb <program_segment_alloc_map_copy_workingset+0x5a4>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f01058fe:	eb 09                	jmp    f0105909 <program_segment_alloc_map_copy_workingset+0x5f2>
	{
		*dst_ptr = 0;
f0105900:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105903:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f0105906:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0105909:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010590c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010590f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105912:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105917:	89 c2                	mov    %eax,%edx
f0105919:	8b 45 10             	mov    0x10(%ebp),%eax
f010591c:	8b 00                	mov    (%eax),%eax
f010591e:	c1 e0 0c             	shl    $0xc,%eax
f0105921:	01 c2                	add    %eax,%edx
f0105923:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105926:	39 c2                	cmp    %eax,%edx
f0105928:	77 d6                	ja     f0105900 <program_segment_alloc_map_copy_workingset+0x5e9>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, (void *)iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010592a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010592f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105932:	c9                   	leave  
f0105933:	c3                   	ret    

f0105934 <env_create>:

// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0105934:	55                   	push   %ebp
f0105935:	89 e5                	mov    %esp,%ebp
f0105937:	57                   	push   %edi
f0105938:	56                   	push   %esi
f0105939:	53                   	push   %ebx
f010593a:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0105940:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0105947:	83 ec 0c             	sub    $0xc,%esp
f010594a:	ff 75 08             	pushl  0x8(%ebp)
f010594d:	e8 06 13 00 00       	call   f0106c58 <get_user_program_info>
f0105952:	83 c4 10             	add    $0x10,%esp
f0105955:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0105958:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f010595c:	75 0a                	jne    f0105968 <env_create+0x34>
f010595e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105963:	e9 86 0c 00 00       	jmp    f01065ee <env_create+0xcba>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0105968:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010596b:	8b 40 08             	mov    0x8(%eax),%eax
f010596e:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0105971:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0105978:	00 00 00 
	if(allocate_environment(&e) < 0)
f010597b:	83 ec 0c             	sub    $0xc,%esp
f010597e:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0105984:	50                   	push   %eax
f0105985:	e8 85 f4 ff ff       	call   f0104e0f <allocate_environment>
f010598a:	83 c4 10             	add    $0x10,%esp
f010598d:	85 c0                	test   %eax,%eax
f010598f:	79 0a                	jns    f010599b <env_create+0x67>
	{
		return 0;
f0105991:	b8 00 00 00 00       	mov    $0x0,%eax
f0105996:	e9 53 0c 00 00       	jmp    f01065ee <env_create+0xcba>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f010599b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010599e:	8b 00                	mov    (%eax),%eax
f01059a0:	83 ec 0c             	sub    $0xc,%esp
f01059a3:	50                   	push   %eax
f01059a4:	e8 16 59 01 00       	call   f011b2bf <strlen>
f01059a9:	83 c4 10             	add    $0x10,%esp
f01059ac:	83 f8 3f             	cmp    $0x3f,%eax
f01059af:	7f 20                	jg     f01059d1 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01059b1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01059b4:	8b 00                	mov    (%eax),%eax
f01059b6:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01059bc:	81 c2 b0 52 00 00    	add    $0x52b0,%edx
f01059c2:	83 ec 08             	sub    $0x8,%esp
f01059c5:	50                   	push   %eax
f01059c6:	52                   	push   %edx
f01059c7:	e8 42 59 01 00       	call   f011b30e <strcpy>
f01059cc:	83 c4 10             	add    $0x10,%esp
f01059cf:	eb 20                	jmp    f01059f1 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f01059d1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01059d4:	8b 00                	mov    (%eax),%eax
f01059d6:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01059dc:	81 c2 b0 52 00 00    	add    $0x52b0,%edx
f01059e2:	83 ec 04             	sub    $0x4,%esp
f01059e5:	6a 3f                	push   $0x3f
f01059e7:	50                   	push   %eax
f01059e8:	52                   	push   %edx
f01059e9:	e8 4e 59 01 00       	call   f011b33c <strncpy>
f01059ee:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct Frame_Info *p = NULL;
f01059f1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01059f8:	00 00 00 

		allocate_frame(&p) ;
f01059fb:	83 ec 0c             	sub    $0xc,%esp
f01059fe:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0105a04:	50                   	push   %eax
f0105a05:	e8 e2 e2 ff ff       	call   f0103cec <allocate_frame>
f0105a0a:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0105a0d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0105a13:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0105a19:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0105a1f:	83 ec 0c             	sub    $0xc,%esp
f0105a22:	50                   	push   %eax
f0105a23:	e8 d4 f3 ff ff       	call   f0104dfc <to_physical_address>
f0105a28:	83 c4 10             	add    $0x10,%esp
f0105a2b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0105a2e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0105a31:	c1 e8 0c             	shr    $0xc,%eax
f0105a34:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0105a37:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f0105a3c:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0105a3f:	72 17                	jb     f0105a58 <env_create+0x124>
f0105a41:	ff 75 b0             	pushl  -0x50(%ebp)
f0105a44:	68 b0 ef 11 f0       	push   $0xf011efb0
f0105a49:	68 06 02 00 00       	push   $0x206
f0105a4e:	68 f3 ee 11 f0       	push   $0xf011eef3
f0105a53:	e8 3b a7 ff ff       	call   f0100193 <_panic>
f0105a58:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0105a5b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105a60:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0105a63:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0105a69:	83 ec 0c             	sub    $0xc,%esp
f0105a6c:	50                   	push   %eax
f0105a6d:	e8 8a f3 ff ff       	call   f0104dfc <to_physical_address>
f0105a72:	83 c4 10             	add    $0x10,%esp
f0105a75:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0105a78:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105a7e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105a81:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRULists())
f0105a84:	e8 5d 2f 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f0105a89:	85 c0                	test   %eax,%eax
f0105a8b:	74 21                	je     f0105aae <env_create+0x17a>
	{
		e->SecondListSize = LRU_second_list_size;
f0105a8d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105a93:	8b 55 10             	mov    0x10(%ebp),%edx
f0105a96:	89 90 34 53 00 00    	mov    %edx,0x5334(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0105a9c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105aa2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105aa5:	2b 55 10             	sub    0x10(%ebp),%edx
f0105aa8:	89 90 30 53 00 00    	mov    %edx,0x5330(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0105aae:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0105ab2:	75 12                	jne    f0105ac6 <env_create+0x192>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0105ab4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105aba:	c7 80 f4 52 00 00 0a 	movl   $0xa,0x52f4(%eax)
f0105ac1:	00 00 00 
f0105ac4:	eb 0f                	jmp    f0105ad5 <env_create+0x1a1>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0105ac6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105acc:	8b 55 14             	mov    0x14(%ebp),%edx
f0105acf:	89 90 f4 52 00 00    	mov    %edx,0x52f4(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0105ad5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105adb:	83 ec 04             	sub    $0x4,%esp
f0105ade:	ff 75 a4             	pushl  -0x5c(%ebp)
f0105ae1:	ff 75 a8             	pushl  -0x58(%ebp)
f0105ae4:	50                   	push   %eax
f0105ae5:	e8 d1 f4 ff ff       	call   f0104fbb <initialize_environment>
f0105aea:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0105aed:	0f 20 d8             	mov    %cr3,%eax
f0105af0:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0105af3:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0105af6:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0105af9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105aff:	8b 40 60             	mov    0x60(%eax),%eax
f0105b02:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105b08:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0105b0e:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0105b11:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0105b18:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0105b1f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105b25:	8b 40 74             	mov    0x74(%eax),%eax
f0105b28:	48                   	dec    %eax
f0105b29:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0105b2c:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0105b33:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105b36:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0105b3c:	83 ec 08             	sub    $0x8,%esp
f0105b3f:	ff 75 b8             	pushl  -0x48(%ebp)
f0105b42:	50                   	push   %eax
f0105b43:	e8 f7 0f 00 00       	call   f0106b3f <PROGRAM_SEGMENT_FIRST>
f0105b48:	83 c4 0c             	add    $0xc,%esp
f0105b4b:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0105b51:	8d 95 e8 fe ff ff    	lea    -0x118(%ebp),%edx
f0105b57:	b9 05 00 00 00       	mov    $0x5,%ecx
f0105b5c:	89 c7                	mov    %eax,%edi
f0105b5e:	89 d6                	mov    %edx,%esi
f0105b60:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0105b62:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0105b68:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105b6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b6e:	8b 40 10             	mov    0x10(%eax),%eax
f0105b71:	83 f8 ff             	cmp    $0xffffffff,%eax
f0105b74:	75 07                	jne    f0105b7d <env_create+0x249>
f0105b76:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0105b7d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105b83:	e9 24 03 00 00       	jmp    f0105eac <env_create+0x578>
	{
		segment_counter++;
f0105b88:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0105b8b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0105b92:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0105b95:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105b9b:	83 ec 0c             	sub    $0xc,%esp
f0105b9e:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0105ba4:	52                   	push   %edx
f0105ba5:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ba8:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0105bae:	52                   	push   %edx
f0105baf:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105bb2:	50                   	push   %eax
f0105bb3:	e8 5f f7 ff ff       	call   f0105317 <program_segment_alloc_map_copy_workingset>
f0105bb8:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0105bbb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0105bc1:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0105bc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105bc7:	8b 00                	mov    (%eax),%eax
f0105bc9:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0105bcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105bcf:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bd2:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0105bd5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105bd8:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0105bdb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105bde:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105be3:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0105be6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0105bed:	8b 55 90             	mov    -0x70(%ebp),%edx
f0105bf0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0105bf3:	01 d0                	add    %edx,%eax
f0105bf5:	48                   	dec    %eax
f0105bf6:	89 45 80             	mov    %eax,-0x80(%ebp)
f0105bf9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105bfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0105c01:	f7 75 84             	divl   -0x7c(%ebp)
f0105c04:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105c07:	29 d0                	sub    %edx,%eax
f0105c09:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0105c0f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105c12:	2b 45 88             	sub    -0x78(%ebp),%eax
f0105c15:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0105c1b:	a1 74 da 3c f0       	mov    0xf03cda74,%eax
f0105c20:	83 ec 04             	sub    $0x4,%esp
f0105c23:	68 00 10 00 00       	push   $0x1000
f0105c28:	6a 00                	push   $0x0
f0105c2a:	50                   	push   %eax
f0105c2b:	e8 7d 58 01 00       	call   f011b4ad <memset>
f0105c30:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0105c33:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0105c36:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0105c39:	8b 15 74 da 3c f0    	mov    0xf03cda74,%edx
f0105c3f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0105c45:	01 d0                	add    %edx,%eax
f0105c47:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105c4a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105c4d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105c50:	eb 13                	jmp    f0105c65 <env_create+0x331>
		{
			*dst_ptr = *src_ptr ;
f0105c52:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105c55:	8a 10                	mov    (%eax),%dl
f0105c57:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105c5a:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105c5c:	ff 45 cc             	incl   -0x34(%ebp)
f0105c5f:	ff 45 d4             	incl   -0x2c(%ebp)
f0105c62:	ff 45 d0             	incl   -0x30(%ebp)
f0105c65:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105c68:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0105c6e:	72 e2                	jb     f0105c52 <env_create+0x31e>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105c70:	8b 15 74 da 3c f0    	mov    0xf03cda74,%edx
f0105c76:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105c7c:	83 ec 04             	sub    $0x4,%esp
f0105c7f:	52                   	push   %edx
f0105c80:	ff 75 88             	pushl  -0x78(%ebp)
f0105c83:	50                   	push   %eax
f0105c84:	e8 b1 7d 00 00       	call   f010da3a <pf_add_env_page>
f0105c89:	83 c4 10             	add    $0x10,%esp
f0105c8c:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105c8f:	75 17                	jne    f0105ca8 <env_create+0x374>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105c91:	83 ec 04             	sub    $0x4,%esp
f0105c94:	68 e0 ef 11 f0       	push   $0xf011efe0
f0105c99:	68 5a 02 00 00       	push   $0x25a
f0105c9e:	68 f3 ee 11 f0       	push   $0xf011eef3
f0105ca3:	e8 eb a4 ff ff       	call   f0100193 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0105ca8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cab:	8b 50 04             	mov    0x4(%eax),%edx
f0105cae:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105cb1:	01 d0                	add    %edx,%eax
f0105cb3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0105cb9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0105cbf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105cc4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0105cca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105ccd:	8b 50 04             	mov    0x4(%eax),%edx
f0105cd0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105cd3:	01 d0                	add    %edx,%eax
f0105cd5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105cdb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0105ce1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105ce4:	eb 43                	jmp    f0105d29 <env_create+0x3f5>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0105ce6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105ce9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105cef:	83 ec 04             	sub    $0x4,%esp
f0105cf2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105cf5:	52                   	push   %edx
f0105cf6:	50                   	push   %eax
f0105cf7:	e8 3e 7d 00 00       	call   f010da3a <pf_add_env_page>
f0105cfc:	83 c4 10             	add    $0x10,%esp
f0105cff:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105d02:	75 17                	jne    f0105d1b <env_create+0x3e7>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105d04:	83 ec 04             	sub    $0x4,%esp
f0105d07:	68 e0 ef 11 f0       	push   $0xf011efe0
f0105d0c:	68 67 02 00 00       	push   $0x267
f0105d11:	68 f3 ee 11 f0       	push   $0xf011eef3
f0105d16:	e8 78 a4 ff ff       	call   f0100193 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105d1b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105d22:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0105d29:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105d2c:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0105d32:	72 b2                	jb     f0105ce6 <env_create+0x3b2>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0105d34:	a1 74 da 3c f0       	mov    0xf03cda74,%eax
f0105d39:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0105d3c:	83 ec 04             	sub    $0x4,%esp
f0105d3f:	68 00 10 00 00       	push   $0x1000
f0105d44:	6a 00                	push   $0x0
f0105d46:	ff 75 d0             	pushl  -0x30(%ebp)
f0105d49:	e8 5f 57 01 00       	call   f011b4ad <memset>
f0105d4e:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105d51:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105d57:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105d5a:	eb 13                	jmp    f0105d6f <env_create+0x43b>
		{
			*dst_ptr = *src_ptr;
f0105d5c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105d5f:	8a 10                	mov    (%eax),%dl
f0105d61:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105d64:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105d66:	ff 45 cc             	incl   -0x34(%ebp)
f0105d69:	ff 45 d4             	incl   -0x2c(%ebp)
f0105d6c:	ff 45 d0             	incl   -0x30(%ebp)
f0105d6f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105d72:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0105d78:	72 e2                	jb     f0105d5c <env_create+0x428>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105d7a:	8b 15 74 da 3c f0    	mov    0xf03cda74,%edx
f0105d80:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105d86:	83 ec 04             	sub    $0x4,%esp
f0105d89:	52                   	push   %edx
f0105d8a:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0105d90:	50                   	push   %eax
f0105d91:	e8 a4 7c 00 00       	call   f010da3a <pf_add_env_page>
f0105d96:	83 c4 10             	add    $0x10,%esp
f0105d99:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105d9c:	75 17                	jne    f0105db5 <env_create+0x481>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105d9e:	83 ec 04             	sub    $0x4,%esp
f0105da1:	68 e0 ef 11 f0       	push   $0xf011efe0
f0105da6:	68 76 02 00 00       	push   $0x276
f0105dab:	68 f3 ee 11 f0       	push   $0xf011eef3
f0105db0:	e8 de a3 ff ff       	call   f0100193 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0105db5:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0105dbc:	10 00 00 
f0105dbf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105dc2:	8b 50 04             	mov    0x4(%eax),%edx
f0105dc5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105dc8:	01 c2                	add    %eax,%edx
f0105dca:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0105dd0:	01 d0                	add    %edx,%eax
f0105dd2:	48                   	dec    %eax
f0105dd3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0105dd9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105ddf:	ba 00 00 00 00       	mov    $0x0,%edx
f0105de4:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0105dea:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105df0:	29 d0                	sub    %edx,%eax
f0105df2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0105df5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105df8:	8b 50 08             	mov    0x8(%eax),%edx
f0105dfb:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105dfe:	01 d0                	add    %edx,%eax
f0105e00:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0105e03:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e09:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0105e10:	eb 41                	jmp    f0105e53 <env_create+0x51f>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0105e12:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105e18:	83 ec 04             	sub    $0x4,%esp
f0105e1b:	6a 01                	push   $0x1
f0105e1d:	ff 75 c8             	pushl  -0x38(%ebp)
f0105e20:	50                   	push   %eax
f0105e21:	e8 e2 7a 00 00       	call   f010d908 <pf_add_empty_env_page>
f0105e26:	83 c4 10             	add    $0x10,%esp
f0105e29:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105e2c:	75 17                	jne    f0105e45 <env_create+0x511>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105e2e:	83 ec 04             	sub    $0x4,%esp
f0105e31:	68 e0 ef 11 f0       	push   $0xf011efe0
f0105e36:	68 83 02 00 00       	push   $0x283
f0105e3b:	68 f3 ee 11 f0       	push   $0xf011eef3
f0105e40:	e8 4e a3 ff ff       	call   f0100193 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105e45:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105e4c:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0105e53:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0105e5a:	10 00 00 
f0105e5d:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105e63:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0105e69:	01 d0                	add    %edx,%eax
f0105e6b:	48                   	dec    %eax
f0105e6c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0105e72:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0105e78:	ba 00 00 00 00       	mov    $0x0,%edx
f0105e7d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0105e83:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0105e89:	29 d0                	sub    %edx,%eax
f0105e8b:	89 c2                	mov    %eax,%edx
f0105e8d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105e90:	39 c2                	cmp    %eax,%edx
f0105e92:	0f 87 7a ff ff ff    	ja     f0105e12 <env_create+0x4de>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105e98:	83 ec 08             	sub    $0x8,%esp
f0105e9b:	ff 75 b8             	pushl  -0x48(%ebp)
f0105e9e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ea1:	e8 8e 0b 00 00       	call   f0106a34 <PROGRAM_SEGMENT_NEXT>
f0105ea6:	83 c4 10             	add    $0x10,%esp
f0105ea9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105eac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0105eb0:	0f 85 d2 fc ff ff    	jne    f0105b88 <env_create+0x254>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0105eb6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0105ebd:	e9 9f 00 00 00       	jmp    f0105f61 <env_create+0x62d>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0105ec2:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0105ec8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105ecb:	89 d0                	mov    %edx,%eax
f0105ecd:	c1 e0 02             	shl    $0x2,%eax
f0105ed0:	01 d0                	add    %edx,%eax
f0105ed2:	c1 e0 02             	shl    $0x2,%eax
f0105ed5:	01 c8                	add    %ecx,%eax
f0105ed7:	83 c0 7c             	add    $0x7c,%eax
f0105eda:	8a 00                	mov    (%eax),%al
f0105edc:	84 c0                	test   %al,%al
f0105ede:	75 7e                	jne    f0105f5e <env_create+0x62a>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0105ee0:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0105ee6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105ee9:	89 d0                	mov    %edx,%eax
f0105eeb:	c1 e0 02             	shl    $0x2,%eax
f0105eee:	01 d0                	add    %edx,%eax
f0105ef0:	c1 e0 02             	shl    $0x2,%eax
f0105ef3:	01 c8                	add    %ecx,%eax
f0105ef5:	83 c0 78             	add    $0x78,%eax
f0105ef8:	8b 00                	mov    (%eax),%eax
f0105efa:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, (void *)virtual_address, &ptr_page_table);
f0105f00:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0105f06:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105f0c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105f0f:	83 ec 04             	sub    $0x4,%esp
f0105f12:	8d 8d 1c ff ff ff    	lea    -0xe4(%ebp),%ecx
f0105f18:	51                   	push   %ecx
f0105f19:	52                   	push   %edx
f0105f1a:	50                   	push   %eax
f0105f1b:	e8 4b df ff ff       	call   f0103e6b <get_page_table>
f0105f20:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0105f23:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0105f29:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0105f2f:	c1 ea 0c             	shr    $0xc,%edx
f0105f32:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0105f38:	c1 e2 02             	shl    $0x2,%edx
f0105f3b:	01 d0                	add    %edx,%eax
f0105f3d:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0105f43:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0105f49:	c1 e9 0c             	shr    $0xc,%ecx
f0105f4c:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0105f52:	c1 e1 02             	shl    $0x2,%ecx
f0105f55:	01 ca                	add    %ecx,%edx
f0105f57:	8b 12                	mov    (%edx),%edx
f0105f59:	83 e2 bf             	and    $0xffffffbf,%edx
f0105f5c:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0105f5e:	ff 45 c4             	incl   -0x3c(%ebp)
f0105f61:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105f67:	8b 50 74             	mov    0x74(%eax),%edx
f0105f6a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105f6d:	39 c2                	cmp    %eax,%edx
f0105f6f:	0f 87 4d ff ff ff    	ja     f0105ec2 <env_create+0x58e>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0105f75:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105f78:	8b 50 08             	mov    0x8(%eax),%edx
f0105f7b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105f81:	83 ec 08             	sub    $0x8,%esp
f0105f84:	52                   	push   %edx
f0105f85:	50                   	push   %eax
f0105f86:	e8 c9 0d 00 00       	call   f0106d54 <set_environment_entry_point>
f0105f8b:	83 c4 10             	add    $0x10,%esp
	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	//2020
	e->initNumStackPages = 1 ;
f0105f8e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105f94:	c7 80 ac 52 00 00 01 	movl   $0x1,0x52ac(%eax)
f0105f9b:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0105f9e:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f0105fa5:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0105fa8:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0105faf:	e9 49 05 00 00       	jmp    f01064fd <env_create+0xbc9>
	{
		struct Frame_Info *pp = NULL;
f0105fb4:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0105fbb:	00 00 00 
		allocate_frame(&pp);
f0105fbe:	83 ec 0c             	sub    $0xc,%esp
f0105fc1:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0105fc7:	50                   	push   %eax
f0105fc8:	e8 1f dd ff ff       	call   f0103cec <allocate_frame>
f0105fcd:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, (void*)stackVa, PERM_USER | PERM_WRITEABLE);
f0105fd0:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f0105fd3:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0105fd9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105fdf:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105fe2:	6a 06                	push   $0x6
f0105fe4:	51                   	push   %ecx
f0105fe5:	52                   	push   %edx
f0105fe6:	50                   	push   %eax
f0105fe7:	e8 0c e2 ff ff       	call   f01041f8 <loadtime_map_frame>
f0105fec:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0105fef:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0105ff2:	83 ec 04             	sub    $0x4,%esp
f0105ff5:	68 00 10 00 00       	push   $0x1000
f0105ffa:	6a 00                	push   $0x0
f0105ffc:	50                   	push   %eax
f0105ffd:	e8 ab 54 01 00       	call   f011b4ad <memset>
f0106002:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			//env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
			e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = ROUNDDOWN(stackVa,PAGE_SIZE);
f0106005:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010600b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106011:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106017:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010601a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0106020:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0106026:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010602b:	89 c1                	mov    %eax,%ecx
f010602d:	89 d0                	mov    %edx,%eax
f010602f:	c1 e0 02             	shl    $0x2,%eax
f0106032:	01 d0                	add    %edx,%eax
f0106034:	c1 e0 02             	shl    $0x2,%eax
f0106037:	01 d8                	add    %ebx,%eax
f0106039:	83 c0 78             	add    $0x78,%eax
f010603c:	89 08                	mov    %ecx,(%eax)
			e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010603e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106044:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010604a:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106050:	89 d0                	mov    %edx,%eax
f0106052:	c1 e0 02             	shl    $0x2,%eax
f0106055:	01 d0                	add    %edx,%eax
f0106057:	c1 e0 02             	shl    $0x2,%eax
f010605a:	01 c8                	add    %ecx,%eax
f010605c:	83 c0 7c             	add    $0x7c,%eax
f010605f:	c6 00 00             	movb   $0x0,(%eax)
			env_page_ws_set_time_stamp(e, e->page_last_WS_index);
f0106062:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106068:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f010606e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106074:	83 ec 08             	sub    $0x8,%esp
f0106077:	52                   	push   %edx
f0106078:	50                   	push   %eax
f0106079:	e8 7d e4 ff ff       	call   f01044fb <env_page_ws_set_time_stamp>
f010607e:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRULists())
f0106081:	e8 60 29 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f0106086:	85 c0                	test   %eax,%eax
f0106088:	0f 84 0e 04 00 00    	je     f010649c <env_create+0xb68>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010608e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106094:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010609a:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01060a0:	89 d0                	mov    %edx,%eax
f01060a2:	c1 e0 02             	shl    $0x2,%eax
f01060a5:	01 d0                	add    %edx,%eax
f01060a7:	c1 e0 02             	shl    $0x2,%eax
f01060aa:	01 c8                	add    %ecx,%eax
f01060ac:	05 84 00 00 00       	add    $0x84,%eax
f01060b1:	8b 00                	mov    (%eax),%eax
f01060b3:	85 c0                	test   %eax,%eax
f01060b5:	74 4f                	je     f0106106 <env_create+0x7d2>
f01060b7:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01060bd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01060c3:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01060c9:	89 d0                	mov    %edx,%eax
f01060cb:	c1 e0 02             	shl    $0x2,%eax
f01060ce:	01 d0                	add    %edx,%eax
f01060d0:	c1 e0 02             	shl    $0x2,%eax
f01060d3:	01 c8                	add    %ecx,%eax
f01060d5:	05 84 00 00 00       	add    $0x84,%eax
f01060da:	8b 10                	mov    (%eax),%edx
f01060dc:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01060e2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01060e8:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f01060ee:	89 c8                	mov    %ecx,%eax
f01060f0:	c1 e0 02             	shl    $0x2,%eax
f01060f3:	01 c8                	add    %ecx,%eax
f01060f5:	c1 e0 02             	shl    $0x2,%eax
f01060f8:	01 d8                	add    %ebx,%eax
f01060fa:	05 88 00 00 00       	add    $0x88,%eax
f01060ff:	8b 00                	mov    (%eax),%eax
f0106101:	89 42 10             	mov    %eax,0x10(%edx)
f0106104:	eb 31                	jmp    f0106137 <env_create+0x803>
f0106106:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010610c:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0106112:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106118:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f010611e:	89 c8                	mov    %ecx,%eax
f0106120:	c1 e0 02             	shl    $0x2,%eax
f0106123:	01 c8                	add    %ecx,%eax
f0106125:	c1 e0 02             	shl    $0x2,%eax
f0106128:	01 d8                	add    %ebx,%eax
f010612a:	05 88 00 00 00       	add    $0x88,%eax
f010612f:	8b 00                	mov    (%eax),%eax
f0106131:	89 82 04 53 00 00    	mov    %eax,0x5304(%edx)
f0106137:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010613d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106143:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106149:	89 d0                	mov    %edx,%eax
f010614b:	c1 e0 02             	shl    $0x2,%eax
f010614e:	01 d0                	add    %edx,%eax
f0106150:	c1 e0 02             	shl    $0x2,%eax
f0106153:	01 c8                	add    %ecx,%eax
f0106155:	05 88 00 00 00       	add    $0x88,%eax
f010615a:	8b 00                	mov    (%eax),%eax
f010615c:	85 c0                	test   %eax,%eax
f010615e:	74 4f                	je     f01061af <env_create+0x87b>
f0106160:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106166:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010616c:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106172:	89 d0                	mov    %edx,%eax
f0106174:	c1 e0 02             	shl    $0x2,%eax
f0106177:	01 d0                	add    %edx,%eax
f0106179:	c1 e0 02             	shl    $0x2,%eax
f010617c:	01 c8                	add    %ecx,%eax
f010617e:	05 88 00 00 00       	add    $0x88,%eax
f0106183:	8b 10                	mov    (%eax),%edx
f0106185:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010618b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106191:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f0106197:	89 c8                	mov    %ecx,%eax
f0106199:	c1 e0 02             	shl    $0x2,%eax
f010619c:	01 c8                	add    %ecx,%eax
f010619e:	c1 e0 02             	shl    $0x2,%eax
f01061a1:	01 d8                	add    %ebx,%eax
f01061a3:	05 84 00 00 00       	add    $0x84,%eax
f01061a8:	8b 00                	mov    (%eax),%eax
f01061aa:	89 42 0c             	mov    %eax,0xc(%edx)
f01061ad:	eb 31                	jmp    f01061e0 <env_create+0x8ac>
f01061af:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01061b5:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01061bb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01061c1:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f01061c7:	89 c8                	mov    %ecx,%eax
f01061c9:	c1 e0 02             	shl    $0x2,%eax
f01061cc:	01 c8                	add    %ecx,%eax
f01061ce:	c1 e0 02             	shl    $0x2,%eax
f01061d1:	01 d8                	add    %ebx,%eax
f01061d3:	05 84 00 00 00       	add    $0x84,%eax
f01061d8:	8b 00                	mov    (%eax),%eax
f01061da:	89 82 00 53 00 00    	mov    %eax,0x5300(%edx)
f01061e0:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01061e6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01061ec:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01061f2:	89 d0                	mov    %edx,%eax
f01061f4:	c1 e0 02             	shl    $0x2,%eax
f01061f7:	01 d0                	add    %edx,%eax
f01061f9:	c1 e0 02             	shl    $0x2,%eax
f01061fc:	01 c8                	add    %ecx,%eax
f01061fe:	05 84 00 00 00       	add    $0x84,%eax
f0106203:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106209:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010620f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106215:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f010621b:	89 d0                	mov    %edx,%eax
f010621d:	c1 e0 02             	shl    $0x2,%eax
f0106220:	01 d0                	add    %edx,%eax
f0106222:	c1 e0 02             	shl    $0x2,%eax
f0106225:	01 c8                	add    %ecx,%eax
f0106227:	05 88 00 00 00       	add    $0x88,%eax
f010622c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106232:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106238:	8b 90 0c 53 00 00    	mov    0x530c(%eax),%edx
f010623e:	4a                   	dec    %edx
f010623f:	89 90 0c 53 00 00    	mov    %edx,0x530c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0106245:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010624b:	8b 90 1c 53 00 00    	mov    0x531c(%eax),%edx
f0106251:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106257:	8b 80 30 53 00 00    	mov    0x5330(%eax),%eax
f010625d:	39 c2                	cmp    %eax,%edx
f010625f:	0f 83 1e 01 00 00    	jae    f0106383 <env_create+0xa4f>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0106265:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010626b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106271:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106277:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010627d:	8b 98 10 53 00 00    	mov    0x5310(%eax),%ebx
f0106283:	89 d0                	mov    %edx,%eax
f0106285:	c1 e0 02             	shl    $0x2,%eax
f0106288:	01 d0                	add    %edx,%eax
f010628a:	c1 e0 02             	shl    $0x2,%eax
f010628d:	01 c8                	add    %ecx,%eax
f010628f:	05 84 00 00 00       	add    $0x84,%eax
f0106294:	89 18                	mov    %ebx,(%eax)
f0106296:	89 d0                	mov    %edx,%eax
f0106298:	c1 e0 02             	shl    $0x2,%eax
f010629b:	01 d0                	add    %edx,%eax
f010629d:	c1 e0 02             	shl    $0x2,%eax
f01062a0:	01 c8                	add    %ecx,%eax
f01062a2:	05 84 00 00 00       	add    $0x84,%eax
f01062a7:	8b 00                	mov    (%eax),%eax
f01062a9:	85 c0                	test   %eax,%eax
f01062ab:	74 35                	je     f01062e2 <env_create+0x9ae>
f01062ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01062b3:	8b 90 10 53 00 00    	mov    0x5310(%eax),%edx
f01062b9:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01062bf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01062c5:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f01062cb:	89 c8                	mov    %ecx,%eax
f01062cd:	c1 e0 02             	shl    $0x2,%eax
f01062d0:	01 c8                	add    %ecx,%eax
f01062d2:	c1 e0 02             	shl    $0x2,%eax
f01062d5:	83 c0 70             	add    $0x70,%eax
f01062d8:	01 d8                	add    %ebx,%eax
f01062da:	83 c0 08             	add    $0x8,%eax
f01062dd:	89 42 10             	mov    %eax,0x10(%edx)
f01062e0:	eb 30                	jmp    f0106312 <env_create+0x9de>
f01062e2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01062e8:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01062ee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01062f4:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f01062fa:	89 c8                	mov    %ecx,%eax
f01062fc:	c1 e0 02             	shl    $0x2,%eax
f01062ff:	01 c8                	add    %ecx,%eax
f0106301:	c1 e0 02             	shl    $0x2,%eax
f0106304:	83 c0 70             	add    $0x70,%eax
f0106307:	01 d8                	add    %ebx,%eax
f0106309:	83 c0 08             	add    $0x8,%eax
f010630c:	89 82 14 53 00 00    	mov    %eax,0x5314(%edx)
f0106312:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106318:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010631e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106324:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f010632a:	89 c8                	mov    %ecx,%eax
f010632c:	c1 e0 02             	shl    $0x2,%eax
f010632f:	01 c8                	add    %ecx,%eax
f0106331:	c1 e0 02             	shl    $0x2,%eax
f0106334:	83 c0 70             	add    $0x70,%eax
f0106337:	01 d8                	add    %ebx,%eax
f0106339:	83 c0 08             	add    $0x8,%eax
f010633c:	89 82 10 53 00 00    	mov    %eax,0x5310(%edx)
f0106342:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106348:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010634e:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106354:	89 d0                	mov    %edx,%eax
f0106356:	c1 e0 02             	shl    $0x2,%eax
f0106359:	01 d0                	add    %edx,%eax
f010635b:	c1 e0 02             	shl    $0x2,%eax
f010635e:	01 c8                	add    %ecx,%eax
f0106360:	05 88 00 00 00       	add    $0x88,%eax
f0106365:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010636b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106371:	8b 90 1c 53 00 00    	mov    0x531c(%eax),%edx
f0106377:	42                   	inc    %edx
f0106378:	89 90 1c 53 00 00    	mov    %edx,0x531c(%eax)
f010637e:	e9 19 01 00 00       	jmp    f010649c <env_create+0xb68>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0106383:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106389:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010638f:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106395:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010639b:	8b 98 20 53 00 00    	mov    0x5320(%eax),%ebx
f01063a1:	89 d0                	mov    %edx,%eax
f01063a3:	c1 e0 02             	shl    $0x2,%eax
f01063a6:	01 d0                	add    %edx,%eax
f01063a8:	c1 e0 02             	shl    $0x2,%eax
f01063ab:	01 c8                	add    %ecx,%eax
f01063ad:	05 84 00 00 00       	add    $0x84,%eax
f01063b2:	89 18                	mov    %ebx,(%eax)
f01063b4:	89 d0                	mov    %edx,%eax
f01063b6:	c1 e0 02             	shl    $0x2,%eax
f01063b9:	01 d0                	add    %edx,%eax
f01063bb:	c1 e0 02             	shl    $0x2,%eax
f01063be:	01 c8                	add    %ecx,%eax
f01063c0:	05 84 00 00 00       	add    $0x84,%eax
f01063c5:	8b 00                	mov    (%eax),%eax
f01063c7:	85 c0                	test   %eax,%eax
f01063c9:	74 35                	je     f0106400 <env_create+0xacc>
f01063cb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01063d1:	8b 90 20 53 00 00    	mov    0x5320(%eax),%edx
f01063d7:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01063dd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01063e3:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f01063e9:	89 c8                	mov    %ecx,%eax
f01063eb:	c1 e0 02             	shl    $0x2,%eax
f01063ee:	01 c8                	add    %ecx,%eax
f01063f0:	c1 e0 02             	shl    $0x2,%eax
f01063f3:	83 c0 70             	add    $0x70,%eax
f01063f6:	01 d8                	add    %ebx,%eax
f01063f8:	83 c0 08             	add    $0x8,%eax
f01063fb:	89 42 10             	mov    %eax,0x10(%edx)
f01063fe:	eb 30                	jmp    f0106430 <env_create+0xafc>
f0106400:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106406:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010640c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106412:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f0106418:	89 c8                	mov    %ecx,%eax
f010641a:	c1 e0 02             	shl    $0x2,%eax
f010641d:	01 c8                	add    %ecx,%eax
f010641f:	c1 e0 02             	shl    $0x2,%eax
f0106422:	83 c0 70             	add    $0x70,%eax
f0106425:	01 d8                	add    %ebx,%eax
f0106427:	83 c0 08             	add    $0x8,%eax
f010642a:	89 82 24 53 00 00    	mov    %eax,0x5324(%edx)
f0106430:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106436:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010643c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106442:	8b 88 80 52 00 00    	mov    0x5280(%eax),%ecx
f0106448:	89 c8                	mov    %ecx,%eax
f010644a:	c1 e0 02             	shl    $0x2,%eax
f010644d:	01 c8                	add    %ecx,%eax
f010644f:	c1 e0 02             	shl    $0x2,%eax
f0106452:	83 c0 70             	add    $0x70,%eax
f0106455:	01 d8                	add    %ebx,%eax
f0106457:	83 c0 08             	add    $0x8,%eax
f010645a:	89 82 20 53 00 00    	mov    %eax,0x5320(%edx)
f0106460:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106466:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010646c:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0106472:	89 d0                	mov    %edx,%eax
f0106474:	c1 e0 02             	shl    $0x2,%eax
f0106477:	01 d0                	add    %edx,%eax
f0106479:	c1 e0 02             	shl    $0x2,%eax
f010647c:	01 c8                	add    %ecx,%eax
f010647e:	05 88 00 00 00       	add    $0x88,%eax
f0106483:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106489:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010648f:	8b 90 2c 53 00 00    	mov    0x532c(%eax),%edx
f0106495:	42                   	inc    %edx
f0106496:	89 90 2c 53 00 00    	mov    %edx,0x532c(%eax)
				}
			}
			e->page_last_WS_index ++;
f010649c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01064a2:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01064a8:	42                   	inc    %edx
f01064a9:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f01064af:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01064b5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01064bb:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01064c1:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f01064c7:	8b 5a 74             	mov    0x74(%edx),%ebx
f01064ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01064cf:	f7 f3                	div    %ebx
f01064d1:	89 d0                	mov    %edx,%eax
f01064d3:	89 81 80 52 00 00    	mov    %eax,0x5280(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f01064d9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01064df:	83 ec 04             	sub    $0x4,%esp
f01064e2:	6a 01                	push   $0x1
f01064e4:	ff 75 c0             	pushl  -0x40(%ebp)
f01064e7:	50                   	push   %eax
f01064e8:	e8 1b 74 00 00       	call   f010d908 <pf_add_empty_env_page>
f01064ed:	83 c4 10             	add    $0x10,%esp
f01064f0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01064f6:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f01064fd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0106500:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0106506:	0f 83 a8 fa ff ff    	jae    f0105fb4 <env_create+0x680>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRULists())
f010650c:	e8 d5 24 00 00       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f0106511:	85 c0                	test   %eax,%eax
f0106513:	0f 84 c3 00 00 00    	je     f01065dc <env_create+0xca8>
	{
		struct WorkingSetElement * elm = NULL;
f0106519:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0106520:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106526:	8b 80 20 53 00 00    	mov    0x5320(%eax),%eax
f010652c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010652f:	eb 74                	jmp    f01065a5 <env_create+0xc71>
		{
			//set it's PRESENT bit to 0
			//pt_set_page_permissions(e, elm->virtual_address, 0, PERM_PRESENT);
			uint32 *ptr_table = NULL;
f0106531:	c7 85 14 ff ff ff 00 	movl   $0x0,-0xec(%ebp)
f0106538:	00 00 00 
			get_page_table(e->env_page_directory,(void*) elm->virtual_address, &ptr_table);
f010653b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010653e:	8b 00                	mov    (%eax),%eax
f0106540:	89 c1                	mov    %eax,%ecx
f0106542:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106548:	8b 40 5c             	mov    0x5c(%eax),%eax
f010654b:	83 ec 04             	sub    $0x4,%esp
f010654e:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f0106554:	52                   	push   %edx
f0106555:	51                   	push   %ecx
f0106556:	50                   	push   %eax
f0106557:	e8 0f d9 ff ff       	call   f0103e6b <get_page_table>
f010655c:	83 c4 10             	add    $0x10,%esp
			ptr_table[PTX(elm->virtual_address)] &= ~PERM_PRESENT;
f010655f:	8b 95 14 ff ff ff    	mov    -0xec(%ebp),%edx
f0106565:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0106568:	8b 00                	mov    (%eax),%eax
f010656a:	c1 e8 0c             	shr    $0xc,%eax
f010656d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106572:	c1 e0 02             	shl    $0x2,%eax
f0106575:	01 c2                	add    %eax,%edx
f0106577:	8b 8d 14 ff ff ff    	mov    -0xec(%ebp),%ecx
f010657d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0106580:	8b 00                	mov    (%eax),%eax
f0106582:	c1 e8 0c             	shr    $0xc,%eax
f0106585:	25 ff 03 00 00       	and    $0x3ff,%eax
f010658a:	c1 e0 02             	shl    $0x2,%eax
f010658d:	01 c8                	add    %ecx,%eax
f010658f:	8b 00                	mov    (%eax),%eax
f0106591:	83 e0 fe             	and    $0xfffffffe,%eax
f0106594:	89 02                	mov    %eax,(%edx)
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRULists())
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0106596:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010659c:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f01065a2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01065a5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01065ab:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01065af:	74 08                	je     f01065b9 <env_create+0xc85>
f01065b1:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01065b4:	8b 52 0c             	mov    0xc(%edx),%edx
f01065b7:	eb 05                	jmp    f01065be <env_create+0xc8a>
f01065b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01065be:	89 90 28 53 00 00    	mov    %edx,0x5328(%eax)
f01065c4:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f01065ca:	85 c0                	test   %eax,%eax
f01065cc:	0f 85 5f ff ff ff    	jne    f0106531 <env_create+0xbfd>
f01065d2:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01065d6:	0f 85 55 ff ff ff    	jne    f0106531 <env_create+0xbfd>
f01065dc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01065df:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01065e2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01065e5:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01065e8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f01065ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01065f1:	5b                   	pop    %ebx
f01065f2:	5e                   	pop    %esi
f01065f3:	5f                   	pop    %edi
f01065f4:	5d                   	pop    %ebp
f01065f5:	c3                   	ret    

f01065f6 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01065f6:	55                   	push   %ebp
f01065f7:	89 e5                	mov    %esp,%ebp
f01065f9:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f01065fc:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0106601:	3b 45 08             	cmp    0x8(%ebp),%eax
f0106604:	74 25                	je     f010662b <env_run+0x35>
	{
		curenv = e ;
f0106606:	8b 45 08             	mov    0x8(%ebp),%eax
f0106609:	a3 50 21 34 f0       	mov    %eax,0xf0342150
		curenv->env_runs++ ;
f010660e:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0106613:	8b 50 58             	mov    0x58(%eax),%edx
f0106616:	42                   	inc    %edx
f0106617:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f010661a:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010661f:	8b 40 60             	mov    0x60(%eax),%eax
f0106622:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106625:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106628:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010662b:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0106630:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0106637:	e8 c3 09 00 00       	call   f0106fff <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010663c:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0106641:	83 ec 0c             	sub    $0xc,%esp
f0106644:	50                   	push   %eax
f0106645:	e8 57 08 00 00       	call   f0106ea1 <env_pop_tf>

f010664a <__remove_pws_user_pages>:
}

void __remove_pws_user_pages(struct Env *e)
{
f010664a:	55                   	push   %ebp
f010664b:	89 e5                	mov    %esp,%ebp
f010664d:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("kernel heap is disabled.");
f0106650:	83 ec 04             	sub    $0x4,%esp
f0106653:	68 25 f0 11 f0       	push   $0xf011f025
f0106658:	68 24 03 00 00       	push   $0x324
f010665d:	68 f3 ee 11 f0       	push   $0xf011eef3
f0106662:	e8 2c 9b ff ff       	call   f0100193 <_panic>

f0106667 <start_env_free>:
extern uint32 isBufferingEnabled();
void __env_free_with_buffering(struct Env *e);
void env_free(struct Env *e);

void start_env_free(struct Env *e)
{
f0106667:	55                   	push   %ebp
f0106668:	89 e5                	mov    %esp,%ebp
f010666a:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010666d:	e8 06 24 00 00       	call   f0108a78 <isBufferingEnabled>
f0106672:	85 c0                	test   %eax,%eax
f0106674:	74 10                	je     f0106686 <start_env_free+0x1f>
	{
		__env_free_with_buffering(e);
f0106676:	83 ec 0c             	sub    $0xc,%esp
f0106679:	ff 75 08             	pushl  0x8(%ebp)
f010667c:	e8 41 00 00 00       	call   f01066c2 <__env_free_with_buffering>
f0106681:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		env_free(e);
	}
}
f0106684:	eb 0e                	jmp    f0106694 <start_env_free+0x2d>
	{
		__env_free_with_buffering(e);
	}
	else
	{
		env_free(e);
f0106686:	83 ec 0c             	sub    $0xc,%esp
f0106689:	ff 75 08             	pushl  0x8(%ebp)
f010668c:	e8 06 00 00 00       	call   f0106697 <env_free>
f0106691:	83 c4 10             	add    $0x10,%esp
	}
}
f0106694:	90                   	nop
f0106695:	c9                   	leave  
f0106696:	c3                   	ret    

f0106697 <env_free>:

void env_free(struct Env *e)
{
f0106697:	55                   	push   %ebp
f0106698:	89 e5                	mov    %esp,%ebp
f010669a:	83 ec 08             	sub    $0x8,%esp
	__remove_pws_user_pages(e);
f010669d:	83 ec 0c             	sub    $0xc,%esp
f01066a0:	ff 75 08             	pushl  0x8(%ebp)
f01066a3:	e8 a2 ff ff ff       	call   f010664a <__remove_pws_user_pages>
f01066a8:	83 c4 10             	add    $0x10,%esp

	//YOUR CODE STARTS HERE, remove the panic and write your code ----
	panic("this function is not required...!!");
f01066ab:	83 ec 04             	sub    $0x4,%esp
f01066ae:	68 d0 ee 11 f0       	push   $0xf011eed0
f01066b3:	68 3f 03 00 00       	push   $0x33f
f01066b8:	68 f3 ee 11 f0       	push   $0xf011eef3
f01066bd:	e8 d1 9a ff ff       	call   f0100193 <_panic>

f01066c2 <__env_free_with_buffering>:
	pf_free_env(e); /*(ALREADY DONE for you)*/ // (removes all of the program pages from the page file)
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
}

void __env_free_with_buffering(struct Env *e)
{
f01066c2:	55                   	push   %ebp
f01066c3:	89 e5                	mov    %esp,%ebp
f01066c5:	83 ec 08             	sub    $0x8,%esp
	__remove_pws_user_pages(e);
f01066c8:	83 ec 0c             	sub    $0xc,%esp
f01066cb:	ff 75 08             	pushl  0x8(%ebp)
f01066ce:	e8 77 ff ff ff       	call   f010664a <__remove_pws_user_pages>
f01066d3:	83 c4 10             	add    $0x10,%esp

	panic("this function is not required...!!");
f01066d6:	83 ec 04             	sub    $0x4,%esp
f01066d9:	68 d0 ee 11 f0       	push   $0xf011eed0
f01066de:	68 51 03 00 00       	push   $0x351
f01066e3:	68 f3 ee 11 f0       	push   $0xf011eef3
f01066e8:	e8 a6 9a ff ff       	call   f0100193 <_panic>

f01066ed <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01066ed:	55                   	push   %ebp
f01066ee:	89 e5                	mov    %esp,%ebp
f01066f0:	56                   	push   %esi
f01066f1:	53                   	push   %ebx
f01066f2:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f01066f5:	c7 45 f4 30 00 00 00 	movl   $0x30,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f01066fc:	e9 59 01 00 00       	jmp    f010685a <env_init+0x16d>
	{
		envs[iEnv].env_status = ENV_FREE;
f0106701:	8b 0d 4c 21 34 f0    	mov    0xf034214c,%ecx
f0106707:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010670a:	89 d0                	mov    %edx,%eax
f010670c:	c1 e0 03             	shl    $0x3,%eax
f010670f:	01 d0                	add    %edx,%eax
f0106711:	c1 e0 02             	shl    $0x2,%eax
f0106714:	01 d0                	add    %edx,%eax
f0106716:	c1 e0 06             	shl    $0x6,%eax
f0106719:	29 d0                	sub    %edx,%eax
f010671b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106722:	01 d8                	add    %ebx,%eax
f0106724:	01 d0                	add    %edx,%eax
f0106726:	01 c8                	add    %ecx,%eax
f0106728:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010672f:	8b 0d 4c 21 34 f0    	mov    0xf034214c,%ecx
f0106735:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106738:	89 d0                	mov    %edx,%eax
f010673a:	c1 e0 03             	shl    $0x3,%eax
f010673d:	01 d0                	add    %edx,%eax
f010673f:	c1 e0 02             	shl    $0x2,%eax
f0106742:	01 d0                	add    %edx,%eax
f0106744:	c1 e0 06             	shl    $0x6,%eax
f0106747:	29 d0                	sub    %edx,%eax
f0106749:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106750:	01 d8                	add    %ebx,%eax
f0106752:	01 d0                	add    %edx,%eax
f0106754:	01 c8                	add    %ecx,%eax
f0106756:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010675d:	8b 0d 4c 21 34 f0    	mov    0xf034214c,%ecx
f0106763:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106766:	89 d0                	mov    %edx,%eax
f0106768:	c1 e0 03             	shl    $0x3,%eax
f010676b:	01 d0                	add    %edx,%eax
f010676d:	c1 e0 02             	shl    $0x2,%eax
f0106770:	01 d0                	add    %edx,%eax
f0106772:	c1 e0 06             	shl    $0x6,%eax
f0106775:	29 d0                	sub    %edx,%eax
f0106777:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010677e:	01 d8                	add    %ebx,%eax
f0106780:	01 d0                	add    %edx,%eax
f0106782:	01 c8                	add    %ecx,%eax
f0106784:	8b 15 54 21 34 f0    	mov    0xf0342154,%edx
f010678a:	89 50 44             	mov    %edx,0x44(%eax)
f010678d:	8b 40 44             	mov    0x44(%eax),%eax
f0106790:	85 c0                	test   %eax,%eax
f0106792:	74 32                	je     f01067c6 <env_init+0xd9>
f0106794:	8b 0d 54 21 34 f0    	mov    0xf0342154,%ecx
f010679a:	8b 1d 4c 21 34 f0    	mov    0xf034214c,%ebx
f01067a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067a3:	89 d0                	mov    %edx,%eax
f01067a5:	c1 e0 03             	shl    $0x3,%eax
f01067a8:	01 d0                	add    %edx,%eax
f01067aa:	c1 e0 02             	shl    $0x2,%eax
f01067ad:	01 d0                	add    %edx,%eax
f01067af:	c1 e0 06             	shl    $0x6,%eax
f01067b2:	29 d0                	sub    %edx,%eax
f01067b4:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f01067bb:	01 f0                	add    %esi,%eax
f01067bd:	01 d0                	add    %edx,%eax
f01067bf:	01 d8                	add    %ebx,%eax
f01067c1:	89 41 48             	mov    %eax,0x48(%ecx)
f01067c4:	eb 2c                	jmp    f01067f2 <env_init+0x105>
f01067c6:	8b 0d 4c 21 34 f0    	mov    0xf034214c,%ecx
f01067cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067cf:	89 d0                	mov    %edx,%eax
f01067d1:	c1 e0 03             	shl    $0x3,%eax
f01067d4:	01 d0                	add    %edx,%eax
f01067d6:	c1 e0 02             	shl    $0x2,%eax
f01067d9:	01 d0                	add    %edx,%eax
f01067db:	c1 e0 06             	shl    $0x6,%eax
f01067de:	29 d0                	sub    %edx,%eax
f01067e0:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01067e7:	01 d8                	add    %ebx,%eax
f01067e9:	01 d0                	add    %edx,%eax
f01067eb:	01 c8                	add    %ecx,%eax
f01067ed:	a3 58 21 34 f0       	mov    %eax,0xf0342158
f01067f2:	8b 0d 4c 21 34 f0    	mov    0xf034214c,%ecx
f01067f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067fb:	89 d0                	mov    %edx,%eax
f01067fd:	c1 e0 03             	shl    $0x3,%eax
f0106800:	01 d0                	add    %edx,%eax
f0106802:	c1 e0 02             	shl    $0x2,%eax
f0106805:	01 d0                	add    %edx,%eax
f0106807:	c1 e0 06             	shl    $0x6,%eax
f010680a:	29 d0                	sub    %edx,%eax
f010680c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0106813:	01 d8                	add    %ebx,%eax
f0106815:	01 d0                	add    %edx,%eax
f0106817:	01 c8                	add    %ecx,%eax
f0106819:	a3 54 21 34 f0       	mov    %eax,0xf0342154
f010681e:	8b 0d 4c 21 34 f0    	mov    0xf034214c,%ecx
f0106824:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106827:	89 d0                	mov    %edx,%eax
f0106829:	c1 e0 03             	shl    $0x3,%eax
f010682c:	01 d0                	add    %edx,%eax
f010682e:	c1 e0 02             	shl    $0x2,%eax
f0106831:	01 d0                	add    %edx,%eax
f0106833:	c1 e0 06             	shl    $0x6,%eax
f0106836:	29 d0                	sub    %edx,%eax
f0106838:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010683f:	01 d8                	add    %ebx,%eax
f0106841:	01 d0                	add    %edx,%eax
f0106843:	01 c8                	add    %ecx,%eax
f0106845:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010684c:	a1 60 21 34 f0       	mov    0xf0342160,%eax
f0106851:	40                   	inc    %eax
f0106852:	a3 60 21 34 f0       	mov    %eax,0xf0342160
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0106857:	ff 4d f4             	decl   -0xc(%ebp)
f010685a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010685e:	0f 89 9d fe ff ff    	jns    f0106701 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0106864:	90                   	nop
f0106865:	83 c4 10             	add    $0x10,%esp
f0106868:	5b                   	pop    %ebx
f0106869:	5e                   	pop    %esi
f010686a:	5d                   	pop    %ebp
f010686b:	c3                   	ret    

f010686c <complete_environment_initialization>:

void complete_environment_initialization(struct Env* e)
{
f010686c:	55                   	push   %ebp
f010686d:	89 e5                	mov    %esp,%ebp
f010686f:	83 ec 18             	sub    $0x18,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0106872:	8b 45 08             	mov    0x8(%ebp),%eax
f0106875:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106878:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010687e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106881:	8b 40 60             	mov    0x60(%eax),%eax
f0106884:	83 c8 03             	or     $0x3,%eax
f0106887:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f0106889:	8b 45 08             	mov    0x8(%ebp),%eax
f010688c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010688f:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106895:	8b 45 08             	mov    0x8(%ebp),%eax
f0106898:	8b 40 60             	mov    0x60(%eax),%eax
f010689b:	83 c8 05             	or     $0x5,%eax
f010689e:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f01068a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01068a3:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f01068aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01068ad:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f01068b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01068b7:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f01068be:	8b 45 08             	mov    0x8(%ebp),%eax
f01068c1:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
f01068c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01068cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01068ce:	05 00 10 00 00       	add    $0x1000,%eax
f01068d3:	83 e0 cf             	and    $0xffffffcf,%eax
f01068d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f01068d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01068dd:	7f 07                	jg     f01068e6 <complete_environment_initialization+0x7a>
		generation = 1 << ENVGENSHIFT;
f01068df:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f01068e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01068e9:	8b 15 4c 21 34 f0    	mov    0xf034214c,%edx
f01068ef:	29 d0                	sub    %edx,%eax
f01068f1:	c1 f8 03             	sar    $0x3,%eax
f01068f4:	89 c1                	mov    %eax,%ecx
f01068f6:	89 ca                	mov    %ecx,%edx
f01068f8:	c1 e2 02             	shl    $0x2,%edx
f01068fb:	01 ca                	add    %ecx,%edx
f01068fd:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0106904:	01 c2                	add    %eax,%edx
f0106906:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010690d:	01 c2                	add    %eax,%edx
f010690f:	89 d0                	mov    %edx,%eax
f0106911:	c1 e0 06             	shl    $0x6,%eax
f0106914:	29 d0                	sub    %edx,%eax
f0106916:	c1 e0 03             	shl    $0x3,%eax
f0106919:	01 c8                	add    %ecx,%eax
f010691b:	c1 e0 03             	shl    $0x3,%eax
f010691e:	01 c8                	add    %ecx,%eax
f0106920:	01 c0                	add    %eax,%eax
f0106922:	01 c8                	add    %ecx,%eax
f0106924:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010692b:	01 d0                	add    %edx,%eax
f010692d:	c1 e0 03             	shl    $0x3,%eax
f0106930:	29 c8                	sub    %ecx,%eax
f0106932:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106935:	89 c2                	mov    %eax,%edx
f0106937:	8b 45 08             	mov    0x8(%ebp),%eax
f010693a:	89 50 4c             	mov    %edx,0x4c(%eax)

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010693d:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0106942:	85 c0                	test   %eax,%eax
f0106944:	75 0c                	jne    f0106952 <complete_environment_initialization+0xe6>
		e->env_parent_id = 0;//no parent;
f0106946:	8b 45 08             	mov    0x8(%ebp),%eax
f0106949:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f0106950:	eb 0e                	jmp    f0106960 <complete_environment_initialization+0xf4>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f0106952:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0106957:	8b 50 4c             	mov    0x4c(%eax),%edx
f010695a:	8b 45 08             	mov    0x8(%ebp),%eax
f010695d:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f0106960:	8b 45 08             	mov    0x8(%ebp),%eax
f0106963:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010696a:	8b 45 08             	mov    0x8(%ebp),%eax
f010696d:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0106974:	8b 45 08             	mov    0x8(%ebp),%eax
f0106977:	83 ec 04             	sub    $0x4,%esp
f010697a:	6a 44                	push   $0x44
f010697c:	6a 00                	push   $0x0
f010697e:	50                   	push   %eax
f010697f:	e8 29 4b 01 00       	call   f011b4ad <memset>
f0106984:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f0106987:	8b 45 08             	mov    0x8(%ebp),%eax
f010698a:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f0106990:	8b 45 08             	mov    0x8(%ebp),%eax
f0106993:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f0106999:	8b 45 08             	mov    0x8(%ebp),%eax
f010699c:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f01069a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01069a5:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f01069ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01069af:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f01069b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b8:	8b 40 38             	mov    0x38(%eax),%eax
f01069bb:	80 cc 02             	or     $0x2,%ah
f01069be:	89 c2                	mov    %eax,%edx
f01069c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c3:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f01069c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c9:	8b 40 44             	mov    0x44(%eax),%eax
f01069cc:	85 c0                	test   %eax,%eax
f01069ce:	74 11                	je     f01069e1 <complete_environment_initialization+0x175>
f01069d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d3:	8b 40 44             	mov    0x44(%eax),%eax
f01069d6:	8b 55 08             	mov    0x8(%ebp),%edx
f01069d9:	8b 52 48             	mov    0x48(%edx),%edx
f01069dc:	89 50 48             	mov    %edx,0x48(%eax)
f01069df:	eb 0b                	jmp    f01069ec <complete_environment_initialization+0x180>
f01069e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069e4:	8b 40 48             	mov    0x48(%eax),%eax
f01069e7:	a3 58 21 34 f0       	mov    %eax,0xf0342158
f01069ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ef:	8b 40 48             	mov    0x48(%eax),%eax
f01069f2:	85 c0                	test   %eax,%eax
f01069f4:	74 11                	je     f0106a07 <complete_environment_initialization+0x19b>
f01069f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01069f9:	8b 40 48             	mov    0x48(%eax),%eax
f01069fc:	8b 55 08             	mov    0x8(%ebp),%edx
f01069ff:	8b 52 44             	mov    0x44(%edx),%edx
f0106a02:	89 50 44             	mov    %edx,0x44(%eax)
f0106a05:	eb 0b                	jmp    f0106a12 <complete_environment_initialization+0x1a6>
f0106a07:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a0a:	8b 40 44             	mov    0x44(%eax),%eax
f0106a0d:	a3 54 21 34 f0       	mov    %eax,0xf0342154
f0106a12:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a15:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0106a1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a1f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0106a26:	a1 60 21 34 f0       	mov    0xf0342160,%eax
f0106a2b:	48                   	dec    %eax
f0106a2c:	a3 60 21 34 f0       	mov    %eax,0xf0342160
	return ;
f0106a31:	90                   	nop
}
f0106a32:	c9                   	leave  
f0106a33:	c3                   	ret    

f0106a34 <PROGRAM_SEGMENT_NEXT>:

struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f0106a34:	55                   	push   %ebp
f0106a35:	89 e5                	mov    %esp,%ebp
f0106a37:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f0106a3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a3d:	8b 40 10             	mov    0x10(%eax),%eax
f0106a40:	8d 48 01             	lea    0x1(%eax),%ecx
f0106a43:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a46:	89 4a 10             	mov    %ecx,0x10(%edx)
f0106a49:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106a4c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106a52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a55:	8b 00                	mov    (%eax),%eax
f0106a57:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106a5c:	74 17                	je     f0106a75 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f0106a5e:	83 ec 04             	sub    $0x4,%esp
f0106a61:	68 3e f0 11 f0       	push   $0xf011f03e
f0106a66:	68 a7 03 00 00       	push   $0x3a7
f0106a6b:	68 f3 ee 11 f0       	push   $0xf011eef3
f0106a70:	e8 1e 97 ff ff       	call   f0100193 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106a75:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106a78:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a7e:	01 d0                	add    %edx,%eax
f0106a80:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f0106a83:	eb 0f                	jmp    f0106a94 <PROGRAM_SEGMENT_NEXT+0x60>
f0106a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a88:	8b 40 10             	mov    0x10(%eax),%eax
f0106a8b:	8d 50 01             	lea    0x1(%eax),%edx
f0106a8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a91:	89 50 10             	mov    %edx,0x10(%eax)
f0106a94:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a97:	8b 40 10             	mov    0x10(%eax),%eax
f0106a9a:	c1 e0 05             	shl    $0x5,%eax
f0106a9d:	89 c2                	mov    %eax,%edx
f0106a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106aa2:	01 d0                	add    %edx,%eax
f0106aa4:	8b 00                	mov    (%eax),%eax
f0106aa6:	83 f8 01             	cmp    $0x1,%eax
f0106aa9:	74 13                	je     f0106abe <PROGRAM_SEGMENT_NEXT+0x8a>
f0106aab:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aae:	8b 50 10             	mov    0x10(%eax),%edx
f0106ab1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ab4:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106ab7:	0f b7 c0             	movzwl %ax,%eax
f0106aba:	39 c2                	cmp    %eax,%edx
f0106abc:	72 c7                	jb     f0106a85 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f0106abe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ac1:	8b 40 10             	mov    0x10(%eax),%eax
f0106ac4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f0106ac7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106aca:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106acd:	0f b7 c0             	movzwl %ax,%eax
f0106ad0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106ad3:	7e 63                	jle    f0106b38 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ad8:	c1 e0 05             	shl    $0x5,%eax
f0106adb:	89 c2                	mov    %eax,%edx
f0106add:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ae0:	01 d0                	add    %edx,%eax
f0106ae2:	8b 50 04             	mov    0x4(%eax),%edx
f0106ae5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ae8:	01 c2                	add    %eax,%edx
f0106aea:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aed:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f0106aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106af2:	c1 e0 05             	shl    $0x5,%eax
f0106af5:	89 c2                	mov    %eax,%edx
f0106af7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106afa:	01 d0                	add    %edx,%eax
f0106afc:	8b 50 14             	mov    0x14(%eax),%edx
f0106aff:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b02:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f0106b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b08:	c1 e0 05             	shl    $0x5,%eax
f0106b0b:	89 c2                	mov    %eax,%edx
f0106b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b10:	01 d0                	add    %edx,%eax
f0106b12:	8b 50 10             	mov    0x10(%eax),%edx
f0106b15:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b18:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f0106b1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b1e:	c1 e0 05             	shl    $0x5,%eax
f0106b21:	89 c2                	mov    %eax,%edx
f0106b23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b26:	01 d0                	add    %edx,%eax
f0106b28:	8b 40 08             	mov    0x8(%eax),%eax
f0106b2b:	89 c2                	mov    %eax,%edx
f0106b2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b30:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f0106b33:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b36:	eb 05                	jmp    f0106b3d <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f0106b38:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106b3d:	c9                   	leave  
f0106b3e:	c3                   	ret    

f0106b3f <PROGRAM_SEGMENT_FIRST>:

struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f0106b3f:	55                   	push   %ebp
f0106b40:	89 e5                	mov    %esp,%ebp
f0106b42:	57                   	push   %edi
f0106b43:	56                   	push   %esi
f0106b44:	53                   	push   %ebx
f0106b45:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f0106b48:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106b4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106b55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b58:	8b 00                	mov    (%eax),%eax
f0106b5a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106b5f:	74 17                	je     f0106b78 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f0106b61:	83 ec 04             	sub    $0x4,%esp
f0106b64:	68 3e f0 11 f0       	push   $0xf011f03e
f0106b69:	68 c0 03 00 00       	push   $0x3c0
f0106b6e:	68 f3 ee 11 f0       	push   $0xf011eef3
f0106b73:	e8 1b 96 ff ff       	call   f0100193 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106b78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b7b:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106b7e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b81:	01 d0                	add    %edx,%eax
f0106b83:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f0106b86:	eb 07                	jmp    f0106b8f <PROGRAM_SEGMENT_FIRST+0x50>
f0106b88:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106b8b:	40                   	inc    %eax
f0106b8c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0106b8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106b92:	c1 e0 05             	shl    $0x5,%eax
f0106b95:	89 c2                	mov    %eax,%edx
f0106b97:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b9a:	01 d0                	add    %edx,%eax
f0106b9c:	8b 00                	mov    (%eax),%eax
f0106b9e:	83 f8 01             	cmp    $0x1,%eax
f0106ba1:	74 10                	je     f0106bb3 <PROGRAM_SEGMENT_FIRST+0x74>
f0106ba3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106ba6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106ba9:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106bac:	0f b7 c0             	movzwl %ax,%eax
f0106baf:	39 c2                	cmp    %eax,%edx
f0106bb1:	72 d5                	jb     f0106b88 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f0106bb3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106bb6:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f0106bb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106bbc:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106bbf:	0f b7 c0             	movzwl %ax,%eax
f0106bc2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0106bc5:	7e 68                	jle    f0106c2f <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106bc7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bca:	c1 e0 05             	shl    $0x5,%eax
f0106bcd:	89 c2                	mov    %eax,%edx
f0106bcf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bd2:	01 d0                	add    %edx,%eax
f0106bd4:	8b 50 04             	mov    0x4(%eax),%edx
f0106bd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bda:	01 d0                	add    %edx,%eax
f0106bdc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f0106bdf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106be2:	c1 e0 05             	shl    $0x5,%eax
f0106be5:	89 c2                	mov    %eax,%edx
f0106be7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bea:	01 d0                	add    %edx,%eax
f0106bec:	8b 40 14             	mov    0x14(%eax),%eax
f0106bef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f0106bf2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106bf5:	c1 e0 05             	shl    $0x5,%eax
f0106bf8:	89 c2                	mov    %eax,%edx
f0106bfa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106bfd:	01 d0                	add    %edx,%eax
f0106bff:	8b 40 10             	mov    0x10(%eax),%eax
f0106c02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f0106c05:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106c08:	c1 e0 05             	shl    $0x5,%eax
f0106c0b:	89 c2                	mov    %eax,%edx
f0106c0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c10:	01 d0                	add    %edx,%eax
f0106c12:	8b 40 08             	mov    0x8(%eax),%eax
f0106c15:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f0106c18:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c1b:	89 c3                	mov    %eax,%ebx
f0106c1d:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0106c20:	ba 05 00 00 00       	mov    $0x5,%edx
f0106c25:	89 df                	mov    %ebx,%edi
f0106c27:	89 c6                	mov    %eax,%esi
f0106c29:	89 d1                	mov    %edx,%ecx
f0106c2b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0106c2d:	eb 1c                	jmp    f0106c4b <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f0106c2f:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f0106c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c39:	89 c3                	mov    %eax,%ebx
f0106c3b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0106c3e:	ba 05 00 00 00       	mov    $0x5,%edx
f0106c43:	89 df                	mov    %ebx,%edi
f0106c45:	89 c6                	mov    %eax,%esi
f0106c47:	89 d1                	mov    %edx,%ecx
f0106c49:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0106c51:	5b                   	pop    %ebx
f0106c52:	5e                   	pop    %esi
f0106c53:	5f                   	pop    %edi
f0106c54:	5d                   	pop    %ebp
f0106c55:	c2 04 00             	ret    $0x4

f0106c58 <get_user_program_info>:

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f0106c58:	55                   	push   %ebp
f0106c59:	89 e5                	mov    %esp,%ebp
f0106c5b:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106c5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106c65:	eb 29                	jmp    f0106c90 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f0106c67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c6a:	89 d0                	mov    %edx,%eax
f0106c6c:	01 c0                	add    %eax,%eax
f0106c6e:	01 d0                	add    %edx,%eax
f0106c70:	c1 e0 02             	shl    $0x2,%eax
f0106c73:	05 20 78 15 f0       	add    $0xf0157820,%eax
f0106c78:	8b 00                	mov    (%eax),%eax
f0106c7a:	83 ec 08             	sub    $0x8,%esp
f0106c7d:	50                   	push   %eax
f0106c7e:	ff 75 08             	pushl  0x8(%ebp)
f0106c81:	e8 45 47 01 00       	call   f011b3cb <strcmp>
f0106c86:	83 c4 10             	add    $0x10,%esp
f0106c89:	85 c0                	test   %eax,%eax
f0106c8b:	74 0f                	je     f0106c9c <get_user_program_info+0x44>
}

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106c8d:	ff 45 f4             	incl   -0xc(%ebp)
f0106c90:	a1 a4 79 15 f0       	mov    0xf01579a4,%eax
f0106c95:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106c98:	7c cd                	jl     f0106c67 <get_user_program_info+0xf>
f0106c9a:	eb 01                	jmp    f0106c9d <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f0106c9c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0106c9d:	a1 a4 79 15 f0       	mov    0xf01579a4,%eax
f0106ca2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106ca5:	75 1a                	jne    f0106cc1 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f0106ca7:	83 ec 08             	sub    $0x8,%esp
f0106caa:	ff 75 08             	pushl  0x8(%ebp)
f0106cad:	68 54 f0 11 f0       	push   $0xf011f054
f0106cb2:	e8 7f 07 00 00       	call   f0107436 <cprintf>
f0106cb7:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106cba:	b8 00 00 00 00       	mov    $0x0,%eax
f0106cbf:	eb 11                	jmp    f0106cd2 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f0106cc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106cc4:	89 d0                	mov    %edx,%eax
f0106cc6:	01 c0                	add    %eax,%eax
f0106cc8:	01 d0                	add    %edx,%eax
f0106cca:	c1 e0 02             	shl    $0x2,%eax
f0106ccd:	05 20 78 15 f0       	add    $0xf0157820,%eax
}
f0106cd2:	c9                   	leave  
f0106cd3:	c3                   	ret    

f0106cd4 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f0106cd4:	55                   	push   %ebp
f0106cd5:	89 e5                	mov    %esp,%ebp
f0106cd7:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106cda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106ce1:	eb 30                	jmp    f0106d13 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f0106ce3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ce6:	89 d0                	mov    %edx,%eax
f0106ce8:	01 c0                	add    %eax,%eax
f0106cea:	01 d0                	add    %edx,%eax
f0106cec:	c1 e0 02             	shl    $0x2,%eax
f0106cef:	05 20 78 15 f0       	add    $0xf0157820,%eax
f0106cf4:	8b 00                	mov    (%eax),%eax
f0106cf6:	8b 55 08             	mov    0x8(%ebp),%edx
f0106cf9:	81 c2 b0 52 00 00    	add    $0x52b0,%edx
f0106cff:	83 ec 08             	sub    $0x8,%esp
f0106d02:	50                   	push   %eax
f0106d03:	52                   	push   %edx
f0106d04:	e8 c2 46 01 00       	call   f011b3cb <strcmp>
f0106d09:	83 c4 10             	add    $0x10,%esp
f0106d0c:	85 c0                	test   %eax,%eax
f0106d0e:	74 0f                	je     f0106d1f <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106d10:	ff 45 f4             	incl   -0xc(%ebp)
f0106d13:	a1 a4 79 15 f0       	mov    0xf01579a4,%eax
f0106d18:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106d1b:	7c c6                	jl     f0106ce3 <get_user_program_info_by_env+0xf>
f0106d1d:	eb 01                	jmp    f0106d20 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f0106d1f:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0106d20:	a1 a4 79 15 f0       	mov    0xf01579a4,%eax
f0106d25:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106d28:	75 17                	jne    f0106d41 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f0106d2a:	83 ec 0c             	sub    $0xc,%esp
f0106d2d:	68 6f f0 11 f0       	push   $0xf011f06f
f0106d32:	e8 ff 06 00 00       	call   f0107436 <cprintf>
f0106d37:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106d3a:	b8 00 00 00 00       	mov    $0x0,%eax
f0106d3f:	eb 11                	jmp    f0106d52 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f0106d41:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106d44:	89 d0                	mov    %edx,%eax
f0106d46:	01 c0                	add    %eax,%eax
f0106d48:	01 d0                	add    %edx,%eax
f0106d4a:	c1 e0 02             	shl    $0x2,%eax
f0106d4d:	05 20 78 15 f0       	add    $0xf0157820,%eax
}
f0106d52:	c9                   	leave  
f0106d53:	c3                   	ret    

f0106d54 <set_environment_entry_point>:

void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f0106d54:	55                   	push   %ebp
f0106d55:	89 e5                	mov    %esp,%ebp
f0106d57:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106d5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d63:	8b 00                	mov    (%eax),%eax
f0106d65:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106d6a:	74 17                	je     f0106d83 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f0106d6c:	83 ec 04             	sub    $0x4,%esp
f0106d6f:	68 3e f0 11 f0       	push   $0xf011f03e
f0106d74:	68 f5 03 00 00       	push   $0x3f5
f0106d79:	68 f3 ee 11 f0       	push   $0xf011eef3
f0106d7e:	e8 10 94 ff ff       	call   f0100193 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0106d83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d86:	8b 40 18             	mov    0x18(%eax),%eax
f0106d89:	89 c2                	mov    %eax,%edx
f0106d8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d8e:	89 50 30             	mov    %edx,0x30(%eax)
}
f0106d91:	90                   	nop
f0106d92:	c9                   	leave  
f0106d93:	c3                   	ret    

f0106d94 <env_exit>:



/*2015*///it add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0106d94:	55                   	push   %ebp
f0106d95:	89 e5                	mov    %esp,%ebp
f0106d97:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0106d9a:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0106d9f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106da2:	83 ec 0c             	sub    $0xc,%esp
f0106da5:	50                   	push   %eax
f0106da6:	e8 b0 49 00 00       	call   f010b75b <sched_exit_env>
f0106dab:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0106dae:	e8 af 3e 00 00       	call   f010ac62 <fos_scheduler>

f0106db3 <cleanup_buffers>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//

void cleanup_buffers(struct Env* e)
{
f0106db3:	55                   	push   %ebp
f0106db4:	89 e5                	mov    %esp,%ebp
f0106db6:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct Frame_Info *ptr_fi=NULL ;
f0106db9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f0106dc0:	a1 40 da 3c f0       	mov    0xf03cda40,%eax
f0106dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106dc8:	e9 a3 00 00 00       	jmp    f0106e70 <cleanup_buffers+0xbd>
	{
		if(ptr_fi->environment == e)
f0106dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106dd0:	8b 40 10             	mov    0x10(%eax),%eax
f0106dd3:	3b 45 08             	cmp    0x8(%ebp),%eax
f0106dd6:	0f 85 8c 00 00 00    	jne    f0106e68 <cleanup_buffers+0xb5>
		{
			pt_clear_page_table_entry(ptr_fi->environment,ptr_fi->va);
f0106ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ddf:	8b 50 0c             	mov    0xc(%eax),%edx
f0106de2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106de5:	8b 40 10             	mov    0x10(%eax),%eax
f0106de8:	83 ec 08             	sub    $0x8,%esp
f0106deb:	52                   	push   %edx
f0106dec:	50                   	push   %eax
f0106ded:	e8 62 db ff ff       	call   f0104954 <pt_clear_page_table_entry>
f0106df2:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			//bufferlist_remove_page(&modified_frame_list, ptr_fi);
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f0106df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106df8:	8b 00                	mov    (%eax),%eax
f0106dfa:	85 c0                	test   %eax,%eax
f0106dfc:	74 10                	je     f0106e0e <cleanup_buffers+0x5b>
f0106dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e01:	8b 00                	mov    (%eax),%eax
f0106e03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e06:	8b 52 04             	mov    0x4(%edx),%edx
f0106e09:	89 50 04             	mov    %edx,0x4(%eax)
f0106e0c:	eb 0b                	jmp    f0106e19 <cleanup_buffers+0x66>
f0106e0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e11:	8b 40 04             	mov    0x4(%eax),%eax
f0106e14:	a3 44 da 3c f0       	mov    %eax,0xf03cda44
f0106e19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e1c:	8b 40 04             	mov    0x4(%eax),%eax
f0106e1f:	85 c0                	test   %eax,%eax
f0106e21:	74 0f                	je     f0106e32 <cleanup_buffers+0x7f>
f0106e23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e26:	8b 40 04             	mov    0x4(%eax),%eax
f0106e29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e2c:	8b 12                	mov    (%edx),%edx
f0106e2e:	89 10                	mov    %edx,(%eax)
f0106e30:	eb 0a                	jmp    f0106e3c <cleanup_buffers+0x89>
f0106e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e35:	8b 00                	mov    (%eax),%eax
f0106e37:	a3 40 da 3c f0       	mov    %eax,0xf03cda40
f0106e3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e3f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e48:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106e4f:	a1 4c da 3c f0       	mov    0xf03cda4c,%eax
f0106e54:	48                   	dec    %eax
f0106e55:	a3 4c da 3c f0       	mov    %eax,0xf03cda4c
			free_frame(ptr_fi);
f0106e5a:	83 ec 0c             	sub    $0xc,%esp
f0106e5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0106e60:	e8 79 cf ff ff       	call   f0103dde <free_frame>
f0106e65:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f0106e68:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f0106e6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106e70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e74:	74 07                	je     f0106e7d <cleanup_buffers+0xca>
f0106e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e79:	8b 00                	mov    (%eax),%eax
f0106e7b:	eb 05                	jmp    f0106e82 <cleanup_buffers+0xcf>
f0106e7d:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e82:	a3 48 da 3c f0       	mov    %eax,0xf03cda48
f0106e87:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f0106e8c:	85 c0                	test   %eax,%eax
f0106e8e:	0f 85 39 ff ff ff    	jne    f0106dcd <cleanup_buffers+0x1a>
f0106e94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e98:	0f 85 2f ff ff ff    	jne    f0106dcd <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f0106e9e:	90                   	nop
f0106e9f:	c9                   	leave  
f0106ea0:	c3                   	ret    

f0106ea1 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0106ea1:	55                   	push   %ebp
f0106ea2:	89 e5                	mov    %esp,%ebp
f0106ea4:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0106ea7:	8b 65 08             	mov    0x8(%ebp),%esp
f0106eaa:	61                   	popa   
f0106eab:	07                   	pop    %es
f0106eac:	1f                   	pop    %ds
f0106ead:	83 c4 08             	add    $0x8,%esp
f0106eb0:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0106eb1:	83 ec 04             	sub    $0x4,%esp
f0106eb4:	68 86 f0 11 f0       	push   $0xf011f086
f0106eb9:	68 38 04 00 00       	push   $0x438
f0106ebe:	68 f3 ee 11 f0       	push   $0xf011eef3
f0106ec3:	e8 cb 92 ff ff       	call   f0100193 <_panic>

f0106ec8 <mc146818_read>:
#include <inc/assert.h>
#include <inc/lib.h>

unsigned
mc146818_read(unsigned reg)
{
f0106ec8:	55                   	push   %ebp
f0106ec9:	89 e5                	mov    %esp,%ebp
f0106ecb:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0106ece:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ed1:	0f b6 c0             	movzbl %al,%eax
f0106ed4:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106edb:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106ede:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106ee1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106ee4:	ee                   	out    %al,(%dx)
f0106ee5:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106eec:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106eef:	89 c2                	mov    %eax,%edx
f0106ef1:	ec                   	in     (%dx),%al
f0106ef2:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0106ef5:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0106ef8:	0f b6 c0             	movzbl %al,%eax
}
f0106efb:	c9                   	leave  
f0106efc:	c3                   	ret    

f0106efd <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0106efd:	55                   	push   %ebp
f0106efe:	89 e5                	mov    %esp,%ebp
f0106f00:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0106f03:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f06:	0f b6 c0             	movzbl %al,%eax
f0106f09:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106f10:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106f13:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106f16:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106f19:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0106f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106f1d:	0f b6 c0             	movzbl %al,%eax
f0106f20:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0106f27:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106f2a:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106f2d:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106f30:	ee                   	out    %al,(%dx)
}
f0106f31:	90                   	nop
f0106f32:	c9                   	leave  
f0106f33:	c3                   	ret    

f0106f34 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0106f34:	55                   	push   %ebp
f0106f35:	89 e5                	mov    %esp,%ebp
f0106f37:	53                   	push   %ebx
f0106f38:	83 ec 24             	sub    $0x24,%esp
f0106f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f3e:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0106f41:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0106f48:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0106f4c:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106f4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106f52:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0106f53:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0106f57:	77 48                	ja     f0106fa1 <kclock_start+0x6d>
f0106f59:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106f60:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0106f64:	8a 45 ee             	mov    -0x12(%ebp),%al
f0106f67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f6a:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0106f6b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0106f6f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0106f74:	99                   	cltd   
f0106f75:	f7 fb                	idiv   %ebx
f0106f77:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0106f7d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0106f81:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0106f86:	99                   	cltd   
f0106f87:	f7 fb                	idiv   %ebx
f0106f89:	89 c3                	mov    %eax,%ebx
f0106f8b:	89 c8                	mov    %ecx,%eax
f0106f8d:	99                   	cltd   
f0106f8e:	f7 fb                	idiv   %ebx
f0106f90:	0f b7 c0             	movzwl %ax,%eax
f0106f93:	83 ec 0c             	sub    $0xc,%esp
f0106f96:	50                   	push   %eax
f0106f97:	e8 b8 01 00 00       	call   f0107154 <kclock_write_cnt0_LSB_first>
f0106f9c:	83 c4 10             	add    $0x10,%esp
f0106f9f:	eb 13                	jmp    f0106fb4 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0106fa1:	6a 35                	push   $0x35
f0106fa3:	68 94 f0 11 f0       	push   $0xf011f094
f0106fa8:	6a 32                	push   $0x32
f0106faa:	68 f0 f0 11 f0       	push   $0xf011f0f0
f0106faf:	e8 df 91 ff ff       	call   f0100193 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106fb4:	66 a1 a8 79 15 f0    	mov    0xf01579a8,%ax
f0106fba:	0f b7 c0             	movzwl %ax,%eax
f0106fbd:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106fc2:	83 ec 0c             	sub    $0xc,%esp
f0106fc5:	50                   	push   %eax
f0106fc6:	e8 cc 03 00 00       	call   f0107397 <irq_setmask_8259A>
f0106fcb:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0106fce:	90                   	nop
f0106fcf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106fd2:	c9                   	leave  
f0106fd3:	c3                   	ret    

f0106fd4 <kclock_stop>:

void
kclock_stop(void)
{
f0106fd4:	55                   	push   %ebp
f0106fd5:	89 e5                	mov    %esp,%ebp
f0106fd7:	83 ec 18             	sub    $0x18,%esp
f0106fda:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106fe1:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0106fe5:	8a 45 f3             	mov    -0xd(%ebp),%al
f0106fe8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106feb:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0106fec:	83 ec 0c             	sub    $0xc,%esp
f0106fef:	68 ff ff 00 00       	push   $0xffff
f0106ff4:	e8 9e 03 00 00       	call   f0107397 <irq_setmask_8259A>
f0106ff9:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0106ffc:	90                   	nop
f0106ffd:	c9                   	leave  
f0106ffe:	c3                   	ret    

f0106fff <kclock_resume>:

void
kclock_resume(void)
{
f0106fff:	55                   	push   %ebp
f0107000:	89 e5                	mov    %esp,%ebp
f0107002:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0107005:	e8 8c 01 00 00       	call   f0107196 <kclock_read_cnt0>
f010700a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f010700e:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0107013:	77 06                	ja     f010701b <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0107015:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f010701b:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010701f:	83 e0 01             	and    $0x1,%eax
f0107022:	66 85 c0             	test   %ax,%ax
f0107025:	74 09                	je     f0107030 <kclock_resume+0x31>
		cnt0++;
f0107027:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010702b:	40                   	inc    %eax
f010702c:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0107030:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0107037:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010703b:	8a 45 ef             	mov    -0x11(%ebp),%al
f010703e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107041:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0107042:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0107046:	83 ec 0c             	sub    $0xc,%esp
f0107049:	50                   	push   %eax
f010704a:	e8 05 01 00 00       	call   f0107154 <kclock_write_cnt0_LSB_first>
f010704f:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0107052:	66 a1 a8 79 15 f0    	mov    0xf01579a8,%ax
f0107058:	0f b7 c0             	movzwl %ax,%eax
f010705b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0107060:	83 ec 0c             	sub    $0xc,%esp
f0107063:	50                   	push   %eax
f0107064:	e8 2e 03 00 00       	call   f0107397 <irq_setmask_8259A>
f0107069:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010706c:	90                   	nop
f010706d:	c9                   	leave  
f010706e:	c3                   	ret    

f010706f <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f010706f:	55                   	push   %ebp
f0107070:	89 e5                	mov    %esp,%ebp
f0107072:	83 ec 28             	sub    $0x28,%esp
f0107075:	8b 45 08             	mov    0x8(%ebp),%eax
f0107078:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010707b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0107082:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0107086:	8a 45 f3             	mov    -0xd(%ebp),%al
f0107089:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010708c:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010708d:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0107091:	83 ec 0c             	sub    $0xc,%esp
f0107094:	50                   	push   %eax
f0107095:	e8 ba 00 00 00       	call   f0107154 <kclock_write_cnt0_LSB_first>
f010709a:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010709d:	66 a1 a8 79 15 f0    	mov    0xf01579a8,%ax
f01070a3:	0f b7 c0             	movzwl %ax,%eax
f01070a6:	25 fe ff 00 00       	and    $0xfffe,%eax
f01070ab:	83 ec 0c             	sub    $0xc,%esp
f01070ae:	50                   	push   %eax
f01070af:	e8 e3 02 00 00       	call   f0107397 <irq_setmask_8259A>
f01070b4:	83 c4 10             	add    $0x10,%esp

}
f01070b7:	90                   	nop
f01070b8:	c9                   	leave  
f01070b9:	c3                   	ret    

f01070ba <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f01070ba:	55                   	push   %ebp
f01070bb:	89 e5                	mov    %esp,%ebp
f01070bd:	53                   	push   %ebx
f01070be:	83 ec 24             	sub    $0x24,%esp
f01070c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01070c4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01070c7:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01070cb:	77 6c                	ja     f0107139 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01070cd:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01070d1:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01070d6:	99                   	cltd   
f01070d7:	f7 fb                	idiv   %ebx
f01070d9:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01070df:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01070e3:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01070e8:	99                   	cltd   
f01070e9:	f7 fb                	idiv   %ebx
f01070eb:	89 c3                	mov    %eax,%ebx
f01070ed:	89 c8                	mov    %ecx,%eax
f01070ef:	99                   	cltd   
f01070f0:	f7 fb                	idiv   %ebx
f01070f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01070f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01070f8:	25 01 00 00 80       	and    $0x80000001,%eax
f01070fd:	85 c0                	test   %eax,%eax
f01070ff:	79 05                	jns    f0107106 <kclock_set_quantum+0x4c>
f0107101:	48                   	dec    %eax
f0107102:	83 c8 fe             	or     $0xfffffffe,%eax
f0107105:	40                   	inc    %eax
f0107106:	83 f8 01             	cmp    $0x1,%eax
f0107109:	75 03                	jne    f010710e <kclock_set_quantum+0x54>
			cnt++;
f010710b:	ff 45 f4             	incl   -0xc(%ebp)
f010710e:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0107115:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0107119:	8a 45 ef             	mov    -0x11(%ebp),%al
f010711c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010711f:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0107120:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107123:	0f b7 c0             	movzwl %ax,%eax
f0107126:	83 ec 0c             	sub    $0xc,%esp
f0107129:	50                   	push   %eax
f010712a:	e8 25 00 00 00       	call   f0107154 <kclock_write_cnt0_LSB_first>
f010712f:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0107132:	e8 9d fe ff ff       	call   f0106fd4 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0107137:	eb 16                	jmp    f010714f <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0107139:	6a 35                	push   $0x35
f010713b:	68 94 f0 11 f0       	push   $0xf011f094
f0107140:	68 c8 00 00 00       	push   $0xc8
f0107145:	68 f0 f0 11 f0       	push   $0xf011f0f0
f010714a:	e8 44 90 ff ff       	call   f0100193 <_panic>
	}
}
f010714f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107152:	c9                   	leave  
f0107153:	c3                   	ret    

f0107154 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0107154:	55                   	push   %ebp
f0107155:	89 e5                	mov    %esp,%ebp
f0107157:	83 ec 14             	sub    $0x14,%esp
f010715a:	8b 45 08             	mov    0x8(%ebp),%eax
f010715d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0107161:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107164:	0f b6 c0             	movzbl %al,%eax
f0107167:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f010716e:	88 45 f6             	mov    %al,-0xa(%ebp)
f0107171:	8a 45 f6             	mov    -0xa(%ebp),%al
f0107174:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107177:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0107178:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010717b:	66 c1 e8 08          	shr    $0x8,%ax
f010717f:	0f b6 c0             	movzbl %al,%eax
f0107182:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0107189:	88 45 f7             	mov    %al,-0x9(%ebp)
f010718c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010718f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0107192:	ee                   	out    %al,(%dx)
}
f0107193:	90                   	nop
f0107194:	c9                   	leave  
f0107195:	c3                   	ret    

f0107196 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0107196:	55                   	push   %ebp
f0107197:	89 e5                	mov    %esp,%ebp
f0107199:	83 ec 20             	sub    $0x20,%esp
f010719c:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01071a3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01071a6:	89 c2                	mov    %eax,%edx
f01071a8:	ec                   	in     (%dx),%al
f01071a9:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f01071ac:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01071af:	88 45 ff             	mov    %al,-0x1(%ebp)
f01071b2:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01071b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071bc:	89 c2                	mov    %eax,%edx
f01071be:	ec                   	in     (%dx),%al
f01071bf:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01071c2:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01071c5:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01071c8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01071cc:	c1 e0 08             	shl    $0x8,%eax
f01071cf:	89 c2                	mov    %eax,%edx
f01071d1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01071d5:	09 d0                	or     %edx,%eax
f01071d7:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01071db:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01071de:	c9                   	leave  
f01071df:	c3                   	ret    

f01071e0 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01071e0:	55                   	push   %ebp
f01071e1:	89 e5                	mov    %esp,%ebp
f01071e3:	83 ec 30             	sub    $0x30,%esp
f01071e6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01071ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01071f0:	89 c2                	mov    %eax,%edx
f01071f2:	ec                   	in     (%dx),%al
f01071f3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01071f6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01071f9:	88 45 ff             	mov    %al,-0x1(%ebp)
f01071fc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0107203:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0107207:	8a 45 dc             	mov    -0x24(%ebp),%al
f010720a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010720d:	ee                   	out    %al,(%dx)
f010720e:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107215:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107218:	89 c2                	mov    %eax,%edx
f010721a:	ec                   	in     (%dx),%al
f010721b:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f010721e:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0107221:	88 45 f3             	mov    %al,-0xd(%ebp)
f0107224:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010722b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010722e:	89 c2                	mov    %eax,%edx
f0107230:	ec                   	in     (%dx),%al
f0107231:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0107234:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0107237:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010723a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f010723e:	c1 e0 08             	shl    $0x8,%eax
f0107241:	89 c2                	mov    %eax,%edx
f0107243:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0107247:	09 d0                	or     %edx,%eax
f0107249:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010724d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0107251:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0107258:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010725b:	8a 45 df             	mov    -0x21(%ebp),%al
f010725e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0107261:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0107262:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0107265:	c9                   	leave  
f0107266:	c3                   	ret    

f0107267 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0107267:	55                   	push   %ebp
f0107268:	89 e5                	mov    %esp,%ebp
f010726a:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f010726d:	c7 05 64 21 34 f0 01 	movl   $0x1,0xf0342164
f0107274:	00 00 00 
f0107277:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f010727e:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
f0107282:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0107285:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107288:	ee                   	out    %al,(%dx)
f0107289:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0107290:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0107294:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0107297:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010729a:	ee                   	out    %al,(%dx)
f010729b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f01072a2:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f01072a6:	8a 45 b4             	mov    -0x4c(%ebp),%al
f01072a9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01072ac:	ee                   	out    %al,(%dx)
f01072ad:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f01072b4:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f01072b8:	8a 45 b5             	mov    -0x4b(%ebp),%al
f01072bb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01072be:	ee                   	out    %al,(%dx)
f01072bf:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f01072c6:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f01072ca:	8a 45 b6             	mov    -0x4a(%ebp),%al
f01072cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01072d0:	ee                   	out    %al,(%dx)
f01072d1:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f01072d8:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f01072dc:	8a 45 b7             	mov    -0x49(%ebp),%al
f01072df:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01072e2:	ee                   	out    %al,(%dx)
f01072e3:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f01072ea:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f01072ee:	8a 45 b8             	mov    -0x48(%ebp),%al
f01072f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01072f4:	ee                   	out    %al,(%dx)
f01072f5:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f01072fc:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0107300:	8a 45 b9             	mov    -0x47(%ebp),%al
f0107303:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0107306:	ee                   	out    %al,(%dx)
f0107307:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f010730e:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0107312:	8a 45 ba             	mov    -0x46(%ebp),%al
f0107315:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0107318:	ee                   	out    %al,(%dx)
f0107319:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0107320:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0107324:	8a 45 bb             	mov    -0x45(%ebp),%al
f0107327:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010732a:	ee                   	out    %al,(%dx)
f010732b:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0107332:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0107336:	8a 45 bc             	mov    -0x44(%ebp),%al
f0107339:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010733c:	ee                   	out    %al,(%dx)
f010733d:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0107344:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0107348:	8a 45 bd             	mov    -0x43(%ebp),%al
f010734b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010734e:	ee                   	out    %al,(%dx)
f010734f:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0107356:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f010735a:	8a 45 be             	mov    -0x42(%ebp),%al
f010735d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0107360:	ee                   	out    %al,(%dx)
f0107361:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0107368:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f010736c:	8a 45 bf             	mov    -0x41(%ebp),%al
f010736f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0107372:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0107373:	66 a1 a8 79 15 f0    	mov    0xf01579a8,%ax
f0107379:	66 83 f8 ff          	cmp    $0xffff,%ax
f010737d:	74 15                	je     f0107394 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f010737f:	66 a1 a8 79 15 f0    	mov    0xf01579a8,%ax
f0107385:	0f b7 c0             	movzwl %ax,%eax
f0107388:	83 ec 0c             	sub    $0xc,%esp
f010738b:	50                   	push   %eax
f010738c:	e8 06 00 00 00       	call   f0107397 <irq_setmask_8259A>
f0107391:	83 c4 10             	add    $0x10,%esp
}
f0107394:	90                   	nop
f0107395:	c9                   	leave  
f0107396:	c3                   	ret    

f0107397 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0107397:	55                   	push   %ebp
f0107398:	89 e5                	mov    %esp,%ebp
f010739a:	83 ec 14             	sub    $0x14,%esp
f010739d:	8b 45 08             	mov    0x8(%ebp),%eax
f01073a0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f01073a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01073a7:	66 a3 a8 79 15 f0    	mov    %ax,0xf01579a8
	if (!didinit)
f01073ad:	a1 64 21 34 f0       	mov    0xf0342164,%eax
f01073b2:	85 c0                	test   %eax,%eax
f01073b4:	74 34                	je     f01073ea <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f01073b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01073b9:	0f b6 c0             	movzbl %al,%eax
f01073bc:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f01073c3:	88 45 f6             	mov    %al,-0xa(%ebp)
f01073c6:	8a 45 f6             	mov    -0xa(%ebp),%al
f01073c9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01073cc:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f01073cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01073d0:	66 c1 e8 08          	shr    $0x8,%ax
f01073d4:	0f b6 c0             	movzbl %al,%eax
f01073d7:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f01073de:	88 45 f7             	mov    %al,-0x9(%ebp)
f01073e1:	8a 45 f7             	mov    -0x9(%ebp),%al
f01073e4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01073e7:	ee                   	out    %al,(%dx)
f01073e8:	eb 01                	jmp    f01073eb <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f01073ea:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f01073eb:	c9                   	leave  
f01073ec:	c3                   	ret    

f01073ed <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f01073ed:	55                   	push   %ebp
f01073ee:	89 e5                	mov    %esp,%ebp
f01073f0:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f01073f3:	83 ec 0c             	sub    $0xc,%esp
f01073f6:	ff 75 08             	pushl  0x8(%ebp)
f01073f9:	e8 0d 99 ff ff       	call   f0100d0b <cputchar>
f01073fe:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0107401:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107404:	83 c0 04             	add    $0x4,%eax
f0107407:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f010740a:	90                   	nop
f010740b:	c9                   	leave  
f010740c:	c3                   	ret    

f010740d <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f010740d:	55                   	push   %ebp
f010740e:	89 e5                	mov    %esp,%ebp
f0107410:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0107413:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f010741a:	ff 75 0c             	pushl  0xc(%ebp)
f010741d:	ff 75 08             	pushl  0x8(%ebp)
f0107420:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107423:	50                   	push   %eax
f0107424:	68 ed 73 10 f0       	push   $0xf01073ed
f0107429:	e8 e3 37 01 00       	call   f011ac11 <vprintfmt>
f010742e:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0107431:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107434:	c9                   	leave  
f0107435:	c3                   	ret    

f0107436 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0107436:	55                   	push   %ebp
f0107437:	89 e5                	mov    %esp,%ebp
f0107439:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f010743c:	8d 45 0c             	lea    0xc(%ebp),%eax
f010743f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0107442:	8b 45 08             	mov    0x8(%ebp),%eax
f0107445:	83 ec 08             	sub    $0x8,%esp
f0107448:	ff 75 f4             	pushl  -0xc(%ebp)
f010744b:	50                   	push   %eax
f010744c:	e8 bc ff ff ff       	call   f010740d <vcprintf>
f0107451:	83 c4 10             	add    $0x10,%esp
f0107454:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0107457:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010745a:	c9                   	leave  
f010745b:	c3                   	ret    

f010745c <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010745c:	55                   	push   %ebp
f010745d:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010745f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107462:	83 f8 13             	cmp    $0x13,%eax
f0107465:	77 0c                	ja     f0107473 <trapname+0x17>
		return excnames[trapno];
f0107467:	8b 45 08             	mov    0x8(%ebp),%eax
f010746a:	8b 04 85 40 f5 11 f0 	mov    -0xfee0ac0(,%eax,4),%eax
f0107471:	eb 12                	jmp    f0107485 <trapname+0x29>
	if (trapno == T_SYSCALL)
f0107473:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f0107477:	75 07                	jne    f0107480 <trapname+0x24>
		return "System call";
f0107479:	b8 00 f1 11 f0       	mov    $0xf011f100,%eax
f010747e:	eb 05                	jmp    f0107485 <trapname+0x29>
	return "(unknown trap)";
f0107480:	b8 0c f1 11 f0       	mov    $0xf011f10c,%eax
}
f0107485:	5d                   	pop    %ebp
f0107486:	c3                   	ret    

f0107487 <idt_init>:


void
idt_init(void)
{
f0107487:	55                   	push   %ebp
f0107488:	89 e5                	mov    %esp,%ebp
f010748a:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010748d:	b8 7a a7 10 f0       	mov    $0xf010a77a,%eax
f0107492:	66 a3 10 22 34 f0    	mov    %ax,0xf0342210
f0107498:	66 c7 05 12 22 34 f0 	movw   $0x8,0xf0342212
f010749f:	08 00 
f01074a1:	a0 14 22 34 f0       	mov    0xf0342214,%al
f01074a6:	83 e0 e0             	and    $0xffffffe0,%eax
f01074a9:	a2 14 22 34 f0       	mov    %al,0xf0342214
f01074ae:	a0 14 22 34 f0       	mov    0xf0342214,%al
f01074b3:	83 e0 1f             	and    $0x1f,%eax
f01074b6:	a2 14 22 34 f0       	mov    %al,0xf0342214
f01074bb:	a0 15 22 34 f0       	mov    0xf0342215,%al
f01074c0:	83 e0 f0             	and    $0xfffffff0,%eax
f01074c3:	83 c8 0e             	or     $0xe,%eax
f01074c6:	a2 15 22 34 f0       	mov    %al,0xf0342215
f01074cb:	a0 15 22 34 f0       	mov    0xf0342215,%al
f01074d0:	83 e0 ef             	and    $0xffffffef,%eax
f01074d3:	a2 15 22 34 f0       	mov    %al,0xf0342215
f01074d8:	a0 15 22 34 f0       	mov    0xf0342215,%al
f01074dd:	83 e0 9f             	and    $0xffffff9f,%eax
f01074e0:	a2 15 22 34 f0       	mov    %al,0xf0342215
f01074e5:	a0 15 22 34 f0       	mov    0xf0342215,%al
f01074ea:	83 c8 80             	or     $0xffffff80,%eax
f01074ed:	a2 15 22 34 f0       	mov    %al,0xf0342215
f01074f2:	b8 7a a7 10 f0       	mov    $0xf010a77a,%eax
f01074f7:	c1 e8 10             	shr    $0x10,%eax
f01074fa:	66 a3 16 22 34 f0    	mov    %ax,0xf0342216
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f0107500:	b8 82 a7 10 f0       	mov    $0xf010a782,%eax
f0107505:	66 a3 20 23 34 f0    	mov    %ax,0xf0342320
f010750b:	66 c7 05 22 23 34 f0 	movw   $0x8,0xf0342322
f0107512:	08 00 
f0107514:	a0 24 23 34 f0       	mov    0xf0342324,%al
f0107519:	83 e0 e0             	and    $0xffffffe0,%eax
f010751c:	a2 24 23 34 f0       	mov    %al,0xf0342324
f0107521:	a0 24 23 34 f0       	mov    0xf0342324,%al
f0107526:	83 e0 1f             	and    $0x1f,%eax
f0107529:	a2 24 23 34 f0       	mov    %al,0xf0342324
f010752e:	a0 25 23 34 f0       	mov    0xf0342325,%al
f0107533:	83 e0 f0             	and    $0xfffffff0,%eax
f0107536:	83 c8 0e             	or     $0xe,%eax
f0107539:	a2 25 23 34 f0       	mov    %al,0xf0342325
f010753e:	a0 25 23 34 f0       	mov    0xf0342325,%al
f0107543:	83 e0 ef             	and    $0xffffffef,%eax
f0107546:	a2 25 23 34 f0       	mov    %al,0xf0342325
f010754b:	a0 25 23 34 f0       	mov    0xf0342325,%al
f0107550:	83 c8 60             	or     $0x60,%eax
f0107553:	a2 25 23 34 f0       	mov    %al,0xf0342325
f0107558:	a0 25 23 34 f0       	mov    0xf0342325,%al
f010755d:	83 c8 80             	or     $0xffffff80,%eax
f0107560:	a2 25 23 34 f0       	mov    %al,0xf0342325
f0107565:	b8 82 a7 10 f0       	mov    $0xf010a782,%eax
f010756a:	c1 e8 10             	shr    $0x10,%eax
f010756d:	66 a3 26 23 34 f0    	mov    %ax,0xf0342326
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f0107573:	b8 8c a7 10 f0       	mov    $0xf010a78c,%eax
f0107578:	66 a3 e0 21 34 f0    	mov    %ax,0xf03421e0
f010757e:	66 c7 05 e2 21 34 f0 	movw   $0x8,0xf03421e2
f0107585:	08 00 
f0107587:	a0 e4 21 34 f0       	mov    0xf03421e4,%al
f010758c:	83 e0 e0             	and    $0xffffffe0,%eax
f010758f:	a2 e4 21 34 f0       	mov    %al,0xf03421e4
f0107594:	a0 e4 21 34 f0       	mov    0xf03421e4,%al
f0107599:	83 e0 1f             	and    $0x1f,%eax
f010759c:	a2 e4 21 34 f0       	mov    %al,0xf03421e4
f01075a1:	a0 e5 21 34 f0       	mov    0xf03421e5,%al
f01075a6:	83 e0 f0             	and    $0xfffffff0,%eax
f01075a9:	83 c8 0e             	or     $0xe,%eax
f01075ac:	a2 e5 21 34 f0       	mov    %al,0xf03421e5
f01075b1:	a0 e5 21 34 f0       	mov    0xf03421e5,%al
f01075b6:	83 e0 ef             	and    $0xffffffef,%eax
f01075b9:	a2 e5 21 34 f0       	mov    %al,0xf03421e5
f01075be:	a0 e5 21 34 f0       	mov    0xf03421e5,%al
f01075c3:	83 e0 9f             	and    $0xffffff9f,%eax
f01075c6:	a2 e5 21 34 f0       	mov    %al,0xf03421e5
f01075cb:	a0 e5 21 34 f0       	mov    0xf03421e5,%al
f01075d0:	83 c8 80             	or     $0xffffff80,%eax
f01075d3:	a2 e5 21 34 f0       	mov    %al,0xf03421e5
f01075d8:	b8 8c a7 10 f0       	mov    $0xf010a78c,%eax
f01075dd:	c1 e8 10             	shr    $0x10,%eax
f01075e0:	66 a3 e6 21 34 f0    	mov    %ax,0xf03421e6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f01075e6:	b8 94 a7 10 f0       	mov    $0xf010a794,%eax
f01075eb:	66 a3 a0 21 34 f0    	mov    %ax,0xf03421a0
f01075f1:	66 c7 05 a2 21 34 f0 	movw   $0x8,0xf03421a2
f01075f8:	08 00 
f01075fa:	a0 a4 21 34 f0       	mov    0xf03421a4,%al
f01075ff:	83 e0 e0             	and    $0xffffffe0,%eax
f0107602:	a2 a4 21 34 f0       	mov    %al,0xf03421a4
f0107607:	a0 a4 21 34 f0       	mov    0xf03421a4,%al
f010760c:	83 e0 1f             	and    $0x1f,%eax
f010760f:	a2 a4 21 34 f0       	mov    %al,0xf03421a4
f0107614:	a0 a5 21 34 f0       	mov    0xf03421a5,%al
f0107619:	83 e0 f0             	and    $0xfffffff0,%eax
f010761c:	83 c8 0e             	or     $0xe,%eax
f010761f:	a2 a5 21 34 f0       	mov    %al,0xf03421a5
f0107624:	a0 a5 21 34 f0       	mov    0xf03421a5,%al
f0107629:	83 e0 ef             	and    $0xffffffef,%eax
f010762c:	a2 a5 21 34 f0       	mov    %al,0xf03421a5
f0107631:	a0 a5 21 34 f0       	mov    0xf03421a5,%al
f0107636:	83 c8 60             	or     $0x60,%eax
f0107639:	a2 a5 21 34 f0       	mov    %al,0xf03421a5
f010763e:	a0 a5 21 34 f0       	mov    0xf03421a5,%al
f0107643:	83 c8 80             	or     $0xffffff80,%eax
f0107646:	a2 a5 21 34 f0       	mov    %al,0xf03421a5
f010764b:	b8 94 a7 10 f0       	mov    $0xf010a794,%eax
f0107650:	c1 e8 10             	shr    $0x10,%eax
f0107653:	66 a3 a6 21 34 f0    	mov    %ax,0xf03421a6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f0107659:	b8 9e a7 10 f0       	mov    $0xf010a79e,%eax
f010765e:	66 a3 a8 21 34 f0    	mov    %ax,0xf03421a8
f0107664:	66 c7 05 aa 21 34 f0 	movw   $0x8,0xf03421aa
f010766b:	08 00 
f010766d:	a0 ac 21 34 f0       	mov    0xf03421ac,%al
f0107672:	83 e0 e0             	and    $0xffffffe0,%eax
f0107675:	a2 ac 21 34 f0       	mov    %al,0xf03421ac
f010767a:	a0 ac 21 34 f0       	mov    0xf03421ac,%al
f010767f:	83 e0 1f             	and    $0x1f,%eax
f0107682:	a2 ac 21 34 f0       	mov    %al,0xf03421ac
f0107687:	a0 ad 21 34 f0       	mov    0xf03421ad,%al
f010768c:	83 c8 0f             	or     $0xf,%eax
f010768f:	a2 ad 21 34 f0       	mov    %al,0xf03421ad
f0107694:	a0 ad 21 34 f0       	mov    0xf03421ad,%al
f0107699:	83 e0 ef             	and    $0xffffffef,%eax
f010769c:	a2 ad 21 34 f0       	mov    %al,0xf03421ad
f01076a1:	a0 ad 21 34 f0       	mov    0xf03421ad,%al
f01076a6:	83 c8 60             	or     $0x60,%eax
f01076a9:	a2 ad 21 34 f0       	mov    %al,0xf03421ad
f01076ae:	a0 ad 21 34 f0       	mov    0xf03421ad,%al
f01076b3:	83 c8 80             	or     $0xffffff80,%eax
f01076b6:	a2 ad 21 34 f0       	mov    %al,0xf03421ad
f01076bb:	b8 9e a7 10 f0       	mov    $0xf010a79e,%eax
f01076c0:	c1 e8 10             	shr    $0x10,%eax
f01076c3:	66 a3 ae 21 34 f0    	mov    %ax,0xf03421ae
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f01076c9:	b8 a8 a7 10 f0       	mov    $0xf010a7a8,%eax
f01076ce:	66 a3 b0 21 34 f0    	mov    %ax,0xf03421b0
f01076d4:	66 c7 05 b2 21 34 f0 	movw   $0x8,0xf03421b2
f01076db:	08 00 
f01076dd:	a0 b4 21 34 f0       	mov    0xf03421b4,%al
f01076e2:	83 e0 e0             	and    $0xffffffe0,%eax
f01076e5:	a2 b4 21 34 f0       	mov    %al,0xf03421b4
f01076ea:	a0 b4 21 34 f0       	mov    0xf03421b4,%al
f01076ef:	83 e0 1f             	and    $0x1f,%eax
f01076f2:	a2 b4 21 34 f0       	mov    %al,0xf03421b4
f01076f7:	a0 b5 21 34 f0       	mov    0xf03421b5,%al
f01076fc:	83 e0 f0             	and    $0xfffffff0,%eax
f01076ff:	83 c8 0e             	or     $0xe,%eax
f0107702:	a2 b5 21 34 f0       	mov    %al,0xf03421b5
f0107707:	a0 b5 21 34 f0       	mov    0xf03421b5,%al
f010770c:	83 e0 ef             	and    $0xffffffef,%eax
f010770f:	a2 b5 21 34 f0       	mov    %al,0xf03421b5
f0107714:	a0 b5 21 34 f0       	mov    0xf03421b5,%al
f0107719:	83 c8 60             	or     $0x60,%eax
f010771c:	a2 b5 21 34 f0       	mov    %al,0xf03421b5
f0107721:	a0 b5 21 34 f0       	mov    0xf03421b5,%al
f0107726:	83 c8 80             	or     $0xffffff80,%eax
f0107729:	a2 b5 21 34 f0       	mov    %al,0xf03421b5
f010772e:	b8 a8 a7 10 f0       	mov    $0xf010a7a8,%eax
f0107733:	c1 e8 10             	shr    $0x10,%eax
f0107736:	66 a3 b6 21 34 f0    	mov    %ax,0xf03421b6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010773c:	b8 b2 a7 10 f0       	mov    $0xf010a7b2,%eax
f0107741:	66 a3 b8 21 34 f0    	mov    %ax,0xf03421b8
f0107747:	66 c7 05 ba 21 34 f0 	movw   $0x8,0xf03421ba
f010774e:	08 00 
f0107750:	a0 bc 21 34 f0       	mov    0xf03421bc,%al
f0107755:	83 e0 e0             	and    $0xffffffe0,%eax
f0107758:	a2 bc 21 34 f0       	mov    %al,0xf03421bc
f010775d:	a0 bc 21 34 f0       	mov    0xf03421bc,%al
f0107762:	83 e0 1f             	and    $0x1f,%eax
f0107765:	a2 bc 21 34 f0       	mov    %al,0xf03421bc
f010776a:	a0 bd 21 34 f0       	mov    0xf03421bd,%al
f010776f:	83 c8 0f             	or     $0xf,%eax
f0107772:	a2 bd 21 34 f0       	mov    %al,0xf03421bd
f0107777:	a0 bd 21 34 f0       	mov    0xf03421bd,%al
f010777c:	83 e0 ef             	and    $0xffffffef,%eax
f010777f:	a2 bd 21 34 f0       	mov    %al,0xf03421bd
f0107784:	a0 bd 21 34 f0       	mov    0xf03421bd,%al
f0107789:	83 c8 60             	or     $0x60,%eax
f010778c:	a2 bd 21 34 f0       	mov    %al,0xf03421bd
f0107791:	a0 bd 21 34 f0       	mov    0xf03421bd,%al
f0107796:	83 c8 80             	or     $0xffffff80,%eax
f0107799:	a2 bd 21 34 f0       	mov    %al,0xf03421bd
f010779e:	b8 b2 a7 10 f0       	mov    $0xf010a7b2,%eax
f01077a3:	c1 e8 10             	shr    $0x10,%eax
f01077a6:	66 a3 be 21 34 f0    	mov    %ax,0xf03421be
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f01077ac:	b8 bc a7 10 f0       	mov    $0xf010a7bc,%eax
f01077b1:	66 a3 c0 21 34 f0    	mov    %ax,0xf03421c0
f01077b7:	66 c7 05 c2 21 34 f0 	movw   $0x8,0xf03421c2
f01077be:	08 00 
f01077c0:	a0 c4 21 34 f0       	mov    0xf03421c4,%al
f01077c5:	83 e0 e0             	and    $0xffffffe0,%eax
f01077c8:	a2 c4 21 34 f0       	mov    %al,0xf03421c4
f01077cd:	a0 c4 21 34 f0       	mov    0xf03421c4,%al
f01077d2:	83 e0 1f             	and    $0x1f,%eax
f01077d5:	a2 c4 21 34 f0       	mov    %al,0xf03421c4
f01077da:	a0 c5 21 34 f0       	mov    0xf03421c5,%al
f01077df:	83 c8 0f             	or     $0xf,%eax
f01077e2:	a2 c5 21 34 f0       	mov    %al,0xf03421c5
f01077e7:	a0 c5 21 34 f0       	mov    0xf03421c5,%al
f01077ec:	83 e0 ef             	and    $0xffffffef,%eax
f01077ef:	a2 c5 21 34 f0       	mov    %al,0xf03421c5
f01077f4:	a0 c5 21 34 f0       	mov    0xf03421c5,%al
f01077f9:	83 c8 60             	or     $0x60,%eax
f01077fc:	a2 c5 21 34 f0       	mov    %al,0xf03421c5
f0107801:	a0 c5 21 34 f0       	mov    0xf03421c5,%al
f0107806:	83 c8 80             	or     $0xffffff80,%eax
f0107809:	a2 c5 21 34 f0       	mov    %al,0xf03421c5
f010780e:	b8 bc a7 10 f0       	mov    $0xf010a7bc,%eax
f0107813:	c1 e8 10             	shr    $0x10,%eax
f0107816:	66 a3 c6 21 34 f0    	mov    %ax,0xf03421c6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010781c:	b8 c6 a7 10 f0       	mov    $0xf010a7c6,%eax
f0107821:	66 a3 c8 21 34 f0    	mov    %ax,0xf03421c8
f0107827:	66 c7 05 ca 21 34 f0 	movw   $0x8,0xf03421ca
f010782e:	08 00 
f0107830:	a0 cc 21 34 f0       	mov    0xf03421cc,%al
f0107835:	83 e0 e0             	and    $0xffffffe0,%eax
f0107838:	a2 cc 21 34 f0       	mov    %al,0xf03421cc
f010783d:	a0 cc 21 34 f0       	mov    0xf03421cc,%al
f0107842:	83 e0 1f             	and    $0x1f,%eax
f0107845:	a2 cc 21 34 f0       	mov    %al,0xf03421cc
f010784a:	a0 cd 21 34 f0       	mov    0xf03421cd,%al
f010784f:	83 e0 f0             	and    $0xfffffff0,%eax
f0107852:	83 c8 0e             	or     $0xe,%eax
f0107855:	a2 cd 21 34 f0       	mov    %al,0xf03421cd
f010785a:	a0 cd 21 34 f0       	mov    0xf03421cd,%al
f010785f:	83 e0 ef             	and    $0xffffffef,%eax
f0107862:	a2 cd 21 34 f0       	mov    %al,0xf03421cd
f0107867:	a0 cd 21 34 f0       	mov    0xf03421cd,%al
f010786c:	83 c8 60             	or     $0x60,%eax
f010786f:	a2 cd 21 34 f0       	mov    %al,0xf03421cd
f0107874:	a0 cd 21 34 f0       	mov    0xf03421cd,%al
f0107879:	83 c8 80             	or     $0xffffff80,%eax
f010787c:	a2 cd 21 34 f0       	mov    %al,0xf03421cd
f0107881:	b8 c6 a7 10 f0       	mov    $0xf010a7c6,%eax
f0107886:	c1 e8 10             	shr    $0x10,%eax
f0107889:	66 a3 ce 21 34 f0    	mov    %ax,0xf03421ce
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010788f:	b8 d0 a7 10 f0       	mov    $0xf010a7d0,%eax
f0107894:	66 a3 d0 21 34 f0    	mov    %ax,0xf03421d0
f010789a:	66 c7 05 d2 21 34 f0 	movw   $0x8,0xf03421d2
f01078a1:	08 00 
f01078a3:	a0 d4 21 34 f0       	mov    0xf03421d4,%al
f01078a8:	83 e0 e0             	and    $0xffffffe0,%eax
f01078ab:	a2 d4 21 34 f0       	mov    %al,0xf03421d4
f01078b0:	a0 d4 21 34 f0       	mov    0xf03421d4,%al
f01078b5:	83 e0 1f             	and    $0x1f,%eax
f01078b8:	a2 d4 21 34 f0       	mov    %al,0xf03421d4
f01078bd:	a0 d5 21 34 f0       	mov    0xf03421d5,%al
f01078c2:	83 e0 f0             	and    $0xfffffff0,%eax
f01078c5:	83 c8 0e             	or     $0xe,%eax
f01078c8:	a2 d5 21 34 f0       	mov    %al,0xf03421d5
f01078cd:	a0 d5 21 34 f0       	mov    0xf03421d5,%al
f01078d2:	83 e0 ef             	and    $0xffffffef,%eax
f01078d5:	a2 d5 21 34 f0       	mov    %al,0xf03421d5
f01078da:	a0 d5 21 34 f0       	mov    0xf03421d5,%al
f01078df:	83 c8 60             	or     $0x60,%eax
f01078e2:	a2 d5 21 34 f0       	mov    %al,0xf03421d5
f01078e7:	a0 d5 21 34 f0       	mov    0xf03421d5,%al
f01078ec:	83 c8 80             	or     $0xffffff80,%eax
f01078ef:	a2 d5 21 34 f0       	mov    %al,0xf03421d5
f01078f4:	b8 d0 a7 10 f0       	mov    $0xf010a7d0,%eax
f01078f9:	c1 e8 10             	shr    $0x10,%eax
f01078fc:	66 a3 d6 21 34 f0    	mov    %ax,0xf03421d6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f0107902:	b8 da a7 10 f0       	mov    $0xf010a7da,%eax
f0107907:	66 a3 d8 21 34 f0    	mov    %ax,0xf03421d8
f010790d:	66 c7 05 da 21 34 f0 	movw   $0x8,0xf03421da
f0107914:	08 00 
f0107916:	a0 dc 21 34 f0       	mov    0xf03421dc,%al
f010791b:	83 e0 e0             	and    $0xffffffe0,%eax
f010791e:	a2 dc 21 34 f0       	mov    %al,0xf03421dc
f0107923:	a0 dc 21 34 f0       	mov    0xf03421dc,%al
f0107928:	83 e0 1f             	and    $0x1f,%eax
f010792b:	a2 dc 21 34 f0       	mov    %al,0xf03421dc
f0107930:	a0 dd 21 34 f0       	mov    0xf03421dd,%al
f0107935:	83 e0 f0             	and    $0xfffffff0,%eax
f0107938:	83 c8 0e             	or     $0xe,%eax
f010793b:	a2 dd 21 34 f0       	mov    %al,0xf03421dd
f0107940:	a0 dd 21 34 f0       	mov    0xf03421dd,%al
f0107945:	83 e0 ef             	and    $0xffffffef,%eax
f0107948:	a2 dd 21 34 f0       	mov    %al,0xf03421dd
f010794d:	a0 dd 21 34 f0       	mov    0xf03421dd,%al
f0107952:	83 c8 60             	or     $0x60,%eax
f0107955:	a2 dd 21 34 f0       	mov    %al,0xf03421dd
f010795a:	a0 dd 21 34 f0       	mov    0xf03421dd,%al
f010795f:	83 c8 80             	or     $0xffffff80,%eax
f0107962:	a2 dd 21 34 f0       	mov    %al,0xf03421dd
f0107967:	b8 da a7 10 f0       	mov    $0xf010a7da,%eax
f010796c:	c1 e8 10             	shr    $0x10,%eax
f010796f:	66 a3 de 21 34 f0    	mov    %ax,0xf03421de
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f0107975:	b8 e4 a7 10 f0       	mov    $0xf010a7e4,%eax
f010797a:	66 a3 f0 21 34 f0    	mov    %ax,0xf03421f0
f0107980:	66 c7 05 f2 21 34 f0 	movw   $0x8,0xf03421f2
f0107987:	08 00 
f0107989:	a0 f4 21 34 f0       	mov    0xf03421f4,%al
f010798e:	83 e0 e0             	and    $0xffffffe0,%eax
f0107991:	a2 f4 21 34 f0       	mov    %al,0xf03421f4
f0107996:	a0 f4 21 34 f0       	mov    0xf03421f4,%al
f010799b:	83 e0 1f             	and    $0x1f,%eax
f010799e:	a2 f4 21 34 f0       	mov    %al,0xf03421f4
f01079a3:	a0 f5 21 34 f0       	mov    0xf03421f5,%al
f01079a8:	83 e0 f0             	and    $0xfffffff0,%eax
f01079ab:	83 c8 0e             	or     $0xe,%eax
f01079ae:	a2 f5 21 34 f0       	mov    %al,0xf03421f5
f01079b3:	a0 f5 21 34 f0       	mov    0xf03421f5,%al
f01079b8:	83 e0 ef             	and    $0xffffffef,%eax
f01079bb:	a2 f5 21 34 f0       	mov    %al,0xf03421f5
f01079c0:	a0 f5 21 34 f0       	mov    0xf03421f5,%al
f01079c5:	83 c8 60             	or     $0x60,%eax
f01079c8:	a2 f5 21 34 f0       	mov    %al,0xf03421f5
f01079cd:	a0 f5 21 34 f0       	mov    0xf03421f5,%al
f01079d2:	83 c8 80             	or     $0xffffff80,%eax
f01079d5:	a2 f5 21 34 f0       	mov    %al,0xf03421f5
f01079da:	b8 e4 a7 10 f0       	mov    $0xf010a7e4,%eax
f01079df:	c1 e8 10             	shr    $0x10,%eax
f01079e2:	66 a3 f6 21 34 f0    	mov    %ax,0xf03421f6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f01079e8:	b8 ec a7 10 f0       	mov    $0xf010a7ec,%eax
f01079ed:	66 a3 f8 21 34 f0    	mov    %ax,0xf03421f8
f01079f3:	66 c7 05 fa 21 34 f0 	movw   $0x8,0xf03421fa
f01079fa:	08 00 
f01079fc:	a0 fc 21 34 f0       	mov    0xf03421fc,%al
f0107a01:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a04:	a2 fc 21 34 f0       	mov    %al,0xf03421fc
f0107a09:	a0 fc 21 34 f0       	mov    0xf03421fc,%al
f0107a0e:	83 e0 1f             	and    $0x1f,%eax
f0107a11:	a2 fc 21 34 f0       	mov    %al,0xf03421fc
f0107a16:	a0 fd 21 34 f0       	mov    0xf03421fd,%al
f0107a1b:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a1e:	83 c8 0e             	or     $0xe,%eax
f0107a21:	a2 fd 21 34 f0       	mov    %al,0xf03421fd
f0107a26:	a0 fd 21 34 f0       	mov    0xf03421fd,%al
f0107a2b:	83 e0 ef             	and    $0xffffffef,%eax
f0107a2e:	a2 fd 21 34 f0       	mov    %al,0xf03421fd
f0107a33:	a0 fd 21 34 f0       	mov    0xf03421fd,%al
f0107a38:	83 c8 60             	or     $0x60,%eax
f0107a3b:	a2 fd 21 34 f0       	mov    %al,0xf03421fd
f0107a40:	a0 fd 21 34 f0       	mov    0xf03421fd,%al
f0107a45:	83 c8 80             	or     $0xffffff80,%eax
f0107a48:	a2 fd 21 34 f0       	mov    %al,0xf03421fd
f0107a4d:	b8 ec a7 10 f0       	mov    $0xf010a7ec,%eax
f0107a52:	c1 e8 10             	shr    $0x10,%eax
f0107a55:	66 a3 fe 21 34 f0    	mov    %ax,0xf03421fe
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f0107a5b:	b8 f0 a7 10 f0       	mov    $0xf010a7f0,%eax
f0107a60:	66 a3 00 22 34 f0    	mov    %ax,0xf0342200
f0107a66:	66 c7 05 02 22 34 f0 	movw   $0x8,0xf0342202
f0107a6d:	08 00 
f0107a6f:	a0 04 22 34 f0       	mov    0xf0342204,%al
f0107a74:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a77:	a2 04 22 34 f0       	mov    %al,0xf0342204
f0107a7c:	a0 04 22 34 f0       	mov    0xf0342204,%al
f0107a81:	83 e0 1f             	and    $0x1f,%eax
f0107a84:	a2 04 22 34 f0       	mov    %al,0xf0342204
f0107a89:	a0 05 22 34 f0       	mov    0xf0342205,%al
f0107a8e:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a91:	83 c8 0e             	or     $0xe,%eax
f0107a94:	a2 05 22 34 f0       	mov    %al,0xf0342205
f0107a99:	a0 05 22 34 f0       	mov    0xf0342205,%al
f0107a9e:	83 e0 ef             	and    $0xffffffef,%eax
f0107aa1:	a2 05 22 34 f0       	mov    %al,0xf0342205
f0107aa6:	a0 05 22 34 f0       	mov    0xf0342205,%al
f0107aab:	83 c8 60             	or     $0x60,%eax
f0107aae:	a2 05 22 34 f0       	mov    %al,0xf0342205
f0107ab3:	a0 05 22 34 f0       	mov    0xf0342205,%al
f0107ab8:	83 c8 80             	or     $0xffffff80,%eax
f0107abb:	a2 05 22 34 f0       	mov    %al,0xf0342205
f0107ac0:	b8 f0 a7 10 f0       	mov    $0xf010a7f0,%eax
f0107ac5:	c1 e8 10             	shr    $0x10,%eax
f0107ac8:	66 a3 06 22 34 f0    	mov    %ax,0xf0342206
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f0107ace:	b8 f4 a7 10 f0       	mov    $0xf010a7f4,%eax
f0107ad3:	66 a3 08 22 34 f0    	mov    %ax,0xf0342208
f0107ad9:	66 c7 05 0a 22 34 f0 	movw   $0x8,0xf034220a
f0107ae0:	08 00 
f0107ae2:	a0 0c 22 34 f0       	mov    0xf034220c,%al
f0107ae7:	83 e0 e0             	and    $0xffffffe0,%eax
f0107aea:	a2 0c 22 34 f0       	mov    %al,0xf034220c
f0107aef:	a0 0c 22 34 f0       	mov    0xf034220c,%al
f0107af4:	83 e0 1f             	and    $0x1f,%eax
f0107af7:	a2 0c 22 34 f0       	mov    %al,0xf034220c
f0107afc:	a0 0d 22 34 f0       	mov    0xf034220d,%al
f0107b01:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b04:	83 c8 0e             	or     $0xe,%eax
f0107b07:	a2 0d 22 34 f0       	mov    %al,0xf034220d
f0107b0c:	a0 0d 22 34 f0       	mov    0xf034220d,%al
f0107b11:	83 e0 ef             	and    $0xffffffef,%eax
f0107b14:	a2 0d 22 34 f0       	mov    %al,0xf034220d
f0107b19:	a0 0d 22 34 f0       	mov    0xf034220d,%al
f0107b1e:	83 c8 60             	or     $0x60,%eax
f0107b21:	a2 0d 22 34 f0       	mov    %al,0xf034220d
f0107b26:	a0 0d 22 34 f0       	mov    0xf034220d,%al
f0107b2b:	83 c8 80             	or     $0xffffff80,%eax
f0107b2e:	a2 0d 22 34 f0       	mov    %al,0xf034220d
f0107b33:	b8 f4 a7 10 f0       	mov    $0xf010a7f4,%eax
f0107b38:	c1 e8 10             	shr    $0x10,%eax
f0107b3b:	66 a3 0e 22 34 f0    	mov    %ax,0xf034220e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f0107b41:	b8 f8 a7 10 f0       	mov    $0xf010a7f8,%eax
f0107b46:	66 a3 20 22 34 f0    	mov    %ax,0xf0342220
f0107b4c:	66 c7 05 22 22 34 f0 	movw   $0x8,0xf0342222
f0107b53:	08 00 
f0107b55:	a0 24 22 34 f0       	mov    0xf0342224,%al
f0107b5a:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b5d:	a2 24 22 34 f0       	mov    %al,0xf0342224
f0107b62:	a0 24 22 34 f0       	mov    0xf0342224,%al
f0107b67:	83 e0 1f             	and    $0x1f,%eax
f0107b6a:	a2 24 22 34 f0       	mov    %al,0xf0342224
f0107b6f:	a0 25 22 34 f0       	mov    0xf0342225,%al
f0107b74:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b77:	83 c8 0e             	or     $0xe,%eax
f0107b7a:	a2 25 22 34 f0       	mov    %al,0xf0342225
f0107b7f:	a0 25 22 34 f0       	mov    0xf0342225,%al
f0107b84:	83 e0 ef             	and    $0xffffffef,%eax
f0107b87:	a2 25 22 34 f0       	mov    %al,0xf0342225
f0107b8c:	a0 25 22 34 f0       	mov    0xf0342225,%al
f0107b91:	83 c8 60             	or     $0x60,%eax
f0107b94:	a2 25 22 34 f0       	mov    %al,0xf0342225
f0107b99:	a0 25 22 34 f0       	mov    0xf0342225,%al
f0107b9e:	83 c8 80             	or     $0xffffff80,%eax
f0107ba1:	a2 25 22 34 f0       	mov    %al,0xf0342225
f0107ba6:	b8 f8 a7 10 f0       	mov    $0xf010a7f8,%eax
f0107bab:	c1 e8 10             	shr    $0x10,%eax
f0107bae:	66 a3 26 22 34 f0    	mov    %ax,0xf0342226
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f0107bb4:	b8 fe a7 10 f0       	mov    $0xf010a7fe,%eax
f0107bb9:	66 a3 28 22 34 f0    	mov    %ax,0xf0342228
f0107bbf:	66 c7 05 2a 22 34 f0 	movw   $0x8,0xf034222a
f0107bc6:	08 00 
f0107bc8:	a0 2c 22 34 f0       	mov    0xf034222c,%al
f0107bcd:	83 e0 e0             	and    $0xffffffe0,%eax
f0107bd0:	a2 2c 22 34 f0       	mov    %al,0xf034222c
f0107bd5:	a0 2c 22 34 f0       	mov    0xf034222c,%al
f0107bda:	83 e0 1f             	and    $0x1f,%eax
f0107bdd:	a2 2c 22 34 f0       	mov    %al,0xf034222c
f0107be2:	a0 2d 22 34 f0       	mov    0xf034222d,%al
f0107be7:	83 e0 f0             	and    $0xfffffff0,%eax
f0107bea:	83 c8 0e             	or     $0xe,%eax
f0107bed:	a2 2d 22 34 f0       	mov    %al,0xf034222d
f0107bf2:	a0 2d 22 34 f0       	mov    0xf034222d,%al
f0107bf7:	83 e0 ef             	and    $0xffffffef,%eax
f0107bfa:	a2 2d 22 34 f0       	mov    %al,0xf034222d
f0107bff:	a0 2d 22 34 f0       	mov    0xf034222d,%al
f0107c04:	83 c8 60             	or     $0x60,%eax
f0107c07:	a2 2d 22 34 f0       	mov    %al,0xf034222d
f0107c0c:	a0 2d 22 34 f0       	mov    0xf034222d,%al
f0107c11:	83 c8 80             	or     $0xffffff80,%eax
f0107c14:	a2 2d 22 34 f0       	mov    %al,0xf034222d
f0107c19:	b8 fe a7 10 f0       	mov    $0xf010a7fe,%eax
f0107c1e:	c1 e8 10             	shr    $0x10,%eax
f0107c21:	66 a3 2e 22 34 f0    	mov    %ax,0xf034222e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f0107c27:	b8 02 a8 10 f0       	mov    $0xf010a802,%eax
f0107c2c:	66 a3 30 22 34 f0    	mov    %ax,0xf0342230
f0107c32:	66 c7 05 32 22 34 f0 	movw   $0x8,0xf0342232
f0107c39:	08 00 
f0107c3b:	a0 34 22 34 f0       	mov    0xf0342234,%al
f0107c40:	83 e0 e0             	and    $0xffffffe0,%eax
f0107c43:	a2 34 22 34 f0       	mov    %al,0xf0342234
f0107c48:	a0 34 22 34 f0       	mov    0xf0342234,%al
f0107c4d:	83 e0 1f             	and    $0x1f,%eax
f0107c50:	a2 34 22 34 f0       	mov    %al,0xf0342234
f0107c55:	a0 35 22 34 f0       	mov    0xf0342235,%al
f0107c5a:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c5d:	83 c8 0e             	or     $0xe,%eax
f0107c60:	a2 35 22 34 f0       	mov    %al,0xf0342235
f0107c65:	a0 35 22 34 f0       	mov    0xf0342235,%al
f0107c6a:	83 e0 ef             	and    $0xffffffef,%eax
f0107c6d:	a2 35 22 34 f0       	mov    %al,0xf0342235
f0107c72:	a0 35 22 34 f0       	mov    0xf0342235,%al
f0107c77:	83 c8 60             	or     $0x60,%eax
f0107c7a:	a2 35 22 34 f0       	mov    %al,0xf0342235
f0107c7f:	a0 35 22 34 f0       	mov    0xf0342235,%al
f0107c84:	83 c8 80             	or     $0xffffff80,%eax
f0107c87:	a2 35 22 34 f0       	mov    %al,0xf0342235
f0107c8c:	b8 02 a8 10 f0       	mov    $0xf010a802,%eax
f0107c91:	c1 e8 10             	shr    $0x10,%eax
f0107c94:	66 a3 36 22 34 f0    	mov    %ax,0xf0342236
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f0107c9a:	b8 08 a8 10 f0       	mov    $0xf010a808,%eax
f0107c9f:	66 a3 38 22 34 f0    	mov    %ax,0xf0342238
f0107ca5:	66 c7 05 3a 22 34 f0 	movw   $0x8,0xf034223a
f0107cac:	08 00 
f0107cae:	a0 3c 22 34 f0       	mov    0xf034223c,%al
f0107cb3:	83 e0 e0             	and    $0xffffffe0,%eax
f0107cb6:	a2 3c 22 34 f0       	mov    %al,0xf034223c
f0107cbb:	a0 3c 22 34 f0       	mov    0xf034223c,%al
f0107cc0:	83 e0 1f             	and    $0x1f,%eax
f0107cc3:	a2 3c 22 34 f0       	mov    %al,0xf034223c
f0107cc8:	a0 3d 22 34 f0       	mov    0xf034223d,%al
f0107ccd:	83 e0 f0             	and    $0xfffffff0,%eax
f0107cd0:	83 c8 0e             	or     $0xe,%eax
f0107cd3:	a2 3d 22 34 f0       	mov    %al,0xf034223d
f0107cd8:	a0 3d 22 34 f0       	mov    0xf034223d,%al
f0107cdd:	83 e0 ef             	and    $0xffffffef,%eax
f0107ce0:	a2 3d 22 34 f0       	mov    %al,0xf034223d
f0107ce5:	a0 3d 22 34 f0       	mov    0xf034223d,%al
f0107cea:	83 c8 60             	or     $0x60,%eax
f0107ced:	a2 3d 22 34 f0       	mov    %al,0xf034223d
f0107cf2:	a0 3d 22 34 f0       	mov    0xf034223d,%al
f0107cf7:	83 c8 80             	or     $0xffffff80,%eax
f0107cfa:	a2 3d 22 34 f0       	mov    %al,0xf034223d
f0107cff:	b8 08 a8 10 f0       	mov    $0xf010a808,%eax
f0107d04:	c1 e8 10             	shr    $0x10,%eax
f0107d07:	66 a3 3e 22 34 f0    	mov    %ax,0xf034223e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f0107d0d:	b8 0e a8 10 f0       	mov    $0xf010a80e,%eax
f0107d12:	66 a3 a0 22 34 f0    	mov    %ax,0xf03422a0
f0107d18:	66 c7 05 a2 22 34 f0 	movw   $0x8,0xf03422a2
f0107d1f:	08 00 
f0107d21:	a0 a4 22 34 f0       	mov    0xf03422a4,%al
f0107d26:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d29:	a2 a4 22 34 f0       	mov    %al,0xf03422a4
f0107d2e:	a0 a4 22 34 f0       	mov    0xf03422a4,%al
f0107d33:	83 e0 1f             	and    $0x1f,%eax
f0107d36:	a2 a4 22 34 f0       	mov    %al,0xf03422a4
f0107d3b:	a0 a5 22 34 f0       	mov    0xf03422a5,%al
f0107d40:	83 e0 f0             	and    $0xfffffff0,%eax
f0107d43:	83 c8 0e             	or     $0xe,%eax
f0107d46:	a2 a5 22 34 f0       	mov    %al,0xf03422a5
f0107d4b:	a0 a5 22 34 f0       	mov    0xf03422a5,%al
f0107d50:	83 e0 ef             	and    $0xffffffef,%eax
f0107d53:	a2 a5 22 34 f0       	mov    %al,0xf03422a5
f0107d58:	a0 a5 22 34 f0       	mov    0xf03422a5,%al
f0107d5d:	83 c8 60             	or     $0x60,%eax
f0107d60:	a2 a5 22 34 f0       	mov    %al,0xf03422a5
f0107d65:	a0 a5 22 34 f0       	mov    0xf03422a5,%al
f0107d6a:	83 c8 80             	or     $0xffffff80,%eax
f0107d6d:	a2 a5 22 34 f0       	mov    %al,0xf03422a5
f0107d72:	b8 0e a8 10 f0       	mov    $0xf010a80e,%eax
f0107d77:	c1 e8 10             	shr    $0x10,%eax
f0107d7a:	66 a3 a6 22 34 f0    	mov    %ax,0xf03422a6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f0107d80:	b8 14 a8 10 f0       	mov    $0xf010a814,%eax
f0107d85:	66 a3 a8 22 34 f0    	mov    %ax,0xf03422a8
f0107d8b:	66 c7 05 aa 22 34 f0 	movw   $0x8,0xf03422aa
f0107d92:	08 00 
f0107d94:	a0 ac 22 34 f0       	mov    0xf03422ac,%al
f0107d99:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d9c:	a2 ac 22 34 f0       	mov    %al,0xf03422ac
f0107da1:	a0 ac 22 34 f0       	mov    0xf03422ac,%al
f0107da6:	83 e0 1f             	and    $0x1f,%eax
f0107da9:	a2 ac 22 34 f0       	mov    %al,0xf03422ac
f0107dae:	a0 ad 22 34 f0       	mov    0xf03422ad,%al
f0107db3:	83 e0 f0             	and    $0xfffffff0,%eax
f0107db6:	83 c8 0e             	or     $0xe,%eax
f0107db9:	a2 ad 22 34 f0       	mov    %al,0xf03422ad
f0107dbe:	a0 ad 22 34 f0       	mov    0xf03422ad,%al
f0107dc3:	83 e0 ef             	and    $0xffffffef,%eax
f0107dc6:	a2 ad 22 34 f0       	mov    %al,0xf03422ad
f0107dcb:	a0 ad 22 34 f0       	mov    0xf03422ad,%al
f0107dd0:	83 c8 60             	or     $0x60,%eax
f0107dd3:	a2 ad 22 34 f0       	mov    %al,0xf03422ad
f0107dd8:	a0 ad 22 34 f0       	mov    0xf03422ad,%al
f0107ddd:	83 c8 80             	or     $0xffffff80,%eax
f0107de0:	a2 ad 22 34 f0       	mov    %al,0xf03422ad
f0107de5:	b8 14 a8 10 f0       	mov    $0xf010a814,%eax
f0107dea:	c1 e8 10             	shr    $0x10,%eax
f0107ded:	66 a3 ae 22 34 f0    	mov    %ax,0xf03422ae
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f0107df3:	b8 1a a8 10 f0       	mov    $0xf010a81a,%eax
f0107df8:	66 a3 b0 22 34 f0    	mov    %ax,0xf03422b0
f0107dfe:	66 c7 05 b2 22 34 f0 	movw   $0x8,0xf03422b2
f0107e05:	08 00 
f0107e07:	a0 b4 22 34 f0       	mov    0xf03422b4,%al
f0107e0c:	83 e0 e0             	and    $0xffffffe0,%eax
f0107e0f:	a2 b4 22 34 f0       	mov    %al,0xf03422b4
f0107e14:	a0 b4 22 34 f0       	mov    0xf03422b4,%al
f0107e19:	83 e0 1f             	and    $0x1f,%eax
f0107e1c:	a2 b4 22 34 f0       	mov    %al,0xf03422b4
f0107e21:	a0 b5 22 34 f0       	mov    0xf03422b5,%al
f0107e26:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e29:	83 c8 0e             	or     $0xe,%eax
f0107e2c:	a2 b5 22 34 f0       	mov    %al,0xf03422b5
f0107e31:	a0 b5 22 34 f0       	mov    0xf03422b5,%al
f0107e36:	83 e0 ef             	and    $0xffffffef,%eax
f0107e39:	a2 b5 22 34 f0       	mov    %al,0xf03422b5
f0107e3e:	a0 b5 22 34 f0       	mov    0xf03422b5,%al
f0107e43:	83 c8 60             	or     $0x60,%eax
f0107e46:	a2 b5 22 34 f0       	mov    %al,0xf03422b5
f0107e4b:	a0 b5 22 34 f0       	mov    0xf03422b5,%al
f0107e50:	83 c8 80             	or     $0xffffff80,%eax
f0107e53:	a2 b5 22 34 f0       	mov    %al,0xf03422b5
f0107e58:	b8 1a a8 10 f0       	mov    $0xf010a81a,%eax
f0107e5d:	c1 e8 10             	shr    $0x10,%eax
f0107e60:	66 a3 b6 22 34 f0    	mov    %ax,0xf03422b6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f0107e66:	b8 20 a8 10 f0       	mov    $0xf010a820,%eax
f0107e6b:	66 a3 b8 22 34 f0    	mov    %ax,0xf03422b8
f0107e71:	66 c7 05 ba 22 34 f0 	movw   $0x8,0xf03422ba
f0107e78:	08 00 
f0107e7a:	a0 bc 22 34 f0       	mov    0xf03422bc,%al
f0107e7f:	83 e0 e0             	and    $0xffffffe0,%eax
f0107e82:	a2 bc 22 34 f0       	mov    %al,0xf03422bc
f0107e87:	a0 bc 22 34 f0       	mov    0xf03422bc,%al
f0107e8c:	83 e0 1f             	and    $0x1f,%eax
f0107e8f:	a2 bc 22 34 f0       	mov    %al,0xf03422bc
f0107e94:	a0 bd 22 34 f0       	mov    0xf03422bd,%al
f0107e99:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e9c:	83 c8 0e             	or     $0xe,%eax
f0107e9f:	a2 bd 22 34 f0       	mov    %al,0xf03422bd
f0107ea4:	a0 bd 22 34 f0       	mov    0xf03422bd,%al
f0107ea9:	83 e0 ef             	and    $0xffffffef,%eax
f0107eac:	a2 bd 22 34 f0       	mov    %al,0xf03422bd
f0107eb1:	a0 bd 22 34 f0       	mov    0xf03422bd,%al
f0107eb6:	83 c8 60             	or     $0x60,%eax
f0107eb9:	a2 bd 22 34 f0       	mov    %al,0xf03422bd
f0107ebe:	a0 bd 22 34 f0       	mov    0xf03422bd,%al
f0107ec3:	83 c8 80             	or     $0xffffff80,%eax
f0107ec6:	a2 bd 22 34 f0       	mov    %al,0xf03422bd
f0107ecb:	b8 20 a8 10 f0       	mov    $0xf010a820,%eax
f0107ed0:	c1 e8 10             	shr    $0x10,%eax
f0107ed3:	66 a3 be 22 34 f0    	mov    %ax,0xf03422be
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f0107ed9:	b8 26 a8 10 f0       	mov    $0xf010a826,%eax
f0107ede:	66 a3 c0 22 34 f0    	mov    %ax,0xf03422c0
f0107ee4:	66 c7 05 c2 22 34 f0 	movw   $0x8,0xf03422c2
f0107eeb:	08 00 
f0107eed:	a0 c4 22 34 f0       	mov    0xf03422c4,%al
f0107ef2:	83 e0 e0             	and    $0xffffffe0,%eax
f0107ef5:	a2 c4 22 34 f0       	mov    %al,0xf03422c4
f0107efa:	a0 c4 22 34 f0       	mov    0xf03422c4,%al
f0107eff:	83 e0 1f             	and    $0x1f,%eax
f0107f02:	a2 c4 22 34 f0       	mov    %al,0xf03422c4
f0107f07:	a0 c5 22 34 f0       	mov    0xf03422c5,%al
f0107f0c:	83 e0 f0             	and    $0xfffffff0,%eax
f0107f0f:	83 c8 0e             	or     $0xe,%eax
f0107f12:	a2 c5 22 34 f0       	mov    %al,0xf03422c5
f0107f17:	a0 c5 22 34 f0       	mov    0xf03422c5,%al
f0107f1c:	83 e0 ef             	and    $0xffffffef,%eax
f0107f1f:	a2 c5 22 34 f0       	mov    %al,0xf03422c5
f0107f24:	a0 c5 22 34 f0       	mov    0xf03422c5,%al
f0107f29:	83 c8 60             	or     $0x60,%eax
f0107f2c:	a2 c5 22 34 f0       	mov    %al,0xf03422c5
f0107f31:	a0 c5 22 34 f0       	mov    0xf03422c5,%al
f0107f36:	83 c8 80             	or     $0xffffff80,%eax
f0107f39:	a2 c5 22 34 f0       	mov    %al,0xf03422c5
f0107f3e:	b8 26 a8 10 f0       	mov    $0xf010a826,%eax
f0107f43:	c1 e8 10             	shr    $0x10,%eax
f0107f46:	66 a3 c6 22 34 f0    	mov    %ax,0xf03422c6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f0107f4c:	b8 2c a8 10 f0       	mov    $0xf010a82c,%eax
f0107f51:	66 a3 c8 22 34 f0    	mov    %ax,0xf03422c8
f0107f57:	66 c7 05 ca 22 34 f0 	movw   $0x8,0xf03422ca
f0107f5e:	08 00 
f0107f60:	a0 cc 22 34 f0       	mov    0xf03422cc,%al
f0107f65:	83 e0 e0             	and    $0xffffffe0,%eax
f0107f68:	a2 cc 22 34 f0       	mov    %al,0xf03422cc
f0107f6d:	a0 cc 22 34 f0       	mov    0xf03422cc,%al
f0107f72:	83 e0 1f             	and    $0x1f,%eax
f0107f75:	a2 cc 22 34 f0       	mov    %al,0xf03422cc
f0107f7a:	a0 cd 22 34 f0       	mov    0xf03422cd,%al
f0107f7f:	83 e0 f0             	and    $0xfffffff0,%eax
f0107f82:	83 c8 0e             	or     $0xe,%eax
f0107f85:	a2 cd 22 34 f0       	mov    %al,0xf03422cd
f0107f8a:	a0 cd 22 34 f0       	mov    0xf03422cd,%al
f0107f8f:	83 e0 ef             	and    $0xffffffef,%eax
f0107f92:	a2 cd 22 34 f0       	mov    %al,0xf03422cd
f0107f97:	a0 cd 22 34 f0       	mov    0xf03422cd,%al
f0107f9c:	83 c8 60             	or     $0x60,%eax
f0107f9f:	a2 cd 22 34 f0       	mov    %al,0xf03422cd
f0107fa4:	a0 cd 22 34 f0       	mov    0xf03422cd,%al
f0107fa9:	83 c8 80             	or     $0xffffff80,%eax
f0107fac:	a2 cd 22 34 f0       	mov    %al,0xf03422cd
f0107fb1:	b8 2c a8 10 f0       	mov    $0xf010a82c,%eax
f0107fb6:	c1 e8 10             	shr    $0x10,%eax
f0107fb9:	66 a3 ce 22 34 f0    	mov    %ax,0xf03422ce
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f0107fbf:	b8 32 a8 10 f0       	mov    $0xf010a832,%eax
f0107fc4:	66 a3 d0 22 34 f0    	mov    %ax,0xf03422d0
f0107fca:	66 c7 05 d2 22 34 f0 	movw   $0x8,0xf03422d2
f0107fd1:	08 00 
f0107fd3:	a0 d4 22 34 f0       	mov    0xf03422d4,%al
f0107fd8:	83 e0 e0             	and    $0xffffffe0,%eax
f0107fdb:	a2 d4 22 34 f0       	mov    %al,0xf03422d4
f0107fe0:	a0 d4 22 34 f0       	mov    0xf03422d4,%al
f0107fe5:	83 e0 1f             	and    $0x1f,%eax
f0107fe8:	a2 d4 22 34 f0       	mov    %al,0xf03422d4
f0107fed:	a0 d5 22 34 f0       	mov    0xf03422d5,%al
f0107ff2:	83 e0 f0             	and    $0xfffffff0,%eax
f0107ff5:	83 c8 0e             	or     $0xe,%eax
f0107ff8:	a2 d5 22 34 f0       	mov    %al,0xf03422d5
f0107ffd:	a0 d5 22 34 f0       	mov    0xf03422d5,%al
f0108002:	83 e0 ef             	and    $0xffffffef,%eax
f0108005:	a2 d5 22 34 f0       	mov    %al,0xf03422d5
f010800a:	a0 d5 22 34 f0       	mov    0xf03422d5,%al
f010800f:	83 c8 60             	or     $0x60,%eax
f0108012:	a2 d5 22 34 f0       	mov    %al,0xf03422d5
f0108017:	a0 d5 22 34 f0       	mov    0xf03422d5,%al
f010801c:	83 c8 80             	or     $0xffffff80,%eax
f010801f:	a2 d5 22 34 f0       	mov    %al,0xf03422d5
f0108024:	b8 32 a8 10 f0       	mov    $0xf010a832,%eax
f0108029:	c1 e8 10             	shr    $0x10,%eax
f010802c:	66 a3 d6 22 34 f0    	mov    %ax,0xf03422d6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f0108032:	b8 38 a8 10 f0       	mov    $0xf010a838,%eax
f0108037:	66 a3 d8 22 34 f0    	mov    %ax,0xf03422d8
f010803d:	66 c7 05 da 22 34 f0 	movw   $0x8,0xf03422da
f0108044:	08 00 
f0108046:	a0 dc 22 34 f0       	mov    0xf03422dc,%al
f010804b:	83 e0 e0             	and    $0xffffffe0,%eax
f010804e:	a2 dc 22 34 f0       	mov    %al,0xf03422dc
f0108053:	a0 dc 22 34 f0       	mov    0xf03422dc,%al
f0108058:	83 e0 1f             	and    $0x1f,%eax
f010805b:	a2 dc 22 34 f0       	mov    %al,0xf03422dc
f0108060:	a0 dd 22 34 f0       	mov    0xf03422dd,%al
f0108065:	83 e0 f0             	and    $0xfffffff0,%eax
f0108068:	83 c8 0e             	or     $0xe,%eax
f010806b:	a2 dd 22 34 f0       	mov    %al,0xf03422dd
f0108070:	a0 dd 22 34 f0       	mov    0xf03422dd,%al
f0108075:	83 e0 ef             	and    $0xffffffef,%eax
f0108078:	a2 dd 22 34 f0       	mov    %al,0xf03422dd
f010807d:	a0 dd 22 34 f0       	mov    0xf03422dd,%al
f0108082:	83 c8 60             	or     $0x60,%eax
f0108085:	a2 dd 22 34 f0       	mov    %al,0xf03422dd
f010808a:	a0 dd 22 34 f0       	mov    0xf03422dd,%al
f010808f:	83 c8 80             	or     $0xffffff80,%eax
f0108092:	a2 dd 22 34 f0       	mov    %al,0xf03422dd
f0108097:	b8 38 a8 10 f0       	mov    $0xf010a838,%eax
f010809c:	c1 e8 10             	shr    $0x10,%eax
f010809f:	66 a3 de 22 34 f0    	mov    %ax,0xf03422de
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f01080a5:	b8 3e a8 10 f0       	mov    $0xf010a83e,%eax
f01080aa:	66 a3 e0 22 34 f0    	mov    %ax,0xf03422e0
f01080b0:	66 c7 05 e2 22 34 f0 	movw   $0x8,0xf03422e2
f01080b7:	08 00 
f01080b9:	a0 e4 22 34 f0       	mov    0xf03422e4,%al
f01080be:	83 e0 e0             	and    $0xffffffe0,%eax
f01080c1:	a2 e4 22 34 f0       	mov    %al,0xf03422e4
f01080c6:	a0 e4 22 34 f0       	mov    0xf03422e4,%al
f01080cb:	83 e0 1f             	and    $0x1f,%eax
f01080ce:	a2 e4 22 34 f0       	mov    %al,0xf03422e4
f01080d3:	a0 e5 22 34 f0       	mov    0xf03422e5,%al
f01080d8:	83 e0 f0             	and    $0xfffffff0,%eax
f01080db:	83 c8 0e             	or     $0xe,%eax
f01080de:	a2 e5 22 34 f0       	mov    %al,0xf03422e5
f01080e3:	a0 e5 22 34 f0       	mov    0xf03422e5,%al
f01080e8:	83 e0 ef             	and    $0xffffffef,%eax
f01080eb:	a2 e5 22 34 f0       	mov    %al,0xf03422e5
f01080f0:	a0 e5 22 34 f0       	mov    0xf03422e5,%al
f01080f5:	83 c8 60             	or     $0x60,%eax
f01080f8:	a2 e5 22 34 f0       	mov    %al,0xf03422e5
f01080fd:	a0 e5 22 34 f0       	mov    0xf03422e5,%al
f0108102:	83 c8 80             	or     $0xffffff80,%eax
f0108105:	a2 e5 22 34 f0       	mov    %al,0xf03422e5
f010810a:	b8 3e a8 10 f0       	mov    $0xf010a83e,%eax
f010810f:	c1 e8 10             	shr    $0x10,%eax
f0108112:	66 a3 e6 22 34 f0    	mov    %ax,0xf03422e6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f0108118:	b8 44 a8 10 f0       	mov    $0xf010a844,%eax
f010811d:	66 a3 e8 22 34 f0    	mov    %ax,0xf03422e8
f0108123:	66 c7 05 ea 22 34 f0 	movw   $0x8,0xf03422ea
f010812a:	08 00 
f010812c:	a0 ec 22 34 f0       	mov    0xf03422ec,%al
f0108131:	83 e0 e0             	and    $0xffffffe0,%eax
f0108134:	a2 ec 22 34 f0       	mov    %al,0xf03422ec
f0108139:	a0 ec 22 34 f0       	mov    0xf03422ec,%al
f010813e:	83 e0 1f             	and    $0x1f,%eax
f0108141:	a2 ec 22 34 f0       	mov    %al,0xf03422ec
f0108146:	a0 ed 22 34 f0       	mov    0xf03422ed,%al
f010814b:	83 e0 f0             	and    $0xfffffff0,%eax
f010814e:	83 c8 0e             	or     $0xe,%eax
f0108151:	a2 ed 22 34 f0       	mov    %al,0xf03422ed
f0108156:	a0 ed 22 34 f0       	mov    0xf03422ed,%al
f010815b:	83 e0 ef             	and    $0xffffffef,%eax
f010815e:	a2 ed 22 34 f0       	mov    %al,0xf03422ed
f0108163:	a0 ed 22 34 f0       	mov    0xf03422ed,%al
f0108168:	83 c8 60             	or     $0x60,%eax
f010816b:	a2 ed 22 34 f0       	mov    %al,0xf03422ed
f0108170:	a0 ed 22 34 f0       	mov    0xf03422ed,%al
f0108175:	83 c8 80             	or     $0xffffff80,%eax
f0108178:	a2 ed 22 34 f0       	mov    %al,0xf03422ed
f010817d:	b8 44 a8 10 f0       	mov    $0xf010a844,%eax
f0108182:	c1 e8 10             	shr    $0x10,%eax
f0108185:	66 a3 ee 22 34 f0    	mov    %ax,0xf03422ee
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010818b:	b8 4a a8 10 f0       	mov    $0xf010a84a,%eax
f0108190:	66 a3 f0 22 34 f0    	mov    %ax,0xf03422f0
f0108196:	66 c7 05 f2 22 34 f0 	movw   $0x8,0xf03422f2
f010819d:	08 00 
f010819f:	a0 f4 22 34 f0       	mov    0xf03422f4,%al
f01081a4:	83 e0 e0             	and    $0xffffffe0,%eax
f01081a7:	a2 f4 22 34 f0       	mov    %al,0xf03422f4
f01081ac:	a0 f4 22 34 f0       	mov    0xf03422f4,%al
f01081b1:	83 e0 1f             	and    $0x1f,%eax
f01081b4:	a2 f4 22 34 f0       	mov    %al,0xf03422f4
f01081b9:	a0 f5 22 34 f0       	mov    0xf03422f5,%al
f01081be:	83 e0 f0             	and    $0xfffffff0,%eax
f01081c1:	83 c8 0e             	or     $0xe,%eax
f01081c4:	a2 f5 22 34 f0       	mov    %al,0xf03422f5
f01081c9:	a0 f5 22 34 f0       	mov    0xf03422f5,%al
f01081ce:	83 e0 ef             	and    $0xffffffef,%eax
f01081d1:	a2 f5 22 34 f0       	mov    %al,0xf03422f5
f01081d6:	a0 f5 22 34 f0       	mov    0xf03422f5,%al
f01081db:	83 c8 60             	or     $0x60,%eax
f01081de:	a2 f5 22 34 f0       	mov    %al,0xf03422f5
f01081e3:	a0 f5 22 34 f0       	mov    0xf03422f5,%al
f01081e8:	83 c8 80             	or     $0xffffff80,%eax
f01081eb:	a2 f5 22 34 f0       	mov    %al,0xf03422f5
f01081f0:	b8 4a a8 10 f0       	mov    $0xf010a84a,%eax
f01081f5:	c1 e8 10             	shr    $0x10,%eax
f01081f8:	66 a3 f6 22 34 f0    	mov    %ax,0xf03422f6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f01081fe:	b8 50 a8 10 f0       	mov    $0xf010a850,%eax
f0108203:	66 a3 f8 22 34 f0    	mov    %ax,0xf03422f8
f0108209:	66 c7 05 fa 22 34 f0 	movw   $0x8,0xf03422fa
f0108210:	08 00 
f0108212:	a0 fc 22 34 f0       	mov    0xf03422fc,%al
f0108217:	83 e0 e0             	and    $0xffffffe0,%eax
f010821a:	a2 fc 22 34 f0       	mov    %al,0xf03422fc
f010821f:	a0 fc 22 34 f0       	mov    0xf03422fc,%al
f0108224:	83 e0 1f             	and    $0x1f,%eax
f0108227:	a2 fc 22 34 f0       	mov    %al,0xf03422fc
f010822c:	a0 fd 22 34 f0       	mov    0xf03422fd,%al
f0108231:	83 e0 f0             	and    $0xfffffff0,%eax
f0108234:	83 c8 0e             	or     $0xe,%eax
f0108237:	a2 fd 22 34 f0       	mov    %al,0xf03422fd
f010823c:	a0 fd 22 34 f0       	mov    0xf03422fd,%al
f0108241:	83 e0 ef             	and    $0xffffffef,%eax
f0108244:	a2 fd 22 34 f0       	mov    %al,0xf03422fd
f0108249:	a0 fd 22 34 f0       	mov    0xf03422fd,%al
f010824e:	83 c8 60             	or     $0x60,%eax
f0108251:	a2 fd 22 34 f0       	mov    %al,0xf03422fd
f0108256:	a0 fd 22 34 f0       	mov    0xf03422fd,%al
f010825b:	83 c8 80             	or     $0xffffff80,%eax
f010825e:	a2 fd 22 34 f0       	mov    %al,0xf03422fd
f0108263:	b8 50 a8 10 f0       	mov    $0xf010a850,%eax
f0108268:	c1 e8 10             	shr    $0x10,%eax
f010826b:	66 a3 fe 22 34 f0    	mov    %ax,0xf03422fe
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f0108271:	b8 56 a8 10 f0       	mov    $0xf010a856,%eax
f0108276:	66 a3 00 23 34 f0    	mov    %ax,0xf0342300
f010827c:	66 c7 05 02 23 34 f0 	movw   $0x8,0xf0342302
f0108283:	08 00 
f0108285:	a0 04 23 34 f0       	mov    0xf0342304,%al
f010828a:	83 e0 e0             	and    $0xffffffe0,%eax
f010828d:	a2 04 23 34 f0       	mov    %al,0xf0342304
f0108292:	a0 04 23 34 f0       	mov    0xf0342304,%al
f0108297:	83 e0 1f             	and    $0x1f,%eax
f010829a:	a2 04 23 34 f0       	mov    %al,0xf0342304
f010829f:	a0 05 23 34 f0       	mov    0xf0342305,%al
f01082a4:	83 e0 f0             	and    $0xfffffff0,%eax
f01082a7:	83 c8 0e             	or     $0xe,%eax
f01082aa:	a2 05 23 34 f0       	mov    %al,0xf0342305
f01082af:	a0 05 23 34 f0       	mov    0xf0342305,%al
f01082b4:	83 e0 ef             	and    $0xffffffef,%eax
f01082b7:	a2 05 23 34 f0       	mov    %al,0xf0342305
f01082bc:	a0 05 23 34 f0       	mov    0xf0342305,%al
f01082c1:	83 c8 60             	or     $0x60,%eax
f01082c4:	a2 05 23 34 f0       	mov    %al,0xf0342305
f01082c9:	a0 05 23 34 f0       	mov    0xf0342305,%al
f01082ce:	83 c8 80             	or     $0xffffff80,%eax
f01082d1:	a2 05 23 34 f0       	mov    %al,0xf0342305
f01082d6:	b8 56 a8 10 f0       	mov    $0xf010a856,%eax
f01082db:	c1 e8 10             	shr    $0x10,%eax
f01082de:	66 a3 06 23 34 f0    	mov    %ax,0xf0342306
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f01082e4:	b8 5c a8 10 f0       	mov    $0xf010a85c,%eax
f01082e9:	66 a3 08 23 34 f0    	mov    %ax,0xf0342308
f01082ef:	66 c7 05 0a 23 34 f0 	movw   $0x8,0xf034230a
f01082f6:	08 00 
f01082f8:	a0 0c 23 34 f0       	mov    0xf034230c,%al
f01082fd:	83 e0 e0             	and    $0xffffffe0,%eax
f0108300:	a2 0c 23 34 f0       	mov    %al,0xf034230c
f0108305:	a0 0c 23 34 f0       	mov    0xf034230c,%al
f010830a:	83 e0 1f             	and    $0x1f,%eax
f010830d:	a2 0c 23 34 f0       	mov    %al,0xf034230c
f0108312:	a0 0d 23 34 f0       	mov    0xf034230d,%al
f0108317:	83 e0 f0             	and    $0xfffffff0,%eax
f010831a:	83 c8 0e             	or     $0xe,%eax
f010831d:	a2 0d 23 34 f0       	mov    %al,0xf034230d
f0108322:	a0 0d 23 34 f0       	mov    0xf034230d,%al
f0108327:	83 e0 ef             	and    $0xffffffef,%eax
f010832a:	a2 0d 23 34 f0       	mov    %al,0xf034230d
f010832f:	a0 0d 23 34 f0       	mov    0xf034230d,%al
f0108334:	83 c8 60             	or     $0x60,%eax
f0108337:	a2 0d 23 34 f0       	mov    %al,0xf034230d
f010833c:	a0 0d 23 34 f0       	mov    0xf034230d,%al
f0108341:	83 c8 80             	or     $0xffffff80,%eax
f0108344:	a2 0d 23 34 f0       	mov    %al,0xf034230d
f0108349:	b8 5c a8 10 f0       	mov    $0xf010a85c,%eax
f010834e:	c1 e8 10             	shr    $0x10,%eax
f0108351:	66 a3 0e 23 34 f0    	mov    %ax,0xf034230e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f0108357:	b8 62 a8 10 f0       	mov    $0xf010a862,%eax
f010835c:	66 a3 10 23 34 f0    	mov    %ax,0xf0342310
f0108362:	66 c7 05 12 23 34 f0 	movw   $0x8,0xf0342312
f0108369:	08 00 
f010836b:	a0 14 23 34 f0       	mov    0xf0342314,%al
f0108370:	83 e0 e0             	and    $0xffffffe0,%eax
f0108373:	a2 14 23 34 f0       	mov    %al,0xf0342314
f0108378:	a0 14 23 34 f0       	mov    0xf0342314,%al
f010837d:	83 e0 1f             	and    $0x1f,%eax
f0108380:	a2 14 23 34 f0       	mov    %al,0xf0342314
f0108385:	a0 15 23 34 f0       	mov    0xf0342315,%al
f010838a:	83 e0 f0             	and    $0xfffffff0,%eax
f010838d:	83 c8 0e             	or     $0xe,%eax
f0108390:	a2 15 23 34 f0       	mov    %al,0xf0342315
f0108395:	a0 15 23 34 f0       	mov    0xf0342315,%al
f010839a:	83 e0 ef             	and    $0xffffffef,%eax
f010839d:	a2 15 23 34 f0       	mov    %al,0xf0342315
f01083a2:	a0 15 23 34 f0       	mov    0xf0342315,%al
f01083a7:	83 c8 60             	or     $0x60,%eax
f01083aa:	a2 15 23 34 f0       	mov    %al,0xf0342315
f01083af:	a0 15 23 34 f0       	mov    0xf0342315,%al
f01083b4:	83 c8 80             	or     $0xffffff80,%eax
f01083b7:	a2 15 23 34 f0       	mov    %al,0xf0342315
f01083bc:	b8 62 a8 10 f0       	mov    $0xf010a862,%eax
f01083c1:	c1 e8 10             	shr    $0x10,%eax
f01083c4:	66 a3 16 23 34 f0    	mov    %ax,0xf0342316
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f01083ca:	b8 68 a8 10 f0       	mov    $0xf010a868,%eax
f01083cf:	66 a3 18 23 34 f0    	mov    %ax,0xf0342318
f01083d5:	66 c7 05 1a 23 34 f0 	movw   $0x8,0xf034231a
f01083dc:	08 00 
f01083de:	a0 1c 23 34 f0       	mov    0xf034231c,%al
f01083e3:	83 e0 e0             	and    $0xffffffe0,%eax
f01083e6:	a2 1c 23 34 f0       	mov    %al,0xf034231c
f01083eb:	a0 1c 23 34 f0       	mov    0xf034231c,%al
f01083f0:	83 e0 1f             	and    $0x1f,%eax
f01083f3:	a2 1c 23 34 f0       	mov    %al,0xf034231c
f01083f8:	a0 1d 23 34 f0       	mov    0xf034231d,%al
f01083fd:	83 e0 f0             	and    $0xfffffff0,%eax
f0108400:	83 c8 0e             	or     $0xe,%eax
f0108403:	a2 1d 23 34 f0       	mov    %al,0xf034231d
f0108408:	a0 1d 23 34 f0       	mov    0xf034231d,%al
f010840d:	83 e0 ef             	and    $0xffffffef,%eax
f0108410:	a2 1d 23 34 f0       	mov    %al,0xf034231d
f0108415:	a0 1d 23 34 f0       	mov    0xf034231d,%al
f010841a:	83 c8 60             	or     $0x60,%eax
f010841d:	a2 1d 23 34 f0       	mov    %al,0xf034231d
f0108422:	a0 1d 23 34 f0       	mov    0xf034231d,%al
f0108427:	83 c8 80             	or     $0xffffff80,%eax
f010842a:	a2 1d 23 34 f0       	mov    %al,0xf034231d
f010842f:	b8 68 a8 10 f0       	mov    $0xf010a868,%eax
f0108434:	c1 e8 10             	shr    $0x10,%eax
f0108437:	66 a3 1e 23 34 f0    	mov    %ax,0xf034231e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010843d:	c7 05 a4 29 34 f0 00 	movl   $0xefc00000,0xf03429a4
f0108444:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f0108447:	66 c7 05 a8 29 34 f0 	movw   $0x10,0xf03429a8
f010844e:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f0108450:	66 c7 05 08 78 15 f0 	movw   $0x68,0xf0157808
f0108457:	68 00 
f0108459:	b8 a0 29 34 f0       	mov    $0xf03429a0,%eax
f010845e:	66 a3 0a 78 15 f0    	mov    %ax,0xf015780a
f0108464:	b8 a0 29 34 f0       	mov    $0xf03429a0,%eax
f0108469:	c1 e8 10             	shr    $0x10,%eax
f010846c:	a2 0c 78 15 f0       	mov    %al,0xf015780c
f0108471:	a0 0d 78 15 f0       	mov    0xf015780d,%al
f0108476:	83 e0 f0             	and    $0xfffffff0,%eax
f0108479:	83 c8 09             	or     $0x9,%eax
f010847c:	a2 0d 78 15 f0       	mov    %al,0xf015780d
f0108481:	a0 0d 78 15 f0       	mov    0xf015780d,%al
f0108486:	83 c8 10             	or     $0x10,%eax
f0108489:	a2 0d 78 15 f0       	mov    %al,0xf015780d
f010848e:	a0 0d 78 15 f0       	mov    0xf015780d,%al
f0108493:	83 e0 9f             	and    $0xffffff9f,%eax
f0108496:	a2 0d 78 15 f0       	mov    %al,0xf015780d
f010849b:	a0 0d 78 15 f0       	mov    0xf015780d,%al
f01084a0:	83 c8 80             	or     $0xffffff80,%eax
f01084a3:	a2 0d 78 15 f0       	mov    %al,0xf015780d
f01084a8:	a0 0e 78 15 f0       	mov    0xf015780e,%al
f01084ad:	83 e0 f0             	and    $0xfffffff0,%eax
f01084b0:	a2 0e 78 15 f0       	mov    %al,0xf015780e
f01084b5:	a0 0e 78 15 f0       	mov    0xf015780e,%al
f01084ba:	83 e0 ef             	and    $0xffffffef,%eax
f01084bd:	a2 0e 78 15 f0       	mov    %al,0xf015780e
f01084c2:	a0 0e 78 15 f0       	mov    0xf015780e,%al
f01084c7:	83 e0 df             	and    $0xffffffdf,%eax
f01084ca:	a2 0e 78 15 f0       	mov    %al,0xf015780e
f01084cf:	a0 0e 78 15 f0       	mov    0xf015780e,%al
f01084d4:	83 c8 40             	or     $0x40,%eax
f01084d7:	a2 0e 78 15 f0       	mov    %al,0xf015780e
f01084dc:	a0 0e 78 15 f0       	mov    0xf015780e,%al
f01084e1:	83 e0 7f             	and    $0x7f,%eax
f01084e4:	a2 0e 78 15 f0       	mov    %al,0xf015780e
f01084e9:	b8 a0 29 34 f0       	mov    $0xf03429a0,%eax
f01084ee:	c1 e8 18             	shr    $0x18,%eax
f01084f1:	a2 0f 78 15 f0       	mov    %al,0xf015780f
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f01084f6:	a0 0d 78 15 f0       	mov    0xf015780d,%al
f01084fb:	83 e0 ef             	and    $0xffffffef,%eax
f01084fe:	a2 0d 78 15 f0       	mov    %al,0xf015780d
f0108503:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f0108509:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010850d:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f0108510:	0f 01 1d ac 79 15 f0 	lidtl  0xf01579ac
}
f0108517:	90                   	nop
f0108518:	c9                   	leave  
f0108519:	c3                   	ret    

f010851a <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010851a:	55                   	push   %ebp
f010851b:	89 e5                	mov    %esp,%ebp
f010851d:	53                   	push   %ebx
f010851e:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f0108521:	83 ec 08             	sub    $0x8,%esp
f0108524:	ff 75 08             	pushl  0x8(%ebp)
f0108527:	68 1b f1 11 f0       	push   $0xf011f11b
f010852c:	e8 05 ef ff ff       	call   f0107436 <cprintf>
f0108531:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f0108534:	8b 45 08             	mov    0x8(%ebp),%eax
f0108537:	83 ec 0c             	sub    $0xc,%esp
f010853a:	50                   	push   %eax
f010853b:	e8 fd 00 00 00       	call   f010863d <print_regs>
f0108540:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f0108543:	8b 45 08             	mov    0x8(%ebp),%eax
f0108546:	8b 40 20             	mov    0x20(%eax),%eax
f0108549:	0f b7 c0             	movzwl %ax,%eax
f010854c:	83 ec 08             	sub    $0x8,%esp
f010854f:	50                   	push   %eax
f0108550:	68 2d f1 11 f0       	push   $0xf011f12d
f0108555:	e8 dc ee ff ff       	call   f0107436 <cprintf>
f010855a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010855d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108560:	8b 40 24             	mov    0x24(%eax),%eax
f0108563:	0f b7 c0             	movzwl %ax,%eax
f0108566:	83 ec 08             	sub    $0x8,%esp
f0108569:	50                   	push   %eax
f010856a:	68 40 f1 11 f0       	push   $0xf011f140
f010856f:	e8 c2 ee ff ff       	call   f0107436 <cprintf>
f0108574:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f0108577:	8b 45 08             	mov    0x8(%ebp),%eax
f010857a:	8b 58 28             	mov    0x28(%eax),%ebx
f010857d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108580:	8b 40 28             	mov    0x28(%eax),%eax
f0108583:	83 ec 0c             	sub    $0xc,%esp
f0108586:	50                   	push   %eax
f0108587:	e8 d0 ee ff ff       	call   f010745c <trapname>
f010858c:	83 c4 10             	add    $0x10,%esp
f010858f:	89 c2                	mov    %eax,%edx
f0108591:	8b 45 08             	mov    0x8(%ebp),%eax
f0108594:	8b 40 28             	mov    0x28(%eax),%eax
f0108597:	53                   	push   %ebx
f0108598:	52                   	push   %edx
f0108599:	50                   	push   %eax
f010859a:	68 53 f1 11 f0       	push   $0xf011f153
f010859f:	e8 92 ee ff ff       	call   f0107436 <cprintf>
f01085a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f01085a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01085aa:	8b 40 2c             	mov    0x2c(%eax),%eax
f01085ad:	83 ec 08             	sub    $0x8,%esp
f01085b0:	50                   	push   %eax
f01085b1:	68 6a f1 11 f0       	push   $0xf011f16a
f01085b6:	e8 7b ee ff ff       	call   f0107436 <cprintf>
f01085bb:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f01085be:	8b 45 08             	mov    0x8(%ebp),%eax
f01085c1:	8b 40 30             	mov    0x30(%eax),%eax
f01085c4:	83 ec 08             	sub    $0x8,%esp
f01085c7:	50                   	push   %eax
f01085c8:	68 79 f1 11 f0       	push   $0xf011f179
f01085cd:	e8 64 ee ff ff       	call   f0107436 <cprintf>
f01085d2:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f01085d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01085d8:	8b 40 34             	mov    0x34(%eax),%eax
f01085db:	0f b7 c0             	movzwl %ax,%eax
f01085de:	83 ec 08             	sub    $0x8,%esp
f01085e1:	50                   	push   %eax
f01085e2:	68 88 f1 11 f0       	push   $0xf011f188
f01085e7:	e8 4a ee ff ff       	call   f0107436 <cprintf>
f01085ec:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f01085ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01085f2:	8b 40 38             	mov    0x38(%eax),%eax
f01085f5:	83 ec 08             	sub    $0x8,%esp
f01085f8:	50                   	push   %eax
f01085f9:	68 9b f1 11 f0       	push   $0xf011f19b
f01085fe:	e8 33 ee ff ff       	call   f0107436 <cprintf>
f0108603:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f0108606:	8b 45 08             	mov    0x8(%ebp),%eax
f0108609:	8b 40 3c             	mov    0x3c(%eax),%eax
f010860c:	83 ec 08             	sub    $0x8,%esp
f010860f:	50                   	push   %eax
f0108610:	68 aa f1 11 f0       	push   $0xf011f1aa
f0108615:	e8 1c ee ff ff       	call   f0107436 <cprintf>
f010861a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010861d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108620:	8b 40 40             	mov    0x40(%eax),%eax
f0108623:	0f b7 c0             	movzwl %ax,%eax
f0108626:	83 ec 08             	sub    $0x8,%esp
f0108629:	50                   	push   %eax
f010862a:	68 b9 f1 11 f0       	push   $0xf011f1b9
f010862f:	e8 02 ee ff ff       	call   f0107436 <cprintf>
f0108634:	83 c4 10             	add    $0x10,%esp
}
f0108637:	90                   	nop
f0108638:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010863b:	c9                   	leave  
f010863c:	c3                   	ret    

f010863d <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010863d:	55                   	push   %ebp
f010863e:	89 e5                	mov    %esp,%ebp
f0108640:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f0108643:	8b 45 08             	mov    0x8(%ebp),%eax
f0108646:	8b 00                	mov    (%eax),%eax
f0108648:	83 ec 08             	sub    $0x8,%esp
f010864b:	50                   	push   %eax
f010864c:	68 cc f1 11 f0       	push   $0xf011f1cc
f0108651:	e8 e0 ed ff ff       	call   f0107436 <cprintf>
f0108656:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f0108659:	8b 45 08             	mov    0x8(%ebp),%eax
f010865c:	8b 40 04             	mov    0x4(%eax),%eax
f010865f:	83 ec 08             	sub    $0x8,%esp
f0108662:	50                   	push   %eax
f0108663:	68 db f1 11 f0       	push   $0xf011f1db
f0108668:	e8 c9 ed ff ff       	call   f0107436 <cprintf>
f010866d:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f0108670:	8b 45 08             	mov    0x8(%ebp),%eax
f0108673:	8b 40 08             	mov    0x8(%eax),%eax
f0108676:	83 ec 08             	sub    $0x8,%esp
f0108679:	50                   	push   %eax
f010867a:	68 ea f1 11 f0       	push   $0xf011f1ea
f010867f:	e8 b2 ed ff ff       	call   f0107436 <cprintf>
f0108684:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f0108687:	8b 45 08             	mov    0x8(%ebp),%eax
f010868a:	8b 40 0c             	mov    0xc(%eax),%eax
f010868d:	83 ec 08             	sub    $0x8,%esp
f0108690:	50                   	push   %eax
f0108691:	68 f9 f1 11 f0       	push   $0xf011f1f9
f0108696:	e8 9b ed ff ff       	call   f0107436 <cprintf>
f010869b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010869e:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a1:	8b 40 10             	mov    0x10(%eax),%eax
f01086a4:	83 ec 08             	sub    $0x8,%esp
f01086a7:	50                   	push   %eax
f01086a8:	68 08 f2 11 f0       	push   $0xf011f208
f01086ad:	e8 84 ed ff ff       	call   f0107436 <cprintf>
f01086b2:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f01086b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01086b8:	8b 40 14             	mov    0x14(%eax),%eax
f01086bb:	83 ec 08             	sub    $0x8,%esp
f01086be:	50                   	push   %eax
f01086bf:	68 17 f2 11 f0       	push   $0xf011f217
f01086c4:	e8 6d ed ff ff       	call   f0107436 <cprintf>
f01086c9:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f01086cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01086cf:	8b 40 18             	mov    0x18(%eax),%eax
f01086d2:	83 ec 08             	sub    $0x8,%esp
f01086d5:	50                   	push   %eax
f01086d6:	68 26 f2 11 f0       	push   $0xf011f226
f01086db:	e8 56 ed ff ff       	call   f0107436 <cprintf>
f01086e0:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f01086e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01086e6:	8b 40 1c             	mov    0x1c(%eax),%eax
f01086e9:	83 ec 08             	sub    $0x8,%esp
f01086ec:	50                   	push   %eax
f01086ed:	68 35 f2 11 f0       	push   $0xf011f235
f01086f2:	e8 3f ed ff ff       	call   f0107436 <cprintf>
f01086f7:	83 c4 10             	add    $0x10,%esp
}
f01086fa:	90                   	nop
f01086fb:	c9                   	leave  
f01086fc:	c3                   	ret    

f01086fd <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f01086fd:	55                   	push   %ebp
f01086fe:	89 e5                	mov    %esp,%ebp
f0108700:	57                   	push   %edi
f0108701:	56                   	push   %esi
f0108702:	53                   	push   %ebx
f0108703:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.


	if(tf->tf_trapno == T_PGFLT)
f0108706:	8b 45 08             	mov    0x8(%ebp),%eax
f0108709:	8b 40 28             	mov    0x28(%eax),%eax
f010870c:	83 f8 0e             	cmp    $0xe,%eax
f010870f:	75 21                	jne    f0108732 <trap_dispatch+0x35>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRUTimeStamp())
f0108711:	e8 b5 02 00 00       	call   f01089cb <isPageReplacmentAlgorithmLRUTimeStamp>
f0108716:	85 c0                	test   %eax,%eax
f0108718:	74 05                	je     f010871f <trap_dispatch+0x22>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010871a:	e8 79 37 00 00       	call   f010be98 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010871f:	83 ec 0c             	sub    $0xc,%esp
f0108722:	ff 75 08             	pushl  0x8(%ebp)
f0108725:	e8 1b 05 00 00       	call   f0108c45 <fault_handler>
f010872a:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010872d:	e9 a5 00 00 00       	jmp    f01087d7 <trap_dispatch+0xda>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f0108732:	8b 45 08             	mov    0x8(%ebp),%eax
f0108735:	8b 40 28             	mov    0x28(%eax),%eax
f0108738:	83 f8 30             	cmp    $0x30,%eax
f010873b:	75 42                	jne    f010877f <trap_dispatch+0x82>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010873d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108740:	8b 78 04             	mov    0x4(%eax),%edi
f0108743:	8b 45 08             	mov    0x8(%ebp),%eax
f0108746:	8b 30                	mov    (%eax),%esi
f0108748:	8b 45 08             	mov    0x8(%ebp),%eax
f010874b:	8b 58 10             	mov    0x10(%eax),%ebx
f010874e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108751:	8b 48 18             	mov    0x18(%eax),%ecx
f0108754:	8b 45 08             	mov    0x8(%ebp),%eax
f0108757:	8b 50 14             	mov    0x14(%eax),%edx
f010875a:	8b 45 08             	mov    0x8(%ebp),%eax
f010875d:	8b 40 1c             	mov    0x1c(%eax),%eax
f0108760:	83 ec 08             	sub    $0x8,%esp
f0108763:	57                   	push   %edi
f0108764:	56                   	push   %esi
f0108765:	53                   	push   %ebx
f0108766:	51                   	push   %ecx
f0108767:	52                   	push   %edx
f0108768:	50                   	push   %eax
f0108769:	e8 7b 44 00 00       	call   f010cbe9 <syscall>
f010876e:	83 c4 20             	add    $0x20,%esp
f0108771:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f0108774:	8b 45 08             	mov    0x8(%ebp),%eax
f0108777:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010877a:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010877d:	eb 58                	jmp    f01087d7 <trap_dispatch+0xda>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010877f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108782:	8b 40 28             	mov    0x28(%eax),%eax
f0108785:	83 f8 08             	cmp    $0x8,%eax
f0108788:	75 17                	jne    f01087a1 <trap_dispatch+0xa4>
	{
		panic("double fault!!");
f010878a:	83 ec 04             	sub    $0x4,%esp
f010878d:	68 44 f2 11 f0       	push   $0xf011f244
f0108792:	68 f2 00 00 00       	push   $0xf2
f0108797:	68 53 f2 11 f0       	push   $0xf011f253
f010879c:	e8 f2 79 ff ff       	call   f0100193 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f01087a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01087a4:	8b 40 28             	mov    0x28(%eax),%eax
f01087a7:	83 f8 20             	cmp    $0x20,%eax
f01087aa:	75 07                	jne    f01087b3 <trap_dispatch+0xb6>
	{
		clock_interrupt_handler() ;
f01087ac:	e8 ce 36 00 00       	call   f010be7f <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f01087b1:	eb 24                	jmp    f01087d7 <trap_dispatch+0xda>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f01087b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01087b6:	8b 40 34             	mov    0x34(%eax),%eax
f01087b9:	66 83 f8 08          	cmp    $0x8,%ax
f01087bd:	75 17                	jne    f01087d6 <trap_dispatch+0xd9>
		{
			panic("unhandled trap in kernel");
f01087bf:	83 ec 04             	sub    $0x4,%esp
f01087c2:	68 5f f2 11 f0       	push   $0xf011f25f
f01087c7:	68 ff 00 00 00       	push   $0xff
f01087cc:	68 53 f2 11 f0       	push   $0xf011f253
f01087d1:	e8 bd 79 ff ff       	call   f0100193 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f01087d6:	90                   	nop
		}
	}
	return;
}
f01087d7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01087da:	5b                   	pop    %ebx
f01087db:	5e                   	pop    %esi
f01087dc:	5f                   	pop    %edi
f01087dd:	5d                   	pop    %ebp
f01087de:	c3                   	ret    

f01087df <trap>:

void trap(struct Trapframe *tf)
{
f01087df:	55                   	push   %ebp
f01087e0:	89 e5                	mov    %esp,%ebp
f01087e2:	57                   	push   %edi
f01087e3:	56                   	push   %esi
f01087e4:	53                   	push   %ebx
f01087e5:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f01087e8:	e8 e7 e7 ff ff       	call   f0106fd4 <kclock_stop>

	int userTrap = 0;
f01087ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f01087f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01087f7:	8b 40 34             	mov    0x34(%eax),%eax
f01087fa:	0f b7 c0             	movzwl %ax,%eax
f01087fd:	83 e0 03             	and    $0x3,%eax
f0108800:	83 f8 03             	cmp    $0x3,%eax
f0108803:	75 49                	jne    f010884e <trap+0x6f>
		assert(curenv);
f0108805:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010880a:	85 c0                	test   %eax,%eax
f010880c:	75 19                	jne    f0108827 <trap+0x48>
f010880e:	68 78 f2 11 f0       	push   $0xf011f278
f0108813:	68 7f f2 11 f0       	push   $0xf011f27f
f0108818:	68 0f 01 00 00       	push   $0x10f
f010881d:	68 53 f2 11 f0       	push   $0xf011f253
f0108822:	e8 6c 79 ff ff       	call   f0100193 <_panic>
		curenv->env_tf = *tf;
f0108827:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f010882d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108830:	89 c3                	mov    %eax,%ebx
f0108832:	b8 11 00 00 00       	mov    $0x11,%eax
f0108837:	89 d7                	mov    %edx,%edi
f0108839:	89 de                	mov    %ebx,%esi
f010883b:	89 c1                	mov    %eax,%ecx
f010883d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010883f:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0108844:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f0108847:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010884e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108851:	8b 40 28             	mov    0x28(%eax),%eax
f0108854:	83 f8 20             	cmp    $0x20,%eax
f0108857:	75 40                	jne    f0108899 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f0108859:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010885d:	0f 84 a6 00 00 00    	je     f0108909 <trap+0x12a>
		{
			assert(curenv);
f0108863:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0108868:	85 c0                	test   %eax,%eax
f010886a:	75 19                	jne    f0108885 <trap+0xa6>
f010886c:	68 78 f2 11 f0       	push   $0xf011f278
f0108871:	68 7f f2 11 f0       	push   $0xf011f27f
f0108876:	68 1b 01 00 00       	push   $0x11b
f010887b:	68 53 f2 11 f0       	push   $0xf011f253
f0108880:	e8 0e 79 ff ff       	call   f0100193 <_panic>
			curenv->nClocks++ ;
f0108885:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010888a:	8b 90 f8 52 00 00    	mov    0x52f8(%eax),%edx
f0108890:	42                   	inc    %edx
f0108891:	89 90 f8 52 00 00    	mov    %edx,0x52f8(%eax)
f0108897:	eb 70                	jmp    f0108909 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f0108899:	8b 45 08             	mov    0x8(%ebp),%eax
f010889c:	8b 40 28             	mov    0x28(%eax),%eax
f010889f:	83 f8 0e             	cmp    $0xe,%eax
f01088a2:	75 65                	jne    f0108909 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f01088a4:	a0 80 21 34 f0       	mov    0xf0342180,%al
f01088a9:	84 c0                	test   %al,%al
f01088ab:	74 5c                	je     f0108909 <trap+0x12a>
			if (userTrap){
f01088ad:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01088b1:	74 2c                	je     f01088df <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f01088b3:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f01088b8:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f01088be:	8b 52 30             	mov    0x30(%edx),%edx
f01088c1:	89 d1                	mov    %edx,%ecx
f01088c3:	8a 15 80 21 34 f0    	mov    0xf0342180,%dl
f01088c9:	0f b6 d2             	movzbl %dl,%edx
f01088cc:	01 ca                	add    %ecx,%edx
f01088ce:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f01088d1:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f01088d6:	83 ec 0c             	sub    $0xc,%esp
f01088d9:	50                   	push   %eax
f01088da:	e8 17 dd ff ff       	call   f01065f6 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f01088df:	8b 45 08             	mov    0x8(%ebp),%eax
f01088e2:	8b 40 30             	mov    0x30(%eax),%eax
f01088e5:	89 c2                	mov    %eax,%edx
f01088e7:	a0 80 21 34 f0       	mov    0xf0342180,%al
f01088ec:	0f b6 c0             	movzbl %al,%eax
f01088ef:	01 d0                	add    %edx,%eax
f01088f1:	89 c2                	mov    %eax,%edx
f01088f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01088f6:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f01088f9:	e8 01 e7 ff ff       	call   f0106fff <kclock_resume>
				env_pop_tf(tf);
f01088fe:	83 ec 0c             	sub    $0xc,%esp
f0108901:	ff 75 08             	pushl  0x8(%ebp)
f0108904:	e8 98 e5 ff ff       	call   f0106ea1 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f0108909:	83 ec 0c             	sub    $0xc,%esp
f010890c:	ff 75 08             	pushl  0x8(%ebp)
f010890f:	e8 e9 fd ff ff       	call   f01086fd <trap_dispatch>
f0108914:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f0108917:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010891b:	74 3d                	je     f010895a <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010891d:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0108922:	85 c0                	test   %eax,%eax
f0108924:	74 0d                	je     f0108933 <trap+0x154>
f0108926:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010892b:	8b 40 54             	mov    0x54(%eax),%eax
f010892e:	83 f8 02             	cmp    $0x2,%eax
f0108931:	74 19                	je     f010894c <trap+0x16d>
f0108933:	68 94 f2 11 f0       	push   $0xf011f294
f0108938:	68 7f f2 11 f0       	push   $0xf011f27f
f010893d:	68 30 01 00 00       	push   $0x130
f0108942:	68 53 f2 11 f0       	push   $0xf011f253
f0108947:	e8 47 78 ff ff       	call   f0100193 <_panic>
		env_run(curenv);
f010894c:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0108951:	83 ec 0c             	sub    $0xc,%esp
f0108954:	50                   	push   %eax
f0108955:	e8 9c dc ff ff       	call   f01065f6 <env_run>
	 * If trap from kernel, then return to the called kernel function using the passed param "tf"
	 * not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010895a:	83 ec 0c             	sub    $0xc,%esp
f010895d:	ff 75 08             	pushl  0x8(%ebp)
f0108960:	e8 3c e5 ff ff       	call   f0106ea1 <env_pop_tf>

f0108965 <setPageReplacmentAlgorithmLRU>:
	}
}

//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f0108965:	55                   	push   %ebp
f0108966:	89 e5                	mov    %esp,%ebp
f0108968:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010896b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010896f:	74 1f                	je     f0108990 <setPageReplacmentAlgorithmLRU+0x2b>
f0108971:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0108975:	74 19                	je     f0108990 <setPageReplacmentAlgorithmLRU+0x2b>
f0108977:	68 c4 f2 11 f0       	push   $0xf011f2c4
f010897c:	68 7f f2 11 f0       	push   $0xf011f27f
f0108981:	68 40 01 00 00       	push   $0x140
f0108986:	68 53 f2 11 f0       	push   $0xf011f253
f010898b:	e8 03 78 ff ff       	call   f0100193 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f0108990:	8b 45 08             	mov    0x8(%ebp),%eax
f0108993:	a3 0c f6 3a f0       	mov    %eax,0xf03af60c
}
f0108998:	90                   	nop
f0108999:	c9                   	leave  
f010899a:	c3                   	ret    

f010899b <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010899b:	55                   	push   %ebp
f010899c:	89 e5                	mov    %esp,%ebp
f010899e:	c7 05 0c f6 3a f0 03 	movl   $0x3,0xf03af60c
f01089a5:	00 00 00 
f01089a8:	90                   	nop
f01089a9:	5d                   	pop    %ebp
f01089aa:	c3                   	ret    

f01089ab <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f01089ab:	55                   	push   %ebp
f01089ac:	89 e5                	mov    %esp,%ebp
f01089ae:	c7 05 0c f6 3a f0 04 	movl   $0x4,0xf03af60c
f01089b5:	00 00 00 
f01089b8:	90                   	nop
f01089b9:	5d                   	pop    %ebp
f01089ba:	c3                   	ret    

f01089bb <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f01089bb:	55                   	push   %ebp
f01089bc:	89 e5                	mov    %esp,%ebp
f01089be:	c7 05 0c f6 3a f0 05 	movl   $0x5,0xf03af60c
f01089c5:	00 00 00 
f01089c8:	90                   	nop
f01089c9:	5d                   	pop    %ebp
f01089ca:	c3                   	ret    

f01089cb <isPageReplacmentAlgorithmLRUTimeStamp>:

//2020
uint32 isPageReplacmentAlgorithmLRUTimeStamp(){if(_PageRepAlgoType == PG_REP_LRU_TIME_APPROX) return 1; return 0;}
f01089cb:	55                   	push   %ebp
f01089cc:	89 e5                	mov    %esp,%ebp
f01089ce:	a1 0c f6 3a f0       	mov    0xf03af60c,%eax
f01089d3:	83 f8 01             	cmp    $0x1,%eax
f01089d6:	75 07                	jne    f01089df <isPageReplacmentAlgorithmLRUTimeStamp+0x14>
f01089d8:	b8 01 00 00 00       	mov    $0x1,%eax
f01089dd:	eb 05                	jmp    f01089e4 <isPageReplacmentAlgorithmLRUTimeStamp+0x19>
f01089df:	b8 00 00 00 00       	mov    $0x0,%eax
f01089e4:	5d                   	pop    %ebp
f01089e5:	c3                   	ret    

f01089e6 <isPageReplacmentAlgorithmLRULists>:
uint32 isPageReplacmentAlgorithmLRULists(){if(_PageRepAlgoType == PG_REP_LRU_LISTS_APPROX) return 1; return 0;}
f01089e6:	55                   	push   %ebp
f01089e7:	89 e5                	mov    %esp,%ebp
f01089e9:	a1 0c f6 3a f0       	mov    0xf03af60c,%eax
f01089ee:	83 f8 02             	cmp    $0x2,%eax
f01089f1:	75 07                	jne    f01089fa <isPageReplacmentAlgorithmLRULists+0x14>
f01089f3:	b8 01 00 00 00       	mov    $0x1,%eax
f01089f8:	eb 05                	jmp    f01089ff <isPageReplacmentAlgorithmLRULists+0x19>
f01089fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01089ff:	5d                   	pop    %ebp
f0108a00:	c3                   	ret    

f0108a01 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f0108a01:	55                   	push   %ebp
f0108a02:	89 e5                	mov    %esp,%ebp
f0108a04:	a1 0c f6 3a f0       	mov    0xf03af60c,%eax
f0108a09:	83 f8 03             	cmp    $0x3,%eax
f0108a0c:	75 07                	jne    f0108a15 <isPageReplacmentAlgorithmCLOCK+0x14>
f0108a0e:	b8 01 00 00 00       	mov    $0x1,%eax
f0108a13:	eb 05                	jmp    f0108a1a <isPageReplacmentAlgorithmCLOCK+0x19>
f0108a15:	b8 00 00 00 00       	mov    $0x0,%eax
f0108a1a:	5d                   	pop    %ebp
f0108a1b:	c3                   	ret    

f0108a1c <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f0108a1c:	55                   	push   %ebp
f0108a1d:	89 e5                	mov    %esp,%ebp
f0108a1f:	a1 0c f6 3a f0       	mov    0xf03af60c,%eax
f0108a24:	83 f8 04             	cmp    $0x4,%eax
f0108a27:	75 07                	jne    f0108a30 <isPageReplacmentAlgorithmFIFO+0x14>
f0108a29:	b8 01 00 00 00       	mov    $0x1,%eax
f0108a2e:	eb 05                	jmp    f0108a35 <isPageReplacmentAlgorithmFIFO+0x19>
f0108a30:	b8 00 00 00 00       	mov    $0x0,%eax
f0108a35:	5d                   	pop    %ebp
f0108a36:	c3                   	ret    

f0108a37 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f0108a37:	55                   	push   %ebp
f0108a38:	89 e5                	mov    %esp,%ebp
f0108a3a:	a1 0c f6 3a f0       	mov    0xf03af60c,%eax
f0108a3f:	83 f8 05             	cmp    $0x5,%eax
f0108a42:	75 07                	jne    f0108a4b <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f0108a44:	b8 01 00 00 00       	mov    $0x1,%eax
f0108a49:	eb 05                	jmp    f0108a50 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f0108a4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0108a50:	5d                   	pop    %ebp
f0108a51:	c3                   	ret    

f0108a52 <enableModifiedBuffer>:

void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f0108a52:	55                   	push   %ebp
f0108a53:	89 e5                	mov    %esp,%ebp
f0108a55:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a58:	a3 fc f5 3a f0       	mov    %eax,0xf03af5fc
f0108a5d:	90                   	nop
f0108a5e:	5d                   	pop    %ebp
f0108a5f:	c3                   	ret    

f0108a60 <isModifiedBufferEnabled>:
uint32 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f0108a60:	55                   	push   %ebp
f0108a61:	89 e5                	mov    %esp,%ebp
f0108a63:	a1 fc f5 3a f0       	mov    0xf03af5fc,%eax
f0108a68:	5d                   	pop    %ebp
f0108a69:	c3                   	ret    

f0108a6a <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f0108a6a:	55                   	push   %ebp
f0108a6b:	89 e5                	mov    %esp,%ebp
f0108a6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a70:	a3 10 f6 3a f0       	mov    %eax,0xf03af610
f0108a75:	90                   	nop
f0108a76:	5d                   	pop    %ebp
f0108a77:	c3                   	ret    

f0108a78 <isBufferingEnabled>:
uint32 isBufferingEnabled(){  return _EnableBuffering ; }
f0108a78:	55                   	push   %ebp
f0108a79:	89 e5                	mov    %esp,%ebp
f0108a7b:	a1 10 f6 3a f0       	mov    0xf03af610,%eax
f0108a80:	5d                   	pop    %ebp
f0108a81:	c3                   	ret    

f0108a82 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f0108a82:	55                   	push   %ebp
f0108a83:	89 e5                	mov    %esp,%ebp
f0108a85:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a88:	a3 1c f6 3a f0       	mov    %eax,0xf03af61c
f0108a8d:	90                   	nop
f0108a8e:	5d                   	pop    %ebp
f0108a8f:	c3                   	ret    

f0108a90 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f0108a90:	55                   	push   %ebp
f0108a91:	89 e5                	mov    %esp,%ebp
f0108a93:	a1 1c f6 3a f0       	mov    0xf03af61c,%eax
f0108a98:	5d                   	pop    %ebp
f0108a99:	c3                   	ret    

f0108a9a <detect_modified_loop>:


void detect_modified_loop()
{
f0108a9a:	55                   	push   %ebp
f0108a9b:	89 e5                	mov    %esp,%ebp
f0108a9d:	83 ec 18             	sub    $0x18,%esp
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
f0108aa0:	a1 40 da 3c f0       	mov    0xf03cda40,%eax
f0108aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);
f0108aa8:	a1 40 da 3c f0       	mov    0xf03cda40,%eax
f0108aad:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0108ab0:	eb 52                	jmp    f0108b04 <detect_modified_loop+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0108ab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ab5:	8b 00                	mov    (%eax),%eax
f0108ab7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0108aba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108abd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108ac0:	75 12                	jne    f0108ad4 <detect_modified_loop+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0108ac2:	83 ec 0c             	sub    $0xc,%esp
f0108ac5:	68 0e f3 11 f0       	push   $0xf011f30e
f0108aca:	e8 67 e9 ff ff       	call   f0107436 <cprintf>
f0108acf:	83 c4 10             	add    $0x10,%esp
			break;
f0108ad2:	eb 3f                	jmp    f0108b13 <detect_modified_loop+0x79>
		}

		if (fastPtr == NULL) {
f0108ad4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108ad8:	74 38                	je     f0108b12 <detect_modified_loop+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0108ada:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108add:	8b 00                	mov    (%eax),%eax
f0108adf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0108ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ae5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108ae8:	75 12                	jne    f0108afc <detect_modified_loop+0x62>
			cprintf("loop detected in modiflist\n");
f0108aea:	83 ec 0c             	sub    $0xc,%esp
f0108aed:	68 0e f3 11 f0       	push   $0xf011f30e
f0108af2:	e8 3f e9 ff ff       	call   f0107436 <cprintf>
f0108af7:	83 c4 10             	add    $0x10,%esp
			break;
f0108afa:	eb 17                	jmp    f0108b13 <detect_modified_loop+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f0108afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108aff:	8b 00                	mov    (%eax),%eax
f0108b01:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);


	while (slowPtr && fastPtr) {
f0108b04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108b08:	74 09                	je     f0108b13 <detect_modified_loop+0x79>
f0108b0a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108b0e:	75 a2                	jne    f0108ab2 <detect_modified_loop+0x18>
f0108b10:	eb 01                	jmp    f0108b13 <detect_modified_loop+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0108b12:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished modi loop detection\n");
f0108b13:	83 ec 0c             	sub    $0xc,%esp
f0108b16:	68 2a f3 11 f0       	push   $0xf011f32a
f0108b1b:	e8 16 e9 ff ff       	call   f0107436 <cprintf>
f0108b20:	83 c4 10             	add    $0x10,%esp
}
f0108b23:	90                   	nop
f0108b24:	c9                   	leave  
f0108b25:	c3                   	ret    

f0108b26 <print_page_working_set_or_LRUlists>:


void print_page_working_set_or_LRUlists(struct Env *e)
{
f0108b26:	55                   	push   %ebp
f0108b27:	89 e5                	mov    %esp,%ebp
f0108b29:	83 ec 18             	sub    $0x18,%esp
	if (isPageReplacmentAlgorithmLRULists())
f0108b2c:	e8 b5 fe ff ff       	call   f01089e6 <isPageReplacmentAlgorithmLRULists>
f0108b31:	85 c0                	test   %eax,%eax
f0108b33:	0f 84 fb 00 00 00    	je     f0108c34 <print_page_working_set_or_LRUlists+0x10e>
	{
		int i = 0;
f0108b39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0108b40:	83 ec 0c             	sub    $0xc,%esp
f0108b43:	68 48 f3 11 f0       	push   $0xf011f348
f0108b48:	e8 e9 e8 ff ff       	call   f0107436 <cprintf>
f0108b4d:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108b50:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b53:	8b 80 10 53 00 00    	mov    0x5310(%eax),%eax
f0108b59:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108b5c:	eb 2c                	jmp    f0108b8a <print_page_working_set_or_LRUlists+0x64>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108b5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b61:	8b 10                	mov    (%eax),%edx
f0108b63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108b66:	8d 48 01             	lea    0x1(%eax),%ecx
f0108b69:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108b6c:	83 ec 04             	sub    $0x4,%esp
f0108b6f:	52                   	push   %edx
f0108b70:	50                   	push   %eax
f0108b71:	68 62 f3 11 f0       	push   $0xf011f362
f0108b76:	e8 bb e8 ff ff       	call   f0107436 <cprintf>
f0108b7b:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRULists())
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108b7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b81:	8b 80 18 53 00 00    	mov    0x5318(%eax),%eax
f0108b87:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108b8a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108b8e:	74 08                	je     f0108b98 <print_page_working_set_or_LRUlists+0x72>
f0108b90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b93:	8b 40 0c             	mov    0xc(%eax),%eax
f0108b96:	eb 05                	jmp    f0108b9d <print_page_working_set_or_LRUlists+0x77>
f0108b98:	b8 00 00 00 00       	mov    $0x0,%eax
f0108b9d:	8b 55 08             	mov    0x8(%ebp),%edx
f0108ba0:	89 82 18 53 00 00    	mov    %eax,0x5318(%edx)
f0108ba6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ba9:	8b 80 18 53 00 00    	mov    0x5318(%eax),%eax
f0108baf:	85 c0                	test   %eax,%eax
f0108bb1:	75 ab                	jne    f0108b5e <print_page_working_set_or_LRUlists+0x38>
f0108bb3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108bb7:	75 a5                	jne    f0108b5e <print_page_working_set_or_LRUlists+0x38>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108bb9:	83 ec 0c             	sub    $0xc,%esp
f0108bbc:	68 6a f3 11 f0       	push   $0xf011f36a
f0108bc1:	e8 70 e8 ff ff       	call   f0107436 <cprintf>
f0108bc6:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108bc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bcc:	8b 80 20 53 00 00    	mov    0x5320(%eax),%eax
f0108bd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108bd5:	eb 2c                	jmp    f0108c03 <print_page_working_set_or_LRUlists+0xdd>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108bda:	8b 10                	mov    (%eax),%edx
f0108bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bdf:	8d 48 01             	lea    0x1(%eax),%ecx
f0108be2:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108be5:	83 ec 04             	sub    $0x4,%esp
f0108be8:	52                   	push   %edx
f0108be9:	50                   	push   %eax
f0108bea:	68 62 f3 11 f0       	push   $0xf011f362
f0108bef:	e8 42 e8 ff ff       	call   f0107436 <cprintf>
f0108bf4:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108bf7:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bfa:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f0108c00:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108c03:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108c07:	74 08                	je     f0108c11 <print_page_working_set_or_LRUlists+0xeb>
f0108c09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c0c:	8b 40 0c             	mov    0xc(%eax),%eax
f0108c0f:	eb 05                	jmp    f0108c16 <print_page_working_set_or_LRUlists+0xf0>
f0108c11:	b8 00 00 00 00       	mov    $0x0,%eax
f0108c16:	8b 55 08             	mov    0x8(%ebp),%edx
f0108c19:	89 82 28 53 00 00    	mov    %eax,0x5328(%edx)
f0108c1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c22:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f0108c28:	85 c0                	test   %eax,%eax
f0108c2a:	75 ab                	jne    f0108bd7 <print_page_working_set_or_LRUlists+0xb1>
f0108c2c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108c30:	75 a5                	jne    f0108bd7 <print_page_working_set_or_LRUlists+0xb1>
	}
	else
	{
		env_page_ws_print(e);
	}
}
f0108c32:	eb 0e                	jmp    f0108c42 <print_page_working_set_or_LRUlists+0x11c>
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
	}
	else
	{
		env_page_ws_print(e);
f0108c34:	83 ec 0c             	sub    $0xc,%esp
f0108c37:	ff 75 08             	pushl  0x8(%ebp)
f0108c3a:	e8 04 b9 ff ff       	call   f0104543 <env_page_ws_print>
f0108c3f:	83 c4 10             	add    $0x10,%esp
	}
}
f0108c42:	90                   	nop
f0108c43:	c9                   	leave  
f0108c44:	c3                   	ret    

f0108c45 <fault_handler>:

void fault_handler(struct Trapframe *tf)
{
f0108c45:	55                   	push   %ebp
f0108c46:	89 e5                	mov    %esp,%ebp
f0108c48:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f0108c4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f0108c52:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c55:	8b 40 34             	mov    0x34(%eax),%eax
f0108c58:	0f b7 c0             	movzwl %ax,%eax
f0108c5b:	83 e0 03             	and    $0x3,%eax
f0108c5e:	83 f8 03             	cmp    $0x3,%eax
f0108c61:	75 07                	jne    f0108c6a <fault_handler+0x25>
		userTrap = 1;
f0108c63:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f0108c6a:	0f 20 d0             	mov    %cr2,%eax
f0108c6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f0108c70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f0108c73:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f0108c76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108c7a:	75 29                	jne    f0108ca5 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f0108c7c:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f0108c83:	77 40                	ja     f0108cc5 <fault_handler+0x80>
f0108c85:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f0108c8c:	76 37                	jbe    f0108cc5 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f0108c8e:	83 ec 04             	sub    $0x4,%esp
f0108c91:	68 88 f3 11 f0       	push   $0xf011f388
f0108c96:	68 9d 01 00 00       	push   $0x19d
f0108c9b:	68 53 f2 11 f0       	push   $0xf011f253
f0108ca0:	e8 ee 74 ff ff       	call   f0100193 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f0108ca5:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f0108cac:	76 17                	jbe    f0108cc5 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f0108cae:	83 ec 04             	sub    $0x4,%esp
f0108cb1:	68 ac f3 11 f0       	push   $0xf011f3ac
f0108cb6:	68 a3 01 00 00       	push   $0x1a3
f0108cbb:	68 53 f2 11 f0       	push   $0xf011f253
f0108cc0:	e8 ce 74 ff ff       	call   f0100193 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f0108cc5:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0108cca:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f0108ccd:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f0108cd2:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108cd5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108cd8:	c1 ea 16             	shr    $0x16,%edx
f0108cdb:	c1 e2 02             	shl    $0x2,%edx
f0108cde:	01 d0                	add    %edx,%eax
f0108ce0:	8b 00                	mov    (%eax),%eax
f0108ce2:	83 e0 01             	and    $0x1,%eax
f0108ce5:	85 c0                	test   %eax,%eax
f0108ce7:	75 28                	jne    f0108d11 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f0108ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108cec:	8b 80 8c 52 00 00    	mov    0x528c(%eax),%eax
f0108cf2:	8d 50 01             	lea    0x1(%eax),%edx
f0108cf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108cf8:	89 90 8c 52 00 00    	mov    %edx,0x528c(%eax)

		table_fault_handler(faulted_env, fault_va);
f0108cfe:	83 ec 08             	sub    $0x8,%esp
f0108d01:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d04:	ff 75 e8             	pushl  -0x18(%ebp)
f0108d07:	e8 56 00 00 00       	call   f0108d62 <table_fault_handler>
f0108d0c:	83 c4 10             	add    $0x10,%esp
f0108d0f:	eb 42                	jmp    f0108d53 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f0108d11:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d14:	8b 80 88 52 00 00    	mov    0x5288(%eax),%eax
f0108d1a:	8d 50 01             	lea    0x1(%eax),%edx
f0108d1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108d20:	89 90 88 52 00 00    	mov    %edx,0x5288(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//print_page_working_set_or_LRUlists(curenv);

		if(isBufferingEnabled())
f0108d26:	e8 4d fd ff ff       	call   f0108a78 <isBufferingEnabled>
f0108d2b:	85 c0                	test   %eax,%eax
f0108d2d:	74 13                	je     f0108d42 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f0108d2f:	83 ec 08             	sub    $0x8,%esp
f0108d32:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d35:	ff 75 e8             	pushl  -0x18(%ebp)
f0108d38:	e8 60 0b 00 00       	call   f010989d <__page_fault_handler_with_buffering>
f0108d3d:	83 c4 10             	add    $0x10,%esp
f0108d40:	eb 11                	jmp    f0108d53 <fault_handler+0x10e>
		}
		else
		{
			page_fault_handler(faulted_env, fault_va);
f0108d42:	83 ec 08             	sub    $0x8,%esp
f0108d45:	ff 75 ec             	pushl  -0x14(%ebp)
f0108d48:	ff 75 e8             	pushl  -0x18(%ebp)
f0108d4b:	e8 d5 02 00 00       	call   f0109025 <page_fault_handler>
f0108d50:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108d53:	0f 20 d8             	mov    %cr3,%eax
f0108d56:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108d59:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d5c:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f0108d5f:	90                   	nop
f0108d60:	c9                   	leave  
f0108d61:	c3                   	ret    

f0108d62 <table_fault_handler>:


//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f0108d62:	55                   	push   %ebp
f0108d63:	89 e5                	mov    %esp,%ebp
f0108d65:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f0108d68:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d6b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108d6e:	83 ec 04             	sub    $0x4,%esp
f0108d71:	8d 55 f4             	lea    -0xc(%ebp),%edx
f0108d74:	52                   	push   %edx
f0108d75:	ff 75 0c             	pushl  0xc(%ebp)
f0108d78:	50                   	push   %eax
f0108d79:	e8 10 b2 ff ff       	call   f0103f8e <__static_cpt>
f0108d7e:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0108d81:	90                   	nop
f0108d82:	c9                   	leave  
f0108d83:	c3                   	ret    

f0108d84 <debug>:

void debug(struct Env * curenv, uint32 address, uint32 victim)
{
f0108d84:	55                   	push   %ebp
f0108d85:	89 e5                	mov    %esp,%ebp
f0108d87:	83 ec 48             	sub    $0x48,%esp
	cprintf("%x\n", address);
f0108d8a:	83 ec 08             	sub    $0x8,%esp
f0108d8d:	ff 75 0c             	pushl  0xc(%ebp)
f0108d90:	68 cd f3 11 f0       	push   $0xf011f3cd
f0108d95:	e8 9c e6 ff ff       	call   f0107436 <cprintf>
f0108d9a:	83 c4 10             	add    $0x10,%esp
	cprintf("%x\n", victim);
f0108d9d:	83 ec 08             	sub    $0x8,%esp
f0108da0:	ff 75 10             	pushl  0x10(%ebp)
f0108da3:	68 cd f3 11 f0       	push   $0xf011f3cd
f0108da8:	e8 89 e6 ff ff       	call   f0107436 <cprintf>
f0108dad:	83 c4 10             	add    $0x10,%esp
	env_page_ws_print(curenv);
f0108db0:	83 ec 0c             	sub    $0xc,%esp
f0108db3:	ff 75 08             	pushl  0x8(%ebp)
f0108db6:	e8 88 b7 ff ff       	call   f0104543 <env_page_ws_print>
f0108dbb:	83 c4 10             	add    $0x10,%esp
	struct Frame_Info* frames[10];
	for(int i = 0;i < 10;i++)
f0108dbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108dc5:	e9 8b 00 00 00       	jmp    f0108e55 <debug+0xd1>
	{
		frames[i] = LIST_LAST(&modified_frame_list);
f0108dca:	8b 15 44 da 3c f0    	mov    0xf03cda44,%edx
f0108dd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108dd3:	89 54 85 c0          	mov    %edx,-0x40(%ebp,%eax,4)
		LIST_REMOVE(&modified_frame_list, LIST_LAST(&modified_frame_list));
f0108dd7:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108ddc:	8b 00                	mov    (%eax),%eax
f0108dde:	85 c0                	test   %eax,%eax
f0108de0:	74 15                	je     f0108df7 <debug+0x73>
f0108de2:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108de7:	8b 00                	mov    (%eax),%eax
f0108de9:	8b 15 44 da 3c f0    	mov    0xf03cda44,%edx
f0108def:	8b 52 04             	mov    0x4(%edx),%edx
f0108df2:	89 50 04             	mov    %edx,0x4(%eax)
f0108df5:	eb 0d                	jmp    f0108e04 <debug+0x80>
f0108df7:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108dfc:	8b 40 04             	mov    0x4(%eax),%eax
f0108dff:	a3 44 da 3c f0       	mov    %eax,0xf03cda44
f0108e04:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108e09:	8b 40 04             	mov    0x4(%eax),%eax
f0108e0c:	85 c0                	test   %eax,%eax
f0108e0e:	74 14                	je     f0108e24 <debug+0xa0>
f0108e10:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108e15:	8b 40 04             	mov    0x4(%eax),%eax
f0108e18:	8b 15 44 da 3c f0    	mov    0xf03cda44,%edx
f0108e1e:	8b 12                	mov    (%edx),%edx
f0108e20:	89 10                	mov    %edx,(%eax)
f0108e22:	eb 0c                	jmp    f0108e30 <debug+0xac>
f0108e24:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108e29:	8b 00                	mov    (%eax),%eax
f0108e2b:	a3 40 da 3c f0       	mov    %eax,0xf03cda40
f0108e30:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108e35:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108e3b:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108e40:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0108e47:	a1 4c da 3c f0       	mov    0xf03cda4c,%eax
f0108e4c:	48                   	dec    %eax
f0108e4d:	a3 4c da 3c f0       	mov    %eax,0xf03cda4c
{
	cprintf("%x\n", address);
	cprintf("%x\n", victim);
	env_page_ws_print(curenv);
	struct Frame_Info* frames[10];
	for(int i = 0;i < 10;i++)
f0108e52:	ff 45 f4             	incl   -0xc(%ebp)
f0108e55:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0108e59:	0f 8e 6b ff ff ff    	jle    f0108dca <debug+0x46>
	{
		frames[i] = LIST_LAST(&modified_frame_list);
		LIST_REMOVE(&modified_frame_list, LIST_LAST(&modified_frame_list));
	}
	for(int i = 9;i >= 0;i--)
f0108e5f:	c7 45 f0 09 00 00 00 	movl   $0x9,-0x10(%ebp)
f0108e66:	eb 72                	jmp    f0108eda <debug+0x156>
	{
		cprintf("%x\n", frames[i]);
f0108e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e6b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108e6f:	83 ec 08             	sub    $0x8,%esp
f0108e72:	50                   	push   %eax
f0108e73:	68 cd f3 11 f0       	push   $0xf011f3cd
f0108e78:	e8 b9 e5 ff ff       	call   f0107436 <cprintf>
f0108e7d:	83 c4 10             	add    $0x10,%esp
		LIST_INSERT_TAIL(&modified_frame_list, frames[i]);
f0108e80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e83:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108e87:	8b 15 44 da 3c f0    	mov    0xf03cda44,%edx
f0108e8d:	89 50 04             	mov    %edx,0x4(%eax)
f0108e90:	8b 40 04             	mov    0x4(%eax),%eax
f0108e93:	85 c0                	test   %eax,%eax
f0108e95:	74 10                	je     f0108ea7 <debug+0x123>
f0108e97:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f0108e9c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108e9f:	8b 54 95 c0          	mov    -0x40(%ebp,%edx,4),%edx
f0108ea3:	89 10                	mov    %edx,(%eax)
f0108ea5:	eb 0c                	jmp    f0108eb3 <debug+0x12f>
f0108ea7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108eaa:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108eae:	a3 40 da 3c f0       	mov    %eax,0xf03cda40
f0108eb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108eb6:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108eba:	a3 44 da 3c f0       	mov    %eax,0xf03cda44
f0108ebf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ec2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108ec6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108ecc:	a1 4c da 3c f0       	mov    0xf03cda4c,%eax
f0108ed1:	40                   	inc    %eax
f0108ed2:	a3 4c da 3c f0       	mov    %eax,0xf03cda4c
	for(int i = 0;i < 10;i++)
	{
		frames[i] = LIST_LAST(&modified_frame_list);
		LIST_REMOVE(&modified_frame_list, LIST_LAST(&modified_frame_list));
	}
	for(int i = 9;i >= 0;i--)
f0108ed7:	ff 4d f0             	decl   -0x10(%ebp)
f0108eda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108ede:	79 88                	jns    f0108e68 <debug+0xe4>
	{
		cprintf("%x\n", frames[i]);
		LIST_INSERT_TAIL(&modified_frame_list, frames[i]);
	}
	cprintf("\n");
f0108ee0:	83 ec 0c             	sub    $0xc,%esp
f0108ee3:	68 d1 f3 11 f0       	push   $0xf011f3d1
f0108ee8:	e8 49 e5 ff ff       	call   f0107436 <cprintf>
f0108eed:	83 c4 10             	add    $0x10,%esp
	for(int i = 0;i < 10;i++)
f0108ef0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0108ef7:	e9 8b 00 00 00       	jmp    f0108f87 <debug+0x203>
	{
		frames[i] = LIST_LAST(&free_frame_list);
f0108efc:	8b 15 58 da 3c f0    	mov    0xf03cda58,%edx
f0108f02:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108f05:	89 54 85 c0          	mov    %edx,-0x40(%ebp,%eax,4)
		LIST_REMOVE(&free_frame_list, LIST_LAST(&free_frame_list));
f0108f09:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f0e:	8b 00                	mov    (%eax),%eax
f0108f10:	85 c0                	test   %eax,%eax
f0108f12:	74 15                	je     f0108f29 <debug+0x1a5>
f0108f14:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f19:	8b 00                	mov    (%eax),%eax
f0108f1b:	8b 15 58 da 3c f0    	mov    0xf03cda58,%edx
f0108f21:	8b 52 04             	mov    0x4(%edx),%edx
f0108f24:	89 50 04             	mov    %edx,0x4(%eax)
f0108f27:	eb 0d                	jmp    f0108f36 <debug+0x1b2>
f0108f29:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f2e:	8b 40 04             	mov    0x4(%eax),%eax
f0108f31:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f0108f36:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f3b:	8b 40 04             	mov    0x4(%eax),%eax
f0108f3e:	85 c0                	test   %eax,%eax
f0108f40:	74 14                	je     f0108f56 <debug+0x1d2>
f0108f42:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f47:	8b 40 04             	mov    0x4(%eax),%eax
f0108f4a:	8b 15 58 da 3c f0    	mov    0xf03cda58,%edx
f0108f50:	8b 12                	mov    (%edx),%edx
f0108f52:	89 10                	mov    %edx,(%eax)
f0108f54:	eb 0c                	jmp    f0108f62 <debug+0x1de>
f0108f56:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f5b:	8b 00                	mov    (%eax),%eax
f0108f5d:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f0108f62:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f67:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108f6d:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108f72:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0108f79:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f0108f7e:	48                   	dec    %eax
f0108f7f:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
	{
		cprintf("%x\n", frames[i]);
		LIST_INSERT_TAIL(&modified_frame_list, frames[i]);
	}
	cprintf("\n");
	for(int i = 0;i < 10;i++)
f0108f84:	ff 45 ec             	incl   -0x14(%ebp)
f0108f87:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
f0108f8b:	0f 8e 6b ff ff ff    	jle    f0108efc <debug+0x178>
	{
		frames[i] = LIST_LAST(&free_frame_list);
		LIST_REMOVE(&free_frame_list, LIST_LAST(&free_frame_list));
	}
	for(int i = 9;i >= 0;i--)
f0108f91:	c7 45 e8 09 00 00 00 	movl   $0x9,-0x18(%ebp)
f0108f98:	eb 72                	jmp    f010900c <debug+0x288>
	{
		cprintf("%x\n", frames[i]);
f0108f9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108f9d:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108fa1:	83 ec 08             	sub    $0x8,%esp
f0108fa4:	50                   	push   %eax
f0108fa5:	68 cd f3 11 f0       	push   $0xf011f3cd
f0108faa:	e8 87 e4 ff ff       	call   f0107436 <cprintf>
f0108faf:	83 c4 10             	add    $0x10,%esp
		LIST_INSERT_TAIL(&free_frame_list, frames[i]);
f0108fb2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108fb5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108fb9:	8b 15 58 da 3c f0    	mov    0xf03cda58,%edx
f0108fbf:	89 50 04             	mov    %edx,0x4(%eax)
f0108fc2:	8b 40 04             	mov    0x4(%eax),%eax
f0108fc5:	85 c0                	test   %eax,%eax
f0108fc7:	74 10                	je     f0108fd9 <debug+0x255>
f0108fc9:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f0108fce:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0108fd1:	8b 54 95 c0          	mov    -0x40(%ebp,%edx,4),%edx
f0108fd5:	89 10                	mov    %edx,(%eax)
f0108fd7:	eb 0c                	jmp    f0108fe5 <debug+0x261>
f0108fd9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108fdc:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108fe0:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f0108fe5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108fe8:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108fec:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f0108ff1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108ff4:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0108ff8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108ffe:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f0109003:	40                   	inc    %eax
f0109004:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
	for(int i = 0;i < 10;i++)
	{
		frames[i] = LIST_LAST(&free_frame_list);
		LIST_REMOVE(&free_frame_list, LIST_LAST(&free_frame_list));
	}
	for(int i = 9;i >= 0;i--)
f0109009:	ff 4d e8             	decl   -0x18(%ebp)
f010900c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0109010:	79 88                	jns    f0108f9a <debug+0x216>
	{
		cprintf("%x\n", frames[i]);
		LIST_INSERT_TAIL(&free_frame_list, frames[i]);
	}
	cprintf("\n");
f0109012:	83 ec 0c             	sub    $0xc,%esp
f0109015:	68 d1 f3 11 f0       	push   $0xf011f3d1
f010901a:	e8 17 e4 ff ff       	call   f0107436 <cprintf>
f010901f:	83 c4 10             	add    $0x10,%esp
}
f0109022:	90                   	nop
f0109023:	c9                   	leave  
f0109024:	c3                   	ret    

f0109025 <page_fault_handler>:

//Handle the page fault
void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f0109025:	55                   	push   %ebp
f0109026:	89 e5                	mov    %esp,%ebp
f0109028:	56                   	push   %esi
f0109029:	53                   	push   %ebx
f010902a:	83 ec 40             	sub    $0x40,%esp
	//TODO: [FINAL_EVAL_2020 - VER_B] - [2] PAGE FAULT HANDLER WITHOUT BUFFERING
	// Write your code here, remove the panic and write your code
	fault_va = ROUNDDOWN(fault_va, PAGE_SIZE);
f010902d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109030:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0109033:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109036:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010903b:	89 45 0c             	mov    %eax,0xc(%ebp)
	int indx = -1;
f010903e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109045:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010904c:	e9 9a 00 00 00       	jmp    f01090eb <page_fault_handler+0xc6>
		if(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].empty == 1) {
f0109051:	8b 45 08             	mov    0x8(%ebp),%eax
f0109054:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f010905a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010905d:	89 d0                	mov    %edx,%eax
f010905f:	c1 e0 02             	shl    $0x2,%eax
f0109062:	01 d0                	add    %edx,%eax
f0109064:	c1 e0 02             	shl    $0x2,%eax
f0109067:	01 c8                	add    %ecx,%eax
f0109069:	83 c0 7c             	add    $0x7c,%eax
f010906c:	8a 00                	mov    (%eax),%al
f010906e:	3c 01                	cmp    $0x1,%al
f0109070:	75 42                	jne    f01090b4 <page_fault_handler+0x8f>
			indx = curenv->page_last_WS_index;
f0109072:	8b 45 08             	mov    0x8(%ebp),%eax
f0109075:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010907b:	89 45 f4             	mov    %eax,-0xc(%ebp)
			curenv->page_last_WS_index++;
f010907e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109081:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109087:	8d 50 01             	lea    0x1(%eax),%edx
f010908a:	8b 45 08             	mov    0x8(%ebp),%eax
f010908d:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109093:	8b 45 08             	mov    0x8(%ebp),%eax
f0109096:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010909c:	8b 55 08             	mov    0x8(%ebp),%edx
f010909f:	8b 4a 74             	mov    0x74(%edx),%ecx
f01090a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01090a7:	f7 f1                	div    %ecx
f01090a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01090ac:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			break;
f01090b2:	eb 48                	jmp    f01090fc <page_fault_handler+0xd7>
		}
		curenv->page_last_WS_index++;
f01090b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01090b7:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01090bd:	8d 50 01             	lea    0x1(%eax),%edx
f01090c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01090c3:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
		curenv->page_last_WS_index %= curenv->page_WS_max_size;
f01090c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01090cc:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01090d2:	8b 55 08             	mov    0x8(%ebp),%edx
f01090d5:	8b 4a 74             	mov    0x74(%edx),%ecx
f01090d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01090dd:	f7 f1                	div    %ecx
f01090df:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e2:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
{
	//TODO: [FINAL_EVAL_2020 - VER_B] - [2] PAGE FAULT HANDLER WITHOUT BUFFERING
	// Write your code here, remove the panic and write your code
	fault_va = ROUNDDOWN(fault_va, PAGE_SIZE);
	int indx = -1;
	for(int i = 0; i < curenv->page_WS_max_size; i++) {
f01090e8:	ff 45 f0             	incl   -0x10(%ebp)
f01090eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01090ee:	8b 50 74             	mov    0x74(%eax),%edx
f01090f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f4:	39 c2                	cmp    %eax,%edx
f01090f6:	0f 87 55 ff ff ff    	ja     f0109051 <page_fault_handler+0x2c>
			break;
		}
		curenv->page_last_WS_index++;
		curenv->page_last_WS_index %= curenv->page_WS_max_size;
	}
	if(indx != -1) {
f01090fc:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0109100:	0f 84 bd 00 00 00    	je     f01091c3 <page_fault_handler+0x19e>
		struct Frame_Info *CurFrame = NULL;
f0109106:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		allocate_frame(&CurFrame);
f010910d:	83 ec 0c             	sub    $0xc,%esp
f0109110:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0109113:	50                   	push   %eax
f0109114:	e8 d3 ab ff ff       	call   f0103cec <allocate_frame>
f0109119:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory, CurFrame, (void *) fault_va, PERM_USER | PERM_WRITEABLE);
f010911c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010911f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109122:	8b 45 08             	mov    0x8(%ebp),%eax
f0109125:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109128:	6a 06                	push   $0x6
f010912a:	51                   	push   %ecx
f010912b:	52                   	push   %edx
f010912c:	50                   	push   %eax
f010912d:	e8 0f af ff ff       	call   f0104041 <map_frame>
f0109132:	83 c4 10             	add    $0x10,%esp
		curenv->ptr_pageWorkingSet[indx].virtual_address = fault_va;
f0109135:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109138:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010913b:	89 d0                	mov    %edx,%eax
f010913d:	c1 e0 02             	shl    $0x2,%eax
f0109140:	01 d0                	add    %edx,%eax
f0109142:	c1 e0 02             	shl    $0x2,%eax
f0109145:	01 c8                	add    %ecx,%eax
f0109147:	8d 50 78             	lea    0x78(%eax),%edx
f010914a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010914d:	89 02                	mov    %eax,(%edx)
		curenv->ptr_pageWorkingSet[indx].empty = 0;
f010914f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109152:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109155:	89 d0                	mov    %edx,%eax
f0109157:	c1 e0 02             	shl    $0x2,%eax
f010915a:	01 d0                	add    %edx,%eax
f010915c:	c1 e0 02             	shl    $0x2,%eax
f010915f:	01 c8                	add    %ecx,%eax
f0109161:	83 c0 7c             	add    $0x7c,%eax
f0109164:	c6 00 00             	movb   $0x0,(%eax)
		if(pf_read_env_page(curenv, (void *)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
f0109167:	8b 45 0c             	mov    0xc(%ebp),%eax
f010916a:	83 ec 08             	sub    $0x8,%esp
f010916d:	50                   	push   %eax
f010916e:	ff 75 08             	pushl  0x8(%ebp)
f0109171:	e8 84 4a 00 00       	call   f010dbfa <pf_read_env_page>
f0109176:	83 c4 10             	add    $0x10,%esp
f0109179:	83 f8 f7             	cmp    $0xfffffff7,%eax
f010917c:	0f 85 13 07 00 00    	jne    f0109895 <page_fault_handler+0x870>
			if(fault_va < UXSTACKTOP && fault_va >= USER_HEAP_MAX) {
f0109182:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0109189:	77 21                	ja     f01091ac <page_fault_handler+0x187>
f010918b:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f0109192:	76 18                	jbe    f01091ac <page_fault_handler+0x187>
				pf_add_empty_env_page(curenv, fault_va, 0);
f0109194:	83 ec 04             	sub    $0x4,%esp
f0109197:	6a 00                	push   $0x0
f0109199:	ff 75 0c             	pushl  0xc(%ebp)
f010919c:	ff 75 08             	pushl  0x8(%ebp)
f010919f:	e8 64 47 00 00       	call   f010d908 <pf_add_empty_env_page>
f01091a4:	83 c4 10             	add    $0x10,%esp
			else
				panic("Bos el wawa\n");
		}
		curenv->ptr_pageWorkingSet[indx].virtual_address = fault_va;
	}
}
f01091a7:	e9 e9 06 00 00       	jmp    f0109895 <page_fault_handler+0x870>
		if(pf_read_env_page(curenv, (void *)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
			if(fault_va < UXSTACKTOP && fault_va >= USER_HEAP_MAX) {
				pf_add_empty_env_page(curenv, fault_va, 0);
			}
			else {
				panic("Bos el wawa\n");
f01091ac:	83 ec 04             	sub    $0x4,%esp
f01091af:	68 d3 f3 11 f0       	push   $0xf011f3d3
f01091b4:	68 1e 02 00 00       	push   $0x21e
f01091b9:	68 53 f2 11 f0       	push   $0xf011f253
f01091be:	e8 d0 6f ff ff       	call   f0100193 <_panic>
			}
		}
	}
	else {
		indx = -1;
f01091c3:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
		for(int i = 0; i < curenv->page_WS_max_size; i++) {
f01091ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01091d1:	e9 22 01 00 00       	jmp    f01092f8 <page_fault_handler+0x2d3>
			uint32 *Ptr_page = NULL;
f01091d6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
			get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f01091dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01091e0:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01091e6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091e9:	89 d0                	mov    %edx,%eax
f01091eb:	c1 e0 02             	shl    $0x2,%eax
f01091ee:	01 d0                	add    %edx,%eax
f01091f0:	c1 e0 02             	shl    $0x2,%eax
f01091f3:	01 c8                	add    %ecx,%eax
f01091f5:	83 c0 78             	add    $0x78,%eax
f01091f8:	8b 00                	mov    (%eax),%eax
f01091fa:	89 c1                	mov    %eax,%ecx
f01091fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01091ff:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109202:	83 ec 04             	sub    $0x4,%esp
f0109205:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f0109208:	52                   	push   %edx
f0109209:	51                   	push   %ecx
f010920a:	50                   	push   %eax
f010920b:	e8 5b ac ff ff       	call   f0103e6b <get_page_table>
f0109210:	83 c4 10             	add    $0x10,%esp
			if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f0109213:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
f0109216:	8b 45 08             	mov    0x8(%ebp),%eax
f0109219:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f010921f:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109222:	89 d0                	mov    %edx,%eax
f0109224:	c1 e0 02             	shl    $0x2,%eax
f0109227:	01 d0                	add    %edx,%eax
f0109229:	c1 e0 02             	shl    $0x2,%eax
f010922c:	01 d8                	add    %ebx,%eax
f010922e:	83 c0 78             	add    $0x78,%eax
f0109231:	8b 00                	mov    (%eax),%eax
f0109233:	c1 e8 0c             	shr    $0xc,%eax
f0109236:	25 ff 03 00 00       	and    $0x3ff,%eax
f010923b:	c1 e0 02             	shl    $0x2,%eax
f010923e:	01 c8                	add    %ecx,%eax
f0109240:	8b 00                	mov    (%eax),%eax
f0109242:	83 e0 20             	and    $0x20,%eax
f0109245:	85 c0                	test   %eax,%eax
f0109247:	75 78                	jne    f01092c1 <page_fault_handler+0x29c>
					(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
f0109249:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
f010924c:	8b 45 08             	mov    0x8(%ebp),%eax
f010924f:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109255:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109258:	89 d0                	mov    %edx,%eax
f010925a:	c1 e0 02             	shl    $0x2,%eax
f010925d:	01 d0                	add    %edx,%eax
f010925f:	c1 e0 02             	shl    $0x2,%eax
f0109262:	01 d8                	add    %ebx,%eax
f0109264:	83 c0 78             	add    $0x78,%eax
f0109267:	8b 00                	mov    (%eax),%eax
f0109269:	c1 e8 0c             	shr    $0xc,%eax
f010926c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109271:	c1 e0 02             	shl    $0x2,%eax
f0109274:	01 c8                	add    %ecx,%eax
f0109276:	8b 00                	mov    (%eax),%eax
f0109278:	83 e0 40             	and    $0x40,%eax
	else {
		indx = -1;
		for(int i = 0; i < curenv->page_WS_max_size; i++) {
			uint32 *Ptr_page = NULL;
			get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
			if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f010927b:	85 c0                	test   %eax,%eax
f010927d:	75 42                	jne    f01092c1 <page_fault_handler+0x29c>
					(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
				indx = curenv->page_last_WS_index;
f010927f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109282:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109288:	89 45 f4             	mov    %eax,-0xc(%ebp)
				curenv->page_last_WS_index++;
f010928b:	8b 45 08             	mov    0x8(%ebp),%eax
f010928e:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109294:	8d 50 01             	lea    0x1(%eax),%edx
f0109297:	8b 45 08             	mov    0x8(%ebp),%eax
f010929a:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f01092a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01092a3:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01092a9:	8b 55 08             	mov    0x8(%ebp),%edx
f01092ac:	8b 4a 74             	mov    0x74(%edx),%ecx
f01092af:	ba 00 00 00 00       	mov    $0x0,%edx
f01092b4:	f7 f1                	div    %ecx
f01092b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01092b9:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f01092bf:	eb 48                	jmp    f0109309 <page_fault_handler+0x2e4>
				break;
			}
			curenv->page_last_WS_index++;
f01092c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01092c4:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01092ca:	8d 50 01             	lea    0x1(%eax),%edx
f01092cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01092d0:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
f01092d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01092d9:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01092df:	8b 55 08             	mov    0x8(%ebp),%edx
f01092e2:	8b 4a 74             	mov    0x74(%edx),%ecx
f01092e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01092ea:	f7 f1                	div    %ecx
f01092ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01092ef:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			}
		}
	}
	else {
		indx = -1;
		for(int i = 0; i < curenv->page_WS_max_size; i++) {
f01092f5:	ff 45 ec             	incl   -0x14(%ebp)
f01092f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01092fb:	8b 50 74             	mov    0x74(%eax),%edx
f01092fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109301:	39 c2                	cmp    %eax,%edx
f0109303:	0f 87 cd fe ff ff    	ja     f01091d6 <page_fault_handler+0x1b1>
				break;
			}
			curenv->page_last_WS_index++;
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
		}
		if(indx == -1) {
f0109309:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010930d:	0f 85 6d 01 00 00    	jne    f0109480 <page_fault_handler+0x45b>
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109313:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010931a:	e9 50 01 00 00       	jmp    f010946f <page_fault_handler+0x44a>
				uint32 *Ptr_page = NULL;
f010931f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f0109326:	8b 45 08             	mov    0x8(%ebp),%eax
f0109329:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f010932f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109332:	89 d0                	mov    %edx,%eax
f0109334:	c1 e0 02             	shl    $0x2,%eax
f0109337:	01 d0                	add    %edx,%eax
f0109339:	c1 e0 02             	shl    $0x2,%eax
f010933c:	01 c8                	add    %ecx,%eax
f010933e:	83 c0 78             	add    $0x78,%eax
f0109341:	8b 00                	mov    (%eax),%eax
f0109343:	89 c1                	mov    %eax,%ecx
f0109345:	8b 45 08             	mov    0x8(%ebp),%eax
f0109348:	8b 40 5c             	mov    0x5c(%eax),%eax
f010934b:	83 ec 04             	sub    $0x4,%esp
f010934e:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0109351:	52                   	push   %edx
f0109352:	51                   	push   %ecx
f0109353:	50                   	push   %eax
f0109354:	e8 12 ab ff ff       	call   f0103e6b <get_page_table>
f0109359:	83 c4 10             	add    $0x10,%esp
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0) {
f010935c:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f010935f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109362:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109368:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010936b:	89 d0                	mov    %edx,%eax
f010936d:	c1 e0 02             	shl    $0x2,%eax
f0109370:	01 d0                	add    %edx,%eax
f0109372:	c1 e0 02             	shl    $0x2,%eax
f0109375:	01 d8                	add    %ebx,%eax
f0109377:	83 c0 78             	add    $0x78,%eax
f010937a:	8b 00                	mov    (%eax),%eax
f010937c:	c1 e8 0c             	shr    $0xc,%eax
f010937f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109384:	c1 e0 02             	shl    $0x2,%eax
f0109387:	01 c8                	add    %ecx,%eax
f0109389:	8b 00                	mov    (%eax),%eax
f010938b:	83 e0 20             	and    $0x20,%eax
f010938e:	85 c0                	test   %eax,%eax
f0109390:	75 45                	jne    f01093d7 <page_fault_handler+0x3b2>
					indx = curenv->page_last_WS_index;
f0109392:	8b 45 08             	mov    0x8(%ebp),%eax
f0109395:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010939b:	89 45 f4             	mov    %eax,-0xc(%ebp)
					curenv->page_last_WS_index++;
f010939e:	8b 45 08             	mov    0x8(%ebp),%eax
f01093a1:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01093a7:	8d 50 01             	lea    0x1(%eax),%edx
f01093aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01093ad:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
					curenv->page_last_WS_index %= curenv->page_WS_max_size;
f01093b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01093b6:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01093bc:	8b 55 08             	mov    0x8(%ebp),%edx
f01093bf:	8b 4a 74             	mov    0x74(%edx),%ecx
f01093c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01093c7:	f7 f1                	div    %ecx
f01093c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01093cc:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f01093d2:	e9 a9 00 00 00       	jmp    f0109480 <page_fault_handler+0x45b>
					break;
				}
				Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] &= (~PERM_USED);
f01093d7:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f01093da:	8b 45 08             	mov    0x8(%ebp),%eax
f01093dd:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01093e3:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01093e6:	89 d0                	mov    %edx,%eax
f01093e8:	c1 e0 02             	shl    $0x2,%eax
f01093eb:	01 d0                	add    %edx,%eax
f01093ed:	c1 e0 02             	shl    $0x2,%eax
f01093f0:	01 d8                	add    %ebx,%eax
f01093f2:	83 c0 78             	add    $0x78,%eax
f01093f5:	8b 00                	mov    (%eax),%eax
f01093f7:	c1 e8 0c             	shr    $0xc,%eax
f01093fa:	25 ff 03 00 00       	and    $0x3ff,%eax
f01093ff:	c1 e0 02             	shl    $0x2,%eax
f0109402:	01 c1                	add    %eax,%ecx
f0109404:	8b 5d c0             	mov    -0x40(%ebp),%ebx
f0109407:	8b 45 08             	mov    0x8(%ebp),%eax
f010940a:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109410:	8b 75 08             	mov    0x8(%ebp),%esi
f0109413:	89 d0                	mov    %edx,%eax
f0109415:	c1 e0 02             	shl    $0x2,%eax
f0109418:	01 d0                	add    %edx,%eax
f010941a:	c1 e0 02             	shl    $0x2,%eax
f010941d:	01 f0                	add    %esi,%eax
f010941f:	83 c0 78             	add    $0x78,%eax
f0109422:	8b 00                	mov    (%eax),%eax
f0109424:	c1 e8 0c             	shr    $0xc,%eax
f0109427:	25 ff 03 00 00       	and    $0x3ff,%eax
f010942c:	c1 e0 02             	shl    $0x2,%eax
f010942f:	01 d8                	add    %ebx,%eax
f0109431:	8b 00                	mov    (%eax),%eax
f0109433:	83 e0 df             	and    $0xffffffdf,%eax
f0109436:	89 01                	mov    %eax,(%ecx)
				curenv->page_last_WS_index++;
f0109438:	8b 45 08             	mov    0x8(%ebp),%eax
f010943b:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109441:	8d 50 01             	lea    0x1(%eax),%edx
f0109444:	8b 45 08             	mov    0x8(%ebp),%eax
f0109447:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f010944d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109450:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109456:	8b 55 08             	mov    0x8(%ebp),%edx
f0109459:	8b 4a 74             	mov    0x74(%edx),%ecx
f010945c:	ba 00 00 00 00       	mov    $0x0,%edx
f0109461:	f7 f1                	div    %ecx
f0109463:	8b 45 08             	mov    0x8(%ebp),%eax
f0109466:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			}
			curenv->page_last_WS_index++;
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f010946c:	ff 45 e8             	incl   -0x18(%ebp)
f010946f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109472:	8b 50 74             	mov    0x74(%eax),%edx
f0109475:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109478:	39 c2                	cmp    %eax,%edx
f010947a:	0f 87 9f fe ff ff    	ja     f010931f <page_fault_handler+0x2fa>
				Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] &= (~PERM_USED);
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
f0109480:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0109484:	0f 85 3f 01 00 00    	jne    f01095c9 <page_fault_handler+0x5a4>
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f010948a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0109491:	e9 22 01 00 00       	jmp    f01095b8 <page_fault_handler+0x593>
				uint32 *Ptr_page = NULL;
f0109496:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f010949d:	8b 45 08             	mov    0x8(%ebp),%eax
f01094a0:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01094a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01094a9:	89 d0                	mov    %edx,%eax
f01094ab:	c1 e0 02             	shl    $0x2,%eax
f01094ae:	01 d0                	add    %edx,%eax
f01094b0:	c1 e0 02             	shl    $0x2,%eax
f01094b3:	01 c8                	add    %ecx,%eax
f01094b5:	83 c0 78             	add    $0x78,%eax
f01094b8:	8b 00                	mov    (%eax),%eax
f01094ba:	89 c1                	mov    %eax,%ecx
f01094bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01094bf:	8b 40 5c             	mov    0x5c(%eax),%eax
f01094c2:	83 ec 04             	sub    $0x4,%esp
f01094c5:	8d 55 bc             	lea    -0x44(%ebp),%edx
f01094c8:	52                   	push   %edx
f01094c9:	51                   	push   %ecx
f01094ca:	50                   	push   %eax
f01094cb:	e8 9b a9 ff ff       	call   f0103e6b <get_page_table>
f01094d0:	83 c4 10             	add    $0x10,%esp
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f01094d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
f01094d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01094d9:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01094df:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01094e2:	89 d0                	mov    %edx,%eax
f01094e4:	c1 e0 02             	shl    $0x2,%eax
f01094e7:	01 d0                	add    %edx,%eax
f01094e9:	c1 e0 02             	shl    $0x2,%eax
f01094ec:	01 d8                	add    %ebx,%eax
f01094ee:	83 c0 78             	add    $0x78,%eax
f01094f1:	8b 00                	mov    (%eax),%eax
f01094f3:	c1 e8 0c             	shr    $0xc,%eax
f01094f6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01094fb:	c1 e0 02             	shl    $0x2,%eax
f01094fe:	01 c8                	add    %ecx,%eax
f0109500:	8b 00                	mov    (%eax),%eax
f0109502:	83 e0 20             	and    $0x20,%eax
f0109505:	85 c0                	test   %eax,%eax
f0109507:	75 78                	jne    f0109581 <page_fault_handler+0x55c>
						(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
f0109509:	8b 4d bc             	mov    -0x44(%ebp),%ecx
f010950c:	8b 45 08             	mov    0x8(%ebp),%eax
f010950f:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109515:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109518:	89 d0                	mov    %edx,%eax
f010951a:	c1 e0 02             	shl    $0x2,%eax
f010951d:	01 d0                	add    %edx,%eax
f010951f:	c1 e0 02             	shl    $0x2,%eax
f0109522:	01 d8                	add    %ebx,%eax
f0109524:	83 c0 78             	add    $0x78,%eax
f0109527:	8b 00                	mov    (%eax),%eax
f0109529:	c1 e8 0c             	shr    $0xc,%eax
f010952c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109531:	c1 e0 02             	shl    $0x2,%eax
f0109534:	01 c8                	add    %ecx,%eax
f0109536:	8b 00                	mov    (%eax),%eax
f0109538:	83 e0 40             	and    $0x40,%eax
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
				uint32 *Ptr_page = NULL;
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f010953b:	85 c0                	test   %eax,%eax
f010953d:	75 42                	jne    f0109581 <page_fault_handler+0x55c>
						(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
					indx = curenv->page_last_WS_index;
f010953f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109542:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109548:	89 45 f4             	mov    %eax,-0xc(%ebp)
					curenv->page_last_WS_index++;
f010954b:	8b 45 08             	mov    0x8(%ebp),%eax
f010954e:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109554:	8d 50 01             	lea    0x1(%eax),%edx
f0109557:	8b 45 08             	mov    0x8(%ebp),%eax
f010955a:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
					curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109560:	8b 45 08             	mov    0x8(%ebp),%eax
f0109563:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109569:	8b 55 08             	mov    0x8(%ebp),%edx
f010956c:	8b 4a 74             	mov    0x74(%edx),%ecx
f010956f:	ba 00 00 00 00       	mov    $0x0,%edx
f0109574:	f7 f1                	div    %ecx
f0109576:	8b 45 08             	mov    0x8(%ebp),%eax
f0109579:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f010957f:	eb 48                	jmp    f01095c9 <page_fault_handler+0x5a4>
					break;
				}
				curenv->page_last_WS_index++;
f0109581:	8b 45 08             	mov    0x8(%ebp),%eax
f0109584:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010958a:	8d 50 01             	lea    0x1(%eax),%edx
f010958d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109590:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109596:	8b 45 08             	mov    0x8(%ebp),%eax
f0109599:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010959f:	8b 55 08             	mov    0x8(%ebp),%edx
f01095a2:	8b 4a 74             	mov    0x74(%edx),%ecx
f01095a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01095aa:	f7 f1                	div    %ecx
f01095ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01095af:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f01095b5:	ff 45 e4             	incl   -0x1c(%ebp)
f01095b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01095bb:	8b 50 74             	mov    0x74(%eax),%edx
f01095be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01095c1:	39 c2                	cmp    %eax,%edx
f01095c3:	0f 87 cd fe ff ff    	ja     f0109496 <page_fault_handler+0x471>
				}
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
f01095c9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f01095cd:	0f 85 09 01 00 00    	jne    f01096dc <page_fault_handler+0x6b7>
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f01095d3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01095da:	e9 ec 00 00 00       	jmp    f01096cb <page_fault_handler+0x6a6>
				uint32 *Ptr_page = NULL;
f01095df:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f01095e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01095e9:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01095ef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095f2:	89 d0                	mov    %edx,%eax
f01095f4:	c1 e0 02             	shl    $0x2,%eax
f01095f7:	01 d0                	add    %edx,%eax
f01095f9:	c1 e0 02             	shl    $0x2,%eax
f01095fc:	01 c8                	add    %ecx,%eax
f01095fe:	83 c0 78             	add    $0x78,%eax
f0109601:	8b 00                	mov    (%eax),%eax
f0109603:	89 c1                	mov    %eax,%ecx
f0109605:	8b 45 08             	mov    0x8(%ebp),%eax
f0109608:	8b 40 5c             	mov    0x5c(%eax),%eax
f010960b:	83 ec 04             	sub    $0x4,%esp
f010960e:	8d 55 b8             	lea    -0x48(%ebp),%edx
f0109611:	52                   	push   %edx
f0109612:	51                   	push   %ecx
f0109613:	50                   	push   %eax
f0109614:	e8 52 a8 ff ff       	call   f0103e6b <get_page_table>
f0109619:	83 c4 10             	add    $0x10,%esp
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0) {
f010961c:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f010961f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109622:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109628:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010962b:	89 d0                	mov    %edx,%eax
f010962d:	c1 e0 02             	shl    $0x2,%eax
f0109630:	01 d0                	add    %edx,%eax
f0109632:	c1 e0 02             	shl    $0x2,%eax
f0109635:	01 d8                	add    %ebx,%eax
f0109637:	83 c0 78             	add    $0x78,%eax
f010963a:	8b 00                	mov    (%eax),%eax
f010963c:	c1 e8 0c             	shr    $0xc,%eax
f010963f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109644:	c1 e0 02             	shl    $0x2,%eax
f0109647:	01 c8                	add    %ecx,%eax
f0109649:	8b 00                	mov    (%eax),%eax
f010964b:	83 e0 20             	and    $0x20,%eax
f010964e:	85 c0                	test   %eax,%eax
f0109650:	75 42                	jne    f0109694 <page_fault_handler+0x66f>
					indx = curenv->page_last_WS_index;
f0109652:	8b 45 08             	mov    0x8(%ebp),%eax
f0109655:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010965b:	89 45 f4             	mov    %eax,-0xc(%ebp)
					curenv->page_last_WS_index++;
f010965e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109661:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109667:	8d 50 01             	lea    0x1(%eax),%edx
f010966a:	8b 45 08             	mov    0x8(%ebp),%eax
f010966d:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
					curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109673:	8b 45 08             	mov    0x8(%ebp),%eax
f0109676:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010967c:	8b 55 08             	mov    0x8(%ebp),%edx
f010967f:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109682:	ba 00 00 00 00       	mov    $0x0,%edx
f0109687:	f7 f1                	div    %ecx
f0109689:	8b 45 08             	mov    0x8(%ebp),%eax
f010968c:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f0109692:	eb 48                	jmp    f01096dc <page_fault_handler+0x6b7>
					break;
				}
				curenv->page_last_WS_index++;
f0109694:	8b 45 08             	mov    0x8(%ebp),%eax
f0109697:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010969d:	8d 50 01             	lea    0x1(%eax),%edx
f01096a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01096a3:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f01096a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01096ac:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01096b2:	8b 55 08             	mov    0x8(%ebp),%edx
f01096b5:	8b 4a 74             	mov    0x74(%edx),%ecx
f01096b8:	ba 00 00 00 00       	mov    $0x0,%edx
f01096bd:	f7 f1                	div    %ecx
f01096bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01096c2:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f01096c8:	ff 45 e0             	incl   -0x20(%ebp)
f01096cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01096ce:	8b 50 74             	mov    0x74(%eax),%edx
f01096d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01096d4:	39 c2                	cmp    %eax,%edx
f01096d6:	0f 87 03 ff ff ff    	ja     f01095df <page_fault_handler+0x5ba>
				}
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		uint32 *page = NULL;
f01096dc:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
		struct Frame_Info *frame = get_frame_info(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[indx].virtual_address, &page);
f01096e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01096e9:	89 d0                	mov    %edx,%eax
f01096eb:	c1 e0 02             	shl    $0x2,%eax
f01096ee:	01 d0                	add    %edx,%eax
f01096f0:	c1 e0 02             	shl    $0x2,%eax
f01096f3:	01 c8                	add    %ecx,%eax
f01096f5:	83 c0 78             	add    $0x78,%eax
f01096f8:	8b 00                	mov    (%eax),%eax
f01096fa:	89 c1                	mov    %eax,%ecx
f01096fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01096ff:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109702:	83 ec 04             	sub    $0x4,%esp
f0109705:	8d 55 c8             	lea    -0x38(%ebp),%edx
f0109708:	52                   	push   %edx
f0109709:	51                   	push   %ecx
f010970a:	50                   	push   %eax
f010970b:	e8 f1 a9 ff ff       	call   f0104101 <get_frame_info>
f0109710:	83 c4 10             	add    $0x10,%esp
f0109713:	89 45 d8             	mov    %eax,-0x28(%ebp)
		map_frame(curenv->env_page_directory, frame, (void*)fault_va, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0109716:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109719:	8b 45 08             	mov    0x8(%ebp),%eax
f010971c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010971f:	6a 07                	push   $0x7
f0109721:	52                   	push   %edx
f0109722:	ff 75 d8             	pushl  -0x28(%ebp)
f0109725:	50                   	push   %eax
f0109726:	e8 16 a9 ff ff       	call   f0104041 <map_frame>
f010972b:	83 c4 10             	add    $0x10,%esp
		if((page[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] & PERM_MODIFIED) == PERM_MODIFIED) {
f010972e:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f0109731:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109734:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109737:	89 d0                	mov    %edx,%eax
f0109739:	c1 e0 02             	shl    $0x2,%eax
f010973c:	01 d0                	add    %edx,%eax
f010973e:	c1 e0 02             	shl    $0x2,%eax
f0109741:	01 d8                	add    %ebx,%eax
f0109743:	83 c0 78             	add    $0x78,%eax
f0109746:	8b 00                	mov    (%eax),%eax
f0109748:	c1 e8 0c             	shr    $0xc,%eax
f010974b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109750:	c1 e0 02             	shl    $0x2,%eax
f0109753:	01 c8                	add    %ecx,%eax
f0109755:	8b 00                	mov    (%eax),%eax
f0109757:	83 e0 40             	and    $0x40,%eax
f010975a:	85 c0                	test   %eax,%eax
f010975c:	74 29                	je     f0109787 <page_fault_handler+0x762>
			pf_update_env_page(curenv, (void*)curenv->ptr_pageWorkingSet[indx].virtual_address, frame);
f010975e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109761:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109764:	89 d0                	mov    %edx,%eax
f0109766:	c1 e0 02             	shl    $0x2,%eax
f0109769:	01 d0                	add    %edx,%eax
f010976b:	c1 e0 02             	shl    $0x2,%eax
f010976e:	01 c8                	add    %ecx,%eax
f0109770:	83 c0 78             	add    $0x78,%eax
f0109773:	8b 00                	mov    (%eax),%eax
f0109775:	83 ec 04             	sub    $0x4,%esp
f0109778:	ff 75 d8             	pushl  -0x28(%ebp)
f010977b:	50                   	push   %eax
f010977c:	ff 75 08             	pushl  0x8(%ebp)
f010977f:	e8 7a 43 00 00       	call   f010dafe <pf_update_env_page>
f0109784:	83 c4 10             	add    $0x10,%esp
		}
		page[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] &= (~PERM_MODIFIED);
f0109787:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f010978a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010978d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109790:	89 d0                	mov    %edx,%eax
f0109792:	c1 e0 02             	shl    $0x2,%eax
f0109795:	01 d0                	add    %edx,%eax
f0109797:	c1 e0 02             	shl    $0x2,%eax
f010979a:	01 d8                	add    %ebx,%eax
f010979c:	83 c0 78             	add    $0x78,%eax
f010979f:	8b 00                	mov    (%eax),%eax
f01097a1:	c1 e8 0c             	shr    $0xc,%eax
f01097a4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01097a9:	c1 e0 02             	shl    $0x2,%eax
f01097ac:	01 c1                	add    %eax,%ecx
f01097ae:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f01097b1:	8b 75 08             	mov    0x8(%ebp),%esi
f01097b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01097b7:	89 d0                	mov    %edx,%eax
f01097b9:	c1 e0 02             	shl    $0x2,%eax
f01097bc:	01 d0                	add    %edx,%eax
f01097be:	c1 e0 02             	shl    $0x2,%eax
f01097c1:	01 f0                	add    %esi,%eax
f01097c3:	83 c0 78             	add    $0x78,%eax
f01097c6:	8b 00                	mov    (%eax),%eax
f01097c8:	c1 e8 0c             	shr    $0xc,%eax
f01097cb:	25 ff 03 00 00       	and    $0x3ff,%eax
f01097d0:	c1 e0 02             	shl    $0x2,%eax
f01097d3:	01 d8                	add    %ebx,%eax
f01097d5:	8b 00                	mov    (%eax),%eax
f01097d7:	83 e0 bf             	and    $0xffffffbf,%eax
f01097da:	89 01                	mov    %eax,(%ecx)
		unmap_frame(curenv->env_page_directory, (void*)curenv->ptr_pageWorkingSet[indx].virtual_address);
f01097dc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01097e2:	89 d0                	mov    %edx,%eax
f01097e4:	c1 e0 02             	shl    $0x2,%eax
f01097e7:	01 d0                	add    %edx,%eax
f01097e9:	c1 e0 02             	shl    $0x2,%eax
f01097ec:	01 c8                	add    %ecx,%eax
f01097ee:	83 c0 78             	add    $0x78,%eax
f01097f1:	8b 00                	mov    (%eax),%eax
f01097f3:	89 c2                	mov    %eax,%edx
f01097f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01097f8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01097fb:	83 ec 08             	sub    $0x8,%esp
f01097fe:	52                   	push   %edx
f01097ff:	50                   	push   %eax
f0109800:	e8 6c a9 ff ff       	call   f0104171 <unmap_frame>
f0109805:	83 c4 10             	add    $0x10,%esp
		if (pf_read_env_page(curenv,(void*)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
f0109808:	8b 45 0c             	mov    0xc(%ebp),%eax
f010980b:	83 ec 08             	sub    $0x8,%esp
f010980e:	50                   	push   %eax
f010980f:	ff 75 08             	pushl  0x8(%ebp)
f0109812:	e8 e3 43 00 00       	call   f010dbfa <pf_read_env_page>
f0109817:	83 c4 10             	add    $0x10,%esp
f010981a:	83 f8 f7             	cmp    $0xfffffff7,%eax
f010981d:	75 5c                	jne    f010987b <page_fault_handler+0x856>
			if (fault_va < USTACKTOP && fault_va >= USTACKBOTTOM)
f010981f:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f0109826:	77 3c                	ja     f0109864 <page_fault_handler+0x83f>
f0109828:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010982f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109832:	2d 01 90 f5 5f       	sub    $0x5ff59001,%eax
f0109837:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010983a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010983d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109842:	f7 75 d4             	divl   -0x2c(%ebp)
f0109845:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109848:	29 d0                	sub    %edx,%eax
f010984a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010984d:	77 15                	ja     f0109864 <page_fault_handler+0x83f>
				pf_add_empty_env_page(curenv, fault_va, 0);
f010984f:	83 ec 04             	sub    $0x4,%esp
f0109852:	6a 00                	push   $0x0
f0109854:	ff 75 0c             	pushl  0xc(%ebp)
f0109857:	ff 75 08             	pushl  0x8(%ebp)
f010985a:	e8 a9 40 00 00       	call   f010d908 <pf_add_empty_env_page>
f010985f:	83 c4 10             	add    $0x10,%esp
f0109862:	eb 17                	jmp    f010987b <page_fault_handler+0x856>
			else
				panic("Bos el wawa\n");
f0109864:	83 ec 04             	sub    $0x4,%esp
f0109867:	68 d3 f3 11 f0       	push   $0xf011f3d3
f010986c:	68 69 02 00 00       	push   $0x269
f0109871:	68 53 f2 11 f0       	push   $0xf011f253
f0109876:	e8 18 69 ff ff       	call   f0100193 <_panic>
		}
		curenv->ptr_pageWorkingSet[indx].virtual_address = fault_va;
f010987b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010987e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109881:	89 d0                	mov    %edx,%eax
f0109883:	c1 e0 02             	shl    $0x2,%eax
f0109886:	01 d0                	add    %edx,%eax
f0109888:	c1 e0 02             	shl    $0x2,%eax
f010988b:	01 c8                	add    %ecx,%eax
f010988d:	8d 50 78             	lea    0x78(%eax),%edx
f0109890:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109893:	89 02                	mov    %eax,(%edx)
	}
}
f0109895:	90                   	nop
f0109896:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109899:	5b                   	pop    %ebx
f010989a:	5e                   	pop    %esi
f010989b:	5d                   	pop    %ebp
f010989c:	c3                   	ret    

f010989d <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010989d:	55                   	push   %ebp
f010989e:	89 e5                	mov    %esp,%ebp
f01098a0:	56                   	push   %esi
f01098a1:	53                   	push   %ebx
f01098a2:	83 ec 60             	sub    $0x60,%esp
	//TODO: [FINAL_EVAL_2020 - VER_B] - [2] PAGE FAULT HANDLER WITH BUFFERING
	// Write your code here, remove the panic and write your code
	fault_va = ROUNDDOWN(fault_va, PAGE_SIZE);
f01098a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01098a8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01098ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01098ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01098b3:	89 45 0c             	mov    %eax,0xc(%ebp)
	int indx = -1;
f01098b6:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for(int i = 0; i < curenv->page_WS_max_size; i++) {
f01098bd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01098c4:	e9 9a 00 00 00       	jmp    f0109963 <__page_fault_handler_with_buffering+0xc6>
		if(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].empty == 1) {
f01098c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01098cc:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f01098d2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01098d5:	89 d0                	mov    %edx,%eax
f01098d7:	c1 e0 02             	shl    $0x2,%eax
f01098da:	01 d0                	add    %edx,%eax
f01098dc:	c1 e0 02             	shl    $0x2,%eax
f01098df:	01 c8                	add    %ecx,%eax
f01098e1:	83 c0 7c             	add    $0x7c,%eax
f01098e4:	8a 00                	mov    (%eax),%al
f01098e6:	3c 01                	cmp    $0x1,%al
f01098e8:	75 42                	jne    f010992c <__page_fault_handler_with_buffering+0x8f>
			indx = curenv->page_last_WS_index;
f01098ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01098ed:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01098f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			curenv->page_last_WS_index++;
f01098f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01098f9:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f01098ff:	8d 50 01             	lea    0x1(%eax),%edx
f0109902:	8b 45 08             	mov    0x8(%ebp),%eax
f0109905:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
f010990b:	8b 45 08             	mov    0x8(%ebp),%eax
f010990e:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109914:	8b 55 08             	mov    0x8(%ebp),%edx
f0109917:	8b 4a 74             	mov    0x74(%edx),%ecx
f010991a:	ba 00 00 00 00       	mov    $0x0,%edx
f010991f:	f7 f1                	div    %ecx
f0109921:	8b 45 08             	mov    0x8(%ebp),%eax
f0109924:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			break;
f010992a:	eb 48                	jmp    f0109974 <__page_fault_handler_with_buffering+0xd7>
		}
		curenv->page_last_WS_index++;
f010992c:	8b 45 08             	mov    0x8(%ebp),%eax
f010992f:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109935:	8d 50 01             	lea    0x1(%eax),%edx
f0109938:	8b 45 08             	mov    0x8(%ebp),%eax
f010993b:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
		curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109941:	8b 45 08             	mov    0x8(%ebp),%eax
f0109944:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f010994a:	8b 55 08             	mov    0x8(%ebp),%edx
f010994d:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109950:	ba 00 00 00 00       	mov    $0x0,%edx
f0109955:	f7 f1                	div    %ecx
f0109957:	8b 45 08             	mov    0x8(%ebp),%eax
f010995a:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
{
	//TODO: [FINAL_EVAL_2020 - VER_B] - [2] PAGE FAULT HANDLER WITH BUFFERING
	// Write your code here, remove the panic and write your code
	fault_va = ROUNDDOWN(fault_va, PAGE_SIZE);
	int indx = -1;
	for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109960:	ff 45 f0             	incl   -0x10(%ebp)
f0109963:	8b 45 08             	mov    0x8(%ebp),%eax
f0109966:	8b 50 74             	mov    0x74(%eax),%edx
f0109969:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010996c:	39 c2                	cmp    %eax,%edx
f010996e:	0f 87 55 ff ff ff    	ja     f01098c9 <__page_fault_handler_with_buffering+0x2c>
			break;
		}
		curenv->page_last_WS_index++;
		curenv->page_last_WS_index %= curenv->page_WS_max_size;
	}
	if(indx != -1) {
f0109974:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0109978:	0f 84 db 00 00 00    	je     f0109a59 <__page_fault_handler_with_buffering+0x1bc>
		curenv->ptr_pageWorkingSet[indx].empty = 0;
f010997e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109981:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109984:	89 d0                	mov    %edx,%eax
f0109986:	c1 e0 02             	shl    $0x2,%eax
f0109989:	01 d0                	add    %edx,%eax
f010998b:	c1 e0 02             	shl    $0x2,%eax
f010998e:	01 c8                	add    %ecx,%eax
f0109990:	83 c0 7c             	add    $0x7c,%eax
f0109993:	c6 00 00             	movb   $0x0,(%eax)
		curenv->ptr_pageWorkingSet[indx].virtual_address = fault_va;
f0109996:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109999:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010999c:	89 d0                	mov    %edx,%eax
f010999e:	c1 e0 02             	shl    $0x2,%eax
f01099a1:	01 d0                	add    %edx,%eax
f01099a3:	c1 e0 02             	shl    $0x2,%eax
f01099a6:	01 c8                	add    %ecx,%eax
f01099a8:	8d 50 78             	lea    0x78(%eax),%edx
f01099ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099ae:	89 02                	mov    %eax,(%edx)
		struct Frame_Info *free_frame_Oo = NULL;
f01099b0:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		allocate_frame(&free_frame_Oo);
f01099b7:	83 ec 0c             	sub    $0xc,%esp
f01099ba:	8d 45 bc             	lea    -0x44(%ebp),%eax
f01099bd:	50                   	push   %eax
f01099be:	e8 29 a3 ff ff       	call   f0103cec <allocate_frame>
f01099c3:	83 c4 10             	add    $0x10,%esp
		map_frame(curenv->env_page_directory, free_frame_Oo, (void*)fault_va, PERM_USER | PERM_WRITEABLE);
f01099c6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01099c9:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01099cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01099cf:	8b 40 5c             	mov    0x5c(%eax),%eax
f01099d2:	6a 06                	push   $0x6
f01099d4:	51                   	push   %ecx
f01099d5:	52                   	push   %edx
f01099d6:	50                   	push   %eax
f01099d7:	e8 65 a6 ff ff       	call   f0104041 <map_frame>
f01099dc:	83 c4 10             	add    $0x10,%esp
		if (pf_read_env_page(curenv, (void*)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
f01099df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01099e2:	83 ec 08             	sub    $0x8,%esp
f01099e5:	50                   	push   %eax
f01099e6:	ff 75 08             	pushl  0x8(%ebp)
f01099e9:	e8 0c 42 00 00       	call   f010dbfa <pf_read_env_page>
f01099ee:	83 c4 10             	add    $0x10,%esp
f01099f1:	83 f8 f7             	cmp    $0xfffffff7,%eax
f01099f4:	0f 85 77 0d 00 00    	jne    f010a771 <__page_fault_handler_with_buffering+0xed4>
			if (fault_va < USTACKTOP && fault_va >= USTACKBOTTOM)
f01099fa:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f0109a01:	77 3f                	ja     f0109a42 <__page_fault_handler_with_buffering+0x1a5>
f0109a03:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0109a0a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109a0d:	2d 01 90 f5 5f       	sub    $0x5ff59001,%eax
f0109a12:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109a15:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109a18:	ba 00 00 00 00       	mov    $0x0,%edx
f0109a1d:	f7 75 d0             	divl   -0x30(%ebp)
f0109a20:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109a23:	29 d0                	sub    %edx,%eax
f0109a25:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0109a28:	77 18                	ja     f0109a42 <__page_fault_handler_with_buffering+0x1a5>
				pf_add_empty_env_page(curenv, fault_va, 0);
f0109a2a:	83 ec 04             	sub    $0x4,%esp
f0109a2d:	6a 00                	push   $0x0
f0109a2f:	ff 75 0c             	pushl  0xc(%ebp)
f0109a32:	ff 75 08             	pushl  0x8(%ebp)
f0109a35:	e8 ce 3e 00 00       	call   f010d908 <pf_add_empty_env_page>
f0109a3a:	83 c4 10             	add    $0x10,%esp
				pf_update_env_page(ptr_frame_info->environment, (void*) ptr_frame_info->va, ptr_frame_info);
			}
		}
	}
	//refer to the documentation for details
}
f0109a3d:	e9 2f 0d 00 00       	jmp    f010a771 <__page_fault_handler_with_buffering+0xed4>
		map_frame(curenv->env_page_directory, free_frame_Oo, (void*)fault_va, PERM_USER | PERM_WRITEABLE);
		if (pf_read_env_page(curenv, (void*)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
			if (fault_va < USTACKTOP && fault_va >= USTACKBOTTOM)
				pf_add_empty_env_page(curenv, fault_va, 0);
			else
				panic("Bos el Wawa\n");
f0109a42:	83 ec 04             	sub    $0x4,%esp
f0109a45:	68 e0 f3 11 f0       	push   $0xf011f3e0
f0109a4a:	68 89 02 00 00       	push   $0x289
f0109a4f:	68 53 f2 11 f0       	push   $0xf011f253
f0109a54:	e8 3a 67 ff ff       	call   f0100193 <_panic>
		}
	}
	else {
		indx = -1;
f0109a59:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
		for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109a60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109a67:	e9 22 01 00 00       	jmp    f0109b8e <__page_fault_handler_with_buffering+0x2f1>
			uint32 *Ptr_page = NULL;
f0109a6c:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
			get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f0109a73:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a76:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109a7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a7f:	89 d0                	mov    %edx,%eax
f0109a81:	c1 e0 02             	shl    $0x2,%eax
f0109a84:	01 d0                	add    %edx,%eax
f0109a86:	c1 e0 02             	shl    $0x2,%eax
f0109a89:	01 c8                	add    %ecx,%eax
f0109a8b:	83 c0 78             	add    $0x78,%eax
f0109a8e:	8b 00                	mov    (%eax),%eax
f0109a90:	89 c1                	mov    %eax,%ecx
f0109a92:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a95:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109a98:	83 ec 04             	sub    $0x4,%esp
f0109a9b:	8d 55 b0             	lea    -0x50(%ebp),%edx
f0109a9e:	52                   	push   %edx
f0109a9f:	51                   	push   %ecx
f0109aa0:	50                   	push   %eax
f0109aa1:	e8 c5 a3 ff ff       	call   f0103e6b <get_page_table>
f0109aa6:	83 c4 10             	add    $0x10,%esp
			if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f0109aa9:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0109aac:	8b 45 08             	mov    0x8(%ebp),%eax
f0109aaf:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109ab5:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109ab8:	89 d0                	mov    %edx,%eax
f0109aba:	c1 e0 02             	shl    $0x2,%eax
f0109abd:	01 d0                	add    %edx,%eax
f0109abf:	c1 e0 02             	shl    $0x2,%eax
f0109ac2:	01 d8                	add    %ebx,%eax
f0109ac4:	83 c0 78             	add    $0x78,%eax
f0109ac7:	8b 00                	mov    (%eax),%eax
f0109ac9:	c1 e8 0c             	shr    $0xc,%eax
f0109acc:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109ad1:	c1 e0 02             	shl    $0x2,%eax
f0109ad4:	01 c8                	add    %ecx,%eax
f0109ad6:	8b 00                	mov    (%eax),%eax
f0109ad8:	83 e0 20             	and    $0x20,%eax
f0109adb:	85 c0                	test   %eax,%eax
f0109add:	75 78                	jne    f0109b57 <__page_fault_handler_with_buffering+0x2ba>
					(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
f0109adf:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0109ae2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ae5:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109aeb:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109aee:	89 d0                	mov    %edx,%eax
f0109af0:	c1 e0 02             	shl    $0x2,%eax
f0109af3:	01 d0                	add    %edx,%eax
f0109af5:	c1 e0 02             	shl    $0x2,%eax
f0109af8:	01 d8                	add    %ebx,%eax
f0109afa:	83 c0 78             	add    $0x78,%eax
f0109afd:	8b 00                	mov    (%eax),%eax
f0109aff:	c1 e8 0c             	shr    $0xc,%eax
f0109b02:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109b07:	c1 e0 02             	shl    $0x2,%eax
f0109b0a:	01 c8                	add    %ecx,%eax
f0109b0c:	8b 00                	mov    (%eax),%eax
f0109b0e:	83 e0 40             	and    $0x40,%eax
	else {
		indx = -1;
		for(int i = 0; i < curenv->page_WS_max_size; i++) {
			uint32 *Ptr_page = NULL;
			get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
			if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f0109b11:	85 c0                	test   %eax,%eax
f0109b13:	75 42                	jne    f0109b57 <__page_fault_handler_with_buffering+0x2ba>
					(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
				indx = curenv->page_last_WS_index;
f0109b15:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b18:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109b1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
				curenv->page_last_WS_index++;
f0109b21:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b24:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109b2a:	8d 50 01             	lea    0x1(%eax),%edx
f0109b2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b30:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109b36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b39:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109b3f:	8b 55 08             	mov    0x8(%ebp),%edx
f0109b42:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0109b4a:	f7 f1                	div    %ecx
f0109b4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b4f:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f0109b55:	eb 48                	jmp    f0109b9f <__page_fault_handler_with_buffering+0x302>
				break;
			}
			curenv->page_last_WS_index++;
f0109b57:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b5a:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109b60:	8d 50 01             	lea    0x1(%eax),%edx
f0109b63:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b66:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109b6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b6f:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109b75:	8b 55 08             	mov    0x8(%ebp),%edx
f0109b78:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109b7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0109b80:	f7 f1                	div    %ecx
f0109b82:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b85:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				panic("Bos el Wawa\n");
		}
	}
	else {
		indx = -1;
		for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109b8b:	ff 45 ec             	incl   -0x14(%ebp)
f0109b8e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b91:	8b 50 74             	mov    0x74(%eax),%edx
f0109b94:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109b97:	39 c2                	cmp    %eax,%edx
f0109b99:	0f 87 cd fe ff ff    	ja     f0109a6c <__page_fault_handler_with_buffering+0x1cf>
				break;
			}
			curenv->page_last_WS_index++;
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
		}
		if(indx == -1) {
f0109b9f:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0109ba3:	0f 85 6d 01 00 00    	jne    f0109d16 <__page_fault_handler_with_buffering+0x479>
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109ba9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0109bb0:	e9 50 01 00 00       	jmp    f0109d05 <__page_fault_handler_with_buffering+0x468>
				uint32 *Ptr_page = NULL;
f0109bb5:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f0109bbc:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bbf:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109bc5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109bc8:	89 d0                	mov    %edx,%eax
f0109bca:	c1 e0 02             	shl    $0x2,%eax
f0109bcd:	01 d0                	add    %edx,%eax
f0109bcf:	c1 e0 02             	shl    $0x2,%eax
f0109bd2:	01 c8                	add    %ecx,%eax
f0109bd4:	83 c0 78             	add    $0x78,%eax
f0109bd7:	8b 00                	mov    (%eax),%eax
f0109bd9:	89 c1                	mov    %eax,%ecx
f0109bdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bde:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109be1:	83 ec 04             	sub    $0x4,%esp
f0109be4:	8d 55 ac             	lea    -0x54(%ebp),%edx
f0109be7:	52                   	push   %edx
f0109be8:	51                   	push   %ecx
f0109be9:	50                   	push   %eax
f0109bea:	e8 7c a2 ff ff       	call   f0103e6b <get_page_table>
f0109bef:	83 c4 10             	add    $0x10,%esp
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0) {
f0109bf2:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0109bf5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109bf8:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109bfe:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109c01:	89 d0                	mov    %edx,%eax
f0109c03:	c1 e0 02             	shl    $0x2,%eax
f0109c06:	01 d0                	add    %edx,%eax
f0109c08:	c1 e0 02             	shl    $0x2,%eax
f0109c0b:	01 d8                	add    %ebx,%eax
f0109c0d:	83 c0 78             	add    $0x78,%eax
f0109c10:	8b 00                	mov    (%eax),%eax
f0109c12:	c1 e8 0c             	shr    $0xc,%eax
f0109c15:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109c1a:	c1 e0 02             	shl    $0x2,%eax
f0109c1d:	01 c8                	add    %ecx,%eax
f0109c1f:	8b 00                	mov    (%eax),%eax
f0109c21:	83 e0 20             	and    $0x20,%eax
f0109c24:	85 c0                	test   %eax,%eax
f0109c26:	75 45                	jne    f0109c6d <__page_fault_handler_with_buffering+0x3d0>
					indx = curenv->page_last_WS_index;
f0109c28:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c2b:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109c31:	89 45 f4             	mov    %eax,-0xc(%ebp)
					curenv->page_last_WS_index++;
f0109c34:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c37:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109c3d:	8d 50 01             	lea    0x1(%eax),%edx
f0109c40:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c43:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
					curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109c49:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c4c:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109c52:	8b 55 08             	mov    0x8(%ebp),%edx
f0109c55:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109c58:	ba 00 00 00 00       	mov    $0x0,%edx
f0109c5d:	f7 f1                	div    %ecx
f0109c5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c62:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f0109c68:	e9 a9 00 00 00       	jmp    f0109d16 <__page_fault_handler_with_buffering+0x479>
					break;
				}
				Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] &= (~PERM_USED);
f0109c6d:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0109c70:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c73:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109c79:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109c7c:	89 d0                	mov    %edx,%eax
f0109c7e:	c1 e0 02             	shl    $0x2,%eax
f0109c81:	01 d0                	add    %edx,%eax
f0109c83:	c1 e0 02             	shl    $0x2,%eax
f0109c86:	01 d8                	add    %ebx,%eax
f0109c88:	83 c0 78             	add    $0x78,%eax
f0109c8b:	8b 00                	mov    (%eax),%eax
f0109c8d:	c1 e8 0c             	shr    $0xc,%eax
f0109c90:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109c95:	c1 e0 02             	shl    $0x2,%eax
f0109c98:	01 c1                	add    %eax,%ecx
f0109c9a:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0109c9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca0:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109ca6:	8b 75 08             	mov    0x8(%ebp),%esi
f0109ca9:	89 d0                	mov    %edx,%eax
f0109cab:	c1 e0 02             	shl    $0x2,%eax
f0109cae:	01 d0                	add    %edx,%eax
f0109cb0:	c1 e0 02             	shl    $0x2,%eax
f0109cb3:	01 f0                	add    %esi,%eax
f0109cb5:	83 c0 78             	add    $0x78,%eax
f0109cb8:	8b 00                	mov    (%eax),%eax
f0109cba:	c1 e8 0c             	shr    $0xc,%eax
f0109cbd:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109cc2:	c1 e0 02             	shl    $0x2,%eax
f0109cc5:	01 d8                	add    %ebx,%eax
f0109cc7:	8b 00                	mov    (%eax),%eax
f0109cc9:	83 e0 df             	and    $0xffffffdf,%eax
f0109ccc:	89 01                	mov    %eax,(%ecx)
				curenv->page_last_WS_index++;
f0109cce:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cd1:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109cd7:	8d 50 01             	lea    0x1(%eax),%edx
f0109cda:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cdd:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109ce3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ce6:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109cec:	8b 55 08             	mov    0x8(%ebp),%edx
f0109cef:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0109cf7:	f7 f1                	div    %ecx
f0109cf9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109cfc:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
			}
			curenv->page_last_WS_index++;
			curenv->page_last_WS_index %= curenv->page_WS_max_size;
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109d02:	ff 45 e8             	incl   -0x18(%ebp)
f0109d05:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d08:	8b 50 74             	mov    0x74(%eax),%edx
f0109d0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109d0e:	39 c2                	cmp    %eax,%edx
f0109d10:	0f 87 9f fe ff ff    	ja     f0109bb5 <__page_fault_handler_with_buffering+0x318>
				Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] &= (~PERM_USED);
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
f0109d16:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0109d1a:	0f 85 3f 01 00 00    	jne    f0109e5f <__page_fault_handler_with_buffering+0x5c2>
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109d20:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0109d27:	e9 22 01 00 00       	jmp    f0109e4e <__page_fault_handler_with_buffering+0x5b1>
				uint32 *Ptr_page = NULL;
f0109d2c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f0109d33:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d36:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109d3c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109d3f:	89 d0                	mov    %edx,%eax
f0109d41:	c1 e0 02             	shl    $0x2,%eax
f0109d44:	01 d0                	add    %edx,%eax
f0109d46:	c1 e0 02             	shl    $0x2,%eax
f0109d49:	01 c8                	add    %ecx,%eax
f0109d4b:	83 c0 78             	add    $0x78,%eax
f0109d4e:	8b 00                	mov    (%eax),%eax
f0109d50:	89 c1                	mov    %eax,%ecx
f0109d52:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d55:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109d58:	83 ec 04             	sub    $0x4,%esp
f0109d5b:	8d 55 a8             	lea    -0x58(%ebp),%edx
f0109d5e:	52                   	push   %edx
f0109d5f:	51                   	push   %ecx
f0109d60:	50                   	push   %eax
f0109d61:	e8 05 a1 ff ff       	call   f0103e6b <get_page_table>
f0109d66:	83 c4 10             	add    $0x10,%esp
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f0109d69:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0109d6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d6f:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109d75:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109d78:	89 d0                	mov    %edx,%eax
f0109d7a:	c1 e0 02             	shl    $0x2,%eax
f0109d7d:	01 d0                	add    %edx,%eax
f0109d7f:	c1 e0 02             	shl    $0x2,%eax
f0109d82:	01 d8                	add    %ebx,%eax
f0109d84:	83 c0 78             	add    $0x78,%eax
f0109d87:	8b 00                	mov    (%eax),%eax
f0109d89:	c1 e8 0c             	shr    $0xc,%eax
f0109d8c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109d91:	c1 e0 02             	shl    $0x2,%eax
f0109d94:	01 c8                	add    %ecx,%eax
f0109d96:	8b 00                	mov    (%eax),%eax
f0109d98:	83 e0 20             	and    $0x20,%eax
f0109d9b:	85 c0                	test   %eax,%eax
f0109d9d:	75 78                	jne    f0109e17 <__page_fault_handler_with_buffering+0x57a>
						(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
f0109d9f:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0109da2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109da5:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109dab:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109dae:	89 d0                	mov    %edx,%eax
f0109db0:	c1 e0 02             	shl    $0x2,%eax
f0109db3:	01 d0                	add    %edx,%eax
f0109db5:	c1 e0 02             	shl    $0x2,%eax
f0109db8:	01 d8                	add    %ebx,%eax
f0109dba:	83 c0 78             	add    $0x78,%eax
f0109dbd:	8b 00                	mov    (%eax),%eax
f0109dbf:	c1 e8 0c             	shr    $0xc,%eax
f0109dc2:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109dc7:	c1 e0 02             	shl    $0x2,%eax
f0109dca:	01 c8                	add    %ecx,%eax
f0109dcc:	8b 00                	mov    (%eax),%eax
f0109dce:	83 e0 40             	and    $0x40,%eax
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
				uint32 *Ptr_page = NULL;
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0 &&
f0109dd1:	85 c0                	test   %eax,%eax
f0109dd3:	75 42                	jne    f0109e17 <__page_fault_handler_with_buffering+0x57a>
						(Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_MODIFIED) == 0) {
					indx = curenv->page_last_WS_index;
f0109dd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dd8:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109dde:	89 45 f4             	mov    %eax,-0xc(%ebp)
					curenv->page_last_WS_index++;
f0109de1:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de4:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109dea:	8d 50 01             	lea    0x1(%eax),%edx
f0109ded:	8b 45 08             	mov    0x8(%ebp),%eax
f0109df0:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
					curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109df6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109df9:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109dff:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e02:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109e05:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e0a:	f7 f1                	div    %ecx
f0109e0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0f:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f0109e15:	eb 48                	jmp    f0109e5f <__page_fault_handler_with_buffering+0x5c2>
					break;
				}
				curenv->page_last_WS_index++;
f0109e17:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e1a:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109e20:	8d 50 01             	lea    0x1(%eax),%edx
f0109e23:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e26:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109e2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2f:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109e35:	8b 55 08             	mov    0x8(%ebp),%edx
f0109e38:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109e3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0109e40:	f7 f1                	div    %ecx
f0109e42:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e45:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109e4b:	ff 45 e4             	incl   -0x1c(%ebp)
f0109e4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e51:	8b 50 74             	mov    0x74(%eax),%edx
f0109e54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e57:	39 c2                	cmp    %eax,%edx
f0109e59:	0f 87 cd fe ff ff    	ja     f0109d2c <__page_fault_handler_with_buffering+0x48f>
				}
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
f0109e5f:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0109e63:	0f 85 09 01 00 00    	jne    f0109f72 <__page_fault_handler_with_buffering+0x6d5>
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109e69:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0109e70:	e9 ec 00 00 00       	jmp    f0109f61 <__page_fault_handler_with_buffering+0x6c4>
				uint32 *Ptr_page = NULL;
f0109e75:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
				get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address, &Ptr_page);
f0109e7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e7f:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109e85:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e88:	89 d0                	mov    %edx,%eax
f0109e8a:	c1 e0 02             	shl    $0x2,%eax
f0109e8d:	01 d0                	add    %edx,%eax
f0109e8f:	c1 e0 02             	shl    $0x2,%eax
f0109e92:	01 c8                	add    %ecx,%eax
f0109e94:	83 c0 78             	add    $0x78,%eax
f0109e97:	8b 00                	mov    (%eax),%eax
f0109e99:	89 c1                	mov    %eax,%ecx
f0109e9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e9e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109ea1:	83 ec 04             	sub    $0x4,%esp
f0109ea4:	8d 55 a4             	lea    -0x5c(%ebp),%edx
f0109ea7:	52                   	push   %edx
f0109ea8:	51                   	push   %ecx
f0109ea9:	50                   	push   %eax
f0109eaa:	e8 bc 9f ff ff       	call   f0103e6b <get_page_table>
f0109eaf:	83 c4 10             	add    $0x10,%esp
				if((Ptr_page[PTX(curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address)] & PERM_USED) == 0) {
f0109eb2:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0109eb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eb8:	8b 90 80 52 00 00    	mov    0x5280(%eax),%edx
f0109ebe:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109ec1:	89 d0                	mov    %edx,%eax
f0109ec3:	c1 e0 02             	shl    $0x2,%eax
f0109ec6:	01 d0                	add    %edx,%eax
f0109ec8:	c1 e0 02             	shl    $0x2,%eax
f0109ecb:	01 d8                	add    %ebx,%eax
f0109ecd:	83 c0 78             	add    $0x78,%eax
f0109ed0:	8b 00                	mov    (%eax),%eax
f0109ed2:	c1 e8 0c             	shr    $0xc,%eax
f0109ed5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0109eda:	c1 e0 02             	shl    $0x2,%eax
f0109edd:	01 c8                	add    %ecx,%eax
f0109edf:	8b 00                	mov    (%eax),%eax
f0109ee1:	83 e0 20             	and    $0x20,%eax
f0109ee4:	85 c0                	test   %eax,%eax
f0109ee6:	75 42                	jne    f0109f2a <__page_fault_handler_with_buffering+0x68d>
					indx = curenv->page_last_WS_index;
f0109ee8:	8b 45 08             	mov    0x8(%ebp),%eax
f0109eeb:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109ef1:	89 45 f4             	mov    %eax,-0xc(%ebp)
					curenv->page_last_WS_index++;
f0109ef4:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ef7:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109efd:	8d 50 01             	lea    0x1(%eax),%edx
f0109f00:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f03:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
					curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109f09:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f0c:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109f12:	8b 55 08             	mov    0x8(%ebp),%edx
f0109f15:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109f18:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f1d:	f7 f1                	div    %ecx
f0109f1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f22:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
f0109f28:	eb 48                	jmp    f0109f72 <__page_fault_handler_with_buffering+0x6d5>
					break;
				}
				curenv->page_last_WS_index++;
f0109f2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f2d:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109f33:	8d 50 01             	lea    0x1(%eax),%edx
f0109f36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f39:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
f0109f3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f42:	8b 80 80 52 00 00    	mov    0x5280(%eax),%eax
f0109f48:	8b 55 08             	mov    0x8(%ebp),%edx
f0109f4b:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f53:	f7 f1                	div    %ecx
f0109f55:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f58:	89 90 80 52 00 00    	mov    %edx,0x5280(%eax)
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		if(indx == -1) {
			for(int i = 0; i < curenv->page_WS_max_size; i++) {
f0109f5e:	ff 45 e0             	incl   -0x20(%ebp)
f0109f61:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f64:	8b 50 74             	mov    0x74(%eax),%edx
f0109f67:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109f6a:	39 c2                	cmp    %eax,%edx
f0109f6c:	0f 87 03 ff ff ff    	ja     f0109e75 <__page_fault_handler_with_buffering+0x5d8>
				}
				curenv->page_last_WS_index++;
				curenv->page_last_WS_index %= curenv->page_WS_max_size;
			}
		}
		uint32 *ptr_table = NULL;
f0109f72:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
		get_page_table(curenv->env_page_directory, (void *)curenv->ptr_pageWorkingSet[indx].virtual_address, &ptr_table);
f0109f79:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f7f:	89 d0                	mov    %edx,%eax
f0109f81:	c1 e0 02             	shl    $0x2,%eax
f0109f84:	01 d0                	add    %edx,%eax
f0109f86:	c1 e0 02             	shl    $0x2,%eax
f0109f89:	01 c8                	add    %ecx,%eax
f0109f8b:	83 c0 78             	add    $0x78,%eax
f0109f8e:	8b 00                	mov    (%eax),%eax
f0109f90:	89 c1                	mov    %eax,%ecx
f0109f92:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f95:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109f98:	83 ec 04             	sub    $0x4,%esp
f0109f9b:	8d 55 b8             	lea    -0x48(%ebp),%edx
f0109f9e:	52                   	push   %edx
f0109f9f:	51                   	push   %ecx
f0109fa0:	50                   	push   %eax
f0109fa1:	e8 c5 9e ff ff       	call   f0103e6b <get_page_table>
f0109fa6:	83 c4 10             	add    $0x10,%esp
		struct Frame_Info* ptr_frame_info = NULL;
f0109fa9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		ptr_frame_info = get_frame_info(curenv->env_page_directory, (void*)curenv->ptr_pageWorkingSet[indx].virtual_address, &ptr_table);
f0109fb0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fb6:	89 d0                	mov    %edx,%eax
f0109fb8:	c1 e0 02             	shl    $0x2,%eax
f0109fbb:	01 d0                	add    %edx,%eax
f0109fbd:	c1 e0 02             	shl    $0x2,%eax
f0109fc0:	01 c8                	add    %ecx,%eax
f0109fc2:	83 c0 78             	add    $0x78,%eax
f0109fc5:	8b 00                	mov    (%eax),%eax
f0109fc7:	89 c1                	mov    %eax,%ecx
f0109fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fcc:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109fcf:	83 ec 04             	sub    $0x4,%esp
f0109fd2:	8d 55 b8             	lea    -0x48(%ebp),%edx
f0109fd5:	52                   	push   %edx
f0109fd6:	51                   	push   %ecx
f0109fd7:	50                   	push   %eax
f0109fd8:	e8 24 a1 ff ff       	call   f0104101 <get_frame_info>
f0109fdd:	83 c4 10             	add    $0x10,%esp
f0109fe0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		ptr_frame_info->isBuffered = 1;
f0109fe3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0109fe6:	c6 40 14 01          	movb   $0x1,0x14(%eax)
		ptr_frame_info->va = curenv->ptr_pageWorkingSet[indx].virtual_address;
f0109fea:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109fed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ff0:	89 d0                	mov    %edx,%eax
f0109ff2:	c1 e0 02             	shl    $0x2,%eax
f0109ff5:	01 d0                	add    %edx,%eax
f0109ff7:	c1 e0 02             	shl    $0x2,%eax
f0109ffa:	01 c8                	add    %ecx,%eax
f0109ffc:	83 c0 78             	add    $0x78,%eax
f0109fff:	8b 10                	mov    (%eax),%edx
f010a001:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a004:	89 50 0c             	mov    %edx,0xc(%eax)
		ptr_frame_info->environment = curenv;
f010a007:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a00a:	8b 55 08             	mov    0x8(%ebp),%edx
f010a00d:	89 50 10             	mov    %edx,0x10(%eax)
		ptr_table[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] |= (PERM_BUFFERED);
f010a010:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f010a013:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a016:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a019:	89 d0                	mov    %edx,%eax
f010a01b:	c1 e0 02             	shl    $0x2,%eax
f010a01e:	01 d0                	add    %edx,%eax
f010a020:	c1 e0 02             	shl    $0x2,%eax
f010a023:	01 d8                	add    %ebx,%eax
f010a025:	83 c0 78             	add    $0x78,%eax
f010a028:	8b 00                	mov    (%eax),%eax
f010a02a:	c1 e8 0c             	shr    $0xc,%eax
f010a02d:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a032:	c1 e0 02             	shl    $0x2,%eax
f010a035:	01 c1                	add    %eax,%ecx
f010a037:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f010a03a:	8b 75 08             	mov    0x8(%ebp),%esi
f010a03d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a040:	89 d0                	mov    %edx,%eax
f010a042:	c1 e0 02             	shl    $0x2,%eax
f010a045:	01 d0                	add    %edx,%eax
f010a047:	c1 e0 02             	shl    $0x2,%eax
f010a04a:	01 f0                	add    %esi,%eax
f010a04c:	83 c0 78             	add    $0x78,%eax
f010a04f:	8b 00                	mov    (%eax),%eax
f010a051:	c1 e8 0c             	shr    $0xc,%eax
f010a054:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a059:	c1 e0 02             	shl    $0x2,%eax
f010a05c:	01 d8                	add    %ebx,%eax
f010a05e:	8b 00                	mov    (%eax),%eax
f010a060:	80 cc 02             	or     $0x2,%ah
f010a063:	89 01                	mov    %eax,(%ecx)
		ptr_table[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] &= (~PERM_PRESENT);
f010a065:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f010a068:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a06b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a06e:	89 d0                	mov    %edx,%eax
f010a070:	c1 e0 02             	shl    $0x2,%eax
f010a073:	01 d0                	add    %edx,%eax
f010a075:	c1 e0 02             	shl    $0x2,%eax
f010a078:	01 d8                	add    %ebx,%eax
f010a07a:	83 c0 78             	add    $0x78,%eax
f010a07d:	8b 00                	mov    (%eax),%eax
f010a07f:	c1 e8 0c             	shr    $0xc,%eax
f010a082:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a087:	c1 e0 02             	shl    $0x2,%eax
f010a08a:	01 c1                	add    %eax,%ecx
f010a08c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f010a08f:	8b 75 08             	mov    0x8(%ebp),%esi
f010a092:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a095:	89 d0                	mov    %edx,%eax
f010a097:	c1 e0 02             	shl    $0x2,%eax
f010a09a:	01 d0                	add    %edx,%eax
f010a09c:	c1 e0 02             	shl    $0x2,%eax
f010a09f:	01 f0                	add    %esi,%eax
f010a0a1:	83 c0 78             	add    $0x78,%eax
f010a0a4:	8b 00                	mov    (%eax),%eax
f010a0a6:	c1 e8 0c             	shr    $0xc,%eax
f010a0a9:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a0ae:	c1 e0 02             	shl    $0x2,%eax
f010a0b1:	01 d8                	add    %ebx,%eax
f010a0b3:	8b 00                	mov    (%eax),%eax
f010a0b5:	83 e0 fe             	and    $0xfffffffe,%eax
f010a0b8:	89 01                	mov    %eax,(%ecx)
		if((ptr_table[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] & PERM_MODIFIED) == PERM_MODIFIED) {
f010a0ba:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f010a0bd:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a0c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0c3:	89 d0                	mov    %edx,%eax
f010a0c5:	c1 e0 02             	shl    $0x2,%eax
f010a0c8:	01 d0                	add    %edx,%eax
f010a0ca:	c1 e0 02             	shl    $0x2,%eax
f010a0cd:	01 d8                	add    %ebx,%eax
f010a0cf:	83 c0 78             	add    $0x78,%eax
f010a0d2:	8b 00                	mov    (%eax),%eax
f010a0d4:	c1 e8 0c             	shr    $0xc,%eax
f010a0d7:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a0dc:	c1 e0 02             	shl    $0x2,%eax
f010a0df:	01 c8                	add    %ecx,%eax
f010a0e1:	8b 00                	mov    (%eax),%eax
f010a0e3:	83 e0 40             	and    $0x40,%eax
f010a0e6:	85 c0                	test   %eax,%eax
f010a0e8:	74 48                	je     f010a132 <__page_fault_handler_with_buffering+0x895>
			LIST_INSERT_TAIL(&modified_frame_list, ptr_frame_info);
f010a0ea:	8b 15 44 da 3c f0    	mov    0xf03cda44,%edx
f010a0f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a0f3:	89 50 04             	mov    %edx,0x4(%eax)
f010a0f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a0f9:	8b 40 04             	mov    0x4(%eax),%eax
f010a0fc:	85 c0                	test   %eax,%eax
f010a0fe:	74 0c                	je     f010a10c <__page_fault_handler_with_buffering+0x86f>
f010a100:	a1 44 da 3c f0       	mov    0xf03cda44,%eax
f010a105:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010a108:	89 10                	mov    %edx,(%eax)
f010a10a:	eb 08                	jmp    f010a114 <__page_fault_handler_with_buffering+0x877>
f010a10c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a10f:	a3 40 da 3c f0       	mov    %eax,0xf03cda40
f010a114:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a117:	a3 44 da 3c f0       	mov    %eax,0xf03cda44
f010a11c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a11f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a125:	a1 4c da 3c f0       	mov    0xf03cda4c,%eax
f010a12a:	40                   	inc    %eax
f010a12b:	a3 4c da 3c f0       	mov    %eax,0xf03cda4c
f010a130:	eb 46                	jmp    f010a178 <__page_fault_handler_with_buffering+0x8db>
		}
		else {
			LIST_INSERT_TAIL(&free_frame_list, ptr_frame_info);
f010a132:	8b 15 58 da 3c f0    	mov    0xf03cda58,%edx
f010a138:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a13b:	89 50 04             	mov    %edx,0x4(%eax)
f010a13e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a141:	8b 40 04             	mov    0x4(%eax),%eax
f010a144:	85 c0                	test   %eax,%eax
f010a146:	74 0c                	je     f010a154 <__page_fault_handler_with_buffering+0x8b7>
f010a148:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f010a14d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010a150:	89 10                	mov    %edx,(%eax)
f010a152:	eb 08                	jmp    f010a15c <__page_fault_handler_with_buffering+0x8bf>
f010a154:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a157:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f010a15c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a15f:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f010a164:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a167:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a16d:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f010a172:	40                   	inc    %eax
f010a173:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
		}
		if(LIST_SIZE(&modified_frame_list) == getModifiedBufferLength()) {
f010a178:	8b 1d 4c da 3c f0    	mov    0xf03cda4c,%ebx
f010a17e:	e8 0d e9 ff ff       	call   f0108a90 <getModifiedBufferLength>
f010a183:	39 c3                	cmp    %eax,%ebx
f010a185:	0f 85 6f 01 00 00    	jne    f010a2fa <__page_fault_handler_with_buffering+0xa5d>
			ptr_frame_info = NULL;
f010a18b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			LIST_FOREACH(ptr_frame_info, &modified_frame_list) {
f010a192:	a1 40 da 3c f0       	mov    0xf03cda40,%eax
f010a197:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010a19a:	e9 2d 01 00 00       	jmp    f010a2cc <__page_fault_handler_with_buffering+0xa2f>
				uint32 *ptr_page_table = NULL;
f010a19f:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
				get_page_table(ptr_frame_info->environment->env_page_directory, (void*) ptr_frame_info->va, &ptr_page_table);
f010a1a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a1a9:	8b 40 0c             	mov    0xc(%eax),%eax
f010a1ac:	89 c1                	mov    %eax,%ecx
f010a1ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a1b1:	8b 40 10             	mov    0x10(%eax),%eax
f010a1b4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a1b7:	83 ec 04             	sub    $0x4,%esp
f010a1ba:	8d 55 a0             	lea    -0x60(%ebp),%edx
f010a1bd:	52                   	push   %edx
f010a1be:	51                   	push   %ecx
f010a1bf:	50                   	push   %eax
f010a1c0:	e8 a6 9c ff ff       	call   f0103e6b <get_page_table>
f010a1c5:	83 c4 10             	add    $0x10,%esp
				ptr_page_table[PTX(ptr_frame_info->va)] &= (~PERM_MODIFIED);
f010a1c8:	8b 55 a0             	mov    -0x60(%ebp),%edx
f010a1cb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a1ce:	8b 40 0c             	mov    0xc(%eax),%eax
f010a1d1:	c1 e8 0c             	shr    $0xc,%eax
f010a1d4:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a1d9:	c1 e0 02             	shl    $0x2,%eax
f010a1dc:	01 c2                	add    %eax,%edx
f010a1de:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f010a1e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a1e4:	8b 40 0c             	mov    0xc(%eax),%eax
f010a1e7:	c1 e8 0c             	shr    $0xc,%eax
f010a1ea:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a1ef:	c1 e0 02             	shl    $0x2,%eax
f010a1f2:	01 c8                	add    %ecx,%eax
f010a1f4:	8b 00                	mov    (%eax),%eax
f010a1f6:	83 e0 bf             	and    $0xffffffbf,%eax
f010a1f9:	89 02                	mov    %eax,(%edx)
				LIST_REMOVE(&modified_frame_list, ptr_frame_info);
f010a1fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a1fe:	8b 00                	mov    (%eax),%eax
f010a200:	85 c0                	test   %eax,%eax
f010a202:	74 10                	je     f010a214 <__page_fault_handler_with_buffering+0x977>
f010a204:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a207:	8b 00                	mov    (%eax),%eax
f010a209:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010a20c:	8b 52 04             	mov    0x4(%edx),%edx
f010a20f:	89 50 04             	mov    %edx,0x4(%eax)
f010a212:	eb 0b                	jmp    f010a21f <__page_fault_handler_with_buffering+0x982>
f010a214:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a217:	8b 40 04             	mov    0x4(%eax),%eax
f010a21a:	a3 44 da 3c f0       	mov    %eax,0xf03cda44
f010a21f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a222:	8b 40 04             	mov    0x4(%eax),%eax
f010a225:	85 c0                	test   %eax,%eax
f010a227:	74 0f                	je     f010a238 <__page_fault_handler_with_buffering+0x99b>
f010a229:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a22c:	8b 40 04             	mov    0x4(%eax),%eax
f010a22f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010a232:	8b 12                	mov    (%edx),%edx
f010a234:	89 10                	mov    %edx,(%eax)
f010a236:	eb 0a                	jmp    f010a242 <__page_fault_handler_with_buffering+0x9a5>
f010a238:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a23b:	8b 00                	mov    (%eax),%eax
f010a23d:	a3 40 da 3c f0       	mov    %eax,0xf03cda40
f010a242:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a245:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a24b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a24e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a255:	a1 4c da 3c f0       	mov    0xf03cda4c,%eax
f010a25a:	48                   	dec    %eax
f010a25b:	a3 4c da 3c f0       	mov    %eax,0xf03cda4c
				LIST_INSERT_TAIL(&free_frame_list, ptr_frame_info);
f010a260:	8b 15 58 da 3c f0    	mov    0xf03cda58,%edx
f010a266:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a269:	89 50 04             	mov    %edx,0x4(%eax)
f010a26c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a26f:	8b 40 04             	mov    0x4(%eax),%eax
f010a272:	85 c0                	test   %eax,%eax
f010a274:	74 0c                	je     f010a282 <__page_fault_handler_with_buffering+0x9e5>
f010a276:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f010a27b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010a27e:	89 10                	mov    %edx,(%eax)
f010a280:	eb 08                	jmp    f010a28a <__page_fault_handler_with_buffering+0x9ed>
f010a282:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a285:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f010a28a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a28d:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f010a292:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a295:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a29b:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f010a2a0:	40                   	inc    %eax
f010a2a1:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
				pf_update_env_page(ptr_frame_info->environment, (void*) ptr_frame_info->va, ptr_frame_info);
f010a2a6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a2a9:	8b 40 0c             	mov    0xc(%eax),%eax
f010a2ac:	89 c2                	mov    %eax,%edx
f010a2ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a2b1:	8b 40 10             	mov    0x10(%eax),%eax
f010a2b4:	83 ec 04             	sub    $0x4,%esp
f010a2b7:	ff 75 dc             	pushl  -0x24(%ebp)
f010a2ba:	52                   	push   %edx
f010a2bb:	50                   	push   %eax
f010a2bc:	e8 3d 38 00 00       	call   f010dafe <pf_update_env_page>
f010a2c1:	83 c4 10             	add    $0x10,%esp
		else {
			LIST_INSERT_TAIL(&free_frame_list, ptr_frame_info);
		}
		if(LIST_SIZE(&modified_frame_list) == getModifiedBufferLength()) {
			ptr_frame_info = NULL;
			LIST_FOREACH(ptr_frame_info, &modified_frame_list) {
f010a2c4:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f010a2c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010a2cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010a2d0:	74 07                	je     f010a2d9 <__page_fault_handler_with_buffering+0xa3c>
f010a2d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a2d5:	8b 00                	mov    (%eax),%eax
f010a2d7:	eb 05                	jmp    f010a2de <__page_fault_handler_with_buffering+0xa41>
f010a2d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010a2de:	a3 48 da 3c f0       	mov    %eax,0xf03cda48
f010a2e3:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f010a2e8:	85 c0                	test   %eax,%eax
f010a2ea:	0f 85 af fe ff ff    	jne    f010a19f <__page_fault_handler_with_buffering+0x902>
f010a2f0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010a2f4:	0f 85 a5 fe ff ff    	jne    f010a19f <__page_fault_handler_with_buffering+0x902>
				LIST_REMOVE(&modified_frame_list, ptr_frame_info);
				LIST_INSERT_TAIL(&free_frame_list, ptr_frame_info);
				pf_update_env_page(ptr_frame_info->environment, (void*) ptr_frame_info->va, ptr_frame_info);
			}
		}
		curenv->ptr_pageWorkingSet[indx].virtual_address = fault_va;
f010a2fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a2fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a300:	89 d0                	mov    %edx,%eax
f010a302:	c1 e0 02             	shl    $0x2,%eax
f010a305:	01 d0                	add    %edx,%eax
f010a307:	c1 e0 02             	shl    $0x2,%eax
f010a30a:	01 c8                	add    %ecx,%eax
f010a30c:	8d 50 78             	lea    0x78(%eax),%edx
f010a30f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a312:	89 02                	mov    %eax,(%edx)
		uint32 *ptr_page_table = NULL;
f010a314:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
		get_page_table(curenv->env_page_directory, (void*) curenv->ptr_pageWorkingSet[indx].virtual_address, &ptr_page_table);
f010a31b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010a31e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a321:	89 d0                	mov    %edx,%eax
f010a323:	c1 e0 02             	shl    $0x2,%eax
f010a326:	01 d0                	add    %edx,%eax
f010a328:	c1 e0 02             	shl    $0x2,%eax
f010a32b:	01 c8                	add    %ecx,%eax
f010a32d:	83 c0 78             	add    $0x78,%eax
f010a330:	8b 00                	mov    (%eax),%eax
f010a332:	89 c1                	mov    %eax,%ecx
f010a334:	8b 45 08             	mov    0x8(%ebp),%eax
f010a337:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a33a:	83 ec 04             	sub    $0x4,%esp
f010a33d:	8d 55 b4             	lea    -0x4c(%ebp),%edx
f010a340:	52                   	push   %edx
f010a341:	51                   	push   %ecx
f010a342:	50                   	push   %eax
f010a343:	e8 23 9b ff ff       	call   f0103e6b <get_page_table>
f010a348:	83 c4 10             	add    $0x10,%esp
		if((ptr_page_table[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] & PERM_BUFFERED) == PERM_BUFFERED){
f010a34b:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f010a34e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a351:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a354:	89 d0                	mov    %edx,%eax
f010a356:	c1 e0 02             	shl    $0x2,%eax
f010a359:	01 d0                	add    %edx,%eax
f010a35b:	c1 e0 02             	shl    $0x2,%eax
f010a35e:	01 d8                	add    %ebx,%eax
f010a360:	83 c0 78             	add    $0x78,%eax
f010a363:	8b 00                	mov    (%eax),%eax
f010a365:	c1 e8 0c             	shr    $0xc,%eax
f010a368:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a36d:	c1 e0 02             	shl    $0x2,%eax
f010a370:	01 c8                	add    %ecx,%eax
f010a372:	8b 00                	mov    (%eax),%eax
f010a374:	25 00 02 00 00       	and    $0x200,%eax
f010a379:	85 c0                	test   %eax,%eax
f010a37b:	0f 84 d2 01 00 00    	je     f010a553 <__page_fault_handler_with_buffering+0xcb6>
			ptr_page_table[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] &= (~PERM_BUFFERED);
f010a381:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f010a384:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a387:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a38a:	89 d0                	mov    %edx,%eax
f010a38c:	c1 e0 02             	shl    $0x2,%eax
f010a38f:	01 d0                	add    %edx,%eax
f010a391:	c1 e0 02             	shl    $0x2,%eax
f010a394:	01 d8                	add    %ebx,%eax
f010a396:	83 c0 78             	add    $0x78,%eax
f010a399:	8b 00                	mov    (%eax),%eax
f010a39b:	c1 e8 0c             	shr    $0xc,%eax
f010a39e:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a3a3:	c1 e0 02             	shl    $0x2,%eax
f010a3a6:	01 c1                	add    %eax,%ecx
f010a3a8:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f010a3ab:	8b 75 08             	mov    0x8(%ebp),%esi
f010a3ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3b1:	89 d0                	mov    %edx,%eax
f010a3b3:	c1 e0 02             	shl    $0x2,%eax
f010a3b6:	01 d0                	add    %edx,%eax
f010a3b8:	c1 e0 02             	shl    $0x2,%eax
f010a3bb:	01 f0                	add    %esi,%eax
f010a3bd:	83 c0 78             	add    $0x78,%eax
f010a3c0:	8b 00                	mov    (%eax),%eax
f010a3c2:	c1 e8 0c             	shr    $0xc,%eax
f010a3c5:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a3ca:	c1 e0 02             	shl    $0x2,%eax
f010a3cd:	01 d8                	add    %ebx,%eax
f010a3cf:	8b 00                	mov    (%eax),%eax
f010a3d1:	80 e4 fd             	and    $0xfd,%ah
f010a3d4:	89 01                	mov    %eax,(%ecx)
			ptr_page_table[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] |= (PERM_PRESENT);
f010a3d6:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f010a3d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a3dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a3df:	89 d0                	mov    %edx,%eax
f010a3e1:	c1 e0 02             	shl    $0x2,%eax
f010a3e4:	01 d0                	add    %edx,%eax
f010a3e6:	c1 e0 02             	shl    $0x2,%eax
f010a3e9:	01 d8                	add    %ebx,%eax
f010a3eb:	83 c0 78             	add    $0x78,%eax
f010a3ee:	8b 00                	mov    (%eax),%eax
f010a3f0:	c1 e8 0c             	shr    $0xc,%eax
f010a3f3:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a3f8:	c1 e0 02             	shl    $0x2,%eax
f010a3fb:	01 c1                	add    %eax,%ecx
f010a3fd:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f010a400:	8b 75 08             	mov    0x8(%ebp),%esi
f010a403:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a406:	89 d0                	mov    %edx,%eax
f010a408:	c1 e0 02             	shl    $0x2,%eax
f010a40b:	01 d0                	add    %edx,%eax
f010a40d:	c1 e0 02             	shl    $0x2,%eax
f010a410:	01 f0                	add    %esi,%eax
f010a412:	83 c0 78             	add    $0x78,%eax
f010a415:	8b 00                	mov    (%eax),%eax
f010a417:	c1 e8 0c             	shr    $0xc,%eax
f010a41a:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a41f:	c1 e0 02             	shl    $0x2,%eax
f010a422:	01 d8                	add    %ebx,%eax
f010a424:	8b 00                	mov    (%eax),%eax
f010a426:	83 c8 01             	or     $0x1,%eax
f010a429:	89 01                	mov    %eax,(%ecx)
			struct Frame_Info* ptr_frame_info = get_frame_info(curenv->env_page_directory, (void*)fault_va, &ptr_page_table);
f010a42b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a42e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a431:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a434:	83 ec 04             	sub    $0x4,%esp
f010a437:	8d 4d b4             	lea    -0x4c(%ebp),%ecx
f010a43a:	51                   	push   %ecx
f010a43b:	52                   	push   %edx
f010a43c:	50                   	push   %eax
f010a43d:	e8 bf 9c ff ff       	call   f0104101 <get_frame_info>
f010a442:	83 c4 10             	add    $0x10,%esp
f010a445:	89 45 c8             	mov    %eax,-0x38(%ebp)
			ptr_frame_info->isBuffered = 0;
f010a448:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a44b:	c6 40 14 00          	movb   $0x0,0x14(%eax)
			if((ptr_page_table[PTX(curenv->ptr_pageWorkingSet[indx].virtual_address)] & PERM_MODIFIED) == PERM_MODIFIED) {
f010a44f:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f010a452:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010a455:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a458:	89 d0                	mov    %edx,%eax
f010a45a:	c1 e0 02             	shl    $0x2,%eax
f010a45d:	01 d0                	add    %edx,%eax
f010a45f:	c1 e0 02             	shl    $0x2,%eax
f010a462:	01 d8                	add    %ebx,%eax
f010a464:	83 c0 78             	add    $0x78,%eax
f010a467:	8b 00                	mov    (%eax),%eax
f010a469:	c1 e8 0c             	shr    $0xc,%eax
f010a46c:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a471:	c1 e0 02             	shl    $0x2,%eax
f010a474:	01 c8                	add    %ecx,%eax
f010a476:	8b 00                	mov    (%eax),%eax
f010a478:	83 e0 40             	and    $0x40,%eax
f010a47b:	85 c0                	test   %eax,%eax
f010a47d:	74 6a                	je     f010a4e9 <__page_fault_handler_with_buffering+0xc4c>
				LIST_REMOVE(&modified_frame_list, ptr_frame_info);
f010a47f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a482:	8b 00                	mov    (%eax),%eax
f010a484:	85 c0                	test   %eax,%eax
f010a486:	74 10                	je     f010a498 <__page_fault_handler_with_buffering+0xbfb>
f010a488:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a48b:	8b 00                	mov    (%eax),%eax
f010a48d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010a490:	8b 52 04             	mov    0x4(%edx),%edx
f010a493:	89 50 04             	mov    %edx,0x4(%eax)
f010a496:	eb 0b                	jmp    f010a4a3 <__page_fault_handler_with_buffering+0xc06>
f010a498:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a49b:	8b 40 04             	mov    0x4(%eax),%eax
f010a49e:	a3 44 da 3c f0       	mov    %eax,0xf03cda44
f010a4a3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a4a6:	8b 40 04             	mov    0x4(%eax),%eax
f010a4a9:	85 c0                	test   %eax,%eax
f010a4ab:	74 0f                	je     f010a4bc <__page_fault_handler_with_buffering+0xc1f>
f010a4ad:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a4b0:	8b 40 04             	mov    0x4(%eax),%eax
f010a4b3:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010a4b6:	8b 12                	mov    (%edx),%edx
f010a4b8:	89 10                	mov    %edx,(%eax)
f010a4ba:	eb 0a                	jmp    f010a4c6 <__page_fault_handler_with_buffering+0xc29>
f010a4bc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a4bf:	8b 00                	mov    (%eax),%eax
f010a4c1:	a3 40 da 3c f0       	mov    %eax,0xf03cda40
f010a4c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a4c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a4cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a4d2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a4d9:	a1 4c da 3c f0       	mov    0xf03cda4c,%eax
f010a4de:	48                   	dec    %eax
f010a4df:	a3 4c da 3c f0       	mov    %eax,0xf03cda4c
f010a4e4:	e9 0c 01 00 00       	jmp    f010a5f5 <__page_fault_handler_with_buffering+0xd58>
			}
			else {
				LIST_REMOVE(&free_frame_list, ptr_frame_info);
f010a4e9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a4ec:	8b 00                	mov    (%eax),%eax
f010a4ee:	85 c0                	test   %eax,%eax
f010a4f0:	74 10                	je     f010a502 <__page_fault_handler_with_buffering+0xc65>
f010a4f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a4f5:	8b 00                	mov    (%eax),%eax
f010a4f7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010a4fa:	8b 52 04             	mov    0x4(%edx),%edx
f010a4fd:	89 50 04             	mov    %edx,0x4(%eax)
f010a500:	eb 0b                	jmp    f010a50d <__page_fault_handler_with_buffering+0xc70>
f010a502:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a505:	8b 40 04             	mov    0x4(%eax),%eax
f010a508:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f010a50d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a510:	8b 40 04             	mov    0x4(%eax),%eax
f010a513:	85 c0                	test   %eax,%eax
f010a515:	74 0f                	je     f010a526 <__page_fault_handler_with_buffering+0xc89>
f010a517:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a51a:	8b 40 04             	mov    0x4(%eax),%eax
f010a51d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010a520:	8b 12                	mov    (%edx),%edx
f010a522:	89 10                	mov    %edx,(%eax)
f010a524:	eb 0a                	jmp    f010a530 <__page_fault_handler_with_buffering+0xc93>
f010a526:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a529:	8b 00                	mov    (%eax),%eax
f010a52b:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f010a530:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a533:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a539:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010a53c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a543:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f010a548:	48                   	dec    %eax
f010a549:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
f010a54e:	e9 a2 00 00 00       	jmp    f010a5f5 <__page_fault_handler_with_buffering+0xd58>
			}
		}
		else {
			struct Frame_Info *free_frame_Oo = NULL;
f010a553:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
			allocate_frame(&free_frame_Oo);
f010a55a:	83 ec 0c             	sub    $0xc,%esp
f010a55d:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010a560:	50                   	push   %eax
f010a561:	e8 86 97 ff ff       	call   f0103cec <allocate_frame>
f010a566:	83 c4 10             	add    $0x10,%esp
			map_frame(curenv->env_page_directory, free_frame_Oo, (void*)fault_va, PERM_USER | PERM_WRITEABLE);
f010a569:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010a56c:	8b 55 9c             	mov    -0x64(%ebp),%edx
f010a56f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a572:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a575:	6a 06                	push   $0x6
f010a577:	51                   	push   %ecx
f010a578:	52                   	push   %edx
f010a579:	50                   	push   %eax
f010a57a:	e8 c2 9a ff ff       	call   f0104041 <map_frame>
f010a57f:	83 c4 10             	add    $0x10,%esp
			if (pf_read_env_page(curenv, (void*)fault_va) == E_PAGE_NOT_EXIST_IN_PF) {
f010a582:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a585:	83 ec 08             	sub    $0x8,%esp
f010a588:	50                   	push   %eax
f010a589:	ff 75 08             	pushl  0x8(%ebp)
f010a58c:	e8 69 36 00 00       	call   f010dbfa <pf_read_env_page>
f010a591:	83 c4 10             	add    $0x10,%esp
f010a594:	83 f8 f7             	cmp    $0xfffffff7,%eax
f010a597:	75 5c                	jne    f010a5f5 <__page_fault_handler_with_buffering+0xd58>
				if (fault_va < USTACKTOP && fault_va >= USTACKBOTTOM)
f010a599:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010a5a0:	77 3c                	ja     f010a5de <__page_fault_handler_with_buffering+0xd41>
f010a5a2:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010a5a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a5ac:	2d 01 90 f5 5f       	sub    $0x5ff59001,%eax
f010a5b1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010a5b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a5b7:	ba 00 00 00 00       	mov    $0x0,%edx
f010a5bc:	f7 75 c4             	divl   -0x3c(%ebp)
f010a5bf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a5c2:	29 d0                	sub    %edx,%eax
f010a5c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a5c7:	77 15                	ja     f010a5de <__page_fault_handler_with_buffering+0xd41>
					pf_add_empty_env_page(curenv, fault_va, 0);
f010a5c9:	83 ec 04             	sub    $0x4,%esp
f010a5cc:	6a 00                	push   $0x0
f010a5ce:	ff 75 0c             	pushl  0xc(%ebp)
f010a5d1:	ff 75 08             	pushl  0x8(%ebp)
f010a5d4:	e8 2f 33 00 00       	call   f010d908 <pf_add_empty_env_page>
f010a5d9:	83 c4 10             	add    $0x10,%esp
f010a5dc:	eb 17                	jmp    f010a5f5 <__page_fault_handler_with_buffering+0xd58>
				else
					panic("Bos el Wawa\n");
f010a5de:	83 ec 04             	sub    $0x4,%esp
f010a5e1:	68 e0 f3 11 f0       	push   $0xf011f3e0
f010a5e6:	68 f8 02 00 00       	push   $0x2f8
f010a5eb:	68 53 f2 11 f0       	push   $0xf011f253
f010a5f0:	e8 9e 5b ff ff       	call   f0100193 <_panic>
			}
		}
		if(LIST_SIZE(&free_frame_list) == 0) {
f010a5f5:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f010a5fa:	85 c0                	test   %eax,%eax
f010a5fc:	0f 85 6f 01 00 00    	jne    f010a771 <__page_fault_handler_with_buffering+0xed4>
			struct Frame_Info* ptr_frame_info = NULL;
f010a602:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
			LIST_FOREACH(ptr_frame_info, &modified_frame_list) {
f010a609:	a1 40 da 3c f0       	mov    0xf03cda40,%eax
f010a60e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a611:	e9 2d 01 00 00       	jmp    f010a743 <__page_fault_handler_with_buffering+0xea6>
				uint32 *ptr_page_table = NULL;
f010a616:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%ebp)
				get_page_table(ptr_frame_info->environment->env_page_directory, (void*) ptr_frame_info->va, &ptr_page_table);
f010a61d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a620:	8b 40 0c             	mov    0xc(%eax),%eax
f010a623:	89 c1                	mov    %eax,%ecx
f010a625:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a628:	8b 40 10             	mov    0x10(%eax),%eax
f010a62b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a62e:	83 ec 04             	sub    $0x4,%esp
f010a631:	8d 55 98             	lea    -0x68(%ebp),%edx
f010a634:	52                   	push   %edx
f010a635:	51                   	push   %ecx
f010a636:	50                   	push   %eax
f010a637:	e8 2f 98 ff ff       	call   f0103e6b <get_page_table>
f010a63c:	83 c4 10             	add    $0x10,%esp
				ptr_page_table[PTX(ptr_frame_info->va)] &= (~PERM_MODIFIED);
f010a63f:	8b 55 98             	mov    -0x68(%ebp),%edx
f010a642:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a645:	8b 40 0c             	mov    0xc(%eax),%eax
f010a648:	c1 e8 0c             	shr    $0xc,%eax
f010a64b:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a650:	c1 e0 02             	shl    $0x2,%eax
f010a653:	01 c2                	add    %eax,%edx
f010a655:	8b 4d 98             	mov    -0x68(%ebp),%ecx
f010a658:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a65b:	8b 40 0c             	mov    0xc(%eax),%eax
f010a65e:	c1 e8 0c             	shr    $0xc,%eax
f010a661:	25 ff 03 00 00       	and    $0x3ff,%eax
f010a666:	c1 e0 02             	shl    $0x2,%eax
f010a669:	01 c8                	add    %ecx,%eax
f010a66b:	8b 00                	mov    (%eax),%eax
f010a66d:	83 e0 bf             	and    $0xffffffbf,%eax
f010a670:	89 02                	mov    %eax,(%edx)
				LIST_REMOVE(&modified_frame_list, ptr_frame_info);
f010a672:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a675:	8b 00                	mov    (%eax),%eax
f010a677:	85 c0                	test   %eax,%eax
f010a679:	74 10                	je     f010a68b <__page_fault_handler_with_buffering+0xdee>
f010a67b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a67e:	8b 00                	mov    (%eax),%eax
f010a680:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a683:	8b 52 04             	mov    0x4(%edx),%edx
f010a686:	89 50 04             	mov    %edx,0x4(%eax)
f010a689:	eb 0b                	jmp    f010a696 <__page_fault_handler_with_buffering+0xdf9>
f010a68b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a68e:	8b 40 04             	mov    0x4(%eax),%eax
f010a691:	a3 44 da 3c f0       	mov    %eax,0xf03cda44
f010a696:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a699:	8b 40 04             	mov    0x4(%eax),%eax
f010a69c:	85 c0                	test   %eax,%eax
f010a69e:	74 0f                	je     f010a6af <__page_fault_handler_with_buffering+0xe12>
f010a6a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6a3:	8b 40 04             	mov    0x4(%eax),%eax
f010a6a6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a6a9:	8b 12                	mov    (%edx),%edx
f010a6ab:	89 10                	mov    %edx,(%eax)
f010a6ad:	eb 0a                	jmp    f010a6b9 <__page_fault_handler_with_buffering+0xe1c>
f010a6af:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6b2:	8b 00                	mov    (%eax),%eax
f010a6b4:	a3 40 da 3c f0       	mov    %eax,0xf03cda40
f010a6b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a6c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6c5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a6cc:	a1 4c da 3c f0       	mov    0xf03cda4c,%eax
f010a6d1:	48                   	dec    %eax
f010a6d2:	a3 4c da 3c f0       	mov    %eax,0xf03cda4c
				LIST_INSERT_TAIL(&free_frame_list, ptr_frame_info);
f010a6d7:	8b 15 58 da 3c f0    	mov    0xf03cda58,%edx
f010a6dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6e0:	89 50 04             	mov    %edx,0x4(%eax)
f010a6e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6e6:	8b 40 04             	mov    0x4(%eax),%eax
f010a6e9:	85 c0                	test   %eax,%eax
f010a6eb:	74 0c                	je     f010a6f9 <__page_fault_handler_with_buffering+0xe5c>
f010a6ed:	a1 58 da 3c f0       	mov    0xf03cda58,%eax
f010a6f2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a6f5:	89 10                	mov    %edx,(%eax)
f010a6f7:	eb 08                	jmp    f010a701 <__page_fault_handler_with_buffering+0xe64>
f010a6f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6fc:	a3 54 da 3c f0       	mov    %eax,0xf03cda54
f010a701:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a704:	a3 58 da 3c f0       	mov    %eax,0xf03cda58
f010a709:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a70c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a712:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f010a717:	40                   	inc    %eax
f010a718:	a3 60 da 3c f0       	mov    %eax,0xf03cda60
				pf_update_env_page(ptr_frame_info->environment, (void*) ptr_frame_info->va, ptr_frame_info);
f010a71d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a720:	8b 40 0c             	mov    0xc(%eax),%eax
f010a723:	89 c2                	mov    %eax,%edx
f010a725:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a728:	8b 40 10             	mov    0x10(%eax),%eax
f010a72b:	83 ec 04             	sub    $0x4,%esp
f010a72e:	ff 75 d8             	pushl  -0x28(%ebp)
f010a731:	52                   	push   %edx
f010a732:	50                   	push   %eax
f010a733:	e8 c6 33 00 00       	call   f010dafe <pf_update_env_page>
f010a738:	83 c4 10             	add    $0x10,%esp
					panic("Bos el Wawa\n");
			}
		}
		if(LIST_SIZE(&free_frame_list) == 0) {
			struct Frame_Info* ptr_frame_info = NULL;
			LIST_FOREACH(ptr_frame_info, &modified_frame_list) {
f010a73b:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f010a740:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a743:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010a747:	74 07                	je     f010a750 <__page_fault_handler_with_buffering+0xeb3>
f010a749:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a74c:	8b 00                	mov    (%eax),%eax
f010a74e:	eb 05                	jmp    f010a755 <__page_fault_handler_with_buffering+0xeb8>
f010a750:	b8 00 00 00 00       	mov    $0x0,%eax
f010a755:	a3 48 da 3c f0       	mov    %eax,0xf03cda48
f010a75a:	a1 48 da 3c f0       	mov    0xf03cda48,%eax
f010a75f:	85 c0                	test   %eax,%eax
f010a761:	0f 85 af fe ff ff    	jne    f010a616 <__page_fault_handler_with_buffering+0xd79>
f010a767:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010a76b:	0f 85 a5 fe ff ff    	jne    f010a616 <__page_fault_handler_with_buffering+0xd79>
				pf_update_env_page(ptr_frame_info->environment, (void*) ptr_frame_info->va, ptr_frame_info);
			}
		}
	}
	//refer to the documentation for details
}
f010a771:	90                   	nop
f010a772:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010a775:	5b                   	pop    %ebx
f010a776:	5e                   	pop    %esi
f010a777:	5d                   	pop    %ebp
f010a778:	c3                   	ret    
f010a779:	90                   	nop

f010a77a <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010a77a:	6a 0e                	push   $0xe
f010a77c:	e9 ed 00 00 00       	jmp    f010a86e <_alltraps>
f010a781:	90                   	nop

f010a782 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010a782:	6a 00                	push   $0x0
f010a784:	6a 30                	push   $0x30
f010a786:	e9 e3 00 00 00       	jmp    f010a86e <_alltraps>
f010a78b:	90                   	nop

f010a78c <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010a78c:	6a 08                	push   $0x8
f010a78e:	e9 db 00 00 00       	jmp    f010a86e <_alltraps>
f010a793:	90                   	nop

f010a794 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010a794:	6a 00                	push   $0x0
f010a796:	6a 00                	push   $0x0
f010a798:	e9 d1 00 00 00       	jmp    f010a86e <_alltraps>
f010a79d:	90                   	nop

f010a79e <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010a79e:	6a 00                	push   $0x0
f010a7a0:	6a 01                	push   $0x1
f010a7a2:	e9 c7 00 00 00       	jmp    f010a86e <_alltraps>
f010a7a7:	90                   	nop

f010a7a8 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010a7a8:	6a 00                	push   $0x0
f010a7aa:	6a 02                	push   $0x2
f010a7ac:	e9 bd 00 00 00       	jmp    f010a86e <_alltraps>
f010a7b1:	90                   	nop

f010a7b2 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010a7b2:	6a 00                	push   $0x0
f010a7b4:	6a 03                	push   $0x3
f010a7b6:	e9 b3 00 00 00       	jmp    f010a86e <_alltraps>
f010a7bb:	90                   	nop

f010a7bc <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010a7bc:	6a 00                	push   $0x0
f010a7be:	6a 04                	push   $0x4
f010a7c0:	e9 a9 00 00 00       	jmp    f010a86e <_alltraps>
f010a7c5:	90                   	nop

f010a7c6 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010a7c6:	6a 00                	push   $0x0
f010a7c8:	6a 05                	push   $0x5
f010a7ca:	e9 9f 00 00 00       	jmp    f010a86e <_alltraps>
f010a7cf:	90                   	nop

f010a7d0 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010a7d0:	6a 00                	push   $0x0
f010a7d2:	6a 06                	push   $0x6
f010a7d4:	e9 95 00 00 00       	jmp    f010a86e <_alltraps>
f010a7d9:	90                   	nop

f010a7da <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010a7da:	6a 00                	push   $0x0
f010a7dc:	6a 07                	push   $0x7
f010a7de:	e9 8b 00 00 00       	jmp    f010a86e <_alltraps>
f010a7e3:	90                   	nop

f010a7e4 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010a7e4:	6a 0a                	push   $0xa
f010a7e6:	e9 83 00 00 00       	jmp    f010a86e <_alltraps>
f010a7eb:	90                   	nop

f010a7ec <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010a7ec:	6a 0b                	push   $0xb
f010a7ee:	eb 7e                	jmp    f010a86e <_alltraps>

f010a7f0 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010a7f0:	6a 0c                	push   $0xc
f010a7f2:	eb 7a                	jmp    f010a86e <_alltraps>

f010a7f4 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010a7f4:	6a 0d                	push   $0xd
f010a7f6:	eb 76                	jmp    f010a86e <_alltraps>

f010a7f8 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010a7f8:	6a 00                	push   $0x0
f010a7fa:	6a 10                	push   $0x10
f010a7fc:	eb 70                	jmp    f010a86e <_alltraps>

f010a7fe <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010a7fe:	6a 11                	push   $0x11
f010a800:	eb 6c                	jmp    f010a86e <_alltraps>

f010a802 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010a802:	6a 00                	push   $0x0
f010a804:	6a 12                	push   $0x12
f010a806:	eb 66                	jmp    f010a86e <_alltraps>

f010a808 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010a808:	6a 00                	push   $0x0
f010a80a:	6a 13                	push   $0x13
f010a80c:	eb 60                	jmp    f010a86e <_alltraps>

f010a80e <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010a80e:	6a 00                	push   $0x0
f010a810:	6a 20                	push   $0x20
f010a812:	eb 5a                	jmp    f010a86e <_alltraps>

f010a814 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010a814:	6a 00                	push   $0x0
f010a816:	6a 21                	push   $0x21
f010a818:	eb 54                	jmp    f010a86e <_alltraps>

f010a81a <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010a81a:	6a 00                	push   $0x0
f010a81c:	6a 22                	push   $0x22
f010a81e:	eb 4e                	jmp    f010a86e <_alltraps>

f010a820 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010a820:	6a 00                	push   $0x0
f010a822:	6a 23                	push   $0x23
f010a824:	eb 48                	jmp    f010a86e <_alltraps>

f010a826 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010a826:	6a 00                	push   $0x0
f010a828:	6a 24                	push   $0x24
f010a82a:	eb 42                	jmp    f010a86e <_alltraps>

f010a82c <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010a82c:	6a 00                	push   $0x0
f010a82e:	6a 25                	push   $0x25
f010a830:	eb 3c                	jmp    f010a86e <_alltraps>

f010a832 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010a832:	6a 00                	push   $0x0
f010a834:	6a 26                	push   $0x26
f010a836:	eb 36                	jmp    f010a86e <_alltraps>

f010a838 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010a838:	6a 00                	push   $0x0
f010a83a:	6a 27                	push   $0x27
f010a83c:	eb 30                	jmp    f010a86e <_alltraps>

f010a83e <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010a83e:	6a 00                	push   $0x0
f010a840:	6a 28                	push   $0x28
f010a842:	eb 2a                	jmp    f010a86e <_alltraps>

f010a844 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010a844:	6a 00                	push   $0x0
f010a846:	6a 29                	push   $0x29
f010a848:	eb 24                	jmp    f010a86e <_alltraps>

f010a84a <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010a84a:	6a 00                	push   $0x0
f010a84c:	6a 2a                	push   $0x2a
f010a84e:	eb 1e                	jmp    f010a86e <_alltraps>

f010a850 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010a850:	6a 00                	push   $0x0
f010a852:	6a 2b                	push   $0x2b
f010a854:	eb 18                	jmp    f010a86e <_alltraps>

f010a856 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010a856:	6a 00                	push   $0x0
f010a858:	6a 2c                	push   $0x2c
f010a85a:	eb 12                	jmp    f010a86e <_alltraps>

f010a85c <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010a85c:	6a 00                	push   $0x0
f010a85e:	6a 2d                	push   $0x2d
f010a860:	eb 0c                	jmp    f010a86e <_alltraps>

f010a862 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010a862:	6a 00                	push   $0x0
f010a864:	6a 2e                	push   $0x2e
f010a866:	eb 06                	jmp    f010a86e <_alltraps>

f010a868 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010a868:	6a 00                	push   $0x0
f010a86a:	6a 2f                	push   $0x2f
f010a86c:	eb 00                	jmp    f010a86e <_alltraps>

f010a86e <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010a86e:	1e                   	push   %ds
push %es
f010a86f:	06                   	push   %es
pushal
f010a870:	60                   	pusha  

mov $(GD_KD), %ax
f010a871:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010a875:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010a877:	8e c0                	mov    %eax,%es

push %esp
f010a879:	54                   	push   %esp

call trap
f010a87a:	e8 60 df ff ff       	call   f01087df <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010a87f:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010a880:	61                   	popa   
pop %es
f010a881:	07                   	pop    %es
pop %ds
f010a882:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010a883:	83 c4 08             	add    $0x8,%esp

iret
f010a886:	cf                   	iret   

f010a887 <isSchedMethodRR>:
extern inline void pd_set_table_unused(struct Env *e, uint32 virtual_address);
extern inline void pd_clear_page_dir_entry(struct Env *e, uint32 virtual_address);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010a887:	55                   	push   %ebp
f010a888:	89 e5                	mov    %esp,%ebp
f010a88a:	a1 f8 f5 3a f0       	mov    0xf03af5f8,%eax
f010a88f:	85 c0                	test   %eax,%eax
f010a891:	75 07                	jne    f010a89a <isSchedMethodRR+0x13>
f010a893:	b8 01 00 00 00       	mov    $0x1,%eax
f010a898:	eb 05                	jmp    f010a89f <isSchedMethodRR+0x18>
f010a89a:	b8 00 00 00 00       	mov    $0x0,%eax
f010a89f:	5d                   	pop    %ebp
f010a8a0:	c3                   	ret    

f010a8a1 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f010a8a1:	55                   	push   %ebp
f010a8a2:	89 e5                	mov    %esp,%ebp
f010a8a4:	a1 f8 f5 3a f0       	mov    0xf03af5f8,%eax
f010a8a9:	83 f8 01             	cmp    $0x1,%eax
f010a8ac:	75 07                	jne    f010a8b5 <isSchedMethodMLFQ+0x14>
f010a8ae:	b8 01 00 00 00       	mov    $0x1,%eax
f010a8b3:	eb 05                	jmp    f010a8ba <isSchedMethodMLFQ+0x19>
f010a8b5:	b8 00 00 00 00       	mov    $0x0,%eax
f010a8ba:	5d                   	pop    %ebp
f010a8bb:	c3                   	ret    

f010a8bc <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010a8bc:	55                   	push   %ebp
f010a8bd:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010a8bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a8c3:	74 1d                	je     f010a8e2 <init_queue+0x26>
	{
		LIST_INIT(queue);
f010a8c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8c8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a8ce:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a8d8:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8db:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010a8e2:	90                   	nop
f010a8e3:	5d                   	pop    %ebp
f010a8e4:	c3                   	ret    

f010a8e5 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010a8e5:	55                   	push   %ebp
f010a8e6:	89 e5                	mov    %esp,%ebp
f010a8e8:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f010a8eb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f010a8f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f5:	8b 00                	mov    (%eax),%eax
f010a8f7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010a8fa:	eb 19                	jmp    f010a915 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f010a8fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010a8ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a902:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010a905:	75 05                	jne    f010a90c <find_env_in_queue+0x27>
		{
			return ptr_env;
f010a907:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010a90a:	eb 37                	jmp    f010a943 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f010a90c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90f:	8b 40 08             	mov    0x8(%eax),%eax
f010a912:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010a915:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010a919:	74 08                	je     f010a923 <find_env_in_queue+0x3e>
f010a91b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010a91e:	8b 40 44             	mov    0x44(%eax),%eax
f010a921:	eb 05                	jmp    f010a928 <find_env_in_queue+0x43>
f010a923:	b8 00 00 00 00       	mov    $0x0,%eax
f010a928:	8b 55 08             	mov    0x8(%ebp),%edx
f010a92b:	89 42 08             	mov    %eax,0x8(%edx)
f010a92e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a931:	8b 40 08             	mov    0x8(%eax),%eax
f010a934:	85 c0                	test   %eax,%eax
f010a936:	75 c4                	jne    f010a8fc <find_env_in_queue+0x17>
f010a938:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010a93c:	75 be                	jne    f010a8fc <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f010a93e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a943:	c9                   	leave  
f010a944:	c3                   	ret    

f010a945 <sched_init_MLFQ>:
//==================================================================================//

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f010a945:	55                   	push   %ebp
f010a946:	89 e5                	mov    %esp,%ebp
f010a948:	83 ec 28             	sub    $0x28,%esp
f010a94b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a94e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	//sched_delete_ready_queues();
	scheduler_status = SCH_STOPPED;
f010a951:	c7 05 00 f6 3a f0 00 	movl   $0x0,0xf03af600
f010a958:	00 00 00 
	scheduler_method = SCH_MLFQ;
f010a95b:	c7 05 f8 f5 3a f0 01 	movl   $0x1,0xf03af5f8
f010a962:	00 00 00 
	//=========================================

	//TODO: [FINAL_EVAL_2020 - VER_B] - [1] MLFQ [Initialize]
	//refer to the documentation for details

	num_of_ready_queues = numOfLevels;
f010a965:	8a 45 e4             	mov    -0x1c(%ebp),%al
f010a968:	a2 08 f6 3a f0       	mov    %al,0xf03af608

	//[1] Initialize the ready queues using init_queue()
	init_queue(env_ready_queues);
f010a96d:	68 40 2a 34 f0       	push   $0xf0342a40
f010a972:	e8 45 ff ff ff       	call   f010a8bc <init_queue>
f010a977:	83 c4 04             	add    $0x4,%esp
	//[2] Initialize the "quantums" array by the given quantums in "quantumOfEachLevel[]"
	for(int i = 0; i < numOfLevels; i++) {
f010a97a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a981:	eb 18                	jmp    f010a99b <sched_init_MLFQ+0x56>
		quantums[i] = quantumOfEachLevel[i];
f010a983:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a986:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a989:	01 d0                	add    %edx,%eax
f010a98b:	8a 00                	mov    (%eax),%al
f010a98d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a990:	81 c2 d4 f5 3a f0    	add    $0xf03af5d4,%edx
f010a996:	88 02                	mov    %al,(%edx)
	num_of_ready_queues = numOfLevels;

	//[1] Initialize the ready queues using init_queue()
	init_queue(env_ready_queues);
	//[2] Initialize the "quantums" array by the given quantums in "quantumOfEachLevel[]"
	for(int i = 0; i < numOfLevels; i++) {
f010a998:	ff 45 f4             	incl   -0xc(%ebp)
f010a99b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010a99f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a9a2:	7f df                	jg     f010a983 <sched_init_MLFQ+0x3e>
		quantums[i] = quantumOfEachLevel[i];
	}
	//[3] Set the CPU quantum by the first level one
	kclock_set_quantum(quantums[0]);
f010a9a4:	a0 d4 f5 3a f0       	mov    0xf03af5d4,%al
f010a9a9:	0f b6 c0             	movzbl %al,%eax
f010a9ac:	83 ec 0c             	sub    $0xc,%esp
f010a9af:	50                   	push   %eax
f010a9b0:	e8 05 c7 ff ff       	call   f01070ba <kclock_set_quantum>
f010a9b5:	83 c4 10             	add    $0x10,%esp
}
f010a9b8:	90                   	nop
f010a9b9:	c9                   	leave  
f010a9ba:	c3                   	ret    

f010a9bb <fos_scheduler_MLFQ>:

int firstTime = 0;

struct Env* fos_scheduler_MLFQ()
{
f010a9bb:	55                   	push   %ebp
f010a9bc:	89 e5                	mov    %esp,%ebp
f010a9be:	83 ec 18             	sub    $0x18,%esp

	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue

	//[1] If the current environment (curenv) exists, place it in the suitable queue
	if(curenv != NULL) {
f010a9c1:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010a9c6:	85 c0                	test   %eax,%eax
f010a9c8:	0f 84 42 01 00 00    	je     f010ab10 <fos_scheduler_MLFQ+0x155>
		if(firstTime + 1 < num_of_ready_queues) {
f010a9ce:	a1 08 2a 34 f0       	mov    0xf0342a08,%eax
f010a9d3:	8d 50 01             	lea    0x1(%eax),%edx
f010a9d6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010a9db:	0f b6 c0             	movzbl %al,%eax
f010a9de:	39 c2                	cmp    %eax,%edx
f010a9e0:	0f 8d 9b 00 00 00    	jge    f010aa81 <fos_scheduler_MLFQ+0xc6>
			LIST_INSERT_TAIL(&(env_ready_queues[firstTime + 1]), curenv);
f010a9e6:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010a9eb:	8b 15 08 2a 34 f0    	mov    0xf0342a08,%edx
f010a9f1:	42                   	inc    %edx
f010a9f2:	c1 e2 04             	shl    $0x4,%edx
f010a9f5:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010a9fb:	8b 12                	mov    (%edx),%edx
f010a9fd:	89 50 48             	mov    %edx,0x48(%eax)
f010aa00:	8b 40 48             	mov    0x48(%eax),%eax
f010aa03:	85 c0                	test   %eax,%eax
f010aa05:	74 1b                	je     f010aa22 <fos_scheduler_MLFQ+0x67>
f010aa07:	a1 08 2a 34 f0       	mov    0xf0342a08,%eax
f010aa0c:	40                   	inc    %eax
f010aa0d:	c1 e0 04             	shl    $0x4,%eax
f010aa10:	05 44 2a 34 f0       	add    $0xf0342a44,%eax
f010aa15:	8b 00                	mov    (%eax),%eax
f010aa17:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f010aa1d:	89 50 44             	mov    %edx,0x44(%eax)
f010aa20:	eb 18                	jmp    f010aa3a <fos_scheduler_MLFQ+0x7f>
f010aa22:	a1 08 2a 34 f0       	mov    0xf0342a08,%eax
f010aa27:	8d 50 01             	lea    0x1(%eax),%edx
f010aa2a:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010aa2f:	c1 e2 04             	shl    $0x4,%edx
f010aa32:	81 c2 40 2a 34 f0    	add    $0xf0342a40,%edx
f010aa38:	89 02                	mov    %eax,(%edx)
f010aa3a:	a1 08 2a 34 f0       	mov    0xf0342a08,%eax
f010aa3f:	8d 50 01             	lea    0x1(%eax),%edx
f010aa42:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010aa47:	c1 e2 04             	shl    $0x4,%edx
f010aa4a:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010aa50:	89 02                	mov    %eax,(%edx)
f010aa52:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010aa57:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aa5e:	a1 08 2a 34 f0       	mov    0xf0342a08,%eax
f010aa63:	40                   	inc    %eax
f010aa64:	89 c2                	mov    %eax,%edx
f010aa66:	c1 e2 04             	shl    $0x4,%edx
f010aa69:	81 c2 4c 2a 34 f0    	add    $0xf0342a4c,%edx
f010aa6f:	8b 12                	mov    (%edx),%edx
f010aa71:	42                   	inc    %edx
f010aa72:	c1 e0 04             	shl    $0x4,%eax
f010aa75:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010aa7a:	89 10                	mov    %edx,(%eax)
f010aa7c:	e9 8f 00 00 00       	jmp    f010ab10 <fos_scheduler_MLFQ+0x155>
		}
		else {
			LIST_INSERT_TAIL(&(env_ready_queues[firstTime]), curenv);
f010aa81:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010aa86:	8b 15 08 2a 34 f0    	mov    0xf0342a08,%edx
f010aa8c:	c1 e2 04             	shl    $0x4,%edx
f010aa8f:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010aa95:	8b 12                	mov    (%edx),%edx
f010aa97:	89 50 48             	mov    %edx,0x48(%eax)
f010aa9a:	8b 40 48             	mov    0x48(%eax),%eax
f010aa9d:	85 c0                	test   %eax,%eax
f010aa9f:	74 1a                	je     f010aabb <fos_scheduler_MLFQ+0x100>
f010aaa1:	a1 08 2a 34 f0       	mov    0xf0342a08,%eax
f010aaa6:	c1 e0 04             	shl    $0x4,%eax
f010aaa9:	05 44 2a 34 f0       	add    $0xf0342a44,%eax
f010aaae:	8b 00                	mov    (%eax),%eax
f010aab0:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f010aab6:	89 50 44             	mov    %edx,0x44(%eax)
f010aab9:	eb 16                	jmp    f010aad1 <fos_scheduler_MLFQ+0x116>
f010aabb:	8b 15 08 2a 34 f0    	mov    0xf0342a08,%edx
f010aac1:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010aac6:	c1 e2 04             	shl    $0x4,%edx
f010aac9:	81 c2 40 2a 34 f0    	add    $0xf0342a40,%edx
f010aacf:	89 02                	mov    %eax,(%edx)
f010aad1:	8b 15 08 2a 34 f0    	mov    0xf0342a08,%edx
f010aad7:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010aadc:	c1 e2 04             	shl    $0x4,%edx
f010aadf:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010aae5:	89 02                	mov    %eax,(%edx)
f010aae7:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010aaec:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010aaf3:	a1 08 2a 34 f0       	mov    0xf0342a08,%eax
f010aaf8:	89 c2                	mov    %eax,%edx
f010aafa:	c1 e2 04             	shl    $0x4,%edx
f010aafd:	81 c2 4c 2a 34 f0    	add    $0xf0342a4c,%edx
f010ab03:	8b 12                	mov    (%edx),%edx
f010ab05:	42                   	inc    %edx
f010ab06:	c1 e0 04             	shl    $0x4,%eax
f010ab09:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010ab0e:	89 10                	mov    %edx,(%eax)
		}
	}
	//[2] Search for the next env in the queues according to their priorities (first is highest)
	for(int i = 0; i < num_of_ready_queues; i++) {
f010ab10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ab17:	e9 2e 01 00 00       	jmp    f010ac4a <fos_scheduler_MLFQ+0x28f>
		struct Env *cur = NULL;
f010ab1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cur, &(env_ready_queues[i])) {
f010ab23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab26:	c1 e0 04             	shl    $0x4,%eax
f010ab29:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010ab2e:	8b 00                	mov    (%eax),%eax
f010ab30:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ab33:	e9 cf 00 00 00       	jmp    f010ac07 <fos_scheduler_MLFQ+0x24c>
			if(cur != NULL) {
f010ab38:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ab3c:	0f 84 b5 00 00 00    	je     f010abf7 <fos_scheduler_MLFQ+0x23c>
				firstTime = i;
f010ab42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab45:	a3 08 2a 34 f0       	mov    %eax,0xf0342a08
				kclock_set_quantum(quantums[i]);
f010ab4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab4d:	05 d4 f5 3a f0       	add    $0xf03af5d4,%eax
f010ab52:	8a 00                	mov    (%eax),%al
f010ab54:	0f b6 c0             	movzbl %al,%eax
f010ab57:	83 ec 0c             	sub    $0xc,%esp
f010ab5a:	50                   	push   %eax
f010ab5b:	e8 5a c5 ff ff       	call   f01070ba <kclock_set_quantum>
f010ab60:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), cur);
f010ab63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab66:	8b 40 44             	mov    0x44(%eax),%eax
f010ab69:	85 c0                	test   %eax,%eax
f010ab6b:	74 11                	je     f010ab7e <fos_scheduler_MLFQ+0x1c3>
f010ab6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab70:	8b 40 44             	mov    0x44(%eax),%eax
f010ab73:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ab76:	8b 52 48             	mov    0x48(%edx),%edx
f010ab79:	89 50 48             	mov    %edx,0x48(%eax)
f010ab7c:	eb 14                	jmp    f010ab92 <fos_scheduler_MLFQ+0x1d7>
f010ab7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab81:	8b 40 48             	mov    0x48(%eax),%eax
f010ab84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ab87:	c1 e2 04             	shl    $0x4,%edx
f010ab8a:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010ab90:	89 02                	mov    %eax,(%edx)
f010ab92:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab95:	8b 40 48             	mov    0x48(%eax),%eax
f010ab98:	85 c0                	test   %eax,%eax
f010ab9a:	74 11                	je     f010abad <fos_scheduler_MLFQ+0x1f2>
f010ab9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab9f:	8b 40 48             	mov    0x48(%eax),%eax
f010aba2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aba5:	8b 52 44             	mov    0x44(%edx),%edx
f010aba8:	89 50 44             	mov    %edx,0x44(%eax)
f010abab:	eb 14                	jmp    f010abc1 <fos_scheduler_MLFQ+0x206>
f010abad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abb0:	8b 40 44             	mov    0x44(%eax),%eax
f010abb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abb6:	c1 e2 04             	shl    $0x4,%edx
f010abb9:	81 c2 40 2a 34 f0    	add    $0xf0342a40,%edx
f010abbf:	89 02                	mov    %eax,(%edx)
f010abc1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abc4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010abcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abce:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010abd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abd8:	c1 e0 04             	shl    $0x4,%eax
f010abdb:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010abe0:	8b 00                	mov    (%eax),%eax
f010abe2:	8d 50 ff             	lea    -0x1(%eax),%edx
f010abe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abe8:	c1 e0 04             	shl    $0x4,%eax
f010abeb:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010abf0:	89 10                	mov    %edx,(%eax)
				return cur;
f010abf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010abf5:	eb 69                	jmp    f010ac60 <fos_scheduler_MLFQ+0x2a5>
		}
	}
	//[2] Search for the next env in the queues according to their priorities (first is highest)
	for(int i = 0; i < num_of_ready_queues; i++) {
		struct Env *cur = NULL;
		LIST_FOREACH(cur, &(env_ready_queues[i])) {
f010abf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abfa:	c1 e0 04             	shl    $0x4,%eax
f010abfd:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010ac02:	8b 00                	mov    (%eax),%eax
f010ac04:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ac07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ac0b:	74 08                	je     f010ac15 <fos_scheduler_MLFQ+0x25a>
f010ac0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ac10:	8b 40 44             	mov    0x44(%eax),%eax
f010ac13:	eb 05                	jmp    f010ac1a <fos_scheduler_MLFQ+0x25f>
f010ac15:	b8 00 00 00 00       	mov    $0x0,%eax
f010ac1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac1d:	c1 e2 04             	shl    $0x4,%edx
f010ac20:	81 c2 48 2a 34 f0    	add    $0xf0342a48,%edx
f010ac26:	89 02                	mov    %eax,(%edx)
f010ac28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ac2b:	c1 e0 04             	shl    $0x4,%eax
f010ac2e:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010ac33:	8b 00                	mov    (%eax),%eax
f010ac35:	85 c0                	test   %eax,%eax
f010ac37:	0f 85 fb fe ff ff    	jne    f010ab38 <fos_scheduler_MLFQ+0x17d>
f010ac3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ac41:	0f 85 f1 fe ff ff    	jne    f010ab38 <fos_scheduler_MLFQ+0x17d>
		else {
			LIST_INSERT_TAIL(&(env_ready_queues[firstTime]), curenv);
		}
	}
	//[2] Search for the next env in the queues according to their priorities (first is highest)
	for(int i = 0; i < num_of_ready_queues; i++) {
f010ac47:	ff 45 f4             	incl   -0xc(%ebp)
f010ac4a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ac4f:	0f b6 c0             	movzbl %al,%eax
f010ac52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ac55:	0f 8f c1 fe ff ff    	jg     f010ab1c <fos_scheduler_MLFQ+0x161>
		}
	}
	//[3] If next env is found: Set the CPU quantum by the quantum of the selected level
	//							,remove the selected env from its queue and return it
	//	  Else, return NULL
	return NULL;
f010ac5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac60:	c9                   	leave  
f010ac61:	c3                   	ret    

f010ac62 <fos_scheduler>:


void
fos_scheduler(void)
{
f010ac62:	55                   	push   %ebp
f010ac63:	89 e5                	mov    %esp,%ebp
f010ac65:	83 ec 18             	sub    $0x18,%esp
	chk1();
f010ac68:	e8 4e 15 01 00       	call   f011c1bb <chk1>
	scheduler_status = SCH_STARTED;
f010ac6d:	c7 05 00 f6 3a f0 01 	movl   $0x1,0xf03af600
f010ac74:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010ac77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f010ac7e:	a1 f8 f5 3a f0       	mov    0xf03af5f8,%eax
f010ac83:	85 c0                	test   %eax,%eax
f010ac85:	0f 85 e8 00 00 00    	jne    f010ad73 <fos_scheduler+0x111>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010ac8b:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010ac90:	85 c0                	test   %eax,%eax
f010ac92:	74 50                	je     f010ace4 <fos_scheduler+0x82>
		{
			LIST_INSERT_HEAD(&(env_ready_queues[0]), curenv);
f010ac94:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010ac99:	8b 15 40 2a 34 f0    	mov    0xf0342a40,%edx
f010ac9f:	89 50 44             	mov    %edx,0x44(%eax)
f010aca2:	8b 40 44             	mov    0x44(%eax),%eax
f010aca5:	85 c0                	test   %eax,%eax
f010aca7:	74 10                	je     f010acb9 <fos_scheduler+0x57>
f010aca9:	a1 40 2a 34 f0       	mov    0xf0342a40,%eax
f010acae:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f010acb4:	89 50 48             	mov    %edx,0x48(%eax)
f010acb7:	eb 0a                	jmp    f010acc3 <fos_scheduler+0x61>
f010acb9:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010acbe:	a3 44 2a 34 f0       	mov    %eax,0xf0342a44
f010acc3:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010acc8:	a3 40 2a 34 f0       	mov    %eax,0xf0342a40
f010accd:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010acd2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010acd9:	a1 4c 2a 34 f0       	mov    0xf0342a4c,%eax
f010acde:	40                   	inc    %eax
f010acdf:	a3 4c 2a 34 f0       	mov    %eax,0xf0342a4c
		}

		//Pick the next environment from the ready queue
		next_env = LIST_LAST(&(env_ready_queues[0]));
f010ace4:	a1 44 2a 34 f0       	mov    0xf0342a44,%eax
f010ace9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (next_env != NULL)
f010acec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010acf0:	74 6b                	je     f010ad5d <fos_scheduler+0xfb>
			LIST_REMOVE(&(env_ready_queues[0]), next_env);
f010acf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acf5:	8b 40 44             	mov    0x44(%eax),%eax
f010acf8:	85 c0                	test   %eax,%eax
f010acfa:	74 11                	je     f010ad0d <fos_scheduler+0xab>
f010acfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acff:	8b 40 44             	mov    0x44(%eax),%eax
f010ad02:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad05:	8b 52 48             	mov    0x48(%edx),%edx
f010ad08:	89 50 48             	mov    %edx,0x48(%eax)
f010ad0b:	eb 0b                	jmp    f010ad18 <fos_scheduler+0xb6>
f010ad0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad10:	8b 40 48             	mov    0x48(%eax),%eax
f010ad13:	a3 44 2a 34 f0       	mov    %eax,0xf0342a44
f010ad18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad1b:	8b 40 48             	mov    0x48(%eax),%eax
f010ad1e:	85 c0                	test   %eax,%eax
f010ad20:	74 11                	je     f010ad33 <fos_scheduler+0xd1>
f010ad22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad25:	8b 40 48             	mov    0x48(%eax),%eax
f010ad28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad2b:	8b 52 44             	mov    0x44(%edx),%edx
f010ad2e:	89 50 44             	mov    %edx,0x44(%eax)
f010ad31:	eb 0b                	jmp    f010ad3e <fos_scheduler+0xdc>
f010ad33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad36:	8b 40 44             	mov    0x44(%eax),%eax
f010ad39:	a3 40 2a 34 f0       	mov    %eax,0xf0342a40
f010ad3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad41:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ad48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad4b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ad52:	a1 4c 2a 34 f0       	mov    0xf0342a4c,%eax
f010ad57:	48                   	dec    %eax
f010ad58:	a3 4c 2a 34 f0       	mov    %eax,0xf0342a4c

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010ad5d:	a0 d4 f5 3a f0       	mov    0xf03af5d4,%al
f010ad62:	0f b6 c0             	movzbl %al,%eax
f010ad65:	83 ec 0c             	sub    $0xc,%esp
f010ad68:	50                   	push   %eax
f010ad69:	e8 4c c3 ff ff       	call   f01070ba <kclock_set_quantum>
f010ad6e:	83 c4 10             	add    $0x10,%esp
f010ad71:	eb 12                	jmp    f010ad85 <fos_scheduler+0x123>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f010ad73:	a1 f8 f5 3a f0       	mov    0xf03af5f8,%eax
f010ad78:	83 f8 01             	cmp    $0x1,%eax
f010ad7b:	75 08                	jne    f010ad85 <fos_scheduler+0x123>
	{
		next_env = fos_scheduler_MLFQ();
f010ad7d:	e8 39 fc ff ff       	call   f010a9bb <fos_scheduler_MLFQ>
f010ad82:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010ad85:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010ad8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f010ad8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad90:	a3 50 21 34 f0       	mov    %eax,0xf0342150
	chk2(next_env) ;
f010ad95:	83 ec 0c             	sub    $0xc,%esp
f010ad98:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad9b:	e8 55 14 01 00       	call   f011c1f5 <chk2>
f010ada0:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f010ada3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ada6:	a3 50 21 34 f0       	mov    %eax,0xf0342150

	//sched_print_all();

	if(next_env != NULL)
f010adab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010adaf:	74 0b                	je     f010adbc <fos_scheduler+0x15a>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f010adb1:	83 ec 0c             	sub    $0xc,%esp
f010adb4:	ff 75 f4             	pushl  -0xc(%ebp)
f010adb7:	e8 3a b8 ff ff       	call   f01065f6 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f010adbc:	c7 05 50 21 34 f0 00 	movl   $0x0,0xf0342150
f010adc3:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010adc6:	a1 78 da 3c f0       	mov    0xf03cda78,%eax
f010adcb:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010adce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010add1:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f010add4:	c7 05 00 f6 3a f0 00 	movl   $0x0,0xf03af600
f010addb:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f010adde:	83 ec 0c             	sub    $0xc,%esp
f010ade1:	6a 00                	push   $0x0
f010ade3:	e8 29 6a ff ff       	call   f0101811 <run_command_prompt>
f010ade8:	83 c4 10             	add    $0x10,%esp
f010adeb:	eb f1                	jmp    f010adde <fos_scheduler+0x17c>

f010aded <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f010aded:	55                   	push   %ebp
f010adee:	89 e5                	mov    %esp,%ebp
f010adf0:	83 ec 18             	sub    $0x18,%esp
f010adf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf6:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f010adf9:	c7 05 00 f6 3a f0 00 	movl   $0x0,0xf03af600
f010ae00:	00 00 00 
	scheduler_method = SCH_RR;
f010ae03:	c7 05 f8 f5 3a f0 00 	movl   $0x0,0xf03af5f8
f010ae0a:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010ae0d:	c6 05 08 f6 3a f0 01 	movb   $0x1,0xf03af608
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f010ae14:	8a 45 f4             	mov    -0xc(%ebp),%al
f010ae17:	a2 d4 f5 3a f0       	mov    %al,0xf03af5d4
	kclock_set_quantum(quantums[0]);
f010ae1c:	a0 d4 f5 3a f0       	mov    0xf03af5d4,%al
f010ae21:	0f b6 c0             	movzbl %al,%eax
f010ae24:	83 ec 0c             	sub    $0xc,%esp
f010ae27:	50                   	push   %eax
f010ae28:	e8 8d c2 ff ff       	call   f01070ba <kclock_set_quantum>
f010ae2d:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f010ae30:	83 ec 0c             	sub    $0xc,%esp
f010ae33:	68 40 2a 34 f0       	push   $0xf0342a40
f010ae38:	e8 7f fa ff ff       	call   f010a8bc <init_queue>
f010ae3d:	83 c4 10             	add    $0x10,%esp
}
f010ae40:	90                   	nop
f010ae41:	c9                   	leave  
f010ae42:	c3                   	ret    

f010ae43 <sched_init>:



void sched_init()
{
f010ae43:	55                   	push   %ebp
f010ae44:	89 e5                	mov    %esp,%ebp
f010ae46:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f010ae49:	c7 05 f4 89 3a f0 00 	movl   $0x0,0xf03a89f4
f010ae50:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010ae53:	83 ec 0c             	sub    $0xc,%esp
f010ae56:	6a 0a                	push   $0xa
f010ae58:	e8 90 ff ff ff       	call   f010aded <sched_init_RR>
f010ae5d:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f010ae60:	83 ec 0c             	sub    $0xc,%esp
f010ae63:	68 e8 f5 3a f0       	push   $0xf03af5e8
f010ae68:	e8 4f fa ff ff       	call   f010a8bc <init_queue>
f010ae6d:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f010ae70:	83 ec 0c             	sub    $0xc,%esp
f010ae73:	68 e4 89 3a f0       	push   $0xf03a89e4
f010ae78:	e8 3f fa ff ff       	call   f010a8bc <init_queue>
f010ae7d:	83 c4 10             	add    $0x10,%esp
}
f010ae80:	90                   	nop
f010ae81:	c9                   	leave  
f010ae82:	c3                   	ret    

f010ae83 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010ae83:	55                   	push   %ebp
f010ae84:	89 e5                	mov    %esp,%ebp
f010ae86:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f010ae89:	83 ec 0c             	sub    $0xc,%esp
f010ae8c:	68 40 2a 34 f0       	push   $0xf0342a40
f010ae91:	e8 a9 3b 00 00       	call   f010ea3f <kfree>
f010ae96:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f010ae99:	83 ec 0c             	sub    $0xc,%esp
f010ae9c:	68 d4 f5 3a f0       	push   $0xf03af5d4
f010aea1:	e8 99 3b 00 00       	call   f010ea3f <kfree>
f010aea6:	83 c4 10             	add    $0x10,%esp
}
f010aea9:	90                   	nop
f010aeaa:	c9                   	leave  
f010aeab:	c3                   	ret    

f010aeac <sched_insert_new>:



void sched_insert_new(struct Env* env)
{
f010aeac:	55                   	push   %ebp
f010aead:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f010aeaf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aeb3:	74 52                	je     f010af07 <sched_insert_new+0x5b>
	{
		env->env_status = ENV_NEW ;
f010aeb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb8:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		LIST_INSERT_HEAD(&env_new_queue, env);
f010aebf:	8b 15 e8 f5 3a f0    	mov    0xf03af5e8,%edx
f010aec5:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec8:	89 50 44             	mov    %edx,0x44(%eax)
f010aecb:	8b 45 08             	mov    0x8(%ebp),%eax
f010aece:	8b 40 44             	mov    0x44(%eax),%eax
f010aed1:	85 c0                	test   %eax,%eax
f010aed3:	74 0d                	je     f010aee2 <sched_insert_new+0x36>
f010aed5:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010aeda:	8b 55 08             	mov    0x8(%ebp),%edx
f010aedd:	89 50 48             	mov    %edx,0x48(%eax)
f010aee0:	eb 08                	jmp    f010aeea <sched_insert_new+0x3e>
f010aee2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aee5:	a3 ec f5 3a f0       	mov    %eax,0xf03af5ec
f010aeea:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeed:	a3 e8 f5 3a f0       	mov    %eax,0xf03af5e8
f010aef2:	8b 45 08             	mov    0x8(%ebp),%eax
f010aef5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aefc:	a1 f4 f5 3a f0       	mov    0xf03af5f4,%eax
f010af01:	40                   	inc    %eax
f010af02:	a3 f4 f5 3a f0       	mov    %eax,0xf03af5f4
	}
}
f010af07:	90                   	nop
f010af08:	5d                   	pop    %ebp
f010af09:	c3                   	ret    

f010af0a <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f010af0a:	55                   	push   %ebp
f010af0b:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f010af0d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010af11:	74 75                	je     f010af88 <sched_remove_new+0x7e>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f010af13:	8b 45 08             	mov    0x8(%ebp),%eax
f010af16:	8b 40 44             	mov    0x44(%eax),%eax
f010af19:	85 c0                	test   %eax,%eax
f010af1b:	74 11                	je     f010af2e <sched_remove_new+0x24>
f010af1d:	8b 45 08             	mov    0x8(%ebp),%eax
f010af20:	8b 40 44             	mov    0x44(%eax),%eax
f010af23:	8b 55 08             	mov    0x8(%ebp),%edx
f010af26:	8b 52 48             	mov    0x48(%edx),%edx
f010af29:	89 50 48             	mov    %edx,0x48(%eax)
f010af2c:	eb 0b                	jmp    f010af39 <sched_remove_new+0x2f>
f010af2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010af31:	8b 40 48             	mov    0x48(%eax),%eax
f010af34:	a3 ec f5 3a f0       	mov    %eax,0xf03af5ec
f010af39:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3c:	8b 40 48             	mov    0x48(%eax),%eax
f010af3f:	85 c0                	test   %eax,%eax
f010af41:	74 11                	je     f010af54 <sched_remove_new+0x4a>
f010af43:	8b 45 08             	mov    0x8(%ebp),%eax
f010af46:	8b 40 48             	mov    0x48(%eax),%eax
f010af49:	8b 55 08             	mov    0x8(%ebp),%edx
f010af4c:	8b 52 44             	mov    0x44(%edx),%edx
f010af4f:	89 50 44             	mov    %edx,0x44(%eax)
f010af52:	eb 0b                	jmp    f010af5f <sched_remove_new+0x55>
f010af54:	8b 45 08             	mov    0x8(%ebp),%eax
f010af57:	8b 40 44             	mov    0x44(%eax),%eax
f010af5a:	a3 e8 f5 3a f0       	mov    %eax,0xf03af5e8
f010af5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af62:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010af69:	8b 45 08             	mov    0x8(%ebp),%eax
f010af6c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010af73:	a1 f4 f5 3a f0       	mov    0xf03af5f4,%eax
f010af78:	48                   	dec    %eax
f010af79:	a3 f4 f5 3a f0       	mov    %eax,0xf03af5f4
		env->env_status = ENV_UNKNOWN;
f010af7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010af81:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f010af88:	90                   	nop
f010af89:	5d                   	pop    %ebp
f010af8a:	c3                   	ret    

f010af8b <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f010af8b:	55                   	push   %ebp
f010af8c:	89 e5                	mov    %esp,%ebp
f010af8e:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010af91:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010af95:	74 69                	je     f010b000 <sched_insert_exit+0x75>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f010af97:	e8 dc da ff ff       	call   f0108a78 <isBufferingEnabled>
f010af9c:	85 c0                	test   %eax,%eax
f010af9e:	74 0e                	je     f010afae <sched_insert_exit+0x23>
f010afa0:	83 ec 0c             	sub    $0xc,%esp
f010afa3:	ff 75 08             	pushl  0x8(%ebp)
f010afa6:	e8 08 be ff ff       	call   f0106db3 <cleanup_buffers>
f010afab:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f010afae:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb1:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		LIST_INSERT_HEAD(&env_exit_queue, env);
f010afb8:	8b 15 e4 89 3a f0    	mov    0xf03a89e4,%edx
f010afbe:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc1:	89 50 44             	mov    %edx,0x44(%eax)
f010afc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afc7:	8b 40 44             	mov    0x44(%eax),%eax
f010afca:	85 c0                	test   %eax,%eax
f010afcc:	74 0d                	je     f010afdb <sched_insert_exit+0x50>
f010afce:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f010afd3:	8b 55 08             	mov    0x8(%ebp),%edx
f010afd6:	89 50 48             	mov    %edx,0x48(%eax)
f010afd9:	eb 08                	jmp    f010afe3 <sched_insert_exit+0x58>
f010afdb:	8b 45 08             	mov    0x8(%ebp),%eax
f010afde:	a3 e8 89 3a f0       	mov    %eax,0xf03a89e8
f010afe3:	8b 45 08             	mov    0x8(%ebp),%eax
f010afe6:	a3 e4 89 3a f0       	mov    %eax,0xf03a89e4
f010afeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010afee:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010aff5:	a1 f0 89 3a f0       	mov    0xf03a89f0,%eax
f010affa:	40                   	inc    %eax
f010affb:	a3 f0 89 3a f0       	mov    %eax,0xf03a89f0
	}
}
f010b000:	90                   	nop
f010b001:	c9                   	leave  
f010b002:	c3                   	ret    

f010b003 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f010b003:	55                   	push   %ebp
f010b004:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f010b006:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b00a:	74 75                	je     f010b081 <sched_remove_exit+0x7e>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f010b00c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b00f:	8b 40 44             	mov    0x44(%eax),%eax
f010b012:	85 c0                	test   %eax,%eax
f010b014:	74 11                	je     f010b027 <sched_remove_exit+0x24>
f010b016:	8b 45 08             	mov    0x8(%ebp),%eax
f010b019:	8b 40 44             	mov    0x44(%eax),%eax
f010b01c:	8b 55 08             	mov    0x8(%ebp),%edx
f010b01f:	8b 52 48             	mov    0x48(%edx),%edx
f010b022:	89 50 48             	mov    %edx,0x48(%eax)
f010b025:	eb 0b                	jmp    f010b032 <sched_remove_exit+0x2f>
f010b027:	8b 45 08             	mov    0x8(%ebp),%eax
f010b02a:	8b 40 48             	mov    0x48(%eax),%eax
f010b02d:	a3 e8 89 3a f0       	mov    %eax,0xf03a89e8
f010b032:	8b 45 08             	mov    0x8(%ebp),%eax
f010b035:	8b 40 48             	mov    0x48(%eax),%eax
f010b038:	85 c0                	test   %eax,%eax
f010b03a:	74 11                	je     f010b04d <sched_remove_exit+0x4a>
f010b03c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03f:	8b 40 48             	mov    0x48(%eax),%eax
f010b042:	8b 55 08             	mov    0x8(%ebp),%edx
f010b045:	8b 52 44             	mov    0x44(%edx),%edx
f010b048:	89 50 44             	mov    %edx,0x44(%eax)
f010b04b:	eb 0b                	jmp    f010b058 <sched_remove_exit+0x55>
f010b04d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b050:	8b 40 44             	mov    0x44(%eax),%eax
f010b053:	a3 e4 89 3a f0       	mov    %eax,0xf03a89e4
f010b058:	8b 45 08             	mov    0x8(%ebp),%eax
f010b05b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010b062:	8b 45 08             	mov    0x8(%ebp),%eax
f010b065:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b06c:	a1 f0 89 3a f0       	mov    0xf03a89f0,%eax
f010b071:	48                   	dec    %eax
f010b072:	a3 f0 89 3a f0       	mov    %eax,0xf03a89f0
		env->env_status = ENV_UNKNOWN;
f010b077:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f010b081:	90                   	nop
f010b082:	5d                   	pop    %ebp
f010b083:	c3                   	ret    

f010b084 <sched_print_all>:

void sched_print_all()
{
f010b084:	55                   	push   %ebp
f010b085:	89 e5                	mov    %esp,%ebp
f010b087:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f010b08a:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010b08f:	85 c0                	test   %eax,%eax
f010b091:	74 6c                	je     f010b0ff <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f010b093:	83 ec 0c             	sub    $0xc,%esp
f010b096:	68 90 f5 11 f0       	push   $0xf011f590
f010b09b:	e8 96 c3 ff ff       	call   f0107436 <cprintf>
f010b0a0:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f010b0a3:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010b0a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b0ab:	eb 29                	jmp    f010b0d6 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f010b0ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0b0:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010b0b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0b9:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b0bc:	83 ec 04             	sub    $0x4,%esp
f010b0bf:	52                   	push   %edx
f010b0c0:	50                   	push   %eax
f010b0c1:	68 b2 f5 11 f0       	push   $0xf011f5b2
f010b0c6:	e8 6b c3 ff ff       	call   f0107436 <cprintf>
f010b0cb:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f010b0ce:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b0d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b0d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b0da:	74 08                	je     f010b0e4 <sched_print_all+0x60>
f010b0dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0df:	8b 40 44             	mov    0x44(%eax),%eax
f010b0e2:	eb 05                	jmp    f010b0e9 <sched_print_all+0x65>
f010b0e4:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0e9:	a3 f0 f5 3a f0       	mov    %eax,0xf03af5f0
f010b0ee:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b0f3:	85 c0                	test   %eax,%eax
f010b0f5:	75 b6                	jne    f010b0ad <sched_print_all+0x29>
f010b0f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b0fb:	75 b0                	jne    f010b0ad <sched_print_all+0x29>
f010b0fd:	eb 10                	jmp    f010b10f <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f010b0ff:	83 ec 0c             	sub    $0xc,%esp
f010b102:	68 bc f5 11 f0       	push   $0xf011f5bc
f010b107:	e8 2a c3 ff ff       	call   f0107436 <cprintf>
f010b10c:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f010b10f:	83 ec 0c             	sub    $0xc,%esp
f010b112:	68 d8 f5 11 f0       	push   $0xf011f5d8
f010b117:	e8 1a c3 ff ff       	call   f0107436 <cprintf>
f010b11c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010b11f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b126:	e9 cb 00 00 00       	jmp    f010b1f6 <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010b12b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b12e:	c1 e0 04             	shl    $0x4,%eax
f010b131:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b136:	8b 00                	mov    (%eax),%eax
f010b138:	85 c0                	test   %eax,%eax
f010b13a:	0f 84 90 00 00 00    	je     f010b1d0 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f010b140:	83 ec 08             	sub    $0x8,%esp
f010b143:	ff 75 f0             	pushl  -0x10(%ebp)
f010b146:	68 0c f6 11 f0       	push   $0xf011f60c
f010b14b:	e8 e6 c2 ff ff       	call   f0107436 <cprintf>
f010b150:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010b153:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b156:	c1 e0 04             	shl    $0x4,%eax
f010b159:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b15e:	8b 00                	mov    (%eax),%eax
f010b160:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b163:	eb 31                	jmp    f010b196 <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f010b165:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b168:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010b16e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b171:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b174:	83 ec 04             	sub    $0x4,%esp
f010b177:	52                   	push   %edx
f010b178:	50                   	push   %eax
f010b179:	68 b2 f5 11 f0       	push   $0xf011f5b2
f010b17e:	e8 b3 c2 ff ff       	call   f0107436 <cprintf>
f010b183:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010b186:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b189:	c1 e0 04             	shl    $0x4,%eax
f010b18c:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010b191:	8b 00                	mov    (%eax),%eax
f010b193:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b196:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b19a:	74 08                	je     f010b1a4 <sched_print_all+0x120>
f010b19c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b19f:	8b 40 44             	mov    0x44(%eax),%eax
f010b1a2:	eb 05                	jmp    f010b1a9 <sched_print_all+0x125>
f010b1a4:	b8 00 00 00 00       	mov    $0x0,%eax
f010b1a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b1ac:	c1 e2 04             	shl    $0x4,%edx
f010b1af:	81 c2 48 2a 34 f0    	add    $0xf0342a48,%edx
f010b1b5:	89 02                	mov    %eax,(%edx)
f010b1b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b1ba:	c1 e0 04             	shl    $0x4,%eax
f010b1bd:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010b1c2:	8b 00                	mov    (%eax),%eax
f010b1c4:	85 c0                	test   %eax,%eax
f010b1c6:	75 9d                	jne    f010b165 <sched_print_all+0xe1>
f010b1c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b1cc:	75 97                	jne    f010b165 <sched_print_all+0xe1>
f010b1ce:	eb 13                	jmp    f010b1e3 <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f010b1d0:	83 ec 08             	sub    $0x8,%esp
f010b1d3:	ff 75 f0             	pushl  -0x10(%ebp)
f010b1d6:	68 34 f6 11 f0       	push   $0xf011f634
f010b1db:	e8 56 c2 ff ff       	call   f0107436 <cprintf>
f010b1e0:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010b1e3:	83 ec 0c             	sub    $0xc,%esp
f010b1e6:	68 d8 f5 11 f0       	push   $0xf011f5d8
f010b1eb:	e8 46 c2 ff ff       	call   f0107436 <cprintf>
f010b1f0:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010b1f3:	ff 45 f0             	incl   -0x10(%ebp)
f010b1f6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010b1fb:	0f b6 c0             	movzbl %al,%eax
f010b1fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010b201:	0f 8f 24 ff ff ff    	jg     f010b12b <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f010b207:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f010b20c:	85 c0                	test   %eax,%eax
f010b20e:	74 6c                	je     f010b27c <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f010b210:	83 ec 0c             	sub    $0xc,%esp
f010b213:	68 58 f6 11 f0       	push   $0xf011f658
f010b218:	e8 19 c2 ff ff       	call   f0107436 <cprintf>
f010b21d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010b220:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f010b225:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b228:	eb 29                	jmp    f010b253 <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f010b22a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b22d:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010b233:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b236:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b239:	83 ec 04             	sub    $0x4,%esp
f010b23c:	52                   	push   %edx
f010b23d:	50                   	push   %eax
f010b23e:	68 b2 f5 11 f0       	push   $0xf011f5b2
f010b243:	e8 ee c1 ff ff       	call   f0107436 <cprintf>
f010b248:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010b24b:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f010b250:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b253:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b257:	74 08                	je     f010b261 <sched_print_all+0x1dd>
f010b259:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b25c:	8b 40 44             	mov    0x44(%eax),%eax
f010b25f:	eb 05                	jmp    f010b266 <sched_print_all+0x1e2>
f010b261:	b8 00 00 00 00       	mov    $0x0,%eax
f010b266:	a3 ec 89 3a f0       	mov    %eax,0xf03a89ec
f010b26b:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f010b270:	85 c0                	test   %eax,%eax
f010b272:	75 b6                	jne    f010b22a <sched_print_all+0x1a6>
f010b274:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b278:	75 b0                	jne    f010b22a <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f010b27a:	eb 10                	jmp    f010b28c <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010b27c:	83 ec 0c             	sub    $0xc,%esp
f010b27f:	68 7a f6 11 f0       	push   $0xf011f67a
f010b284:	e8 ad c1 ff ff       	call   f0107436 <cprintf>
f010b289:	83 c4 10             	add    $0x10,%esp
	}
}
f010b28c:	90                   	nop
f010b28d:	c9                   	leave  
f010b28e:	c3                   	ret    

f010b28f <sched_run_all>:

void sched_run_all()
{
f010b28f:	55                   	push   %ebp
f010b290:	89 e5                	mov    %esp,%ebp
f010b292:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010b295:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010b29c:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010b2a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b2a4:	eb 65                	jmp    f010b30b <sched_run_all+0x7c>
	{
		sched_remove_new(ptr_env);
f010b2a6:	ff 75 f4             	pushl  -0xc(%ebp)
f010b2a9:	e8 5c fc ff ff       	call   f010af0a <sched_remove_new>
f010b2ae:	83 c4 04             	add    $0x4,%esp
		ptr_env->env_status = ENV_READY ;
f010b2b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2b4:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		LIST_INSERT_HEAD(&(env_ready_queues[0]), ptr_env);
f010b2bb:	8b 15 40 2a 34 f0    	mov    0xf0342a40,%edx
f010b2c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2c4:	89 50 44             	mov    %edx,0x44(%eax)
f010b2c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2ca:	8b 40 44             	mov    0x44(%eax),%eax
f010b2cd:	85 c0                	test   %eax,%eax
f010b2cf:	74 0d                	je     f010b2de <sched_run_all+0x4f>
f010b2d1:	a1 40 2a 34 f0       	mov    0xf0342a40,%eax
f010b2d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b2d9:	89 50 48             	mov    %edx,0x48(%eax)
f010b2dc:	eb 08                	jmp    f010b2e6 <sched_run_all+0x57>
f010b2de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2e1:	a3 44 2a 34 f0       	mov    %eax,0xf0342a44
f010b2e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2e9:	a3 40 2a 34 f0       	mov    %eax,0xf0342a40
f010b2ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b2f1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b2f8:	a1 4c 2a 34 f0       	mov    0xf0342a4c,%eax
f010b2fd:	40                   	inc    %eax
f010b2fe:	a3 4c 2a 34 f0       	mov    %eax,0xf0342a4c
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010b303:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b308:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b30b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b30f:	74 08                	je     f010b319 <sched_run_all+0x8a>
f010b311:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b314:	8b 40 44             	mov    0x44(%eax),%eax
f010b317:	eb 05                	jmp    f010b31e <sched_run_all+0x8f>
f010b319:	b8 00 00 00 00       	mov    $0x0,%eax
f010b31e:	a3 f0 f5 3a f0       	mov    %eax,0xf03af5f0
f010b323:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b328:	85 c0                	test   %eax,%eax
f010b32a:	0f 85 76 ff ff ff    	jne    f010b2a6 <sched_run_all+0x17>
f010b330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b334:	0f 85 6c ff ff ff    	jne    f010b2a6 <sched_run_all+0x17>
		sched_remove_new(ptr_env);
		ptr_env->env_status = ENV_READY ;
		LIST_INSERT_HEAD(&(env_ready_queues[0]), ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f010b33a:	a1 00 f6 3a f0       	mov    0xf03af600,%eax
f010b33f:	85 c0                	test   %eax,%eax
f010b341:	75 05                	jne    f010b348 <sched_run_all+0xb9>
		fos_scheduler();
f010b343:	e8 1a f9 ff ff       	call   f010ac62 <fos_scheduler>
}
f010b348:	90                   	nop
f010b349:	c9                   	leave  
f010b34a:	c3                   	ret    

f010b34b <sched_kill_all>:

void sched_kill_all()
{
f010b34b:	55                   	push   %ebp
f010b34c:	89 e5                	mov    %esp,%ebp
f010b34e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f010b351:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010b356:	85 c0                	test   %eax,%eax
f010b358:	0f 84 98 00 00 00    	je     f010b3f6 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f010b35e:	83 ec 0c             	sub    $0xc,%esp
f010b361:	68 98 f6 11 f0       	push   $0xf011f698
f010b366:	e8 cb c0 ff ff       	call   f0107436 <cprintf>
f010b36b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f010b36e:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010b373:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b376:	eb 55                	jmp    f010b3cd <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010b378:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b37b:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010b381:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b384:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b387:	83 ec 04             	sub    $0x4,%esp
f010b38a:	52                   	push   %edx
f010b38b:	50                   	push   %eax
f010b38c:	68 c4 f6 11 f0       	push   $0xf011f6c4
f010b391:	e8 a0 c0 ff ff       	call   f0107436 <cprintf>
f010b396:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f010b399:	83 ec 0c             	sub    $0xc,%esp
f010b39c:	ff 75 f4             	pushl  -0xc(%ebp)
f010b39f:	e8 66 fb ff ff       	call   f010af0a <sched_remove_new>
f010b3a4:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f010b3a7:	83 ec 0c             	sub    $0xc,%esp
f010b3aa:	ff 75 f4             	pushl  -0xc(%ebp)
f010b3ad:	e8 b5 b2 ff ff       	call   f0106667 <start_env_free>
f010b3b2:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010b3b5:	83 ec 0c             	sub    $0xc,%esp
f010b3b8:	68 d7 f6 11 f0       	push   $0xf011f6d7
f010b3bd:	e8 74 c0 ff ff       	call   f0107436 <cprintf>
f010b3c2:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f010b3c5:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b3ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b3cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b3d1:	74 08                	je     f010b3db <sched_kill_all+0x90>
f010b3d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3d6:	8b 40 44             	mov    0x44(%eax),%eax
f010b3d9:	eb 05                	jmp    f010b3e0 <sched_kill_all+0x95>
f010b3db:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3e0:	a3 f0 f5 3a f0       	mov    %eax,0xf03af5f0
f010b3e5:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b3ea:	85 c0                	test   %eax,%eax
f010b3ec:	75 8a                	jne    f010b378 <sched_kill_all+0x2d>
f010b3ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b3f2:	75 84                	jne    f010b378 <sched_kill_all+0x2d>
f010b3f4:	eb 10                	jmp    f010b406 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f010b3f6:	83 ec 0c             	sub    $0xc,%esp
f010b3f9:	68 dd f6 11 f0       	push   $0xf011f6dd
f010b3fe:	e8 33 c0 ff ff       	call   f0107436 <cprintf>
f010b403:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f010b406:	83 ec 0c             	sub    $0xc,%esp
f010b409:	68 d8 f5 11 f0       	push   $0xf011f5d8
f010b40e:	e8 23 c0 ff ff       	call   f0107436 <cprintf>
f010b413:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010b416:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b41d:	e9 83 01 00 00       	jmp    f010b5a5 <sched_kill_all+0x25a>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010b422:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b425:	c1 e0 04             	shl    $0x4,%eax
f010b428:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b42d:	8b 00                	mov    (%eax),%eax
f010b42f:	85 c0                	test   %eax,%eax
f010b431:	0f 84 48 01 00 00    	je     f010b57f <sched_kill_all+0x234>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f010b437:	83 ec 08             	sub    $0x8,%esp
f010b43a:	ff 75 f0             	pushl  -0x10(%ebp)
f010b43d:	68 f8 f6 11 f0       	push   $0xf011f6f8
f010b442:	e8 ef bf ff ff       	call   f0107436 <cprintf>
f010b447:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010b44a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b44d:	c1 e0 04             	shl    $0x4,%eax
f010b450:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b455:	8b 00                	mov    (%eax),%eax
f010b457:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b45a:	e9 de 00 00 00       	jmp    f010b53d <sched_kill_all+0x1f2>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010b45f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b462:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010b468:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b46b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b46e:	83 ec 04             	sub    $0x4,%esp
f010b471:	52                   	push   %edx
f010b472:	50                   	push   %eax
f010b473:	68 c4 f6 11 f0       	push   $0xf011f6c4
f010b478:	e8 b9 bf ff ff       	call   f0107436 <cprintf>
f010b47d:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010b480:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b483:	8b 40 44             	mov    0x44(%eax),%eax
f010b486:	85 c0                	test   %eax,%eax
f010b488:	74 11                	je     f010b49b <sched_kill_all+0x150>
f010b48a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b48d:	8b 40 44             	mov    0x44(%eax),%eax
f010b490:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b493:	8b 52 48             	mov    0x48(%edx),%edx
f010b496:	89 50 48             	mov    %edx,0x48(%eax)
f010b499:	eb 14                	jmp    f010b4af <sched_kill_all+0x164>
f010b49b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b49e:	8b 40 48             	mov    0x48(%eax),%eax
f010b4a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b4a4:	c1 e2 04             	shl    $0x4,%edx
f010b4a7:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010b4ad:	89 02                	mov    %eax,(%edx)
f010b4af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4b2:	8b 40 48             	mov    0x48(%eax),%eax
f010b4b5:	85 c0                	test   %eax,%eax
f010b4b7:	74 11                	je     f010b4ca <sched_kill_all+0x17f>
f010b4b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4bc:	8b 40 48             	mov    0x48(%eax),%eax
f010b4bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4c2:	8b 52 44             	mov    0x44(%edx),%edx
f010b4c5:	89 50 44             	mov    %edx,0x44(%eax)
f010b4c8:	eb 14                	jmp    f010b4de <sched_kill_all+0x193>
f010b4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4cd:	8b 40 44             	mov    0x44(%eax),%eax
f010b4d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b4d3:	c1 e2 04             	shl    $0x4,%edx
f010b4d6:	81 c2 40 2a 34 f0    	add    $0xf0342a40,%edx
f010b4dc:	89 02                	mov    %eax,(%edx)
f010b4de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4e1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010b4e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4eb:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b4f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b4f5:	c1 e0 04             	shl    $0x4,%eax
f010b4f8:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010b4fd:	8b 00                	mov    (%eax),%eax
f010b4ff:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b502:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b505:	c1 e0 04             	shl    $0x4,%eax
f010b508:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010b50d:	89 10                	mov    %edx,(%eax)
				start_env_free(ptr_env);
f010b50f:	83 ec 0c             	sub    $0xc,%esp
f010b512:	ff 75 f4             	pushl  -0xc(%ebp)
f010b515:	e8 4d b1 ff ff       	call   f0106667 <start_env_free>
f010b51a:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010b51d:	83 ec 0c             	sub    $0xc,%esp
f010b520:	68 d7 f6 11 f0       	push   $0xf011f6d7
f010b525:	e8 0c bf ff ff       	call   f0107436 <cprintf>
f010b52a:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010b52d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b530:	c1 e0 04             	shl    $0x4,%eax
f010b533:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010b538:	8b 00                	mov    (%eax),%eax
f010b53a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b53d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b541:	74 08                	je     f010b54b <sched_kill_all+0x200>
f010b543:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b546:	8b 40 44             	mov    0x44(%eax),%eax
f010b549:	eb 05                	jmp    f010b550 <sched_kill_all+0x205>
f010b54b:	b8 00 00 00 00       	mov    $0x0,%eax
f010b550:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b553:	c1 e2 04             	shl    $0x4,%edx
f010b556:	81 c2 48 2a 34 f0    	add    $0xf0342a48,%edx
f010b55c:	89 02                	mov    %eax,(%edx)
f010b55e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b561:	c1 e0 04             	shl    $0x4,%eax
f010b564:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010b569:	8b 00                	mov    (%eax),%eax
f010b56b:	85 c0                	test   %eax,%eax
f010b56d:	0f 85 ec fe ff ff    	jne    f010b45f <sched_kill_all+0x114>
f010b573:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b577:	0f 85 e2 fe ff ff    	jne    f010b45f <sched_kill_all+0x114>
f010b57d:	eb 13                	jmp    f010b592 <sched_kill_all+0x247>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f010b57f:	83 ec 08             	sub    $0x8,%esp
f010b582:	ff 75 f0             	pushl  -0x10(%ebp)
f010b585:	68 34 f6 11 f0       	push   $0xf011f634
f010b58a:	e8 a7 be ff ff       	call   f0107436 <cprintf>
f010b58f:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010b592:	83 ec 0c             	sub    $0xc,%esp
f010b595:	68 d8 f5 11 f0       	push   $0xf011f5d8
f010b59a:	e8 97 be ff ff       	call   f0107436 <cprintf>
f010b59f:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010b5a2:	ff 45 f0             	incl   -0x10(%ebp)
f010b5a5:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010b5aa:	0f b6 c0             	movzbl %al,%eax
f010b5ad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010b5b0:	0f 8f 6c fe ff ff    	jg     f010b422 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f010b5b6:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f010b5bb:	85 c0                	test   %eax,%eax
f010b5bd:	0f 84 98 00 00 00    	je     f010b65b <sched_kill_all+0x310>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f010b5c3:	83 ec 0c             	sub    $0xc,%esp
f010b5c6:	68 2c f7 11 f0       	push   $0xf011f72c
f010b5cb:	e8 66 be ff ff       	call   f0107436 <cprintf>
f010b5d0:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010b5d3:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f010b5d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b5db:	eb 55                	jmp    f010b632 <sched_kill_all+0x2e7>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010b5dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5e0:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010b5e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5e9:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b5ec:	83 ec 04             	sub    $0x4,%esp
f010b5ef:	52                   	push   %edx
f010b5f0:	50                   	push   %eax
f010b5f1:	68 c4 f6 11 f0       	push   $0xf011f6c4
f010b5f6:	e8 3b be ff ff       	call   f0107436 <cprintf>
f010b5fb:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f010b5fe:	83 ec 0c             	sub    $0xc,%esp
f010b601:	ff 75 f4             	pushl  -0xc(%ebp)
f010b604:	e8 fa f9 ff ff       	call   f010b003 <sched_remove_exit>
f010b609:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f010b60c:	83 ec 0c             	sub    $0xc,%esp
f010b60f:	ff 75 f4             	pushl  -0xc(%ebp)
f010b612:	e8 50 b0 ff ff       	call   f0106667 <start_env_free>
f010b617:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010b61a:	83 ec 0c             	sub    $0xc,%esp
f010b61d:	68 d7 f6 11 f0       	push   $0xf011f6d7
f010b622:	e8 0f be ff ff       	call   f0107436 <cprintf>
f010b627:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010b62a:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f010b62f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b632:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b636:	74 08                	je     f010b640 <sched_kill_all+0x2f5>
f010b638:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b63b:	8b 40 44             	mov    0x44(%eax),%eax
f010b63e:	eb 05                	jmp    f010b645 <sched_kill_all+0x2fa>
f010b640:	b8 00 00 00 00       	mov    $0x0,%eax
f010b645:	a3 ec 89 3a f0       	mov    %eax,0xf03a89ec
f010b64a:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f010b64f:	85 c0                	test   %eax,%eax
f010b651:	75 8a                	jne    f010b5dd <sched_kill_all+0x292>
f010b653:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b657:	75 84                	jne    f010b5dd <sched_kill_all+0x292>
f010b659:	eb 10                	jmp    f010b66b <sched_kill_all+0x320>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010b65b:	83 ec 0c             	sub    $0xc,%esp
f010b65e:	68 7a f6 11 f0       	push   $0xf011f67a
f010b663:	e8 ce bd ff ff       	call   f0107436 <cprintf>
f010b668:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f010b66b:	c7 05 50 21 34 f0 00 	movl   $0x0,0xf0342150
f010b672:	00 00 00 
	fos_scheduler();
f010b675:	e8 e8 f5 ff ff       	call   f010ac62 <fos_scheduler>

f010b67a <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010b67a:	55                   	push   %ebp
f010b67b:	89 e5                	mov    %esp,%ebp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f010b67d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b681:	74 0b                	je     f010b68e <sched_new_env+0x14>
	{
		sched_insert_new(e);
f010b683:	ff 75 08             	pushl  0x8(%ebp)
f010b686:	e8 21 f8 ff ff       	call   f010aeac <sched_insert_new>
f010b68b:	83 c4 04             	add    $0x4,%esp
	}
}
f010b68e:	90                   	nop
f010b68f:	c9                   	leave  
f010b690:	c3                   	ret    

f010b691 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010b691:	55                   	push   %ebp
f010b692:	89 e5                	mov    %esp,%ebp
f010b694:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010b697:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f010b69e:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010b6a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b6a6:	eb 7e                	jmp    f010b726 <sched_run_env+0x95>
	{
		if(ptr_env->env_id == envId)
f010b6a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6ab:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b6ae:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b6b1:	75 6b                	jne    f010b71e <sched_run_env+0x8d>
		{
			sched_remove_new(ptr_env);
f010b6b3:	ff 75 f4             	pushl  -0xc(%ebp)
f010b6b6:	e8 4f f8 ff ff       	call   f010af0a <sched_remove_new>
f010b6bb:	83 c4 04             	add    $0x4,%esp
			ptr_env->env_status = ENV_READY ;
f010b6be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6c1:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
			LIST_INSERT_HEAD(&(env_ready_queues[0]), ptr_env);
f010b6c8:	8b 15 40 2a 34 f0    	mov    0xf0342a40,%edx
f010b6ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6d1:	89 50 44             	mov    %edx,0x44(%eax)
f010b6d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6d7:	8b 40 44             	mov    0x44(%eax),%eax
f010b6da:	85 c0                	test   %eax,%eax
f010b6dc:	74 0d                	je     f010b6eb <sched_run_env+0x5a>
f010b6de:	a1 40 2a 34 f0       	mov    0xf0342a40,%eax
f010b6e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b6e6:	89 50 48             	mov    %edx,0x48(%eax)
f010b6e9:	eb 08                	jmp    f010b6f3 <sched_run_env+0x62>
f010b6eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6ee:	a3 44 2a 34 f0       	mov    %eax,0xf0342a44
f010b6f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6f6:	a3 40 2a 34 f0       	mov    %eax,0xf0342a40
f010b6fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6fe:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b705:	a1 4c 2a 34 f0       	mov    0xf0342a4c,%eax
f010b70a:	40                   	inc    %eax
f010b70b:	a3 4c 2a 34 f0       	mov    %eax,0xf0342a4c
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f010b710:	a1 00 f6 3a f0       	mov    0xf03af600,%eax
f010b715:	85 c0                	test   %eax,%eax
f010b717:	75 3e                	jne    f010b757 <sched_run_env+0xc6>
			{
				fos_scheduler();
f010b719:	e8 44 f5 ff ff       	call   f010ac62 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f010b71e:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b723:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b726:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b72a:	74 08                	je     f010b734 <sched_run_env+0xa3>
f010b72c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b72f:	8b 40 44             	mov    0x44(%eax),%eax
f010b732:	eb 05                	jmp    f010b739 <sched_run_env+0xa8>
f010b734:	b8 00 00 00 00       	mov    $0x0,%eax
f010b739:	a3 f0 f5 3a f0       	mov    %eax,0xf03af5f0
f010b73e:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b743:	85 c0                	test   %eax,%eax
f010b745:	0f 85 5d ff ff ff    	jne    f010b6a8 <sched_run_env+0x17>
f010b74b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b74f:	0f 85 53 ff ff ff    	jne    f010b6a8 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010b755:	eb 01                	jmp    f010b758 <sched_run_env+0xc7>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f010b757:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010b758:	90                   	nop
f010b759:	c9                   	leave  
f010b75a:	c3                   	ret    

f010b75b <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f010b75b:	55                   	push   %ebp
f010b75c:	89 e5                	mov    %esp,%ebp
f010b75e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010b761:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010b768:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010b76f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b773:	75 56                	jne    f010b7cb <sched_exit_env+0x70>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010b775:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010b77a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b77d:	eb 25                	jmp    f010b7a4 <sched_exit_env+0x49>
				{
			if(ptr_env->env_id == envId)
f010b77f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b782:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b785:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b788:	75 12                	jne    f010b79c <sched_exit_env+0x41>
			{
				sched_remove_new(ptr_env);
f010b78a:	ff 75 f4             	pushl  -0xc(%ebp)
f010b78d:	e8 78 f7 ff ff       	call   f010af0a <sched_remove_new>
f010b792:	83 c4 04             	add    $0x4,%esp
				found = 1;
f010b795:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010b79c:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b7a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b7a4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b7a8:	74 08                	je     f010b7b2 <sched_exit_env+0x57>
f010b7aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b7ad:	8b 40 44             	mov    0x44(%eax),%eax
f010b7b0:	eb 05                	jmp    f010b7b7 <sched_exit_env+0x5c>
f010b7b2:	b8 00 00 00 00       	mov    $0x0,%eax
f010b7b7:	a3 f0 f5 3a f0       	mov    %eax,0xf03af5f0
f010b7bc:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010b7c1:	85 c0                	test   %eax,%eax
f010b7c3:	75 ba                	jne    f010b77f <sched_exit_env+0x24>
f010b7c5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b7c9:	75 b4                	jne    f010b77f <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f010b7cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b7cf:	0f 85 51 01 00 00    	jne    f010b926 <sched_exit_env+0x1cb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010b7d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010b7dc:	e9 31 01 00 00       	jmp    f010b912 <sched_exit_env+0x1b7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010b7e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b7e4:	c1 e0 04             	shl    $0x4,%eax
f010b7e7:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b7ec:	8b 00                	mov    (%eax),%eax
f010b7ee:	85 c0                	test   %eax,%eax
f010b7f0:	0f 84 13 01 00 00    	je     f010b909 <sched_exit_env+0x1ae>
			{
				ptr_env=NULL;
f010b7f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010b7fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b800:	c1 e0 04             	shl    $0x4,%eax
f010b803:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b808:	8b 00                	mov    (%eax),%eax
f010b80a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b80d:	e9 b7 00 00 00       	jmp    f010b8c9 <sched_exit_env+0x16e>
				{
					if(ptr_env->env_id == envId)
f010b812:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b815:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b818:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b81b:	0f 85 98 00 00 00    	jne    f010b8b9 <sched_exit_env+0x15e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010b821:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b824:	8b 40 44             	mov    0x44(%eax),%eax
f010b827:	85 c0                	test   %eax,%eax
f010b829:	74 11                	je     f010b83c <sched_exit_env+0xe1>
f010b82b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b82e:	8b 40 44             	mov    0x44(%eax),%eax
f010b831:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b834:	8b 52 48             	mov    0x48(%edx),%edx
f010b837:	89 50 48             	mov    %edx,0x48(%eax)
f010b83a:	eb 14                	jmp    f010b850 <sched_exit_env+0xf5>
f010b83c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b83f:	8b 40 48             	mov    0x48(%eax),%eax
f010b842:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b845:	c1 e2 04             	shl    $0x4,%edx
f010b848:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010b84e:	89 02                	mov    %eax,(%edx)
f010b850:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b853:	8b 40 48             	mov    0x48(%eax),%eax
f010b856:	85 c0                	test   %eax,%eax
f010b858:	74 11                	je     f010b86b <sched_exit_env+0x110>
f010b85a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b85d:	8b 40 48             	mov    0x48(%eax),%eax
f010b860:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b863:	8b 52 44             	mov    0x44(%edx),%edx
f010b866:	89 50 44             	mov    %edx,0x44(%eax)
f010b869:	eb 14                	jmp    f010b87f <sched_exit_env+0x124>
f010b86b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b86e:	8b 40 44             	mov    0x44(%eax),%eax
f010b871:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b874:	c1 e2 04             	shl    $0x4,%edx
f010b877:	81 c2 40 2a 34 f0    	add    $0xf0342a40,%edx
f010b87d:	89 02                	mov    %eax,(%edx)
f010b87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b882:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010b889:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b88c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b893:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b896:	c1 e0 04             	shl    $0x4,%eax
f010b899:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010b89e:	8b 00                	mov    (%eax),%eax
f010b8a0:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b8a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b8a6:	c1 e0 04             	shl    $0x4,%eax
f010b8a9:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010b8ae:	89 10                	mov    %edx,(%eax)
						found = 1;
f010b8b0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010b8b7:	eb 50                	jmp    f010b909 <sched_exit_env+0x1ae>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010b8b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b8bc:	c1 e0 04             	shl    $0x4,%eax
f010b8bf:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010b8c4:	8b 00                	mov    (%eax),%eax
f010b8c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b8c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b8cd:	74 08                	je     f010b8d7 <sched_exit_env+0x17c>
f010b8cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b8d2:	8b 40 44             	mov    0x44(%eax),%eax
f010b8d5:	eb 05                	jmp    f010b8dc <sched_exit_env+0x181>
f010b8d7:	b8 00 00 00 00       	mov    $0x0,%eax
f010b8dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b8df:	c1 e2 04             	shl    $0x4,%edx
f010b8e2:	81 c2 48 2a 34 f0    	add    $0xf0342a48,%edx
f010b8e8:	89 02                	mov    %eax,(%edx)
f010b8ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b8ed:	c1 e0 04             	shl    $0x4,%eax
f010b8f0:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010b8f5:	8b 00                	mov    (%eax),%eax
f010b8f7:	85 c0                	test   %eax,%eax
f010b8f9:	0f 85 13 ff ff ff    	jne    f010b812 <sched_exit_env+0xb7>
f010b8ff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b903:	0f 85 09 ff ff ff    	jne    f010b812 <sched_exit_env+0xb7>
						found = 1;
						break;
					}
				}
			}
			if (found)
f010b909:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b90d:	75 16                	jne    f010b925 <sched_exit_env+0x1ca>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010b90f:	ff 45 ec             	incl   -0x14(%ebp)
f010b912:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010b917:	0f b6 c0             	movzbl %al,%eax
f010b91a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010b91d:	0f 8f be fe ff ff    	jg     f010b7e1 <sched_exit_env+0x86>
f010b923:	eb 01                	jmp    f010b926 <sched_exit_env+0x1cb>
						break;
					}
				}
			}
			if (found)
				break;
f010b925:	90                   	nop
		}
	}
	if (!found)
f010b926:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b92a:	75 1c                	jne    f010b948 <sched_exit_env+0x1ed>
	{
		if (curenv->env_id == envId)
f010b92c:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010b931:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b934:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b937:	75 0f                	jne    f010b948 <sched_exit_env+0x1ed>
		{
			ptr_env = curenv;
f010b939:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010b93e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f010b941:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f010b948:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b94c:	74 2a                	je     f010b978 <sched_exit_env+0x21d>
	{
		sched_insert_exit(ptr_env);
f010b94e:	83 ec 0c             	sub    $0xc,%esp
f010b951:	ff 75 f4             	pushl  -0xc(%ebp)
f010b954:	e8 32 f6 ff ff       	call   f010af8b <sched_insert_exit>
f010b959:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f010b95c:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010b961:	8b 40 4c             	mov    0x4c(%eax),%eax
f010b964:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b967:	75 0f                	jne    f010b978 <sched_exit_env+0x21d>
		{
			curenv = NULL;
f010b969:	c7 05 50 21 34 f0 00 	movl   $0x0,0xf0342150
f010b970:	00 00 00 
			fos_scheduler();
f010b973:	e8 ea f2 ff ff       	call   f010ac62 <fos_scheduler>
		}
	}
}
f010b978:	90                   	nop
f010b979:	c9                   	leave  
f010b97a:	c3                   	ret    

f010b97b <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f010b97b:	55                   	push   %ebp
f010b97c:	89 e5                	mov    %esp,%ebp
f010b97e:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010b981:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010b988:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b98f:	e9 21 01 00 00       	jmp    f010bab5 <sched_exit_all_ready_envs+0x13a>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010b994:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b997:	c1 e0 04             	shl    $0x4,%eax
f010b99a:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b99f:	8b 00                	mov    (%eax),%eax
f010b9a1:	85 c0                	test   %eax,%eax
f010b9a3:	0f 84 09 01 00 00    	je     f010bab2 <sched_exit_all_ready_envs+0x137>
		{
			ptr_env=NULL;
f010b9a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010b9b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b9b3:	c1 e0 04             	shl    $0x4,%eax
f010b9b6:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010b9bb:	8b 00                	mov    (%eax),%eax
f010b9bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b9c0:	e9 ad 00 00 00       	jmp    f010ba72 <sched_exit_all_ready_envs+0xf7>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010b9c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9c8:	8b 40 44             	mov    0x44(%eax),%eax
f010b9cb:	85 c0                	test   %eax,%eax
f010b9cd:	74 11                	je     f010b9e0 <sched_exit_all_ready_envs+0x65>
f010b9cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9d2:	8b 40 44             	mov    0x44(%eax),%eax
f010b9d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b9d8:	8b 52 48             	mov    0x48(%edx),%edx
f010b9db:	89 50 48             	mov    %edx,0x48(%eax)
f010b9de:	eb 14                	jmp    f010b9f4 <sched_exit_all_ready_envs+0x79>
f010b9e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9e3:	8b 40 48             	mov    0x48(%eax),%eax
f010b9e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b9e9:	c1 e2 04             	shl    $0x4,%edx
f010b9ec:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010b9f2:	89 02                	mov    %eax,(%edx)
f010b9f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9f7:	8b 40 48             	mov    0x48(%eax),%eax
f010b9fa:	85 c0                	test   %eax,%eax
f010b9fc:	74 11                	je     f010ba0f <sched_exit_all_ready_envs+0x94>
f010b9fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ba01:	8b 40 48             	mov    0x48(%eax),%eax
f010ba04:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ba07:	8b 52 44             	mov    0x44(%edx),%edx
f010ba0a:	89 50 44             	mov    %edx,0x44(%eax)
f010ba0d:	eb 14                	jmp    f010ba23 <sched_exit_all_ready_envs+0xa8>
f010ba0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ba12:	8b 40 44             	mov    0x44(%eax),%eax
f010ba15:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ba18:	c1 e2 04             	shl    $0x4,%edx
f010ba1b:	81 c2 40 2a 34 f0    	add    $0xf0342a40,%edx
f010ba21:	89 02                	mov    %eax,(%edx)
f010ba23:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ba26:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010ba2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ba30:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010ba37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba3a:	c1 e0 04             	shl    $0x4,%eax
f010ba3d:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010ba42:	8b 00                	mov    (%eax),%eax
f010ba44:	8d 50 ff             	lea    -0x1(%eax),%edx
f010ba47:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba4a:	c1 e0 04             	shl    $0x4,%eax
f010ba4d:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010ba52:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f010ba54:	83 ec 0c             	sub    $0xc,%esp
f010ba57:	ff 75 f4             	pushl  -0xc(%ebp)
f010ba5a:	e8 2c f5 ff ff       	call   f010af8b <sched_insert_exit>
f010ba5f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010ba62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba65:	c1 e0 04             	shl    $0x4,%eax
f010ba68:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010ba6d:	8b 00                	mov    (%eax),%eax
f010ba6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ba72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ba76:	74 08                	je     f010ba80 <sched_exit_all_ready_envs+0x105>
f010ba78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ba7b:	8b 40 44             	mov    0x44(%eax),%eax
f010ba7e:	eb 05                	jmp    f010ba85 <sched_exit_all_ready_envs+0x10a>
f010ba80:	b8 00 00 00 00       	mov    $0x0,%eax
f010ba85:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ba88:	c1 e2 04             	shl    $0x4,%edx
f010ba8b:	81 c2 48 2a 34 f0    	add    $0xf0342a48,%edx
f010ba91:	89 02                	mov    %eax,(%edx)
f010ba93:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba96:	c1 e0 04             	shl    $0x4,%eax
f010ba99:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010ba9e:	8b 00                	mov    (%eax),%eax
f010baa0:	85 c0                	test   %eax,%eax
f010baa2:	0f 85 1d ff ff ff    	jne    f010b9c5 <sched_exit_all_ready_envs+0x4a>
f010baa8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010baac:	0f 85 13 ff ff ff    	jne    f010b9c5 <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010bab2:	ff 45 f0             	incl   -0x10(%ebp)
f010bab5:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010baba:	0f b6 c0             	movzbl %al,%eax
f010babd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010bac0:	0f 8f ce fe ff ff    	jg     f010b994 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010bac6:	90                   	nop
f010bac7:	c9                   	leave  
f010bac8:	c3                   	ret    

f010bac9 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010bac9:	55                   	push   %ebp
f010baca:	89 e5                	mov    %esp,%ebp
f010bacc:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010bacf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010bad6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010badd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010bae1:	0f 85 a0 00 00 00    	jne    f010bb87 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010bae7:	a1 e8 f5 3a f0       	mov    0xf03af5e8,%eax
f010baec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010baef:	eb 67                	jmp    f010bb58 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f010baf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010baf4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010baf7:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bafa:	75 54                	jne    f010bb50 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010bafc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010baff:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010bb05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb08:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bb0b:	83 ec 04             	sub    $0x4,%esp
f010bb0e:	52                   	push   %edx
f010bb0f:	50                   	push   %eax
f010bb10:	68 58 f7 11 f0       	push   $0xf011f758
f010bb15:	e8 1c b9 ff ff       	call   f0107436 <cprintf>
f010bb1a:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f010bb1d:	83 ec 0c             	sub    $0xc,%esp
f010bb20:	ff 75 f4             	pushl  -0xc(%ebp)
f010bb23:	e8 e2 f3 ff ff       	call   f010af0a <sched_remove_new>
f010bb28:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010bb2b:	83 ec 0c             	sub    $0xc,%esp
f010bb2e:	ff 75 f4             	pushl  -0xc(%ebp)
f010bb31:	e8 31 ab ff ff       	call   f0106667 <start_env_free>
f010bb36:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010bb39:	83 ec 0c             	sub    $0xc,%esp
f010bb3c:	68 d7 f6 11 f0       	push   $0xf011f6d7
f010bb41:	e8 f0 b8 ff ff       	call   f0107436 <cprintf>
f010bb46:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010bb49:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010bb50:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010bb55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bb58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bb5c:	74 08                	je     f010bb66 <sched_kill_env+0x9d>
f010bb5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb61:	8b 40 44             	mov    0x44(%eax),%eax
f010bb64:	eb 05                	jmp    f010bb6b <sched_kill_env+0xa2>
f010bb66:	b8 00 00 00 00       	mov    $0x0,%eax
f010bb6b:	a3 f0 f5 3a f0       	mov    %eax,0xf03af5f0
f010bb70:	a1 f0 f5 3a f0       	mov    0xf03af5f0,%eax
f010bb75:	85 c0                	test   %eax,%eax
f010bb77:	0f 85 74 ff ff ff    	jne    f010baf1 <sched_kill_env+0x28>
f010bb7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bb81:	0f 85 6a ff ff ff    	jne    f010baf1 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010bb87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010bb8b:	0f 85 90 01 00 00    	jne    f010bd21 <sched_kill_env+0x258>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010bb91:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010bb98:	e9 70 01 00 00       	jmp    f010bd0d <sched_kill_env+0x244>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010bb9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bba0:	c1 e0 04             	shl    $0x4,%eax
f010bba3:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010bba8:	8b 00                	mov    (%eax),%eax
f010bbaa:	85 c0                	test   %eax,%eax
f010bbac:	0f 84 52 01 00 00    	je     f010bd04 <sched_kill_env+0x23b>
			{
				ptr_env=NULL;
f010bbb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010bbb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bbbc:	c1 e0 04             	shl    $0x4,%eax
f010bbbf:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f010bbc4:	8b 00                	mov    (%eax),%eax
f010bbc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bbc9:	e9 f6 00 00 00       	jmp    f010bcc4 <sched_kill_env+0x1fb>
				{
					if(ptr_env->env_id == envId)
f010bbce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bbd1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bbd4:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bbd7:	0f 85 d7 00 00 00    	jne    f010bcb4 <sched_kill_env+0x1eb>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f010bbdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bbe0:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010bbe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bbe9:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bbec:	ff 75 ec             	pushl  -0x14(%ebp)
f010bbef:	52                   	push   %edx
f010bbf0:	50                   	push   %eax
f010bbf1:	68 80 f7 11 f0       	push   $0xf011f780
f010bbf6:	e8 3b b8 ff ff       	call   f0107436 <cprintf>
f010bbfb:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010bbfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc01:	8b 40 44             	mov    0x44(%eax),%eax
f010bc04:	85 c0                	test   %eax,%eax
f010bc06:	74 11                	je     f010bc19 <sched_kill_env+0x150>
f010bc08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc0b:	8b 40 44             	mov    0x44(%eax),%eax
f010bc0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc11:	8b 52 48             	mov    0x48(%edx),%edx
f010bc14:	89 50 48             	mov    %edx,0x48(%eax)
f010bc17:	eb 14                	jmp    f010bc2d <sched_kill_env+0x164>
f010bc19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc1c:	8b 40 48             	mov    0x48(%eax),%eax
f010bc1f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bc22:	c1 e2 04             	shl    $0x4,%edx
f010bc25:	81 c2 44 2a 34 f0    	add    $0xf0342a44,%edx
f010bc2b:	89 02                	mov    %eax,(%edx)
f010bc2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc30:	8b 40 48             	mov    0x48(%eax),%eax
f010bc33:	85 c0                	test   %eax,%eax
f010bc35:	74 11                	je     f010bc48 <sched_kill_env+0x17f>
f010bc37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc3a:	8b 40 48             	mov    0x48(%eax),%eax
f010bc3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc40:	8b 52 44             	mov    0x44(%edx),%edx
f010bc43:	89 50 44             	mov    %edx,0x44(%eax)
f010bc46:	eb 14                	jmp    f010bc5c <sched_kill_env+0x193>
f010bc48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc4b:	8b 40 44             	mov    0x44(%eax),%eax
f010bc4e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bc51:	c1 e2 04             	shl    $0x4,%edx
f010bc54:	81 c2 40 2a 34 f0    	add    $0xf0342a40,%edx
f010bc5a:	89 02                	mov    %eax,(%edx)
f010bc5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc5f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010bc66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc69:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010bc70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc73:	c1 e0 04             	shl    $0x4,%eax
f010bc76:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010bc7b:	8b 00                	mov    (%eax),%eax
f010bc7d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010bc80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc83:	c1 e0 04             	shl    $0x4,%eax
f010bc86:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f010bc8b:	89 10                	mov    %edx,(%eax)
						start_env_free(ptr_env);
f010bc8d:	83 ec 0c             	sub    $0xc,%esp
f010bc90:	ff 75 f4             	pushl  -0xc(%ebp)
f010bc93:	e8 cf a9 ff ff       	call   f0106667 <start_env_free>
f010bc98:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010bc9b:	83 ec 0c             	sub    $0xc,%esp
f010bc9e:	68 d7 f6 11 f0       	push   $0xf011f6d7
f010bca3:	e8 8e b7 ff ff       	call   f0107436 <cprintf>
f010bca8:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010bcab:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010bcb2:	eb 50                	jmp    f010bd04 <sched_kill_env+0x23b>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010bcb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bcb7:	c1 e0 04             	shl    $0x4,%eax
f010bcba:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010bcbf:	8b 00                	mov    (%eax),%eax
f010bcc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bcc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bcc8:	74 08                	je     f010bcd2 <sched_kill_env+0x209>
f010bcca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bccd:	8b 40 44             	mov    0x44(%eax),%eax
f010bcd0:	eb 05                	jmp    f010bcd7 <sched_kill_env+0x20e>
f010bcd2:	b8 00 00 00 00       	mov    $0x0,%eax
f010bcd7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bcda:	c1 e2 04             	shl    $0x4,%edx
f010bcdd:	81 c2 48 2a 34 f0    	add    $0xf0342a48,%edx
f010bce3:	89 02                	mov    %eax,(%edx)
f010bce5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bce8:	c1 e0 04             	shl    $0x4,%eax
f010bceb:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f010bcf0:	8b 00                	mov    (%eax),%eax
f010bcf2:	85 c0                	test   %eax,%eax
f010bcf4:	0f 85 d4 fe ff ff    	jne    f010bbce <sched_kill_env+0x105>
f010bcfa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bcfe:	0f 85 ca fe ff ff    	jne    f010bbce <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f010bd04:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010bd08:	75 16                	jne    f010bd20 <sched_kill_env+0x257>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010bd0a:	ff 45 ec             	incl   -0x14(%ebp)
f010bd0d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010bd12:	0f b6 c0             	movzbl %al,%eax
f010bd15:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010bd18:	0f 8f 7f fe ff ff    	jg     f010bb9d <sched_kill_env+0xd4>
f010bd1e:	eb 01                	jmp    f010bd21 <sched_kill_env+0x258>
						//return;
					}
				}
			}
			if (found)
				break;
f010bd20:	90                   	nop
		}
	}
	if (!found)
f010bd21:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010bd25:	0f 85 a7 00 00 00    	jne    f010bdd2 <sched_kill_env+0x309>
	{
		ptr_env=NULL;
f010bd2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010bd32:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f010bd37:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bd3a:	eb 67                	jmp    f010bda3 <sched_kill_env+0x2da>
		{
			if(ptr_env->env_id == envId)
f010bd3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bd3f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bd42:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bd45:	75 54                	jne    f010bd9b <sched_kill_env+0x2d2>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010bd47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bd4a:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010bd50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bd53:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bd56:	83 ec 04             	sub    $0x4,%esp
f010bd59:	52                   	push   %edx
f010bd5a:	50                   	push   %eax
f010bd5b:	68 ac f7 11 f0       	push   $0xf011f7ac
f010bd60:	e8 d1 b6 ff ff       	call   f0107436 <cprintf>
f010bd65:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010bd68:	83 ec 0c             	sub    $0xc,%esp
f010bd6b:	ff 75 f4             	pushl  -0xc(%ebp)
f010bd6e:	e8 90 f2 ff ff       	call   f010b003 <sched_remove_exit>
f010bd73:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010bd76:	83 ec 0c             	sub    $0xc,%esp
f010bd79:	ff 75 f4             	pushl  -0xc(%ebp)
f010bd7c:	e8 e6 a8 ff ff       	call   f0106667 <start_env_free>
f010bd81:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010bd84:	83 ec 0c             	sub    $0xc,%esp
f010bd87:	68 d7 f6 11 f0       	push   $0xf011f6d7
f010bd8c:	e8 a5 b6 ff ff       	call   f0107436 <cprintf>
f010bd91:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010bd94:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010bd9b:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f010bda0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bda3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bda7:	74 08                	je     f010bdb1 <sched_kill_env+0x2e8>
f010bda9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdac:	8b 40 44             	mov    0x44(%eax),%eax
f010bdaf:	eb 05                	jmp    f010bdb6 <sched_kill_env+0x2ed>
f010bdb1:	b8 00 00 00 00       	mov    $0x0,%eax
f010bdb6:	a3 ec 89 3a f0       	mov    %eax,0xf03a89ec
f010bdbb:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f010bdc0:	85 c0                	test   %eax,%eax
f010bdc2:	0f 85 74 ff ff ff    	jne    f010bd3c <sched_kill_env+0x273>
f010bdc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bdcc:	0f 85 6a ff ff ff    	jne    f010bd3c <sched_kill_env+0x273>
				//return;
			}
		}
	}

	if (!found)
f010bdd2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010bdd6:	0f 85 a0 00 00 00    	jne    f010be7c <sched_kill_env+0x3b3>
	{
		if (curenv->env_id == envId)
f010bddc:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010bde1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bde4:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bde7:	0f 85 8f 00 00 00    	jne    f010be7c <sched_kill_env+0x3b3>
		{
			ptr_env = curenv;
f010bded:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010bdf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f010bdf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdf8:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bdfb:	83 f8 02             	cmp    $0x2,%eax
f010bdfe:	74 19                	je     f010be19 <sched_kill_env+0x350>
f010be00:	68 d4 f7 11 f0       	push   $0xf011f7d4
f010be05:	68 f4 f7 11 f0       	push   $0xf011f7f4
f010be0a:	68 39 02 00 00       	push   $0x239
f010be0f:	68 09 f8 11 f0       	push   $0xf011f809
f010be14:	e8 7a 43 ff ff       	call   f0100193 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010be19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be1c:	8d 90 b0 52 00 00    	lea    0x52b0(%eax),%edx
f010be22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be25:	8b 40 4c             	mov    0x4c(%eax),%eax
f010be28:	83 ec 04             	sub    $0x4,%esp
f010be2b:	52                   	push   %edx
f010be2c:	50                   	push   %eax
f010be2d:	68 18 f8 11 f0       	push   $0xf011f818
f010be32:	e8 ff b5 ff ff       	call   f0107436 <cprintf>
f010be37:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f010be3a:	83 ec 0c             	sub    $0xc,%esp
f010be3d:	ff 75 f4             	pushl  -0xc(%ebp)
f010be40:	e8 22 a8 ff ff       	call   f0106667 <start_env_free>
f010be45:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010be48:	83 ec 0c             	sub    $0xc,%esp
f010be4b:	68 d7 f6 11 f0       	push   $0xf011f6d7
f010be50:	e8 e1 b5 ff ff       	call   f0107436 <cprintf>
f010be55:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010be58:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f010be5f:	a1 78 da 3c f0       	mov    0xf03cda78,%eax
f010be64:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010be67:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010be6a:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f010be6d:	c7 05 50 21 34 f0 00 	movl   $0x0,0xf0342150
f010be74:	00 00 00 
			fos_scheduler();
f010be77:	e8 e6 ed ff ff       	call   f010ac62 <fos_scheduler>
		}
	}
}
f010be7c:	90                   	nop
f010be7d:	c9                   	leave  
f010be7e:	c3                   	ret    

f010be7f <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f010be7f:	55                   	push   %ebp
f010be80:	89 e5                	mov    %esp,%ebp
f010be82:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRUTimeStamp())
f010be85:	e8 41 cb ff ff       	call   f01089cb <isPageReplacmentAlgorithmLRUTimeStamp>
f010be8a:	85 c0                	test   %eax,%eax
f010be8c:	74 05                	je     f010be93 <clock_interrupt_handler+0x14>
	{
		update_WS_time_stamps();
f010be8e:	e8 05 00 00 00       	call   f010be98 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f010be93:	e8 ca ed ff ff       	call   f010ac62 <fos_scheduler>

f010be98 <update_WS_time_stamps>:
}



void update_WS_time_stamps()
{
f010be98:	55                   	push   %ebp
f010be99:	89 e5                	mov    %esp,%ebp
f010be9b:	53                   	push   %ebx
f010be9c:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f010be9f:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010bea4:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f010bea7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010beab:	0f 84 0c 02 00 00    	je     f010c0bd <update_WS_time_stamps+0x225>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010beb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010beb8:	e9 0e 01 00 00       	jmp    f010bfcb <update_WS_time_stamps+0x133>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010bebd:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010bec0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bec3:	89 d0                	mov    %edx,%eax
f010bec5:	c1 e0 02             	shl    $0x2,%eax
f010bec8:	01 d0                	add    %edx,%eax
f010beca:	c1 e0 02             	shl    $0x2,%eax
f010becd:	01 c8                	add    %ecx,%eax
f010becf:	83 c0 7c             	add    $0x7c,%eax
f010bed2:	8a 00                	mov    (%eax),%al
f010bed4:	3c 01                	cmp    $0x1,%al
f010bed6:	0f 84 ec 00 00 00    	je     f010bfc8 <update_WS_time_stamps+0x130>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f010bedc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010bedf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bee2:	89 d0                	mov    %edx,%eax
f010bee4:	c1 e0 02             	shl    $0x2,%eax
f010bee7:	01 d0                	add    %edx,%eax
f010bee9:	c1 e0 02             	shl    $0x2,%eax
f010beec:	01 c8                	add    %ecx,%eax
f010beee:	83 c0 78             	add    $0x78,%eax
f010bef1:	8b 00                	mov    (%eax),%eax
f010bef3:	89 45 e8             	mov    %eax,-0x18(%ebp)
					//uint32 perm = pt_get_page_permissions(curr_env_ptr, page_va) ;
					uint32 *ptr_table = NULL;
f010bef6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
					get_page_table(curr_env_ptr->env_page_directory,(void*) page_va, &ptr_table);
f010befd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010bf00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bf03:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bf06:	83 ec 04             	sub    $0x4,%esp
f010bf09:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
f010bf0c:	51                   	push   %ecx
f010bf0d:	52                   	push   %edx
f010bf0e:	50                   	push   %eax
f010bf0f:	e8 57 7f ff ff       	call   f0103e6b <get_page_table>
f010bf14:	83 c4 10             	add    $0x10,%esp
					uint32 perm = ptr_table[PTX(page_va)];
f010bf17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010bf1a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010bf1d:	c1 ea 0c             	shr    $0xc,%edx
f010bf20:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bf26:	c1 e2 02             	shl    $0x2,%edx
f010bf29:	01 d0                	add    %edx,%eax
f010bf2b:	8b 00                	mov    (%eax),%eax
f010bf2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f010bf30:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010bf33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf36:	89 d0                	mov    %edx,%eax
f010bf38:	c1 e0 02             	shl    $0x2,%eax
f010bf3b:	01 d0                	add    %edx,%eax
f010bf3d:	c1 e0 02             	shl    $0x2,%eax
f010bf40:	01 c8                	add    %ecx,%eax
f010bf42:	83 e8 80             	sub    $0xffffff80,%eax
f010bf45:	8b 00                	mov    (%eax),%eax
f010bf47:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f010bf4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bf4d:	83 e0 20             	and    $0x20,%eax
f010bf50:	85 c0                	test   %eax,%eax
f010bf52:	74 55                	je     f010bfa9 <update_WS_time_stamps+0x111>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010bf54:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bf57:	c1 e8 02             	shr    $0x2,%eax
f010bf5a:	0d 00 00 00 80       	or     $0x80000000,%eax
f010bf5f:	89 c1                	mov    %eax,%ecx
f010bf61:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010bf64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf67:	89 d0                	mov    %edx,%eax
f010bf69:	c1 e0 02             	shl    $0x2,%eax
f010bf6c:	01 d0                	add    %edx,%eax
f010bf6e:	c1 e0 02             	shl    $0x2,%eax
f010bf71:	01 d8                	add    %ebx,%eax
f010bf73:	83 e8 80             	sub    $0xffffff80,%eax
f010bf76:	89 08                	mov    %ecx,(%eax)
						//pt_set_page_permissions(curr_env_ptr, page_va, 0 , PERM_USED) ;
						ptr_table[PTX(page_va)] &= ~PERM_USED;
f010bf78:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010bf7b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010bf7e:	c1 ea 0c             	shr    $0xc,%edx
f010bf81:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bf87:	c1 e2 02             	shl    $0x2,%edx
f010bf8a:	01 d0                	add    %edx,%eax
f010bf8c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010bf8f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010bf92:	c1 e9 0c             	shr    $0xc,%ecx
f010bf95:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010bf9b:	c1 e1 02             	shl    $0x2,%ecx
f010bf9e:	01 ca                	add    %ecx,%edx
f010bfa0:	8b 12                	mov    (%edx),%edx
f010bfa2:	83 e2 df             	and    $0xffffffdf,%edx
f010bfa5:	89 10                	mov    %edx,(%eax)
f010bfa7:	eb 1f                	jmp    f010bfc8 <update_WS_time_stamps+0x130>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f010bfa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bfac:	c1 e8 02             	shr    $0x2,%eax
f010bfaf:	89 c1                	mov    %eax,%ecx
f010bfb1:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010bfb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfb7:	89 d0                	mov    %edx,%eax
f010bfb9:	c1 e0 02             	shl    $0x2,%eax
f010bfbc:	01 d0                	add    %edx,%eax
f010bfbe:	c1 e0 02             	shl    $0x2,%eax
f010bfc1:	01 d8                	add    %ebx,%eax
f010bfc3:	83 e8 80             	sub    $0xffffff80,%eax
f010bfc6:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010bfc8:	ff 45 f4             	incl   -0xc(%ebp)
f010bfcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bfce:	8b 50 74             	mov    0x74(%eax),%edx
f010bfd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bfd4:	39 c2                	cmp    %eax,%edx
f010bfd6:	0f 87 e1 fe ff ff    	ja     f010bebd <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010bfdc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010bfe3:	e9 cb 00 00 00       	jmp    f010c0b3 <update_WS_time_stamps+0x21b>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f010bfe8:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010bfeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010bfee:	89 d0                	mov    %edx,%eax
f010bff0:	c1 e0 02             	shl    $0x2,%eax
f010bff3:	01 d0                	add    %edx,%eax
f010bff5:	c1 e0 02             	shl    $0x2,%eax
f010bff8:	01 c8                	add    %ecx,%eax
f010bffa:	05 9c 4e 00 00       	add    $0x4e9c,%eax
f010bfff:	8a 00                	mov    (%eax),%al
f010c001:	3c 01                	cmp    $0x1,%al
f010c003:	0f 84 a7 00 00 00    	je     f010c0b0 <update_WS_time_stamps+0x218>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f010c009:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010c00c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c00f:	89 d0                	mov    %edx,%eax
f010c011:	c1 e0 02             	shl    $0x2,%eax
f010c014:	01 d0                	add    %edx,%eax
f010c016:	c1 e0 02             	shl    $0x2,%eax
f010c019:	01 c8                	add    %ecx,%eax
f010c01b:	05 98 4e 00 00       	add    $0x4e98,%eax
f010c020:	8b 00                	mov    (%eax),%eax
f010c022:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f010c025:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010c028:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c02b:	89 d0                	mov    %edx,%eax
f010c02d:	c1 e0 02             	shl    $0x2,%eax
f010c030:	01 d0                	add    %edx,%eax
f010c032:	c1 e0 02             	shl    $0x2,%eax
f010c035:	01 c8                	add    %ecx,%eax
f010c037:	05 a0 4e 00 00       	add    $0x4ea0,%eax
f010c03c:	8b 00                	mov    (%eax),%eax
f010c03e:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr, table_va))
f010c041:	83 ec 08             	sub    $0x8,%esp
f010c044:	ff 75 dc             	pushl  -0x24(%ebp)
f010c047:	ff 75 ec             	pushl  -0x14(%ebp)
f010c04a:	e8 69 88 ff ff       	call   f01048b8 <pd_is_table_used>
f010c04f:	83 c4 10             	add    $0x10,%esp
f010c052:	85 c0                	test   %eax,%eax
f010c054:	74 39                	je     f010c08f <update_WS_time_stamps+0x1f7>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010c056:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c059:	c1 e8 02             	shr    $0x2,%eax
f010c05c:	0d 00 00 00 80       	or     $0x80000000,%eax
f010c061:	89 c1                	mov    %eax,%ecx
f010c063:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010c066:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c069:	89 d0                	mov    %edx,%eax
f010c06b:	c1 e0 02             	shl    $0x2,%eax
f010c06e:	01 d0                	add    %edx,%eax
f010c070:	c1 e0 02             	shl    $0x2,%eax
f010c073:	01 d8                	add    %ebx,%eax
f010c075:	05 a0 4e 00 00       	add    $0x4ea0,%eax
f010c07a:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr, table_va);
f010c07c:	83 ec 08             	sub    $0x8,%esp
f010c07f:	ff 75 dc             	pushl  -0x24(%ebp)
f010c082:	ff 75 ec             	pushl  -0x14(%ebp)
f010c085:	e8 51 88 ff ff       	call   f01048db <pd_set_table_unused>
f010c08a:	83 c4 10             	add    $0x10,%esp
f010c08d:	eb 21                	jmp    f010c0b0 <update_WS_time_stamps+0x218>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010c08f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c092:	c1 e8 02             	shr    $0x2,%eax
f010c095:	89 c1                	mov    %eax,%ecx
f010c097:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010c09a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c09d:	89 d0                	mov    %edx,%eax
f010c09f:	c1 e0 02             	shl    $0x2,%eax
f010c0a2:	01 d0                	add    %edx,%eax
f010c0a4:	c1 e0 02             	shl    $0x2,%eax
f010c0a7:	01 d8                	add    %ebx,%eax
f010c0a9:	05 a0 4e 00 00       	add    $0x4ea0,%eax
f010c0ae:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010c0b0:	ff 45 f0             	incl   -0x10(%ebp)
f010c0b3:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f010c0b7:	0f 8e 2b ff ff ff    	jle    f010bfe8 <update_WS_time_stamps+0x150>
					}
				}
			}
		}
	}
}
f010c0bd:	90                   	nop
f010c0be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c0c1:	c9                   	leave  
f010c0c2:	c3                   	ret    

f010c0c3 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010c0c3:	55                   	push   %ebp
f010c0c4:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010c0c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0c9:	8b 15 64 da 3c f0    	mov    0xf03cda64,%edx
f010c0cf:	29 d0                	sub    %edx,%eax
f010c0d1:	c1 f8 03             	sar    $0x3,%eax
f010c0d4:	89 c2                	mov    %eax,%edx
f010c0d6:	89 d0                	mov    %edx,%eax
f010c0d8:	c1 e0 02             	shl    $0x2,%eax
f010c0db:	01 d0                	add    %edx,%eax
f010c0dd:	c1 e0 02             	shl    $0x2,%eax
f010c0e0:	01 d0                	add    %edx,%eax
f010c0e2:	c1 e0 02             	shl    $0x2,%eax
f010c0e5:	01 d0                	add    %edx,%eax
f010c0e7:	89 c1                	mov    %eax,%ecx
f010c0e9:	c1 e1 08             	shl    $0x8,%ecx
f010c0ec:	01 c8                	add    %ecx,%eax
f010c0ee:	89 c1                	mov    %eax,%ecx
f010c0f0:	c1 e1 10             	shl    $0x10,%ecx
f010c0f3:	01 c8                	add    %ecx,%eax
f010c0f5:	01 c0                	add    %eax,%eax
f010c0f7:	01 d0                	add    %edx,%eax
}
f010c0f9:	5d                   	pop    %ebp
f010c0fa:	c3                   	ret    

f010c0fb <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010c0fb:	55                   	push   %ebp
f010c0fc:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010c0fe:	ff 75 08             	pushl  0x8(%ebp)
f010c101:	e8 bd ff ff ff       	call   f010c0c3 <to_frame_number>
f010c106:	83 c4 04             	add    $0x4,%esp
f010c109:	c1 e0 0c             	shl    $0xc,%eax
}
f010c10c:	c9                   	leave  
f010c10d:	c3                   	ret    

f010c10e <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010c10e:	55                   	push   %ebp
f010c10f:	89 e5                	mov    %esp,%ebp
f010c111:	83 ec 18             	sub    $0x18,%esp
f010c114:	8b 45 10             	mov    0x10(%ebp),%eax
f010c117:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010c11a:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010c11e:	74 26                	je     f010c146 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010c120:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c125:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c128:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f010c12e:	81 c2 b0 52 00 00    	add    $0x52b0,%edx
f010c134:	83 ec 04             	sub    $0x4,%esp
f010c137:	50                   	push   %eax
f010c138:	52                   	push   %edx
f010c139:	68 44 f8 11 f0       	push   $0xf011f844
f010c13e:	e8 f3 b2 ff ff       	call   f0107436 <cprintf>
f010c143:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010c146:	83 ec 04             	sub    $0x4,%esp
f010c149:	ff 75 08             	pushl  0x8(%ebp)
f010c14c:	ff 75 0c             	pushl  0xc(%ebp)
f010c14f:	68 4d f8 11 f0       	push   $0xf011f84d
f010c154:	e8 dd b2 ff ff       	call   f0107436 <cprintf>
f010c159:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010c15c:	90                   	nop
f010c15d:	c9                   	leave  
f010c15e:	c3                   	ret    

f010c15f <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010c15f:	55                   	push   %ebp
f010c160:	89 e5                	mov    %esp,%ebp
f010c162:	83 ec 18             	sub    $0x18,%esp
f010c165:	8b 45 08             	mov    0x8(%ebp),%eax
f010c168:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010c16b:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010c16f:	83 ec 08             	sub    $0x8,%esp
f010c172:	50                   	push   %eax
f010c173:	68 52 f8 11 f0       	push   $0xf011f852
f010c178:	e8 b9 b2 ff ff       	call   f0107436 <cprintf>
f010c17d:	83 c4 10             	add    $0x10,%esp
}
f010c180:	90                   	nop
f010c181:	c9                   	leave  
f010c182:	c3                   	ret    

f010c183 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010c183:	55                   	push   %ebp
f010c184:	89 e5                	mov    %esp,%ebp
f010c186:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010c189:	e8 3a 4a ff ff       	call   f0100bc8 <cons_getc2>
f010c18e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010c191:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c194:	c9                   	leave  
f010c195:	c3                   	ret    

f010c196 <sys_getenvid>:

// Returns the current environment's envid.

//2017
static int32 sys_getenvid(void)
{
f010c196:	55                   	push   %ebp
f010c197:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c199:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c19e:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c1a1:	5d                   	pop    %ebp
f010c1a2:	c3                   	ret    

f010c1a3 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c1a3:	55                   	push   %ebp
f010c1a4:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c1a6:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c1ab:	89 c2                	mov    %eax,%edx
f010c1ad:	a1 4c 21 34 f0       	mov    0xf034214c,%eax
f010c1b2:	29 c2                	sub    %eax,%edx
f010c1b4:	89 d0                	mov    %edx,%eax
f010c1b6:	c1 f8 03             	sar    $0x3,%eax
f010c1b9:	89 c1                	mov    %eax,%ecx
f010c1bb:	89 ca                	mov    %ecx,%edx
f010c1bd:	c1 e2 02             	shl    $0x2,%edx
f010c1c0:	01 ca                	add    %ecx,%edx
f010c1c2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010c1c9:	01 c2                	add    %eax,%edx
f010c1cb:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010c1d2:	01 c2                	add    %eax,%edx
f010c1d4:	89 d0                	mov    %edx,%eax
f010c1d6:	c1 e0 06             	shl    $0x6,%eax
f010c1d9:	29 d0                	sub    %edx,%eax
f010c1db:	c1 e0 03             	shl    $0x3,%eax
f010c1de:	01 c8                	add    %ecx,%eax
f010c1e0:	c1 e0 03             	shl    $0x3,%eax
f010c1e3:	01 c8                	add    %ecx,%eax
f010c1e5:	01 c0                	add    %eax,%eax
f010c1e7:	01 c8                	add    %ecx,%eax
f010c1e9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010c1f0:	01 d0                	add    %edx,%eax
f010c1f2:	c1 e0 03             	shl    $0x3,%eax
f010c1f5:	29 c8                	sub    %ecx,%eax
}
f010c1f7:	5d                   	pop    %ebp
f010c1f8:	c3                   	ret    

f010c1f9 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c1f9:	55                   	push   %ebp
f010c1fa:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c1fc:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c201:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c204:	5d                   	pop    %ebp
f010c205:	c3                   	ret    

f010c206 <sys_env_destroy>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_env_destroy(int32 envid)
{
f010c206:	55                   	push   %ebp
f010c207:	89 e5                	mov    %esp,%ebp
f010c209:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 0)) < 0)
f010c20c:	83 ec 04             	sub    $0x4,%esp
f010c20f:	6a 00                	push   $0x0
f010c211:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c214:	50                   	push   %eax
f010c215:	ff 75 08             	pushl  0x8(%ebp)
f010c218:	e8 e7 71 ff ff       	call   f0103404 <envid2env>
f010c21d:	83 c4 10             	add    $0x10,%esp
f010c220:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c223:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c227:	79 05                	jns    f010c22e <sys_env_destroy+0x28>
		return r;
f010c229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c22c:	eb 5e                	jmp    f010c28c <sys_env_destroy+0x86>

	if (e == curenv)
f010c22e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c231:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c236:	39 c2                	cmp    %eax,%edx
f010c238:	75 1b                	jne    f010c255 <sys_env_destroy+0x4f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c23a:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c23f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c242:	83 ec 08             	sub    $0x8,%esp
f010c245:	50                   	push   %eax
f010c246:	68 55 f8 11 f0       	push   $0xf011f855
f010c24b:	e8 e6 b1 ff ff       	call   f0107436 <cprintf>
f010c250:	83 c4 10             	add    $0x10,%esp
f010c253:	eb 20                	jmp    f010c275 <sys_env_destroy+0x6f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c255:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c258:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c25b:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c260:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c263:	83 ec 04             	sub    $0x4,%esp
f010c266:	52                   	push   %edx
f010c267:	50                   	push   %eax
f010c268:	68 70 f8 11 f0       	push   $0xf011f870
f010c26d:	e8 c4 b1 ff ff       	call   f0107436 <cprintf>
f010c272:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c275:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c278:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c27b:	83 ec 0c             	sub    $0xc,%esp
f010c27e:	50                   	push   %eax
f010c27f:	e8 45 f8 ff ff       	call   f010bac9 <sched_kill_env>
f010c284:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c287:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c28c:	c9                   	leave  
f010c28d:	c3                   	ret    

f010c28e <sys_env_exit>:

static void sys_env_exit()
{
f010c28e:	55                   	push   %ebp
f010c28f:	89 e5                	mov    %esp,%ebp
f010c291:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010c294:	e8 fb aa ff ff       	call   f0106d94 <env_exit>
	//env_run_cmd_prmpt();
}
f010c299:	90                   	nop
f010c29a:	c9                   	leave  
f010c29b:	c3                   	ret    

f010c29c <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010c29c:	55                   	push   %ebp
f010c29d:	89 e5                	mov    %esp,%ebp
f010c29f:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010c2a2:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c2a7:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct Frame_Info *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010c2aa:	83 ec 0c             	sub    $0xc,%esp
f010c2ad:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010c2b0:	50                   	push   %eax
f010c2b1:	e8 36 7a ff ff       	call   f0103cec <allocate_frame>
f010c2b6:	83 c4 10             	add    $0x10,%esp
f010c2b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c2bc:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c2c0:	75 08                	jne    f010c2ca <__sys_allocate_page+0x2e>
		return r ;
f010c2c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c2c5:	e9 cf 00 00 00       	jmp    f010c399 <__sys_allocate_page+0xfd>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010c2ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2cd:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010c2d2:	77 0c                	ja     f010c2e0 <__sys_allocate_page+0x44>
f010c2d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2d7:	25 ff 0f 00 00       	and    $0xfff,%eax
f010c2dc:	85 c0                	test   %eax,%eax
f010c2de:	74 0a                	je     f010c2ea <__sys_allocate_page+0x4e>
		return E_INVAL;
f010c2e0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c2e5:	e9 af 00 00 00       	jmp    f010c399 <__sys_allocate_page+0xfd>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010c2ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c2ed:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010c2f2:	83 f8 04             	cmp    $0x4,%eax
f010c2f5:	74 0a                	je     f010c301 <__sys_allocate_page+0x65>
		return E_INVAL;
f010c2f7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010c2fc:	e9 98 00 00 00       	jmp    f010c399 <__sys_allocate_page+0xfd>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010c301:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c304:	83 ec 0c             	sub    $0xc,%esp
f010c307:	50                   	push   %eax
f010c308:	e8 ee fd ff ff       	call   f010c0fb <to_physical_address>
f010c30d:	83 c4 10             	add    $0x10,%esp
f010c310:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
	#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010c313:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c316:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c319:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c31c:	c1 e8 0c             	shr    $0xc,%eax
f010c31f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c322:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010c327:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c32a:	72 17                	jb     f010c343 <__sys_allocate_page+0xa7>
f010c32c:	ff 75 e8             	pushl  -0x18(%ebp)
f010c32f:	68 88 f8 11 f0       	push   $0xf011f888
f010c334:	68 be 00 00 00       	push   $0xbe
f010c339:	68 b7 f8 11 f0       	push   $0xf011f8b7
f010c33e:	e8 50 3e ff ff       	call   f0100193 <_panic>
f010c343:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c346:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c34b:	83 ec 04             	sub    $0x4,%esp
f010c34e:	68 00 10 00 00       	push   $0x1000
f010c353:	6a 00                	push   $0x0
f010c355:	50                   	push   %eax
f010c356:	e8 52 f1 00 00       	call   f011b4ad <memset>
f010c35b:	83 c4 10             	add    $0x10,%esp
	}
	#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, va, perm) ;
f010c35e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c361:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c364:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c367:	ff 75 0c             	pushl  0xc(%ebp)
f010c36a:	ff 75 08             	pushl  0x8(%ebp)
f010c36d:	52                   	push   %edx
f010c36e:	50                   	push   %eax
f010c36f:	e8 cd 7c ff ff       	call   f0104041 <map_frame>
f010c374:	83 c4 10             	add    $0x10,%esp
f010c377:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c37a:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c37e:	75 14                	jne    f010c394 <__sys_allocate_page+0xf8>
	{
		decrement_references(ptr_frame_info);
f010c380:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c383:	83 ec 0c             	sub    $0xc,%esp
f010c386:	50                   	push   %eax
f010c387:	e8 af 7a ff ff       	call   f0103e3b <decrement_references>
f010c38c:	83 c4 10             	add    $0x10,%esp
		return r;
f010c38f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c392:	eb 05                	jmp    f010c399 <__sys_allocate_page+0xfd>
	}
	return 0 ;
f010c394:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c399:	c9                   	leave  
f010c39a:	c3                   	ret    

f010c39b <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c39b:	55                   	push   %ebp
f010c39c:	89 e5                	mov    %esp,%ebp
f010c39e:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c3a1:	83 ec 04             	sub    $0x4,%esp
f010c3a4:	68 c6 f8 11 f0       	push   $0xf011f8c6
f010c3a9:	68 e5 00 00 00       	push   $0xe5
f010c3ae:	68 b7 f8 11 f0       	push   $0xf011f8b7
f010c3b3:	e8 db 3d ff ff       	call   f0100193 <_panic>

f010c3b8 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c3b8:	55                   	push   %ebp
f010c3b9:	89 e5                	mov    %esp,%ebp
f010c3bb:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c3be:	83 ec 04             	sub    $0x4,%esp
f010c3c1:	68 e4 f8 11 f0       	push   $0xf011f8e4
f010c3c6:	68 f4 00 00 00       	push   $0xf4
f010c3cb:	68 b7 f8 11 f0       	push   $0xf011f8b7
f010c3d0:	e8 be 3d ff ff       	call   f0100193 <_panic>

f010c3d5 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c3d5:	55                   	push   %ebp
f010c3d6:	89 e5                	mov    %esp,%ebp
f010c3d8:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c3db:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c3e0:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c3e3:	83 ec 04             	sub    $0x4,%esp
f010c3e6:	ff 75 0c             	pushl  0xc(%ebp)
f010c3e9:	ff 75 08             	pushl  0x8(%ebp)
f010c3ec:	50                   	push   %eax
f010c3ed:	e8 35 7f ff ff       	call   f0104327 <calculate_required_frames>
f010c3f2:	83 c4 10             	add    $0x10,%esp
}
f010c3f5:	c9                   	leave  
f010c3f6:	c3                   	ret    

f010c3f7 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c3f7:	55                   	push   %ebp
f010c3f8:	89 e5                	mov    %esp,%ebp
f010c3fa:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c3fd:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c400:	83 ec 0c             	sub    $0xc,%esp
f010c403:	50                   	push   %eax
f010c404:	e8 ce 7f ff ff       	call   f01043d7 <calculate_available_frames>
f010c409:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c40c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c40f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c412:	01 d0                	add    %edx,%eax
}
f010c414:	c9                   	leave  
f010c415:	c3                   	ret    

f010c416 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c416:	55                   	push   %ebp
f010c417:	89 e5                	mov    %esp,%ebp
f010c419:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c41c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c41f:	83 ec 0c             	sub    $0xc,%esp
f010c422:	50                   	push   %eax
f010c423:	e8 af 7f ff ff       	call   f01043d7 <calculate_available_frames>
f010c428:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c42b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c42e:	c9                   	leave  
f010c42f:	c3                   	ret    

f010c430 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c430:	55                   	push   %ebp
f010c431:	89 e5                	mov    %esp,%ebp
f010c433:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c436:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c439:	83 ec 0c             	sub    $0xc,%esp
f010c43c:	50                   	push   %eax
f010c43d:	e8 95 7f ff ff       	call   f01043d7 <calculate_available_frames>
f010c442:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c445:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c448:	c9                   	leave  
f010c449:	c3                   	ret    

f010c44a <sys_pf_calculate_allocated_pages>:

int sys_pf_calculate_allocated_pages(void)
{
f010c44a:	55                   	push   %ebp
f010c44b:	89 e5                	mov    %esp,%ebp
f010c44d:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c450:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c455:	83 ec 0c             	sub    $0xc,%esp
f010c458:	50                   	push   %eax
f010c459:	e8 6b 1b 00 00       	call   f010dfc9 <pf_calculate_allocated_pages>
f010c45e:	83 c4 10             	add    $0x10,%esp
}
f010c461:	c9                   	leave  
f010c462:	c3                   	ret    

f010c463 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c463:	55                   	push   %ebp
f010c464:	89 e5                	mov    %esp,%ebp
f010c466:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c469:	83 ec 0c             	sub    $0xc,%esp
f010c46c:	ff 75 08             	pushl  0x8(%ebp)
f010c46f:	e8 c6 f8 00 00       	call   f011bd3a <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c474:	83 c4 10             	add    $0x10,%esp
}
f010c477:	c9                   	leave  
f010c478:	c3                   	ret    

f010c479 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c479:	55                   	push   %ebp
f010c47a:	89 e5                	mov    %esp,%ebp
f010c47c:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c47f:	e8 0e f8 00 00       	call   f011bc92 <scarce_memory>
}
f010c484:	90                   	nop
f010c485:	c9                   	leave  
f010c486:	c3                   	ret    

f010c487 <sys_freeMem>:

void sys_freeMem(uint32 virtual_address, uint32 size)
{
f010c487:	55                   	push   %ebp
f010c488:	89 e5                	mov    %esp,%ebp
f010c48a:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c48d:	e8 e6 c5 ff ff       	call   f0108a78 <isBufferingEnabled>
f010c492:	85 c0                	test   %eax,%eax
f010c494:	74 19                	je     f010c4af <sys_freeMem+0x28>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
f010c496:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c49b:	83 ec 04             	sub    $0x4,%esp
f010c49e:	ff 75 0c             	pushl  0xc(%ebp)
f010c4a1:	ff 75 08             	pushl  0x8(%ebp)
f010c4a4:	50                   	push   %eax
f010c4a5:	e8 43 7e ff ff       	call   f01042ed <__freeMem_with_buffering>
f010c4aa:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		freeMem(curenv, virtual_address, size);
	}
	return;
f010c4ad:	eb 18                	jmp    f010c4c7 <sys_freeMem+0x40>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		freeMem(curenv, virtual_address, size);
f010c4af:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c4b4:	83 ec 04             	sub    $0x4,%esp
f010c4b7:	ff 75 0c             	pushl  0xc(%ebp)
f010c4ba:	ff 75 08             	pushl  0x8(%ebp)
f010c4bd:	50                   	push   %eax
f010c4be:	e8 0d 7e ff ff       	call   f01042d0 <freeMem>
f010c4c3:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c4c6:	90                   	nop
}
f010c4c7:	c9                   	leave  
f010c4c8:	c3                   	ret    

f010c4c9 <sys_allocateMem>:

void sys_allocateMem(uint32 virtual_address, uint32 size)
{
f010c4c9:	55                   	push   %ebp
f010c4ca:	89 e5                	mov    %esp,%ebp
f010c4cc:	83 ec 08             	sub    $0x8,%esp
	allocateMem(curenv, virtual_address, size);
f010c4cf:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c4d4:	83 ec 04             	sub    $0x4,%esp
f010c4d7:	ff 75 0c             	pushl  0xc(%ebp)
f010c4da:	ff 75 08             	pushl  0x8(%ebp)
f010c4dd:	50                   	push   %eax
f010c4de:	e8 d0 7d ff ff       	call   f01042b3 <allocateMem>
f010c4e3:	83 c4 10             	add    $0x10,%esp
	return;
f010c4e6:	90                   	nop
}
f010c4e7:	c9                   	leave  
f010c4e8:	c3                   	ret    

f010c4e9 <sys_new>:

void sys_new(uint32 virtual_address, uint32 size)
{
f010c4e9:	55                   	push   %ebp
f010c4ea:	89 e5                	mov    %esp,%ebp
f010c4ec:	83 ec 08             	sub    $0x8,%esp
	__new(curenv, virtual_address, size);
f010c4ef:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c4f4:	83 ec 04             	sub    $0x4,%esp
f010c4f7:	ff 75 0c             	pushl  0xc(%ebp)
f010c4fa:	ff 75 08             	pushl  0x8(%ebp)
f010c4fd:	50                   	push   %eax
f010c4fe:	e8 62 88 ff ff       	call   f0104d65 <__new>
f010c503:	83 c4 10             	add    $0x10,%esp
	return;
f010c506:	90                   	nop
}
f010c507:	c9                   	leave  
f010c508:	c3                   	ret    

f010c509 <sys_disable_interrupt>:

//NEW!! 2012...
void sys_disable_interrupt()
{
f010c509:	55                   	push   %ebp
f010c50a:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010c50c:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c511:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f010c517:	8b 52 38             	mov    0x38(%edx),%edx
f010c51a:	80 e6 fd             	and    $0xfd,%dh
f010c51d:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c520:	90                   	nop
f010c521:	5d                   	pop    %ebp
f010c522:	c3                   	ret    

f010c523 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010c523:	55                   	push   %ebp
f010c524:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010c526:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c52b:	8b 15 50 21 34 f0    	mov    0xf0342150,%edx
f010c531:	8b 52 38             	mov    0x38(%edx),%edx
f010c534:	80 ce 02             	or     $0x2,%dh
f010c537:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c53a:	90                   	nop
f010c53b:	5d                   	pop    %ebp
f010c53c:	c3                   	ret    

f010c53d <sys_clearFFL>:

void sys_clearFFL()
{
f010c53d:	55                   	push   %ebp
f010c53e:	89 e5                	mov    %esp,%ebp
f010c540:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c543:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f010c548:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c54b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c552:	eb 12                	jmp    f010c566 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c554:	83 ec 0c             	sub    $0xc,%esp
f010c557:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c55a:	50                   	push   %eax
f010c55b:	e8 8c 77 ff ff       	call   f0103cec <allocate_frame>
f010c560:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c563:	ff 45 f4             	incl   -0xc(%ebp)
f010c566:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c569:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c56c:	7c e6                	jl     f010c554 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c56e:	90                   	nop
f010c56f:	c9                   	leave  
f010c570:	c3                   	ret    

f010c571 <sys_createSemaphore>:

int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010c571:	55                   	push   %ebp
f010c572:	89 e5                	mov    %esp,%ebp
f010c574:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010c577:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c57c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c57f:	83 ec 04             	sub    $0x4,%esp
f010c582:	ff 75 0c             	pushl  0xc(%ebp)
f010c585:	ff 75 08             	pushl  0x8(%ebp)
f010c588:	50                   	push   %eax
f010c589:	e8 f5 20 00 00       	call   f010e683 <createSemaphore>
f010c58e:	83 c4 10             	add    $0x10,%esp
}
f010c591:	c9                   	leave  
f010c592:	c3                   	ret    

f010c593 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c593:	55                   	push   %ebp
f010c594:	89 e5                	mov    %esp,%ebp
f010c596:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010c599:	83 ec 08             	sub    $0x8,%esp
f010c59c:	ff 75 0c             	pushl  0xc(%ebp)
f010c59f:	ff 75 08             	pushl  0x8(%ebp)
f010c5a2:	e8 f9 20 00 00       	call   f010e6a0 <waitSemaphore>
f010c5a7:	83 c4 10             	add    $0x10,%esp
}
f010c5aa:	90                   	nop
f010c5ab:	c9                   	leave  
f010c5ac:	c3                   	ret    

f010c5ad <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c5ad:	55                   	push   %ebp
f010c5ae:	89 e5                	mov    %esp,%ebp
f010c5b0:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010c5b3:	83 ec 08             	sub    $0x8,%esp
f010c5b6:	ff 75 0c             	pushl  0xc(%ebp)
f010c5b9:	ff 75 08             	pushl  0x8(%ebp)
f010c5bc:	e8 fc 20 00 00       	call   f010e6bd <signalSemaphore>
f010c5c1:	83 c4 10             	add    $0x10,%esp
}
f010c5c4:	90                   	nop
f010c5c5:	c9                   	leave  
f010c5c6:	c3                   	ret    

f010c5c7 <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010c5c7:	55                   	push   %ebp
f010c5c8:	89 e5                	mov    %esp,%ebp
f010c5ca:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010c5cd:	83 ec 08             	sub    $0x8,%esp
f010c5d0:	ff 75 0c             	pushl  0xc(%ebp)
f010c5d3:	ff 75 08             	pushl  0x8(%ebp)
f010c5d6:	e8 44 1f 00 00       	call   f010e51f <get_semaphore_object_ID>
f010c5db:	83 c4 10             	add    $0x10,%esp
f010c5de:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010c5e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c5e5:	78 09                	js     f010c5f0 <sys_getSemaphoreValue+0x29>
f010c5e7:	81 7d f4 2b 01 00 00 	cmpl   $0x12b,-0xc(%ebp)
f010c5ee:	7e 19                	jle    f010c609 <sys_getSemaphoreValue+0x42>
f010c5f0:	68 04 f9 11 f0       	push   $0xf011f904
f010c5f5:	68 29 f9 11 f0       	push   $0xf011f929
f010c5fa:	68 5f 01 00 00       	push   $0x15f
f010c5ff:	68 b7 f8 11 f0       	push   $0xf011f8b7
f010c604:	e8 8a 3b ff ff       	call   f0100193 <_panic>

	return semaphores[semID].value ;
f010c609:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c60c:	89 d0                	mov    %edx,%eax
f010c60e:	c1 e0 02             	shl    $0x2,%eax
f010c611:	01 d0                	add    %edx,%eax
f010c613:	01 c0                	add    %eax,%eax
f010c615:	01 d0                	add    %edx,%eax
f010c617:	01 c0                	add    %eax,%eax
f010c619:	01 d0                	add    %edx,%eax
f010c61b:	c1 e0 02             	shl    $0x2,%eax
f010c61e:	05 54 8a 3a f0       	add    $0xf03a8a54,%eax
f010c623:	8b 00                	mov    (%eax),%eax
}
f010c625:	c9                   	leave  
f010c626:	c3                   	ret    

f010c627 <sys_createSharedObject>:

int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c627:	55                   	push   %ebp
f010c628:	89 e5                	mov    %esp,%ebp
f010c62a:	83 ec 18             	sub    $0x18,%esp
f010c62d:	8b 45 10             	mov    0x10(%ebp),%eax
f010c630:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c633:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c637:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c63c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c63f:	83 ec 0c             	sub    $0xc,%esp
f010c642:	ff 75 14             	pushl  0x14(%ebp)
f010c645:	52                   	push   %edx
f010c646:	ff 75 0c             	pushl  0xc(%ebp)
f010c649:	ff 75 08             	pushl  0x8(%ebp)
f010c64c:	50                   	push   %eax
f010c64d:	e8 59 23 00 00       	call   f010e9ab <createSharedObject>
f010c652:	83 c4 20             	add    $0x20,%esp
}
f010c655:	c9                   	leave  
f010c656:	c3                   	ret    

f010c657 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c657:	55                   	push   %ebp
f010c658:	89 e5                	mov    %esp,%ebp
f010c65a:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c65d:	83 ec 08             	sub    $0x8,%esp
f010c660:	ff 75 0c             	pushl  0xc(%ebp)
f010c663:	ff 75 08             	pushl  0x8(%ebp)
f010c666:	e8 63 23 00 00       	call   f010e9ce <getSizeOfSharedObject>
f010c66b:	83 c4 10             	add    $0x10,%esp
}
f010c66e:	c9                   	leave  
f010c66f:	c3                   	ret    

f010c670 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c670:	55                   	push   %ebp
f010c671:	89 e5                	mov    %esp,%ebp
f010c673:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c676:	83 ec 04             	sub    $0x4,%esp
f010c679:	ff 75 10             	pushl  0x10(%ebp)
f010c67c:	ff 75 0c             	pushl  0xc(%ebp)
f010c67f:	ff 75 08             	pushl  0x8(%ebp)
f010c682:	e8 64 23 00 00       	call   f010e9eb <getSharedObject>
f010c687:	83 c4 10             	add    $0x10,%esp
}
f010c68a:	c9                   	leave  
f010c68b:	c3                   	ret    

f010c68c <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c68c:	55                   	push   %ebp
f010c68d:	89 e5                	mov    %esp,%ebp
f010c68f:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c692:	83 ec 08             	sub    $0x8,%esp
f010c695:	ff 75 0c             	pushl  0xc(%ebp)
f010c698:	ff 75 08             	pushl  0x8(%ebp)
f010c69b:	e8 68 23 00 00       	call   f010ea08 <freeSharedObject>
f010c6a0:	83 c4 10             	add    $0x10,%esp
}
f010c6a3:	c9                   	leave  
f010c6a4:	c3                   	ret    

f010c6a5 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c6a5:	55                   	push   %ebp
f010c6a6:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c6a8:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c6ad:	5d                   	pop    %ebp
f010c6ae:	c3                   	ret    

f010c6af <sys_create_env>:

//=========
//New update in 2020
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010c6af:	55                   	push   %ebp
f010c6b0:	89 e5                	mov    %esp,%ebp
f010c6b2:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010c6b5:	ff 75 14             	pushl  0x14(%ebp)
f010c6b8:	ff 75 10             	pushl  0x10(%ebp)
f010c6bb:	ff 75 0c             	pushl  0xc(%ebp)
f010c6be:	ff 75 08             	pushl  0x8(%ebp)
f010c6c1:	e8 6e 92 ff ff       	call   f0105934 <env_create>
f010c6c6:	83 c4 10             	add    $0x10,%esp
f010c6c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010c6cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c6d0:	75 07                	jne    f010c6d9 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010c6d2:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010c6d7:	eb 14                	jmp    f010c6ed <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010c6d9:	83 ec 0c             	sub    $0xc,%esp
f010c6dc:	ff 75 f4             	pushl  -0xc(%ebp)
f010c6df:	e8 96 ef ff ff       	call   f010b67a <sched_new_env>
f010c6e4:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010c6e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c6ea:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c6ed:	c9                   	leave  
f010c6ee:	c3                   	ret    

f010c6ef <sys_run_env>:

void sys_run_env(int32 envId)
{
f010c6ef:	55                   	push   %ebp
f010c6f0:	89 e5                	mov    %esp,%ebp
f010c6f2:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010c6f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6f8:	83 ec 0c             	sub    $0xc,%esp
f010c6fb:	50                   	push   %eax
f010c6fc:	e8 90 ef ff ff       	call   f010b691 <sched_run_env>
f010c701:	83 c4 10             	add    $0x10,%esp
}
f010c704:	90                   	nop
f010c705:	c9                   	leave  
f010c706:	c3                   	ret    

f010c707 <sys_free_env>:

void sys_free_env(int32 envId)
{
f010c707:	55                   	push   %ebp
f010c708:	89 e5                	mov    %esp,%ebp
f010c70a:	83 ec 08             	sub    $0x8,%esp
	//2015
	sched_kill_env(envId);
f010c70d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c710:	83 ec 0c             	sub    $0xc,%esp
f010c713:	50                   	push   %eax
f010c714:	e8 b0 f3 ff ff       	call   f010bac9 <sched_kill_env>
f010c719:	83 c4 10             	add    $0x10,%esp
}
f010c71c:	90                   	nop
f010c71d:	c9                   	leave  
f010c71e:	c3                   	ret    

f010c71f <sys_get_virtual_time>:

struct uint64 sys_get_virtual_time()
{
f010c71f:	55                   	push   %ebp
f010c720:	89 e5                	mov    %esp,%ebp
f010c722:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010c725:	0f 31                	rdtsc  
f010c727:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c72a:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010c72d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c730:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c733:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c736:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010c739:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c73c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c73f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c742:	89 01                	mov    %eax,(%ecx)
f010c744:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010c747:	8b 45 08             	mov    0x8(%ebp),%eax
f010c74a:	c9                   	leave  
f010c74b:	c2 04 00             	ret    $0x4

f010c74e <sys_moveMem>:

//2014
void sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010c74e:	55                   	push   %ebp
f010c74f:	89 e5                	mov    %esp,%ebp
f010c751:	83 ec 08             	sub    $0x8,%esp
	moveMem(curenv, src_virtual_address, dst_virtual_address, size);
f010c754:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c759:	ff 75 10             	pushl  0x10(%ebp)
f010c75c:	ff 75 0c             	pushl  0xc(%ebp)
f010c75f:	ff 75 08             	pushl  0x8(%ebp)
f010c762:	50                   	push   %eax
f010c763:	e8 a2 7b ff ff       	call   f010430a <moveMem>
f010c768:	83 c4 10             	add    $0x10,%esp
	return;
f010c76b:	90                   	nop
}
f010c76c:	c9                   	leave  
f010c76d:	c3                   	ret    

f010c76e <sys_rcr2>:
uint32 sys_rcr2()
{
f010c76e:	55                   	push   %ebp
f010c76f:	89 e5                	mov    %esp,%ebp
f010c771:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c774:	0f 20 d0             	mov    %cr2,%eax
f010c777:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010c77a:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010c77d:	90                   	nop
}
f010c77e:	c9                   	leave  
f010c77f:	c3                   	ret    

f010c780 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010c780:	55                   	push   %ebp
f010c781:	89 e5                	mov    %esp,%ebp
f010c783:	83 ec 04             	sub    $0x4,%esp
f010c786:	8b 45 08             	mov    0x8(%ebp),%eax
f010c789:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010c78c:	8a 45 fc             	mov    -0x4(%ebp),%al
f010c78f:	a2 80 21 34 f0       	mov    %al,0xf0342180
}
f010c794:	90                   	nop
f010c795:	c9                   	leave  
f010c796:	c3                   	ret    

f010c797 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010c797:	55                   	push   %ebp
f010c798:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010c79a:	c7 05 50 db 3c f0 00 	movl   $0x0,0xf03cdb50
f010c7a1:	00 00 00 
}
f010c7a4:	90                   	nop
f010c7a5:	5d                   	pop    %ebp
f010c7a6:	c3                   	ret    

f010c7a7 <inctst>:
void inctst()
{
f010c7a7:	55                   	push   %ebp
f010c7a8:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010c7aa:	a1 50 db 3c f0       	mov    0xf03cdb50,%eax
f010c7af:	40                   	inc    %eax
f010c7b0:	a3 50 db 3c f0       	mov    %eax,0xf03cdb50
}
f010c7b5:	90                   	nop
f010c7b6:	5d                   	pop    %ebp
f010c7b7:	c3                   	ret    

f010c7b8 <gettst>:
uint32 gettst()
{
f010c7b8:	55                   	push   %ebp
f010c7b9:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010c7bb:	a1 50 db 3c f0       	mov    0xf03cdb50,%eax
}
f010c7c0:	5d                   	pop    %ebp
f010c7c1:	c3                   	ret    

f010c7c2 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010c7c2:	55                   	push   %ebp
f010c7c3:	89 e5                	mov    %esp,%ebp
f010c7c5:	83 ec 28             	sub    $0x28,%esp
f010c7c8:	8b 45 14             	mov    0x14(%ebp),%eax
f010c7cb:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010c7ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010c7d5:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010c7d9:	83 f8 65             	cmp    $0x65,%eax
f010c7dc:	74 5d                	je     f010c83b <tst+0x79>
f010c7de:	83 f8 65             	cmp    $0x65,%eax
f010c7e1:	7f 0a                	jg     f010c7ed <tst+0x2b>
f010c7e3:	83 f8 62             	cmp    $0x62,%eax
f010c7e6:	74 73                	je     f010c85b <tst+0x99>
f010c7e8:	e9 91 00 00 00       	jmp    f010c87e <tst+0xbc>
f010c7ed:	83 f8 67             	cmp    $0x67,%eax
f010c7f0:	74 29                	je     f010c81b <tst+0x59>
f010c7f2:	83 f8 6c             	cmp    $0x6c,%eax
f010c7f5:	0f 85 83 00 00 00    	jne    f010c87e <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010c7fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7fe:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c801:	73 09                	jae    f010c80c <tst+0x4a>
			chk = 1;
f010c803:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c80a:	eb 68                	jmp    f010c874 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010c80c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c810:	74 62                	je     f010c874 <tst+0xb2>
			chk = 1;
f010c812:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c819:	eb 59                	jmp    f010c874 <tst+0xb2>
	case 'g':
		if (n > v1)
f010c81b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c81e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c821:	76 09                	jbe    f010c82c <tst+0x6a>
			chk = 1;
f010c823:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c82a:	eb 4b                	jmp    f010c877 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010c82c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c830:	74 45                	je     f010c877 <tst+0xb5>
			chk = 1;
f010c832:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c839:	eb 3c                	jmp    f010c877 <tst+0xb5>
	case 'e':
		if (n == v1)
f010c83b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c83e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c841:	75 09                	jne    f010c84c <tst+0x8a>
			chk = 1;
f010c843:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c84a:	eb 2e                	jmp    f010c87a <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010c84c:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c850:	74 28                	je     f010c87a <tst+0xb8>
			chk = 1;
f010c852:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c859:	eb 1f                	jmp    f010c87a <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010c85b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c85e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c861:	72 1a                	jb     f010c87d <tst+0xbb>
f010c863:	8b 45 08             	mov    0x8(%ebp),%eax
f010c866:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c869:	77 12                	ja     f010c87d <tst+0xbb>
			chk = 1;
f010c86b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c872:	eb 09                	jmp    f010c87d <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c874:	90                   	nop
f010c875:	eb 07                	jmp    f010c87e <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c877:	90                   	nop
f010c878:	eb 04                	jmp    f010c87e <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c87a:	90                   	nop
f010c87b:	eb 01                	jmp    f010c87e <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010c87d:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010c87e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c882:	75 17                	jne    f010c89b <tst+0xd9>
f010c884:	83 ec 04             	sub    $0x4,%esp
f010c887:	68 3e f9 11 f0       	push   $0xf011f93e
f010c88c:	68 d8 01 00 00       	push   $0x1d8
f010c891:	68 b7 f8 11 f0       	push   $0xf011f8b7
f010c896:	e8 f8 38 ff ff       	call   f0100193 <_panic>
	tstcnt++ ;
f010c89b:	a1 50 db 3c f0       	mov    0xf03cdb50,%eax
f010c8a0:	40                   	inc    %eax
f010c8a1:	a3 50 db 3c f0       	mov    %eax,0xf03cdb50
	return;
f010c8a6:	90                   	nop
}
f010c8a7:	c9                   	leave  
f010c8a8:	c3                   	ret    

f010c8a9 <chktst>:

void chktst(uint32 n)
{
f010c8a9:	55                   	push   %ebp
f010c8aa:	89 e5                	mov    %esp,%ebp
f010c8ac:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010c8af:	a1 50 db 3c f0       	mov    0xf03cdb50,%eax
f010c8b4:	3b 45 08             	cmp    0x8(%ebp),%eax
f010c8b7:	75 12                	jne    f010c8cb <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010c8b9:	83 ec 0c             	sub    $0xc,%esp
f010c8bc:	68 54 f9 11 f0       	push   $0xf011f954
f010c8c1:	e8 70 ab ff ff       	call   f0107436 <cprintf>
f010c8c6:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010c8c9:	eb 17                	jmp    f010c8e2 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010c8cb:	83 ec 04             	sub    $0x4,%esp
f010c8ce:	68 80 f9 11 f0       	push   $0xf011f980
f010c8d3:	68 e2 01 00 00       	push   $0x1e2
f010c8d8:	68 b7 f8 11 f0       	push   $0xf011f8b7
f010c8dd:	e8 b1 38 ff ff       	call   f0100193 <_panic>
}
f010c8e2:	c9                   	leave  
f010c8e3:	c3                   	ret    

f010c8e4 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010c8e4:	55                   	push   %ebp
f010c8e5:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010c8e7:	a1 dc f5 3a f0       	mov    0xf03af5dc,%eax
}
f010c8ec:	5d                   	pop    %ebp
f010c8ed:	c3                   	ret    

f010c8ee <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010c8ee:	55                   	push   %ebp
f010c8ef:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010c8f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8f4:	a3 dc f5 3a f0       	mov    %eax,0xf03af5dc
}
f010c8f9:	90                   	nop
f010c8fa:	5d                   	pop    %ebp
f010c8fb:	c3                   	ret    

f010c8fc <sys_check_LRU_lists>:

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010c8fc:	55                   	push   %ebp
f010c8fd:	89 e5                	mov    %esp,%ebp
f010c8ff:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c902:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010c907:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010c90a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010c911:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010c918:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c91c:	0f 84 a5 00 00 00    	je     f010c9c7 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010c922:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c929:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c92c:	8b 80 10 53 00 00    	mov    0x5310(%eax),%eax
f010c932:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c935:	eb 4a                	jmp    f010c981 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010c937:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c93a:	8b 00                	mov    (%eax),%eax
f010c93c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c93f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c942:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c947:	89 c2                	mov    %eax,%edx
f010c949:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c94c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c953:	8b 45 08             	mov    0x8(%ebp),%eax
f010c956:	01 c8                	add    %ecx,%eax
f010c958:	8b 00                	mov    (%eax),%eax
f010c95a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c95d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c960:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c965:	39 c2                	cmp    %eax,%edx
f010c967:	74 09                	je     f010c972 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010c969:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010c970:	eb 3e                	jmp    f010c9b0 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010c972:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c975:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c978:	8b 80 18 53 00 00    	mov    0x5318(%eax),%eax
f010c97e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c981:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c985:	74 08                	je     f010c98f <sys_check_LRU_lists+0x93>
f010c987:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c98a:	8b 40 0c             	mov    0xc(%eax),%eax
f010c98d:	eb 05                	jmp    f010c994 <sys_check_LRU_lists+0x98>
f010c98f:	b8 00 00 00 00       	mov    $0x0,%eax
f010c994:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c997:	89 82 18 53 00 00    	mov    %eax,0x5318(%edx)
f010c99d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9a0:	8b 80 18 53 00 00    	mov    0x5318(%eax),%eax
f010c9a6:	85 c0                	test   %eax,%eax
f010c9a8:	75 8d                	jne    f010c937 <sys_check_LRU_lists+0x3b>
f010c9aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c9ae:	75 87                	jne    f010c937 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010c9b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9b3:	8b 90 1c 53 00 00    	mov    0x531c(%eax),%edx
f010c9b9:	8b 45 10             	mov    0x10(%ebp),%eax
f010c9bc:	39 c2                	cmp    %eax,%edx
f010c9be:	74 07                	je     f010c9c7 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010c9c0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010c9c7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c9cb:	0f 84 a5 00 00 00    	je     f010ca76 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010c9d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c9d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c9db:	8b 80 20 53 00 00    	mov    0x5320(%eax),%eax
f010c9e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c9e4:	eb 4a                	jmp    f010ca30 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010c9e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c9e9:	8b 00                	mov    (%eax),%eax
f010c9eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c9ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c9f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c9f6:	89 c2                	mov    %eax,%edx
f010c9f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c9fb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ca02:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca05:	01 c8                	add    %ecx,%eax
f010ca07:	8b 00                	mov    (%eax),%eax
f010ca09:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010ca0c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ca0f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ca14:	39 c2                	cmp    %eax,%edx
f010ca16:	74 09                	je     f010ca21 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010ca18:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010ca1f:	eb 3e                	jmp    f010ca5f <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010ca21:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010ca24:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca27:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f010ca2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ca30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca34:	74 08                	je     f010ca3e <sys_check_LRU_lists+0x142>
f010ca36:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ca39:	8b 40 0c             	mov    0xc(%eax),%eax
f010ca3c:	eb 05                	jmp    f010ca43 <sys_check_LRU_lists+0x147>
f010ca3e:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca43:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ca46:	89 82 28 53 00 00    	mov    %eax,0x5328(%edx)
f010ca4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca4f:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f010ca55:	85 c0                	test   %eax,%eax
f010ca57:	75 8d                	jne    f010c9e6 <sys_check_LRU_lists+0xea>
f010ca59:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ca5d:	75 87                	jne    f010c9e6 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010ca5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ca62:	8b 90 2c 53 00 00    	mov    0x532c(%eax),%edx
f010ca68:	8b 45 14             	mov    0x14(%ebp),%eax
f010ca6b:	39 c2                	cmp    %eax,%edx
f010ca6d:	74 07                	je     f010ca76 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010ca6f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010ca76:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ca79:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010ca7c:	c9                   	leave  
f010ca7d:	c3                   	ret    

f010ca7e <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010ca7e:	55                   	push   %ebp
f010ca7f:	89 e5                	mov    %esp,%ebp
f010ca81:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010ca84:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010ca89:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010ca8c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010ca93:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ca96:	8b 80 10 53 00 00    	mov    0x5310(%eax),%eax
f010ca9c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ca9f:	eb 65                	jmp    f010cb06 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010caa1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010caa8:	eb 3a                	jmp    f010cae4 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010caaa:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010caad:	8b 00                	mov    (%eax),%eax
f010caaf:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010cab2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cab5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010caba:	89 c2                	mov    %eax,%edx
f010cabc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cabf:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cac6:	8b 45 08             	mov    0x8(%ebp),%eax
f010cac9:	01 c8                	add    %ecx,%eax
f010cacb:	8b 00                	mov    (%eax),%eax
f010cacd:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010cad0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cad3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cad8:	39 c2                	cmp    %eax,%edx
f010cada:	75 05                	jne    f010cae1 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010cadc:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010cadf:	eb 0b                	jmp    f010caec <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010cae1:	ff 45 f4             	incl   -0xc(%ebp)
f010cae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cae7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010caea:	7c be                	jl     f010caaa <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010caec:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010caf0:	7e 08                	jle    f010cafa <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010caf2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010caf5:	e9 ed 00 00 00       	jmp    f010cbe7 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010cafa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cafd:	8b 80 18 53 00 00    	mov    0x5318(%eax),%eax
f010cb03:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cb06:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cb0a:	74 08                	je     f010cb14 <sys_check_LRU_lists_free+0x96>
f010cb0c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cb0f:	8b 40 0c             	mov    0xc(%eax),%eax
f010cb12:	eb 05                	jmp    f010cb19 <sys_check_LRU_lists_free+0x9b>
f010cb14:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb19:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cb1c:	89 82 18 53 00 00    	mov    %eax,0x5318(%edx)
f010cb22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb25:	8b 80 18 53 00 00    	mov    0x5318(%eax),%eax
f010cb2b:	85 c0                	test   %eax,%eax
f010cb2d:	0f 85 6e ff ff ff    	jne    f010caa1 <sys_check_LRU_lists_free+0x23>
f010cb33:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cb37:	0f 85 64 ff ff ff    	jne    f010caa1 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cb3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cb40:	8b 80 20 53 00 00    	mov    0x5320(%eax),%eax
f010cb46:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cb49:	eb 62                	jmp    f010cbad <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010cb4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010cb52:	eb 3a                	jmp    f010cb8e <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010cb54:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cb57:	8b 00                	mov    (%eax),%eax
f010cb59:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010cb5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cb5f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cb64:	89 c2                	mov    %eax,%edx
f010cb66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb69:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010cb70:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb73:	01 c8                	add    %ecx,%eax
f010cb75:	8b 00                	mov    (%eax),%eax
f010cb77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010cb7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cb7d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010cb82:	39 c2                	cmp    %eax,%edx
f010cb84:	75 05                	jne    f010cb8b <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010cb86:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010cb89:	eb 0b                	jmp    f010cb96 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010cb8b:	ff 45 f0             	incl   -0x10(%ebp)
f010cb8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cb91:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010cb94:	7c be                	jl     f010cb54 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010cb96:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010cb9a:	7e 05                	jle    f010cba1 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010cb9c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cb9f:	eb 46                	jmp    f010cbe7 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010cba1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cba4:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f010cbaa:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cbad:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cbb1:	74 08                	je     f010cbbb <sys_check_LRU_lists_free+0x13d>
f010cbb3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010cbb6:	8b 40 0c             	mov    0xc(%eax),%eax
f010cbb9:	eb 05                	jmp    f010cbc0 <sys_check_LRU_lists_free+0x142>
f010cbbb:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbc0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cbc3:	89 82 28 53 00 00    	mov    %eax,0x5328(%edx)
f010cbc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cbcc:	8b 80 28 53 00 00    	mov    0x5328(%eax),%eax
f010cbd2:	85 c0                	test   %eax,%eax
f010cbd4:	0f 85 71 ff ff ff    	jne    f010cb4b <sys_check_LRU_lists_free+0xcd>
f010cbda:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010cbde:	0f 85 67 ff ff ff    	jne    f010cb4b <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010cbe4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010cbe7:	c9                   	leave  
f010cbe8:	c3                   	ret    

f010cbe9 <syscall>:


// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010cbe9:	55                   	push   %ebp
f010cbea:	89 e5                	mov    %esp,%ebp
f010cbec:	56                   	push   %esi
f010cbed:	53                   	push   %ebx
f010cbee:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010cbf1:	83 7d 08 31          	cmpl   $0x31,0x8(%ebp)
f010cbf5:	0f 87 3f 04 00 00    	ja     f010d03a <syscall+0x451>
f010cbfb:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbfe:	c1 e0 02             	shl    $0x2,%eax
f010cc01:	05 9c f9 11 f0       	add    $0xf011f99c,%eax
f010cc06:	8b 00                	mov    (%eax),%eax
f010cc08:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010cc0a:	8b 45 14             	mov    0x14(%ebp),%eax
f010cc0d:	0f b6 d0             	movzbl %al,%edx
f010cc10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc13:	83 ec 04             	sub    $0x4,%esp
f010cc16:	52                   	push   %edx
f010cc17:	ff 75 10             	pushl  0x10(%ebp)
f010cc1a:	50                   	push   %eax
f010cc1b:	e8 ee f4 ff ff       	call   f010c10e <sys_cputs>
f010cc20:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc23:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc28:	e9 12 04 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010cc2d:	e8 51 f5 ff ff       	call   f010c183 <sys_cgetc>
f010cc32:	e9 08 04 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010cc37:	e8 67 f5 ff ff       	call   f010c1a3 <sys_getenvindex>
f010cc3c:	e9 fe 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010cc41:	e8 50 f5 ff ff       	call   f010c196 <sys_getenvid>
f010cc46:	e9 f4 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010cc4b:	e8 a9 f5 ff ff       	call   f010c1f9 <sys_getparentenvid>
f010cc50:	e9 ea 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_env_destroy:
		return sys_env_destroy(a1);
f010cc55:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc58:	83 ec 0c             	sub    $0xc,%esp
f010cc5b:	50                   	push   %eax
f010cc5c:	e8 a5 f5 ff ff       	call   f010c206 <sys_env_destroy>
f010cc61:	83 c4 10             	add    $0x10,%esp
f010cc64:	e9 d6 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_env_exit:
		sys_env_exit();
f010cc69:	e8 20 f6 ff ff       	call   f010c28e <sys_env_exit>
		return 0;
f010cc6e:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc73:	e9 c7 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010cc78:	83 ec 08             	sub    $0x8,%esp
f010cc7b:	ff 75 10             	pushl  0x10(%ebp)
f010cc7e:	ff 75 0c             	pushl  0xc(%ebp)
f010cc81:	e8 4f f7 ff ff       	call   f010c3d5 <sys_calculate_required_frames>
f010cc86:	83 c4 10             	add    $0x10,%esp
f010cc89:	e9 b1 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010cc8e:	e8 64 f7 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010cc93:	e9 a7 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010cc98:	e8 79 f7 ff ff       	call   f010c416 <sys_calculate_modified_frames>
f010cc9d:	e9 9d 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010cca2:	e8 89 f7 ff ff       	call   f010c430 <sys_calculate_notmod_frames>
f010cca7:	e9 93 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010ccac:	e8 99 f7 ff ff       	call   f010c44a <sys_pf_calculate_allocated_pages>
f010ccb1:	e9 89 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010ccb6:	83 ec 0c             	sub    $0xc,%esp
f010ccb9:	ff 75 0c             	pushl  0xc(%ebp)
f010ccbc:	e8 a2 f7 ff ff       	call   f010c463 <sys_calculate_pages_tobe_removed_ready_exit>
f010ccc1:	83 c4 10             	add    $0x10,%esp
f010ccc4:	e9 76 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010ccc9:	e8 ab f7 ff ff       	call   f010c479 <sys_scarce_memory>
		return 0;
f010ccce:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccd3:	e9 67 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_freeMem:
		sys_freeMem(a1, a2);
f010ccd8:	83 ec 08             	sub    $0x8,%esp
f010ccdb:	ff 75 10             	pushl  0x10(%ebp)
f010ccde:	ff 75 0c             	pushl  0xc(%ebp)
f010cce1:	e8 a1 f7 ff ff       	call   f010c487 <sys_freeMem>
f010cce6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cce9:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccee:	e9 4c 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010ccf3:	8b 55 10             	mov    0x10(%ebp),%edx
f010ccf6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccf9:	83 ec 08             	sub    $0x8,%esp
f010ccfc:	52                   	push   %edx
f010ccfd:	50                   	push   %eax
f010ccfe:	e8 99 f5 ff ff       	call   f010c29c <__sys_allocate_page>
f010cd03:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd06:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd0b:	e9 2f 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cd10:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cd13:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cd16:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cd19:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd1f:	83 ec 0c             	sub    $0xc,%esp
f010cd22:	56                   	push   %esi
f010cd23:	53                   	push   %ebx
f010cd24:	51                   	push   %ecx
f010cd25:	52                   	push   %edx
f010cd26:	50                   	push   %eax
f010cd27:	e8 6f f6 ff ff       	call   f010c39b <__sys_map_frame>
f010cd2c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cd2f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd34:	e9 06 03 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cd39:	8b 55 10             	mov    0x10(%ebp),%edx
f010cd3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd3f:	83 ec 08             	sub    $0x8,%esp
f010cd42:	52                   	push   %edx
f010cd43:	50                   	push   %eax
f010cd44:	e8 6f f6 ff ff       	call   f010c3b8 <__sys_unmap_frame>
f010cd49:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd4c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd51:	e9 e9 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_allocateMem:
		//LOG_STATMENT(cprintf("KERNEL syscall: a2 %x\n", a2));
		sys_allocateMem(a1, (uint32)a2);
f010cd56:	83 ec 08             	sub    $0x8,%esp
f010cd59:	ff 75 10             	pushl  0x10(%ebp)
f010cd5c:	ff 75 0c             	pushl  0xc(%ebp)
f010cd5f:	e8 65 f7 ff ff       	call   f010c4c9 <sys_allocateMem>
f010cd64:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd67:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd6c:	e9 ce 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010cd71:	e8 93 f7 ff ff       	call   f010c509 <sys_disable_interrupt>
		return 0;
f010cd76:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd7b:	e9 bf 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cd80:	e8 9e f7 ff ff       	call   f010c523 <sys_enable_interrupt>
		return 0;
f010cd85:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd8a:	e9 b0 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cd8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd92:	0f be c0             	movsbl %al,%eax
f010cd95:	83 ec 0c             	sub    $0xc,%esp
f010cd98:	50                   	push   %eax
f010cd99:	e8 c1 f3 ff ff       	call   f010c15f <sys_cputc>
f010cd9e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cda1:	b8 00 00 00 00       	mov    $0x0,%eax
f010cda6:	e9 94 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cdab:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdae:	0f be c0             	movsbl %al,%eax
f010cdb1:	83 ec 0c             	sub    $0xc,%esp
f010cdb4:	50                   	push   %eax
f010cdb5:	e8 83 f7 ff ff       	call   f010c53d <sys_clearFFL>
f010cdba:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cdbd:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdc2:	e9 78 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010cdc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdca:	83 ec 08             	sub    $0x8,%esp
f010cdcd:	ff 75 10             	pushl  0x10(%ebp)
f010cdd0:	50                   	push   %eax
f010cdd1:	e8 9b f7 ff ff       	call   f010c571 <sys_createSemaphore>
f010cdd6:	83 c4 10             	add    $0x10,%esp
f010cdd9:	e9 61 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010cdde:	8b 55 10             	mov    0x10(%ebp),%edx
f010cde1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cde4:	83 ec 08             	sub    $0x8,%esp
f010cde7:	52                   	push   %edx
f010cde8:	50                   	push   %eax
f010cde9:	e8 a5 f7 ff ff       	call   f010c593 <sys_waitSemaphore>
f010cdee:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cdf1:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdf6:	e9 44 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010cdfb:	8b 55 10             	mov    0x10(%ebp),%edx
f010cdfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce01:	83 ec 08             	sub    $0x8,%esp
f010ce04:	52                   	push   %edx
f010ce05:	50                   	push   %eax
f010ce06:	e8 a2 f7 ff ff       	call   f010c5ad <sys_signalSemaphore>
f010ce0b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ce0e:	b8 00 00 00 00       	mov    $0x0,%eax
f010ce13:	e9 27 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010ce18:	8b 55 10             	mov    0x10(%ebp),%edx
f010ce1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce1e:	83 ec 08             	sub    $0x8,%esp
f010ce21:	52                   	push   %edx
f010ce22:	50                   	push   %eax
f010ce23:	e8 9f f7 ff ff       	call   f010c5c7 <sys_getSemaphoreValue>
f010ce28:	83 c4 10             	add    $0x10,%esp
f010ce2b:	e9 0f 02 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010ce30:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010ce33:	8b 45 14             	mov    0x14(%ebp),%eax
f010ce36:	0f b6 d0             	movzbl %al,%edx
f010ce39:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce3c:	51                   	push   %ecx
f010ce3d:	52                   	push   %edx
f010ce3e:	ff 75 10             	pushl  0x10(%ebp)
f010ce41:	50                   	push   %eax
f010ce42:	e8 e0 f7 ff ff       	call   f010c627 <sys_createSharedObject>
f010ce47:	83 c4 10             	add    $0x10,%esp
f010ce4a:	e9 f0 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010ce4f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010ce52:	8b 55 10             	mov    0x10(%ebp),%edx
f010ce55:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce58:	83 ec 04             	sub    $0x4,%esp
f010ce5b:	51                   	push   %ecx
f010ce5c:	52                   	push   %edx
f010ce5d:	50                   	push   %eax
f010ce5e:	e8 0d f8 ff ff       	call   f010c670 <sys_getSharedObject>
f010ce63:	83 c4 10             	add    $0x10,%esp
f010ce66:	e9 d4 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010ce6b:	8b 55 10             	mov    0x10(%ebp),%edx
f010ce6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce71:	83 ec 08             	sub    $0x8,%esp
f010ce74:	52                   	push   %edx
f010ce75:	50                   	push   %eax
f010ce76:	e8 11 f8 ff ff       	call   f010c68c <sys_freeSharedObject>
f010ce7b:	83 c4 10             	add    $0x10,%esp
f010ce7e:	e9 bc 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010ce83:	8b 55 10             	mov    0x10(%ebp),%edx
f010ce86:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce89:	83 ec 08             	sub    $0x8,%esp
f010ce8c:	52                   	push   %edx
f010ce8d:	50                   	push   %eax
f010ce8e:	e8 c4 f7 ff ff       	call   f010c657 <sys_getSizeOfSharedObject>
f010ce93:	83 c4 10             	add    $0x10,%esp
f010ce96:	e9 a4 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010ce9b:	e8 05 f8 ff ff       	call   f010c6a5 <sys_getMaxShares>
f010cea0:	e9 9a 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010cea5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cea8:	ff 75 18             	pushl  0x18(%ebp)
f010ceab:	ff 75 14             	pushl  0x14(%ebp)
f010ceae:	ff 75 10             	pushl  0x10(%ebp)
f010ceb1:	50                   	push   %eax
f010ceb2:	e8 f8 f7 ff ff       	call   f010c6af <sys_create_env>
f010ceb7:	83 c4 10             	add    $0x10,%esp
f010ceba:	e9 80 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_free_env:
		sys_free_env((int32)a1);
f010cebf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cec2:	83 ec 0c             	sub    $0xc,%esp
f010cec5:	50                   	push   %eax
f010cec6:	e8 3c f8 ff ff       	call   f010c707 <sys_free_env>
f010cecb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cece:	b8 00 00 00 00       	mov    $0x0,%eax
f010ced3:	e9 67 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010ced8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cedb:	83 ec 0c             	sub    $0xc,%esp
f010cede:	50                   	push   %eax
f010cedf:	e8 0b f8 ff ff       	call   f010c6ef <sys_run_env>
f010cee4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cee7:	b8 00 00 00 00       	mov    $0x0,%eax
f010ceec:	e9 4e 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;

	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010cef1:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010cef4:	83 ec 0c             	sub    $0xc,%esp
f010cef7:	50                   	push   %eax
f010cef8:	e8 22 f8 ff ff       	call   f010c71f <sys_get_virtual_time>
f010cefd:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010cf00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf03:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010cf06:	8b 45 10             	mov    0x10(%ebp),%eax
f010cf09:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010cf0c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cf12:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010cf14:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cf17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cf1a:	89 10                	mov    %edx,(%eax)
		return 0;
f010cf1c:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf21:	e9 19 01 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	}
	case SYS_moveMem:
		sys_moveMem(a1, a2, a3);
f010cf26:	83 ec 04             	sub    $0x4,%esp
f010cf29:	ff 75 14             	pushl  0x14(%ebp)
f010cf2c:	ff 75 10             	pushl  0x10(%ebp)
f010cf2f:	ff 75 0c             	pushl  0xc(%ebp)
f010cf32:	e8 17 f8 ff ff       	call   f010c74e <sys_moveMem>
f010cf37:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf3a:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf3f:	e9 fb 00 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010cf44:	e8 25 f8 ff ff       	call   f010c76e <sys_rcr2>
f010cf49:	e9 f1 00 00 00       	jmp    f010d03f <syscall+0x456>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010cf4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf51:	0f b6 c0             	movzbl %al,%eax
f010cf54:	83 ec 0c             	sub    $0xc,%esp
f010cf57:	50                   	push   %eax
f010cf58:	e8 23 f8 ff ff       	call   f010c780 <sys_bypassPageFault>
f010cf5d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf60:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf65:	e9 d5 00 00 00       	jmp    f010d03f <syscall+0x456>

	case SYS_rsttst:
		rsttst();
f010cf6a:	e8 28 f8 ff ff       	call   f010c797 <rsttst>
		return 0;
f010cf6f:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf74:	e9 c6 00 00 00       	jmp    f010d03f <syscall+0x456>
	case SYS_inctst:
		inctst();
f010cf79:	e8 29 f8 ff ff       	call   f010c7a7 <inctst>
		return 0;
f010cf7e:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf83:	e9 b7 00 00 00       	jmp    f010d03f <syscall+0x456>
	case SYS_chktst:
		chktst(a1);
f010cf88:	83 ec 0c             	sub    $0xc,%esp
f010cf8b:	ff 75 0c             	pushl  0xc(%ebp)
f010cf8e:	e8 16 f9 ff ff       	call   f010c8a9 <chktst>
f010cf93:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cf96:	b8 00 00 00 00       	mov    $0x0,%eax
f010cf9b:	e9 9f 00 00 00       	jmp    f010d03f <syscall+0x456>
	case SYS_gettst:
		return gettst();
f010cfa0:	e8 13 f8 ff ff       	call   f010c7b8 <gettst>
f010cfa5:	e9 95 00 00 00       	jmp    f010d03f <syscall+0x456>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010cfaa:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010cfad:	8b 45 18             	mov    0x18(%ebp),%eax
f010cfb0:	0f be c0             	movsbl %al,%eax
f010cfb3:	83 ec 0c             	sub    $0xc,%esp
f010cfb6:	52                   	push   %edx
f010cfb7:	50                   	push   %eax
f010cfb8:	ff 75 14             	pushl  0x14(%ebp)
f010cfbb:	ff 75 10             	pushl  0x10(%ebp)
f010cfbe:	ff 75 0c             	pushl  0xc(%ebp)
f010cfc1:	e8 fc f7 ff ff       	call   f010c7c2 <tst>
f010cfc6:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cfc9:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfce:	eb 6f                	jmp    f010d03f <syscall+0x456>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010cfd0:	e8 0f f9 ff ff       	call   f010c8e4 <sys_get_heap_strategy>
f010cfd5:	eb 68                	jmp    f010d03f <syscall+0x456>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010cfd7:	83 ec 0c             	sub    $0xc,%esp
f010cfda:	ff 75 0c             	pushl  0xc(%ebp)
f010cfdd:	e8 0c f9 ff ff       	call   f010c8ee <sys_set_uheap_strategy>
f010cfe2:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cfe5:	b8 00 00 00 00       	mov    $0x0,%eax
f010cfea:	eb 53                	jmp    f010d03f <syscall+0x456>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010cfec:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cfef:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cff2:	8b 55 10             	mov    0x10(%ebp),%edx
f010cff5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cff8:	53                   	push   %ebx
f010cff9:	51                   	push   %ecx
f010cffa:	52                   	push   %edx
f010cffb:	50                   	push   %eax
f010cffc:	e8 fb f8 ff ff       	call   f010c8fc <sys_check_LRU_lists>
f010d001:	83 c4 10             	add    $0x10,%esp
f010d004:	eb 39                	jmp    f010d03f <syscall+0x456>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010d006:	8b 55 10             	mov    0x10(%ebp),%edx
f010d009:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d00c:	83 ec 08             	sub    $0x8,%esp
f010d00f:	52                   	push   %edx
f010d010:	50                   	push   %eax
f010d011:	e8 68 fa ff ff       	call   f010ca7e <sys_check_LRU_lists_free>
f010d016:	83 c4 10             	add    $0x10,%esp
f010d019:	eb 24                	jmp    f010d03f <syscall+0x456>

	case SYS_new:
		sys_new(a1, (uint32)a2);
f010d01b:	83 ec 08             	sub    $0x8,%esp
f010d01e:	ff 75 10             	pushl  0x10(%ebp)
f010d021:	ff 75 0c             	pushl  0xc(%ebp)
f010d024:	e8 c0 f4 ff ff       	call   f010c4e9 <sys_new>
f010d029:	83 c4 10             	add    $0x10,%esp
		return 0;
f010d02c:	b8 00 00 00 00       	mov    $0x0,%eax
f010d031:	eb 0c                	jmp    f010d03f <syscall+0x456>
		break;

	case NSYSCALLS:
		return 	-E_INVAL;
f010d033:	b8 03 00 00 00       	mov    $0x3,%eax
f010d038:	eb 05                	jmp    f010d03f <syscall+0x456>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010d03a:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010d03f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010d042:	5b                   	pop    %ebx
f010d043:	5e                   	pop    %esi
f010d044:	5d                   	pop    %ebp
f010d045:	c3                   	ret    

f010d046 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010d046:	55                   	push   %ebp
f010d047:	89 e5                	mov    %esp,%ebp
f010d049:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010d04c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d04f:	8b 00                	mov    (%eax),%eax
f010d051:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d054:	8b 45 10             	mov    0x10(%ebp),%eax
f010d057:	8b 00                	mov    (%eax),%eax
f010d059:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d05c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	while (l <= r) {
f010d063:	e9 ca 00 00 00       	jmp    f010d132 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010d068:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d06b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d06e:	01 d0                	add    %edx,%eax
f010d070:	89 c2                	mov    %eax,%edx
f010d072:	c1 ea 1f             	shr    $0x1f,%edx
f010d075:	01 d0                	add    %edx,%eax
f010d077:	d1 f8                	sar    %eax
f010d079:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d07c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d07f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d082:	eb 03                	jmp    f010d087 <stab_binsearch+0x41>
			m--;
f010d084:	ff 4d f0             	decl   -0x10(%ebp)
	
	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010d087:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d08a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d08d:	7c 1e                	jl     f010d0ad <stab_binsearch+0x67>
f010d08f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d092:	89 d0                	mov    %edx,%eax
f010d094:	01 c0                	add    %eax,%eax
f010d096:	01 d0                	add    %edx,%eax
f010d098:	c1 e0 02             	shl    $0x2,%eax
f010d09b:	89 c2                	mov    %eax,%edx
f010d09d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0a0:	01 d0                	add    %edx,%eax
f010d0a2:	8a 40 04             	mov    0x4(%eax),%al
f010d0a5:	0f b6 c0             	movzbl %al,%eax
f010d0a8:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d0ab:	75 d7                	jne    f010d084 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010d0ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d0b0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d0b3:	7d 09                	jge    f010d0be <stab_binsearch+0x78>
			l = true_m + 1;
f010d0b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0b8:	40                   	inc    %eax
f010d0b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010d0bc:	eb 74                	jmp    f010d132 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010d0be:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010d0c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d0c8:	89 d0                	mov    %edx,%eax
f010d0ca:	01 c0                	add    %eax,%eax
f010d0cc:	01 d0                	add    %edx,%eax
f010d0ce:	c1 e0 02             	shl    $0x2,%eax
f010d0d1:	89 c2                	mov    %eax,%edx
f010d0d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0d6:	01 d0                	add    %edx,%eax
f010d0d8:	8b 40 08             	mov    0x8(%eax),%eax
f010d0db:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d0de:	73 11                	jae    f010d0f1 <stab_binsearch+0xab>
			*region_left = m;
f010d0e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d0e6:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010d0e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0eb:	40                   	inc    %eax
f010d0ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d0ef:	eb 41                	jmp    f010d132 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010d0f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d0f4:	89 d0                	mov    %edx,%eax
f010d0f6:	01 c0                	add    %eax,%eax
f010d0f8:	01 d0                	add    %edx,%eax
f010d0fa:	c1 e0 02             	shl    $0x2,%eax
f010d0fd:	89 c2                	mov    %eax,%edx
f010d0ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010d102:	01 d0                	add    %edx,%eax
f010d104:	8b 40 08             	mov    0x8(%eax),%eax
f010d107:	3b 45 18             	cmp    0x18(%ebp),%eax
f010d10a:	76 14                	jbe    f010d120 <stab_binsearch+0xda>
			*region_right = m - 1;
f010d10c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d10f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d112:	8b 45 10             	mov    0x10(%ebp),%eax
f010d115:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010d117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d11a:	48                   	dec    %eax
f010d11b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d11e:	eb 12                	jmp    f010d132 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010d120:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d123:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d126:	89 10                	mov    %edx,(%eax)
			l = m;
f010d128:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d12b:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010d12e:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;
	
	while (l <= r) {
f010d132:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d135:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010d138:	0f 8e 2a ff ff ff    	jle    f010d068 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010d13e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d142:	75 0f                	jne    f010d153 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010d144:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d147:	8b 00                	mov    (%eax),%eax
f010d149:	8d 50 ff             	lea    -0x1(%eax),%edx
f010d14c:	8b 45 10             	mov    0x10(%ebp),%eax
f010d14f:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010d151:	eb 3d                	jmp    f010d190 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d153:	8b 45 10             	mov    0x10(%ebp),%eax
f010d156:	8b 00                	mov    (%eax),%eax
f010d158:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010d15b:	eb 03                	jmp    f010d160 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010d15d:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010d160:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d163:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010d165:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010d168:	7d 1e                	jge    f010d188 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010d16a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d16d:	89 d0                	mov    %edx,%eax
f010d16f:	01 c0                	add    %eax,%eax
f010d171:	01 d0                	add    %edx,%eax
f010d173:	c1 e0 02             	shl    $0x2,%eax
f010d176:	89 c2                	mov    %eax,%edx
f010d178:	8b 45 08             	mov    0x8(%ebp),%eax
f010d17b:	01 d0                	add    %edx,%eax
f010d17d:	8a 40 04             	mov    0x4(%eax),%al
f010d180:	0f b6 c0             	movzbl %al,%eax
f010d183:	3b 45 14             	cmp    0x14(%ebp),%eax
f010d186:	75 d5                	jne    f010d15d <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010d188:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d18b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d18e:	89 10                	mov    %edx,(%eax)
	}
}
f010d190:	90                   	nop
f010d191:	c9                   	leave  
f010d192:	c3                   	ret    

f010d193 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010d193:	55                   	push   %ebp
f010d194:	89 e5                	mov    %esp,%ebp
f010d196:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010d199:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d19c:	c7 00 64 fa 11 f0    	movl   $0xf011fa64,(%eax)
	info->eip_line = 0;
f010d1a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1a5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010d1ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1af:	c7 40 08 64 fa 11 f0 	movl   $0xf011fa64,0x8(%eax)
	info->eip_fn_namelen = 9;
f010d1b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1b9:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010d1c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1c3:	8b 55 08             	mov    0x8(%ebp),%edx
f010d1c6:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010d1c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1cc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010d1d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d6:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010d1db:	76 1e                	jbe    f010d1fb <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010d1dd:	c7 45 f4 18 0e 12 f0 	movl   $0xf0120e18,-0xc(%ebp)
		stab_end = __STAB_END__;
f010d1e4:	c7 45 f0 74 58 14 f0 	movl   $0xf0145874,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010d1eb:	c7 45 ec 75 58 14 f0 	movl   $0xf0145875,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010d1f2:	c7 45 e8 5c ef 14 f0 	movl   $0xf014ef5c,-0x18(%ebp)
f010d1f9:	eb 2a                	jmp    f010d225 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010d1fb:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.
		
		stabs = usd->stabs;
f010d202:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d205:	8b 00                	mov    (%eax),%eax
f010d207:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010d20a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d20d:	8b 40 04             	mov    0x4(%eax),%eax
f010d210:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010d213:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d216:	8b 40 08             	mov    0x8(%eax),%eax
f010d219:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010d21c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d21f:	8b 40 0c             	mov    0xc(%eax),%eax
f010d222:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010d225:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d228:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d22b:	76 0a                	jbe    f010d237 <debuginfo_eip+0xa4>
f010d22d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d230:	48                   	dec    %eax
f010d231:	8a 00                	mov    (%eax),%al
f010d233:	84 c0                	test   %al,%al
f010d235:	74 0a                	je     f010d241 <debuginfo_eip+0xae>
		return -1;
f010d237:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d23c:	e9 01 02 00 00       	jmp    f010d442 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.
	
	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010d241:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010d248:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d24b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d24e:	29 c2                	sub    %eax,%edx
f010d250:	89 d0                	mov    %edx,%eax
f010d252:	c1 f8 02             	sar    $0x2,%eax
f010d255:	89 c2                	mov    %eax,%edx
f010d257:	89 d0                	mov    %edx,%eax
f010d259:	c1 e0 02             	shl    $0x2,%eax
f010d25c:	01 d0                	add    %edx,%eax
f010d25e:	c1 e0 02             	shl    $0x2,%eax
f010d261:	01 d0                	add    %edx,%eax
f010d263:	c1 e0 02             	shl    $0x2,%eax
f010d266:	01 d0                	add    %edx,%eax
f010d268:	89 c1                	mov    %eax,%ecx
f010d26a:	c1 e1 08             	shl    $0x8,%ecx
f010d26d:	01 c8                	add    %ecx,%eax
f010d26f:	89 c1                	mov    %eax,%ecx
f010d271:	c1 e1 10             	shl    $0x10,%ecx
f010d274:	01 c8                	add    %ecx,%eax
f010d276:	01 c0                	add    %eax,%eax
f010d278:	01 d0                	add    %edx,%eax
f010d27a:	48                   	dec    %eax
f010d27b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d27e:	ff 75 08             	pushl  0x8(%ebp)
f010d281:	6a 64                	push   $0x64
f010d283:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d286:	50                   	push   %eax
f010d287:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d28a:	50                   	push   %eax
f010d28b:	ff 75 f4             	pushl  -0xc(%ebp)
f010d28e:	e8 b3 fd ff ff       	call   f010d046 <stab_binsearch>
f010d293:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d296:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d299:	85 c0                	test   %eax,%eax
f010d29b:	75 0a                	jne    f010d2a7 <debuginfo_eip+0x114>
		return -1;
f010d29d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d2a2:	e9 9b 01 00 00       	jmp    f010d442 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d2a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d2aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d2ad:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d2b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d2b3:	ff 75 08             	pushl  0x8(%ebp)
f010d2b6:	6a 24                	push   $0x24
f010d2b8:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d2bb:	50                   	push   %eax
f010d2bc:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d2bf:	50                   	push   %eax
f010d2c0:	ff 75 f4             	pushl  -0xc(%ebp)
f010d2c3:	e8 7e fd ff ff       	call   f010d046 <stab_binsearch>
f010d2c8:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d2cb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d2ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d2d1:	39 c2                	cmp    %eax,%edx
f010d2d3:	0f 8f 86 00 00 00    	jg     f010d35f <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d2d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d2dc:	89 c2                	mov    %eax,%edx
f010d2de:	89 d0                	mov    %edx,%eax
f010d2e0:	01 c0                	add    %eax,%eax
f010d2e2:	01 d0                	add    %edx,%eax
f010d2e4:	c1 e0 02             	shl    $0x2,%eax
f010d2e7:	89 c2                	mov    %eax,%edx
f010d2e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d2ec:	01 d0                	add    %edx,%eax
f010d2ee:	8b 00                	mov    (%eax),%eax
f010d2f0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d2f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d2f6:	29 d1                	sub    %edx,%ecx
f010d2f8:	89 ca                	mov    %ecx,%edx
f010d2fa:	39 d0                	cmp    %edx,%eax
f010d2fc:	73 22                	jae    f010d320 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d2fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d301:	89 c2                	mov    %eax,%edx
f010d303:	89 d0                	mov    %edx,%eax
f010d305:	01 c0                	add    %eax,%eax
f010d307:	01 d0                	add    %edx,%eax
f010d309:	c1 e0 02             	shl    $0x2,%eax
f010d30c:	89 c2                	mov    %eax,%edx
f010d30e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d311:	01 d0                	add    %edx,%eax
f010d313:	8b 10                	mov    (%eax),%edx
f010d315:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d318:	01 c2                	add    %eax,%edx
f010d31a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d31d:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d320:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d323:	89 c2                	mov    %eax,%edx
f010d325:	89 d0                	mov    %edx,%eax
f010d327:	01 c0                	add    %eax,%eax
f010d329:	01 d0                	add    %edx,%eax
f010d32b:	c1 e0 02             	shl    $0x2,%eax
f010d32e:	89 c2                	mov    %eax,%edx
f010d330:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d333:	01 d0                	add    %edx,%eax
f010d335:	8b 50 08             	mov    0x8(%eax),%edx
f010d338:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d33b:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d33e:	8b 55 08             	mov    0x8(%ebp),%edx
f010d341:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d344:	8b 40 10             	mov    0x10(%eax),%eax
f010d347:	29 c2                	sub    %eax,%edx
f010d349:	89 d0                	mov    %edx,%eax
f010d34b:	c1 f8 02             	sar    $0x2,%eax
f010d34e:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d351:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d354:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d357:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d35a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d35d:	eb 15                	jmp    f010d374 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d35f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d362:	8b 55 08             	mov    0x8(%ebp),%edx
f010d365:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d368:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d36b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d36e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d371:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d374:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d377:	8b 40 08             	mov    0x8(%eax),%eax
f010d37a:	83 ec 08             	sub    $0x8,%esp
f010d37d:	6a 3a                	push   $0x3a
f010d37f:	50                   	push   %eax
f010d380:	e8 fc e0 00 00       	call   f011b481 <strfind>
f010d385:	83 c4 10             	add    $0x10,%esp
f010d388:	89 c2                	mov    %eax,%edx
f010d38a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d38d:	8b 40 08             	mov    0x8(%eax),%eax
f010d390:	29 c2                	sub    %eax,%edx
f010d392:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d395:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d398:	eb 03                	jmp    f010d39d <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d39a:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d39d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d3a0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d3a3:	7c 4e                	jl     f010d3f3 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d3a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d3a8:	89 d0                	mov    %edx,%eax
f010d3aa:	01 c0                	add    %eax,%eax
f010d3ac:	01 d0                	add    %edx,%eax
f010d3ae:	c1 e0 02             	shl    $0x2,%eax
f010d3b1:	89 c2                	mov    %eax,%edx
f010d3b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3b6:	01 d0                	add    %edx,%eax
f010d3b8:	8a 40 04             	mov    0x4(%eax),%al
f010d3bb:	3c 84                	cmp    $0x84,%al
f010d3bd:	74 34                	je     f010d3f3 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d3bf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d3c2:	89 d0                	mov    %edx,%eax
f010d3c4:	01 c0                	add    %eax,%eax
f010d3c6:	01 d0                	add    %edx,%eax
f010d3c8:	c1 e0 02             	shl    $0x2,%eax
f010d3cb:	89 c2                	mov    %eax,%edx
f010d3cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3d0:	01 d0                	add    %edx,%eax
f010d3d2:	8a 40 04             	mov    0x4(%eax),%al
f010d3d5:	3c 64                	cmp    $0x64,%al
f010d3d7:	75 c1                	jne    f010d39a <debuginfo_eip+0x207>
f010d3d9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d3dc:	89 d0                	mov    %edx,%eax
f010d3de:	01 c0                	add    %eax,%eax
f010d3e0:	01 d0                	add    %edx,%eax
f010d3e2:	c1 e0 02             	shl    $0x2,%eax
f010d3e5:	89 c2                	mov    %eax,%edx
f010d3e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3ea:	01 d0                	add    %edx,%eax
f010d3ec:	8b 40 08             	mov    0x8(%eax),%eax
f010d3ef:	85 c0                	test   %eax,%eax
f010d3f1:	74 a7                	je     f010d39a <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d3f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d3f6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d3f9:	7c 42                	jl     f010d43d <debuginfo_eip+0x2aa>
f010d3fb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d3fe:	89 d0                	mov    %edx,%eax
f010d400:	01 c0                	add    %eax,%eax
f010d402:	01 d0                	add    %edx,%eax
f010d404:	c1 e0 02             	shl    $0x2,%eax
f010d407:	89 c2                	mov    %eax,%edx
f010d409:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d40c:	01 d0                	add    %edx,%eax
f010d40e:	8b 00                	mov    (%eax),%eax
f010d410:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d413:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d416:	29 d1                	sub    %edx,%ecx
f010d418:	89 ca                	mov    %ecx,%edx
f010d41a:	39 d0                	cmp    %edx,%eax
f010d41c:	73 1f                	jae    f010d43d <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d41e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d421:	89 d0                	mov    %edx,%eax
f010d423:	01 c0                	add    %eax,%eax
f010d425:	01 d0                	add    %edx,%eax
f010d427:	c1 e0 02             	shl    $0x2,%eax
f010d42a:	89 c2                	mov    %eax,%edx
f010d42c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d42f:	01 d0                	add    %edx,%eax
f010d431:	8b 10                	mov    (%eax),%edx
f010d433:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d436:	01 c2                	add    %eax,%edx
f010d438:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d43b:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.

	
	return 0;
f010d43d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d442:	c9                   	leave  
f010d443:	c3                   	ret    

f010d444 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010d444:	55                   	push   %ebp
f010d445:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010d447:	8b 45 08             	mov    0x8(%ebp),%eax
f010d44a:	8b 15 64 da 3c f0    	mov    0xf03cda64,%edx
f010d450:	29 d0                	sub    %edx,%eax
f010d452:	c1 f8 03             	sar    $0x3,%eax
f010d455:	89 c2                	mov    %eax,%edx
f010d457:	89 d0                	mov    %edx,%eax
f010d459:	c1 e0 02             	shl    $0x2,%eax
f010d45c:	01 d0                	add    %edx,%eax
f010d45e:	c1 e0 02             	shl    $0x2,%eax
f010d461:	01 d0                	add    %edx,%eax
f010d463:	c1 e0 02             	shl    $0x2,%eax
f010d466:	01 d0                	add    %edx,%eax
f010d468:	89 c1                	mov    %eax,%ecx
f010d46a:	c1 e1 08             	shl    $0x8,%ecx
f010d46d:	01 c8                	add    %ecx,%eax
f010d46f:	89 c1                	mov    %eax,%ecx
f010d471:	c1 e1 10             	shl    $0x10,%ecx
f010d474:	01 c8                	add    %ecx,%eax
f010d476:	01 c0                	add    %eax,%eax
f010d478:	01 d0                	add    %edx,%eax
}
f010d47a:	5d                   	pop    %ebp
f010d47b:	c3                   	ret    

f010d47c <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010d47c:	55                   	push   %ebp
f010d47d:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010d47f:	ff 75 08             	pushl  0x8(%ebp)
f010d482:	e8 bd ff ff ff       	call   f010d444 <to_frame_number>
f010d487:	83 c4 04             	add    $0x4,%esp
f010d48a:	c1 e0 0c             	shl    $0xc,%eax
}
f010d48d:	c9                   	leave  
f010d48e:	c3                   	ret    

f010d48f <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f010d48f:	55                   	push   %ebp
f010d490:	89 e5                	mov    %esp,%ebp
f010d492:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010d495:	8b 45 08             	mov    0x8(%ebp),%eax
f010d498:	c1 e8 0c             	shr    $0xc,%eax
f010d49b:	89 c2                	mov    %eax,%edx
f010d49d:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010d4a2:	39 c2                	cmp    %eax,%edx
f010d4a4:	72 14                	jb     f010d4ba <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010d4a6:	83 ec 04             	sub    $0x4,%esp
f010d4a9:	68 70 fa 11 f0       	push   $0xf011fa70
f010d4ae:	6a 78                	push   $0x78
f010d4b0:	68 95 fa 11 f0       	push   $0xf011fa95
f010d4b5:	e8 d9 2c ff ff       	call   f0100193 <_panic>
	return &frames_info[PPN(physical_address)];
f010d4ba:	8b 15 64 da 3c f0    	mov    0xf03cda64,%edx
f010d4c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4c3:	c1 e8 0c             	shr    $0xc,%eax
f010d4c6:	89 c1                	mov    %eax,%ecx
f010d4c8:	89 c8                	mov    %ecx,%eax
f010d4ca:	01 c0                	add    %eax,%eax
f010d4cc:	01 c8                	add    %ecx,%eax
f010d4ce:	c1 e0 03             	shl    $0x3,%eax
f010d4d1:	01 d0                	add    %edx,%eax
}
f010d4d3:	c9                   	leave  
f010d4d4:	c3                   	ret    

f010d4d5 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010d4d5:	55                   	push   %ebp
f010d4d6:	89 e5                	mov    %esp,%ebp
f010d4d8:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010d4db:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4de:	05 00 14 00 00       	add    $0x1400,%eax
f010d4e3:	c1 e0 03             	shl    $0x3,%eax
f010d4e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010d4e9:	83 ec 04             	sub    $0x4,%esp
f010d4ec:	6a 08                	push   $0x8
f010d4ee:	ff 75 0c             	pushl  0xc(%ebp)
f010d4f1:	ff 75 f4             	pushl  -0xc(%ebp)
f010d4f4:	e8 19 e5 00 00       	call   f011ba12 <ide_read>
f010d4f9:	83 c4 10             	add    $0x10,%esp
f010d4fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010d4ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010d502:	c9                   	leave  
f010d503:	c3                   	ret    

f010d504 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010d504:	55                   	push   %ebp
f010d505:	89 e5                	mov    %esp,%ebp
f010d507:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010d50a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d50d:	05 00 14 00 00       	add    $0x1400,%eax
f010d512:	c1 e0 03             	shl    $0x3,%eax
f010d515:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010d518:	83 ec 04             	sub    $0x4,%esp
f010d51b:	6a 08                	push   $0x8
f010d51d:	ff 75 0c             	pushl  0xc(%ebp)
f010d520:	ff 75 f4             	pushl  -0xc(%ebp)
f010d523:	e8 2a e6 00 00       	call   f011bb52 <ide_write>
f010d528:	83 c4 10             	add    $0x10,%esp
f010d52b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010d52e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d532:	74 14                	je     f010d548 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010d534:	83 ec 04             	sub    $0x4,%esp
f010d537:	68 ad fa 11 f0       	push   $0xf011faad
f010d53c:	6a 37                	push   $0x37
f010d53e:	68 c4 fa 11 f0       	push   $0xf011fac4
f010d543:	e8 4b 2c ff ff       	call   f0100193 <_panic>
	return success;
f010d548:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010d54b:	c9                   	leave  
f010d54c:	c3                   	ret    

f010d54d <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010d54d:	55                   	push   %ebp
f010d54e:	89 e5                	mov    %esp,%ebp
f010d550:	53                   	push   %ebx
f010d551:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f010d554:	c7 05 58 db 3c f0 00 	movl   $0x0,0xf03cdb58
f010d55b:	00 00 00 
f010d55e:	c7 05 5c db 3c f0 00 	movl   $0x0,0xf03cdb5c
f010d565:	00 00 00 
f010d568:	c7 05 64 db 3c f0 00 	movl   $0x0,0xf03cdb64
f010d56f:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010d572:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010d579:	e9 bc 00 00 00       	jmp    f010d63a <initialize_disk_page_file+0xed>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010d57e:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d584:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d587:	89 d0                	mov    %edx,%eax
f010d589:	01 c0                	add    %eax,%eax
f010d58b:	01 d0                	add    %edx,%eax
f010d58d:	c1 e0 03             	shl    $0x3,%eax
f010d590:	01 c8                	add    %ecx,%eax
f010d592:	83 ec 0c             	sub    $0xc,%esp
f010d595:	50                   	push   %eax
f010d596:	e8 36 67 ff ff       	call   f0103cd1 <initialize_frame_info>
f010d59b:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010d59e:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d5a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5a7:	89 d0                	mov    %edx,%eax
f010d5a9:	01 c0                	add    %eax,%eax
f010d5ab:	01 d0                	add    %edx,%eax
f010d5ad:	c1 e0 03             	shl    $0x3,%eax
f010d5b0:	01 c8                	add    %ecx,%eax
f010d5b2:	8b 15 58 db 3c f0    	mov    0xf03cdb58,%edx
f010d5b8:	89 10                	mov    %edx,(%eax)
f010d5ba:	8b 00                	mov    (%eax),%eax
f010d5bc:	85 c0                	test   %eax,%eax
f010d5be:	74 1f                	je     f010d5df <initialize_disk_page_file+0x92>
f010d5c0:	8b 15 58 db 3c f0    	mov    0xf03cdb58,%edx
f010d5c6:	8b 1d 50 da 3c f0    	mov    0xf03cda50,%ebx
f010d5cc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010d5cf:	89 c8                	mov    %ecx,%eax
f010d5d1:	01 c0                	add    %eax,%eax
f010d5d3:	01 c8                	add    %ecx,%eax
f010d5d5:	c1 e0 03             	shl    $0x3,%eax
f010d5d8:	01 d8                	add    %ebx,%eax
f010d5da:	89 42 04             	mov    %eax,0x4(%edx)
f010d5dd:	eb 19                	jmp    f010d5f8 <initialize_disk_page_file+0xab>
f010d5df:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d5e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d5e8:	89 d0                	mov    %edx,%eax
f010d5ea:	01 c0                	add    %eax,%eax
f010d5ec:	01 d0                	add    %edx,%eax
f010d5ee:	c1 e0 03             	shl    $0x3,%eax
f010d5f1:	01 c8                	add    %ecx,%eax
f010d5f3:	a3 5c db 3c f0       	mov    %eax,0xf03cdb5c
f010d5f8:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d5fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d601:	89 d0                	mov    %edx,%eax
f010d603:	01 c0                	add    %eax,%eax
f010d605:	01 d0                	add    %edx,%eax
f010d607:	c1 e0 03             	shl    $0x3,%eax
f010d60a:	01 c8                	add    %ecx,%eax
f010d60c:	a3 58 db 3c f0       	mov    %eax,0xf03cdb58
f010d611:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d617:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d61a:	89 d0                	mov    %edx,%eax
f010d61c:	01 c0                	add    %eax,%eax
f010d61e:	01 d0                	add    %edx,%eax
f010d620:	c1 e0 03             	shl    $0x3,%eax
f010d623:	01 c8                	add    %ecx,%eax
f010d625:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010d62c:	a1 64 db 3c f0       	mov    0xf03cdb64,%eax
f010d631:	40                   	inc    %eax
f010d632:	a3 64 db 3c f0       	mov    %eax,0xf03cdb64
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010d637:	ff 45 f4             	incl   -0xc(%ebp)
f010d63a:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f010d641:	0f 8e 37 ff ff ff    	jle    f010d57e <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f010d647:	90                   	nop
f010d648:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010d64b:	c9                   	leave  
f010d64c:	c3                   	ret    

f010d64d <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct Frame_Info *ptr_frame_info)
{
f010d64d:	55                   	push   %ebp
f010d64e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010d650:	8b 45 08             	mov    0x8(%ebp),%eax
f010d653:	8b 15 50 da 3c f0    	mov    0xf03cda50,%edx
f010d659:	29 d0                	sub    %edx,%eax
f010d65b:	c1 f8 03             	sar    $0x3,%eax
f010d65e:	89 c2                	mov    %eax,%edx
f010d660:	89 d0                	mov    %edx,%eax
f010d662:	c1 e0 02             	shl    $0x2,%eax
f010d665:	01 d0                	add    %edx,%eax
f010d667:	c1 e0 02             	shl    $0x2,%eax
f010d66a:	01 d0                	add    %edx,%eax
f010d66c:	c1 e0 02             	shl    $0x2,%eax
f010d66f:	01 d0                	add    %edx,%eax
f010d671:	89 c1                	mov    %eax,%ecx
f010d673:	c1 e1 08             	shl    $0x8,%ecx
f010d676:	01 c8                	add    %ecx,%eax
f010d678:	89 c1                	mov    %eax,%ecx
f010d67a:	c1 e1 10             	shl    $0x10,%ecx
f010d67d:	01 c8                	add    %ecx,%eax
f010d67f:	01 c0                	add    %eax,%eax
f010d681:	01 d0                	add    %edx,%eax
}
f010d683:	5d                   	pop    %ebp
f010d684:	c3                   	ret    

f010d685 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010d685:	55                   	push   %ebp
f010d686:	89 e5                	mov    %esp,%ebp
f010d688:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct Frame_Info *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010d68b:	a1 58 db 3c f0       	mov    0xf03cdb58,%eax
f010d690:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010d693:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d697:	75 0a                	jne    f010d6a3 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010d699:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010d69e:	e9 8d 00 00 00       	jmp    f010d730 <allocate_disk_frame+0xab>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010d6a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6a6:	8b 00                	mov    (%eax),%eax
f010d6a8:	85 c0                	test   %eax,%eax
f010d6aa:	74 10                	je     f010d6bc <allocate_disk_frame+0x37>
f010d6ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6af:	8b 00                	mov    (%eax),%eax
f010d6b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d6b4:	8b 52 04             	mov    0x4(%edx),%edx
f010d6b7:	89 50 04             	mov    %edx,0x4(%eax)
f010d6ba:	eb 0b                	jmp    f010d6c7 <allocate_disk_frame+0x42>
f010d6bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6bf:	8b 40 04             	mov    0x4(%eax),%eax
f010d6c2:	a3 5c db 3c f0       	mov    %eax,0xf03cdb5c
f010d6c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6ca:	8b 40 04             	mov    0x4(%eax),%eax
f010d6cd:	85 c0                	test   %eax,%eax
f010d6cf:	74 0f                	je     f010d6e0 <allocate_disk_frame+0x5b>
f010d6d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6d4:	8b 40 04             	mov    0x4(%eax),%eax
f010d6d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d6da:	8b 12                	mov    (%edx),%edx
f010d6dc:	89 10                	mov    %edx,(%eax)
f010d6de:	eb 0a                	jmp    f010d6ea <allocate_disk_frame+0x65>
f010d6e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6e3:	8b 00                	mov    (%eax),%eax
f010d6e5:	a3 58 db 3c f0       	mov    %eax,0xf03cdb58
f010d6ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d6f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d6f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010d6fd:	a1 64 db 3c f0       	mov    0xf03cdb64,%eax
f010d702:	48                   	dec    %eax
f010d703:	a3 64 db 3c f0       	mov    %eax,0xf03cdb64
	initialize_frame_info(ptr_frame_info);
f010d708:	83 ec 0c             	sub    $0xc,%esp
f010d70b:	ff 75 f4             	pushl  -0xc(%ebp)
f010d70e:	e8 be 65 ff ff       	call   f0103cd1 <initialize_frame_info>
f010d713:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010d716:	83 ec 0c             	sub    $0xc,%esp
f010d719:	ff 75 f4             	pushl  -0xc(%ebp)
f010d71c:	e8 2c ff ff ff       	call   f010d64d <to_disk_frame_number>
f010d721:	83 c4 10             	add    $0x10,%esp
f010d724:	89 c2                	mov    %eax,%edx
f010d726:	8b 45 08             	mov    0x8(%ebp),%eax
f010d729:	89 10                	mov    %edx,(%eax)
	return 0;
f010d72b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d730:	c9                   	leave  
f010d731:	c3                   	ret    

f010d732 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010d732:	55                   	push   %ebp
f010d733:	89 e5                	mov    %esp,%ebp
f010d735:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f010d736:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d73a:	0f 84 9b 00 00 00    	je     f010d7db <free_disk_frame+0xa9>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010d740:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d746:	8b 55 08             	mov    0x8(%ebp),%edx
f010d749:	89 d0                	mov    %edx,%eax
f010d74b:	01 c0                	add    %eax,%eax
f010d74d:	01 d0                	add    %edx,%eax
f010d74f:	c1 e0 03             	shl    $0x3,%eax
f010d752:	01 c8                	add    %ecx,%eax
f010d754:	8b 15 58 db 3c f0    	mov    0xf03cdb58,%edx
f010d75a:	89 10                	mov    %edx,(%eax)
f010d75c:	8b 00                	mov    (%eax),%eax
f010d75e:	85 c0                	test   %eax,%eax
f010d760:	74 1f                	je     f010d781 <free_disk_frame+0x4f>
f010d762:	8b 15 58 db 3c f0    	mov    0xf03cdb58,%edx
f010d768:	8b 1d 50 da 3c f0    	mov    0xf03cda50,%ebx
f010d76e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d771:	89 c8                	mov    %ecx,%eax
f010d773:	01 c0                	add    %eax,%eax
f010d775:	01 c8                	add    %ecx,%eax
f010d777:	c1 e0 03             	shl    $0x3,%eax
f010d77a:	01 d8                	add    %ebx,%eax
f010d77c:	89 42 04             	mov    %eax,0x4(%edx)
f010d77f:	eb 19                	jmp    f010d79a <free_disk_frame+0x68>
f010d781:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d787:	8b 55 08             	mov    0x8(%ebp),%edx
f010d78a:	89 d0                	mov    %edx,%eax
f010d78c:	01 c0                	add    %eax,%eax
f010d78e:	01 d0                	add    %edx,%eax
f010d790:	c1 e0 03             	shl    $0x3,%eax
f010d793:	01 c8                	add    %ecx,%eax
f010d795:	a3 5c db 3c f0       	mov    %eax,0xf03cdb5c
f010d79a:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d7a0:	8b 55 08             	mov    0x8(%ebp),%edx
f010d7a3:	89 d0                	mov    %edx,%eax
f010d7a5:	01 c0                	add    %eax,%eax
f010d7a7:	01 d0                	add    %edx,%eax
f010d7a9:	c1 e0 03             	shl    $0x3,%eax
f010d7ac:	01 c8                	add    %ecx,%eax
f010d7ae:	a3 58 db 3c f0       	mov    %eax,0xf03cdb58
f010d7b3:	8b 0d 50 da 3c f0    	mov    0xf03cda50,%ecx
f010d7b9:	8b 55 08             	mov    0x8(%ebp),%edx
f010d7bc:	89 d0                	mov    %edx,%eax
f010d7be:	01 c0                	add    %eax,%eax
f010d7c0:	01 d0                	add    %edx,%eax
f010d7c2:	c1 e0 03             	shl    $0x3,%eax
f010d7c5:	01 c8                	add    %ecx,%eax
f010d7c7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010d7ce:	a1 64 db 3c f0       	mov    0xf03cdb64,%eax
f010d7d3:	40                   	inc    %eax
f010d7d4:	a3 64 db 3c f0       	mov    %eax,0xf03cdb64
f010d7d9:	eb 01                	jmp    f010d7dc <free_disk_frame+0xaa>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f010d7db:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f010d7dc:	5b                   	pop    %ebx
f010d7dd:	5d                   	pop    %ebp
f010d7de:	c3                   	ret    

f010d7df <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const void *virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010d7df:	55                   	push   %ebp
f010d7e0:	89 e5                	mov    %esp,%ebp
f010d7e2:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f010d7e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d7e8:	c1 e8 16             	shr    $0x16,%eax
f010d7eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010d7f2:	8b 45 08             	mov    0x8(%ebp),%eax
f010d7f5:	01 d0                	add    %edx,%eax
f010d7f7:	8b 00                	mov    (%eax),%eax
f010d7f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010d7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d804:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d807:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d80a:	c1 e8 0c             	shr    $0xc,%eax
f010d80d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010d810:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010d815:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010d818:	72 17                	jb     f010d831 <get_disk_page_table+0x52>
f010d81a:	ff 75 f0             	pushl  -0x10(%ebp)
f010d81d:	68 d8 fa 11 f0       	push   $0xf011fad8
f010d822:	68 9b 00 00 00       	push   $0x9b
f010d827:	68 c4 fa 11 f0       	push   $0xf011fac4
f010d82c:	e8 62 29 ff ff       	call   f0100193 <_panic>
f010d831:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d834:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010d839:	89 c2                	mov    %eax,%edx
f010d83b:	8b 45 14             	mov    0x14(%ebp),%eax
f010d83e:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010d840:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d844:	0f 85 b7 00 00 00    	jne    f010d901 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010d84a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010d84e:	0f 84 9d 00 00 00    	je     f010d8f1 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
			#else
			{
				struct Frame_Info* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f010d854:	83 ec 0c             	sub    $0xc,%esp
f010d857:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010d85a:	50                   	push   %eax
f010d85b:	e8 8c 64 ff ff       	call   f0103cec <allocate_frame>
f010d860:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f010d863:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d866:	83 ec 0c             	sub    $0xc,%esp
f010d869:	50                   	push   %eax
f010d86a:	e8 0d fc ff ff       	call   f010d47c <to_physical_address>
f010d86f:	83 c4 10             	add    $0x10,%esp
f010d872:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010d875:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d878:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d87b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d87e:	c1 e8 0c             	shr    $0xc,%eax
f010d881:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d884:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010d889:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010d88c:	72 17                	jb     f010d8a5 <get_disk_page_table+0xc6>
f010d88e:	ff 75 e4             	pushl  -0x1c(%ebp)
f010d891:	68 d8 fa 11 f0       	push   $0xf011fad8
f010d896:	68 b7 00 00 00       	push   $0xb7
f010d89b:	68 c4 fa 11 f0       	push   $0xf011fac4
f010d8a0:	e8 ee 28 ff ff       	call   f0100193 <_panic>
f010d8a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d8a8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010d8ad:	89 c2                	mov    %eax,%edx
f010d8af:	8b 45 14             	mov    0x14(%ebp),%eax
f010d8b2:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f010d8b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d8b7:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f010d8bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8c0:	c1 e8 16             	shr    $0x16,%eax
f010d8c3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010d8ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8cd:	01 d0                	add    %edx,%eax
f010d8cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d8d2:	83 ca 01             	or     $0x1,%edx
f010d8d5:	89 10                	mov    %edx,(%eax)
			}
			#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010d8d7:	8b 45 14             	mov    0x14(%ebp),%eax
f010d8da:	8b 00                	mov    (%eax),%eax
f010d8dc:	83 ec 04             	sub    $0x4,%esp
f010d8df:	68 00 10 00 00       	push   $0x1000
f010d8e4:	6a 00                	push   $0x0
f010d8e6:	50                   	push   %eax
f010d8e7:	e8 c1 db 00 00       	call   f011b4ad <memset>
f010d8ec:	83 c4 10             	add    $0x10,%esp
f010d8ef:	eb 10                	jmp    f010d901 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010d8f1:	8b 45 14             	mov    0x14(%ebp),%eax
f010d8f4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010d8fa:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8ff:	eb 05                	jmp    f010d906 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010d901:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d906:	c9                   	leave  
f010d907:	c3                   	ret    

f010d908 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010d908:	55                   	push   %ebp
f010d909:	89 e5                	mov    %esp,%ebp
f010d90b:	83 ec 28             	sub    $0x28,%esp
f010d90e:	8b 45 10             	mov    0x10(%ebp),%eax
f010d911:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010d914:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010d918:	74 75                	je     f010d98f <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010d91a:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010d921:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d924:	2d 01 90 f5 5f       	sub    $0x5ff59001,%eax
f010d929:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d92c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d92f:	ba 00 00 00 00       	mov    $0x0,%edx
f010d934:	f7 75 f4             	divl   -0xc(%ebp)
f010d937:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d93a:	29 d0                	sub    %edx,%eax
f010d93c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d93f:	73 32                	jae    f010d973 <pf_add_empty_env_page+0x6b>
f010d941:	8b 45 08             	mov    0x8(%ebp),%eax
f010d944:	8b 90 ac 52 00 00    	mov    0x52ac(%eax),%edx
f010d94a:	b8 00 00 00 00       	mov    $0x0,%eax
f010d94f:	29 d0                	sub    %edx,%eax
f010d951:	c1 e0 0c             	shl    $0xc,%eax
f010d954:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010d959:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d95c:	76 15                	jbe    f010d973 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010d95e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d961:	8b 80 a8 52 00 00    	mov    0x52a8(%eax),%eax
f010d967:	8d 50 01             	lea    0x1(%eax),%edx
f010d96a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d96d:	89 90 a8 52 00 00    	mov    %edx,0x52a8(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010d973:	a1 68 da 3c f0       	mov    0xf03cda68,%eax
f010d978:	83 ec 04             	sub    $0x4,%esp
f010d97b:	50                   	push   %eax
f010d97c:	ff 75 0c             	pushl  0xc(%ebp)
f010d97f:	ff 75 08             	pushl  0x8(%ebp)
f010d982:	e8 b3 00 00 00       	call   f010da3a <pf_add_env_page>
f010d987:	83 c4 10             	add    $0x10,%esp
f010d98a:	e9 a9 00 00 00       	jmp    f010da38 <pf_add_empty_env_page+0x130>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010d98f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010d996:	76 19                	jbe    f010d9b1 <pf_add_empty_env_page+0xa9>
f010d998:	68 08 fb 11 f0       	push   $0xf011fb08
f010d99d:	68 2e fb 11 f0       	push   $0xf011fb2e
f010d9a2:	68 da 00 00 00       	push   $0xda
f010d9a7:	68 c4 fa 11 f0       	push   $0xf011fac4
f010d9ac:	e8 e2 27 ff ff       	call   f0100193 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010d9b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9b4:	83 c0 64             	add    $0x64,%eax
f010d9b7:	83 ec 08             	sub    $0x8,%esp
f010d9ba:	50                   	push   %eax
f010d9bb:	ff 75 08             	pushl  0x8(%ebp)
f010d9be:	e8 37 05 00 00       	call   f010defa <get_disk_page_directory>
f010d9c3:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010d9c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d9c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d9cc:	8b 40 64             	mov    0x64(%eax),%eax
f010d9cf:	8d 4d ec             	lea    -0x14(%ebp),%ecx
f010d9d2:	51                   	push   %ecx
f010d9d3:	6a 01                	push   $0x1
f010d9d5:	52                   	push   %edx
f010d9d6:	50                   	push   %eax
f010d9d7:	e8 03 fe ff ff       	call   f010d7df <get_disk_page_table>
f010d9dc:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010d9df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9e2:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d9e5:	c1 ea 0c             	shr    $0xc,%edx
f010d9e8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010d9ee:	c1 e2 02             	shl    $0x2,%edx
f010d9f1:	01 d0                	add    %edx,%eax
f010d9f3:	8b 00                	mov    (%eax),%eax
f010d9f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f010d9f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d9fb:	85 c0                	test   %eax,%eax
f010d9fd:	75 34                	jne    f010da33 <pf_add_empty_env_page+0x12b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010d9ff:	83 ec 0c             	sub    $0xc,%esp
f010da02:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010da05:	50                   	push   %eax
f010da06:	e8 7a fc ff ff       	call   f010d685 <allocate_disk_frame>
f010da0b:	83 c4 10             	add    $0x10,%esp
f010da0e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010da11:	75 07                	jne    f010da1a <pf_add_empty_env_page+0x112>
f010da13:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010da18:	eb 1e                	jmp    f010da38 <pf_add_empty_env_page+0x130>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010da1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da1d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010da20:	c1 ea 0c             	shr    $0xc,%edx
f010da23:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010da29:	c1 e2 02             	shl    $0x2,%edx
f010da2c:	01 c2                	add    %eax,%edx
f010da2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da31:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010da33:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010da38:	c9                   	leave  
f010da39:	c3                   	ret    

f010da3a <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010da3a:	55                   	push   %ebp
f010da3b:	89 e5                	mov    %esp,%ebp
f010da3d:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010da40:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010da47:	76 19                	jbe    f010da62 <pf_add_env_page+0x28>
f010da49:	68 08 fb 11 f0       	push   $0xf011fb08
f010da4e:	68 2e fb 11 f0       	push   $0xf011fb2e
f010da53:	68 ef 00 00 00       	push   $0xef
f010da58:	68 c4 fa 11 f0       	push   $0xf011fac4
f010da5d:	e8 31 27 ff ff       	call   f0100193 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010da62:	8b 45 08             	mov    0x8(%ebp),%eax
f010da65:	83 c0 64             	add    $0x64,%eax
f010da68:	83 ec 08             	sub    $0x8,%esp
f010da6b:	50                   	push   %eax
f010da6c:	ff 75 08             	pushl  0x8(%ebp)
f010da6f:	e8 86 04 00 00       	call   f010defa <get_disk_page_directory>
f010da74:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010da77:	8b 55 0c             	mov    0xc(%ebp),%edx
f010da7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010da7d:	8b 40 64             	mov    0x64(%eax),%eax
f010da80:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010da83:	51                   	push   %ecx
f010da84:	6a 01                	push   $0x1
f010da86:	52                   	push   %edx
f010da87:	50                   	push   %eax
f010da88:	e8 52 fd ff ff       	call   f010d7df <get_disk_page_table>
f010da8d:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010da90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da93:	8b 55 0c             	mov    0xc(%ebp),%edx
f010da96:	c1 ea 0c             	shr    $0xc,%edx
f010da99:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010da9f:	c1 e2 02             	shl    $0x2,%edx
f010daa2:	01 d0                	add    %edx,%eax
f010daa4:	8b 00                	mov    (%eax),%eax
f010daa6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010daa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010daac:	85 c0                	test   %eax,%eax
f010daae:	75 34                	jne    f010dae4 <pf_add_env_page+0xaa>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010dab0:	83 ec 0c             	sub    $0xc,%esp
f010dab3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010dab6:	50                   	push   %eax
f010dab7:	e8 c9 fb ff ff       	call   f010d685 <allocate_disk_frame>
f010dabc:	83 c4 10             	add    $0x10,%esp
f010dabf:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010dac2:	75 07                	jne    f010dacb <pf_add_env_page+0x91>
f010dac4:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010dac9:	eb 31                	jmp    f010dafc <pf_add_env_page+0xc2>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010dacb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dace:	8b 55 0c             	mov    0xc(%ebp),%edx
f010dad1:	c1 ea 0c             	shr    $0xc,%edx
f010dad4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010dada:	c1 e2 02             	shl    $0x2,%edx
f010dadd:	01 c2                	add    %eax,%edx
f010dadf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dae2:	89 02                	mov    %eax,(%edx)
//	uint32 oldDir = rcr3();
//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
//	int ret = write_disk_page(dfn, (void*)dataSrc);
//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010dae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010dae7:	83 ec 08             	sub    $0x8,%esp
f010daea:	ff 75 10             	pushl  0x10(%ebp)
f010daed:	50                   	push   %eax
f010daee:	e8 11 fa ff ff       	call   f010d504 <write_disk_page>
f010daf3:	83 c4 10             	add    $0x10,%esp
f010daf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f010daf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010dafc:	c9                   	leave  
f010dafd:	c3                   	ret    

f010dafe <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, void *virtual_address, struct Frame_Info* modified_page_frame_info)
{
f010dafe:	55                   	push   %ebp
f010daff:	89 e5                	mov    %esp,%ebp
f010db01:	83 ec 28             	sub    $0x28,%esp
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010db04:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db07:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f010db0c:	76 19                	jbe    f010db27 <pf_update_env_page+0x29>
f010db0e:	68 08 fb 11 f0       	push   $0xf011fb08
f010db13:	68 2e fb 11 f0       	push   $0xf011fb2e
f010db18:	68 10 01 00 00       	push   $0x110
f010db1d:	68 c4 fa 11 f0       	push   $0xf011fac4
f010db22:	e8 6c 26 ff ff       	call   f0100193 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010db27:	8b 45 08             	mov    0x8(%ebp),%eax
f010db2a:	83 c0 64             	add    $0x64,%eax
f010db2d:	83 ec 08             	sub    $0x8,%esp
f010db30:	50                   	push   %eax
f010db31:	ff 75 08             	pushl  0x8(%ebp)
f010db34:	e8 c1 03 00 00       	call   f010defa <get_disk_page_directory>
f010db39:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010db3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010db3f:	8b 40 64             	mov    0x64(%eax),%eax
f010db42:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010db45:	52                   	push   %edx
f010db46:	6a 00                	push   $0x0
f010db48:	ff 75 0c             	pushl  0xc(%ebp)
f010db4b:	50                   	push   %eax
f010db4c:	e8 8e fc ff ff       	call   f010d7df <get_disk_page_table>
f010db51:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010db54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010db57:	85 c0                	test   %eax,%eax
f010db59:	75 0a                	jne    f010db65 <pf_update_env_page+0x67>
f010db5b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010db60:	e9 93 00 00 00       	jmp    f010dbf8 <pf_update_env_page+0xfa>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010db65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010db68:	8b 55 0c             	mov    0xc(%ebp),%edx
f010db6b:	c1 ea 0c             	shr    $0xc,%edx
f010db6e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010db74:	c1 e2 02             	shl    $0x2,%edx
f010db77:	01 d0                	add    %edx,%eax
f010db79:	8b 00                	mov    (%eax),%eax
f010db7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010db7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010db82:	75 07                	jne    f010db8b <pf_update_env_page+0x8d>
f010db84:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010db89:	eb 6d                	jmp    f010dbf8 <pf_update_env_page+0xfa>

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f010db8b:	83 ec 0c             	sub    $0xc,%esp
f010db8e:	ff 75 10             	pushl  0x10(%ebp)
f010db91:	e8 e6 f8 ff ff       	call   f010d47c <to_physical_address>
f010db96:	83 c4 10             	add    $0x10,%esp
f010db99:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010db9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db9f:	c1 e8 0c             	shr    $0xc,%eax
f010dba2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010dba5:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010dbaa:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010dbad:	72 17                	jb     f010dbc6 <pf_update_env_page+0xc8>
f010dbaf:	ff 75 f0             	pushl  -0x10(%ebp)
f010dbb2:	68 d8 fa 11 f0       	push   $0xf011fad8
f010dbb7:	68 2d 01 00 00       	push   $0x12d
f010dbbc:	68 c4 fa 11 f0       	push   $0xf011fac4
f010dbc1:	e8 cd 25 ff ff       	call   f0100193 <_panic>
f010dbc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dbc9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010dbce:	83 ec 08             	sub    $0x8,%esp
f010dbd1:	50                   	push   %eax
f010dbd2:	ff 75 f4             	pushl  -0xc(%ebp)
f010dbd5:	e8 2a f9 ff ff       	call   f010d504 <write_disk_page>
f010dbda:	83 c4 10             	add    $0x10,%esp
f010dbdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010dbe0:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbe3:	8b 80 a4 52 00 00    	mov    0x52a4(%eax),%eax
f010dbe9:	8d 50 01             	lea    0x1(%eax),%edx
f010dbec:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbef:	89 90 a4 52 00 00    	mov    %edx,0x52a4(%eax)
	//======================

	return ret;
f010dbf5:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010dbf8:	c9                   	leave  
f010dbf9:	c3                   	ret    

f010dbfa <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
*/
int pf_read_env_page(struct Env* ptr_env, void *virtual_address)
{
f010dbfa:	55                   	push   %ebp
f010dbfb:	89 e5                	mov    %esp,%ebp
f010dbfd:	83 ec 28             	sub    $0x28,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = (void*) ROUNDDOWN((uint32)virtual_address, PAGE_SIZE);
f010dc00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc03:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010dc06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dc09:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010dc0e:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010dc11:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc14:	8b 40 64             	mov    0x64(%eax),%eax
f010dc17:	85 c0                	test   %eax,%eax
f010dc19:	75 0a                	jne    f010dc25 <pf_read_env_page+0x2b>
f010dc1b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010dc20:	e9 cc 00 00 00       	jmp    f010dcf1 <pf_read_env_page+0xf7>

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010dc25:	8b 45 08             	mov    0x8(%ebp),%eax
f010dc28:	8b 40 64             	mov    0x64(%eax),%eax
f010dc2b:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010dc2e:	52                   	push   %edx
f010dc2f:	6a 00                	push   $0x0
f010dc31:	ff 75 0c             	pushl  0xc(%ebp)
f010dc34:	50                   	push   %eax
f010dc35:	e8 a5 fb ff ff       	call   f010d7df <get_disk_page_table>
f010dc3a:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010dc3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dc40:	85 c0                	test   %eax,%eax
f010dc42:	75 0a                	jne    f010dc4e <pf_read_env_page+0x54>
f010dc44:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010dc49:	e9 a3 00 00 00       	jmp    f010dcf1 <pf_read_env_page+0xf7>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010dc4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dc51:	8b 55 0c             	mov    0xc(%ebp),%edx
f010dc54:	c1 ea 0c             	shr    $0xc,%edx
f010dc57:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010dc5d:	c1 e2 02             	shl    $0x2,%edx
f010dc60:	01 d0                	add    %edx,%eax
f010dc62:	8b 00                	mov    (%eax),%eax
f010dc64:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010dc67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010dc6b:	75 07                	jne    f010dc74 <pf_read_env_page+0x7a>
f010dc6d:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010dc72:	eb 7d                	jmp    f010dcf1 <pf_read_env_page+0xf7>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010dc74:	83 ec 08             	sub    $0x8,%esp
f010dc77:	ff 75 0c             	pushl  0xc(%ebp)
f010dc7a:	ff 75 f0             	pushl  -0x10(%ebp)
f010dc7d:	e8 53 f8 ff ff       	call   f010d4d5 <read_disk_page>
f010dc82:	83 c4 10             	add    $0x10,%esp
f010dc85:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	//pt_set_page_permissions(curenv, (uint32)virtual_address, 0, PERM_MODIFIED);
	uint32 *ptr_table = NULL;
f010dc88:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	get_page_table(curenv->env_page_directory,(void*) virtual_address, &ptr_table);
f010dc8f:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f010dc94:	8b 40 5c             	mov    0x5c(%eax),%eax
f010dc97:	83 ec 04             	sub    $0x4,%esp
f010dc9a:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010dc9d:	52                   	push   %edx
f010dc9e:	ff 75 0c             	pushl  0xc(%ebp)
f010dca1:	50                   	push   %eax
f010dca2:	e8 c4 61 ff ff       	call   f0103e6b <get_page_table>
f010dca7:	83 c4 10             	add    $0x10,%esp
	ptr_table[PTX(virtual_address)] &= ~PERM_MODIFIED;
f010dcaa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dcad:	8b 55 0c             	mov    0xc(%ebp),%edx
f010dcb0:	c1 ea 0c             	shr    $0xc,%edx
f010dcb3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010dcb9:	c1 e2 02             	shl    $0x2,%edx
f010dcbc:	01 d0                	add    %edx,%eax
f010dcbe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dcc1:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010dcc4:	c1 e9 0c             	shr    $0xc,%ecx
f010dcc7:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010dccd:	c1 e1 02             	shl    $0x2,%ecx
f010dcd0:	01 ca                	add    %ecx,%edx
f010dcd2:	8b 12                	mov    (%edx),%edx
f010dcd4:	83 e2 bf             	and    $0xffffffbf,%edx
f010dcd7:	89 10                	mov    %edx,(%eax)

	//2020
	ptr_env->nPageIn++ ;
f010dcd9:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcdc:	8b 80 a0 52 00 00    	mov    0x52a0(%eax),%eax
f010dce2:	8d 50 01             	lea    0x1(%eax),%edx
f010dce5:	8b 45 08             	mov    0x8(%ebp),%eax
f010dce8:	89 90 a0 52 00 00    	mov    %edx,0x52a0(%eax)
	//======================

	return disk_read_error;
f010dcee:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010dcf1:	c9                   	leave  
f010dcf2:	c3                   	ret    

f010dcf3 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f010dcf3:	55                   	push   %ebp
f010dcf4:	89 e5                	mov    %esp,%ebp
f010dcf6:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010dcf9:	8b 45 08             	mov    0x8(%ebp),%eax
f010dcfc:	8b 40 64             	mov    0x64(%eax),%eax
f010dcff:	85 c0                	test   %eax,%eax
f010dd01:	74 63                	je     f010dd66 <pf_remove_env_page+0x73>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
f010dd03:	8b 55 0c             	mov    0xc(%ebp),%edx
f010dd06:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd09:	8b 40 64             	mov    0x64(%eax),%eax
f010dd0c:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010dd0f:	51                   	push   %ecx
f010dd10:	6a 00                	push   $0x0
f010dd12:	52                   	push   %edx
f010dd13:	50                   	push   %eax
f010dd14:	e8 c6 fa ff ff       	call   f010d7df <get_disk_page_table>
f010dd19:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010dd1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd1f:	85 c0                	test   %eax,%eax
f010dd21:	74 46                	je     f010dd69 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010dd23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd26:	8b 55 0c             	mov    0xc(%ebp),%edx
f010dd29:	c1 ea 0c             	shr    $0xc,%edx
f010dd2c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010dd32:	c1 e2 02             	shl    $0x2,%edx
f010dd35:	01 d0                	add    %edx,%eax
f010dd37:	8b 00                	mov    (%eax),%eax
f010dd39:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010dd3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd3f:	8b 55 0c             	mov    0xc(%ebp),%edx
f010dd42:	c1 ea 0c             	shr    $0xc,%edx
f010dd45:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010dd4b:	c1 e2 02             	shl    $0x2,%edx
f010dd4e:	01 d0                	add    %edx,%eax
f010dd50:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010dd56:	83 ec 0c             	sub    $0xc,%esp
f010dd59:	ff 75 f4             	pushl  -0xc(%ebp)
f010dd5c:	e8 d1 f9 ff ff       	call   f010d732 <free_disk_frame>
f010dd61:	83 c4 10             	add    $0x10,%esp
f010dd64:	eb 04                	jmp    f010dd6a <pf_remove_env_page+0x77>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010dd66:	90                   	nop
f010dd67:	eb 01                	jmp    f010dd6a <pf_remove_env_page+0x77>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010dd69:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010dd6a:	c9                   	leave  
f010dd6b:	c3                   	ret    

f010dd6c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010dd6c:	55                   	push   %ebp
f010dd6d:	89 e5                	mov    %esp,%ebp
f010dd6f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010dd72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dd79:	e9 ee 00 00 00       	jmp    f010de6c <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010dd7e:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd81:	8b 40 64             	mov    0x64(%eax),%eax
f010dd84:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dd87:	c1 e2 02             	shl    $0x2,%edx
f010dd8a:	01 d0                	add    %edx,%eax
f010dd8c:	8b 00                	mov    (%eax),%eax
f010dd8e:	83 e0 01             	and    $0x1,%eax
f010dd91:	85 c0                	test   %eax,%eax
f010dd93:	0f 84 cf 00 00 00    	je     f010de68 <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010dd99:	8b 45 08             	mov    0x8(%ebp),%eax
f010dd9c:	8b 40 64             	mov    0x64(%eax),%eax
f010dd9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dda2:	c1 e2 02             	shl    $0x2,%edx
f010dda5:	01 d0                	add    %edx,%eax
f010dda7:	8b 00                	mov    (%eax),%eax
f010dda9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ddae:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
		#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f010ddb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ddb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010ddb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ddba:	c1 e8 0c             	shr    $0xc,%eax
f010ddbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010ddc0:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010ddc5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010ddc8:	72 17                	jb     f010dde1 <pf_free_env+0x75>
f010ddca:	ff 75 e8             	pushl  -0x18(%ebp)
f010ddcd:	68 d8 fa 11 f0       	push   $0xf011fad8
f010ddd2:	68 90 01 00 00       	push   $0x190
f010ddd7:	68 c4 fa 11 f0       	push   $0xf011fac4
f010dddc:	e8 b2 23 ff ff       	call   f0100193 <_panic>
f010dde1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010dde4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010dde9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
		#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010ddec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ddf3:	eb 3a                	jmp    f010de2f <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010ddf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ddff:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010de02:	01 d0                	add    %edx,%eax
f010de04:	8b 00                	mov    (%eax),%eax
f010de06:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f010de09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010de0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010de13:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010de16:	01 d0                	add    %edx,%eax
f010de18:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f010de1e:	83 ec 0c             	sub    $0xc,%esp
f010de21:	ff 75 dc             	pushl  -0x24(%ebp)
f010de24:	e8 09 f9 ff ff       	call   f010d732 <free_disk_frame>
f010de29:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010de2c:	ff 45 f0             	incl   -0x10(%ebp)
f010de2f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010de36:	76 bd                	jbe    f010ddf5 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f010de38:	8b 45 08             	mov    0x8(%ebp),%eax
f010de3b:	8b 40 64             	mov    0x64(%eax),%eax
f010de3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010de41:	c1 e2 02             	shl    $0x2,%edx
f010de44:	01 d0                	add    %edx,%eax
f010de46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
		#else
		{
			decrement_references(to_frame_info(pa));
f010de4c:	83 ec 0c             	sub    $0xc,%esp
f010de4f:	ff 75 ec             	pushl  -0x14(%ebp)
f010de52:	e8 38 f6 ff ff       	call   f010d48f <to_frame_info>
f010de57:	83 c4 10             	add    $0x10,%esp
f010de5a:	83 ec 0c             	sub    $0xc,%esp
f010de5d:	50                   	push   %eax
f010de5e:	e8 d8 5f ff ff       	call   f0103e3b <decrement_references>
f010de63:	83 c4 10             	add    $0x10,%esp
f010de66:	eb 01                	jmp    f010de69 <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f010de68:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010de69:	ff 45 f4             	incl   -0xc(%ebp)
f010de6c:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010de73:	0f 86 05 ff ff ff    	jbe    f010dd7e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
	#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f010de79:	8b 45 08             	mov    0x8(%ebp),%eax
f010de7c:	8b 40 68             	mov    0x68(%eax),%eax
f010de7f:	83 ec 0c             	sub    $0xc,%esp
f010de82:	50                   	push   %eax
f010de83:	e8 07 f6 ff ff       	call   f010d48f <to_frame_info>
f010de88:	83 c4 10             	add    $0x10,%esp
f010de8b:	83 ec 0c             	sub    $0xc,%esp
f010de8e:	50                   	push   %eax
f010de8f:	e8 a7 5f ff ff       	call   f0103e3b <decrement_references>
f010de94:	83 c4 10             	add    $0x10,%esp
	}
	#endif
	ptr_env->disk_env_pgdir = 0;
f010de97:	8b 45 08             	mov    0x8(%ebp),%eax
f010de9a:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f010dea1:	8b 45 08             	mov    0x8(%ebp),%eax
f010dea4:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010deab:	8b 45 08             	mov    0x8(%ebp),%eax
f010deae:	8b 40 6c             	mov    0x6c(%eax),%eax
f010deb1:	85 c0                	test   %eax,%eax
f010deb3:	74 42                	je     f010def7 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010deb5:	83 ec 0c             	sub    $0xc,%esp
f010deb8:	ff 75 08             	pushl  0x8(%ebp)
f010debb:	e8 ee 03 00 00       	call   f010e2ae <__pf_remove_env_all_tables>
f010dec0:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
	#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f010dec3:	8b 45 08             	mov    0x8(%ebp),%eax
f010dec6:	8b 40 70             	mov    0x70(%eax),%eax
f010dec9:	83 ec 0c             	sub    $0xc,%esp
f010decc:	50                   	push   %eax
f010decd:	e8 bd f5 ff ff       	call   f010d48f <to_frame_info>
f010ded2:	83 c4 10             	add    $0x10,%esp
f010ded5:	83 ec 0c             	sub    $0xc,%esp
f010ded8:	50                   	push   %eax
f010ded9:	e8 5d 5f ff ff       	call   f0103e3b <decrement_references>
f010dede:	83 c4 10             	add    $0x10,%esp
	}
	#endif
	ptr_env->disk_env_tabledir = 0;
f010dee1:	8b 45 08             	mov    0x8(%ebp),%eax
f010dee4:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010deeb:	8b 45 08             	mov    0x8(%ebp),%eax
f010deee:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f010def5:	eb 01                	jmp    f010def8 <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010def7:	90                   	nop
	}
	#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010def8:	c9                   	leave  
f010def9:	c3                   	ret    

f010defa <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010defa:	55                   	push   %ebp
f010defb:	89 e5                	mov    %esp,%ebp
f010defd:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010df00:	8b 45 08             	mov    0x8(%ebp),%eax
f010df03:	8b 50 64             	mov    0x64(%eax),%edx
f010df06:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df09:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f010df0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df0e:	8b 00                	mov    (%eax),%eax
f010df10:	85 c0                	test   %eax,%eax
f010df12:	0f 85 aa 00 00 00    	jne    f010dfc2 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
		#else
		{
			int r;
			struct Frame_Info *p = NULL;
f010df18:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f010df1f:	83 ec 0c             	sub    $0xc,%esp
f010df22:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010df25:	50                   	push   %eax
f010df26:	e8 c1 5d ff ff       	call   f0103cec <allocate_frame>
f010df2b:	83 c4 10             	add    $0x10,%esp
f010df2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010df31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010df35:	79 08                	jns    f010df3f <get_disk_page_directory+0x45>
				return r;
f010df37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010df3a:	e9 88 00 00 00       	jmp    f010dfc7 <get_disk_page_directory+0xcd>
			p->references = 1;
f010df3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df42:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010df48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df4b:	83 ec 0c             	sub    $0xc,%esp
f010df4e:	50                   	push   %eax
f010df4f:	e8 28 f5 ff ff       	call   f010d47c <to_physical_address>
f010df54:	83 c4 10             	add    $0x10,%esp
f010df57:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010df5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df5d:	c1 e8 0c             	shr    $0xc,%eax
f010df60:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010df63:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010df68:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010df6b:	72 17                	jb     f010df84 <get_disk_page_directory+0x8a>
f010df6d:	ff 75 f0             	pushl  -0x10(%ebp)
f010df70:	68 d8 fa 11 f0       	push   $0xf011fad8
f010df75:	68 e8 01 00 00       	push   $0x1e8
f010df7a:	68 c4 fa 11 f0       	push   $0xf011fac4
f010df7f:	e8 0f 22 ff ff       	call   f0100193 <_panic>
f010df84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df87:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010df8c:	89 c2                	mov    %eax,%edx
f010df8e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df91:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f010df93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010df96:	83 ec 0c             	sub    $0xc,%esp
f010df99:	50                   	push   %eax
f010df9a:	e8 dd f4 ff ff       	call   f010d47c <to_physical_address>
f010df9f:	83 c4 10             	add    $0x10,%esp
f010dfa2:	89 c2                	mov    %eax,%edx
f010dfa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfa7:	89 50 68             	mov    %edx,0x68(%eax)
		}
		#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010dfaa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfad:	8b 00                	mov    (%eax),%eax
f010dfaf:	83 ec 04             	sub    $0x4,%esp
f010dfb2:	68 00 10 00 00       	push   $0x1000
f010dfb7:	6a 00                	push   $0x0
f010dfb9:	50                   	push   %eax
f010dfba:	e8 ee d4 00 00       	call   f011b4ad <memset>
f010dfbf:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010dfc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dfc7:	c9                   	leave  
f010dfc8:	c3                   	ret    

f010dfc9 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010dfc9:	55                   	push   %ebp
f010dfca:	89 e5                	mov    %esp,%ebp
f010dfcc:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f010dfcf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010dfd6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010dfdd:	e9 a6 00 00 00       	jmp    f010e088 <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f010dfe2:	8b 45 08             	mov    0x8(%ebp),%eax
f010dfe5:	8b 40 64             	mov    0x64(%eax),%eax
f010dfe8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dfeb:	c1 e2 02             	shl    $0x2,%edx
f010dfee:	01 d0                	add    %edx,%eax
f010dff0:	8b 00                	mov    (%eax),%eax
f010dff2:	83 e0 01             	and    $0x1,%eax
f010dff5:	85 c0                	test   %eax,%eax
f010dff7:	0f 84 87 00 00 00    	je     f010e084 <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f010dffd:	8b 45 08             	mov    0x8(%ebp),%eax
f010e000:	8b 40 64             	mov    0x64(%eax),%eax
f010e003:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e006:	c1 e2 02             	shl    $0x2,%edx
f010e009:	01 d0                	add    %edx,%eax
f010e00b:	8b 00                	mov    (%eax),%eax
f010e00d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010e012:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
		#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f010e015:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e018:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010e01b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e01e:	c1 e8 0c             	shr    $0xc,%eax
f010e021:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010e024:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010e029:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010e02c:	72 17                	jb     f010e045 <pf_calculate_allocated_pages+0x7c>
f010e02e:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e031:	68 d8 fa 11 f0       	push   $0xf011fad8
f010e036:	68 08 02 00 00       	push   $0x208
f010e03b:	68 c4 fa 11 f0       	push   $0xf011fac4
f010e040:	e8 4e 21 ff ff       	call   f0100193 <_panic>
f010e045:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e048:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010e04d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
		#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010e050:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010e057:	eb 20                	jmp    f010e079 <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f010e059:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e05c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010e063:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e066:	01 d0                	add    %edx,%eax
f010e068:	8b 00                	mov    (%eax),%eax
f010e06a:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f010e06d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010e071:	74 03                	je     f010e076 <pf_calculate_allocated_pages+0xad>
				counter ++;
f010e073:	ff 45 f0             	incl   -0x10(%ebp)
		}
		#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010e076:	ff 45 ec             	incl   -0x14(%ebp)
f010e079:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010e080:	76 d7                	jbe    f010e059 <pf_calculate_allocated_pages+0x90>
f010e082:	eb 01                	jmp    f010e085 <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010e084:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010e085:	ff 45 f4             	incl   -0xc(%ebp)
f010e088:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010e08f:	0f 86 4d ff ff ff    	jbe    f010dfe2 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010e095:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010e098:	c9                   	leave  
f010e099:	c3                   	ret    

f010e09a <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f010e09a:	55                   	push   %ebp
f010e09b:	89 e5                	mov    %esp,%ebp
f010e09d:	83 ec 10             	sub    $0x10,%esp
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010e0a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010e0a7:	a1 58 db 3c f0       	mov    0xf03cdb58,%eax
f010e0ac:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e0af:	eb 0b                	jmp    f010e0bc <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010e0b1:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010e0b4:	a1 60 db 3c f0       	mov    0xf03cdb60,%eax
f010e0b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e0bc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010e0c0:	74 07                	je     f010e0c9 <pf_calculate_free_frames+0x2f>
f010e0c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010e0c5:	8b 00                	mov    (%eax),%eax
f010e0c7:	eb 05                	jmp    f010e0ce <pf_calculate_free_frames+0x34>
f010e0c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0ce:	a3 60 db 3c f0       	mov    %eax,0xf03cdb60
f010e0d3:	a1 60 db 3c f0       	mov    0xf03cdb60,%eax
f010e0d8:	85 c0                	test   %eax,%eax
f010e0da:	75 d5                	jne    f010e0b1 <pf_calculate_free_frames+0x17>
f010e0dc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010e0e0:	75 cf                	jne    f010e0b1 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f010e0e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010e0e5:	c9                   	leave  
f010e0e6:	c3                   	ret    

f010e0e7 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f010e0e7:	55                   	push   %ebp
f010e0e8:	89 e5                	mov    %esp,%ebp
f010e0ea:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010e0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010e0f0:	8b 50 6c             	mov    0x6c(%eax),%edx
f010e0f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0f6:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f010e0f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0fb:	8b 00                	mov    (%eax),%eax
f010e0fd:	85 c0                	test   %eax,%eax
f010e0ff:	0f 85 aa 00 00 00    	jne    f010e1af <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
		#else
		{
			int r;
			struct Frame_Info *p = NULL;
f010e105:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f010e10c:	83 ec 0c             	sub    $0xc,%esp
f010e10f:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010e112:	50                   	push   %eax
f010e113:	e8 d4 5b ff ff       	call   f0103cec <allocate_frame>
f010e118:	83 c4 10             	add    $0x10,%esp
f010e11b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e11e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e122:	79 08                	jns    f010e12c <get_disk_table_directory+0x45>
				return r;
f010e124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e127:	e9 88 00 00 00       	jmp    f010e1b4 <get_disk_table_directory+0xcd>
			p->references = 1;
f010e12c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e12f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010e135:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e138:	83 ec 0c             	sub    $0xc,%esp
f010e13b:	50                   	push   %eax
f010e13c:	e8 3b f3 ff ff       	call   f010d47c <to_physical_address>
f010e141:	83 c4 10             	add    $0x10,%esp
f010e144:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010e147:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e14a:	c1 e8 0c             	shr    $0xc,%eax
f010e14d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e150:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f010e155:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010e158:	72 17                	jb     f010e171 <get_disk_table_directory+0x8a>
f010e15a:	ff 75 f0             	pushl  -0x10(%ebp)
f010e15d:	68 d8 fa 11 f0       	push   $0xf011fad8
f010e162:	68 46 02 00 00       	push   $0x246
f010e167:	68 c4 fa 11 f0       	push   $0xf011fac4
f010e16c:	e8 22 20 ff ff       	call   f0100193 <_panic>
f010e171:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e174:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010e179:	89 c2                	mov    %eax,%edx
f010e17b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e17e:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010e180:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e183:	83 ec 0c             	sub    $0xc,%esp
f010e186:	50                   	push   %eax
f010e187:	e8 f0 f2 ff ff       	call   f010d47c <to_physical_address>
f010e18c:	83 c4 10             	add    $0x10,%esp
f010e18f:	89 c2                	mov    %eax,%edx
f010e191:	8b 45 08             	mov    0x8(%ebp),%eax
f010e194:	89 50 70             	mov    %edx,0x70(%eax)
		}
		#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f010e197:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e19a:	8b 00                	mov    (%eax),%eax
f010e19c:	83 ec 04             	sub    $0x4,%esp
f010e19f:	68 00 10 00 00       	push   $0x1000
f010e1a4:	6a 00                	push   $0x0
f010e1a6:	50                   	push   %eax
f010e1a7:	e8 01 d3 00 00       	call   f011b4ad <memset>
f010e1ac:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010e1af:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e1b4:	c9                   	leave  
f010e1b5:	c3                   	ret    

f010e1b6 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010e1b6:	55                   	push   %ebp
f010e1b7:	89 e5                	mov    %esp,%ebp
f010e1b9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010e1bc:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010e1c3:	76 19                	jbe    f010e1de <__pf_write_env_table+0x28>
f010e1c5:	68 08 fb 11 f0       	push   $0xf011fb08
f010e1ca:	68 2e fb 11 f0       	push   $0xf011fb2e
f010e1cf:	68 54 02 00 00       	push   $0x254
f010e1d4:	68 c4 fa 11 f0       	push   $0xf011fac4
f010e1d9:	e8 b5 1f ff ff       	call   f0100193 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010e1de:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1e1:	83 c0 6c             	add    $0x6c,%eax
f010e1e4:	83 ec 08             	sub    $0x8,%esp
f010e1e7:	50                   	push   %eax
f010e1e8:	ff 75 08             	pushl  0x8(%ebp)
f010e1eb:	e8 f7 fe ff ff       	call   f010e0e7 <get_disk_table_directory>
f010e1f0:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010e1f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010e1f6:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e1f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f010e1fc:	c1 ea 16             	shr    $0x16,%edx
f010e1ff:	c1 e2 02             	shl    $0x2,%edx
f010e202:	01 d0                	add    %edx,%eax
f010e204:	8b 00                	mov    (%eax),%eax
f010e206:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010e209:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e20c:	85 c0                	test   %eax,%eax
f010e20e:	75 31                	jne    f010e241 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010e210:	83 ec 0c             	sub    $0xc,%esp
f010e213:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010e216:	50                   	push   %eax
f010e217:	e8 69 f4 ff ff       	call   f010d685 <allocate_disk_frame>
f010e21c:	83 c4 10             	add    $0x10,%esp
f010e21f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010e222:	75 07                	jne    f010e22b <__pf_write_env_table+0x75>
f010e224:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010e229:	eb 2e                	jmp    f010e259 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f010e22b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e22e:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e231:	8b 55 0c             	mov    0xc(%ebp),%edx
f010e234:	c1 ea 16             	shr    $0x16,%edx
f010e237:	c1 e2 02             	shl    $0x2,%edx
f010e23a:	01 c2                	add    %eax,%edx
f010e23c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e23f:	89 02                	mov    %eax,(%edx)
//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010e241:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e244:	83 ec 08             	sub    $0x8,%esp
f010e247:	ff 75 10             	pushl  0x10(%ebp)
f010e24a:	50                   	push   %eax
f010e24b:	e8 b4 f2 ff ff       	call   f010d504 <write_disk_page>
f010e250:	83 c4 10             	add    $0x10,%esp
f010e253:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010e256:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e259:	c9                   	leave  
f010e25a:	c3                   	ret    

f010e25b <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010e25b:	55                   	push   %ebp
f010e25c:	89 e5                	mov    %esp,%ebp
f010e25e:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010e261:	8b 45 08             	mov    0x8(%ebp),%eax
f010e264:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e267:	85 c0                	test   %eax,%eax
f010e269:	75 07                	jne    f010e272 <__pf_read_env_table+0x17>
f010e26b:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010e270:	eb 3a                	jmp    f010e2ac <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010e272:	8b 45 08             	mov    0x8(%ebp),%eax
f010e275:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e278:	8b 55 0c             	mov    0xc(%ebp),%edx
f010e27b:	c1 ea 16             	shr    $0x16,%edx
f010e27e:	c1 e2 02             	shl    $0x2,%edx
f010e281:	01 d0                	add    %edx,%eax
f010e283:	8b 00                	mov    (%eax),%eax
f010e285:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010e288:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e28c:	75 07                	jne    f010e295 <__pf_read_env_table+0x3a>
f010e28e:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010e293:	eb 17                	jmp    f010e2ac <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f010e295:	83 ec 08             	sub    $0x8,%esp
f010e298:	ff 75 10             	pushl  0x10(%ebp)
f010e29b:	ff 75 f4             	pushl  -0xc(%ebp)
f010e29e:	e8 32 f2 ff ff       	call   f010d4d5 <read_disk_page>
f010e2a3:	83 c4 10             	add    $0x10,%esp
f010e2a6:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f010e2a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010e2ac:	c9                   	leave  
f010e2ad:	c3                   	ret    

f010e2ae <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010e2ae:	55                   	push   %ebp
f010e2af:	89 e5                	mov    %esp,%ebp
f010e2b1:	83 ec 10             	sub    $0x10,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010e2b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2b7:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e2ba:	85 c0                	test   %eax,%eax
f010e2bc:	74 49                	je     f010e307 <__pf_remove_env_all_tables+0x59>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010e2be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010e2c5:	eb 35                	jmp    f010e2fc <__pf_remove_env_all_tables+0x4e>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f010e2c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2ca:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e2cd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e2d0:	c1 e2 02             	shl    $0x2,%edx
f010e2d3:	01 d0                	add    %edx,%eax
f010e2d5:	8b 00                	mov    (%eax),%eax
f010e2d7:	89 45 f8             	mov    %eax,-0x8(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f010e2da:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2dd:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e2e0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e2e3:	c1 e2 02             	shl    $0x2,%edx
f010e2e6:	01 d0                	add    %edx,%eax
f010e2e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f010e2ee:	ff 75 f8             	pushl  -0x8(%ebp)
f010e2f1:	e8 3c f4 ff ff       	call   f010d732 <free_disk_frame>
f010e2f6:	83 c4 04             	add    $0x4,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010e2f9:	ff 45 fc             	incl   -0x4(%ebp)
f010e2fc:	81 7d fc ba 03 00 00 	cmpl   $0x3ba,-0x4(%ebp)
f010e303:	76 c2                	jbe    f010e2c7 <__pf_remove_env_all_tables+0x19>
f010e305:	eb 01                	jmp    f010e308 <__pf_remove_env_all_tables+0x5a>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010e307:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f010e308:	c9                   	leave  
f010e309:	c3                   	ret    

f010e30a <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f010e30a:	55                   	push   %ebp
f010e30b:	89 e5                	mov    %esp,%ebp
f010e30d:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010e310:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010e314:	75 10                	jne    f010e326 <__pf_remove_env_table+0x1c>
			cprintf("REMOVING table 0 from page file\n");
f010e316:	83 ec 0c             	sub    $0xc,%esp
f010e319:	68 44 fb 11 f0       	push   $0xf011fb44
f010e31e:	e8 13 91 ff ff       	call   f0107436 <cprintf>
f010e323:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010e326:	8b 45 08             	mov    0x8(%ebp),%eax
f010e329:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e32c:	85 c0                	test   %eax,%eax
f010e32e:	74 3d                	je     f010e36d <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010e330:	8b 45 08             	mov    0x8(%ebp),%eax
f010e333:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e336:	8b 55 0c             	mov    0xc(%ebp),%edx
f010e339:	c1 ea 16             	shr    $0x16,%edx
f010e33c:	c1 e2 02             	shl    $0x2,%edx
f010e33f:	01 d0                	add    %edx,%eax
f010e341:	8b 00                	mov    (%eax),%eax
f010e343:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010e346:	8b 45 08             	mov    0x8(%ebp),%eax
f010e349:	8b 40 6c             	mov    0x6c(%eax),%eax
f010e34c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010e34f:	c1 ea 16             	shr    $0x16,%edx
f010e352:	c1 e2 02             	shl    $0x2,%edx
f010e355:	01 d0                	add    %edx,%eax
f010e357:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010e35d:	83 ec 0c             	sub    $0xc,%esp
f010e360:	ff 75 f4             	pushl  -0xc(%ebp)
f010e363:	e8 ca f3 ff ff       	call   f010d732 <free_disk_frame>
f010e368:	83 c4 10             	add    $0x10,%esp
f010e36b:	eb 01                	jmp    f010e36e <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
			cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010e36d:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f010e36e:	c9                   	leave  
f010e36f:	c3                   	ret    

f010e370 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010e370:	55                   	push   %ebp
f010e371:	89 e5                	mov    %esp,%ebp
f010e373:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010e376:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010e37d:	eb 1f                	jmp    f010e39e <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010e37f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e382:	83 ec 04             	sub    $0x4,%esp
f010e385:	6a 08                	push   $0x8
f010e387:	ff 75 08             	pushl  0x8(%ebp)
f010e38a:	50                   	push   %eax
f010e38b:	e8 c2 d7 00 00       	call   f011bb52 <ide_write>
f010e390:	83 c4 10             	add    $0x10,%esp
f010e393:	85 c0                	test   %eax,%eax
f010e395:	75 12                	jne    f010e3a9 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010e397:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f010e39e:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010e3a5:	7e d8                	jle    f010e37f <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010e3a7:	eb 01                	jmp    f010e3aa <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010e3a9:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010e3aa:	90                   	nop
f010e3ab:	c9                   	leave  
f010e3ac:	c3                   	ret    

f010e3ad <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e3ad:	55                   	push   %ebp
f010e3ae:	89 e5                	mov    %esp,%ebp
f010e3b0:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e3b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e3ba:	e9 aa 00 00 00       	jmp    f010e469 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e3bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e3c2:	89 d0                	mov    %edx,%eax
f010e3c4:	c1 e0 02             	shl    $0x2,%eax
f010e3c7:	01 d0                	add    %edx,%eax
f010e3c9:	01 c0                	add    %eax,%eax
f010e3cb:	01 d0                	add    %edx,%eax
f010e3cd:	01 c0                	add    %eax,%eax
f010e3cf:	01 d0                	add    %edx,%eax
f010e3d1:	c1 e0 02             	shl    $0x2,%eax
f010e3d4:	05 00 8a 3a f0       	add    $0xf03a8a00,%eax
f010e3d9:	83 ec 04             	sub    $0x4,%esp
f010e3dc:	6a 5c                	push   $0x5c
f010e3de:	6a 00                	push   $0x0
f010e3e0:	50                   	push   %eax
f010e3e1:	e8 c7 d0 00 00       	call   f011b4ad <memset>
f010e3e6:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e3e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e3ec:	89 d0                	mov    %edx,%eax
f010e3ee:	c1 e0 02             	shl    $0x2,%eax
f010e3f1:	01 d0                	add    %edx,%eax
f010e3f3:	01 c0                	add    %eax,%eax
f010e3f5:	01 d0                	add    %edx,%eax
f010e3f7:	01 c0                	add    %eax,%eax
f010e3f9:	01 d0                	add    %edx,%eax
f010e3fb:	c1 e0 02             	shl    $0x2,%eax
f010e3fe:	05 58 8a 3a f0       	add    $0xf03a8a58,%eax
f010e403:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e406:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e409:	89 d0                	mov    %edx,%eax
f010e40b:	c1 e0 02             	shl    $0x2,%eax
f010e40e:	01 d0                	add    %edx,%eax
f010e410:	01 c0                	add    %eax,%eax
f010e412:	01 d0                	add    %edx,%eax
f010e414:	01 c0                	add    %eax,%eax
f010e416:	01 d0                	add    %edx,%eax
f010e418:	c1 e0 02             	shl    $0x2,%eax
f010e41b:	05 44 8a 3a f0       	add    $0xf03a8a44,%eax
f010e420:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e426:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e429:	89 d0                	mov    %edx,%eax
f010e42b:	c1 e0 02             	shl    $0x2,%eax
f010e42e:	01 d0                	add    %edx,%eax
f010e430:	01 c0                	add    %eax,%eax
f010e432:	01 d0                	add    %edx,%eax
f010e434:	01 c0                	add    %eax,%eax
f010e436:	01 d0                	add    %edx,%eax
f010e438:	c1 e0 02             	shl    $0x2,%eax
f010e43b:	05 48 8a 3a f0       	add    $0xf03a8a48,%eax
f010e440:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e446:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e449:	89 d0                	mov    %edx,%eax
f010e44b:	c1 e0 02             	shl    $0x2,%eax
f010e44e:	01 d0                	add    %edx,%eax
f010e450:	01 c0                	add    %eax,%eax
f010e452:	01 d0                	add    %edx,%eax
f010e454:	01 c0                	add    %eax,%eax
f010e456:	01 d0                	add    %edx,%eax
f010e458:	c1 e0 02             	shl    $0x2,%eax
f010e45b:	05 50 8a 3a f0       	add    $0xf03a8a50,%eax
f010e460:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e466:	ff 45 f4             	incl   -0xc(%ebp)
f010e469:	81 7d f4 2b 01 00 00 	cmpl   $0x12b,-0xc(%ebp)
f010e470:	0f 8e 49 ff ff ff    	jle    f010e3bf <create_semaphores_array+0x12>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}
}
f010e476:	90                   	nop
f010e477:	c9                   	leave  
f010e478:	c3                   	ret    

f010e479 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e479:	55                   	push   %ebp
f010e47a:	89 e5                	mov    %esp,%ebp
f010e47c:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e47f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e486:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e48d:	eb 2b                	jmp    f010e4ba <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010e48f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e492:	89 d0                	mov    %edx,%eax
f010e494:	c1 e0 02             	shl    $0x2,%eax
f010e497:	01 d0                	add    %edx,%eax
f010e499:	01 c0                	add    %eax,%eax
f010e49b:	01 d0                	add    %edx,%eax
f010e49d:	01 c0                	add    %eax,%eax
f010e49f:	01 d0                	add    %edx,%eax
f010e4a1:	c1 e0 02             	shl    $0x2,%eax
f010e4a4:	05 58 8a 3a f0       	add    $0xf03a8a58,%eax
f010e4a9:	8a 00                	mov    (%eax),%al
f010e4ab:	84 c0                	test   %al,%al
f010e4ad:	74 08                	je     f010e4b7 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010e4af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e4b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e4b5:	eb 0c                	jmp    f010e4c3 <allocate_semaphore_object+0x4a>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e4b7:	ff 45 f0             	incl   -0x10(%ebp)
f010e4ba:	81 7d f0 2b 01 00 00 	cmpl   $0x12b,-0x10(%ebp)
f010e4c1:	7e cc                	jle    f010e48f <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e4c3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e4c7:	75 14                	jne    f010e4dd <allocate_semaphore_object+0x64>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010e4c9:	83 ec 04             	sub    $0x4,%esp
f010e4cc:	68 68 fb 11 f0       	push   $0xf011fb68
f010e4d1:	6a 51                	push   $0x51
f010e4d3:	68 b8 fb 11 f0       	push   $0xf011fbb8
f010e4d8:	e8 b6 1c ff ff       	call   f0100193 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e4dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e4e0:	89 d0                	mov    %edx,%eax
f010e4e2:	c1 e0 02             	shl    $0x2,%eax
f010e4e5:	01 d0                	add    %edx,%eax
f010e4e7:	01 c0                	add    %eax,%eax
f010e4e9:	01 d0                	add    %edx,%eax
f010e4eb:	01 c0                	add    %eax,%eax
f010e4ed:	01 d0                	add    %edx,%eax
f010e4ef:	c1 e0 02             	shl    $0x2,%eax
f010e4f2:	8d 90 00 8a 3a f0    	lea    -0xfc57600(%eax),%edx
f010e4f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4fb:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e4fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e500:	89 d0                	mov    %edx,%eax
f010e502:	c1 e0 02             	shl    $0x2,%eax
f010e505:	01 d0                	add    %edx,%eax
f010e507:	01 c0                	add    %eax,%eax
f010e509:	01 d0                	add    %edx,%eax
f010e50b:	01 c0                	add    %eax,%eax
f010e50d:	01 d0                	add    %edx,%eax
f010e50f:	c1 e0 02             	shl    $0x2,%eax
f010e512:	05 58 8a 3a f0       	add    $0xf03a8a58,%eax
f010e517:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010e51a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e51d:	c9                   	leave  
f010e51e:	c3                   	ret    

f010e51f <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e51f:	55                   	push   %ebp
f010e520:	89 e5                	mov    %esp,%ebp
f010e522:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e525:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e52c:	eb 7a                	jmp    f010e5a8 <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010e52e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e531:	89 d0                	mov    %edx,%eax
f010e533:	c1 e0 02             	shl    $0x2,%eax
f010e536:	01 d0                	add    %edx,%eax
f010e538:	01 c0                	add    %eax,%eax
f010e53a:	01 d0                	add    %edx,%eax
f010e53c:	01 c0                	add    %eax,%eax
f010e53e:	01 d0                	add    %edx,%eax
f010e540:	c1 e0 02             	shl    $0x2,%eax
f010e543:	05 58 8a 3a f0       	add    $0xf03a8a58,%eax
f010e548:	8a 00                	mov    (%eax),%al
f010e54a:	84 c0                	test   %al,%al
f010e54c:	75 56                	jne    f010e5a4 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e54e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e551:	89 d0                	mov    %edx,%eax
f010e553:	c1 e0 02             	shl    $0x2,%eax
f010e556:	01 d0                	add    %edx,%eax
f010e558:	01 c0                	add    %eax,%eax
f010e55a:	01 d0                	add    %edx,%eax
f010e55c:	01 c0                	add    %eax,%eax
f010e55e:	01 d0                	add    %edx,%eax
f010e560:	c1 e0 02             	shl    $0x2,%eax
f010e563:	05 00 8a 3a f0       	add    $0xf03a8a00,%eax
f010e568:	8b 00                	mov    (%eax),%eax
f010e56a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e56d:	75 36                	jne    f010e5a5 <get_semaphore_object_ID+0x86>
f010e56f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e572:	89 d0                	mov    %edx,%eax
f010e574:	c1 e0 02             	shl    $0x2,%eax
f010e577:	01 d0                	add    %edx,%eax
f010e579:	01 c0                	add    %eax,%eax
f010e57b:	01 d0                	add    %edx,%eax
f010e57d:	01 c0                	add    %eax,%eax
f010e57f:	01 d0                	add    %edx,%eax
f010e581:	c1 e0 02             	shl    $0x2,%eax
f010e584:	05 00 8a 3a f0       	add    $0xf03a8a00,%eax
f010e589:	83 c0 04             	add    $0x4,%eax
f010e58c:	83 ec 08             	sub    $0x8,%esp
f010e58f:	50                   	push   %eax
f010e590:	ff 75 0c             	pushl  0xc(%ebp)
f010e593:	e8 33 ce 00 00       	call   f011b3cb <strcmp>
f010e598:	83 c4 10             	add    $0x10,%esp
f010e59b:	85 c0                	test   %eax,%eax
f010e59d:	75 06                	jne    f010e5a5 <get_semaphore_object_ID+0x86>
		{
			return i;
f010e59f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5a2:	eb 16                	jmp    f010e5ba <get_semaphore_object_ID+0x9b>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010e5a4:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010e5a5:	ff 45 f4             	incl   -0xc(%ebp)
f010e5a8:	81 7d f4 2b 01 00 00 	cmpl   $0x12b,-0xc(%ebp)
f010e5af:	0f 8e 79 ff ff ff    	jle    f010e52e <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010e5b5:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010e5ba:	c9                   	leave  
f010e5bb:	c3                   	ret    

f010e5bc <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010e5bc:	55                   	push   %ebp
f010e5bd:	89 e5                	mov    %esp,%ebp
f010e5bf:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010e5c2:	81 7d 08 2b 01 00 00 	cmpl   $0x12b,0x8(%ebp)
f010e5c9:	76 0a                	jbe    f010e5d5 <free_semaphore_object+0x19>
		return E_SEMAPHORE_NOT_EXISTS;
f010e5cb:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010e5d0:	e9 ac 00 00 00       	jmp    f010e681 <free_semaphore_object+0xc5>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010e5d5:	8b 55 08             	mov    0x8(%ebp),%edx
f010e5d8:	89 d0                	mov    %edx,%eax
f010e5da:	c1 e0 02             	shl    $0x2,%eax
f010e5dd:	01 d0                	add    %edx,%eax
f010e5df:	01 c0                	add    %eax,%eax
f010e5e1:	01 d0                	add    %edx,%eax
f010e5e3:	01 c0                	add    %eax,%eax
f010e5e5:	01 d0                	add    %edx,%eax
f010e5e7:	c1 e0 02             	shl    $0x2,%eax
f010e5ea:	05 00 8a 3a f0       	add    $0xf03a8a00,%eax
f010e5ef:	83 ec 04             	sub    $0x4,%esp
f010e5f2:	6a 5c                	push   $0x5c
f010e5f4:	6a 00                	push   $0x0
f010e5f6:	50                   	push   %eax
f010e5f7:	e8 b1 ce 00 00       	call   f011b4ad <memset>
f010e5fc:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010e5ff:	8b 55 08             	mov    0x8(%ebp),%edx
f010e602:	89 d0                	mov    %edx,%eax
f010e604:	c1 e0 02             	shl    $0x2,%eax
f010e607:	01 d0                	add    %edx,%eax
f010e609:	01 c0                	add    %eax,%eax
f010e60b:	01 d0                	add    %edx,%eax
f010e60d:	01 c0                	add    %eax,%eax
f010e60f:	01 d0                	add    %edx,%eax
f010e611:	c1 e0 02             	shl    $0x2,%eax
f010e614:	05 58 8a 3a f0       	add    $0xf03a8a58,%eax
f010e619:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010e61c:	8b 55 08             	mov    0x8(%ebp),%edx
f010e61f:	89 d0                	mov    %edx,%eax
f010e621:	c1 e0 02             	shl    $0x2,%eax
f010e624:	01 d0                	add    %edx,%eax
f010e626:	01 c0                	add    %eax,%eax
f010e628:	01 d0                	add    %edx,%eax
f010e62a:	01 c0                	add    %eax,%eax
f010e62c:	01 d0                	add    %edx,%eax
f010e62e:	c1 e0 02             	shl    $0x2,%eax
f010e631:	05 44 8a 3a f0       	add    $0xf03a8a44,%eax
f010e636:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e63c:	8b 55 08             	mov    0x8(%ebp),%edx
f010e63f:	89 d0                	mov    %edx,%eax
f010e641:	c1 e0 02             	shl    $0x2,%eax
f010e644:	01 d0                	add    %edx,%eax
f010e646:	01 c0                	add    %eax,%eax
f010e648:	01 d0                	add    %edx,%eax
f010e64a:	01 c0                	add    %eax,%eax
f010e64c:	01 d0                	add    %edx,%eax
f010e64e:	c1 e0 02             	shl    $0x2,%eax
f010e651:	05 48 8a 3a f0       	add    $0xf03a8a48,%eax
f010e656:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e65c:	8b 55 08             	mov    0x8(%ebp),%edx
f010e65f:	89 d0                	mov    %edx,%eax
f010e661:	c1 e0 02             	shl    $0x2,%eax
f010e664:	01 d0                	add    %edx,%eax
f010e666:	01 c0                	add    %eax,%eax
f010e668:	01 d0                	add    %edx,%eax
f010e66a:	01 c0                	add    %eax,%eax
f010e66c:	01 d0                	add    %edx,%eax
f010e66e:	c1 e0 02             	shl    $0x2,%eax
f010e671:	05 50 8a 3a f0       	add    $0xf03a8a50,%eax
f010e676:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010e67c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e681:	c9                   	leave  
f010e682:	c3                   	ret    

f010e683 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010e683:	55                   	push   %ebp
f010e684:	89 e5                	mov    %esp,%ebp
f010e686:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010e689:	83 ec 04             	sub    $0x4,%esp
f010e68c:	68 d4 fb 11 f0       	push   $0xf011fbd4
f010e691:	68 92 00 00 00       	push   $0x92
f010e696:	68 b8 fb 11 f0       	push   $0xf011fbb8
f010e69b:	e8 f3 1a ff ff       	call   f0100193 <_panic>

f010e6a0 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010e6a0:	55                   	push   %ebp
f010e6a1:	89 e5                	mov    %esp,%ebp
f010e6a3:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010e6a6:	83 ec 04             	sub    $0x4,%esp
f010e6a9:	68 04 fc 11 f0       	push   $0xf011fc04
f010e6ae:	68 a6 00 00 00       	push   $0xa6
f010e6b3:	68 b8 fb 11 f0       	push   $0xf011fbb8
f010e6b8:	e8 d6 1a ff ff       	call   f0100193 <_panic>

f010e6bd <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010e6bd:	55                   	push   %ebp
f010e6be:	89 e5                	mov    %esp,%ebp
f010e6c0:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010e6c3:	83 ec 04             	sub    $0x4,%esp
f010e6c6:	68 30 fc 11 f0       	push   $0xf011fc30
f010e6cb:	68 bc 00 00 00       	push   $0xbc
f010e6d0:	68 b8 fb 11 f0       	push   $0xf011fbb8
f010e6d5:	e8 b9 1a ff ff       	call   f0100193 <_panic>

f010e6da <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f010e6da:	55                   	push   %ebp
f010e6db:	89 e5                	mov    %esp,%ebp
f010e6dd:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010e6e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e6e7:	eb 5f                	jmp    f010e748 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010e6e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e6ec:	89 d0                	mov    %edx,%eax
f010e6ee:	01 c0                	add    %eax,%eax
f010e6f0:	01 d0                	add    %edx,%eax
f010e6f2:	01 c0                	add    %eax,%eax
f010e6f4:	01 d0                	add    %edx,%eax
f010e6f6:	c1 e0 02             	shl    $0x2,%eax
f010e6f9:	01 d0                	add    %edx,%eax
f010e6fb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e702:	01 d0                	add    %edx,%eax
f010e704:	c1 e0 04             	shl    $0x4,%eax
f010e707:	05 a0 2a 34 f0       	add    $0xf0342aa0,%eax
f010e70c:	83 ec 04             	sub    $0x4,%esp
f010e70f:	68 50 10 00 00       	push   $0x1050
f010e714:	6a 00                	push   $0x0
f010e716:	50                   	push   %eax
f010e717:	e8 91 cd 00 00       	call   f011b4ad <memset>
f010e71c:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010e71f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e722:	89 d0                	mov    %edx,%eax
f010e724:	01 c0                	add    %eax,%eax
f010e726:	01 d0                	add    %edx,%eax
f010e728:	01 c0                	add    %eax,%eax
f010e72a:	01 d0                	add    %edx,%eax
f010e72c:	c1 e0 02             	shl    $0x2,%eax
f010e72f:	01 d0                	add    %edx,%eax
f010e731:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e738:	01 d0                	add    %edx,%eax
f010e73a:	c1 e0 04             	shl    $0x4,%eax
f010e73d:	05 ed 2a 34 f0       	add    $0xf0342aed,%eax
f010e742:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010e745:	ff 45 f4             	incl   -0xc(%ebp)
f010e748:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010e74c:	7e 9b                	jle    f010e6e9 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f010e74e:	90                   	nop
f010e74f:	c9                   	leave  
f010e750:	c3                   	ret    

f010e751 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f010e751:	55                   	push   %ebp
f010e752:	89 e5                	mov    %esp,%ebp
f010e754:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f010e757:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f010e75e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e765:	eb 34                	jmp    f010e79b <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f010e767:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e76a:	89 d0                	mov    %edx,%eax
f010e76c:	01 c0                	add    %eax,%eax
f010e76e:	01 d0                	add    %edx,%eax
f010e770:	01 c0                	add    %eax,%eax
f010e772:	01 d0                	add    %edx,%eax
f010e774:	c1 e0 02             	shl    $0x2,%eax
f010e777:	01 d0                	add    %edx,%eax
f010e779:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e780:	01 d0                	add    %edx,%eax
f010e782:	c1 e0 04             	shl    $0x4,%eax
f010e785:	05 ed 2a 34 f0       	add    $0xf0342aed,%eax
f010e78a:	8a 00                	mov    (%eax),%al
f010e78c:	84 c0                	test   %al,%al
f010e78e:	74 08                	je     f010e798 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f010e790:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e793:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e796:	eb 09                	jmp    f010e7a1 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f010e798:	ff 45 f0             	incl   -0x10(%ebp)
f010e79b:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010e79f:	7e c6                	jle    f010e767 <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f010e7a1:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e7a5:	75 14                	jne    f010e7bb <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010e7a7:	83 ec 04             	sub    $0x4,%esp
f010e7aa:	68 60 fc 11 f0       	push   $0xf011fc60
f010e7af:	6a 51                	push   $0x51
f010e7b1:	68 b0 fc 11 f0       	push   $0xf011fcb0
f010e7b6:	e8 d8 19 ff ff       	call   f0100193 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010e7bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7be:	89 d0                	mov    %edx,%eax
f010e7c0:	01 c0                	add    %eax,%eax
f010e7c2:	01 d0                	add    %edx,%eax
f010e7c4:	01 c0                	add    %eax,%eax
f010e7c6:	01 d0                	add    %edx,%eax
f010e7c8:	c1 e0 02             	shl    $0x2,%eax
f010e7cb:	01 d0                	add    %edx,%eax
f010e7cd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e7d4:	01 d0                	add    %edx,%eax
f010e7d6:	c1 e0 04             	shl    $0x4,%eax
f010e7d9:	8d 90 a0 2a 34 f0    	lea    -0xfcbd560(%eax),%edx
f010e7df:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7e2:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010e7e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7e7:	89 d0                	mov    %edx,%eax
f010e7e9:	01 c0                	add    %eax,%eax
f010e7eb:	01 d0                	add    %edx,%eax
f010e7ed:	01 c0                	add    %eax,%eax
f010e7ef:	01 d0                	add    %edx,%eax
f010e7f1:	c1 e0 02             	shl    $0x2,%eax
f010e7f4:	01 d0                	add    %edx,%eax
f010e7f6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e7fd:	01 d0                	add    %edx,%eax
f010e7ff:	c1 e0 04             	shl    $0x4,%eax
f010e802:	05 ed 2a 34 f0       	add    $0xf0342aed,%eax
f010e807:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010e80a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e80d:	89 d0                	mov    %edx,%eax
f010e80f:	01 c0                	add    %eax,%eax
f010e811:	01 d0                	add    %edx,%eax
f010e813:	01 c0                	add    %eax,%eax
f010e815:	01 d0                	add    %edx,%eax
f010e817:	c1 e0 02             	shl    $0x2,%eax
f010e81a:	01 d0                	add    %edx,%eax
f010e81c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e823:	01 d0                	add    %edx,%eax
f010e825:	c1 e0 04             	shl    $0x4,%eax
f010e828:	83 c0 50             	add    $0x50,%eax
f010e82b:	05 a0 2a 34 f0       	add    $0xf0342aa0,%eax
f010e830:	83 ec 04             	sub    $0x4,%esp
f010e833:	68 00 10 00 00       	push   $0x1000
f010e838:	6a 00                	push   $0x0
f010e83a:	50                   	push   %eax
f010e83b:	e8 6d cc 00 00       	call   f011b4ad <memset>
f010e840:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010e843:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e846:	c9                   	leave  
f010e847:	c3                   	ret    

f010e848 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f010e848:	55                   	push   %ebp
f010e849:	89 e5                	mov    %esp,%ebp
f010e84b:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e84e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f010e855:	e9 95 00 00 00       	jmp    f010e8ef <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010e85a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e85d:	89 d0                	mov    %edx,%eax
f010e85f:	01 c0                	add    %eax,%eax
f010e861:	01 d0                	add    %edx,%eax
f010e863:	01 c0                	add    %eax,%eax
f010e865:	01 d0                	add    %edx,%eax
f010e867:	c1 e0 02             	shl    $0x2,%eax
f010e86a:	01 d0                	add    %edx,%eax
f010e86c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e873:	01 d0                	add    %edx,%eax
f010e875:	c1 e0 04             	shl    $0x4,%eax
f010e878:	05 ed 2a 34 f0       	add    $0xf0342aed,%eax
f010e87d:	8a 00                	mov    (%eax),%al
f010e87f:	84 c0                	test   %al,%al
f010e881:	75 68                	jne    f010e8eb <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f010e883:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e886:	89 d0                	mov    %edx,%eax
f010e888:	01 c0                	add    %eax,%eax
f010e88a:	01 d0                	add    %edx,%eax
f010e88c:	01 c0                	add    %eax,%eax
f010e88e:	01 d0                	add    %edx,%eax
f010e890:	c1 e0 02             	shl    $0x2,%eax
f010e893:	01 d0                	add    %edx,%eax
f010e895:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e89c:	01 d0                	add    %edx,%eax
f010e89e:	c1 e0 04             	shl    $0x4,%eax
f010e8a1:	05 a0 2a 34 f0       	add    $0xf0342aa0,%eax
f010e8a6:	8b 00                	mov    (%eax),%eax
f010e8a8:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e8ab:	75 3f                	jne    f010e8ec <get_share_object_ID+0xa4>
f010e8ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8b0:	89 d0                	mov    %edx,%eax
f010e8b2:	01 c0                	add    %eax,%eax
f010e8b4:	01 d0                	add    %edx,%eax
f010e8b6:	01 c0                	add    %eax,%eax
f010e8b8:	01 d0                	add    %edx,%eax
f010e8ba:	c1 e0 02             	shl    $0x2,%eax
f010e8bd:	01 d0                	add    %edx,%eax
f010e8bf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e8c6:	01 d0                	add    %edx,%eax
f010e8c8:	c1 e0 04             	shl    $0x4,%eax
f010e8cb:	05 a0 2a 34 f0       	add    $0xf0342aa0,%eax
f010e8d0:	83 c0 04             	add    $0x4,%eax
f010e8d3:	83 ec 08             	sub    $0x8,%esp
f010e8d6:	50                   	push   %eax
f010e8d7:	ff 75 0c             	pushl  0xc(%ebp)
f010e8da:	e8 ec ca 00 00       	call   f011b3cb <strcmp>
f010e8df:	83 c4 10             	add    $0x10,%esp
f010e8e2:	85 c0                	test   %eax,%eax
f010e8e4:	75 06                	jne    f010e8ec <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f010e8e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e8e9:	eb 13                	jmp    f010e8fe <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010e8eb:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010e8ec:	ff 45 f4             	incl   -0xc(%ebp)
f010e8ef:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010e8f3:	0f 8e 61 ff ff ff    	jle    f010e85a <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f010e8f9:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010e8fe:	c9                   	leave  
f010e8ff:	c3                   	ret    

f010e900 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f010e900:	55                   	push   %ebp
f010e901:	89 e5                	mov    %esp,%ebp
f010e903:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010e906:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010e90a:	76 0a                	jbe    f010e916 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f010e90c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010e911:	e9 93 00 00 00       	jmp    f010e9a9 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010e916:	8b 55 08             	mov    0x8(%ebp),%edx
f010e919:	89 d0                	mov    %edx,%eax
f010e91b:	01 c0                	add    %eax,%eax
f010e91d:	01 d0                	add    %edx,%eax
f010e91f:	01 c0                	add    %eax,%eax
f010e921:	01 d0                	add    %edx,%eax
f010e923:	c1 e0 02             	shl    $0x2,%eax
f010e926:	01 d0                	add    %edx,%eax
f010e928:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e92f:	01 d0                	add    %edx,%eax
f010e931:	c1 e0 04             	shl    $0x4,%eax
f010e934:	83 c0 50             	add    $0x50,%eax
f010e937:	05 a0 2a 34 f0       	add    $0xf0342aa0,%eax
f010e93c:	83 ec 0c             	sub    $0xc,%esp
f010e93f:	50                   	push   %eax
f010e940:	e8 21 62 ff ff       	call   f0104b66 <clear_frames_storage>
f010e945:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f010e948:	8b 55 08             	mov    0x8(%ebp),%edx
f010e94b:	89 d0                	mov    %edx,%eax
f010e94d:	01 c0                	add    %eax,%eax
f010e94f:	01 d0                	add    %edx,%eax
f010e951:	01 c0                	add    %eax,%eax
f010e953:	01 d0                	add    %edx,%eax
f010e955:	c1 e0 02             	shl    $0x2,%eax
f010e958:	01 d0                	add    %edx,%eax
f010e95a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e961:	01 d0                	add    %edx,%eax
f010e963:	c1 e0 04             	shl    $0x4,%eax
f010e966:	05 a0 2a 34 f0       	add    $0xf0342aa0,%eax
f010e96b:	83 ec 04             	sub    $0x4,%esp
f010e96e:	68 50 10 00 00       	push   $0x1050
f010e973:	6a 00                	push   $0x0
f010e975:	50                   	push   %eax
f010e976:	e8 32 cb 00 00       	call   f011b4ad <memset>
f010e97b:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010e97e:	8b 55 08             	mov    0x8(%ebp),%edx
f010e981:	89 d0                	mov    %edx,%eax
f010e983:	01 c0                	add    %eax,%eax
f010e985:	01 d0                	add    %edx,%eax
f010e987:	01 c0                	add    %eax,%eax
f010e989:	01 d0                	add    %edx,%eax
f010e98b:	c1 e0 02             	shl    $0x2,%eax
f010e98e:	01 d0                	add    %edx,%eax
f010e990:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010e997:	01 d0                	add    %edx,%eax
f010e999:	c1 e0 04             	shl    $0x4,%eax
f010e99c:	05 ed 2a 34 f0       	add    $0xf0342aed,%eax
f010e9a1:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f010e9a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e9a9:	c9                   	leave  
f010e9aa:	c3                   	ret    

f010e9ab <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010e9ab:	55                   	push   %ebp
f010e9ac:	89 e5                	mov    %esp,%ebp
f010e9ae:	83 ec 18             	sub    $0x18,%esp
f010e9b1:	8b 45 14             	mov    0x14(%ebp),%eax
f010e9b4:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("this function is not required...!!");
f010e9b7:	83 ec 04             	sub    $0x4,%esp
f010e9ba:	68 d0 fc 11 f0       	push   $0xf011fcd0
f010e9bf:	68 a5 00 00 00       	push   $0xa5
f010e9c4:	68 b0 fc 11 f0       	push   $0xf011fcb0
f010e9c9:	e8 c5 17 ff ff       	call   f0100193 <_panic>

f010e9ce <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010e9ce:	55                   	push   %ebp
f010e9cf:	89 e5                	mov    %esp,%ebp
f010e9d1:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010e9d4:	83 ec 04             	sub    $0x4,%esp
f010e9d7:	68 d0 fc 11 f0       	push   $0xf011fcd0
f010e9dc:	68 ae 00 00 00       	push   $0xae
f010e9e1:	68 b0 fc 11 f0       	push   $0xf011fcb0
f010e9e6:	e8 a8 17 ff ff       	call   f0100193 <_panic>

f010e9eb <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010e9eb:	55                   	push   %ebp
f010e9ec:	89 e5                	mov    %esp,%ebp
f010e9ee:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010e9f1:	83 ec 04             	sub    $0x4,%esp
f010e9f4:	68 d0 fc 11 f0       	push   $0xf011fcd0
f010e9f9:	68 b7 00 00 00       	push   $0xb7
f010e9fe:	68 b0 fc 11 f0       	push   $0xf011fcb0
f010ea03:	e8 8b 17 ff ff       	call   f0100193 <_panic>

f010ea08 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010ea08:	55                   	push   %ebp
f010ea09:	89 e5                	mov    %esp,%ebp
f010ea0b:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010ea0e:	83 ec 04             	sub    $0x4,%esp
f010ea11:	68 d0 fc 11 f0       	push   $0xf011fcd0
f010ea16:	68 c4 00 00 00       	push   $0xc4
f010ea1b:	68 b0 fc 11 f0       	push   $0xf011fcb0
f010ea20:	e8 6e 17 ff ff       	call   f0100193 <_panic>

f010ea25 <kmalloc>:
#include <kern/kheap.h>
#include <kern/memory_manager.h>


void* kmalloc(unsigned int size)
{
f010ea25:	55                   	push   %ebp
f010ea26:	89 e5                	mov    %esp,%ebp
f010ea28:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010ea2b:	83 ec 04             	sub    $0x4,%esp
f010ea2e:	68 f4 fc 11 f0       	push   $0xf011fcf4
f010ea33:	6a 08                	push   $0x8
f010ea35:	68 17 fd 11 f0       	push   $0xf011fd17
f010ea3a:	e8 54 17 ff ff       	call   f0100193 <_panic>

f010ea3f <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f010ea3f:	55                   	push   %ebp
f010ea40:	89 e5                	mov    %esp,%ebp
f010ea42:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010ea45:	83 ec 04             	sub    $0x4,%esp
f010ea48:	68 f4 fc 11 f0       	push   $0xf011fcf4
f010ea4d:	6a 0e                	push   $0xe
f010ea4f:	68 17 fd 11 f0       	push   $0xf011fd17
f010ea54:	e8 3a 17 ff ff       	call   f0100193 <_panic>

f010ea59 <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f010ea59:	55                   	push   %ebp
f010ea5a:	89 e5                	mov    %esp,%ebp
f010ea5c:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010ea5f:	83 ec 04             	sub    $0x4,%esp
f010ea62:	68 f4 fc 11 f0       	push   $0xf011fcf4
f010ea67:	6a 13                	push   $0x13
f010ea69:	68 17 fd 11 f0       	push   $0xf011fd17
f010ea6e:	e8 20 17 ff ff       	call   f0100193 <_panic>

f010ea73 <kheap_physical_address>:
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f010ea73:	55                   	push   %ebp
f010ea74:	89 e5                	mov    %esp,%ebp
f010ea76:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010ea79:	83 ec 04             	sub    $0x4,%esp
f010ea7c:	68 f4 fc 11 f0       	push   $0xf011fcf4
f010ea81:	6a 19                	push   $0x19
f010ea83:	68 17 fd 11 f0       	push   $0xf011fd17
f010ea88:	e8 06 17 ff ff       	call   f0100193 <_panic>

f010ea8d <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f010ea8d:	55                   	push   %ebp
f010ea8e:	89 e5                	mov    %esp,%ebp
f010ea90:	57                   	push   %edi
f010ea91:	53                   	push   %ebx
f010ea92:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f010ea98:	83 ec 0c             	sub    $0xc,%esp
f010ea9b:	68 24 fd 11 f0       	push   $0xf011fd24
f010eaa0:	e8 91 89 ff ff       	call   f0107436 <cprintf>
f010eaa5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010eaa8:	83 ec 0c             	sub    $0xc,%esp
f010eaab:	68 54 fd 11 f0       	push   $0xf011fd54
f010eab0:	e8 81 89 ff ff       	call   f0107436 <cprintf>
f010eab5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010eab8:	83 ec 0c             	sub    $0xc,%esp
f010eabb:	68 24 fd 11 f0       	push   $0xf011fd24
f010eac0:	e8 71 89 ff ff       	call   f0107436 <cprintf>
f010eac5:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f010eac8:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f010eacc:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f010ead0:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f010ead6:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f010eadc:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f010eae3:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f010eaea:	e8 08 d9 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010eaef:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f010eaf2:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f010eaf8:	b9 14 00 00 00       	mov    $0x14,%ecx
f010eafd:	b8 00 00 00 00       	mov    $0x0,%eax
f010eb02:	89 d7                	mov    %edx,%edi
f010eb04:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f010eb06:	e8 ec d8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010eb0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f010eb0e:	e8 87 f5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010eb13:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f010eb16:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010eb1d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010eb22:	0f b6 d0             	movzbl %al,%edx
f010eb25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010eb28:	01 d0                	add    %edx,%eax
f010eb2a:	48                   	dec    %eax
f010eb2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010eb2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb31:	ba 00 00 00 00       	mov    $0x0,%edx
f010eb36:	f7 75 d4             	divl   -0x2c(%ebp)
f010eb39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010eb3c:	29 d0                	sub    %edx,%eax
f010eb3e:	89 c1                	mov    %eax,%ecx
f010eb40:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010eb47:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010eb4c:	0f b6 c0             	movzbl %al,%eax
f010eb4f:	c1 e0 04             	shl    $0x4,%eax
f010eb52:	89 c2                	mov    %eax,%edx
f010eb54:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010eb57:	01 d0                	add    %edx,%eax
f010eb59:	48                   	dec    %eax
f010eb5a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010eb5d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb60:	ba 00 00 00 00       	mov    $0x0,%edx
f010eb65:	f7 75 cc             	divl   -0x34(%ebp)
f010eb68:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010eb6b:	29 d0                	sub    %edx,%eax
f010eb6d:	01 c8                	add    %ecx,%eax
f010eb6f:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f010eb74:	29 c2                	sub    %eax,%edx
f010eb76:	89 d0                	mov    %edx,%eax
f010eb78:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f010eb7b:	83 ec 0c             	sub    $0xc,%esp
f010eb7e:	ff 75 c4             	pushl  -0x3c(%ebp)
f010eb81:	e8 9f fe ff ff       	call   f010ea25 <kmalloc>
f010eb86:	83 c4 10             	add    $0x10,%esp
f010eb89:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f010eb8f:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010eb95:	85 c0                	test   %eax,%eax
f010eb97:	74 14                	je     f010ebad <test_kmalloc+0x120>
f010eb99:	83 ec 04             	sub    $0x4,%esp
f010eb9c:	68 b0 fd 11 f0       	push   $0xf011fdb0
f010eba1:	6a 3a                	push   $0x3a
f010eba3:	68 e2 fd 11 f0       	push   $0xf011fde2
f010eba8:	e8 e6 15 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ebad:	e8 e8 f4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010ebb2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ebb5:	74 14                	je     f010ebcb <test_kmalloc+0x13e>
f010ebb7:	83 ec 04             	sub    $0x4,%esp
f010ebba:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010ebbf:	6a 3b                	push   $0x3b
f010ebc1:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ebc6:	e8 c8 15 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010ebcb:	e8 27 d8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010ebd0:	89 c2                	mov    %eax,%edx
f010ebd2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ebd5:	39 c2                	cmp    %eax,%edx
f010ebd7:	74 14                	je     f010ebed <test_kmalloc+0x160>
f010ebd9:	83 ec 04             	sub    $0x4,%esp
f010ebdc:	68 5c fe 11 f0       	push   $0xf011fe5c
f010ebe1:	6a 3c                	push   $0x3c
f010ebe3:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ebe8:	e8 a6 15 ff ff       	call   f0100193 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f010ebed:	83 ec 0c             	sub    $0xc,%esp
f010ebf0:	68 9c fe 11 f0       	push   $0xf011fe9c
f010ebf5:	e8 3c 88 ff ff       	call   f0107436 <cprintf>
f010ebfa:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010ebfd:	e8 f5 d7 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010ec02:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ec05:	e8 90 f4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010ec0a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010ec0d:	83 ec 0c             	sub    $0xc,%esp
f010ec10:	68 00 fc 1f 00       	push   $0x1ffc00
f010ec15:	e8 0b fe ff ff       	call   f010ea25 <kmalloc>
f010ec1a:	83 c4 10             	add    $0x10,%esp
f010ec1d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010ec23:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010ec29:	89 c1                	mov    %eax,%ecx
f010ec2b:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010ec32:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ec37:	0f b6 d0             	movzbl %al,%edx
f010ec3a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010ec3d:	01 d0                	add    %edx,%eax
f010ec3f:	48                   	dec    %eax
f010ec40:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010ec43:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ec46:	ba 00 00 00 00       	mov    $0x0,%edx
f010ec4b:	f7 75 c0             	divl   -0x40(%ebp)
f010ec4e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010ec51:	29 d0                	sub    %edx,%eax
f010ec53:	89 c3                	mov    %eax,%ebx
f010ec55:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010ec5c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ec61:	0f b6 c0             	movzbl %al,%eax
f010ec64:	c1 e0 04             	shl    $0x4,%eax
f010ec67:	89 c2                	mov    %eax,%edx
f010ec69:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010ec6c:	01 d0                	add    %edx,%eax
f010ec6e:	48                   	dec    %eax
f010ec6f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010ec72:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010ec75:	ba 00 00 00 00       	mov    $0x0,%edx
f010ec7a:	f7 75 b8             	divl   -0x48(%ebp)
f010ec7d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010ec80:	29 d0                	sub    %edx,%eax
f010ec82:	01 d8                	add    %ebx,%eax
f010ec84:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010ec89:	39 c1                	cmp    %eax,%ecx
f010ec8b:	74 14                	je     f010eca1 <test_kmalloc+0x214>
f010ec8d:	83 ec 04             	sub    $0x4,%esp
f010ec90:	68 c0 fe 11 f0       	push   $0xf011fec0
f010ec95:	6a 43                	push   $0x43
f010ec97:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ec9c:	e8 f2 14 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eca1:	e8 f4 f3 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010eca6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010eca9:	74 14                	je     f010ecbf <test_kmalloc+0x232>
f010ecab:	83 ec 04             	sub    $0x4,%esp
f010ecae:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010ecb3:	6a 44                	push   $0x44
f010ecb5:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ecba:	e8 d4 14 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010ecbf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010ecc2:	e8 30 d7 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010ecc7:	29 c3                	sub    %eax,%ebx
f010ecc9:	89 d8                	mov    %ebx,%eax
f010eccb:	3d 00 02 00 00       	cmp    $0x200,%eax
f010ecd0:	74 14                	je     f010ece6 <test_kmalloc+0x259>
f010ecd2:	83 ec 04             	sub    $0x4,%esp
f010ecd5:	68 5c fe 11 f0       	push   $0xf011fe5c
f010ecda:	6a 45                	push   $0x45
f010ecdc:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ece1:	e8 ad 14 ff ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010ece6:	e8 0c d7 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010eceb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ecee:	e8 a7 f3 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010ecf3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010ecf6:	83 ec 0c             	sub    $0xc,%esp
f010ecf9:	68 00 fc 1f 00       	push   $0x1ffc00
f010ecfe:	e8 22 fd ff ff       	call   f010ea25 <kmalloc>
f010ed03:	83 c4 10             	add    $0x10,%esp
f010ed06:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010ed0c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010ed12:	89 c1                	mov    %eax,%ecx
f010ed14:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010ed1b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ed20:	0f b6 d0             	movzbl %al,%edx
f010ed23:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010ed26:	01 d0                	add    %edx,%eax
f010ed28:	48                   	dec    %eax
f010ed29:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010ed2c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ed2f:	ba 00 00 00 00       	mov    $0x0,%edx
f010ed34:	f7 75 b0             	divl   -0x50(%ebp)
f010ed37:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010ed3a:	29 d0                	sub    %edx,%eax
f010ed3c:	89 c3                	mov    %eax,%ebx
f010ed3e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010ed45:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ed4a:	0f b6 c0             	movzbl %al,%eax
f010ed4d:	c1 e0 04             	shl    $0x4,%eax
f010ed50:	89 c2                	mov    %eax,%edx
f010ed52:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010ed55:	01 d0                	add    %edx,%eax
f010ed57:	48                   	dec    %eax
f010ed58:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010ed5b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010ed5e:	ba 00 00 00 00       	mov    $0x0,%edx
f010ed63:	f7 75 a8             	divl   -0x58(%ebp)
f010ed66:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010ed69:	29 d0                	sub    %edx,%eax
f010ed6b:	01 d8                	add    %ebx,%eax
f010ed6d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f010ed72:	39 c1                	cmp    %eax,%ecx
f010ed74:	74 14                	je     f010ed8a <test_kmalloc+0x2fd>
f010ed76:	83 ec 04             	sub    $0x4,%esp
f010ed79:	68 c0 fe 11 f0       	push   $0xf011fec0
f010ed7e:	6a 4b                	push   $0x4b
f010ed80:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ed85:	e8 09 14 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ed8a:	e8 0b f3 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010ed8f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ed92:	74 14                	je     f010eda8 <test_kmalloc+0x31b>
f010ed94:	83 ec 04             	sub    $0x4,%esp
f010ed97:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010ed9c:	6a 4c                	push   $0x4c
f010ed9e:	68 e2 fd 11 f0       	push   $0xf011fde2
f010eda3:	e8 eb 13 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010eda8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010edab:	e8 47 d6 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010edb0:	29 c3                	sub    %eax,%ebx
f010edb2:	89 d8                	mov    %ebx,%eax
f010edb4:	3d 00 02 00 00       	cmp    $0x200,%eax
f010edb9:	74 14                	je     f010edcf <test_kmalloc+0x342>
f010edbb:	83 ec 04             	sub    $0x4,%esp
f010edbe:	68 5c fe 11 f0       	push   $0xf011fe5c
f010edc3:	6a 4d                	push   $0x4d
f010edc5:	68 e2 fd 11 f0       	push   $0xf011fde2
f010edca:	e8 c4 13 ff ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010edcf:	e8 23 d6 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010edd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010edd7:	e8 be f2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010eddc:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010eddf:	83 ec 0c             	sub    $0xc,%esp
f010ede2:	68 00 08 00 00       	push   $0x800
f010ede7:	e8 39 fc ff ff       	call   f010ea25 <kmalloc>
f010edec:	83 c4 10             	add    $0x10,%esp
f010edef:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010edf5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010edfb:	89 c1                	mov    %eax,%ecx
f010edfd:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010ee04:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ee09:	0f b6 d0             	movzbl %al,%edx
f010ee0c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010ee0f:	01 d0                	add    %edx,%eax
f010ee11:	48                   	dec    %eax
f010ee12:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010ee15:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010ee18:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee1d:	f7 75 a0             	divl   -0x60(%ebp)
f010ee20:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010ee23:	29 d0                	sub    %edx,%eax
f010ee25:	89 c3                	mov    %eax,%ebx
f010ee27:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010ee2e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ee33:	0f b6 c0             	movzbl %al,%eax
f010ee36:	c1 e0 04             	shl    $0x4,%eax
f010ee39:	89 c2                	mov    %eax,%edx
f010ee3b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010ee3e:	01 d0                	add    %edx,%eax
f010ee40:	48                   	dec    %eax
f010ee41:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010ee44:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ee47:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee4c:	f7 75 98             	divl   -0x68(%ebp)
f010ee4f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ee52:	29 d0                	sub    %edx,%eax
f010ee54:	01 d8                	add    %ebx,%eax
f010ee56:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010ee5b:	39 c1                	cmp    %eax,%ecx
f010ee5d:	74 14                	je     f010ee73 <test_kmalloc+0x3e6>
f010ee5f:	83 ec 04             	sub    $0x4,%esp
f010ee62:	68 c0 fe 11 f0       	push   $0xf011fec0
f010ee67:	6a 53                	push   $0x53
f010ee69:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ee6e:	e8 20 13 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ee73:	e8 22 f2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010ee78:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ee7b:	74 14                	je     f010ee91 <test_kmalloc+0x404>
f010ee7d:	83 ec 04             	sub    $0x4,%esp
f010ee80:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010ee85:	6a 54                	push   $0x54
f010ee87:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ee8c:	e8 02 13 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010ee91:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010ee94:	e8 5e d5 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010ee99:	29 c3                	sub    %eax,%ebx
f010ee9b:	89 d8                	mov    %ebx,%eax
f010ee9d:	83 f8 01             	cmp    $0x1,%eax
f010eea0:	74 14                	je     f010eeb6 <test_kmalloc+0x429>
f010eea2:	83 ec 04             	sub    $0x4,%esp
f010eea5:	68 5c fe 11 f0       	push   $0xf011fe5c
f010eeaa:	6a 55                	push   $0x55
f010eeac:	68 e2 fd 11 f0       	push   $0xf011fde2
f010eeb1:	e8 dd 12 ff ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010eeb6:	e8 3c d5 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010eebb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010eebe:	e8 d7 f1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010eec3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010eec6:	83 ec 0c             	sub    $0xc,%esp
f010eec9:	68 00 08 00 00       	push   $0x800
f010eece:	e8 52 fb ff ff       	call   f010ea25 <kmalloc>
f010eed3:	83 c4 10             	add    $0x10,%esp
f010eed6:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010eedc:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f010eee2:	89 c1                	mov    %eax,%ecx
f010eee4:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010eeeb:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010eef0:	0f b6 d0             	movzbl %al,%edx
f010eef3:	8b 45 90             	mov    -0x70(%ebp),%eax
f010eef6:	01 d0                	add    %edx,%eax
f010eef8:	48                   	dec    %eax
f010eef9:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010eefc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010eeff:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef04:	f7 75 90             	divl   -0x70(%ebp)
f010ef07:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010ef0a:	29 d0                	sub    %edx,%eax
f010ef0c:	89 c3                	mov    %eax,%ebx
f010ef0e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010ef15:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ef1a:	0f b6 c0             	movzbl %al,%eax
f010ef1d:	c1 e0 04             	shl    $0x4,%eax
f010ef20:	89 c2                	mov    %eax,%edx
f010ef22:	8b 45 88             	mov    -0x78(%ebp),%eax
f010ef25:	01 d0                	add    %edx,%eax
f010ef27:	48                   	dec    %eax
f010ef28:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010ef2b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010ef2e:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef33:	f7 75 88             	divl   -0x78(%ebp)
f010ef36:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010ef39:	29 d0                	sub    %edx,%eax
f010ef3b:	01 d8                	add    %ebx,%eax
f010ef3d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f010ef42:	39 c1                	cmp    %eax,%ecx
f010ef44:	74 14                	je     f010ef5a <test_kmalloc+0x4cd>
f010ef46:	83 ec 04             	sub    $0x4,%esp
f010ef49:	68 c0 fe 11 f0       	push   $0xf011fec0
f010ef4e:	6a 5b                	push   $0x5b
f010ef50:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ef55:	e8 39 12 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ef5a:	e8 3b f1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010ef5f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ef62:	74 14                	je     f010ef78 <test_kmalloc+0x4eb>
f010ef64:	83 ec 04             	sub    $0x4,%esp
f010ef67:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010ef6c:	6a 5c                	push   $0x5c
f010ef6e:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ef73:	e8 1b 12 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010ef78:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010ef7b:	e8 77 d4 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010ef80:	29 c3                	sub    %eax,%ebx
f010ef82:	89 d8                	mov    %ebx,%eax
f010ef84:	83 f8 01             	cmp    $0x1,%eax
f010ef87:	74 14                	je     f010ef9d <test_kmalloc+0x510>
f010ef89:	83 ec 04             	sub    $0x4,%esp
f010ef8c:	68 5c fe 11 f0       	push   $0xf011fe5c
f010ef91:	6a 5d                	push   $0x5d
f010ef93:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ef98:	e8 f6 11 ff ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010ef9d:	e8 55 d4 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010efa2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010efa5:	e8 f0 f0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010efaa:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010efad:	83 ec 0c             	sub    $0xc,%esp
f010efb0:	68 00 1c 00 00       	push   $0x1c00
f010efb5:	e8 6b fa ff ff       	call   f010ea25 <kmalloc>
f010efba:	83 c4 10             	add    $0x10,%esp
f010efbd:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010efc3:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010efc9:	89 c1                	mov    %eax,%ecx
f010efcb:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010efd2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010efd7:	0f b6 d0             	movzbl %al,%edx
f010efda:	8b 45 80             	mov    -0x80(%ebp),%eax
f010efdd:	01 d0                	add    %edx,%eax
f010efdf:	48                   	dec    %eax
f010efe0:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010efe6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010efec:	ba 00 00 00 00       	mov    $0x0,%edx
f010eff1:	f7 75 80             	divl   -0x80(%ebp)
f010eff4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010effa:	29 d0                	sub    %edx,%eax
f010effc:	89 c3                	mov    %eax,%ebx
f010effe:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010f005:	10 00 00 
f010f008:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f00d:	0f b6 c0             	movzbl %al,%eax
f010f010:	c1 e0 04             	shl    $0x4,%eax
f010f013:	89 c2                	mov    %eax,%edx
f010f015:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010f01b:	01 d0                	add    %edx,%eax
f010f01d:	48                   	dec    %eax
f010f01e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010f024:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010f02a:	ba 00 00 00 00       	mov    $0x0,%edx
f010f02f:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010f035:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010f03b:	29 d0                	sub    %edx,%eax
f010f03d:	01 d8                	add    %ebx,%eax
f010f03f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f010f044:	39 c1                	cmp    %eax,%ecx
f010f046:	74 14                	je     f010f05c <test_kmalloc+0x5cf>
f010f048:	83 ec 04             	sub    $0x4,%esp
f010f04b:	68 c0 fe 11 f0       	push   $0xf011fec0
f010f050:	6a 63                	push   $0x63
f010f052:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f057:	e8 37 11 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f05c:	e8 39 f0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f061:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f064:	74 14                	je     f010f07a <test_kmalloc+0x5ed>
f010f066:	83 ec 04             	sub    $0x4,%esp
f010f069:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010f06e:	6a 64                	push   $0x64
f010f070:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f075:	e8 19 11 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f010f07a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010f07d:	e8 75 d3 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f082:	29 c3                	sub    %eax,%ebx
f010f084:	89 d8                	mov    %ebx,%eax
f010f086:	83 f8 02             	cmp    $0x2,%eax
f010f089:	74 14                	je     f010f09f <test_kmalloc+0x612>
f010f08b:	83 ec 04             	sub    $0x4,%esp
f010f08e:	68 5c fe 11 f0       	push   $0xf011fe5c
f010f093:	6a 65                	push   $0x65
f010f095:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f09a:	e8 f4 10 ff ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010f09f:	e8 53 d3 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f0a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f0a7:	e8 ee ef ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f0ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010f0af:	83 ec 0c             	sub    $0xc,%esp
f010f0b2:	68 00 fc 2f 00       	push   $0x2ffc00
f010f0b7:	e8 69 f9 ff ff       	call   f010ea25 <kmalloc>
f010f0bc:	83 c4 10             	add    $0x10,%esp
f010f0bf:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010f0c5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010f0cb:	89 c1                	mov    %eax,%ecx
f010f0cd:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010f0d4:	10 00 00 
f010f0d7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f0dc:	0f b6 d0             	movzbl %al,%edx
f010f0df:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010f0e5:	01 d0                	add    %edx,%eax
f010f0e7:	48                   	dec    %eax
f010f0e8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010f0ee:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010f0f4:	ba 00 00 00 00       	mov    $0x0,%edx
f010f0f9:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010f0ff:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010f105:	29 d0                	sub    %edx,%eax
f010f107:	89 c3                	mov    %eax,%ebx
f010f109:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010f110:	10 00 00 
f010f113:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f118:	0f b6 c0             	movzbl %al,%eax
f010f11b:	c1 e0 04             	shl    $0x4,%eax
f010f11e:	89 c2                	mov    %eax,%edx
f010f120:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010f126:	01 d0                	add    %edx,%eax
f010f128:	48                   	dec    %eax
f010f129:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010f12f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010f135:	ba 00 00 00 00       	mov    $0x0,%edx
f010f13a:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010f140:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010f146:	29 d0                	sub    %edx,%eax
f010f148:	01 d8                	add    %ebx,%eax
f010f14a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f010f14f:	39 c1                	cmp    %eax,%ecx
f010f151:	74 14                	je     f010f167 <test_kmalloc+0x6da>
f010f153:	83 ec 04             	sub    $0x4,%esp
f010f156:	68 c0 fe 11 f0       	push   $0xf011fec0
f010f15b:	6a 6b                	push   $0x6b
f010f15d:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f162:	e8 2c 10 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f167:	e8 2e ef ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f16c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f16f:	74 14                	je     f010f185 <test_kmalloc+0x6f8>
f010f171:	83 ec 04             	sub    $0x4,%esp
f010f174:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010f179:	6a 6c                	push   $0x6c
f010f17b:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f180:	e8 0e 10 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f010f185:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010f188:	e8 6a d2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f18d:	29 c3                	sub    %eax,%ebx
f010f18f:	89 d8                	mov    %ebx,%eax
f010f191:	3d 00 03 00 00       	cmp    $0x300,%eax
f010f196:	74 14                	je     f010f1ac <test_kmalloc+0x71f>
f010f198:	83 ec 04             	sub    $0x4,%esp
f010f19b:	68 5c fe 11 f0       	push   $0xf011fe5c
f010f1a0:	6a 6d                	push   $0x6d
f010f1a2:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f1a7:	e8 e7 0f ff ff       	call   f0100193 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f010f1ac:	e8 46 d2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f1b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f1b4:	e8 e1 ee ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f1b9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f010f1bc:	83 ec 0c             	sub    $0xc,%esp
f010f1bf:	68 00 fc 5f 00       	push   $0x5ffc00
f010f1c4:	e8 5c f8 ff ff       	call   f010ea25 <kmalloc>
f010f1c9:	83 c4 10             	add    $0x10,%esp
f010f1cc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010f1d2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010f1d8:	89 c1                	mov    %eax,%ecx
f010f1da:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010f1e1:	10 00 00 
f010f1e4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f1e9:	0f b6 d0             	movzbl %al,%edx
f010f1ec:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010f1f2:	01 d0                	add    %edx,%eax
f010f1f4:	48                   	dec    %eax
f010f1f5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010f1fb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010f201:	ba 00 00 00 00       	mov    $0x0,%edx
f010f206:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010f20c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010f212:	29 d0                	sub    %edx,%eax
f010f214:	89 c3                	mov    %eax,%ebx
f010f216:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010f21d:	10 00 00 
f010f220:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f225:	0f b6 c0             	movzbl %al,%eax
f010f228:	c1 e0 04             	shl    $0x4,%eax
f010f22b:	89 c2                	mov    %eax,%edx
f010f22d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010f233:	01 d0                	add    %edx,%eax
f010f235:	48                   	dec    %eax
f010f236:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010f23c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010f242:	ba 00 00 00 00       	mov    $0x0,%edx
f010f247:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010f24d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010f253:	29 d0                	sub    %edx,%eax
f010f255:	01 d8                	add    %ebx,%eax
f010f257:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f010f25c:	39 c1                	cmp    %eax,%ecx
f010f25e:	74 14                	je     f010f274 <test_kmalloc+0x7e7>
f010f260:	83 ec 04             	sub    $0x4,%esp
f010f263:	68 c0 fe 11 f0       	push   $0xf011fec0
f010f268:	6a 73                	push   $0x73
f010f26a:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f26f:	e8 1f 0f ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f274:	e8 21 ee ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f279:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f27c:	74 14                	je     f010f292 <test_kmalloc+0x805>
f010f27e:	83 ec 04             	sub    $0x4,%esp
f010f281:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010f286:	6a 74                	push   $0x74
f010f288:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f28d:	e8 01 0f ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f010f292:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010f295:	e8 5d d1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f29a:	29 c3                	sub    %eax,%ebx
f010f29c:	89 d8                	mov    %ebx,%eax
f010f29e:	3d 00 06 00 00       	cmp    $0x600,%eax
f010f2a3:	74 14                	je     f010f2b9 <test_kmalloc+0x82c>
f010f2a5:	83 ec 04             	sub    $0x4,%esp
f010f2a8:	68 5c fe 11 f0       	push   $0xf011fe5c
f010f2ad:	6a 75                	push   $0x75
f010f2af:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f2b4:	e8 da 0e ff ff       	call   f0100193 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f010f2b9:	e8 39 d1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f2be:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f2c1:	e8 d4 ed ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f2c6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f010f2c9:	83 ec 0c             	sub    $0xc,%esp
f010f2cc:	68 00 38 00 00       	push   $0x3800
f010f2d1:	e8 4f f7 ff ff       	call   f010ea25 <kmalloc>
f010f2d6:	83 c4 10             	add    $0x10,%esp
f010f2d9:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010f2df:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010f2e5:	89 c1                	mov    %eax,%ecx
f010f2e7:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010f2ee:	10 00 00 
f010f2f1:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f2f6:	0f b6 d0             	movzbl %al,%edx
f010f2f9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010f2ff:	01 d0                	add    %edx,%eax
f010f301:	48                   	dec    %eax
f010f302:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010f308:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010f30e:	ba 00 00 00 00       	mov    $0x0,%edx
f010f313:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010f319:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010f31f:	29 d0                	sub    %edx,%eax
f010f321:	89 c3                	mov    %eax,%ebx
f010f323:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010f32a:	10 00 00 
f010f32d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f332:	0f b6 c0             	movzbl %al,%eax
f010f335:	c1 e0 04             	shl    $0x4,%eax
f010f338:	89 c2                	mov    %eax,%edx
f010f33a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010f340:	01 d0                	add    %edx,%eax
f010f342:	48                   	dec    %eax
f010f343:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010f349:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010f34f:	ba 00 00 00 00       	mov    $0x0,%edx
f010f354:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010f35a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010f360:	29 d0                	sub    %edx,%eax
f010f362:	01 d8                	add    %ebx,%eax
f010f364:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f010f369:	39 c1                	cmp    %eax,%ecx
f010f36b:	74 14                	je     f010f381 <test_kmalloc+0x8f4>
f010f36d:	83 ec 04             	sub    $0x4,%esp
f010f370:	68 c0 fe 11 f0       	push   $0xf011fec0
f010f375:	6a 7b                	push   $0x7b
f010f377:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f37c:	e8 12 0e ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f381:	e8 14 ed ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f386:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f389:	74 14                	je     f010f39f <test_kmalloc+0x912>
f010f38b:	83 ec 04             	sub    $0x4,%esp
f010f38e:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010f393:	6a 7c                	push   $0x7c
f010f395:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f39a:	e8 f4 0d ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f010f39f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010f3a2:	e8 50 d0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f3a7:	29 c3                	sub    %eax,%ebx
f010f3a9:	89 d8                	mov    %ebx,%eax
f010f3ab:	83 f8 04             	cmp    $0x4,%eax
f010f3ae:	74 14                	je     f010f3c4 <test_kmalloc+0x937>
f010f3b0:	83 ec 04             	sub    $0x4,%esp
f010f3b3:	68 5c fe 11 f0       	push   $0xf011fe5c
f010f3b8:	6a 7d                	push   $0x7d
f010f3ba:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f3bf:	e8 cf 0d ff ff       	call   f0100193 <_panic>

		cprintf("\b\b\b50%");
f010f3c4:	83 ec 0c             	sub    $0xc,%esp
f010f3c7:	68 26 ff 11 f0       	push   $0xf011ff26
f010f3cc:	e8 65 80 ff ff       	call   f0107436 <cprintf>
f010f3d1:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f010f3d4:	e8 1e d0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f3d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f010f3dc:	e8 b9 ec ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f3e1:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f010f3e4:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f010f3eb:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f010f3ee:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010f3f4:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f010f3fa:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010f400:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010f403:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f010f405:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010f40b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010f411:	01 c2                	add    %eax,%edx
f010f413:	8a 45 f2             	mov    -0xe(%ebp),%al
f010f416:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f010f418:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010f41e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f010f424:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f010f42b:	fd 0f 00 
			shortArr[0] = minShort;
f010f42e:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f010f434:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f437:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f010f43a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010f440:	01 c0                	add    %eax,%eax
f010f442:	89 c2                	mov    %eax,%edx
f010f444:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f44a:	01 c2                	add    %eax,%edx
f010f44c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010f450:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f010f453:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010f459:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f010f45f:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f010f466:	01 00 00 
			intArr[0] = minInt;
f010f469:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f46f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010f472:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f010f474:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010f47a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f481:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f487:	01 c2                	add    %eax,%edx
f010f489:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f48c:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f010f48e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010f494:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f010f49a:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f010f4a1:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f010f4a4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f4aa:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010f4ad:	88 10                	mov    %dl,(%eax)
f010f4af:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010f4b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f4b8:	66 89 42 02          	mov    %ax,0x2(%edx)
f010f4bc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f4c2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010f4c5:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f010f4c8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f4ce:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010f4d5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f4db:	01 c2                	add    %eax,%edx
f010f4dd:	8a 45 f2             	mov    -0xe(%ebp),%al
f010f4e0:	88 02                	mov    %al,(%edx)
f010f4e2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f4e8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010f4ef:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f4f5:	01 c2                	add    %eax,%edx
f010f4f7:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010f4fb:	66 89 42 02          	mov    %ax,0x2(%edx)
f010f4ff:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f505:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010f50c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f512:	01 c2                	add    %eax,%edx
f010f514:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f517:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f010f51a:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f010f521:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f010f524:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010f52a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f010f530:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010f536:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010f539:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f010f53b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010f541:	89 c2                	mov    %eax,%edx
f010f543:	c1 ea 1f             	shr    $0x1f,%edx
f010f546:	01 d0                	add    %edx,%eax
f010f548:	d1 f8                	sar    %eax
f010f54a:	89 c2                	mov    %eax,%edx
f010f54c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010f552:	01 c2                	add    %eax,%edx
f010f554:	8a 45 f2             	mov    -0xe(%ebp),%al
f010f557:	88 c1                	mov    %al,%cl
f010f559:	c0 e9 07             	shr    $0x7,%cl
f010f55c:	01 c8                	add    %ecx,%eax
f010f55e:	d0 f8                	sar    %al
f010f560:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f010f562:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010f568:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010f56e:	01 c2                	add    %eax,%edx
f010f570:	8a 45 f2             	mov    -0xe(%ebp),%al
f010f573:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f010f575:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010f57b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f010f581:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f010f588:	1b 00 00 
			shortArr2[0] = minShort;
f010f58b:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010f591:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f594:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f010f597:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010f59d:	01 c0                	add    %eax,%eax
f010f59f:	89 c2                	mov    %eax,%edx
f010f5a1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010f5a7:	01 c2                	add    %eax,%edx
f010f5a9:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010f5ad:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010f5b0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010f5b6:	8a 00                	mov    (%eax),%al
f010f5b8:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010f5bb:	75 15                	jne    f010f5d2 <test_kmalloc+0xb45>
f010f5bd:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010f5c3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010f5c9:	01 d0                	add    %edx,%eax
f010f5cb:	8a 00                	mov    (%eax),%al
f010f5cd:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010f5d0:	74 17                	je     f010f5e9 <test_kmalloc+0xb5c>
f010f5d2:	83 ec 04             	sub    $0x4,%esp
f010f5d5:	68 30 ff 11 f0       	push   $0xf011ff30
f010f5da:	68 ac 00 00 00       	push   $0xac
f010f5df:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f5e4:	e8 aa 0b ff ff       	call   f0100193 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010f5e9:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f5ef:	66 8b 00             	mov    (%eax),%ax
f010f5f2:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010f5f6:	75 1b                	jne    f010f613 <test_kmalloc+0xb86>
f010f5f8:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010f5fe:	01 c0                	add    %eax,%eax
f010f600:	89 c2                	mov    %eax,%edx
f010f602:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f608:	01 d0                	add    %edx,%eax
f010f60a:	66 8b 00             	mov    (%eax),%ax
f010f60d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010f611:	74 17                	je     f010f62a <test_kmalloc+0xb9d>
f010f613:	83 ec 04             	sub    $0x4,%esp
f010f616:	68 30 ff 11 f0       	push   $0xf011ff30
f010f61b:	68 ad 00 00 00       	push   $0xad
f010f620:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f625:	e8 69 0b ff ff       	call   f0100193 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f010f62a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f630:	8b 00                	mov    (%eax),%eax
f010f632:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010f635:	75 1c                	jne    f010f653 <test_kmalloc+0xbc6>
f010f637:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010f63d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f644:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010f64a:	01 d0                	add    %edx,%eax
f010f64c:	8b 00                	mov    (%eax),%eax
f010f64e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f651:	74 17                	je     f010f66a <test_kmalloc+0xbdd>
f010f653:	83 ec 04             	sub    $0x4,%esp
f010f656:	68 30 ff 11 f0       	push   $0xf011ff30
f010f65b:	68 ae 00 00 00       	push   $0xae
f010f660:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f665:	e8 29 0b ff ff       	call   f0100193 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f010f66a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f670:	8a 00                	mov    (%eax),%al
f010f672:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010f675:	75 1c                	jne    f010f693 <test_kmalloc+0xc06>
f010f677:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f67d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010f684:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f68a:	01 d0                	add    %edx,%eax
f010f68c:	8a 00                	mov    (%eax),%al
f010f68e:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010f691:	74 17                	je     f010f6aa <test_kmalloc+0xc1d>
f010f693:	83 ec 04             	sub    $0x4,%esp
f010f696:	68 30 ff 11 f0       	push   $0xf011ff30
f010f69b:	68 b0 00 00 00       	push   $0xb0
f010f6a0:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f6a5:	e8 e9 0a ff ff       	call   f0100193 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f010f6aa:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f6b0:	66 8b 40 02          	mov    0x2(%eax),%ax
f010f6b4:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010f6b8:	75 1f                	jne    f010f6d9 <test_kmalloc+0xc4c>
f010f6ba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f6c0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010f6c7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f6cd:	01 d0                	add    %edx,%eax
f010f6cf:	66 8b 40 02          	mov    0x2(%eax),%ax
f010f6d3:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010f6d7:	74 17                	je     f010f6f0 <test_kmalloc+0xc63>
f010f6d9:	83 ec 04             	sub    $0x4,%esp
f010f6dc:	68 30 ff 11 f0       	push   $0xf011ff30
f010f6e1:	68 b1 00 00 00       	push   $0xb1
f010f6e6:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f6eb:	e8 a3 0a ff ff       	call   f0100193 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f010f6f0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f6f6:	8b 40 04             	mov    0x4(%eax),%eax
f010f6f9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010f6fc:	75 1d                	jne    f010f71b <test_kmalloc+0xc8e>
f010f6fe:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010f704:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010f70b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010f711:	01 d0                	add    %edx,%eax
f010f713:	8b 40 04             	mov    0x4(%eax),%eax
f010f716:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010f719:	74 17                	je     f010f732 <test_kmalloc+0xca5>
f010f71b:	83 ec 04             	sub    $0x4,%esp
f010f71e:	68 30 ff 11 f0       	push   $0xf011ff30
f010f723:	68 b2 00 00 00       	push   $0xb2
f010f728:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f72d:	e8 61 0a ff ff       	call   f0100193 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010f732:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010f738:	8a 00                	mov    (%eax),%al
f010f73a:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010f73d:	75 40                	jne    f010f77f <test_kmalloc+0xcf2>
f010f73f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010f745:	89 c2                	mov    %eax,%edx
f010f747:	c1 ea 1f             	shr    $0x1f,%edx
f010f74a:	01 d0                	add    %edx,%eax
f010f74c:	d1 f8                	sar    %eax
f010f74e:	89 c2                	mov    %eax,%edx
f010f750:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010f756:	01 d0                	add    %edx,%eax
f010f758:	8a 10                	mov    (%eax),%dl
f010f75a:	8a 45 f2             	mov    -0xe(%ebp),%al
f010f75d:	88 c1                	mov    %al,%cl
f010f75f:	c0 e9 07             	shr    $0x7,%cl
f010f762:	01 c8                	add    %ecx,%eax
f010f764:	d0 f8                	sar    %al
f010f766:	38 c2                	cmp    %al,%dl
f010f768:	75 15                	jne    f010f77f <test_kmalloc+0xcf2>
f010f76a:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010f770:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010f776:	01 d0                	add    %edx,%eax
f010f778:	8a 00                	mov    (%eax),%al
f010f77a:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010f77d:	74 17                	je     f010f796 <test_kmalloc+0xd09>
f010f77f:	83 ec 04             	sub    $0x4,%esp
f010f782:	68 30 ff 11 f0       	push   $0xf011ff30
f010f787:	68 b4 00 00 00       	push   $0xb4
f010f78c:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f791:	e8 fd 09 ff ff       	call   f0100193 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010f796:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010f79c:	66 8b 00             	mov    (%eax),%ax
f010f79f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010f7a3:	75 1b                	jne    f010f7c0 <test_kmalloc+0xd33>
f010f7a5:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010f7ab:	01 c0                	add    %eax,%eax
f010f7ad:	89 c2                	mov    %eax,%edx
f010f7af:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010f7b5:	01 d0                	add    %edx,%eax
f010f7b7:	66 8b 00             	mov    (%eax),%ax
f010f7ba:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010f7be:	74 17                	je     f010f7d7 <test_kmalloc+0xd4a>
f010f7c0:	83 ec 04             	sub    $0x4,%esp
f010f7c3:	68 30 ff 11 f0       	push   $0xf011ff30
f010f7c8:	68 b5 00 00 00       	push   $0xb5
f010f7cd:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f7d2:	e8 bc 09 ff ff       	call   f0100193 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010f7d7:	e8 1b cc ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f7dc:	89 c2                	mov    %eax,%edx
f010f7de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f7e1:	39 c2                	cmp    %eax,%edx
f010f7e3:	74 17                	je     f010f7fc <test_kmalloc+0xd6f>
f010f7e5:	83 ec 04             	sub    $0x4,%esp
f010f7e8:	68 5c fe 11 f0       	push   $0xf011fe5c
f010f7ed:	68 b7 00 00 00       	push   $0xb7
f010f7f2:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f7f7:	e8 97 09 ff ff       	call   f0100193 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f7fc:	e8 99 e8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f801:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f804:	74 17                	je     f010f81d <test_kmalloc+0xd90>
f010f806:	83 ec 04             	sub    $0x4,%esp
f010f809:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010f80e:	68 b8 00 00 00       	push   $0xb8
f010f813:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f818:	e8 76 09 ff ff       	call   f0100193 <_panic>
		}

		cprintf("\b\b\b80%");
f010f81d:	83 ec 0c             	sub    $0xc,%esp
f010f820:	68 65 ff 11 f0       	push   $0xf011ff65
f010f825:	e8 0c 7c ff ff       	call   f0107436 <cprintf>
f010f82a:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f010f82d:	e8 c5 cb ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f832:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f835:	e8 60 e8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f83a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f010f83d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f010f844:	10 00 00 
f010f847:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f84c:	0f b6 d0             	movzbl %al,%edx
f010f84f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f855:	01 d0                	add    %edx,%eax
f010f857:	48                   	dec    %eax
f010f858:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f010f85e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010f864:	ba 00 00 00 00       	mov    $0x0,%edx
f010f869:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f010f86f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010f875:	29 d0                	sub    %edx,%eax
f010f877:	89 c1                	mov    %eax,%ecx
f010f879:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f010f880:	10 00 00 
f010f883:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f888:	0f b6 c0             	movzbl %al,%eax
f010f88b:	c1 e0 04             	shl    $0x4,%eax
f010f88e:	89 c2                	mov    %eax,%edx
f010f890:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010f896:	01 d0                	add    %edx,%eax
f010f898:	48                   	dec    %eax
f010f899:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f010f89f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010f8a5:	ba 00 00 00 00       	mov    $0x0,%edx
f010f8aa:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f010f8b0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010f8b6:	29 d0                	sub    %edx,%eax
f010f8b8:	01 c8                	add    %ecx,%eax
f010f8ba:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f010f8bf:	29 c2                	sub    %eax,%edx
f010f8c1:	89 d0                	mov    %edx,%eax
f010f8c3:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f010f8c9:	83 ec 0c             	sub    $0xc,%esp
f010f8cc:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f010f8d2:	e8 4e f1 ff ff       	call   f010ea25 <kmalloc>
f010f8d7:	83 c4 10             	add    $0x10,%esp
f010f8da:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f010f8e0:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010f8e6:	85 c0                	test   %eax,%eax
f010f8e8:	74 17                	je     f010f901 <test_kmalloc+0xe74>
f010f8ea:	83 ec 04             	sub    $0x4,%esp
f010f8ed:	68 b0 fd 11 f0       	push   $0xf011fdb0
f010f8f2:	68 c2 00 00 00       	push   $0xc2
f010f8f7:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f8fc:	e8 92 08 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f901:	e8 94 e7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010f906:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f909:	74 17                	je     f010f922 <test_kmalloc+0xe95>
f010f90b:	83 ec 04             	sub    $0x4,%esp
f010f90e:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010f913:	68 c3 00 00 00       	push   $0xc3
f010f918:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f91d:	e8 71 08 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010f922:	e8 d0 ca ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010f927:	89 c2                	mov    %eax,%edx
f010f929:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f92c:	39 c2                	cmp    %eax,%edx
f010f92e:	74 17                	je     f010f947 <test_kmalloc+0xeba>
f010f930:	83 ec 04             	sub    $0x4,%esp
f010f933:	68 5c fe 11 f0       	push   $0xf011fe5c
f010f938:	68 c4 00 00 00       	push   $0xc4
f010f93d:	68 e2 fd 11 f0       	push   $0xf011fde2
f010f942:	e8 4c 08 ff ff       	call   f0100193 <_panic>

		cprintf("\b\b\b90%");
f010f947:	83 ec 0c             	sub    $0xc,%esp
f010f94a:	68 6c ff 11 f0       	push   $0xf011ff6c
f010f94f:	e8 e2 7a ff ff       	call   f0107436 <cprintf>
f010f954:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f010f957:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010f95d:	05 00 40 00 00       	add    $0x4000,%eax
f010f962:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010f968:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f010f96f:	10 00 00 
f010f972:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f977:	0f b6 d0             	movzbl %al,%edx
f010f97a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010f980:	01 d0                	add    %edx,%eax
f010f982:	48                   	dec    %eax
f010f983:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f010f989:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010f98f:	ba 00 00 00 00       	mov    $0x0,%edx
f010f994:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f010f99a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010f9a0:	29 d0                	sub    %edx,%eax
f010f9a2:	89 c1                	mov    %eax,%ecx
f010f9a4:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f010f9ab:	10 00 00 
f010f9ae:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010f9b3:	0f b6 c0             	movzbl %al,%eax
f010f9b6:	c1 e0 04             	shl    $0x4,%eax
f010f9b9:	89 c2                	mov    %eax,%edx
f010f9bb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010f9c1:	01 d0                	add    %edx,%eax
f010f9c3:	48                   	dec    %eax
f010f9c4:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f010f9ca:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010f9d0:	ba 00 00 00 00       	mov    $0x0,%edx
f010f9d5:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f010f9db:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010f9e1:	29 d0                	sub    %edx,%eax
f010f9e3:	01 c8                	add    %ecx,%eax
f010f9e5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010f9ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010f9ed:	eb 6b                	jmp    f010fa5a <test_kmalloc+0xfcd>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, (void*)va, &table);
f010f9ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f9f2:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f010f9f7:	83 ec 04             	sub    $0x4,%esp
f010f9fa:	8d 8d 94 fe ff ff    	lea    -0x16c(%ebp),%ecx
f010fa00:	51                   	push   %ecx
f010fa01:	52                   	push   %edx
f010fa02:	50                   	push   %eax
f010fa03:	e8 63 44 ff ff       	call   f0103e6b <get_page_table>
f010fa08:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f010fa0b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f010fa11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fa14:	c1 ea 0c             	shr    $0xc,%edx
f010fa17:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010fa1d:	c1 e2 02             	shl    $0x2,%edx
f010fa20:	01 d0                	add    %edx,%eax
f010fa22:	8b 00                	mov    (%eax),%eax
f010fa24:	25 ff 0f 00 00       	and    $0xfff,%eax
f010fa29:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f010fa2f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010fa35:	83 e0 04             	and    $0x4,%eax
f010fa38:	85 c0                	test   %eax,%eax
f010fa3a:	74 17                	je     f010fa53 <test_kmalloc+0xfc6>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f010fa3c:	83 ec 04             	sub    $0x4,%esp
f010fa3f:	68 74 ff 11 f0       	push   $0xf011ff74
f010fa44:	68 d1 00 00 00       	push   $0xd1
f010fa49:	68 e2 fd 11 f0       	push   $0xf011fde2
f010fa4e:	e8 40 07 ff ff       	call   f0100193 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010fa53:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010fa5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fa5d:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f010fa63:	72 8a                	jb     f010f9ef <test_kmalloc+0xf62>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f010fa65:	83 ec 0c             	sub    $0xc,%esp
f010fa68:	68 be ff 11 f0       	push   $0xf011ffbe
f010fa6d:	e8 c4 79 ff ff       	call   f0107436 <cprintf>
f010fa72:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f010fa75:	83 ec 0c             	sub    $0xc,%esp
f010fa78:	68 c8 ff 11 f0       	push   $0xf011ffc8
f010fa7d:	e8 b4 79 ff ff       	call   f0107436 <cprintf>
f010fa82:	83 c4 10             	add    $0x10,%esp

	return 1;
f010fa85:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010fa8a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010fa8d:	5b                   	pop    %ebx
f010fa8e:	5f                   	pop    %edi
f010fa8f:	5d                   	pop    %ebp
f010fa90:	c3                   	ret    

f010fa91 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f010fa91:	55                   	push   %ebp
f010fa92:	89 e5                	mov    %esp,%ebp
f010fa94:	57                   	push   %edi
f010fa95:	53                   	push   %ebx
f010fa96:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f010fa9c:	83 ec 0c             	sub    $0xc,%esp
f010fa9f:	68 24 fd 11 f0       	push   $0xf011fd24
f010faa4:	e8 8d 79 ff ff       	call   f0107436 <cprintf>
f010faa9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010faac:	83 ec 0c             	sub    $0xc,%esp
f010faaf:	68 54 fd 11 f0       	push   $0xf011fd54
f010fab4:	e8 7d 79 ff ff       	call   f0107436 <cprintf>
f010fab9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010fabc:	83 ec 0c             	sub    $0xc,%esp
f010fabf:	68 24 fd 11 f0       	push   $0xf011fd24
f010fac4:	e8 6d 79 ff ff       	call   f0107436 <cprintf>
f010fac9:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f010facc:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f010fad2:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f010fad7:	b8 00 00 00 00       	mov    $0x0,%eax
f010fadc:	89 d7                	mov    %edx,%edi
f010fade:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f010fae0:	83 ec 0c             	sub    $0xc,%esp
f010fae3:	68 04 00 12 f0       	push   $0xf0120004
f010fae8:	e8 49 79 ff ff       	call   f0107436 <cprintf>
f010faed:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f010faf0:	e8 02 c9 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010faf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f010faf8:	e8 9d e5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010fafd:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010fb00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010fb07:	eb 1f                	jmp    f010fb28 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f010fb09:	83 ec 0c             	sub    $0xc,%esp
f010fb0c:	68 00 00 20 00       	push   $0x200000
f010fb11:	e8 0f ef ff ff       	call   f010ea25 <kmalloc>
f010fb16:	83 c4 10             	add    $0x10,%esp
f010fb19:	89 c2                	mov    %eax,%edx
f010fb1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fb1e:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010fb25:	ff 45 f4             	incl   -0xc(%ebp)
f010fb28:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f010fb2c:	7e db                	jle    f010fb09 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);
f010fb2e:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010fb35:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fb3a:	0f b6 d0             	movzbl %al,%edx
f010fb3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fb40:	01 d0                	add    %edx,%eax
f010fb42:	48                   	dec    %eax
f010fb43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010fb46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb49:	ba 00 00 00 00       	mov    $0x0,%edx
f010fb4e:	f7 75 e8             	divl   -0x18(%ebp)
f010fb51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb54:	29 d0                	sub    %edx,%eax
f010fb56:	89 c1                	mov    %eax,%ecx
f010fb58:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010fb5f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fb64:	0f b6 c0             	movzbl %al,%eax
f010fb67:	c1 e0 04             	shl    $0x4,%eax
f010fb6a:	89 c2                	mov    %eax,%edx
f010fb6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fb6f:	01 d0                	add    %edx,%eax
f010fb71:	48                   	dec    %eax
f010fb72:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010fb75:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb78:	ba 00 00 00 00       	mov    $0x0,%edx
f010fb7d:	f7 75 e0             	divl   -0x20(%ebp)
f010fb80:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fb83:	29 d0                	sub    %edx,%eax
f010fb85:	01 c8                	add    %ecx,%eax
f010fb87:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f010fb8c:	29 c2                	sub    %eax,%edx
f010fb8e:	89 d0                	mov    %edx,%eax
f010fb90:	83 ec 0c             	sub    $0xc,%esp
f010fb93:	50                   	push   %eax
f010fb94:	e8 8c ee ff ff       	call   f010ea25 <kmalloc>
f010fb99:	83 c4 10             	add    $0x10,%esp
f010fb9c:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010fba2:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010fba8:	89 c1                	mov    %eax,%ecx
f010fbaa:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010fbb1:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fbb6:	0f b6 d0             	movzbl %al,%edx
f010fbb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010fbbc:	01 d0                	add    %edx,%eax
f010fbbe:	48                   	dec    %eax
f010fbbf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010fbc2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fbc5:	ba 00 00 00 00       	mov    $0x0,%edx
f010fbca:	f7 75 d8             	divl   -0x28(%ebp)
f010fbcd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fbd0:	29 d0                	sub    %edx,%eax
f010fbd2:	89 c3                	mov    %eax,%ebx
f010fbd4:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010fbdb:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fbe0:	0f b6 c0             	movzbl %al,%eax
f010fbe3:	c1 e0 04             	shl    $0x4,%eax
f010fbe6:	89 c2                	mov    %eax,%edx
f010fbe8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fbeb:	01 d0                	add    %edx,%eax
f010fbed:	48                   	dec    %eax
f010fbee:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010fbf1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fbf4:	ba 00 00 00 00       	mov    $0x0,%edx
f010fbf9:	f7 75 d0             	divl   -0x30(%ebp)
f010fbfc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fbff:	29 d0                	sub    %edx,%eax
f010fc01:	01 d8                	add    %ebx,%eax
f010fc03:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010fc08:	39 c1                	cmp    %eax,%ecx
f010fc0a:	0f 85 4f 03 00 00    	jne    f010ff5f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010fc10:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010fc16:	89 c1                	mov    %eax,%ecx
f010fc18:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f010fc1f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fc24:	0f b6 d0             	movzbl %al,%edx
f010fc27:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fc2a:	01 d0                	add    %edx,%eax
f010fc2c:	48                   	dec    %eax
f010fc2d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010fc30:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fc33:	ba 00 00 00 00       	mov    $0x0,%edx
f010fc38:	f7 75 c8             	divl   -0x38(%ebp)
f010fc3b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fc3e:	29 d0                	sub    %edx,%eax
f010fc40:	89 c3                	mov    %eax,%ebx
f010fc42:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010fc49:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fc4e:	0f b6 c0             	movzbl %al,%eax
f010fc51:	c1 e0 04             	shl    $0x4,%eax
f010fc54:	89 c2                	mov    %eax,%edx
f010fc56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010fc59:	01 d0                	add    %edx,%eax
f010fc5b:	48                   	dec    %eax
f010fc5c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010fc5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010fc62:	ba 00 00 00 00       	mov    $0x0,%edx
f010fc67:	f7 75 c0             	divl   -0x40(%ebp)
f010fc6a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010fc6d:	29 d0                	sub    %edx,%eax
f010fc6f:	01 d8                	add    %ebx,%eax
f010fc71:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010fc76:	39 c1                	cmp    %eax,%ecx
f010fc78:	0f 85 e1 02 00 00    	jne    f010ff5f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010fc7e:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f010fc84:	89 c1                	mov    %eax,%ecx
f010fc86:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010fc8d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fc92:	0f b6 d0             	movzbl %al,%edx
f010fc95:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010fc98:	01 d0                	add    %edx,%eax
f010fc9a:	48                   	dec    %eax
f010fc9b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010fc9e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010fca1:	ba 00 00 00 00       	mov    $0x0,%edx
f010fca6:	f7 75 b8             	divl   -0x48(%ebp)
f010fca9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010fcac:	29 d0                	sub    %edx,%eax
f010fcae:	89 c3                	mov    %eax,%ebx
f010fcb0:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010fcb7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fcbc:	0f b6 c0             	movzbl %al,%eax
f010fcbf:	c1 e0 04             	shl    $0x4,%eax
f010fcc2:	89 c2                	mov    %eax,%edx
f010fcc4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010fcc7:	01 d0                	add    %edx,%eax
f010fcc9:	48                   	dec    %eax
f010fcca:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010fccd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcd0:	ba 00 00 00 00       	mov    $0x0,%edx
f010fcd5:	f7 75 b0             	divl   -0x50(%ebp)
f010fcd8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010fcdb:	29 d0                	sub    %edx,%eax
f010fcdd:	01 d8                	add    %ebx,%eax
f010fcdf:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010fce4:	39 c1                	cmp    %eax,%ecx
f010fce6:	0f 85 73 02 00 00    	jne    f010ff5f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010fcec:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010fcf2:	89 c1                	mov    %eax,%ecx
f010fcf4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010fcfb:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fd00:	0f b6 d0             	movzbl %al,%edx
f010fd03:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010fd06:	01 d0                	add    %edx,%eax
f010fd08:	48                   	dec    %eax
f010fd09:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010fd0c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fd0f:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd14:	f7 75 a8             	divl   -0x58(%ebp)
f010fd17:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010fd1a:	29 d0                	sub    %edx,%eax
f010fd1c:	89 c3                	mov    %eax,%ebx
f010fd1e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010fd25:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fd2a:	0f b6 c0             	movzbl %al,%eax
f010fd2d:	c1 e0 04             	shl    $0x4,%eax
f010fd30:	89 c2                	mov    %eax,%edx
f010fd32:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010fd35:	01 d0                	add    %edx,%eax
f010fd37:	48                   	dec    %eax
f010fd38:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010fd3b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010fd3e:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd43:	f7 75 a0             	divl   -0x60(%ebp)
f010fd46:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010fd49:	29 d0                	sub    %edx,%eax
f010fd4b:	01 d8                	add    %ebx,%eax
f010fd4d:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010fd52:	39 c1                	cmp    %eax,%ecx
f010fd54:	0f 85 05 02 00 00    	jne    f010ff5f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010fd5a:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010fd60:	89 c1                	mov    %eax,%ecx
f010fd62:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010fd69:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fd6e:	0f b6 d0             	movzbl %al,%edx
f010fd71:	8b 45 98             	mov    -0x68(%ebp),%eax
f010fd74:	01 d0                	add    %edx,%eax
f010fd76:	48                   	dec    %eax
f010fd77:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010fd7a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd7d:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd82:	f7 75 98             	divl   -0x68(%ebp)
f010fd85:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd88:	29 d0                	sub    %edx,%eax
f010fd8a:	89 c3                	mov    %eax,%ebx
f010fd8c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010fd93:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fd98:	0f b6 c0             	movzbl %al,%eax
f010fd9b:	c1 e0 04             	shl    $0x4,%eax
f010fd9e:	89 c2                	mov    %eax,%edx
f010fda0:	8b 45 90             	mov    -0x70(%ebp),%eax
f010fda3:	01 d0                	add    %edx,%eax
f010fda5:	48                   	dec    %eax
f010fda6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010fda9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010fdac:	ba 00 00 00 00       	mov    $0x0,%edx
f010fdb1:	f7 75 90             	divl   -0x70(%ebp)
f010fdb4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010fdb7:	29 d0                	sub    %edx,%eax
f010fdb9:	01 d8                	add    %ebx,%eax
f010fdbb:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010fdc0:	39 c1                	cmp    %eax,%ecx
f010fdc2:	0f 85 97 01 00 00    	jne    f010ff5f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010fdc8:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010fdce:	89 c1                	mov    %eax,%ecx
f010fdd0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010fdd7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fddc:	0f b6 d0             	movzbl %al,%edx
f010fddf:	8b 45 88             	mov    -0x78(%ebp),%eax
f010fde2:	01 d0                	add    %edx,%eax
f010fde4:	48                   	dec    %eax
f010fde5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010fde8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010fdeb:	ba 00 00 00 00       	mov    $0x0,%edx
f010fdf0:	f7 75 88             	divl   -0x78(%ebp)
f010fdf3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010fdf6:	29 d0                	sub    %edx,%eax
f010fdf8:	89 c3                	mov    %eax,%ebx
f010fdfa:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010fe01:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fe06:	0f b6 c0             	movzbl %al,%eax
f010fe09:	c1 e0 04             	shl    $0x4,%eax
f010fe0c:	89 c2                	mov    %eax,%edx
f010fe0e:	8b 45 80             	mov    -0x80(%ebp),%eax
f010fe11:	01 d0                	add    %edx,%eax
f010fe13:	48                   	dec    %eax
f010fe14:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010fe1a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010fe20:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe25:	f7 75 80             	divl   -0x80(%ebp)
f010fe28:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010fe2e:	29 d0                	sub    %edx,%eax
f010fe30:	01 d8                	add    %ebx,%eax
f010fe32:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010fe37:	39 c1                	cmp    %eax,%ecx
f010fe39:	0f 85 20 01 00 00    	jne    f010ff5f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010fe3f:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010fe45:	89 c1                	mov    %eax,%ecx
f010fe47:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010fe4e:	10 00 00 
f010fe51:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fe56:	0f b6 d0             	movzbl %al,%edx
f010fe59:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010fe5f:	01 d0                	add    %edx,%eax
f010fe61:	48                   	dec    %eax
f010fe62:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010fe68:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010fe6e:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe73:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010fe79:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010fe7f:	29 d0                	sub    %edx,%eax
f010fe81:	89 c3                	mov    %eax,%ebx
f010fe83:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010fe8a:	10 00 00 
f010fe8d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fe92:	0f b6 c0             	movzbl %al,%eax
f010fe95:	c1 e0 04             	shl    $0x4,%eax
f010fe98:	89 c2                	mov    %eax,%edx
f010fe9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010fea0:	01 d0                	add    %edx,%eax
f010fea2:	48                   	dec    %eax
f010fea3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010fea9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010feaf:	ba 00 00 00 00       	mov    $0x0,%edx
f010feb4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010feba:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010fec0:	29 d0                	sub    %edx,%eax
f010fec2:	01 d8                	add    %ebx,%eax
f010fec4:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010fec9:	39 c1                	cmp    %eax,%ecx
f010fecb:	0f 85 8e 00 00 00    	jne    f010ff5f <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f010fed1:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010fed7:	89 c1                	mov    %eax,%ecx
f010fed9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010fee0:	10 00 00 
f010fee3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010fee8:	0f b6 d0             	movzbl %al,%edx
f010feeb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010fef1:	01 d0                	add    %edx,%eax
f010fef3:	48                   	dec    %eax
f010fef4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010fefa:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010ff00:	ba 00 00 00 00       	mov    $0x0,%edx
f010ff05:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010ff0b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010ff11:	29 d0                	sub    %edx,%eax
f010ff13:	89 c3                	mov    %eax,%ebx
f010ff15:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010ff1c:	10 00 00 
f010ff1f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ff24:	0f b6 c0             	movzbl %al,%eax
f010ff27:	c1 e0 04             	shl    $0x4,%eax
f010ff2a:	89 c2                	mov    %eax,%edx
f010ff2c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010ff32:	01 d0                	add    %edx,%eax
f010ff34:	48                   	dec    %eax
f010ff35:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010ff3b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010ff41:	ba 00 00 00 00       	mov    $0x0,%edx
f010ff46:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010ff4c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010ff52:	29 d0                	sub    %edx,%eax
f010ff54:	01 d8                	add    %ebx,%eax
f010ff56:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010ff5b:	39 c1                	cmp    %eax,%ecx
f010ff5d:	74 17                	je     f010ff76 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f010ff5f:	83 ec 04             	sub    $0x4,%esp
f010ff62:	68 54 00 12 f0       	push   $0xf0120054
f010ff67:	68 fd 00 00 00       	push   $0xfd
f010ff6c:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ff71:	e8 1d 02 ff ff       	call   f0100193 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ff76:	e8 1f e1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f010ff7b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ff7e:	74 17                	je     f010ff97 <test_kmalloc_nextfit+0x506>
f010ff80:	83 ec 04             	sub    $0x4,%esp
f010ff83:	68 f4 fd 11 f0       	push   $0xf011fdf4
f010ff88:	68 ff 00 00 00       	push   $0xff
f010ff8d:	68 e2 fd 11 f0       	push   $0xf011fde2
f010ff92:	e8 fc 01 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f010ff97:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ff9a:	e8 58 c4 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f010ff9f:	29 c3                	sub    %eax,%ebx
f010ffa1:	89 d9                	mov    %ebx,%ecx
f010ffa3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010ffaa:	10 00 00 
f010ffad:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ffb2:	0f b6 d0             	movzbl %al,%edx
f010ffb5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010ffbb:	01 d0                	add    %edx,%eax
f010ffbd:	48                   	dec    %eax
f010ffbe:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010ffc4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010ffca:	ba 00 00 00 00       	mov    $0x0,%edx
f010ffcf:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010ffd5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010ffdb:	29 d0                	sub    %edx,%eax
f010ffdd:	89 c3                	mov    %eax,%ebx
f010ffdf:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010ffe6:	10 00 00 
f010ffe9:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f010ffee:	0f b6 c0             	movzbl %al,%eax
f010fff1:	c1 e0 04             	shl    $0x4,%eax
f010fff4:	89 c2                	mov    %eax,%edx
f010fff6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010fffc:	01 d0                	add    %edx,%eax
f010fffe:	48                   	dec    %eax
f010ffff:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0110005:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011000b:	ba 00 00 00 00       	mov    $0x0,%edx
f0110010:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0110016:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011001c:	29 d0                	sub    %edx,%eax
f011001e:	01 d8                	add    %ebx,%eax
f0110020:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0110025:	29 c2                	sub    %eax,%edx
f0110027:	89 d0                	mov    %edx,%eax
f0110029:	c1 e8 0c             	shr    $0xc,%eax
f011002c:	39 c1                	cmp    %eax,%ecx
f011002e:	74 17                	je     f0110047 <test_kmalloc_nextfit+0x5b6>
f0110030:	83 ec 04             	sub    $0x4,%esp
f0110033:	68 97 00 12 f0       	push   $0xf0120097
f0110038:	68 00 01 00 00       	push   $0x100
f011003d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110042:	e8 4c 01 ff ff       	call   f0100193 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0110047:	e8 4e e0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011004c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011004f:	e8 a3 c3 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110054:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0110057:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f011005d:	83 ec 0c             	sub    $0xc,%esp
f0110060:	50                   	push   %eax
f0110061:	e8 d9 e9 ff ff       	call   f010ea3f <kfree>
f0110066:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0110069:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011006f:	83 ec 0c             	sub    $0xc,%esp
f0110072:	50                   	push   %eax
f0110073:	e8 c7 e9 ff ff       	call   f010ea3f <kfree>
f0110078:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011007b:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f0110081:	83 ec 0c             	sub    $0xc,%esp
f0110084:	50                   	push   %eax
f0110085:	e8 b5 e9 ff ff       	call   f010ea3f <kfree>
f011008a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f011008d:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f0110093:	83 ec 0c             	sub    $0xc,%esp
f0110096:	50                   	push   %eax
f0110097:	e8 a3 e9 ff ff       	call   f010ea3f <kfree>
f011009c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011009f:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f01100a5:	83 ec 0c             	sub    $0xc,%esp
f01100a8:	50                   	push   %eax
f01100a9:	e8 91 e9 ff ff       	call   f010ea3f <kfree>
f01100ae:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01100b1:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f01100b7:	83 ec 0c             	sub    $0xc,%esp
f01100ba:	50                   	push   %eax
f01100bb:	e8 7f e9 ff ff       	call   f010ea3f <kfree>
f01100c0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01100c3:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f01100c9:	83 ec 0c             	sub    $0xc,%esp
f01100cc:	50                   	push   %eax
f01100cd:	e8 6d e9 ff ff       	call   f010ea3f <kfree>
f01100d2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f01100d5:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f01100db:	83 ec 0c             	sub    $0xc,%esp
f01100de:	50                   	push   %eax
f01100df:	e8 5b e9 ff ff       	call   f010ea3f <kfree>
f01100e4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01100e7:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f01100ed:	83 ec 0c             	sub    $0xc,%esp
f01100f0:	50                   	push   %eax
f01100f1:	e8 49 e9 ff ff       	call   f010ea3f <kfree>
f01100f6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01100f9:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01100ff:	83 ec 0c             	sub    $0xc,%esp
f0110102:	50                   	push   %eax
f0110103:	e8 37 e9 ff ff       	call   f010ea3f <kfree>
f0110108:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011010b:	e8 8a df ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110110:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110113:	74 17                	je     f011012c <test_kmalloc_nextfit+0x69b>
f0110115:	83 ec 04             	sub    $0x4,%esp
f0110118:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011011d:	68 11 01 00 00       	push   $0x111
f0110122:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110127:	e8 67 00 ff ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011012c:	e8 c6 c2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110131:	89 c2                	mov    %eax,%edx
f0110133:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110136:	89 d1                	mov    %edx,%ecx
f0110138:	29 c1                	sub    %eax,%ecx
f011013a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0110141:	10 00 00 
f0110144:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110149:	0f b6 d0             	movzbl %al,%edx
f011014c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110152:	01 d0                	add    %edx,%eax
f0110154:	48                   	dec    %eax
f0110155:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011015b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0110161:	ba 00 00 00 00       	mov    $0x0,%edx
f0110166:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f011016c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0110172:	29 d0                	sub    %edx,%eax
f0110174:	89 c3                	mov    %eax,%ebx
f0110176:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011017d:	10 00 00 
f0110180:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110185:	0f b6 c0             	movzbl %al,%eax
f0110188:	c1 e0 04             	shl    $0x4,%eax
f011018b:	89 c2                	mov    %eax,%edx
f011018d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0110193:	01 d0                	add    %edx,%eax
f0110195:	48                   	dec    %eax
f0110196:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011019c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01101a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01101a7:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01101ad:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01101b3:	29 d0                	sub    %edx,%eax
f01101b5:	01 d8                	add    %ebx,%eax
f01101b7:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f01101bc:	29 c2                	sub    %eax,%edx
f01101be:	89 d0                	mov    %edx,%eax
f01101c0:	c1 e8 0c             	shr    $0xc,%eax
f01101c3:	39 c1                	cmp    %eax,%ecx
f01101c5:	74 17                	je     f01101de <test_kmalloc_nextfit+0x74d>
f01101c7:	83 ec 04             	sub    $0x4,%esp
f01101ca:	68 a8 00 12 f0       	push   $0xf01200a8
f01101cf:	68 12 01 00 00       	push   $0x112
f01101d4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01101d9:	e8 b5 ff fe ff       	call   f0100193 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f01101de:	e8 b7 de ff ff       	call   f010e09a <pf_calculate_free_frames>
f01101e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01101e6:	e8 0c c2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01101eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f01101ee:	83 ec 0c             	sub    $0xc,%esp
f01101f1:	68 00 fc 0f 00       	push   $0xffc00
f01101f6:	e8 2a e8 ff ff       	call   f010ea25 <kmalloc>
f01101fb:	83 c4 10             	add    $0x10,%esp
f01101fe:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0110204:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011020b:	10 00 00 
f011020e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110213:	0f b6 d0             	movzbl %al,%edx
f0110216:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011021c:	01 d0                	add    %edx,%eax
f011021e:	48                   	dec    %eax
f011021f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0110225:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011022b:	ba 00 00 00 00       	mov    $0x0,%edx
f0110230:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0110236:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011023c:	29 d0                	sub    %edx,%eax
f011023e:	89 c1                	mov    %eax,%ecx
f0110240:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0110247:	10 00 00 
f011024a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011024f:	0f b6 c0             	movzbl %al,%eax
f0110252:	c1 e0 04             	shl    $0x4,%eax
f0110255:	89 c2                	mov    %eax,%edx
f0110257:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011025d:	01 d0                	add    %edx,%eax
f011025f:	48                   	dec    %eax
f0110260:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0110266:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011026c:	ba 00 00 00 00       	mov    $0x0,%edx
f0110271:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0110277:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011027d:	29 d0                	sub    %edx,%eax
f011027f:	01 c8                	add    %ecx,%eax
f0110281:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0110287:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011028d:	39 c2                	cmp    %eax,%edx
f011028f:	74 17                	je     f01102a8 <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f0110291:	83 ec 04             	sub    $0x4,%esp
f0110294:	68 e8 00 12 f0       	push   $0xf01200e8
f0110299:	68 19 01 00 00       	push   $0x119
f011029e:	68 e2 fd 11 f0       	push   $0xf011fde2
f01102a3:	e8 eb fe fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01102a8:	e8 ed dd ff ff       	call   f010e09a <pf_calculate_free_frames>
f01102ad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01102b0:	74 17                	je     f01102c9 <test_kmalloc_nextfit+0x838>
f01102b2:	83 ec 04             	sub    $0x4,%esp
f01102b5:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01102ba:	68 1a 01 00 00       	push   $0x11a
f01102bf:	68 e2 fd 11 f0       	push   $0xf011fde2
f01102c4:	e8 ca fe fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01102c9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01102cc:	e8 26 c1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01102d1:	29 c3                	sub    %eax,%ebx
f01102d3:	89 d8                	mov    %ebx,%eax
f01102d5:	3d 00 01 00 00       	cmp    $0x100,%eax
f01102da:	74 17                	je     f01102f3 <test_kmalloc_nextfit+0x862>
f01102dc:	83 ec 04             	sub    $0x4,%esp
f01102df:	68 97 00 12 f0       	push   $0xf0120097
f01102e4:	68 1b 01 00 00       	push   $0x11b
f01102e9:	68 e2 fd 11 f0       	push   $0xf011fde2
f01102ee:	e8 a0 fe fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01102f3:	e8 a2 dd ff ff       	call   f010e09a <pf_calculate_free_frames>
f01102f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01102fb:	e8 f7 c0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110300:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0110303:	83 ec 0c             	sub    $0xc,%esp
f0110306:	68 00 04 00 00       	push   $0x400
f011030b:	e8 15 e7 ff ff       	call   f010ea25 <kmalloc>
f0110310:	83 c4 10             	add    $0x10,%esp
f0110313:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0110319:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0110320:	10 00 00 
f0110323:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110328:	0f b6 d0             	movzbl %al,%edx
f011032b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0110331:	01 d0                	add    %edx,%eax
f0110333:	48                   	dec    %eax
f0110334:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011033a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0110340:	ba 00 00 00 00       	mov    $0x0,%edx
f0110345:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011034b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0110351:	29 d0                	sub    %edx,%eax
f0110353:	89 c1                	mov    %eax,%ecx
f0110355:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011035c:	10 00 00 
f011035f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110364:	0f b6 c0             	movzbl %al,%eax
f0110367:	c1 e0 04             	shl    $0x4,%eax
f011036a:	89 c2                	mov    %eax,%edx
f011036c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0110372:	01 d0                	add    %edx,%eax
f0110374:	48                   	dec    %eax
f0110375:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011037b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0110381:	ba 00 00 00 00       	mov    $0x0,%edx
f0110386:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011038c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0110392:	29 d0                	sub    %edx,%eax
f0110394:	01 c8                	add    %ecx,%eax
f0110396:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f011039c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01103a2:	39 c2                	cmp    %eax,%edx
f01103a4:	74 17                	je     f01103bd <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f01103a6:	83 ec 04             	sub    $0x4,%esp
f01103a9:	68 e8 00 12 f0       	push   $0xf01200e8
f01103ae:	68 21 01 00 00       	push   $0x121
f01103b3:	68 e2 fd 11 f0       	push   $0xf011fde2
f01103b8:	e8 d6 fd fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01103bd:	e8 d8 dc ff ff       	call   f010e09a <pf_calculate_free_frames>
f01103c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01103c5:	74 17                	je     f01103de <test_kmalloc_nextfit+0x94d>
f01103c7:	83 ec 04             	sub    $0x4,%esp
f01103ca:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01103cf:	68 22 01 00 00       	push   $0x122
f01103d4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01103d9:	e8 b5 fd fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01103de:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01103e1:	e8 11 c0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01103e6:	29 c3                	sub    %eax,%ebx
f01103e8:	89 d8                	mov    %ebx,%eax
f01103ea:	83 f8 01             	cmp    $0x1,%eax
f01103ed:	74 17                	je     f0110406 <test_kmalloc_nextfit+0x975>
f01103ef:	83 ec 04             	sub    $0x4,%esp
f01103f2:	68 97 00 12 f0       	push   $0xf0120097
f01103f7:	68 23 01 00 00       	push   $0x123
f01103fc:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110401:	e8 8d fd fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0110406:	e8 8f dc ff ff       	call   f010e09a <pf_calculate_free_frames>
f011040b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011040e:	e8 e4 bf ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110413:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0110416:	83 ec 0c             	sub    $0xc,%esp
f0110419:	68 00 00 50 00       	push   $0x500000
f011041e:	e8 02 e6 ff ff       	call   f010ea25 <kmalloc>
f0110423:	83 c4 10             	add    $0x10,%esp
f0110426:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011042c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0110433:	10 00 00 
f0110436:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011043b:	0f b6 d0             	movzbl %al,%edx
f011043e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0110444:	01 d0                	add    %edx,%eax
f0110446:	48                   	dec    %eax
f0110447:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011044d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110453:	ba 00 00 00 00       	mov    $0x0,%edx
f0110458:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011045e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110464:	29 d0                	sub    %edx,%eax
f0110466:	89 c1                	mov    %eax,%ecx
f0110468:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011046f:	10 00 00 
f0110472:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110477:	0f b6 c0             	movzbl %al,%eax
f011047a:	c1 e0 04             	shl    $0x4,%eax
f011047d:	89 c2                	mov    %eax,%edx
f011047f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0110485:	01 d0                	add    %edx,%eax
f0110487:	48                   	dec    %eax
f0110488:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011048e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0110494:	ba 00 00 00 00       	mov    $0x0,%edx
f0110499:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011049f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01104a5:	29 d0                	sub    %edx,%eax
f01104a7:	01 c8                	add    %ecx,%eax
f01104a9:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01104af:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01104b5:	39 c2                	cmp    %eax,%edx
f01104b7:	74 17                	je     f01104d0 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f01104b9:	83 ec 04             	sub    $0x4,%esp
f01104bc:	68 e8 00 12 f0       	push   $0xf01200e8
f01104c1:	68 29 01 00 00       	push   $0x129
f01104c6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01104cb:	e8 c3 fc fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01104d0:	e8 c5 db ff ff       	call   f010e09a <pf_calculate_free_frames>
f01104d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01104d8:	74 17                	je     f01104f1 <test_kmalloc_nextfit+0xa60>
f01104da:	83 ec 04             	sub    $0x4,%esp
f01104dd:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01104e2:	68 2a 01 00 00       	push   $0x12a
f01104e7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01104ec:	e8 a2 fc fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01104f1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01104f4:	e8 fe be ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01104f9:	29 c3                	sub    %eax,%ebx
f01104fb:	89 d8                	mov    %ebx,%eax
f01104fd:	3d 00 05 00 00       	cmp    $0x500,%eax
f0110502:	74 17                	je     f011051b <test_kmalloc_nextfit+0xa8a>
f0110504:	83 ec 04             	sub    $0x4,%esp
f0110507:	68 97 00 12 f0       	push   $0xf0120097
f011050c:	68 2b 01 00 00       	push   $0x12b
f0110511:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110516:	e8 78 fc fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011051b:	e8 7a db ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110520:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0110523:	e8 cf be ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110528:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f011052b:	83 ec 0c             	sub    $0xc,%esp
f011052e:	68 00 00 10 00       	push   $0x100000
f0110533:	e8 ed e4 ff ff       	call   f010ea25 <kmalloc>
f0110538:	83 c4 10             	add    $0x10,%esp
f011053b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0110541:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0110548:	10 00 00 
f011054b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110550:	0f b6 d0             	movzbl %al,%edx
f0110553:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0110559:	01 d0                	add    %edx,%eax
f011055b:	48                   	dec    %eax
f011055c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0110562:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0110568:	ba 00 00 00 00       	mov    $0x0,%edx
f011056d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0110573:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0110579:	29 d0                	sub    %edx,%eax
f011057b:	89 c1                	mov    %eax,%ecx
f011057d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0110584:	10 00 00 
f0110587:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011058c:	0f b6 c0             	movzbl %al,%eax
f011058f:	c1 e0 04             	shl    $0x4,%eax
f0110592:	89 c2                	mov    %eax,%edx
f0110594:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011059a:	01 d0                	add    %edx,%eax
f011059c:	48                   	dec    %eax
f011059d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01105a3:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01105a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01105ae:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01105b4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01105ba:	29 d0                	sub    %edx,%eax
f01105bc:	01 c8                	add    %ecx,%eax
f01105be:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f01105c4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01105ca:	39 c2                	cmp    %eax,%edx
f01105cc:	74 17                	je     f01105e5 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f01105ce:	83 ec 04             	sub    $0x4,%esp
f01105d1:	68 e8 00 12 f0       	push   $0xf01200e8
f01105d6:	68 31 01 00 00       	push   $0x131
f01105db:	68 e2 fd 11 f0       	push   $0xf011fde2
f01105e0:	e8 ae fb fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01105e5:	e8 b0 da ff ff       	call   f010e09a <pf_calculate_free_frames>
f01105ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01105ed:	74 17                	je     f0110606 <test_kmalloc_nextfit+0xb75>
f01105ef:	83 ec 04             	sub    $0x4,%esp
f01105f2:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01105f7:	68 32 01 00 00       	push   $0x132
f01105fc:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110601:	e8 8d fb fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0110606:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0110609:	e8 e9 bd ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011060e:	29 c3                	sub    %eax,%ebx
f0110610:	89 d8                	mov    %ebx,%eax
f0110612:	3d 00 01 00 00       	cmp    $0x100,%eax
f0110617:	74 17                	je     f0110630 <test_kmalloc_nextfit+0xb9f>
f0110619:	83 ec 04             	sub    $0x4,%esp
f011061c:	68 97 00 12 f0       	push   $0xf0120097
f0110621:	68 33 01 00 00       	push   $0x133
f0110626:	68 e2 fd 11 f0       	push   $0xf011fde2
f011062b:	e8 63 fb fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0110630:	e8 65 da ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110635:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0110638:	e8 ba bd ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011063d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0110640:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0110646:	83 ec 0c             	sub    $0xc,%esp
f0110649:	50                   	push   %eax
f011064a:	e8 f0 e3 ff ff       	call   f010ea3f <kfree>
f011064f:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110652:	e8 43 da ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110657:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011065a:	74 17                	je     f0110673 <test_kmalloc_nextfit+0xbe2>
f011065c:	83 ec 04             	sub    $0x4,%esp
f011065f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0110664:	68 38 01 00 00       	push   $0x138
f0110669:	68 e2 fd 11 f0       	push   $0xf011fde2
f011066e:	e8 20 fb fe ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0110673:	e8 7f bd ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110678:	89 c2                	mov    %eax,%edx
f011067a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011067d:	29 c2                	sub    %eax,%edx
f011067f:	89 d0                	mov    %edx,%eax
f0110681:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110686:	74 17                	je     f011069f <test_kmalloc_nextfit+0xc0e>
f0110688:	83 ec 04             	sub    $0x4,%esp
f011068b:	68 a8 00 12 f0       	push   $0xf01200a8
f0110690:	68 39 01 00 00       	push   $0x139
f0110695:	68 e2 fd 11 f0       	push   $0xf011fde2
f011069a:	e8 f4 fa fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011069f:	e8 f6 d9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01106a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01106a7:	e8 4b bd ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01106ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f01106af:	83 ec 0c             	sub    $0xc,%esp
f01106b2:	68 00 04 00 00       	push   $0x400
f01106b7:	e8 69 e3 ff ff       	call   f010ea25 <kmalloc>
f01106bc:	83 c4 10             	add    $0x10,%esp
f01106bf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f01106c5:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01106cc:	10 00 00 
f01106cf:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01106d4:	0f b6 d0             	movzbl %al,%edx
f01106d7:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01106dd:	01 d0                	add    %edx,%eax
f01106df:	48                   	dec    %eax
f01106e0:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01106e6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01106ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01106f1:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01106f7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01106fd:	29 d0                	sub    %edx,%eax
f01106ff:	89 c1                	mov    %eax,%ecx
f0110701:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0110708:	10 00 00 
f011070b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110710:	0f b6 c0             	movzbl %al,%eax
f0110713:	c1 e0 04             	shl    $0x4,%eax
f0110716:	89 c2                	mov    %eax,%edx
f0110718:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011071e:	01 d0                	add    %edx,%eax
f0110720:	48                   	dec    %eax
f0110721:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0110727:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011072d:	ba 00 00 00 00       	mov    $0x0,%edx
f0110732:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0110738:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011073e:	29 d0                	sub    %edx,%eax
f0110740:	01 c8                	add    %ecx,%eax
f0110742:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0110748:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011074e:	39 c2                	cmp    %eax,%edx
f0110750:	74 17                	je     f0110769 <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f0110752:	83 ec 04             	sub    $0x4,%esp
f0110755:	68 e8 00 12 f0       	push   $0xf01200e8
f011075a:	68 3f 01 00 00       	push   $0x13f
f011075f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110764:	e8 2a fa fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110769:	e8 2c d9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011076e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110771:	74 17                	je     f011078a <test_kmalloc_nextfit+0xcf9>
f0110773:	83 ec 04             	sub    $0x4,%esp
f0110776:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011077b:	68 40 01 00 00       	push   $0x140
f0110780:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110785:	e8 09 fa fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011078a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011078d:	e8 65 bc ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110792:	29 c3                	sub    %eax,%ebx
f0110794:	89 d8                	mov    %ebx,%eax
f0110796:	83 f8 01             	cmp    $0x1,%eax
f0110799:	74 17                	je     f01107b2 <test_kmalloc_nextfit+0xd21>
f011079b:	83 ec 04             	sub    $0x4,%esp
f011079e:	68 97 00 12 f0       	push   $0xf0120097
f01107a3:	68 41 01 00 00       	push   $0x141
f01107a8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01107ad:	e8 e1 f9 fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01107b2:	e8 e3 d8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01107b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01107ba:	e8 38 bc ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01107bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f01107c2:	83 ec 0c             	sub    $0xc,%esp
f01107c5:	68 00 e0 1f 00       	push   $0x1fe000
f01107ca:	e8 56 e2 ff ff       	call   f010ea25 <kmalloc>
f01107cf:	83 c4 10             	add    $0x10,%esp
f01107d2:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f01107d8:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01107df:	10 00 00 
f01107e2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01107e7:	0f b6 d0             	movzbl %al,%edx
f01107ea:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01107f0:	01 d0                	add    %edx,%eax
f01107f2:	48                   	dec    %eax
f01107f3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01107f9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01107ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0110804:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011080a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110810:	29 d0                	sub    %edx,%eax
f0110812:	89 c1                	mov    %eax,%ecx
f0110814:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011081b:	10 00 00 
f011081e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110823:	0f b6 c0             	movzbl %al,%eax
f0110826:	c1 e0 04             	shl    $0x4,%eax
f0110829:	89 c2                	mov    %eax,%edx
f011082b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110831:	01 d0                	add    %edx,%eax
f0110833:	48                   	dec    %eax
f0110834:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011083a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110840:	ba 00 00 00 00       	mov    $0x0,%edx
f0110845:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011084b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110851:	29 d0                	sub    %edx,%eax
f0110853:	01 c8                	add    %ecx,%eax
f0110855:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011085b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110861:	39 c2                	cmp    %eax,%edx
f0110863:	74 17                	je     f011087c <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f0110865:	83 ec 04             	sub    $0x4,%esp
f0110868:	68 e8 00 12 f0       	push   $0xf01200e8
f011086d:	68 47 01 00 00       	push   $0x147
f0110872:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110877:	e8 17 f9 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011087c:	e8 19 d8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110881:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110884:	74 17                	je     f011089d <test_kmalloc_nextfit+0xe0c>
f0110886:	83 ec 04             	sub    $0x4,%esp
f0110889:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011088e:	68 48 01 00 00       	push   $0x148
f0110893:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110898:	e8 f6 f8 fe ff       	call   f0100193 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011089d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01108a0:	e8 52 bb ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01108a5:	29 c3                	sub    %eax,%ebx
f01108a7:	89 d8                	mov    %ebx,%eax
f01108a9:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f01108ae:	74 17                	je     f01108c7 <test_kmalloc_nextfit+0xe36>
f01108b0:	83 ec 04             	sub    $0x4,%esp
f01108b3:	68 97 00 12 f0       	push   $0xf0120097
f01108b8:	68 4a 01 00 00       	push   $0x14a
f01108bd:	68 e2 fd 11 f0       	push   $0xf011fde2
f01108c2:	e8 cc f8 fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01108c7:	e8 ce d7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01108cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01108cf:	e8 23 bb ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01108d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f01108d7:	83 ec 0c             	sub    $0xc,%esp
f01108da:	68 00 00 08 00       	push   $0x80000
f01108df:	e8 41 e1 ff ff       	call   f010ea25 <kmalloc>
f01108e4:	83 c4 10             	add    $0x10,%esp
f01108e7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f01108ed:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01108f4:	10 00 00 
f01108f7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01108fc:	0f b6 d0             	movzbl %al,%edx
f01108ff:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0110905:	01 d0                	add    %edx,%eax
f0110907:	48                   	dec    %eax
f0110908:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011090e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0110914:	ba 00 00 00 00       	mov    $0x0,%edx
f0110919:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011091f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0110925:	29 d0                	sub    %edx,%eax
f0110927:	89 c1                	mov    %eax,%ecx
f0110929:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0110930:	10 00 00 
f0110933:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110938:	0f b6 c0             	movzbl %al,%eax
f011093b:	c1 e0 04             	shl    $0x4,%eax
f011093e:	89 c2                	mov    %eax,%edx
f0110940:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0110946:	01 d0                	add    %edx,%eax
f0110948:	48                   	dec    %eax
f0110949:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011094f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0110955:	ba 00 00 00 00       	mov    $0x0,%edx
f011095a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0110960:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0110966:	29 d0                	sub    %edx,%eax
f0110968:	01 c8                	add    %ecx,%eax
f011096a:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0110970:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110976:	39 c2                	cmp    %eax,%edx
f0110978:	74 17                	je     f0110991 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f011097a:	83 ec 04             	sub    $0x4,%esp
f011097d:	68 e8 00 12 f0       	push   $0xf01200e8
f0110982:	68 50 01 00 00       	push   $0x150
f0110987:	68 e2 fd 11 f0       	push   $0xf011fde2
f011098c:	e8 02 f8 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110991:	e8 04 d7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110996:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110999:	74 17                	je     f01109b2 <test_kmalloc_nextfit+0xf21>
f011099b:	83 ec 04             	sub    $0x4,%esp
f011099e:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01109a3:	68 51 01 00 00       	push   $0x151
f01109a8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01109ad:	e8 e1 f7 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01109b2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01109b5:	e8 3d ba ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01109ba:	29 c3                	sub    %eax,%ebx
f01109bc:	89 d8                	mov    %ebx,%eax
f01109be:	3d 80 00 00 00       	cmp    $0x80,%eax
f01109c3:	74 17                	je     f01109dc <test_kmalloc_nextfit+0xf4b>
f01109c5:	83 ec 04             	sub    $0x4,%esp
f01109c8:	68 97 00 12 f0       	push   $0xf0120097
f01109cd:	68 52 01 00 00       	push   $0x152
f01109d2:	68 e2 fd 11 f0       	push   $0xf011fde2
f01109d7:	e8 b7 f7 fe ff       	call   f0100193 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f01109dc:	83 ec 0c             	sub    $0xc,%esp
f01109df:	68 08 01 12 f0       	push   $0xf0120108
f01109e4:	e8 4d 6a ff ff       	call   f0107436 <cprintf>
f01109e9:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f01109ec:	e8 a9 d6 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01109f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01109f4:	e8 fe b9 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01109f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f01109fc:	83 ec 0c             	sub    $0xc,%esp
f01109ff:	68 00 00 38 00       	push   $0x380000
f0110a04:	e8 1c e0 ff ff       	call   f010ea25 <kmalloc>
f0110a09:	83 c4 10             	add    $0x10,%esp
f0110a0c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0110a12:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0110a19:	10 00 00 
f0110a1c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110a21:	0f b6 d0             	movzbl %al,%edx
f0110a24:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0110a2a:	01 d0                	add    %edx,%eax
f0110a2c:	48                   	dec    %eax
f0110a2d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0110a33:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0110a39:	ba 00 00 00 00       	mov    $0x0,%edx
f0110a3e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0110a44:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0110a4a:	29 d0                	sub    %edx,%eax
f0110a4c:	89 c1                	mov    %eax,%ecx
f0110a4e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0110a55:	10 00 00 
f0110a58:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110a5d:	0f b6 c0             	movzbl %al,%eax
f0110a60:	c1 e0 04             	shl    $0x4,%eax
f0110a63:	89 c2                	mov    %eax,%edx
f0110a65:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0110a6b:	01 d0                	add    %edx,%eax
f0110a6d:	48                   	dec    %eax
f0110a6e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0110a74:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0110a7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0110a7f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0110a85:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0110a8b:	29 d0                	sub    %edx,%eax
f0110a8d:	01 c8                	add    %ecx,%eax
f0110a8f:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0110a95:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110a9b:	39 c2                	cmp    %eax,%edx
f0110a9d:	74 17                	je     f0110ab6 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f0110a9f:	83 ec 04             	sub    $0x4,%esp
f0110aa2:	68 e8 00 12 f0       	push   $0xf01200e8
f0110aa7:	68 5c 01 00 00       	push   $0x15c
f0110aac:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110ab1:	e8 dd f6 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ab6:	e8 df d5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110abb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110abe:	74 17                	je     f0110ad7 <test_kmalloc_nextfit+0x1046>
f0110ac0:	83 ec 04             	sub    $0x4,%esp
f0110ac3:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0110ac8:	68 5d 01 00 00       	push   $0x15d
f0110acd:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110ad2:	e8 bc f6 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0110ad7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0110ada:	e8 18 b9 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110adf:	29 c3                	sub    %eax,%ebx
f0110ae1:	89 d8                	mov    %ebx,%eax
f0110ae3:	3d 80 03 00 00       	cmp    $0x380,%eax
f0110ae8:	74 17                	je     f0110b01 <test_kmalloc_nextfit+0x1070>
f0110aea:	83 ec 04             	sub    $0x4,%esp
f0110aed:	68 97 00 12 f0       	push   $0xf0120097
f0110af2:	68 5e 01 00 00       	push   $0x15e
f0110af7:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110afc:	e8 92 f6 fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0110b01:	e8 94 d5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110b06:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0110b09:	e8 e9 b8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110b0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0110b11:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f0110b17:	83 ec 0c             	sub    $0xc,%esp
f0110b1a:	50                   	push   %eax
f0110b1b:	e8 1f df ff ff       	call   f010ea3f <kfree>
f0110b20:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110b23:	e8 72 d5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110b28:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110b2b:	74 17                	je     f0110b44 <test_kmalloc_nextfit+0x10b3>
f0110b2d:	83 ec 04             	sub    $0x4,%esp
f0110b30:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0110b35:	68 63 01 00 00       	push   $0x163
f0110b3a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110b3f:	e8 4f f6 fe ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0110b44:	e8 ae b8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110b49:	89 c2                	mov    %eax,%edx
f0110b4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110b4e:	29 c2                	sub    %eax,%edx
f0110b50:	89 d0                	mov    %edx,%eax
f0110b52:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110b57:	74 17                	je     f0110b70 <test_kmalloc_nextfit+0x10df>
f0110b59:	83 ec 04             	sub    $0x4,%esp
f0110b5c:	68 a8 00 12 f0       	push   $0xf01200a8
f0110b61:	68 64 01 00 00       	push   $0x164
f0110b66:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110b6b:	e8 23 f6 fe ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0110b70:	e8 25 d5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110b75:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0110b78:	e8 7a b8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110b7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0110b80:	83 ec 0c             	sub    $0xc,%esp
f0110b83:	68 00 fc 3f 00       	push   $0x3ffc00
f0110b88:	e8 98 de ff ff       	call   f010ea25 <kmalloc>
f0110b8d:	83 c4 10             	add    $0x10,%esp
f0110b90:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f0110b96:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0110b9d:	10 00 00 
f0110ba0:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110ba5:	0f b6 d0             	movzbl %al,%edx
f0110ba8:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0110bae:	01 d0                	add    %edx,%eax
f0110bb0:	48                   	dec    %eax
f0110bb1:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0110bb7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0110bbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0110bc2:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0110bc8:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0110bce:	29 d0                	sub    %edx,%eax
f0110bd0:	89 c1                	mov    %eax,%ecx
f0110bd2:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0110bd9:	10 00 00 
f0110bdc:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110be1:	0f b6 c0             	movzbl %al,%eax
f0110be4:	c1 e0 04             	shl    $0x4,%eax
f0110be7:	89 c2                	mov    %eax,%edx
f0110be9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0110bef:	01 d0                	add    %edx,%eax
f0110bf1:	48                   	dec    %eax
f0110bf2:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0110bf8:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0110bfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0110c03:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0110c09:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0110c0f:	29 d0                	sub    %edx,%eax
f0110c11:	01 c8                	add    %ecx,%eax
f0110c13:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0110c19:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110c1f:	39 c2                	cmp    %eax,%edx
f0110c21:	74 17                	je     f0110c3a <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f0110c23:	83 ec 04             	sub    $0x4,%esp
f0110c26:	68 e8 00 12 f0       	push   $0xf01200e8
f0110c2b:	68 6a 01 00 00       	push   $0x16a
f0110c30:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110c35:	e8 59 f5 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110c3a:	e8 5b d4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110c3f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110c42:	74 17                	je     f0110c5b <test_kmalloc_nextfit+0x11ca>
f0110c44:	83 ec 04             	sub    $0x4,%esp
f0110c47:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0110c4c:	68 6b 01 00 00       	push   $0x16b
f0110c51:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110c56:	e8 38 f5 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0110c5b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0110c5e:	e8 94 b7 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110c63:	29 c3                	sub    %eax,%ebx
f0110c65:	89 d8                	mov    %ebx,%eax
f0110c67:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110c6c:	74 17                	je     f0110c85 <test_kmalloc_nextfit+0x11f4>
f0110c6e:	83 ec 04             	sub    $0x4,%esp
f0110c71:	68 97 00 12 f0       	push   $0xf0120097
f0110c76:	68 6c 01 00 00       	push   $0x16c
f0110c7b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110c80:	e8 0e f5 fe ff       	call   f0100193 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f0110c85:	83 ec 0c             	sub    $0xc,%esp
f0110c88:	68 44 01 12 f0       	push   $0xf0120144
f0110c8d:	e8 a4 67 ff ff       	call   f0107436 <cprintf>
f0110c92:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f0110c95:	e8 00 d4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110c9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0110c9d:	e8 55 b7 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110ca2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f0110ca5:	83 ec 0c             	sub    $0xc,%esp
f0110ca8:	68 00 00 60 00       	push   $0x600000
f0110cad:	e8 73 dd ff ff       	call   f010ea25 <kmalloc>
f0110cb2:	83 c4 10             	add    $0x10,%esp
f0110cb5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f0110cbb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110cc1:	85 c0                	test   %eax,%eax
f0110cc3:	74 17                	je     f0110cdc <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f0110cc5:	83 ec 04             	sub    $0x4,%esp
f0110cc8:	68 e8 00 12 f0       	push   $0xf01200e8
f0110ccd:	68 76 01 00 00       	push   $0x176
f0110cd2:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110cd7:	e8 b7 f4 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110cdc:	e8 b9 d3 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110ce1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0110ce4:	74 17                	je     f0110cfd <test_kmalloc_nextfit+0x126c>
f0110ce6:	83 ec 04             	sub    $0x4,%esp
f0110ce9:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0110cee:	68 77 01 00 00       	push   $0x177
f0110cf3:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110cf8:	e8 96 f4 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f0110cfd:	e8 f5 b6 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110d02:	89 c2                	mov    %eax,%edx
f0110d04:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110d07:	39 c2                	cmp    %eax,%edx
f0110d09:	74 17                	je     f0110d22 <test_kmalloc_nextfit+0x1291>
f0110d0b:	83 ec 04             	sub    $0x4,%esp
f0110d0e:	68 97 00 12 f0       	push   $0xf0120097
f0110d13:	68 78 01 00 00       	push   $0x178
f0110d18:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110d1d:	e8 71 f4 fe ff       	call   f0100193 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0110d22:	83 ec 0c             	sub    $0xc,%esp
f0110d25:	68 7c 01 12 f0       	push   $0xf012017c
f0110d2a:	e8 07 67 ff ff       	call   f0107436 <cprintf>
f0110d2f:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0110d32:	83 ec 0c             	sub    $0xc,%esp
f0110d35:	68 b8 01 12 f0       	push   $0xf01201b8
f0110d3a:	e8 f7 66 ff ff       	call   f0107436 <cprintf>
f0110d3f:	83 c4 10             	add    $0x10,%esp
	return 1;
f0110d42:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0110d47:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0110d4a:	5b                   	pop    %ebx
f0110d4b:	5f                   	pop    %edi
f0110d4c:	5d                   	pop    %ebp
f0110d4d:	c3                   	ret    

f0110d4e <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f0110d4e:	55                   	push   %ebp
f0110d4f:	89 e5                	mov    %esp,%ebp
f0110d51:	57                   	push   %edi
f0110d52:	53                   	push   %ebx
f0110d53:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f0110d59:	83 ec 0c             	sub    $0xc,%esp
f0110d5c:	68 24 fd 11 f0       	push   $0xf011fd24
f0110d61:	e8 d0 66 ff ff       	call   f0107436 <cprintf>
f0110d66:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0110d69:	83 ec 0c             	sub    $0xc,%esp
f0110d6c:	68 54 fd 11 f0       	push   $0xf011fd54
f0110d71:	e8 c0 66 ff ff       	call   f0107436 <cprintf>
f0110d76:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0110d79:	83 ec 0c             	sub    $0xc,%esp
f0110d7c:	68 24 fd 11 f0       	push   $0xf011fd24
f0110d81:	e8 b0 66 ff ff       	call   f0107436 <cprintf>
f0110d86:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0110d89:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0110d8f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0110d94:	b8 00 00 00 00       	mov    $0x0,%eax
f0110d99:	89 d7                	mov    %edx,%edi
f0110d9b:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0110d9d:	e8 55 b6 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110da2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110da5:	e8 f0 d2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110daa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f0110dad:	83 ec 0c             	sub    $0xc,%esp
f0110db0:	68 00 fc 2f 00       	push   $0x2ffc00
f0110db5:	e8 6b dc ff ff       	call   f010ea25 <kmalloc>
f0110dba:	83 c4 10             	add    $0x10,%esp
f0110dbd:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0110dc3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0110dc9:	89 c1                	mov    %eax,%ecx
f0110dcb:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0110dd2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110dd7:	0f b6 d0             	movzbl %al,%edx
f0110dda:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ddd:	01 d0                	add    %edx,%eax
f0110ddf:	48                   	dec    %eax
f0110de0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0110de3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110de6:	ba 00 00 00 00       	mov    $0x0,%edx
f0110deb:	f7 75 ec             	divl   -0x14(%ebp)
f0110dee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110df1:	29 d0                	sub    %edx,%eax
f0110df3:	89 c3                	mov    %eax,%ebx
f0110df5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0110dfc:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110e01:	0f b6 c0             	movzbl %al,%eax
f0110e04:	c1 e0 04             	shl    $0x4,%eax
f0110e07:	89 c2                	mov    %eax,%edx
f0110e09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110e0c:	01 d0                	add    %edx,%eax
f0110e0e:	48                   	dec    %eax
f0110e0f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0110e12:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110e15:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e1a:	f7 75 e4             	divl   -0x1c(%ebp)
f0110e1d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110e20:	29 d0                	sub    %edx,%eax
f0110e22:	01 d8                	add    %ebx,%eax
f0110e24:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0110e29:	39 c1                	cmp    %eax,%ecx
f0110e2b:	74 17                	je     f0110e44 <test_kmalloc_bestfit1+0xf6>
f0110e2d:	83 ec 04             	sub    $0x4,%esp
f0110e30:	68 f4 01 12 f0       	push   $0xf01201f4
f0110e35:	68 92 01 00 00       	push   $0x192
f0110e3a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110e3f:	e8 4f f3 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110e44:	e8 51 d2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110e49:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e4c:	74 17                	je     f0110e65 <test_kmalloc_bestfit1+0x117>
f0110e4e:	83 ec 04             	sub    $0x4,%esp
f0110e51:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0110e56:	68 93 01 00 00       	push   $0x193
f0110e5b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110e60:	e8 2e f3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0110e65:	e8 8d b5 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110e6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110e6d:	29 c2                	sub    %eax,%edx
f0110e6f:	89 d0                	mov    %edx,%eax
f0110e71:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110e76:	74 17                	je     f0110e8f <test_kmalloc_bestfit1+0x141>
f0110e78:	83 ec 04             	sub    $0x4,%esp
f0110e7b:	68 24 02 12 f0       	push   $0xf0120224
f0110e80:	68 94 01 00 00       	push   $0x194
f0110e85:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110e8a:	e8 04 f3 fe ff       	call   f0100193 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0110e8f:	e8 63 b5 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110e94:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110e97:	e8 fe d1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110e9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0110e9f:	83 ec 0c             	sub    $0xc,%esp
f0110ea2:	68 00 fc 2f 00       	push   $0x2ffc00
f0110ea7:	e8 79 db ff ff       	call   f010ea25 <kmalloc>
f0110eac:	83 c4 10             	add    $0x10,%esp
f0110eaf:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0110eb5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0110ebb:	89 c1                	mov    %eax,%ecx
f0110ebd:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0110ec4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110ec9:	0f b6 d0             	movzbl %al,%edx
f0110ecc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110ecf:	01 d0                	add    %edx,%eax
f0110ed1:	48                   	dec    %eax
f0110ed2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0110ed5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110ed8:	ba 00 00 00 00       	mov    $0x0,%edx
f0110edd:	f7 75 dc             	divl   -0x24(%ebp)
f0110ee0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110ee3:	29 d0                	sub    %edx,%eax
f0110ee5:	89 c3                	mov    %eax,%ebx
f0110ee7:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0110eee:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110ef3:	0f b6 c0             	movzbl %al,%eax
f0110ef6:	c1 e0 04             	shl    $0x4,%eax
f0110ef9:	89 c2                	mov    %eax,%edx
f0110efb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110efe:	01 d0                	add    %edx,%eax
f0110f00:	48                   	dec    %eax
f0110f01:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0110f04:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110f07:	ba 00 00 00 00       	mov    $0x0,%edx
f0110f0c:	f7 75 d4             	divl   -0x2c(%ebp)
f0110f0f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110f12:	29 d0                	sub    %edx,%eax
f0110f14:	01 d8                	add    %ebx,%eax
f0110f16:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0110f1b:	39 c1                	cmp    %eax,%ecx
f0110f1d:	74 17                	je     f0110f36 <test_kmalloc_bestfit1+0x1e8>
f0110f1f:	83 ec 04             	sub    $0x4,%esp
f0110f22:	68 f4 01 12 f0       	push   $0xf01201f4
f0110f27:	68 9a 01 00 00       	push   $0x19a
f0110f2c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110f31:	e8 5d f2 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110f36:	e8 5f d1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110f3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110f3e:	74 17                	je     f0110f57 <test_kmalloc_bestfit1+0x209>
f0110f40:	83 ec 04             	sub    $0x4,%esp
f0110f43:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0110f48:	68 9b 01 00 00       	push   $0x19b
f0110f4d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110f52:	e8 3c f2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0110f57:	e8 9b b4 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110f5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110f5f:	29 c2                	sub    %eax,%edx
f0110f61:	89 d0                	mov    %edx,%eax
f0110f63:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110f68:	74 17                	je     f0110f81 <test_kmalloc_bestfit1+0x233>
f0110f6a:	83 ec 04             	sub    $0x4,%esp
f0110f6d:	68 24 02 12 f0       	push   $0xf0120224
f0110f72:	68 9c 01 00 00       	push   $0x19c
f0110f77:	68 e2 fd 11 f0       	push   $0xf011fde2
f0110f7c:	e8 12 f2 fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110f81:	e8 71 b4 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0110f86:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110f89:	e8 0c d1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0110f8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0110f91:	83 ec 0c             	sub    $0xc,%esp
f0110f94:	68 00 fc 1f 00       	push   $0x1ffc00
f0110f99:	e8 87 da ff ff       	call   f010ea25 <kmalloc>
f0110f9e:	83 c4 10             	add    $0x10,%esp
f0110fa1:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0110fa7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110fad:	89 c1                	mov    %eax,%ecx
f0110faf:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0110fb6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110fbb:	0f b6 d0             	movzbl %al,%edx
f0110fbe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110fc1:	01 d0                	add    %edx,%eax
f0110fc3:	48                   	dec    %eax
f0110fc4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0110fc7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fca:	ba 00 00 00 00       	mov    $0x0,%edx
f0110fcf:	f7 75 cc             	divl   -0x34(%ebp)
f0110fd2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fd5:	29 d0                	sub    %edx,%eax
f0110fd7:	89 c3                	mov    %eax,%ebx
f0110fd9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0110fe0:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0110fe5:	0f b6 c0             	movzbl %al,%eax
f0110fe8:	c1 e0 04             	shl    $0x4,%eax
f0110feb:	89 c2                	mov    %eax,%edx
f0110fed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110ff0:	01 d0                	add    %edx,%eax
f0110ff2:	48                   	dec    %eax
f0110ff3:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0110ff6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ff9:	ba 00 00 00 00       	mov    $0x0,%edx
f0110ffe:	f7 75 c4             	divl   -0x3c(%ebp)
f0111001:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111004:	29 d0                	sub    %edx,%eax
f0111006:	01 d8                	add    %ebx,%eax
f0111008:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011100d:	39 c1                	cmp    %eax,%ecx
f011100f:	74 17                	je     f0111028 <test_kmalloc_bestfit1+0x2da>
f0111011:	83 ec 04             	sub    $0x4,%esp
f0111014:	68 f4 01 12 f0       	push   $0xf01201f4
f0111019:	68 a2 01 00 00       	push   $0x1a2
f011101e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111023:	e8 6b f1 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111028:	e8 6d d0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011102d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111030:	74 17                	je     f0111049 <test_kmalloc_bestfit1+0x2fb>
f0111032:	83 ec 04             	sub    $0x4,%esp
f0111035:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011103a:	68 a3 01 00 00       	push   $0x1a3
f011103f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111044:	e8 4a f1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0111049:	e8 a9 b3 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011104e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111051:	29 c2                	sub    %eax,%edx
f0111053:	89 d0                	mov    %edx,%eax
f0111055:	3d 00 02 00 00       	cmp    $0x200,%eax
f011105a:	74 17                	je     f0111073 <test_kmalloc_bestfit1+0x325>
f011105c:	83 ec 04             	sub    $0x4,%esp
f011105f:	68 24 02 12 f0       	push   $0xf0120224
f0111064:	68 a4 01 00 00       	push   $0x1a4
f0111069:	68 e2 fd 11 f0       	push   $0xf011fde2
f011106e:	e8 20 f1 fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111073:	e8 7f b3 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111078:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011107b:	e8 1a d0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111080:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f0111083:	83 ec 0c             	sub    $0xc,%esp
f0111086:	68 00 fc 1f 00       	push   $0x1ffc00
f011108b:	e8 95 d9 ff ff       	call   f010ea25 <kmalloc>
f0111090:	83 c4 10             	add    $0x10,%esp
f0111093:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0111099:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011109f:	89 c1                	mov    %eax,%ecx
f01110a1:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01110a8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01110ad:	0f b6 d0             	movzbl %al,%edx
f01110b0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01110b3:	01 d0                	add    %edx,%eax
f01110b5:	48                   	dec    %eax
f01110b6:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01110b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01110c1:	f7 75 bc             	divl   -0x44(%ebp)
f01110c4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01110c7:	29 d0                	sub    %edx,%eax
f01110c9:	89 c3                	mov    %eax,%ebx
f01110cb:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01110d2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01110d7:	0f b6 c0             	movzbl %al,%eax
f01110da:	c1 e0 04             	shl    $0x4,%eax
f01110dd:	89 c2                	mov    %eax,%edx
f01110df:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01110e2:	01 d0                	add    %edx,%eax
f01110e4:	48                   	dec    %eax
f01110e5:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01110e8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01110eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01110f0:	f7 75 b4             	divl   -0x4c(%ebp)
f01110f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01110f6:	29 d0                	sub    %edx,%eax
f01110f8:	01 d8                	add    %ebx,%eax
f01110fa:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01110ff:	39 c1                	cmp    %eax,%ecx
f0111101:	74 17                	je     f011111a <test_kmalloc_bestfit1+0x3cc>
f0111103:	83 ec 04             	sub    $0x4,%esp
f0111106:	68 f4 01 12 f0       	push   $0xf01201f4
f011110b:	68 aa 01 00 00       	push   $0x1aa
f0111110:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111115:	e8 79 f0 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011111a:	e8 7b cf ff ff       	call   f010e09a <pf_calculate_free_frames>
f011111f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111122:	74 17                	je     f011113b <test_kmalloc_bestfit1+0x3ed>
f0111124:	83 ec 04             	sub    $0x4,%esp
f0111127:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011112c:	68 ab 01 00 00       	push   $0x1ab
f0111131:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111136:	e8 58 f0 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011113b:	e8 b7 b2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111140:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111143:	29 c2                	sub    %eax,%edx
f0111145:	89 d0                	mov    %edx,%eax
f0111147:	3d 00 02 00 00       	cmp    $0x200,%eax
f011114c:	74 17                	je     f0111165 <test_kmalloc_bestfit1+0x417>
f011114e:	83 ec 04             	sub    $0x4,%esp
f0111151:	68 24 02 12 f0       	push   $0xf0120224
f0111156:	68 ac 01 00 00       	push   $0x1ac
f011115b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111160:	e8 2e f0 fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111165:	e8 8d b2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011116a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011116d:	e8 28 cf ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111172:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0111175:	83 ec 0c             	sub    $0xc,%esp
f0111178:	68 00 fc 0f 00       	push   $0xffc00
f011117d:	e8 a3 d8 ff ff       	call   f010ea25 <kmalloc>
f0111182:	83 c4 10             	add    $0x10,%esp
f0111185:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011118b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111191:	89 c1                	mov    %eax,%ecx
f0111193:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011119a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011119f:	0f b6 d0             	movzbl %al,%edx
f01111a2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01111a5:	01 d0                	add    %edx,%eax
f01111a7:	48                   	dec    %eax
f01111a8:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01111ab:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01111ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01111b3:	f7 75 ac             	divl   -0x54(%ebp)
f01111b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01111b9:	29 d0                	sub    %edx,%eax
f01111bb:	89 c3                	mov    %eax,%ebx
f01111bd:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01111c4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01111c9:	0f b6 c0             	movzbl %al,%eax
f01111cc:	c1 e0 04             	shl    $0x4,%eax
f01111cf:	89 c2                	mov    %eax,%edx
f01111d1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01111d4:	01 d0                	add    %edx,%eax
f01111d6:	48                   	dec    %eax
f01111d7:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01111da:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01111dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01111e2:	f7 75 a4             	divl   -0x5c(%ebp)
f01111e5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01111e8:	29 d0                	sub    %edx,%eax
f01111ea:	01 d8                	add    %ebx,%eax
f01111ec:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f01111f1:	39 c1                	cmp    %eax,%ecx
f01111f3:	74 17                	je     f011120c <test_kmalloc_bestfit1+0x4be>
f01111f5:	83 ec 04             	sub    $0x4,%esp
f01111f8:	68 f4 01 12 f0       	push   $0xf01201f4
f01111fd:	68 b2 01 00 00       	push   $0x1b2
f0111202:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111207:	e8 87 ef fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011120c:	e8 89 ce ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111211:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111214:	74 17                	je     f011122d <test_kmalloc_bestfit1+0x4df>
f0111216:	83 ec 04             	sub    $0x4,%esp
f0111219:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011121e:	68 b3 01 00 00       	push   $0x1b3
f0111223:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111228:	e8 66 ef fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011122d:	e8 c5 b1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111232:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111235:	29 c2                	sub    %eax,%edx
f0111237:	89 d0                	mov    %edx,%eax
f0111239:	3d 00 01 00 00       	cmp    $0x100,%eax
f011123e:	74 17                	je     f0111257 <test_kmalloc_bestfit1+0x509>
f0111240:	83 ec 04             	sub    $0x4,%esp
f0111243:	68 24 02 12 f0       	push   $0xf0120224
f0111248:	68 b4 01 00 00       	push   $0x1b4
f011124d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111252:	e8 3c ef fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111257:	e8 9b b1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011125c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011125f:	e8 36 ce ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111264:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f0111267:	83 ec 0c             	sub    $0xc,%esp
f011126a:	68 00 fc 0f 00       	push   $0xffc00
f011126f:	e8 b1 d7 ff ff       	call   f010ea25 <kmalloc>
f0111274:	83 c4 10             	add    $0x10,%esp
f0111277:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011127d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0111283:	89 c1                	mov    %eax,%ecx
f0111285:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011128c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111291:	0f b6 d0             	movzbl %al,%edx
f0111294:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111297:	01 d0                	add    %edx,%eax
f0111299:	48                   	dec    %eax
f011129a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011129d:	8b 45 98             	mov    -0x68(%ebp),%eax
f01112a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01112a5:	f7 75 9c             	divl   -0x64(%ebp)
f01112a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01112ab:	29 d0                	sub    %edx,%eax
f01112ad:	89 c3                	mov    %eax,%ebx
f01112af:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01112b6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01112bb:	0f b6 c0             	movzbl %al,%eax
f01112be:	c1 e0 04             	shl    $0x4,%eax
f01112c1:	89 c2                	mov    %eax,%edx
f01112c3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01112c6:	01 d0                	add    %edx,%eax
f01112c8:	48                   	dec    %eax
f01112c9:	89 45 90             	mov    %eax,-0x70(%ebp)
f01112cc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01112cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01112d4:	f7 75 94             	divl   -0x6c(%ebp)
f01112d7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01112da:	29 d0                	sub    %edx,%eax
f01112dc:	01 d8                	add    %ebx,%eax
f01112de:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f01112e3:	39 c1                	cmp    %eax,%ecx
f01112e5:	74 17                	je     f01112fe <test_kmalloc_bestfit1+0x5b0>
f01112e7:	83 ec 04             	sub    $0x4,%esp
f01112ea:	68 f4 01 12 f0       	push   $0xf01201f4
f01112ef:	68 ba 01 00 00       	push   $0x1ba
f01112f4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01112f9:	e8 95 ee fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01112fe:	e8 97 cd ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111303:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111306:	74 17                	je     f011131f <test_kmalloc_bestfit1+0x5d1>
f0111308:	83 ec 04             	sub    $0x4,%esp
f011130b:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111310:	68 bb 01 00 00       	push   $0x1bb
f0111315:	68 e2 fd 11 f0       	push   $0xf011fde2
f011131a:	e8 74 ee fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011131f:	e8 d3 b0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111324:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111327:	29 c2                	sub    %eax,%edx
f0111329:	89 d0                	mov    %edx,%eax
f011132b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111330:	74 17                	je     f0111349 <test_kmalloc_bestfit1+0x5fb>
f0111332:	83 ec 04             	sub    $0x4,%esp
f0111335:	68 24 02 12 f0       	push   $0xf0120224
f011133a:	68 bc 01 00 00       	push   $0x1bc
f011133f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111344:	e8 4a ee fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111349:	e8 a9 b0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011134e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111351:	e8 44 cd ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111356:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f0111359:	83 ec 0c             	sub    $0xc,%esp
f011135c:	68 00 fc 0f 00       	push   $0xffc00
f0111361:	e8 bf d6 ff ff       	call   f010ea25 <kmalloc>
f0111366:	83 c4 10             	add    $0x10,%esp
f0111369:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011136f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0111375:	89 c1                	mov    %eax,%ecx
f0111377:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011137e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111383:	0f b6 d0             	movzbl %al,%edx
f0111386:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111389:	01 d0                	add    %edx,%eax
f011138b:	48                   	dec    %eax
f011138c:	89 45 88             	mov    %eax,-0x78(%ebp)
f011138f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111392:	ba 00 00 00 00       	mov    $0x0,%edx
f0111397:	f7 75 8c             	divl   -0x74(%ebp)
f011139a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011139d:	29 d0                	sub    %edx,%eax
f011139f:	89 c3                	mov    %eax,%ebx
f01113a1:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01113a8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01113ad:	0f b6 c0             	movzbl %al,%eax
f01113b0:	c1 e0 04             	shl    $0x4,%eax
f01113b3:	89 c2                	mov    %eax,%edx
f01113b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01113b8:	01 d0                	add    %edx,%eax
f01113ba:	48                   	dec    %eax
f01113bb:	89 45 80             	mov    %eax,-0x80(%ebp)
f01113be:	8b 45 80             	mov    -0x80(%ebp),%eax
f01113c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01113c6:	f7 75 84             	divl   -0x7c(%ebp)
f01113c9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01113cc:	29 d0                	sub    %edx,%eax
f01113ce:	01 d8                	add    %ebx,%eax
f01113d0:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f01113d5:	39 c1                	cmp    %eax,%ecx
f01113d7:	74 17                	je     f01113f0 <test_kmalloc_bestfit1+0x6a2>
f01113d9:	83 ec 04             	sub    $0x4,%esp
f01113dc:	68 f4 01 12 f0       	push   $0xf01201f4
f01113e1:	68 c2 01 00 00       	push   $0x1c2
f01113e6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01113eb:	e8 a3 ed fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01113f0:	e8 a5 cc ff ff       	call   f010e09a <pf_calculate_free_frames>
f01113f5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01113f8:	74 17                	je     f0111411 <test_kmalloc_bestfit1+0x6c3>
f01113fa:	83 ec 04             	sub    $0x4,%esp
f01113fd:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111402:	68 c3 01 00 00       	push   $0x1c3
f0111407:	68 e2 fd 11 f0       	push   $0xf011fde2
f011140c:	e8 82 ed fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0111411:	e8 e1 af ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111416:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111419:	29 c2                	sub    %eax,%edx
f011141b:	89 d0                	mov    %edx,%eax
f011141d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111422:	74 17                	je     f011143b <test_kmalloc_bestfit1+0x6ed>
f0111424:	83 ec 04             	sub    $0x4,%esp
f0111427:	68 24 02 12 f0       	push   $0xf0120224
f011142c:	68 c4 01 00 00       	push   $0x1c4
f0111431:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111436:	e8 58 ed fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011143b:	e8 b7 af ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111440:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111443:	e8 52 cc ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111448:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011144b:	83 ec 0c             	sub    $0xc,%esp
f011144e:	68 00 fc 0f 00       	push   $0xffc00
f0111453:	e8 cd d5 ff ff       	call   f010ea25 <kmalloc>
f0111458:	83 c4 10             	add    $0x10,%esp
f011145b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f0111461:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0111467:	89 c1                	mov    %eax,%ecx
f0111469:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0111470:	10 00 00 
f0111473:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111478:	0f b6 d0             	movzbl %al,%edx
f011147b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0111481:	01 d0                	add    %edx,%eax
f0111483:	48                   	dec    %eax
f0111484:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011148a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111490:	ba 00 00 00 00       	mov    $0x0,%edx
f0111495:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011149b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01114a1:	29 d0                	sub    %edx,%eax
f01114a3:	89 c3                	mov    %eax,%ebx
f01114a5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01114ac:	10 00 00 
f01114af:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01114b4:	0f b6 c0             	movzbl %al,%eax
f01114b7:	c1 e0 04             	shl    $0x4,%eax
f01114ba:	89 c2                	mov    %eax,%edx
f01114bc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01114c2:	01 d0                	add    %edx,%eax
f01114c4:	48                   	dec    %eax
f01114c5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01114cb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01114d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01114d6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01114dc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01114e2:	29 d0                	sub    %edx,%eax
f01114e4:	01 d8                	add    %ebx,%eax
f01114e6:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f01114eb:	39 c1                	cmp    %eax,%ecx
f01114ed:	74 17                	je     f0111506 <test_kmalloc_bestfit1+0x7b8>
f01114ef:	83 ec 04             	sub    $0x4,%esp
f01114f2:	68 f4 01 12 f0       	push   $0xf01201f4
f01114f7:	68 ca 01 00 00       	push   $0x1ca
f01114fc:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111501:	e8 8d ec fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111506:	e8 8f cb ff ff       	call   f010e09a <pf_calculate_free_frames>
f011150b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011150e:	74 17                	je     f0111527 <test_kmalloc_bestfit1+0x7d9>
f0111510:	83 ec 04             	sub    $0x4,%esp
f0111513:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111518:	68 cb 01 00 00       	push   $0x1cb
f011151d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111522:	e8 6c ec fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0111527:	e8 cb ae ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011152c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011152f:	29 c2                	sub    %eax,%edx
f0111531:	89 d0                	mov    %edx,%eax
f0111533:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111538:	74 17                	je     f0111551 <test_kmalloc_bestfit1+0x803>
f011153a:	83 ec 04             	sub    $0x4,%esp
f011153d:	68 24 02 12 f0       	push   $0xf0120224
f0111542:	68 cc 01 00 00       	push   $0x1cc
f0111547:	68 e2 fd 11 f0       	push   $0xf011fde2
f011154c:	e8 42 ec fe ff       	call   f0100193 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111551:	e8 a1 ae ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111556:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111559:	e8 3c cb ff ff       	call   f010e09a <pf_calculate_free_frames>
f011155e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0111561:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0111567:	83 ec 0c             	sub    $0xc,%esp
f011156a:	50                   	push   %eax
f011156b:	e8 cf d4 ff ff       	call   f010ea3f <kfree>
f0111570:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111573:	e8 22 cb ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111578:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011157b:	74 17                	je     f0111594 <test_kmalloc_bestfit1+0x846>
f011157d:	83 ec 04             	sub    $0x4,%esp
f0111580:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111585:	68 d5 01 00 00       	push   $0x1d5
f011158a:	68 e2 fd 11 f0       	push   $0xf011fde2
f011158f:	e8 ff eb fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0111594:	e8 5e ae ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111599:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011159c:	3d 00 03 00 00       	cmp    $0x300,%eax
f01115a1:	74 17                	je     f01115ba <test_kmalloc_bestfit1+0x86c>
f01115a3:	83 ec 04             	sub    $0x4,%esp
f01115a6:	68 37 02 12 f0       	push   $0xf0120237
f01115ab:	68 d6 01 00 00       	push   $0x1d6
f01115b0:	68 e2 fd 11 f0       	push   $0xf011fde2
f01115b5:	e8 d9 eb fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01115ba:	e8 38 ae ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01115bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01115c2:	e8 d3 ca ff ff       	call   f010e09a <pf_calculate_free_frames>
f01115c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f01115ca:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01115d0:	83 ec 0c             	sub    $0xc,%esp
f01115d3:	50                   	push   %eax
f01115d4:	e8 66 d4 ff ff       	call   f010ea3f <kfree>
f01115d9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01115dc:	e8 b9 ca ff ff       	call   f010e09a <pf_calculate_free_frames>
f01115e1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01115e4:	74 17                	je     f01115fd <test_kmalloc_bestfit1+0x8af>
f01115e6:	83 ec 04             	sub    $0x4,%esp
f01115e9:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01115ee:	68 dc 01 00 00       	push   $0x1dc
f01115f3:	68 e2 fd 11 f0       	push   $0xf011fde2
f01115f8:	e8 96 eb fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f01115fd:	e8 f5 ad ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111602:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111605:	3d 00 02 00 00       	cmp    $0x200,%eax
f011160a:	74 17                	je     f0111623 <test_kmalloc_bestfit1+0x8d5>
f011160c:	83 ec 04             	sub    $0x4,%esp
f011160f:	68 37 02 12 f0       	push   $0xf0120237
f0111614:	68 dd 01 00 00       	push   $0x1dd
f0111619:	68 e2 fd 11 f0       	push   $0xf011fde2
f011161e:	e8 70 eb fe ff       	call   f0100193 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111623:	e8 cf ad ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111628:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011162b:	e8 6a ca ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111630:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f0111633:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0111639:	83 ec 0c             	sub    $0xc,%esp
f011163c:	50                   	push   %eax
f011163d:	e8 fd d3 ff ff       	call   f010ea3f <kfree>
f0111642:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111645:	e8 50 ca ff ff       	call   f010e09a <pf_calculate_free_frames>
f011164a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011164d:	74 17                	je     f0111666 <test_kmalloc_bestfit1+0x918>
f011164f:	83 ec 04             	sub    $0x4,%esp
f0111652:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111657:	68 e3 01 00 00       	push   $0x1e3
f011165c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111661:	e8 2d eb fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0111666:	e8 8c ad ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011166b:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011166e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111673:	74 17                	je     f011168c <test_kmalloc_bestfit1+0x93e>
f0111675:	83 ec 04             	sub    $0x4,%esp
f0111678:	68 37 02 12 f0       	push   $0xf0120237
f011167d:	68 e4 01 00 00       	push   $0x1e4
f0111682:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111687:	e8 07 eb fe ff       	call   f0100193 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011168c:	e8 66 ad ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111691:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111694:	e8 01 ca ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111699:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011169c:	83 ec 0c             	sub    $0xc,%esp
f011169f:	68 00 00 08 00       	push   $0x80000
f01116a4:	e8 7c d3 ff ff       	call   f010ea25 <kmalloc>
f01116a9:	83 c4 10             	add    $0x10,%esp
f01116ac:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f01116b2:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01116b8:	89 c1                	mov    %eax,%ecx
f01116ba:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01116c1:	10 00 00 
f01116c4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01116c9:	0f b6 d0             	movzbl %al,%edx
f01116cc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01116d2:	01 d0                	add    %edx,%eax
f01116d4:	48                   	dec    %eax
f01116d5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01116db:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01116e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01116e6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01116ec:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01116f2:	29 d0                	sub    %edx,%eax
f01116f4:	89 c3                	mov    %eax,%ebx
f01116f6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01116fd:	10 00 00 
f0111700:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111705:	0f b6 c0             	movzbl %al,%eax
f0111708:	c1 e0 04             	shl    $0x4,%eax
f011170b:	89 c2                	mov    %eax,%edx
f011170d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0111713:	01 d0                	add    %edx,%eax
f0111715:	48                   	dec    %eax
f0111716:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011171c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111722:	ba 00 00 00 00       	mov    $0x0,%edx
f0111727:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011172d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111733:	29 d0                	sub    %edx,%eax
f0111735:	01 d8                	add    %ebx,%eax
f0111737:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011173c:	39 c1                	cmp    %eax,%ecx
f011173e:	74 17                	je     f0111757 <test_kmalloc_bestfit1+0xa09>
f0111740:	83 ec 04             	sub    $0x4,%esp
f0111743:	68 f4 01 12 f0       	push   $0xf01201f4
f0111748:	68 ed 01 00 00       	push   $0x1ed
f011174d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111752:	e8 3c ea fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111757:	e8 3e c9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011175c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011175f:	74 17                	je     f0111778 <test_kmalloc_bestfit1+0xa2a>
f0111761:	83 ec 04             	sub    $0x4,%esp
f0111764:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111769:	68 ee 01 00 00       	push   $0x1ee
f011176e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111773:	e8 1b ea fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f0111778:	e8 7a ac ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011177d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111780:	29 c2                	sub    %eax,%edx
f0111782:	89 d0                	mov    %edx,%eax
f0111784:	3d 80 00 00 00       	cmp    $0x80,%eax
f0111789:	74 17                	je     f01117a2 <test_kmalloc_bestfit1+0xa54>
f011178b:	83 ec 04             	sub    $0x4,%esp
f011178e:	68 24 02 12 f0       	push   $0xf0120224
f0111793:	68 ef 01 00 00       	push   $0x1ef
f0111798:	68 e2 fd 11 f0       	push   $0xf011fde2
f011179d:	e8 f1 e9 fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f01117a2:	e8 50 ac ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01117a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01117aa:	e8 eb c8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01117af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f01117b2:	83 ec 0c             	sub    $0xc,%esp
f01117b5:	68 00 fc 0f 00       	push   $0xffc00
f01117ba:	e8 66 d2 ff ff       	call   f010ea25 <kmalloc>
f01117bf:	83 c4 10             	add    $0x10,%esp
f01117c2:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f01117c8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01117ce:	89 c1                	mov    %eax,%ecx
f01117d0:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01117d7:	10 00 00 
f01117da:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01117df:	0f b6 d0             	movzbl %al,%edx
f01117e2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01117e8:	01 d0                	add    %edx,%eax
f01117ea:	48                   	dec    %eax
f01117eb:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01117f1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01117f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01117fc:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0111802:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0111808:	29 d0                	sub    %edx,%eax
f011180a:	89 c3                	mov    %eax,%ebx
f011180c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0111813:	10 00 00 
f0111816:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011181b:	0f b6 c0             	movzbl %al,%eax
f011181e:	c1 e0 04             	shl    $0x4,%eax
f0111821:	89 c2                	mov    %eax,%edx
f0111823:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0111829:	01 d0                	add    %edx,%eax
f011182b:	48                   	dec    %eax
f011182c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0111832:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111838:	ba 00 00 00 00       	mov    $0x0,%edx
f011183d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0111843:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111849:	29 d0                	sub    %edx,%eax
f011184b:	01 d8                	add    %ebx,%eax
f011184d:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0111852:	39 c1                	cmp    %eax,%ecx
f0111854:	74 17                	je     f011186d <test_kmalloc_bestfit1+0xb1f>
f0111856:	83 ec 04             	sub    $0x4,%esp
f0111859:	68 f4 01 12 f0       	push   $0xf01201f4
f011185e:	68 f5 01 00 00       	push   $0x1f5
f0111863:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111868:	e8 26 e9 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011186d:	e8 28 c8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111872:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111875:	74 17                	je     f011188e <test_kmalloc_bestfit1+0xb40>
f0111877:	83 ec 04             	sub    $0x4,%esp
f011187a:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011187f:	68 f6 01 00 00       	push   $0x1f6
f0111884:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111889:	e8 05 e9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011188e:	e8 64 ab ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111893:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111896:	29 c2                	sub    %eax,%edx
f0111898:	89 d0                	mov    %edx,%eax
f011189a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011189f:	74 17                	je     f01118b8 <test_kmalloc_bestfit1+0xb6a>
f01118a1:	83 ec 04             	sub    $0x4,%esp
f01118a4:	68 24 02 12 f0       	push   $0xf0120224
f01118a9:	68 f7 01 00 00       	push   $0x1f7
f01118ae:	68 e2 fd 11 f0       	push   $0xf011fde2
f01118b3:	e8 db e8 fe ff       	call   f0100193 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f01118b8:	e8 3a ab ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01118bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01118c0:	e8 d5 c7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01118c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f01118c8:	83 ec 0c             	sub    $0xc,%esp
f01118cb:	68 00 fc 03 00       	push   $0x3fc00
f01118d0:	e8 50 d1 ff ff       	call   f010ea25 <kmalloc>
f01118d5:	83 c4 10             	add    $0x10,%esp
f01118d8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f01118de:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01118e4:	89 c1                	mov    %eax,%ecx
f01118e6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01118ed:	10 00 00 
f01118f0:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01118f5:	0f b6 d0             	movzbl %al,%edx
f01118f8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01118fe:	01 d0                	add    %edx,%eax
f0111900:	48                   	dec    %eax
f0111901:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0111907:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011190d:	ba 00 00 00 00       	mov    $0x0,%edx
f0111912:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0111918:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011191e:	29 d0                	sub    %edx,%eax
f0111920:	89 c3                	mov    %eax,%ebx
f0111922:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0111929:	10 00 00 
f011192c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111931:	0f b6 c0             	movzbl %al,%eax
f0111934:	c1 e0 04             	shl    $0x4,%eax
f0111937:	89 c2                	mov    %eax,%edx
f0111939:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011193f:	01 d0                	add    %edx,%eax
f0111941:	48                   	dec    %eax
f0111942:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0111948:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011194e:	ba 00 00 00 00       	mov    $0x0,%edx
f0111953:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0111959:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011195f:	29 d0                	sub    %edx,%eax
f0111961:	01 d8                	add    %ebx,%eax
f0111963:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f0111968:	39 c1                	cmp    %eax,%ecx
f011196a:	74 17                	je     f0111983 <test_kmalloc_bestfit1+0xc35>
f011196c:	83 ec 04             	sub    $0x4,%esp
f011196f:	68 f4 01 12 f0       	push   $0xf01201f4
f0111974:	68 fd 01 00 00       	push   $0x1fd
f0111979:	68 e2 fd 11 f0       	push   $0xf011fde2
f011197e:	e8 10 e8 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111983:	e8 12 c7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111988:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011198b:	74 17                	je     f01119a4 <test_kmalloc_bestfit1+0xc56>
f011198d:	83 ec 04             	sub    $0x4,%esp
f0111990:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111995:	68 fe 01 00 00       	push   $0x1fe
f011199a:	68 e2 fd 11 f0       	push   $0xf011fde2
f011199f:	e8 ef e7 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f01119a4:	e8 4e aa ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01119a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01119ac:	29 c2                	sub    %eax,%edx
f01119ae:	89 d0                	mov    %edx,%eax
f01119b0:	83 f8 40             	cmp    $0x40,%eax
f01119b3:	74 17                	je     f01119cc <test_kmalloc_bestfit1+0xc7e>
f01119b5:	83 ec 04             	sub    $0x4,%esp
f01119b8:	68 24 02 12 f0       	push   $0xf0120224
f01119bd:	68 ff 01 00 00       	push   $0x1ff
f01119c2:	68 e2 fd 11 f0       	push   $0xf011fde2
f01119c7:	e8 c7 e7 fe ff       	call   f0100193 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f01119cc:	e8 26 aa ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01119d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01119d4:	e8 c1 c6 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01119d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f01119dc:	83 ec 0c             	sub    $0xc,%esp
f01119df:	68 00 fc 3f 00       	push   $0x3ffc00
f01119e4:	e8 3c d0 ff ff       	call   f010ea25 <kmalloc>
f01119e9:	83 c4 10             	add    $0x10,%esp
f01119ec:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f01119f2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01119f8:	89 c1                	mov    %eax,%ecx
f01119fa:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0111a01:	10 00 00 
f0111a04:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111a09:	0f b6 d0             	movzbl %al,%edx
f0111a0c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111a12:	01 d0                	add    %edx,%eax
f0111a14:	48                   	dec    %eax
f0111a15:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0111a1b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111a21:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a26:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0111a2c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111a32:	29 d0                	sub    %edx,%eax
f0111a34:	89 c3                	mov    %eax,%ebx
f0111a36:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0111a3d:	10 00 00 
f0111a40:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111a45:	0f b6 c0             	movzbl %al,%eax
f0111a48:	c1 e0 04             	shl    $0x4,%eax
f0111a4b:	89 c2                	mov    %eax,%edx
f0111a4d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0111a53:	01 d0                	add    %edx,%eax
f0111a55:	48                   	dec    %eax
f0111a56:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0111a5c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0111a62:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a67:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0111a6d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0111a73:	29 d0                	sub    %edx,%eax
f0111a75:	01 d8                	add    %ebx,%eax
f0111a77:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f0111a7c:	39 c1                	cmp    %eax,%ecx
f0111a7e:	74 17                	je     f0111a97 <test_kmalloc_bestfit1+0xd49>
f0111a80:	83 ec 04             	sub    $0x4,%esp
f0111a83:	68 f4 01 12 f0       	push   $0xf01201f4
f0111a88:	68 05 02 00 00       	push   $0x205
f0111a8d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111a92:	e8 fc e6 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111a97:	e8 fe c5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111a9c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111a9f:	74 17                	je     f0111ab8 <test_kmalloc_bestfit1+0xd6a>
f0111aa1:	83 ec 04             	sub    $0x4,%esp
f0111aa4:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111aa9:	68 06 02 00 00       	push   $0x206
f0111aae:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111ab3:	e8 db e6 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f0111ab8:	e8 3a a9 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111ac0:	29 c2                	sub    %eax,%edx
f0111ac2:	89 d0                	mov    %edx,%eax
f0111ac4:	3d 00 04 00 00       	cmp    $0x400,%eax
f0111ac9:	74 17                	je     f0111ae2 <test_kmalloc_bestfit1+0xd94>
f0111acb:	83 ec 04             	sub    $0x4,%esp
f0111ace:	68 24 02 12 f0       	push   $0xf0120224
f0111ad3:	68 07 02 00 00       	push   $0x207
f0111ad8:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111add:	e8 b1 e6 fe ff       	call   f0100193 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f0111ae2:	e8 10 a9 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111ae7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111aea:	e8 ab c5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111aef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f0111af2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111af8:	83 ec 0c             	sub    $0xc,%esp
f0111afb:	50                   	push   %eax
f0111afc:	e8 3e cf ff ff       	call   f010ea3f <kfree>
f0111b01:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111b04:	e8 91 c5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111b09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111b0c:	74 17                	je     f0111b25 <test_kmalloc_bestfit1+0xdd7>
f0111b0e:	83 ec 04             	sub    $0x4,%esp
f0111b11:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111b16:	68 10 02 00 00       	push   $0x210
f0111b1b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111b20:	e8 6e e6 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0111b25:	e8 cd a8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111b2a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111b2d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111b32:	74 17                	je     f0111b4b <test_kmalloc_bestfit1+0xdfd>
f0111b34:	83 ec 04             	sub    $0x4,%esp
f0111b37:	68 37 02 12 f0       	push   $0xf0120237
f0111b3c:	68 11 02 00 00       	push   $0x211
f0111b41:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111b46:	e8 48 e6 fe ff       	call   f0100193 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f0111b4b:	e8 a7 a8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111b50:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111b53:	e8 42 c5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111b58:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f0111b5b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0111b61:	83 ec 0c             	sub    $0xc,%esp
f0111b64:	50                   	push   %eax
f0111b65:	e8 d5 ce ff ff       	call   f010ea3f <kfree>
f0111b6a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111b6d:	e8 28 c5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111b72:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111b75:	74 17                	je     f0111b8e <test_kmalloc_bestfit1+0xe40>
f0111b77:	83 ec 04             	sub    $0x4,%esp
f0111b7a:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111b7f:	68 17 02 00 00       	push   $0x217
f0111b84:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111b89:	e8 05 e6 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f0111b8e:	e8 64 a8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111b93:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111b96:	3d 80 00 00 00       	cmp    $0x80,%eax
f0111b9b:	74 17                	je     f0111bb4 <test_kmalloc_bestfit1+0xe66>
f0111b9d:	83 ec 04             	sub    $0x4,%esp
f0111ba0:	68 37 02 12 f0       	push   $0xf0120237
f0111ba5:	68 18 02 00 00       	push   $0x218
f0111baa:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111baf:	e8 df e5 fe ff       	call   f0100193 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f0111bb4:	e8 3e a8 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111bb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111bbc:	e8 d9 c4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111bc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f0111bc4:	83 ec 0c             	sub    $0xc,%esp
f0111bc7:	68 00 fc 1f 00       	push   $0x1ffc00
f0111bcc:	e8 54 ce ff ff       	call   f010ea25 <kmalloc>
f0111bd1:	83 c4 10             	add    $0x10,%esp
f0111bd4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f0111bda:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0111be0:	89 c1                	mov    %eax,%ecx
f0111be2:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0111be9:	10 00 00 
f0111bec:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111bf1:	0f b6 d0             	movzbl %al,%edx
f0111bf4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0111bfa:	01 d0                	add    %edx,%eax
f0111bfc:	48                   	dec    %eax
f0111bfd:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0111c03:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0111c09:	ba 00 00 00 00       	mov    $0x0,%edx
f0111c0e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0111c14:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0111c1a:	29 d0                	sub    %edx,%eax
f0111c1c:	89 c3                	mov    %eax,%ebx
f0111c1e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0111c25:	10 00 00 
f0111c28:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111c2d:	0f b6 c0             	movzbl %al,%eax
f0111c30:	c1 e0 04             	shl    $0x4,%eax
f0111c33:	89 c2                	mov    %eax,%edx
f0111c35:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0111c3b:	01 d0                	add    %edx,%eax
f0111c3d:	48                   	dec    %eax
f0111c3e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0111c44:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0111c4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0111c4f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0111c55:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0111c5b:	29 d0                	sub    %edx,%eax
f0111c5d:	01 d8                	add    %ebx,%eax
f0111c5f:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f0111c64:	39 c1                	cmp    %eax,%ecx
f0111c66:	74 17                	je     f0111c7f <test_kmalloc_bestfit1+0xf31>
f0111c68:	83 ec 04             	sub    $0x4,%esp
f0111c6b:	68 f4 01 12 f0       	push   $0xf01201f4
f0111c70:	68 21 02 00 00       	push   $0x221
f0111c75:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111c7a:	e8 14 e5 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111c7f:	e8 16 c4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111c84:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111c87:	74 17                	je     f0111ca0 <test_kmalloc_bestfit1+0xf52>
f0111c89:	83 ec 04             	sub    $0x4,%esp
f0111c8c:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111c91:	68 22 02 00 00       	push   $0x222
f0111c96:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111c9b:	e8 f3 e4 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0111ca0:	e8 52 a7 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111ca5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111ca8:	29 c2                	sub    %eax,%edx
f0111caa:	89 d0                	mov    %edx,%eax
f0111cac:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111cb1:	74 17                	je     f0111cca <test_kmalloc_bestfit1+0xf7c>
f0111cb3:	83 ec 04             	sub    $0x4,%esp
f0111cb6:	68 24 02 12 f0       	push   $0xf0120224
f0111cbb:	68 23 02 00 00       	push   $0x223
f0111cc0:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111cc5:	e8 c9 e4 fe ff       	call   f0100193 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f0111cca:	83 ec 0c             	sub    $0xc,%esp
f0111ccd:	68 44 02 12 f0       	push   $0xf0120244
f0111cd2:	e8 5f 57 ff ff       	call   f0107436 <cprintf>
f0111cd7:	83 c4 10             	add    $0x10,%esp

	return 1;
f0111cda:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0111cdf:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0111ce2:	5b                   	pop    %ebx
f0111ce3:	5f                   	pop    %edi
f0111ce4:	5d                   	pop    %ebp
f0111ce5:	c3                   	ret    

f0111ce6 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f0111ce6:	55                   	push   %ebp
f0111ce7:	89 e5                	mov    %esp,%ebp
f0111ce9:	57                   	push   %edi
f0111cea:	53                   	push   %ebx
f0111ceb:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f0111cf1:	83 ec 0c             	sub    $0xc,%esp
f0111cf4:	68 24 fd 11 f0       	push   $0xf011fd24
f0111cf9:	e8 38 57 ff ff       	call   f0107436 <cprintf>
f0111cfe:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0111d01:	83 ec 0c             	sub    $0xc,%esp
f0111d04:	68 54 fd 11 f0       	push   $0xf011fd54
f0111d09:	e8 28 57 ff ff       	call   f0107436 <cprintf>
f0111d0e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0111d11:	83 ec 0c             	sub    $0xc,%esp
f0111d14:	68 24 fd 11 f0       	push   $0xf011fd24
f0111d19:	e8 18 57 ff ff       	call   f0107436 <cprintf>
f0111d1e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0111d21:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0111d27:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111d2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0111d31:	89 d7                	mov    %edx,%edi
f0111d33:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0111d35:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0111d3c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111d41:	0f b6 d0             	movzbl %al,%edx
f0111d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111d47:	01 d0                	add    %edx,%eax
f0111d49:	48                   	dec    %eax
f0111d4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0111d4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111d50:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d55:	f7 75 f4             	divl   -0xc(%ebp)
f0111d58:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111d5b:	29 d0                	sub    %edx,%eax
f0111d5d:	89 c1                	mov    %eax,%ecx
f0111d5f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0111d66:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111d6b:	0f b6 c0             	movzbl %al,%eax
f0111d6e:	c1 e0 04             	shl    $0x4,%eax
f0111d71:	89 c2                	mov    %eax,%edx
f0111d73:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111d76:	01 d0                	add    %edx,%eax
f0111d78:	48                   	dec    %eax
f0111d79:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0111d7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111d7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d84:	f7 75 ec             	divl   -0x14(%ebp)
f0111d87:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111d8a:	29 d0                	sub    %edx,%eax
f0111d8c:	01 c8                	add    %ecx,%eax
f0111d8e:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0111d93:	29 c2                	sub    %eax,%edx
f0111d95:	89 d0                	mov    %edx,%eax
f0111d97:	83 ec 0c             	sub    $0xc,%esp
f0111d9a:	50                   	push   %eax
f0111d9b:	e8 85 cc ff ff       	call   f010ea25 <kmalloc>
f0111da0:	83 c4 10             	add    $0x10,%esp
f0111da3:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f0111da9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0111daf:	85 c0                	test   %eax,%eax
f0111db1:	74 17                	je     f0111dca <test_kmalloc_bestfit2+0xe4>
f0111db3:	83 ec 04             	sub    $0x4,%esp
f0111db6:	68 8c 02 12 f0       	push   $0xf012028c
f0111dbb:	68 39 02 00 00       	push   $0x239
f0111dc0:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111dc5:	e8 c9 e3 fe ff       	call   f0100193 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111dca:	e8 28 a6 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111dcf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0111dd2:	e8 c3 c2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111dd7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0111dda:	83 ec 0c             	sub    $0xc,%esp
f0111ddd:	68 00 fc 1f 00       	push   $0x1ffc00
f0111de2:	e8 3e cc ff ff       	call   f010ea25 <kmalloc>
f0111de7:	83 c4 10             	add    $0x10,%esp
f0111dea:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0111df0:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0111df6:	89 c1                	mov    %eax,%ecx
f0111df8:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0111dff:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111e04:	0f b6 d0             	movzbl %al,%edx
f0111e07:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111e0a:	01 d0                	add    %edx,%eax
f0111e0c:	48                   	dec    %eax
f0111e0d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111e10:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111e13:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e18:	f7 75 dc             	divl   -0x24(%ebp)
f0111e1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111e1e:	29 d0                	sub    %edx,%eax
f0111e20:	89 c3                	mov    %eax,%ebx
f0111e22:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0111e29:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111e2e:	0f b6 c0             	movzbl %al,%eax
f0111e31:	c1 e0 04             	shl    $0x4,%eax
f0111e34:	89 c2                	mov    %eax,%edx
f0111e36:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111e39:	01 d0                	add    %edx,%eax
f0111e3b:	48                   	dec    %eax
f0111e3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111e3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111e42:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e47:	f7 75 d4             	divl   -0x2c(%ebp)
f0111e4a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111e4d:	29 d0                	sub    %edx,%eax
f0111e4f:	01 d8                	add    %ebx,%eax
f0111e51:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0111e56:	39 c1                	cmp    %eax,%ecx
f0111e58:	74 17                	je     f0111e71 <test_kmalloc_bestfit2+0x18b>
f0111e5a:	83 ec 04             	sub    $0x4,%esp
f0111e5d:	68 f4 01 12 f0       	push   $0xf01201f4
f0111e62:	68 43 02 00 00       	push   $0x243
f0111e67:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111e6c:	e8 22 e3 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111e71:	e8 24 c2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111e76:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0111e79:	74 17                	je     f0111e92 <test_kmalloc_bestfit2+0x1ac>
f0111e7b:	83 ec 04             	sub    $0x4,%esp
f0111e7e:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111e83:	68 44 02 00 00       	push   $0x244
f0111e88:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111e8d:	e8 01 e3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f0111e92:	e8 60 a5 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111e97:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0111e9a:	29 c2                	sub    %eax,%edx
f0111e9c:	89 d0                	mov    %edx,%eax
f0111e9e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111ea3:	74 17                	je     f0111ebc <test_kmalloc_bestfit2+0x1d6>
f0111ea5:	83 ec 04             	sub    $0x4,%esp
f0111ea8:	68 24 02 12 f0       	push   $0xf0120224
f0111ead:	68 45 02 00 00       	push   $0x245
f0111eb2:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111eb7:	e8 d7 e2 fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111ebc:	e8 36 a5 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111ec1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0111ec4:	e8 d1 c1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111ec9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0111ecc:	83 ec 0c             	sub    $0xc,%esp
f0111ecf:	68 00 fc 1f 00       	push   $0x1ffc00
f0111ed4:	e8 4c cb ff ff       	call   f010ea25 <kmalloc>
f0111ed9:	83 c4 10             	add    $0x10,%esp
f0111edc:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f0111ee2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0111ee8:	89 c1                	mov    %eax,%ecx
f0111eea:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0111ef1:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111ef6:	0f b6 d0             	movzbl %al,%edx
f0111ef9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111efc:	01 d0                	add    %edx,%eax
f0111efe:	48                   	dec    %eax
f0111eff:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0111f02:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111f05:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f0a:	f7 75 cc             	divl   -0x34(%ebp)
f0111f0d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111f10:	29 d0                	sub    %edx,%eax
f0111f12:	89 c3                	mov    %eax,%ebx
f0111f14:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0111f1b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111f20:	0f b6 c0             	movzbl %al,%eax
f0111f23:	c1 e0 04             	shl    $0x4,%eax
f0111f26:	89 c2                	mov    %eax,%edx
f0111f28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111f2b:	01 d0                	add    %edx,%eax
f0111f2d:	48                   	dec    %eax
f0111f2e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0111f31:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111f34:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f39:	f7 75 c4             	divl   -0x3c(%ebp)
f0111f3c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111f3f:	29 d0                	sub    %edx,%eax
f0111f41:	01 d8                	add    %ebx,%eax
f0111f43:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0111f48:	39 c1                	cmp    %eax,%ecx
f0111f4a:	74 17                	je     f0111f63 <test_kmalloc_bestfit2+0x27d>
f0111f4c:	83 ec 04             	sub    $0x4,%esp
f0111f4f:	68 f4 01 12 f0       	push   $0xf01201f4
f0111f54:	68 4b 02 00 00       	push   $0x24b
f0111f59:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111f5e:	e8 30 e2 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111f63:	e8 32 c1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111f68:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0111f6b:	74 17                	je     f0111f84 <test_kmalloc_bestfit2+0x29e>
f0111f6d:	83 ec 04             	sub    $0x4,%esp
f0111f70:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0111f75:	68 4c 02 00 00       	push   $0x24c
f0111f7a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111f7f:	e8 0f e2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f0111f84:	e8 6e a4 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111f89:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0111f8c:	29 c2                	sub    %eax,%edx
f0111f8e:	89 d0                	mov    %edx,%eax
f0111f90:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111f95:	74 17                	je     f0111fae <test_kmalloc_bestfit2+0x2c8>
f0111f97:	83 ec 04             	sub    $0x4,%esp
f0111f9a:	68 24 02 12 f0       	push   $0xf0120224
f0111f9f:	68 4d 02 00 00       	push   $0x24d
f0111fa4:	68 e2 fd 11 f0       	push   $0xf011fde2
f0111fa9:	e8 e5 e1 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0111fae:	e8 44 a4 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0111fb3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0111fb6:	e8 df c0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0111fbb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0111fbe:	83 ec 0c             	sub    $0xc,%esp
f0111fc1:	68 00 08 00 00       	push   $0x800
f0111fc6:	e8 5a ca ff ff       	call   f010ea25 <kmalloc>
f0111fcb:	83 c4 10             	add    $0x10,%esp
f0111fce:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0111fd4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0111fda:	89 c1                	mov    %eax,%ecx
f0111fdc:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0111fe3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0111fe8:	0f b6 d0             	movzbl %al,%edx
f0111feb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111fee:	01 d0                	add    %edx,%eax
f0111ff0:	48                   	dec    %eax
f0111ff1:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0111ff4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111ff7:	ba 00 00 00 00       	mov    $0x0,%edx
f0111ffc:	f7 75 bc             	divl   -0x44(%ebp)
f0111fff:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112002:	29 d0                	sub    %edx,%eax
f0112004:	89 c3                	mov    %eax,%ebx
f0112006:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011200d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112012:	0f b6 c0             	movzbl %al,%eax
f0112015:	c1 e0 04             	shl    $0x4,%eax
f0112018:	89 c2                	mov    %eax,%edx
f011201a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011201d:	01 d0                	add    %edx,%eax
f011201f:	48                   	dec    %eax
f0112020:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0112023:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112026:	ba 00 00 00 00       	mov    $0x0,%edx
f011202b:	f7 75 b4             	divl   -0x4c(%ebp)
f011202e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112031:	29 d0                	sub    %edx,%eax
f0112033:	01 d8                	add    %ebx,%eax
f0112035:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011203a:	39 c1                	cmp    %eax,%ecx
f011203c:	74 17                	je     f0112055 <test_kmalloc_bestfit2+0x36f>
f011203e:	83 ec 04             	sub    $0x4,%esp
f0112041:	68 f4 01 12 f0       	push   $0xf01201f4
f0112046:	68 53 02 00 00       	push   $0x253
f011204b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112050:	e8 3e e1 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112055:	e8 40 c0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011205a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011205d:	74 17                	je     f0112076 <test_kmalloc_bestfit2+0x390>
f011205f:	83 ec 04             	sub    $0x4,%esp
f0112062:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112067:	68 54 02 00 00       	push   $0x254
f011206c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112071:	e8 1d e1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f0112076:	e8 7c a3 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011207b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011207e:	29 c2                	sub    %eax,%edx
f0112080:	89 d0                	mov    %edx,%eax
f0112082:	83 f8 01             	cmp    $0x1,%eax
f0112085:	74 17                	je     f011209e <test_kmalloc_bestfit2+0x3b8>
f0112087:	83 ec 04             	sub    $0x4,%esp
f011208a:	68 24 02 12 f0       	push   $0xf0120224
f011208f:	68 55 02 00 00       	push   $0x255
f0112094:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112099:	e8 f5 e0 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011209e:	e8 54 a3 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01120a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01120a6:	e8 ef bf ff ff       	call   f010e09a <pf_calculate_free_frames>
f01120ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01120ae:	83 ec 0c             	sub    $0xc,%esp
f01120b1:	68 00 08 00 00       	push   $0x800
f01120b6:	e8 6a c9 ff ff       	call   f010ea25 <kmalloc>
f01120bb:	83 c4 10             	add    $0x10,%esp
f01120be:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f01120c4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01120ca:	89 c1                	mov    %eax,%ecx
f01120cc:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01120d3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01120d8:	0f b6 d0             	movzbl %al,%edx
f01120db:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01120de:	01 d0                	add    %edx,%eax
f01120e0:	48                   	dec    %eax
f01120e1:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01120e4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01120e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01120ec:	f7 75 ac             	divl   -0x54(%ebp)
f01120ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01120f2:	29 d0                	sub    %edx,%eax
f01120f4:	89 c3                	mov    %eax,%ebx
f01120f6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01120fd:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112102:	0f b6 c0             	movzbl %al,%eax
f0112105:	c1 e0 04             	shl    $0x4,%eax
f0112108:	89 c2                	mov    %eax,%edx
f011210a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011210d:	01 d0                	add    %edx,%eax
f011210f:	48                   	dec    %eax
f0112110:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0112113:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112116:	ba 00 00 00 00       	mov    $0x0,%edx
f011211b:	f7 75 a4             	divl   -0x5c(%ebp)
f011211e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112121:	29 d0                	sub    %edx,%eax
f0112123:	01 d8                	add    %ebx,%eax
f0112125:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011212a:	39 c1                	cmp    %eax,%ecx
f011212c:	74 17                	je     f0112145 <test_kmalloc_bestfit2+0x45f>
f011212e:	83 ec 04             	sub    $0x4,%esp
f0112131:	68 f4 01 12 f0       	push   $0xf01201f4
f0112136:	68 5b 02 00 00       	push   $0x25b
f011213b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112140:	e8 4e e0 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112145:	e8 50 bf ff ff       	call   f010e09a <pf_calculate_free_frames>
f011214a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011214d:	74 17                	je     f0112166 <test_kmalloc_bestfit2+0x480>
f011214f:	83 ec 04             	sub    $0x4,%esp
f0112152:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112157:	68 5c 02 00 00       	push   $0x25c
f011215c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112161:	e8 2d e0 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f0112166:	e8 8c a2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011216b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011216e:	29 c2                	sub    %eax,%edx
f0112170:	89 d0                	mov    %edx,%eax
f0112172:	83 f8 01             	cmp    $0x1,%eax
f0112175:	74 17                	je     f011218e <test_kmalloc_bestfit2+0x4a8>
f0112177:	83 ec 04             	sub    $0x4,%esp
f011217a:	68 24 02 12 f0       	push   $0xf0120224
f011217f:	68 5d 02 00 00       	push   $0x25d
f0112184:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112189:	e8 05 e0 fe ff       	call   f0100193 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011218e:	e8 64 a2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112193:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0112196:	e8 ff be ff ff       	call   f010e09a <pf_calculate_free_frames>
f011219b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f011219e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01121a4:	83 ec 0c             	sub    $0xc,%esp
f01121a7:	50                   	push   %eax
f01121a8:	e8 92 c8 ff ff       	call   f010ea3f <kfree>
f01121ad:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01121b0:	e8 e5 be ff ff       	call   f010e09a <pf_calculate_free_frames>
f01121b5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01121b8:	74 17                	je     f01121d1 <test_kmalloc_bestfit2+0x4eb>
f01121ba:	83 ec 04             	sub    $0x4,%esp
f01121bd:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01121c2:	68 63 02 00 00       	push   $0x263
f01121c7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01121cc:	e8 c2 df fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f01121d1:	e8 21 a2 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01121d6:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01121d9:	83 f8 01             	cmp    $0x1,%eax
f01121dc:	74 17                	je     f01121f5 <test_kmalloc_bestfit2+0x50f>
f01121de:	83 ec 04             	sub    $0x4,%esp
f01121e1:	68 24 02 12 f0       	push   $0xf0120224
f01121e6:	68 64 02 00 00       	push   $0x264
f01121eb:	68 e2 fd 11 f0       	push   $0xf011fde2
f01121f0:	e8 9e df fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01121f5:	e8 fd a1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01121fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01121fd:	e8 98 be ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112202:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0112205:	83 ec 0c             	sub    $0xc,%esp
f0112208:	68 00 1c 00 00       	push   $0x1c00
f011220d:	e8 13 c8 ff ff       	call   f010ea25 <kmalloc>
f0112212:	83 c4 10             	add    $0x10,%esp
f0112215:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011221b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0112221:	89 c1                	mov    %eax,%ecx
f0112223:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011222a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011222f:	0f b6 d0             	movzbl %al,%edx
f0112232:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112235:	01 d0                	add    %edx,%eax
f0112237:	48                   	dec    %eax
f0112238:	89 45 98             	mov    %eax,-0x68(%ebp)
f011223b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011223e:	ba 00 00 00 00       	mov    $0x0,%edx
f0112243:	f7 75 9c             	divl   -0x64(%ebp)
f0112246:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112249:	29 d0                	sub    %edx,%eax
f011224b:	89 c3                	mov    %eax,%ebx
f011224d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0112254:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112259:	0f b6 c0             	movzbl %al,%eax
f011225c:	c1 e0 04             	shl    $0x4,%eax
f011225f:	89 c2                	mov    %eax,%edx
f0112261:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112264:	01 d0                	add    %edx,%eax
f0112266:	48                   	dec    %eax
f0112267:	89 45 90             	mov    %eax,-0x70(%ebp)
f011226a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011226d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112272:	f7 75 94             	divl   -0x6c(%ebp)
f0112275:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112278:	29 d0                	sub    %edx,%eax
f011227a:	01 d8                	add    %ebx,%eax
f011227c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0112281:	39 c1                	cmp    %eax,%ecx
f0112283:	74 17                	je     f011229c <test_kmalloc_bestfit2+0x5b6>
f0112285:	83 ec 04             	sub    $0x4,%esp
f0112288:	68 f4 01 12 f0       	push   $0xf01201f4
f011228d:	68 6a 02 00 00       	push   $0x26a
f0112292:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112297:	e8 f7 de fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011229c:	e8 f9 bd ff ff       	call   f010e09a <pf_calculate_free_frames>
f01122a1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01122a4:	74 17                	je     f01122bd <test_kmalloc_bestfit2+0x5d7>
f01122a6:	83 ec 04             	sub    $0x4,%esp
f01122a9:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01122ae:	68 6b 02 00 00       	push   $0x26b
f01122b3:	68 e2 fd 11 f0       	push   $0xf011fde2
f01122b8:	e8 d6 de fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f01122bd:	e8 35 a1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01122c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01122c5:	29 c2                	sub    %eax,%edx
f01122c7:	89 d0                	mov    %edx,%eax
f01122c9:	83 f8 02             	cmp    $0x2,%eax
f01122cc:	74 17                	je     f01122e5 <test_kmalloc_bestfit2+0x5ff>
f01122ce:	83 ec 04             	sub    $0x4,%esp
f01122d1:	68 24 02 12 f0       	push   $0xf0120224
f01122d6:	68 6c 02 00 00       	push   $0x26c
f01122db:	68 e2 fd 11 f0       	push   $0xf011fde2
f01122e0:	e8 ae de fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01122e5:	e8 0d a1 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01122ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01122ed:	e8 a8 bd ff ff       	call   f010e09a <pf_calculate_free_frames>
f01122f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f01122f5:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01122fb:	83 ec 0c             	sub    $0xc,%esp
f01122fe:	50                   	push   %eax
f01122ff:	e8 3b c7 ff ff       	call   f010ea3f <kfree>
f0112304:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112307:	e8 8e bd ff ff       	call   f010e09a <pf_calculate_free_frames>
f011230c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011230f:	74 17                	je     f0112328 <test_kmalloc_bestfit2+0x642>
f0112311:	83 ec 04             	sub    $0x4,%esp
f0112314:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112319:	68 72 02 00 00       	push   $0x272
f011231e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112323:	e8 6b de fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f0112328:	e8 ca a0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011232d:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112330:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112335:	74 17                	je     f011234e <test_kmalloc_bestfit2+0x668>
f0112337:	83 ec 04             	sub    $0x4,%esp
f011233a:	68 a8 00 12 f0       	push   $0xf01200a8
f011233f:	68 73 02 00 00       	push   $0x273
f0112344:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112349:	e8 45 de fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011234e:	e8 a4 a0 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112353:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0112356:	e8 3f bd ff ff       	call   f010e09a <pf_calculate_free_frames>
f011235b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011235e:	83 ec 0c             	sub    $0xc,%esp
f0112361:	68 00 fc 2f 00       	push   $0x2ffc00
f0112366:	e8 ba c6 ff ff       	call   f010ea25 <kmalloc>
f011236b:	83 c4 10             	add    $0x10,%esp
f011236e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0112374:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011237a:	89 c1                	mov    %eax,%ecx
f011237c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0112383:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112388:	0f b6 d0             	movzbl %al,%edx
f011238b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011238e:	01 d0                	add    %edx,%eax
f0112390:	48                   	dec    %eax
f0112391:	89 45 88             	mov    %eax,-0x78(%ebp)
f0112394:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112397:	ba 00 00 00 00       	mov    $0x0,%edx
f011239c:	f7 75 8c             	divl   -0x74(%ebp)
f011239f:	8b 45 88             	mov    -0x78(%ebp),%eax
f01123a2:	29 d0                	sub    %edx,%eax
f01123a4:	89 c3                	mov    %eax,%ebx
f01123a6:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01123ad:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01123b2:	0f b6 c0             	movzbl %al,%eax
f01123b5:	c1 e0 04             	shl    $0x4,%eax
f01123b8:	89 c2                	mov    %eax,%edx
f01123ba:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01123bd:	01 d0                	add    %edx,%eax
f01123bf:	48                   	dec    %eax
f01123c0:	89 45 80             	mov    %eax,-0x80(%ebp)
f01123c3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01123c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01123cb:	f7 75 84             	divl   -0x7c(%ebp)
f01123ce:	8b 45 80             	mov    -0x80(%ebp),%eax
f01123d1:	29 d0                	sub    %edx,%eax
f01123d3:	01 d8                	add    %ebx,%eax
f01123d5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01123da:	39 c1                	cmp    %eax,%ecx
f01123dc:	74 17                	je     f01123f5 <test_kmalloc_bestfit2+0x70f>
f01123de:	83 ec 04             	sub    $0x4,%esp
f01123e1:	68 f4 01 12 f0       	push   $0xf01201f4
f01123e6:	68 79 02 00 00       	push   $0x279
f01123eb:	68 e2 fd 11 f0       	push   $0xf011fde2
f01123f0:	e8 9e dd fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01123f5:	e8 a0 bc ff ff       	call   f010e09a <pf_calculate_free_frames>
f01123fa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01123fd:	74 17                	je     f0112416 <test_kmalloc_bestfit2+0x730>
f01123ff:	83 ec 04             	sub    $0x4,%esp
f0112402:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112407:	68 7a 02 00 00       	push   $0x27a
f011240c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112411:	e8 7d dd fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f0112416:	e8 dc 9f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011241b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011241e:	29 c2                	sub    %eax,%edx
f0112420:	89 d0                	mov    %edx,%eax
f0112422:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112427:	74 17                	je     f0112440 <test_kmalloc_bestfit2+0x75a>
f0112429:	83 ec 04             	sub    $0x4,%esp
f011242c:	68 24 02 12 f0       	push   $0xf0120224
f0112431:	68 7b 02 00 00       	push   $0x27b
f0112436:	68 e2 fd 11 f0       	push   $0xf011fde2
f011243b:	e8 53 dd fe ff       	call   f0100193 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f0112440:	e8 b2 9f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112445:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0112448:	e8 4d bc ff ff       	call   f010e09a <pf_calculate_free_frames>
f011244d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f0112450:	83 ec 0c             	sub    $0xc,%esp
f0112453:	68 00 18 20 00       	push   $0x201800
f0112458:	e8 c8 c5 ff ff       	call   f010ea25 <kmalloc>
f011245d:	83 c4 10             	add    $0x10,%esp
f0112460:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0112466:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011246c:	89 c1                	mov    %eax,%ecx
f011246e:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0112475:	10 00 00 
f0112478:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011247d:	0f b6 d0             	movzbl %al,%edx
f0112480:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112486:	01 d0                	add    %edx,%eax
f0112488:	48                   	dec    %eax
f0112489:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011248f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112495:	ba 00 00 00 00       	mov    $0x0,%edx
f011249a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01124a0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01124a6:	29 d0                	sub    %edx,%eax
f01124a8:	89 c3                	mov    %eax,%ebx
f01124aa:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01124b1:	10 00 00 
f01124b4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01124b9:	0f b6 c0             	movzbl %al,%eax
f01124bc:	c1 e0 04             	shl    $0x4,%eax
f01124bf:	89 c2                	mov    %eax,%edx
f01124c1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01124c7:	01 d0                	add    %edx,%eax
f01124c9:	48                   	dec    %eax
f01124ca:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01124d0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01124d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01124db:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01124e1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01124e7:	29 d0                	sub    %edx,%eax
f01124e9:	01 d8                	add    %ebx,%eax
f01124eb:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01124f0:	39 c1                	cmp    %eax,%ecx
f01124f2:	74 17                	je     f011250b <test_kmalloc_bestfit2+0x825>
f01124f4:	83 ec 04             	sub    $0x4,%esp
f01124f7:	68 f4 01 12 f0       	push   $0xf01201f4
f01124fc:	68 81 02 00 00       	push   $0x281
f0112501:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112506:	e8 88 dc fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011250b:	e8 8a bb ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112510:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112513:	74 17                	je     f011252c <test_kmalloc_bestfit2+0x846>
f0112515:	83 ec 04             	sub    $0x4,%esp
f0112518:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011251d:	68 82 02 00 00       	push   $0x282
f0112522:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112527:	e8 67 dc fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011252c:	e8 c6 9e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112531:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112534:	29 c2                	sub    %eax,%edx
f0112536:	89 d0                	mov    %edx,%eax
f0112538:	3d 02 02 00 00       	cmp    $0x202,%eax
f011253d:	74 17                	je     f0112556 <test_kmalloc_bestfit2+0x870>
f011253f:	83 ec 04             	sub    $0x4,%esp
f0112542:	68 24 02 12 f0       	push   $0xf0120224
f0112547:	68 83 02 00 00       	push   $0x283
f011254c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112551:	e8 3d dc fe ff       	call   f0100193 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f0112556:	e8 9c 9e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011255b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011255e:	e8 37 bb ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112563:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f0112566:	83 ec 0c             	sub    $0xc,%esp
f0112569:	68 00 fc 4f 00       	push   $0x4ffc00
f011256e:	e8 b2 c4 ff ff       	call   f010ea25 <kmalloc>
f0112573:	83 c4 10             	add    $0x10,%esp
f0112576:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011257c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0112582:	89 c1                	mov    %eax,%ecx
f0112584:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011258b:	10 00 00 
f011258e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112593:	0f b6 d0             	movzbl %al,%edx
f0112596:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011259c:	01 d0                	add    %edx,%eax
f011259e:	48                   	dec    %eax
f011259f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01125a5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01125ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01125b0:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01125b6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01125bc:	29 d0                	sub    %edx,%eax
f01125be:	89 c3                	mov    %eax,%ebx
f01125c0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01125c7:	10 00 00 
f01125ca:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01125cf:	0f b6 c0             	movzbl %al,%eax
f01125d2:	c1 e0 04             	shl    $0x4,%eax
f01125d5:	89 c2                	mov    %eax,%edx
f01125d7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01125dd:	01 d0                	add    %edx,%eax
f01125df:	48                   	dec    %eax
f01125e0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01125e6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01125ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01125f1:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01125f7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01125fd:	29 d0                	sub    %edx,%eax
f01125ff:	01 d8                	add    %ebx,%eax
f0112601:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0112606:	39 c1                	cmp    %eax,%ecx
f0112608:	74 17                	je     f0112621 <test_kmalloc_bestfit2+0x93b>
f011260a:	83 ec 04             	sub    $0x4,%esp
f011260d:	68 f4 01 12 f0       	push   $0xf01201f4
f0112612:	68 89 02 00 00       	push   $0x289
f0112617:	68 e2 fd 11 f0       	push   $0xf011fde2
f011261c:	e8 72 db fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112621:	e8 74 ba ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112626:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112629:	74 17                	je     f0112642 <test_kmalloc_bestfit2+0x95c>
f011262b:	83 ec 04             	sub    $0x4,%esp
f011262e:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112633:	68 8a 02 00 00       	push   $0x28a
f0112638:	68 e2 fd 11 f0       	push   $0xf011fde2
f011263d:	e8 51 db fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0112642:	e8 b0 9d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112647:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011264a:	29 c2                	sub    %eax,%edx
f011264c:	89 d0                	mov    %edx,%eax
f011264e:	3d 00 05 00 00       	cmp    $0x500,%eax
f0112653:	74 17                	je     f011266c <test_kmalloc_bestfit2+0x986>
f0112655:	83 ec 04             	sub    $0x4,%esp
f0112658:	68 24 02 12 f0       	push   $0xf0120224
f011265d:	68 8b 02 00 00       	push   $0x28b
f0112662:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112667:	e8 27 db fe ff       	call   f0100193 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011266c:	e8 86 9d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112671:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0112674:	e8 21 ba ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112679:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f011267c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0112682:	83 ec 0c             	sub    $0xc,%esp
f0112685:	50                   	push   %eax
f0112686:	e8 b4 c3 ff ff       	call   f010ea3f <kfree>
f011268b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011268e:	e8 07 ba ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112693:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112696:	74 17                	je     f01126af <test_kmalloc_bestfit2+0x9c9>
f0112698:	83 ec 04             	sub    $0x4,%esp
f011269b:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01126a0:	68 91 02 00 00       	push   $0x291
f01126a5:	68 e2 fd 11 f0       	push   $0xf011fde2
f01126aa:	e8 e4 da fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f01126af:	e8 43 9d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01126b4:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01126b7:	3d 02 02 00 00       	cmp    $0x202,%eax
f01126bc:	74 17                	je     f01126d5 <test_kmalloc_bestfit2+0x9ef>
f01126be:	83 ec 04             	sub    $0x4,%esp
f01126c1:	68 a8 00 12 f0       	push   $0xf01200a8
f01126c6:	68 92 02 00 00       	push   $0x292
f01126cb:	68 e2 fd 11 f0       	push   $0xf011fde2
f01126d0:	e8 be da fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01126d5:	e8 1d 9d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01126da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01126dd:	e8 b8 b9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01126e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f01126e5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01126eb:	83 ec 0c             	sub    $0xc,%esp
f01126ee:	50                   	push   %eax
f01126ef:	e8 4b c3 ff ff       	call   f010ea3f <kfree>
f01126f4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01126f7:	e8 9e b9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01126fc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01126ff:	74 17                	je     f0112718 <test_kmalloc_bestfit2+0xa32>
f0112701:	83 ec 04             	sub    $0x4,%esp
f0112704:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112709:	68 98 02 00 00       	push   $0x298
f011270e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112713:	e8 7b da fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f0112718:	e8 da 9c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011271d:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112720:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112725:	74 17                	je     f011273e <test_kmalloc_bestfit2+0xa58>
f0112727:	83 ec 04             	sub    $0x4,%esp
f011272a:	68 d4 02 12 f0       	push   $0xf01202d4
f011272f:	68 99 02 00 00       	push   $0x299
f0112734:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112739:	e8 55 da fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011273e:	e8 b4 9c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112743:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0112746:	e8 4f b9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011274b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011274e:	83 ec 0c             	sub    $0xc,%esp
f0112751:	68 00 fc 1f 00       	push   $0x1ffc00
f0112756:	e8 ca c2 ff ff       	call   f010ea25 <kmalloc>
f011275b:	83 c4 10             	add    $0x10,%esp
f011275e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0112764:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011276a:	89 c1                	mov    %eax,%ecx
f011276c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0112773:	10 00 00 
f0112776:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011277b:	0f b6 d0             	movzbl %al,%edx
f011277e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0112784:	01 d0                	add    %edx,%eax
f0112786:	48                   	dec    %eax
f0112787:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011278d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0112793:	ba 00 00 00 00       	mov    $0x0,%edx
f0112798:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011279e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01127a4:	29 d0                	sub    %edx,%eax
f01127a6:	89 c3                	mov    %eax,%ebx
f01127a8:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01127af:	10 00 00 
f01127b2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01127b7:	0f b6 c0             	movzbl %al,%eax
f01127ba:	c1 e0 04             	shl    $0x4,%eax
f01127bd:	89 c2                	mov    %eax,%edx
f01127bf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01127c5:	01 d0                	add    %edx,%eax
f01127c7:	48                   	dec    %eax
f01127c8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01127ce:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01127d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01127d9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01127df:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01127e5:	29 d0                	sub    %edx,%eax
f01127e7:	01 d8                	add    %ebx,%eax
f01127e9:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01127ee:	39 c1                	cmp    %eax,%ecx
f01127f0:	74 17                	je     f0112809 <test_kmalloc_bestfit2+0xb23>
f01127f2:	83 ec 04             	sub    $0x4,%esp
f01127f5:	68 f4 01 12 f0       	push   $0xf01201f4
f01127fa:	68 9f 02 00 00       	push   $0x29f
f01127ff:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112804:	e8 8a d9 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112809:	e8 8c b8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011280e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112811:	74 17                	je     f011282a <test_kmalloc_bestfit2+0xb44>
f0112813:	83 ec 04             	sub    $0x4,%esp
f0112816:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011281b:	68 a0 02 00 00       	push   $0x2a0
f0112820:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112825:	e8 69 d9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011282a:	e8 c8 9b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011282f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112832:	29 c2                	sub    %eax,%edx
f0112834:	89 d0                	mov    %edx,%eax
f0112836:	3d 00 02 00 00       	cmp    $0x200,%eax
f011283b:	74 17                	je     f0112854 <test_kmalloc_bestfit2+0xb6e>
f011283d:	83 ec 04             	sub    $0x4,%esp
f0112840:	68 12 03 12 f0       	push   $0xf0120312
f0112845:	68 a1 02 00 00       	push   $0x2a1
f011284a:	68 e2 fd 11 f0       	push   $0xf011fde2
f011284f:	e8 3f d9 fe ff       	call   f0100193 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f0112854:	e8 9e 9b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112859:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011285c:	e8 39 b8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112861:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f0112864:	83 ec 0c             	sub    $0xc,%esp
f0112867:	68 00 18 00 00       	push   $0x1800
f011286c:	e8 b4 c1 ff ff       	call   f010ea25 <kmalloc>
f0112871:	83 c4 10             	add    $0x10,%esp
f0112874:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011287a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0112880:	89 c1                	mov    %eax,%ecx
f0112882:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0112889:	10 00 00 
f011288c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112891:	0f b6 d0             	movzbl %al,%edx
f0112894:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011289a:	01 d0                	add    %edx,%eax
f011289c:	48                   	dec    %eax
f011289d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01128a3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01128a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01128ae:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01128b4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01128ba:	29 d0                	sub    %edx,%eax
f01128bc:	89 c3                	mov    %eax,%ebx
f01128be:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01128c5:	10 00 00 
f01128c8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01128cd:	0f b6 c0             	movzbl %al,%eax
f01128d0:	c1 e0 04             	shl    $0x4,%eax
f01128d3:	89 c2                	mov    %eax,%edx
f01128d5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01128db:	01 d0                	add    %edx,%eax
f01128dd:	48                   	dec    %eax
f01128de:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01128e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01128ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01128ef:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01128f5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01128fb:	29 d0                	sub    %edx,%eax
f01128fd:	01 d8                	add    %ebx,%eax
f01128ff:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0112904:	39 c1                	cmp    %eax,%ecx
f0112906:	74 17                	je     f011291f <test_kmalloc_bestfit2+0xc39>
f0112908:	83 ec 04             	sub    $0x4,%esp
f011290b:	68 f4 01 12 f0       	push   $0xf01201f4
f0112910:	68 a7 02 00 00       	push   $0x2a7
f0112915:	68 e2 fd 11 f0       	push   $0xf011fde2
f011291a:	e8 74 d8 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011291f:	e8 76 b7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112924:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112927:	74 17                	je     f0112940 <test_kmalloc_bestfit2+0xc5a>
f0112929:	83 ec 04             	sub    $0x4,%esp
f011292c:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112931:	68 a8 02 00 00       	push   $0x2a8
f0112936:	68 e2 fd 11 f0       	push   $0xf011fde2
f011293b:	e8 53 d8 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f0112940:	e8 b2 9a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112945:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112948:	29 c2                	sub    %eax,%edx
f011294a:	89 d0                	mov    %edx,%eax
f011294c:	83 f8 02             	cmp    $0x2,%eax
f011294f:	74 17                	je     f0112968 <test_kmalloc_bestfit2+0xc82>
f0112951:	83 ec 04             	sub    $0x4,%esp
f0112954:	68 12 03 12 f0       	push   $0xf0120312
f0112959:	68 a9 02 00 00       	push   $0x2a9
f011295e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112963:	e8 2b d8 fe ff       	call   f0100193 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0112968:	e8 8a 9a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011296d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0112970:	e8 25 b7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112975:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0112978:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011297e:	83 ec 0c             	sub    $0xc,%esp
f0112981:	50                   	push   %eax
f0112982:	e8 b8 c0 ff ff       	call   f010ea3f <kfree>
f0112987:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011298a:	e8 0b b7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011298f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112992:	74 17                	je     f01129ab <test_kmalloc_bestfit2+0xcc5>
f0112994:	83 ec 04             	sub    $0x4,%esp
f0112997:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011299c:	68 af 02 00 00       	push   $0x2af
f01129a1:	68 e2 fd 11 f0       	push   $0xf011fde2
f01129a6:	e8 e8 d7 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f01129ab:	e8 47 9a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01129b0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01129b3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01129b8:	74 17                	je     f01129d1 <test_kmalloc_bestfit2+0xceb>
f01129ba:	83 ec 04             	sub    $0x4,%esp
f01129bd:	68 d4 02 12 f0       	push   $0xf01202d4
f01129c2:	68 b0 02 00 00       	push   $0x2b0
f01129c7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01129cc:	e8 c2 d7 fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01129d1:	e8 21 9a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01129d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01129d9:	e8 bc b6 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01129de:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f01129e1:	83 ec 0c             	sub    $0xc,%esp
f01129e4:	68 00 fc 2f 00       	push   $0x2ffc00
f01129e9:	e8 37 c0 ff ff       	call   f010ea25 <kmalloc>
f01129ee:	83 c4 10             	add    $0x10,%esp
f01129f1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f01129f7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01129fd:	89 c1                	mov    %eax,%ecx
f01129ff:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0112a06:	10 00 00 
f0112a09:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112a0e:	0f b6 d0             	movzbl %al,%edx
f0112a11:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0112a17:	01 d0                	add    %edx,%eax
f0112a19:	48                   	dec    %eax
f0112a1a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0112a20:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112a26:	ba 00 00 00 00       	mov    $0x0,%edx
f0112a2b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0112a31:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112a37:	29 d0                	sub    %edx,%eax
f0112a39:	89 c3                	mov    %eax,%ebx
f0112a3b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0112a42:	10 00 00 
f0112a45:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112a4a:	0f b6 c0             	movzbl %al,%eax
f0112a4d:	c1 e0 04             	shl    $0x4,%eax
f0112a50:	89 c2                	mov    %eax,%edx
f0112a52:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0112a58:	01 d0                	add    %edx,%eax
f0112a5a:	48                   	dec    %eax
f0112a5b:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0112a61:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112a67:	ba 00 00 00 00       	mov    $0x0,%edx
f0112a6c:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0112a72:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112a78:	29 d0                	sub    %edx,%eax
f0112a7a:	01 d8                	add    %ebx,%eax
f0112a7c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0112a81:	39 c1                	cmp    %eax,%ecx
f0112a83:	74 17                	je     f0112a9c <test_kmalloc_bestfit2+0xdb6>
f0112a85:	83 ec 04             	sub    $0x4,%esp
f0112a88:	68 f4 01 12 f0       	push   $0xf01201f4
f0112a8d:	68 b6 02 00 00       	push   $0x2b6
f0112a92:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112a97:	e8 f7 d6 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112a9c:	e8 f9 b5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112aa1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112aa4:	74 17                	je     f0112abd <test_kmalloc_bestfit2+0xdd7>
f0112aa6:	83 ec 04             	sub    $0x4,%esp
f0112aa9:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112aae:	68 b7 02 00 00       	push   $0x2b7
f0112ab3:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112ab8:	e8 d6 d6 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f0112abd:	e8 35 99 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112ac2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112ac5:	29 c2                	sub    %eax,%edx
f0112ac7:	89 d0                	mov    %edx,%eax
f0112ac9:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112ace:	74 17                	je     f0112ae7 <test_kmalloc_bestfit2+0xe01>
f0112ad0:	83 ec 04             	sub    $0x4,%esp
f0112ad3:	68 d4 02 12 f0       	push   $0xf01202d4
f0112ad8:	68 b8 02 00 00       	push   $0x2b8
f0112add:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112ae2:	e8 ac d6 fe ff       	call   f0100193 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0112ae7:	e8 0b 99 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112aec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0112aef:	e8 a6 b5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112af4:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f0112af7:	83 ec 0c             	sub    $0xc,%esp
f0112afa:	68 00 fc 3f 00       	push   $0x3ffc00
f0112aff:	e8 21 bf ff ff       	call   f010ea25 <kmalloc>
f0112b04:	83 c4 10             	add    $0x10,%esp
f0112b07:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0112b0d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0112b13:	89 c1                	mov    %eax,%ecx
f0112b15:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0112b1c:	10 00 00 
f0112b1f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112b24:	0f b6 d0             	movzbl %al,%edx
f0112b27:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0112b2d:	01 d0                	add    %edx,%eax
f0112b2f:	48                   	dec    %eax
f0112b30:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0112b36:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0112b3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b41:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0112b47:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0112b4d:	29 d0                	sub    %edx,%eax
f0112b4f:	89 c3                	mov    %eax,%ebx
f0112b51:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0112b58:	10 00 00 
f0112b5b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112b60:	0f b6 c0             	movzbl %al,%eax
f0112b63:	c1 e0 04             	shl    $0x4,%eax
f0112b66:	89 c2                	mov    %eax,%edx
f0112b68:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0112b6e:	01 d0                	add    %edx,%eax
f0112b70:	48                   	dec    %eax
f0112b71:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0112b77:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0112b7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b82:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0112b88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0112b8e:	29 d0                	sub    %edx,%eax
f0112b90:	01 d8                	add    %ebx,%eax
f0112b92:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0112b97:	39 c1                	cmp    %eax,%ecx
f0112b99:	74 17                	je     f0112bb2 <test_kmalloc_bestfit2+0xecc>
f0112b9b:	83 ec 04             	sub    $0x4,%esp
f0112b9e:	68 f4 01 12 f0       	push   $0xf01201f4
f0112ba3:	68 be 02 00 00       	push   $0x2be
f0112ba8:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112bad:	e8 e1 d5 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112bb2:	e8 e3 b4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112bb7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112bba:	74 17                	je     f0112bd3 <test_kmalloc_bestfit2+0xeed>
f0112bbc:	83 ec 04             	sub    $0x4,%esp
f0112bbf:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112bc4:	68 bf 02 00 00       	push   $0x2bf
f0112bc9:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112bce:	e8 c0 d5 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f0112bd3:	e8 1f 98 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112bd8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112bdb:	29 c2                	sub    %eax,%edx
f0112bdd:	89 d0                	mov    %edx,%eax
f0112bdf:	3d 00 04 00 00       	cmp    $0x400,%eax
f0112be4:	74 17                	je     f0112bfd <test_kmalloc_bestfit2+0xf17>
f0112be6:	83 ec 04             	sub    $0x4,%esp
f0112be9:	68 d4 02 12 f0       	push   $0xf01202d4
f0112bee:	68 c0 02 00 00       	push   $0x2c0
f0112bf3:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112bf8:	e8 96 d5 fe ff       	call   f0100193 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f0112bfd:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0112c04:	10 00 00 
f0112c07:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112c0c:	0f b6 d0             	movzbl %al,%edx
f0112c0f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0112c15:	01 d0                	add    %edx,%eax
f0112c17:	48                   	dec    %eax
f0112c18:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0112c1e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0112c24:	ba 00 00 00 00       	mov    $0x0,%edx
f0112c29:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0112c2f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0112c35:	29 d0                	sub    %edx,%eax
f0112c37:	89 c1                	mov    %eax,%ecx
f0112c39:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0112c40:	10 00 00 
f0112c43:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112c48:	0f b6 c0             	movzbl %al,%eax
f0112c4b:	c1 e0 04             	shl    $0x4,%eax
f0112c4e:	89 c2                	mov    %eax,%edx
f0112c50:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0112c56:	01 d0                	add    %edx,%eax
f0112c58:	48                   	dec    %eax
f0112c59:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0112c5f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0112c65:	ba 00 00 00 00       	mov    $0x0,%edx
f0112c6a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0112c70:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0112c76:	29 d0                	sub    %edx,%eax
f0112c78:	01 c8                	add    %ecx,%eax
f0112c7a:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f0112c7f:	29 c2                	sub    %eax,%edx
f0112c81:	89 d0                	mov    %edx,%eax
f0112c83:	83 ec 0c             	sub    $0xc,%esp
f0112c86:	50                   	push   %eax
f0112c87:	e8 99 bd ff ff       	call   f010ea25 <kmalloc>
f0112c8c:	83 c4 10             	add    $0x10,%esp
f0112c8f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f0112c95:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0112c9b:	85 c0                	test   %eax,%eax
f0112c9d:	74 17                	je     f0112cb6 <test_kmalloc_bestfit2+0xfd0>
f0112c9f:	83 ec 04             	sub    $0x4,%esp
f0112ca2:	68 24 03 12 f0       	push   $0xf0120324
f0112ca7:	68 c8 02 00 00       	push   $0x2c8
f0112cac:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112cb1:	e8 dd d4 fe ff       	call   f0100193 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f0112cb6:	83 ec 0c             	sub    $0xc,%esp
f0112cb9:	68 88 03 12 f0       	push   $0xf0120388
f0112cbe:	e8 73 47 ff ff       	call   f0107436 <cprintf>
f0112cc3:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f0112cc6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0112ccb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0112cce:	5b                   	pop    %ebx
f0112ccf:	5f                   	pop    %edi
f0112cd0:	5d                   	pop    %ebp
f0112cd1:	c3                   	ret    

f0112cd2 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f0112cd2:	55                   	push   %ebp
f0112cd3:	89 e5                	mov    %esp,%ebp
f0112cd5:	57                   	push   %edi
f0112cd6:	53                   	push   %ebx
f0112cd7:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f0112cdd:	83 ec 0c             	sub    $0xc,%esp
f0112ce0:	68 24 fd 11 f0       	push   $0xf011fd24
f0112ce5:	e8 4c 47 ff ff       	call   f0107436 <cprintf>
f0112cea:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0112ced:	83 ec 0c             	sub    $0xc,%esp
f0112cf0:	68 54 fd 11 f0       	push   $0xf011fd54
f0112cf5:	e8 3c 47 ff ff       	call   f0107436 <cprintf>
f0112cfa:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0112cfd:	83 ec 0c             	sub    $0xc,%esp
f0112d00:	68 24 fd 11 f0       	push   $0xf011fd24
f0112d05:	e8 2c 47 ff ff       	call   f0107436 <cprintf>
f0112d0a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0112d0d:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0112d13:	b9 14 00 00 00       	mov    $0x14,%ecx
f0112d18:	b8 00 00 00 00       	mov    $0x0,%eax
f0112d1d:	89 d7                	mov    %edx,%edi
f0112d1f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112d21:	e8 d1 96 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112d26:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112d29:	e8 6c b3 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112d2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f0112d31:	83 ec 0c             	sub    $0xc,%esp
f0112d34:	68 00 fc 0f 00       	push   $0xffc00
f0112d39:	e8 e7 bc ff ff       	call   f010ea25 <kmalloc>
f0112d3e:	83 c4 10             	add    $0x10,%esp
f0112d41:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0112d47:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0112d4d:	89 c1                	mov    %eax,%ecx
f0112d4f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0112d56:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112d5b:	0f b6 d0             	movzbl %al,%edx
f0112d5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112d61:	01 d0                	add    %edx,%eax
f0112d63:	48                   	dec    %eax
f0112d64:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0112d67:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112d6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d6f:	f7 75 ec             	divl   -0x14(%ebp)
f0112d72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112d75:	29 d0                	sub    %edx,%eax
f0112d77:	89 c3                	mov    %eax,%ebx
f0112d79:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0112d80:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112d85:	0f b6 c0             	movzbl %al,%eax
f0112d88:	c1 e0 04             	shl    $0x4,%eax
f0112d8b:	89 c2                	mov    %eax,%edx
f0112d8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112d90:	01 d0                	add    %edx,%eax
f0112d92:	48                   	dec    %eax
f0112d93:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0112d96:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112d99:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d9e:	f7 75 e4             	divl   -0x1c(%ebp)
f0112da1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112da4:	29 d0                	sub    %edx,%eax
f0112da6:	01 d8                	add    %ebx,%eax
f0112da8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0112dad:	39 c1                	cmp    %eax,%ecx
f0112daf:	74 17                	je     f0112dc8 <test_kmalloc_firstfit1+0xf6>
f0112db1:	83 ec 04             	sub    $0x4,%esp
f0112db4:	68 f4 01 12 f0       	push   $0xf01201f4
f0112db9:	68 e0 02 00 00       	push   $0x2e0
f0112dbe:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112dc3:	e8 cb d3 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112dc8:	e8 cd b2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112dcd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112dd0:	74 17                	je     f0112de9 <test_kmalloc_firstfit1+0x117>
f0112dd2:	83 ec 04             	sub    $0x4,%esp
f0112dd5:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112dda:	68 e1 02 00 00       	push   $0x2e1
f0112ddf:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112de4:	e8 aa d3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0112de9:	e8 09 96 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112dee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112df1:	29 c2                	sub    %eax,%edx
f0112df3:	89 d0                	mov    %edx,%eax
f0112df5:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112dfa:	74 17                	je     f0112e13 <test_kmalloc_firstfit1+0x141>
f0112dfc:	83 ec 04             	sub    $0x4,%esp
f0112dff:	68 24 02 12 f0       	push   $0xf0120224
f0112e04:	68 e2 02 00 00       	push   $0x2e2
f0112e09:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112e0e:	e8 80 d3 fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112e13:	e8 df 95 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112e18:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112e1b:	e8 7a b2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112e20:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f0112e23:	83 ec 0c             	sub    $0xc,%esp
f0112e26:	68 00 fc 0f 00       	push   $0xffc00
f0112e2b:	e8 f5 bb ff ff       	call   f010ea25 <kmalloc>
f0112e30:	83 c4 10             	add    $0x10,%esp
f0112e33:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f0112e39:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0112e3f:	89 c1                	mov    %eax,%ecx
f0112e41:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0112e48:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112e4d:	0f b6 d0             	movzbl %al,%edx
f0112e50:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112e53:	01 d0                	add    %edx,%eax
f0112e55:	48                   	dec    %eax
f0112e56:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0112e59:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0112e61:	f7 75 dc             	divl   -0x24(%ebp)
f0112e64:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e67:	29 d0                	sub    %edx,%eax
f0112e69:	89 c3                	mov    %eax,%ebx
f0112e6b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0112e72:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112e77:	0f b6 c0             	movzbl %al,%eax
f0112e7a:	c1 e0 04             	shl    $0x4,%eax
f0112e7d:	89 c2                	mov    %eax,%edx
f0112e7f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112e82:	01 d0                	add    %edx,%eax
f0112e84:	48                   	dec    %eax
f0112e85:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112e88:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112e8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0112e90:	f7 75 d4             	divl   -0x2c(%ebp)
f0112e93:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112e96:	29 d0                	sub    %edx,%eax
f0112e98:	01 d8                	add    %ebx,%eax
f0112e9a:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0112e9f:	39 c1                	cmp    %eax,%ecx
f0112ea1:	74 17                	je     f0112eba <test_kmalloc_firstfit1+0x1e8>
f0112ea3:	83 ec 04             	sub    $0x4,%esp
f0112ea6:	68 f4 01 12 f0       	push   $0xf01201f4
f0112eab:	68 e8 02 00 00       	push   $0x2e8
f0112eb0:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112eb5:	e8 d9 d2 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112eba:	e8 db b1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112ebf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112ec2:	74 17                	je     f0112edb <test_kmalloc_firstfit1+0x209>
f0112ec4:	83 ec 04             	sub    $0x4,%esp
f0112ec7:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112ecc:	68 e9 02 00 00       	push   $0x2e9
f0112ed1:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112ed6:	e8 b8 d2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0112edb:	e8 17 95 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112ee0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112ee3:	29 c2                	sub    %eax,%edx
f0112ee5:	89 d0                	mov    %edx,%eax
f0112ee7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112eec:	74 17                	je     f0112f05 <test_kmalloc_firstfit1+0x233>
f0112eee:	83 ec 04             	sub    $0x4,%esp
f0112ef1:	68 24 02 12 f0       	push   $0xf0120224
f0112ef6:	68 ea 02 00 00       	push   $0x2ea
f0112efb:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112f00:	e8 8e d2 fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112f05:	e8 ed 94 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112f0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112f0d:	e8 88 b1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112f12:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f0112f15:	83 ec 0c             	sub    $0xc,%esp
f0112f18:	68 00 fc 0f 00       	push   $0xffc00
f0112f1d:	e8 03 bb ff ff       	call   f010ea25 <kmalloc>
f0112f22:	83 c4 10             	add    $0x10,%esp
f0112f25:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f0112f2b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0112f31:	89 c1                	mov    %eax,%ecx
f0112f33:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0112f3a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112f3f:	0f b6 d0             	movzbl %al,%edx
f0112f42:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112f45:	01 d0                	add    %edx,%eax
f0112f47:	48                   	dec    %eax
f0112f48:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0112f4b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112f4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f53:	f7 75 cc             	divl   -0x34(%ebp)
f0112f56:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112f59:	29 d0                	sub    %edx,%eax
f0112f5b:	89 c3                	mov    %eax,%ebx
f0112f5d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0112f64:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0112f69:	0f b6 c0             	movzbl %al,%eax
f0112f6c:	c1 e0 04             	shl    $0x4,%eax
f0112f6f:	89 c2                	mov    %eax,%edx
f0112f71:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112f74:	01 d0                	add    %edx,%eax
f0112f76:	48                   	dec    %eax
f0112f77:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0112f7a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112f7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f82:	f7 75 c4             	divl   -0x3c(%ebp)
f0112f85:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112f88:	29 d0                	sub    %edx,%eax
f0112f8a:	01 d8                	add    %ebx,%eax
f0112f8c:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0112f91:	39 c1                	cmp    %eax,%ecx
f0112f93:	74 17                	je     f0112fac <test_kmalloc_firstfit1+0x2da>
f0112f95:	83 ec 04             	sub    $0x4,%esp
f0112f98:	68 f4 01 12 f0       	push   $0xf01201f4
f0112f9d:	68 f0 02 00 00       	push   $0x2f0
f0112fa2:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112fa7:	e8 e7 d1 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112fac:	e8 e9 b0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0112fb1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112fb4:	74 17                	je     f0112fcd <test_kmalloc_firstfit1+0x2fb>
f0112fb6:	83 ec 04             	sub    $0x4,%esp
f0112fb9:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0112fbe:	68 f1 02 00 00       	push   $0x2f1
f0112fc3:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112fc8:	e8 c6 d1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0112fcd:	e8 25 94 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112fd2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112fd5:	29 c2                	sub    %eax,%edx
f0112fd7:	89 d0                	mov    %edx,%eax
f0112fd9:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112fde:	74 17                	je     f0112ff7 <test_kmalloc_firstfit1+0x325>
f0112fe0:	83 ec 04             	sub    $0x4,%esp
f0112fe3:	68 24 02 12 f0       	push   $0xf0120224
f0112fe8:	68 f2 02 00 00       	push   $0x2f2
f0112fed:	68 e2 fd 11 f0       	push   $0xf011fde2
f0112ff2:	e8 9c d1 fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0112ff7:	e8 fb 93 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0112ffc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112fff:	e8 96 b0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113004:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f0113007:	83 ec 0c             	sub    $0xc,%esp
f011300a:	68 00 fc 0f 00       	push   $0xffc00
f011300f:	e8 11 ba ff ff       	call   f010ea25 <kmalloc>
f0113014:	83 c4 10             	add    $0x10,%esp
f0113017:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011301d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0113023:	89 c1                	mov    %eax,%ecx
f0113025:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011302c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113031:	0f b6 d0             	movzbl %al,%edx
f0113034:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113037:	01 d0                	add    %edx,%eax
f0113039:	48                   	dec    %eax
f011303a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011303d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113040:	ba 00 00 00 00       	mov    $0x0,%edx
f0113045:	f7 75 bc             	divl   -0x44(%ebp)
f0113048:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011304b:	29 d0                	sub    %edx,%eax
f011304d:	89 c3                	mov    %eax,%ebx
f011304f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0113056:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011305b:	0f b6 c0             	movzbl %al,%eax
f011305e:	c1 e0 04             	shl    $0x4,%eax
f0113061:	89 c2                	mov    %eax,%edx
f0113063:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113066:	01 d0                	add    %edx,%eax
f0113068:	48                   	dec    %eax
f0113069:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011306c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011306f:	ba 00 00 00 00       	mov    $0x0,%edx
f0113074:	f7 75 b4             	divl   -0x4c(%ebp)
f0113077:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011307a:	29 d0                	sub    %edx,%eax
f011307c:	01 d8                	add    %ebx,%eax
f011307e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0113083:	39 c1                	cmp    %eax,%ecx
f0113085:	74 17                	je     f011309e <test_kmalloc_firstfit1+0x3cc>
f0113087:	83 ec 04             	sub    $0x4,%esp
f011308a:	68 f4 01 12 f0       	push   $0xf01201f4
f011308f:	68 f8 02 00 00       	push   $0x2f8
f0113094:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113099:	e8 f5 d0 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011309e:	e8 f7 af ff ff       	call   f010e09a <pf_calculate_free_frames>
f01130a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01130a6:	74 17                	je     f01130bf <test_kmalloc_firstfit1+0x3ed>
f01130a8:	83 ec 04             	sub    $0x4,%esp
f01130ab:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01130b0:	68 f9 02 00 00       	push   $0x2f9
f01130b5:	68 e2 fd 11 f0       	push   $0xf011fde2
f01130ba:	e8 d4 d0 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f01130bf:	e8 33 93 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01130c4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01130c7:	29 c2                	sub    %eax,%edx
f01130c9:	89 d0                	mov    %edx,%eax
f01130cb:	3d 00 01 00 00       	cmp    $0x100,%eax
f01130d0:	74 17                	je     f01130e9 <test_kmalloc_firstfit1+0x417>
f01130d2:	83 ec 04             	sub    $0x4,%esp
f01130d5:	68 24 02 12 f0       	push   $0xf0120224
f01130da:	68 fa 02 00 00       	push   $0x2fa
f01130df:	68 e2 fd 11 f0       	push   $0xf011fde2
f01130e4:	e8 aa d0 fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01130e9:	e8 09 93 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01130ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01130f1:	e8 a4 af ff ff       	call   f010e09a <pf_calculate_free_frames>
f01130f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f01130f9:	83 ec 0c             	sub    $0xc,%esp
f01130fc:	68 00 fc 1f 00       	push   $0x1ffc00
f0113101:	e8 1f b9 ff ff       	call   f010ea25 <kmalloc>
f0113106:	83 c4 10             	add    $0x10,%esp
f0113109:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011310f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0113115:	89 c1                	mov    %eax,%ecx
f0113117:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011311e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113123:	0f b6 d0             	movzbl %al,%edx
f0113126:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113129:	01 d0                	add    %edx,%eax
f011312b:	48                   	dec    %eax
f011312c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011312f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113132:	ba 00 00 00 00       	mov    $0x0,%edx
f0113137:	f7 75 ac             	divl   -0x54(%ebp)
f011313a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011313d:	29 d0                	sub    %edx,%eax
f011313f:	89 c3                	mov    %eax,%ebx
f0113141:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0113148:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011314d:	0f b6 c0             	movzbl %al,%eax
f0113150:	c1 e0 04             	shl    $0x4,%eax
f0113153:	89 c2                	mov    %eax,%edx
f0113155:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113158:	01 d0                	add    %edx,%eax
f011315a:	48                   	dec    %eax
f011315b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011315e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113161:	ba 00 00 00 00       	mov    $0x0,%edx
f0113166:	f7 75 a4             	divl   -0x5c(%ebp)
f0113169:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011316c:	29 d0                	sub    %edx,%eax
f011316e:	01 d8                	add    %ebx,%eax
f0113170:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0113175:	39 c1                	cmp    %eax,%ecx
f0113177:	74 17                	je     f0113190 <test_kmalloc_firstfit1+0x4be>
f0113179:	83 ec 04             	sub    $0x4,%esp
f011317c:	68 f4 01 12 f0       	push   $0xf01201f4
f0113181:	68 00 03 00 00       	push   $0x300
f0113186:	68 e2 fd 11 f0       	push   $0xf011fde2
f011318b:	e8 03 d0 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113190:	e8 05 af ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113195:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113198:	74 17                	je     f01131b1 <test_kmalloc_firstfit1+0x4df>
f011319a:	83 ec 04             	sub    $0x4,%esp
f011319d:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01131a2:	68 01 03 00 00       	push   $0x301
f01131a7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01131ac:	e8 e2 cf fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f01131b1:	e8 41 92 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01131b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01131b9:	29 c2                	sub    %eax,%edx
f01131bb:	89 d0                	mov    %edx,%eax
f01131bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01131c2:	74 17                	je     f01131db <test_kmalloc_firstfit1+0x509>
f01131c4:	83 ec 04             	sub    $0x4,%esp
f01131c7:	68 24 02 12 f0       	push   $0xf0120224
f01131cc:	68 02 03 00 00       	push   $0x302
f01131d1:	68 e2 fd 11 f0       	push   $0xf011fde2
f01131d6:	e8 b8 cf fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01131db:	e8 17 92 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01131e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01131e3:	e8 b2 ae ff ff       	call   f010e09a <pf_calculate_free_frames>
f01131e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f01131eb:	83 ec 0c             	sub    $0xc,%esp
f01131ee:	68 00 fc 1f 00       	push   $0x1ffc00
f01131f3:	e8 2d b8 ff ff       	call   f010ea25 <kmalloc>
f01131f8:	83 c4 10             	add    $0x10,%esp
f01131fb:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0113201:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0113207:	89 c1                	mov    %eax,%ecx
f0113209:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0113210:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113215:	0f b6 d0             	movzbl %al,%edx
f0113218:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011321b:	01 d0                	add    %edx,%eax
f011321d:	48                   	dec    %eax
f011321e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0113221:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113224:	ba 00 00 00 00       	mov    $0x0,%edx
f0113229:	f7 75 9c             	divl   -0x64(%ebp)
f011322c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011322f:	29 d0                	sub    %edx,%eax
f0113231:	89 c3                	mov    %eax,%ebx
f0113233:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011323a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011323f:	0f b6 c0             	movzbl %al,%eax
f0113242:	c1 e0 04             	shl    $0x4,%eax
f0113245:	89 c2                	mov    %eax,%edx
f0113247:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011324a:	01 d0                	add    %edx,%eax
f011324c:	48                   	dec    %eax
f011324d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113250:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113253:	ba 00 00 00 00       	mov    $0x0,%edx
f0113258:	f7 75 94             	divl   -0x6c(%ebp)
f011325b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011325e:	29 d0                	sub    %edx,%eax
f0113260:	01 d8                	add    %ebx,%eax
f0113262:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f0113267:	39 c1                	cmp    %eax,%ecx
f0113269:	74 17                	je     f0113282 <test_kmalloc_firstfit1+0x5b0>
f011326b:	83 ec 04             	sub    $0x4,%esp
f011326e:	68 f4 01 12 f0       	push   $0xf01201f4
f0113273:	68 08 03 00 00       	push   $0x308
f0113278:	68 e2 fd 11 f0       	push   $0xf011fde2
f011327d:	e8 11 cf fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113282:	e8 13 ae ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113287:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011328a:	74 17                	je     f01132a3 <test_kmalloc_firstfit1+0x5d1>
f011328c:	83 ec 04             	sub    $0x4,%esp
f011328f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113294:	68 09 03 00 00       	push   $0x309
f0113299:	68 e2 fd 11 f0       	push   $0xf011fde2
f011329e:	e8 f0 ce fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f01132a3:	e8 4f 91 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01132a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01132ab:	29 c2                	sub    %eax,%edx
f01132ad:	89 d0                	mov    %edx,%eax
f01132af:	3d 00 02 00 00       	cmp    $0x200,%eax
f01132b4:	74 17                	je     f01132cd <test_kmalloc_firstfit1+0x5fb>
f01132b6:	83 ec 04             	sub    $0x4,%esp
f01132b9:	68 24 02 12 f0       	push   $0xf0120224
f01132be:	68 0a 03 00 00       	push   $0x30a
f01132c3:	68 e2 fd 11 f0       	push   $0xf011fde2
f01132c8:	e8 c6 ce fe ff       	call   f0100193 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01132cd:	e8 25 91 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01132d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01132d5:	e8 c0 ad ff ff       	call   f010e09a <pf_calculate_free_frames>
f01132da:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f01132dd:	83 ec 0c             	sub    $0xc,%esp
f01132e0:	68 00 fc 2f 00       	push   $0x2ffc00
f01132e5:	e8 3b b7 ff ff       	call   f010ea25 <kmalloc>
f01132ea:	83 c4 10             	add    $0x10,%esp
f01132ed:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f01132f3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01132f9:	89 c1                	mov    %eax,%ecx
f01132fb:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0113302:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113307:	0f b6 d0             	movzbl %al,%edx
f011330a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011330d:	01 d0                	add    %edx,%eax
f011330f:	48                   	dec    %eax
f0113310:	89 45 88             	mov    %eax,-0x78(%ebp)
f0113313:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113316:	ba 00 00 00 00       	mov    $0x0,%edx
f011331b:	f7 75 8c             	divl   -0x74(%ebp)
f011331e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113321:	29 d0                	sub    %edx,%eax
f0113323:	89 c3                	mov    %eax,%ebx
f0113325:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011332c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113331:	0f b6 c0             	movzbl %al,%eax
f0113334:	c1 e0 04             	shl    $0x4,%eax
f0113337:	89 c2                	mov    %eax,%edx
f0113339:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011333c:	01 d0                	add    %edx,%eax
f011333e:	48                   	dec    %eax
f011333f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113342:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113345:	ba 00 00 00 00       	mov    $0x0,%edx
f011334a:	f7 75 84             	divl   -0x7c(%ebp)
f011334d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113350:	29 d0                	sub    %edx,%eax
f0113352:	01 d8                	add    %ebx,%eax
f0113354:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0113359:	39 c1                	cmp    %eax,%ecx
f011335b:	74 17                	je     f0113374 <test_kmalloc_firstfit1+0x6a2>
f011335d:	83 ec 04             	sub    $0x4,%esp
f0113360:	68 f4 01 12 f0       	push   $0xf01201f4
f0113365:	68 10 03 00 00       	push   $0x310
f011336a:	68 e2 fd 11 f0       	push   $0xf011fde2
f011336f:	e8 1f ce fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113374:	e8 21 ad ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113379:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011337c:	74 17                	je     f0113395 <test_kmalloc_firstfit1+0x6c3>
f011337e:	83 ec 04             	sub    $0x4,%esp
f0113381:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113386:	68 11 03 00 00       	push   $0x311
f011338b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113390:	e8 fe cd fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f0113395:	e8 5d 90 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011339a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011339d:	29 c2                	sub    %eax,%edx
f011339f:	89 d0                	mov    %edx,%eax
f01133a1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01133a6:	74 17                	je     f01133bf <test_kmalloc_firstfit1+0x6ed>
f01133a8:	83 ec 04             	sub    $0x4,%esp
f01133ab:	68 24 02 12 f0       	push   $0xf0120224
f01133b0:	68 12 03 00 00       	push   $0x312
f01133b5:	68 e2 fd 11 f0       	push   $0xf011fde2
f01133ba:	e8 d4 cd fe ff       	call   f0100193 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01133bf:	e8 33 90 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01133c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01133c7:	e8 ce ac ff ff       	call   f010e09a <pf_calculate_free_frames>
f01133cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f01133cf:	83 ec 0c             	sub    $0xc,%esp
f01133d2:	68 00 fc 2f 00       	push   $0x2ffc00
f01133d7:	e8 49 b6 ff ff       	call   f010ea25 <kmalloc>
f01133dc:	83 c4 10             	add    $0x10,%esp
f01133df:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f01133e5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01133eb:	89 c1                	mov    %eax,%ecx
f01133ed:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01133f4:	10 00 00 
f01133f7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01133fc:	0f b6 d0             	movzbl %al,%edx
f01133ff:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0113405:	01 d0                	add    %edx,%eax
f0113407:	48                   	dec    %eax
f0113408:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011340e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113414:	ba 00 00 00 00       	mov    $0x0,%edx
f0113419:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011341f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113425:	29 d0                	sub    %edx,%eax
f0113427:	89 c3                	mov    %eax,%ebx
f0113429:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0113430:	10 00 00 
f0113433:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113438:	0f b6 c0             	movzbl %al,%eax
f011343b:	c1 e0 04             	shl    $0x4,%eax
f011343e:	89 c2                	mov    %eax,%edx
f0113440:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0113446:	01 d0                	add    %edx,%eax
f0113448:	48                   	dec    %eax
f0113449:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011344f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113455:	ba 00 00 00 00       	mov    $0x0,%edx
f011345a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0113460:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113466:	29 d0                	sub    %edx,%eax
f0113468:	01 d8                	add    %ebx,%eax
f011346a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011346f:	39 c1                	cmp    %eax,%ecx
f0113471:	74 17                	je     f011348a <test_kmalloc_firstfit1+0x7b8>
f0113473:	83 ec 04             	sub    $0x4,%esp
f0113476:	68 f4 01 12 f0       	push   $0xf01201f4
f011347b:	68 18 03 00 00       	push   $0x318
f0113480:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113485:	e8 09 cd fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011348a:	e8 0b ac ff ff       	call   f010e09a <pf_calculate_free_frames>
f011348f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113492:	74 17                	je     f01134ab <test_kmalloc_firstfit1+0x7d9>
f0113494:	83 ec 04             	sub    $0x4,%esp
f0113497:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011349c:	68 19 03 00 00       	push   $0x319
f01134a1:	68 e2 fd 11 f0       	push   $0xf011fde2
f01134a6:	e8 e8 cc fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f01134ab:	e8 47 8f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01134b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01134b3:	29 c2                	sub    %eax,%edx
f01134b5:	89 d0                	mov    %edx,%eax
f01134b7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01134bc:	74 17                	je     f01134d5 <test_kmalloc_firstfit1+0x803>
f01134be:	83 ec 04             	sub    $0x4,%esp
f01134c1:	68 24 02 12 f0       	push   $0xf0120224
f01134c6:	68 1a 03 00 00       	push   $0x31a
f01134cb:	68 e2 fd 11 f0       	push   $0xf011fde2
f01134d0:	e8 be cc fe ff       	call   f0100193 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01134d5:	e8 1d 8f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01134da:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01134dd:	e8 b8 ab ff ff       	call   f010e09a <pf_calculate_free_frames>
f01134e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f01134e5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01134eb:	83 ec 0c             	sub    $0xc,%esp
f01134ee:	50                   	push   %eax
f01134ef:	e8 4b b5 ff ff       	call   f010ea3f <kfree>
f01134f4:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01134f7:	e8 9e ab ff ff       	call   f010e09a <pf_calculate_free_frames>
f01134fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01134ff:	74 17                	je     f0113518 <test_kmalloc_firstfit1+0x846>
f0113501:	83 ec 04             	sub    $0x4,%esp
f0113504:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113509:	68 23 03 00 00       	push   $0x323
f011350e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113513:	e8 7b cc fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0113518:	e8 da 8e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011351d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0113520:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113525:	74 17                	je     f011353e <test_kmalloc_firstfit1+0x86c>
f0113527:	83 ec 04             	sub    $0x4,%esp
f011352a:	68 37 02 12 f0       	push   $0xf0120237
f011352f:	68 24 03 00 00       	push   $0x324
f0113534:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113539:	e8 55 cc fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011353e:	e8 b4 8e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113543:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113546:	e8 4f ab ff ff       	call   f010e09a <pf_calculate_free_frames>
f011354b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011354e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0113554:	83 ec 0c             	sub    $0xc,%esp
f0113557:	50                   	push   %eax
f0113558:	e8 e2 b4 ff ff       	call   f010ea3f <kfree>
f011355d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113560:	e8 35 ab ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113565:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113568:	74 17                	je     f0113581 <test_kmalloc_firstfit1+0x8af>
f011356a:	83 ec 04             	sub    $0x4,%esp
f011356d:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113572:	68 2a 03 00 00       	push   $0x32a
f0113577:	68 e2 fd 11 f0       	push   $0xf011fde2
f011357c:	e8 12 cc fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0113581:	e8 71 8e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113586:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0113589:	3d 00 02 00 00       	cmp    $0x200,%eax
f011358e:	74 17                	je     f01135a7 <test_kmalloc_firstfit1+0x8d5>
f0113590:	83 ec 04             	sub    $0x4,%esp
f0113593:	68 37 02 12 f0       	push   $0xf0120237
f0113598:	68 2b 03 00 00       	push   $0x32b
f011359d:	68 e2 fd 11 f0       	push   $0xf011fde2
f01135a2:	e8 ec cb fe ff       	call   f0100193 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01135a7:	e8 4b 8e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01135ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01135af:	e8 e6 aa ff ff       	call   f010e09a <pf_calculate_free_frames>
f01135b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f01135b7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01135bd:	83 ec 0c             	sub    $0xc,%esp
f01135c0:	50                   	push   %eax
f01135c1:	e8 79 b4 ff ff       	call   f010ea3f <kfree>
f01135c6:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01135c9:	e8 cc aa ff ff       	call   f010e09a <pf_calculate_free_frames>
f01135ce:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01135d1:	74 17                	je     f01135ea <test_kmalloc_firstfit1+0x918>
f01135d3:	83 ec 04             	sub    $0x4,%esp
f01135d6:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01135db:	68 31 03 00 00       	push   $0x331
f01135e0:	68 e2 fd 11 f0       	push   $0xf011fde2
f01135e5:	e8 a9 cb fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f01135ea:	e8 08 8e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01135ef:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01135f2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01135f7:	74 17                	je     f0113610 <test_kmalloc_firstfit1+0x93e>
f01135f9:	83 ec 04             	sub    $0x4,%esp
f01135fc:	68 37 02 12 f0       	push   $0xf0120237
f0113601:	68 32 03 00 00       	push   $0x332
f0113606:	68 e2 fd 11 f0       	push   $0xf011fde2
f011360b:	e8 83 cb fe ff       	call   f0100193 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0113610:	e8 e2 8d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113615:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113618:	e8 7d aa ff ff       	call   f010e09a <pf_calculate_free_frames>
f011361d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f0113620:	83 ec 0c             	sub    $0xc,%esp
f0113623:	68 00 fc 07 00       	push   $0x7fc00
f0113628:	e8 f8 b3 ff ff       	call   f010ea25 <kmalloc>
f011362d:	83 c4 10             	add    $0x10,%esp
f0113630:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f0113636:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011363c:	89 c1                	mov    %eax,%ecx
f011363e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0113645:	10 00 00 
f0113648:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011364d:	0f b6 d0             	movzbl %al,%edx
f0113650:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0113656:	01 d0                	add    %edx,%eax
f0113658:	48                   	dec    %eax
f0113659:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011365f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113665:	ba 00 00 00 00       	mov    $0x0,%edx
f011366a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0113670:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113676:	29 d0                	sub    %edx,%eax
f0113678:	89 c3                	mov    %eax,%ebx
f011367a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0113681:	10 00 00 
f0113684:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113689:	0f b6 c0             	movzbl %al,%eax
f011368c:	c1 e0 04             	shl    $0x4,%eax
f011368f:	89 c2                	mov    %eax,%edx
f0113691:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113697:	01 d0                	add    %edx,%eax
f0113699:	48                   	dec    %eax
f011369a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01136a0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01136a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01136ab:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01136b1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01136b7:	29 d0                	sub    %edx,%eax
f01136b9:	01 d8                	add    %ebx,%eax
f01136bb:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f01136c0:	39 c1                	cmp    %eax,%ecx
f01136c2:	74 17                	je     f01136db <test_kmalloc_firstfit1+0xa09>
f01136c4:	83 ec 04             	sub    $0x4,%esp
f01136c7:	68 f4 01 12 f0       	push   $0xf01201f4
f01136cc:	68 3b 03 00 00       	push   $0x33b
f01136d1:	68 e2 fd 11 f0       	push   $0xf011fde2
f01136d6:	e8 b8 ca fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01136db:	e8 ba a9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01136e0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01136e3:	74 17                	je     f01136fc <test_kmalloc_firstfit1+0xa2a>
f01136e5:	83 ec 04             	sub    $0x4,%esp
f01136e8:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01136ed:	68 3c 03 00 00       	push   $0x33c
f01136f2:	68 e2 fd 11 f0       	push   $0xf011fde2
f01136f7:	e8 97 ca fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f01136fc:	e8 f6 8c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113701:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113704:	29 c2                	sub    %eax,%edx
f0113706:	89 d0                	mov    %edx,%eax
f0113708:	3d 80 00 00 00       	cmp    $0x80,%eax
f011370d:	74 17                	je     f0113726 <test_kmalloc_firstfit1+0xa54>
f011370f:	83 ec 04             	sub    $0x4,%esp
f0113712:	68 24 02 12 f0       	push   $0xf0120224
f0113717:	68 3d 03 00 00       	push   $0x33d
f011371c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113721:	e8 6d ca fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0113726:	e8 cc 8c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011372b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011372e:	e8 67 a9 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113733:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0113736:	83 ec 0c             	sub    $0xc,%esp
f0113739:	68 00 fc 0f 00       	push   $0xffc00
f011373e:	e8 e2 b2 ff ff       	call   f010ea25 <kmalloc>
f0113743:	83 c4 10             	add    $0x10,%esp
f0113746:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011374c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113752:	89 c1                	mov    %eax,%ecx
f0113754:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011375b:	10 00 00 
f011375e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113763:	0f b6 d0             	movzbl %al,%edx
f0113766:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011376c:	01 d0                	add    %edx,%eax
f011376e:	48                   	dec    %eax
f011376f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0113775:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011377b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113780:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0113786:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011378c:	29 d0                	sub    %edx,%eax
f011378e:	89 c3                	mov    %eax,%ebx
f0113790:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0113797:	10 00 00 
f011379a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011379f:	0f b6 c0             	movzbl %al,%eax
f01137a2:	c1 e0 04             	shl    $0x4,%eax
f01137a5:	89 c2                	mov    %eax,%edx
f01137a7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01137ad:	01 d0                	add    %edx,%eax
f01137af:	48                   	dec    %eax
f01137b0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01137b6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01137bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01137c1:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01137c7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01137cd:	29 d0                	sub    %edx,%eax
f01137cf:	01 d8                	add    %ebx,%eax
f01137d1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01137d6:	39 c1                	cmp    %eax,%ecx
f01137d8:	74 17                	je     f01137f1 <test_kmalloc_firstfit1+0xb1f>
f01137da:	83 ec 04             	sub    $0x4,%esp
f01137dd:	68 f4 01 12 f0       	push   $0xf01201f4
f01137e2:	68 43 03 00 00       	push   $0x343
f01137e7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01137ec:	e8 a2 c9 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01137f1:	e8 a4 a8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01137f6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01137f9:	74 17                	je     f0113812 <test_kmalloc_firstfit1+0xb40>
f01137fb:	83 ec 04             	sub    $0x4,%esp
f01137fe:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113803:	68 44 03 00 00       	push   $0x344
f0113808:	68 e2 fd 11 f0       	push   $0xf011fde2
f011380d:	e8 81 c9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0113812:	e8 e0 8b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113817:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011381a:	29 c2                	sub    %eax,%edx
f011381c:	89 d0                	mov    %edx,%eax
f011381e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113823:	74 17                	je     f011383c <test_kmalloc_firstfit1+0xb6a>
f0113825:	83 ec 04             	sub    $0x4,%esp
f0113828:	68 24 02 12 f0       	push   $0xf0120224
f011382d:	68 45 03 00 00       	push   $0x345
f0113832:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113837:	e8 57 c9 fe ff       	call   f0100193 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011383c:	e8 b6 8b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113841:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113844:	e8 51 a8 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113849:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011384c:	83 ec 0c             	sub    $0xc,%esp
f011384f:	68 00 fc 03 00       	push   $0x3fc00
f0113854:	e8 cc b1 ff ff       	call   f010ea25 <kmalloc>
f0113859:	83 c4 10             	add    $0x10,%esp
f011385c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f0113862:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0113868:	89 c1                	mov    %eax,%ecx
f011386a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0113871:	10 00 00 
f0113874:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113879:	0f b6 d0             	movzbl %al,%edx
f011387c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0113882:	01 d0                	add    %edx,%eax
f0113884:	48                   	dec    %eax
f0113885:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011388b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0113891:	ba 00 00 00 00       	mov    $0x0,%edx
f0113896:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011389c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01138a2:	29 d0                	sub    %edx,%eax
f01138a4:	89 c3                	mov    %eax,%ebx
f01138a6:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01138ad:	10 00 00 
f01138b0:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01138b5:	0f b6 c0             	movzbl %al,%eax
f01138b8:	c1 e0 04             	shl    $0x4,%eax
f01138bb:	89 c2                	mov    %eax,%edx
f01138bd:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01138c3:	01 d0                	add    %edx,%eax
f01138c5:	48                   	dec    %eax
f01138c6:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01138cc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01138d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01138d7:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01138dd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01138e3:	29 d0                	sub    %edx,%eax
f01138e5:	01 d8                	add    %ebx,%eax
f01138e7:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f01138ec:	39 c1                	cmp    %eax,%ecx
f01138ee:	74 17                	je     f0113907 <test_kmalloc_firstfit1+0xc35>
f01138f0:	83 ec 04             	sub    $0x4,%esp
f01138f3:	68 f4 01 12 f0       	push   $0xf01201f4
f01138f8:	68 4c 03 00 00       	push   $0x34c
f01138fd:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113902:	e8 8c c8 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113907:	e8 8e a7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011390c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011390f:	74 17                	je     f0113928 <test_kmalloc_firstfit1+0xc56>
f0113911:	83 ec 04             	sub    $0x4,%esp
f0113914:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113919:	68 4d 03 00 00       	push   $0x34d
f011391e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113923:	e8 6b c8 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f0113928:	e8 ca 8a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011392d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113930:	29 c2                	sub    %eax,%edx
f0113932:	89 d0                	mov    %edx,%eax
f0113934:	83 f8 40             	cmp    $0x40,%eax
f0113937:	74 17                	je     f0113950 <test_kmalloc_firstfit1+0xc7e>
f0113939:	83 ec 04             	sub    $0x4,%esp
f011393c:	68 24 02 12 f0       	push   $0xf0120224
f0113941:	68 4e 03 00 00       	push   $0x34e
f0113946:	68 e2 fd 11 f0       	push   $0xf011fde2
f011394b:	e8 43 c8 fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0113950:	e8 a2 8a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113955:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113958:	e8 3d a7 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011395d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f0113960:	83 ec 0c             	sub    $0xc,%esp
f0113963:	68 00 00 20 00       	push   $0x200000
f0113968:	e8 b8 b0 ff ff       	call   f010ea25 <kmalloc>
f011396d:	83 c4 10             	add    $0x10,%esp
f0113970:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0113976:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011397c:	89 c1                	mov    %eax,%ecx
f011397e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0113985:	10 00 00 
f0113988:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011398d:	0f b6 d0             	movzbl %al,%edx
f0113990:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113996:	01 d0                	add    %edx,%eax
f0113998:	48                   	dec    %eax
f0113999:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011399f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01139a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01139aa:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01139b0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01139b6:	29 d0                	sub    %edx,%eax
f01139b8:	89 c3                	mov    %eax,%ebx
f01139ba:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01139c1:	10 00 00 
f01139c4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01139c9:	0f b6 c0             	movzbl %al,%eax
f01139cc:	c1 e0 04             	shl    $0x4,%eax
f01139cf:	89 c2                	mov    %eax,%edx
f01139d1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01139d7:	01 d0                	add    %edx,%eax
f01139d9:	48                   	dec    %eax
f01139da:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01139e0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01139e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01139eb:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01139f1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01139f7:	29 d0                	sub    %edx,%eax
f01139f9:	01 d8                	add    %ebx,%eax
f01139fb:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0113a00:	39 c1                	cmp    %eax,%ecx
f0113a02:	74 17                	je     f0113a1b <test_kmalloc_firstfit1+0xd49>
f0113a04:	83 ec 04             	sub    $0x4,%esp
f0113a07:	68 f4 01 12 f0       	push   $0xf01201f4
f0113a0c:	68 54 03 00 00       	push   $0x354
f0113a11:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113a16:	e8 78 c7 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0113a1b:	e8 d7 89 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113a20:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113a23:	29 c2                	sub    %eax,%edx
f0113a25:	89 d0                	mov    %edx,%eax
f0113a27:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113a2c:	74 17                	je     f0113a45 <test_kmalloc_firstfit1+0xd73>
f0113a2e:	83 ec 04             	sub    $0x4,%esp
f0113a31:	68 24 02 12 f0       	push   $0xf0120224
f0113a36:	68 55 03 00 00       	push   $0x355
f0113a3b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113a40:	e8 4e c7 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113a45:	e8 50 a6 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113a4a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113a4d:	74 17                	je     f0113a66 <test_kmalloc_firstfit1+0xd94>
f0113a4f:	83 ec 04             	sub    $0x4,%esp
f0113a52:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113a57:	68 56 03 00 00       	push   $0x356
f0113a5c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113a61:	e8 2d c7 fe ff       	call   f0100193 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f0113a66:	e8 8c 89 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113a6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113a6e:	e8 27 a6 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113a73:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f0113a76:	83 ec 0c             	sub    $0xc,%esp
f0113a79:	68 00 fc 3f 00       	push   $0x3ffc00
f0113a7e:	e8 a2 af ff ff       	call   f010ea25 <kmalloc>
f0113a83:	83 c4 10             	add    $0x10,%esp
f0113a86:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f0113a8c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113a92:	89 c1                	mov    %eax,%ecx
f0113a94:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0113a9b:	10 00 00 
f0113a9e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113aa3:	0f b6 d0             	movzbl %al,%edx
f0113aa6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0113aac:	01 d0                	add    %edx,%eax
f0113aae:	48                   	dec    %eax
f0113aaf:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0113ab5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0113abb:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ac0:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0113ac6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0113acc:	29 d0                	sub    %edx,%eax
f0113ace:	89 c3                	mov    %eax,%ebx
f0113ad0:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0113ad7:	10 00 00 
f0113ada:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113adf:	0f b6 c0             	movzbl %al,%eax
f0113ae2:	c1 e0 04             	shl    $0x4,%eax
f0113ae5:	89 c2                	mov    %eax,%edx
f0113ae7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0113aed:	01 d0                	add    %edx,%eax
f0113aef:	48                   	dec    %eax
f0113af0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0113af6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113afc:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b01:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0113b07:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113b0d:	29 d0                	sub    %edx,%eax
f0113b0f:	01 d8                	add    %ebx,%eax
f0113b11:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f0113b16:	39 c1                	cmp    %eax,%ecx
f0113b18:	74 17                	je     f0113b31 <test_kmalloc_firstfit1+0xe5f>
f0113b1a:	83 ec 04             	sub    $0x4,%esp
f0113b1d:	68 f4 01 12 f0       	push   $0xf01201f4
f0113b22:	68 5d 03 00 00       	push   $0x35d
f0113b27:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113b2c:	e8 62 c6 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113b31:	e8 64 a5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113b36:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113b39:	74 17                	je     f0113b52 <test_kmalloc_firstfit1+0xe80>
f0113b3b:	83 ec 04             	sub    $0x4,%esp
f0113b3e:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113b43:	68 5e 03 00 00       	push   $0x35e
f0113b48:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113b4d:	e8 41 c6 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f0113b52:	e8 a0 88 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113b57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113b5a:	29 c2                	sub    %eax,%edx
f0113b5c:	89 d0                	mov    %edx,%eax
f0113b5e:	3d 00 04 00 00       	cmp    $0x400,%eax
f0113b63:	74 17                	je     f0113b7c <test_kmalloc_firstfit1+0xeaa>
f0113b65:	83 ec 04             	sub    $0x4,%esp
f0113b68:	68 24 02 12 f0       	push   $0xf0120224
f0113b6d:	68 5f 03 00 00       	push   $0x35f
f0113b72:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113b77:	e8 17 c6 fe ff       	call   f0100193 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f0113b7c:	e8 76 88 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113b81:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113b84:	e8 11 a5 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113b89:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f0113b8c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0113b92:	83 ec 0c             	sub    $0xc,%esp
f0113b95:	50                   	push   %eax
f0113b96:	e8 a4 ae ff ff       	call   f010ea3f <kfree>
f0113b9b:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113b9e:	e8 f7 a4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113ba3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113ba6:	74 17                	je     f0113bbf <test_kmalloc_firstfit1+0xeed>
f0113ba8:	83 ec 04             	sub    $0x4,%esp
f0113bab:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113bb0:	68 68 03 00 00       	push   $0x368
f0113bb5:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113bba:	e8 d4 c5 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0113bbf:	e8 33 88 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113bc4:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0113bc7:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113bcc:	74 17                	je     f0113be5 <test_kmalloc_firstfit1+0xf13>
f0113bce:	83 ec 04             	sub    $0x4,%esp
f0113bd1:	68 37 02 12 f0       	push   $0xf0120237
f0113bd6:	68 69 03 00 00       	push   $0x369
f0113bdb:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113be0:	e8 ae c5 fe ff       	call   f0100193 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f0113be5:	e8 0d 88 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113bea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113bed:	e8 a8 a4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113bf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0113bf5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0113bfb:	83 ec 0c             	sub    $0xc,%esp
f0113bfe:	50                   	push   %eax
f0113bff:	e8 3b ae ff ff       	call   f010ea3f <kfree>
f0113c04:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113c07:	e8 8e a4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113c0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113c0f:	74 17                	je     f0113c28 <test_kmalloc_firstfit1+0xf56>
f0113c11:	83 ec 04             	sub    $0x4,%esp
f0113c14:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113c19:	68 6f 03 00 00       	push   $0x36f
f0113c1e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113c23:	e8 6b c5 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0113c28:	e8 ca 87 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113c2d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0113c30:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113c35:	74 17                	je     f0113c4e <test_kmalloc_firstfit1+0xf7c>
f0113c37:	83 ec 04             	sub    $0x4,%esp
f0113c3a:	68 37 02 12 f0       	push   $0xf0120237
f0113c3f:	68 70 03 00 00       	push   $0x370
f0113c44:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113c49:	e8 45 c5 fe ff       	call   f0100193 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f0113c4e:	e8 a4 87 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113c53:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113c56:	e8 3f a4 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113c5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f0113c5e:	83 ec 0c             	sub    $0xc,%esp
f0113c61:	68 00 00 10 00       	push   $0x100000
f0113c66:	e8 ba ad ff ff       	call   f010ea25 <kmalloc>
f0113c6b:	83 c4 10             	add    $0x10,%esp
f0113c6e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f0113c74:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0113c7a:	89 c1                	mov    %eax,%ecx
f0113c7c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0113c83:	10 00 00 
f0113c86:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113c8b:	0f b6 d0             	movzbl %al,%edx
f0113c8e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113c94:	01 d0                	add    %edx,%eax
f0113c96:	48                   	dec    %eax
f0113c97:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0113c9d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0113ca3:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ca8:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0113cae:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0113cb4:	29 d0                	sub    %edx,%eax
f0113cb6:	89 c3                	mov    %eax,%ebx
f0113cb8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0113cbf:	10 00 00 
f0113cc2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113cc7:	0f b6 c0             	movzbl %al,%eax
f0113cca:	c1 e0 04             	shl    $0x4,%eax
f0113ccd:	89 c2                	mov    %eax,%edx
f0113ccf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0113cd5:	01 d0                	add    %edx,%eax
f0113cd7:	48                   	dec    %eax
f0113cd8:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0113cde:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0113ce4:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ce9:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0113cef:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0113cf5:	29 d0                	sub    %edx,%eax
f0113cf7:	01 d8                	add    %ebx,%eax
f0113cf9:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f0113cfe:	39 c1                	cmp    %eax,%ecx
f0113d00:	74 17                	je     f0113d19 <test_kmalloc_firstfit1+0x1047>
f0113d02:	83 ec 04             	sub    $0x4,%esp
f0113d05:	68 f4 01 12 f0       	push   $0xf01201f4
f0113d0a:	68 7a 03 00 00       	push   $0x37a
f0113d0f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113d14:	e8 7a c4 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113d19:	e8 7c a3 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113d1e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0113d21:	74 17                	je     f0113d3a <test_kmalloc_firstfit1+0x1068>
f0113d23:	83 ec 04             	sub    $0x4,%esp
f0113d26:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113d2b:	68 7b 03 00 00       	push   $0x37b
f0113d30:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113d35:	e8 59 c4 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0113d3a:	e8 b8 86 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113d3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113d42:	29 c2                	sub    %eax,%edx
f0113d44:	89 d0                	mov    %edx,%eax
f0113d46:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113d4b:	74 17                	je     f0113d64 <test_kmalloc_firstfit1+0x1092>
f0113d4d:	83 ec 04             	sub    $0x4,%esp
f0113d50:	68 24 02 12 f0       	push   $0xf0120224
f0113d55:	68 7c 03 00 00       	push   $0x37c
f0113d5a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113d5f:	e8 2f c4 fe ff       	call   f0100193 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f0113d64:	83 ec 0c             	sub    $0xc,%esp
f0113d67:	68 d0 03 12 f0       	push   $0xf01203d0
f0113d6c:	e8 c5 36 ff ff       	call   f0107436 <cprintf>
f0113d71:	83 c4 10             	add    $0x10,%esp

	return 1;
f0113d74:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0113d79:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0113d7c:	5b                   	pop    %ebx
f0113d7d:	5f                   	pop    %edi
f0113d7e:	5d                   	pop    %ebp
f0113d7f:	c3                   	ret    

f0113d80 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f0113d80:	55                   	push   %ebp
f0113d81:	89 e5                	mov    %esp,%ebp
f0113d83:	57                   	push   %edi
f0113d84:	53                   	push   %ebx
f0113d85:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f0113d8b:	83 ec 0c             	sub    $0xc,%esp
f0113d8e:	68 24 fd 11 f0       	push   $0xf011fd24
f0113d93:	e8 9e 36 ff ff       	call   f0107436 <cprintf>
f0113d98:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0113d9b:	83 ec 0c             	sub    $0xc,%esp
f0113d9e:	68 54 fd 11 f0       	push   $0xf011fd54
f0113da3:	e8 8e 36 ff ff       	call   f0107436 <cprintf>
f0113da8:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0113dab:	83 ec 0c             	sub    $0xc,%esp
f0113dae:	68 24 fd 11 f0       	push   $0xf011fd24
f0113db3:	e8 7e 36 ff ff       	call   f0107436 <cprintf>
f0113db8:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0113dbb:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f0113dc1:	b9 14 00 00 00       	mov    $0x14,%ecx
f0113dc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0113dcb:	89 d7                	mov    %edx,%edi
f0113dcd:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0113dcf:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0113dd6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113ddb:	0f b6 d0             	movzbl %al,%edx
f0113dde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113de1:	01 d0                	add    %edx,%eax
f0113de3:	48                   	dec    %eax
f0113de4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0113de7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113dea:	ba 00 00 00 00       	mov    $0x0,%edx
f0113def:	f7 75 f4             	divl   -0xc(%ebp)
f0113df2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113df5:	29 d0                	sub    %edx,%eax
f0113df7:	89 c1                	mov    %eax,%ecx
f0113df9:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0113e00:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113e05:	0f b6 c0             	movzbl %al,%eax
f0113e08:	c1 e0 04             	shl    $0x4,%eax
f0113e0b:	89 c2                	mov    %eax,%edx
f0113e0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0113e10:	01 d0                	add    %edx,%eax
f0113e12:	48                   	dec    %eax
f0113e13:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0113e16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0113e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e1e:	f7 75 ec             	divl   -0x14(%ebp)
f0113e21:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0113e24:	29 d0                	sub    %edx,%eax
f0113e26:	01 c8                	add    %ecx,%eax
f0113e28:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0113e2d:	29 c2                	sub    %eax,%edx
f0113e2f:	89 d0                	mov    %edx,%eax
f0113e31:	83 ec 0c             	sub    $0xc,%esp
f0113e34:	50                   	push   %eax
f0113e35:	e8 eb ab ff ff       	call   f010ea25 <kmalloc>
f0113e3a:	83 c4 10             	add    $0x10,%esp
f0113e3d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f0113e43:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113e49:	85 c0                	test   %eax,%eax
f0113e4b:	74 17                	je     f0113e64 <test_kmalloc_firstfit2+0xe4>
f0113e4d:	83 ec 04             	sub    $0x4,%esp
f0113e50:	68 1c 04 12 f0       	push   $0xf012041c
f0113e55:	68 91 03 00 00       	push   $0x391
f0113e5a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113e5f:	e8 2f c3 fe ff       	call   f0100193 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113e64:	e8 8e 85 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113e69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113e6c:	e8 29 a2 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113e71:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0113e74:	83 ec 0c             	sub    $0xc,%esp
f0113e77:	68 00 fc 1f 00       	push   $0x1ffc00
f0113e7c:	e8 a4 ab ff ff       	call   f010ea25 <kmalloc>
f0113e81:	83 c4 10             	add    $0x10,%esp
f0113e84:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0113e8a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113e90:	89 c1                	mov    %eax,%ecx
f0113e92:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0113e99:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113e9e:	0f b6 d0             	movzbl %al,%edx
f0113ea1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113ea4:	01 d0                	add    %edx,%eax
f0113ea6:	48                   	dec    %eax
f0113ea7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0113eaa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113ead:	ba 00 00 00 00       	mov    $0x0,%edx
f0113eb2:	f7 75 dc             	divl   -0x24(%ebp)
f0113eb5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113eb8:	29 d0                	sub    %edx,%eax
f0113eba:	89 c3                	mov    %eax,%ebx
f0113ebc:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0113ec3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113ec8:	0f b6 c0             	movzbl %al,%eax
f0113ecb:	c1 e0 04             	shl    $0x4,%eax
f0113ece:	89 c2                	mov    %eax,%edx
f0113ed0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113ed3:	01 d0                	add    %edx,%eax
f0113ed5:	48                   	dec    %eax
f0113ed6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113ed9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113edc:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ee1:	f7 75 d4             	divl   -0x2c(%ebp)
f0113ee4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ee7:	29 d0                	sub    %edx,%eax
f0113ee9:	01 d8                	add    %ebx,%eax
f0113eeb:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0113ef0:	39 c1                	cmp    %eax,%ecx
f0113ef2:	74 17                	je     f0113f0b <test_kmalloc_firstfit2+0x18b>
f0113ef4:	83 ec 04             	sub    $0x4,%esp
f0113ef7:	68 f4 01 12 f0       	push   $0xf01201f4
f0113efc:	68 9b 03 00 00       	push   $0x39b
f0113f01:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113f06:	e8 88 c2 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113f0b:	e8 8a a1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113f10:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0113f13:	74 17                	je     f0113f2c <test_kmalloc_firstfit2+0x1ac>
f0113f15:	83 ec 04             	sub    $0x4,%esp
f0113f18:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0113f1d:	68 9c 03 00 00       	push   $0x39c
f0113f22:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113f27:	e8 67 c2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0113f2c:	e8 c6 84 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113f31:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0113f34:	29 c2                	sub    %eax,%edx
f0113f36:	89 d0                	mov    %edx,%eax
f0113f38:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113f3d:	74 17                	je     f0113f56 <test_kmalloc_firstfit2+0x1d6>
f0113f3f:	83 ec 04             	sub    $0x4,%esp
f0113f42:	68 24 02 12 f0       	push   $0xf0120224
f0113f47:	68 9d 03 00 00       	push   $0x39d
f0113f4c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113f51:	e8 3d c2 fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0113f56:	e8 9c 84 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0113f5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0113f5e:	e8 37 a1 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0113f63:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0113f66:	83 ec 0c             	sub    $0xc,%esp
f0113f69:	68 00 fc 1f 00       	push   $0x1ffc00
f0113f6e:	e8 b2 aa ff ff       	call   f010ea25 <kmalloc>
f0113f73:	83 c4 10             	add    $0x10,%esp
f0113f76:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f0113f7c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0113f82:	89 c1                	mov    %eax,%ecx
f0113f84:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0113f8b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113f90:	0f b6 d0             	movzbl %al,%edx
f0113f93:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f96:	01 d0                	add    %edx,%eax
f0113f98:	48                   	dec    %eax
f0113f99:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0113f9c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113f9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0113fa4:	f7 75 cc             	divl   -0x34(%ebp)
f0113fa7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113faa:	29 d0                	sub    %edx,%eax
f0113fac:	89 c3                	mov    %eax,%ebx
f0113fae:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0113fb5:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0113fba:	0f b6 c0             	movzbl %al,%eax
f0113fbd:	c1 e0 04             	shl    $0x4,%eax
f0113fc0:	89 c2                	mov    %eax,%edx
f0113fc2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113fc5:	01 d0                	add    %edx,%eax
f0113fc7:	48                   	dec    %eax
f0113fc8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113fcb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113fce:	ba 00 00 00 00       	mov    $0x0,%edx
f0113fd3:	f7 75 c4             	divl   -0x3c(%ebp)
f0113fd6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113fd9:	29 d0                	sub    %edx,%eax
f0113fdb:	01 d8                	add    %ebx,%eax
f0113fdd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0113fe2:	39 c1                	cmp    %eax,%ecx
f0113fe4:	74 17                	je     f0113ffd <test_kmalloc_firstfit2+0x27d>
f0113fe6:	83 ec 04             	sub    $0x4,%esp
f0113fe9:	68 f4 01 12 f0       	push   $0xf01201f4
f0113fee:	68 a3 03 00 00       	push   $0x3a3
f0113ff3:	68 e2 fd 11 f0       	push   $0xf011fde2
f0113ff8:	e8 96 c1 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113ffd:	e8 98 a0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114002:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0114005:	74 17                	je     f011401e <test_kmalloc_firstfit2+0x29e>
f0114007:	83 ec 04             	sub    $0x4,%esp
f011400a:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011400f:	68 a4 03 00 00       	push   $0x3a4
f0114014:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114019:	e8 75 c1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011401e:	e8 d4 83 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114023:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0114026:	29 c2                	sub    %eax,%edx
f0114028:	89 d0                	mov    %edx,%eax
f011402a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011402f:	74 17                	je     f0114048 <test_kmalloc_firstfit2+0x2c8>
f0114031:	83 ec 04             	sub    $0x4,%esp
f0114034:	68 24 02 12 f0       	push   $0xf0120224
f0114039:	68 a5 03 00 00       	push   $0x3a5
f011403e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114043:	e8 4b c1 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0114048:	e8 aa 83 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011404d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114050:	e8 45 a0 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114055:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0114058:	83 ec 0c             	sub    $0xc,%esp
f011405b:	68 00 08 00 00       	push   $0x800
f0114060:	e8 c0 a9 ff ff       	call   f010ea25 <kmalloc>
f0114065:	83 c4 10             	add    $0x10,%esp
f0114068:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011406e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0114074:	89 c1                	mov    %eax,%ecx
f0114076:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011407d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114082:	0f b6 d0             	movzbl %al,%edx
f0114085:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114088:	01 d0                	add    %edx,%eax
f011408a:	48                   	dec    %eax
f011408b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011408e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114091:	ba 00 00 00 00       	mov    $0x0,%edx
f0114096:	f7 75 bc             	divl   -0x44(%ebp)
f0114099:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011409c:	29 d0                	sub    %edx,%eax
f011409e:	89 c3                	mov    %eax,%ebx
f01140a0:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01140a7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01140ac:	0f b6 c0             	movzbl %al,%eax
f01140af:	c1 e0 04             	shl    $0x4,%eax
f01140b2:	89 c2                	mov    %eax,%edx
f01140b4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140b7:	01 d0                	add    %edx,%eax
f01140b9:	48                   	dec    %eax
f01140ba:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01140bd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01140c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01140c5:	f7 75 b4             	divl   -0x4c(%ebp)
f01140c8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01140cb:	29 d0                	sub    %edx,%eax
f01140cd:	01 d8                	add    %ebx,%eax
f01140cf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01140d4:	39 c1                	cmp    %eax,%ecx
f01140d6:	73 17                	jae    f01140ef <test_kmalloc_firstfit2+0x36f>
f01140d8:	83 ec 04             	sub    $0x4,%esp
f01140db:	68 f4 01 12 f0       	push   $0xf01201f4
f01140e0:	68 ab 03 00 00       	push   $0x3ab
f01140e5:	68 e2 fd 11 f0       	push   $0xf011fde2
f01140ea:	e8 a4 c0 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01140ef:	e8 a6 9f ff ff       	call   f010e09a <pf_calculate_free_frames>
f01140f4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01140f7:	74 17                	je     f0114110 <test_kmalloc_firstfit2+0x390>
f01140f9:	83 ec 04             	sub    $0x4,%esp
f01140fc:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0114101:	68 ac 03 00 00       	push   $0x3ac
f0114106:	68 e2 fd 11 f0       	push   $0xf011fde2
f011410b:	e8 83 c0 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f0114110:	e8 e2 82 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114115:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0114118:	29 c2                	sub    %eax,%edx
f011411a:	89 d0                	mov    %edx,%eax
f011411c:	83 f8 01             	cmp    $0x1,%eax
f011411f:	74 17                	je     f0114138 <test_kmalloc_firstfit2+0x3b8>
f0114121:	83 ec 04             	sub    $0x4,%esp
f0114124:	68 24 02 12 f0       	push   $0xf0120224
f0114129:	68 ad 03 00 00       	push   $0x3ad
f011412e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114133:	e8 5b c0 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0114138:	e8 ba 82 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011413d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114140:	e8 55 9f ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114145:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0114148:	83 ec 0c             	sub    $0xc,%esp
f011414b:	68 00 08 00 00       	push   $0x800
f0114150:	e8 d0 a8 ff ff       	call   f010ea25 <kmalloc>
f0114155:	83 c4 10             	add    $0x10,%esp
f0114158:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011415e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0114164:	89 c1                	mov    %eax,%ecx
f0114166:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011416d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114172:	0f b6 d0             	movzbl %al,%edx
f0114175:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114178:	01 d0                	add    %edx,%eax
f011417a:	48                   	dec    %eax
f011417b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011417e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114181:	ba 00 00 00 00       	mov    $0x0,%edx
f0114186:	f7 75 ac             	divl   -0x54(%ebp)
f0114189:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011418c:	29 d0                	sub    %edx,%eax
f011418e:	89 c3                	mov    %eax,%ebx
f0114190:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114197:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011419c:	0f b6 c0             	movzbl %al,%eax
f011419f:	c1 e0 04             	shl    $0x4,%eax
f01141a2:	89 c2                	mov    %eax,%edx
f01141a4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01141a7:	01 d0                	add    %edx,%eax
f01141a9:	48                   	dec    %eax
f01141aa:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01141ad:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01141b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01141b5:	f7 75 a4             	divl   -0x5c(%ebp)
f01141b8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01141bb:	29 d0                	sub    %edx,%eax
f01141bd:	01 d8                	add    %ebx,%eax
f01141bf:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01141c4:	39 c1                	cmp    %eax,%ecx
f01141c6:	74 17                	je     f01141df <test_kmalloc_firstfit2+0x45f>
f01141c8:	83 ec 04             	sub    $0x4,%esp
f01141cb:	68 f4 01 12 f0       	push   $0xf01201f4
f01141d0:	68 b3 03 00 00       	push   $0x3b3
f01141d5:	68 e2 fd 11 f0       	push   $0xf011fde2
f01141da:	e8 b4 bf fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01141df:	e8 b6 9e ff ff       	call   f010e09a <pf_calculate_free_frames>
f01141e4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01141e7:	74 17                	je     f0114200 <test_kmalloc_firstfit2+0x480>
f01141e9:	83 ec 04             	sub    $0x4,%esp
f01141ec:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01141f1:	68 b4 03 00 00       	push   $0x3b4
f01141f6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01141fb:	e8 93 bf fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f0114200:	e8 f2 81 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114205:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0114208:	29 c2                	sub    %eax,%edx
f011420a:	89 d0                	mov    %edx,%eax
f011420c:	83 f8 01             	cmp    $0x1,%eax
f011420f:	74 17                	je     f0114228 <test_kmalloc_firstfit2+0x4a8>
f0114211:	83 ec 04             	sub    $0x4,%esp
f0114214:	68 24 02 12 f0       	push   $0xf0120224
f0114219:	68 b5 03 00 00       	push   $0x3b5
f011421e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114223:	e8 6b bf fe ff       	call   f0100193 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0114228:	e8 ca 81 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011422d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114230:	e8 65 9e ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114235:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f0114238:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011423e:	83 ec 0c             	sub    $0xc,%esp
f0114241:	50                   	push   %eax
f0114242:	e8 f8 a7 ff ff       	call   f010ea3f <kfree>
f0114247:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011424a:	e8 4b 9e ff ff       	call   f010e09a <pf_calculate_free_frames>
f011424f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0114252:	74 17                	je     f011426b <test_kmalloc_firstfit2+0x4eb>
f0114254:	83 ec 04             	sub    $0x4,%esp
f0114257:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011425c:	68 bb 03 00 00       	push   $0x3bb
f0114261:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114266:	e8 28 bf fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011426b:	e8 87 81 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114270:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0114273:	83 f8 01             	cmp    $0x1,%eax
f0114276:	74 17                	je     f011428f <test_kmalloc_firstfit2+0x50f>
f0114278:	83 ec 04             	sub    $0x4,%esp
f011427b:	68 37 02 12 f0       	push   $0xf0120237
f0114280:	68 bc 03 00 00       	push   $0x3bc
f0114285:	68 e2 fd 11 f0       	push   $0xf011fde2
f011428a:	e8 04 bf fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011428f:	e8 63 81 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114294:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114297:	e8 fe 9d ff ff       	call   f010e09a <pf_calculate_free_frames>
f011429c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011429f:	83 ec 0c             	sub    $0xc,%esp
f01142a2:	68 00 1c 00 00       	push   $0x1c00
f01142a7:	e8 79 a7 ff ff       	call   f010ea25 <kmalloc>
f01142ac:	83 c4 10             	add    $0x10,%esp
f01142af:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f01142b5:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01142bb:	89 c1                	mov    %eax,%ecx
f01142bd:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01142c4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01142c9:	0f b6 d0             	movzbl %al,%edx
f01142cc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01142cf:	01 d0                	add    %edx,%eax
f01142d1:	48                   	dec    %eax
f01142d2:	89 45 98             	mov    %eax,-0x68(%ebp)
f01142d5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01142d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01142dd:	f7 75 9c             	divl   -0x64(%ebp)
f01142e0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01142e3:	29 d0                	sub    %edx,%eax
f01142e5:	89 c3                	mov    %eax,%ebx
f01142e7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01142ee:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01142f3:	0f b6 c0             	movzbl %al,%eax
f01142f6:	c1 e0 04             	shl    $0x4,%eax
f01142f9:	89 c2                	mov    %eax,%edx
f01142fb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01142fe:	01 d0                	add    %edx,%eax
f0114300:	48                   	dec    %eax
f0114301:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114304:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114307:	ba 00 00 00 00       	mov    $0x0,%edx
f011430c:	f7 75 94             	divl   -0x6c(%ebp)
f011430f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114312:	29 d0                	sub    %edx,%eax
f0114314:	01 d8                	add    %ebx,%eax
f0114316:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011431b:	39 c1                	cmp    %eax,%ecx
f011431d:	74 17                	je     f0114336 <test_kmalloc_firstfit2+0x5b6>
f011431f:	83 ec 04             	sub    $0x4,%esp
f0114322:	68 f4 01 12 f0       	push   $0xf01201f4
f0114327:	68 c2 03 00 00       	push   $0x3c2
f011432c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114331:	e8 5d be fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114336:	e8 5f 9d ff ff       	call   f010e09a <pf_calculate_free_frames>
f011433b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011433e:	74 17                	je     f0114357 <test_kmalloc_firstfit2+0x5d7>
f0114340:	83 ec 04             	sub    $0x4,%esp
f0114343:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0114348:	68 c3 03 00 00       	push   $0x3c3
f011434d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114352:	e8 3c be fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f0114357:	e8 9b 80 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011435c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011435f:	29 c2                	sub    %eax,%edx
f0114361:	89 d0                	mov    %edx,%eax
f0114363:	83 f8 02             	cmp    $0x2,%eax
f0114366:	74 17                	je     f011437f <test_kmalloc_firstfit2+0x5ff>
f0114368:	83 ec 04             	sub    $0x4,%esp
f011436b:	68 24 02 12 f0       	push   $0xf0120224
f0114370:	68 c4 03 00 00       	push   $0x3c4
f0114375:	68 e2 fd 11 f0       	push   $0xf011fde2
f011437a:	e8 14 be fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011437f:	e8 73 80 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114384:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114387:	e8 0e 9d ff ff       	call   f010e09a <pf_calculate_free_frames>
f011438c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f011438f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0114395:	83 ec 0c             	sub    $0xc,%esp
f0114398:	50                   	push   %eax
f0114399:	e8 a1 a6 ff ff       	call   f010ea3f <kfree>
f011439e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01143a1:	e8 f4 9c ff ff       	call   f010e09a <pf_calculate_free_frames>
f01143a6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01143a9:	74 17                	je     f01143c2 <test_kmalloc_firstfit2+0x642>
f01143ab:	83 ec 04             	sub    $0x4,%esp
f01143ae:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01143b3:	68 ca 03 00 00       	push   $0x3ca
f01143b8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01143bd:	e8 d1 bd fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f01143c2:	e8 30 80 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01143c7:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01143ca:	3d 00 02 00 00       	cmp    $0x200,%eax
f01143cf:	74 17                	je     f01143e8 <test_kmalloc_firstfit2+0x668>
f01143d1:	83 ec 04             	sub    $0x4,%esp
f01143d4:	68 37 02 12 f0       	push   $0xf0120237
f01143d9:	68 cb 03 00 00       	push   $0x3cb
f01143de:	68 e2 fd 11 f0       	push   $0xf011fde2
f01143e3:	e8 ab bd fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01143e8:	e8 0a 80 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01143ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01143f0:	e8 a5 9c ff ff       	call   f010e09a <pf_calculate_free_frames>
f01143f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01143f8:	83 ec 0c             	sub    $0xc,%esp
f01143fb:	68 00 fc 2f 00       	push   $0x2ffc00
f0114400:	e8 20 a6 ff ff       	call   f010ea25 <kmalloc>
f0114405:	83 c4 10             	add    $0x10,%esp
f0114408:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011440e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0114414:	89 c1                	mov    %eax,%ecx
f0114416:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011441d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114422:	0f b6 d0             	movzbl %al,%edx
f0114425:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114428:	01 d0                	add    %edx,%eax
f011442a:	48                   	dec    %eax
f011442b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011442e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114431:	ba 00 00 00 00       	mov    $0x0,%edx
f0114436:	f7 75 8c             	divl   -0x74(%ebp)
f0114439:	8b 45 88             	mov    -0x78(%ebp),%eax
f011443c:	29 d0                	sub    %edx,%eax
f011443e:	89 c3                	mov    %eax,%ebx
f0114440:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0114447:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011444c:	0f b6 c0             	movzbl %al,%eax
f011444f:	c1 e0 04             	shl    $0x4,%eax
f0114452:	89 c2                	mov    %eax,%edx
f0114454:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114457:	01 d0                	add    %edx,%eax
f0114459:	48                   	dec    %eax
f011445a:	89 45 80             	mov    %eax,-0x80(%ebp)
f011445d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114460:	ba 00 00 00 00       	mov    $0x0,%edx
f0114465:	f7 75 84             	divl   -0x7c(%ebp)
f0114468:	8b 45 80             	mov    -0x80(%ebp),%eax
f011446b:	29 d0                	sub    %edx,%eax
f011446d:	01 d8                	add    %ebx,%eax
f011446f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0114474:	39 c1                	cmp    %eax,%ecx
f0114476:	74 17                	je     f011448f <test_kmalloc_firstfit2+0x70f>
f0114478:	83 ec 04             	sub    $0x4,%esp
f011447b:	68 f4 01 12 f0       	push   $0xf01201f4
f0114480:	68 d1 03 00 00       	push   $0x3d1
f0114485:	68 e2 fd 11 f0       	push   $0xf011fde2
f011448a:	e8 04 bd fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011448f:	e8 06 9c ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114494:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0114497:	74 17                	je     f01144b0 <test_kmalloc_firstfit2+0x730>
f0114499:	83 ec 04             	sub    $0x4,%esp
f011449c:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01144a1:	68 d2 03 00 00       	push   $0x3d2
f01144a6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01144ab:	e8 e3 bc fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f01144b0:	e8 42 7f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01144b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01144b8:	29 c2                	sub    %eax,%edx
f01144ba:	89 d0                	mov    %edx,%eax
f01144bc:	3d 00 03 00 00       	cmp    $0x300,%eax
f01144c1:	74 17                	je     f01144da <test_kmalloc_firstfit2+0x75a>
f01144c3:	83 ec 04             	sub    $0x4,%esp
f01144c6:	68 24 02 12 f0       	push   $0xf0120224
f01144cb:	68 d3 03 00 00       	push   $0x3d3
f01144d0:	68 e2 fd 11 f0       	push   $0xf011fde2
f01144d5:	e8 b9 bc fe ff       	call   f0100193 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f01144da:	e8 18 7f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01144df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01144e2:	e8 b3 9b ff ff       	call   f010e09a <pf_calculate_free_frames>
f01144e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f01144ea:	83 ec 0c             	sub    $0xc,%esp
f01144ed:	68 00 18 20 00       	push   $0x201800
f01144f2:	e8 2e a5 ff ff       	call   f010ea25 <kmalloc>
f01144f7:	83 c4 10             	add    $0x10,%esp
f01144fa:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0114500:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0114506:	89 c1                	mov    %eax,%ecx
f0114508:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011450f:	10 00 00 
f0114512:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114517:	0f b6 d0             	movzbl %al,%edx
f011451a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0114520:	01 d0                	add    %edx,%eax
f0114522:	48                   	dec    %eax
f0114523:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0114529:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011452f:	ba 00 00 00 00       	mov    $0x0,%edx
f0114534:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011453a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114540:	29 d0                	sub    %edx,%eax
f0114542:	89 c3                	mov    %eax,%ebx
f0114544:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011454b:	10 00 00 
f011454e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114553:	0f b6 c0             	movzbl %al,%eax
f0114556:	c1 e0 04             	shl    $0x4,%eax
f0114559:	89 c2                	mov    %eax,%edx
f011455b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114561:	01 d0                	add    %edx,%eax
f0114563:	48                   	dec    %eax
f0114564:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011456a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114570:	ba 00 00 00 00       	mov    $0x0,%edx
f0114575:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011457b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114581:	29 d0                	sub    %edx,%eax
f0114583:	01 d8                	add    %ebx,%eax
f0114585:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011458a:	39 c1                	cmp    %eax,%ecx
f011458c:	74 17                	je     f01145a5 <test_kmalloc_firstfit2+0x825>
f011458e:	83 ec 04             	sub    $0x4,%esp
f0114591:	68 f4 01 12 f0       	push   $0xf01201f4
f0114596:	68 d9 03 00 00       	push   $0x3d9
f011459b:	68 e2 fd 11 f0       	push   $0xf011fde2
f01145a0:	e8 ee bb fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01145a5:	e8 f0 9a ff ff       	call   f010e09a <pf_calculate_free_frames>
f01145aa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01145ad:	74 17                	je     f01145c6 <test_kmalloc_firstfit2+0x846>
f01145af:	83 ec 04             	sub    $0x4,%esp
f01145b2:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01145b7:	68 da 03 00 00       	push   $0x3da
f01145bc:	68 e2 fd 11 f0       	push   $0xf011fde2
f01145c1:	e8 cd bb fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f01145c6:	e8 2c 7e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01145cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01145ce:	29 c2                	sub    %eax,%edx
f01145d0:	89 d0                	mov    %edx,%eax
f01145d2:	3d 02 02 00 00       	cmp    $0x202,%eax
f01145d7:	74 17                	je     f01145f0 <test_kmalloc_firstfit2+0x870>
f01145d9:	83 ec 04             	sub    $0x4,%esp
f01145dc:	68 24 02 12 f0       	push   $0xf0120224
f01145e1:	68 db 03 00 00       	push   $0x3db
f01145e6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01145eb:	e8 a3 bb fe ff       	call   f0100193 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01145f0:	e8 02 7e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01145f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01145f8:	e8 9d 9a ff ff       	call   f010e09a <pf_calculate_free_frames>
f01145fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0114600:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0114606:	83 ec 0c             	sub    $0xc,%esp
f0114609:	50                   	push   %eax
f011460a:	e8 30 a4 ff ff       	call   f010ea3f <kfree>
f011460f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114612:	e8 83 9a ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114617:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011461a:	74 17                	je     f0114633 <test_kmalloc_firstfit2+0x8b3>
f011461c:	83 ec 04             	sub    $0x4,%esp
f011461f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0114624:	68 e1 03 00 00       	push   $0x3e1
f0114629:	68 e2 fd 11 f0       	push   $0xf011fde2
f011462e:	e8 60 bb fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f0114633:	e8 bf 7d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114638:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011463b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0114640:	74 17                	je     f0114659 <test_kmalloc_firstfit2+0x8d9>
f0114642:	83 ec 04             	sub    $0x4,%esp
f0114645:	68 37 02 12 f0       	push   $0xf0120237
f011464a:	68 e2 03 00 00       	push   $0x3e2
f011464f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114654:	e8 3a bb fe ff       	call   f0100193 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f0114659:	e8 99 7d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011465e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114661:	e8 34 9a ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114666:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f0114669:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011466f:	83 ec 0c             	sub    $0xc,%esp
f0114672:	50                   	push   %eax
f0114673:	e8 c7 a3 ff ff       	call   f010ea3f <kfree>
f0114678:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011467b:	e8 77 7d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114680:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0114683:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114688:	74 17                	je     f01146a1 <test_kmalloc_firstfit2+0x921>
f011468a:	83 ec 04             	sub    $0x4,%esp
f011468d:	68 37 02 12 f0       	push   $0xf0120237
f0114692:	68 e8 03 00 00       	push   $0x3e8
f0114697:	68 e2 fd 11 f0       	push   $0xf011fde2
f011469c:	e8 f2 ba fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01146a1:	e8 f4 99 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01146a6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01146a9:	74 17                	je     f01146c2 <test_kmalloc_firstfit2+0x942>
f01146ab:	83 ec 04             	sub    $0x4,%esp
f01146ae:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01146b3:	68 e9 03 00 00       	push   $0x3e9
f01146b8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01146bd:	e8 d1 ba fe ff       	call   f0100193 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f01146c2:	e8 30 7d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01146c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01146ca:	e8 cb 99 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01146cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f01146d2:	83 ec 0c             	sub    $0xc,%esp
f01146d5:	68 00 fc 4f 00       	push   $0x4ffc00
f01146da:	e8 46 a3 ff ff       	call   f010ea25 <kmalloc>
f01146df:	83 c4 10             	add    $0x10,%esp
f01146e2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f01146e8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01146ee:	89 c1                	mov    %eax,%ecx
f01146f0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01146f7:	10 00 00 
f01146fa:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01146ff:	0f b6 d0             	movzbl %al,%edx
f0114702:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0114708:	01 d0                	add    %edx,%eax
f011470a:	48                   	dec    %eax
f011470b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0114711:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114717:	ba 00 00 00 00       	mov    $0x0,%edx
f011471c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0114722:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114728:	29 d0                	sub    %edx,%eax
f011472a:	89 c3                	mov    %eax,%ebx
f011472c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0114733:	10 00 00 
f0114736:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011473b:	0f b6 c0             	movzbl %al,%eax
f011473e:	c1 e0 04             	shl    $0x4,%eax
f0114741:	89 c2                	mov    %eax,%edx
f0114743:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0114749:	01 d0                	add    %edx,%eax
f011474b:	48                   	dec    %eax
f011474c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0114752:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114758:	ba 00 00 00 00       	mov    $0x0,%edx
f011475d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0114763:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114769:	29 d0                	sub    %edx,%eax
f011476b:	01 d8                	add    %ebx,%eax
f011476d:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0114772:	39 c1                	cmp    %eax,%ecx
f0114774:	74 17                	je     f011478d <test_kmalloc_firstfit2+0xa0d>
f0114776:	83 ec 04             	sub    $0x4,%esp
f0114779:	68 f4 01 12 f0       	push   $0xf01201f4
f011477e:	68 ef 03 00 00       	push   $0x3ef
f0114783:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114788:	e8 06 ba fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011478d:	e8 08 99 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114792:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0114795:	74 17                	je     f01147ae <test_kmalloc_firstfit2+0xa2e>
f0114797:	83 ec 04             	sub    $0x4,%esp
f011479a:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011479f:	68 f0 03 00 00       	push   $0x3f0
f01147a4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01147a9:	e8 e5 b9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f01147ae:	e8 44 7c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01147b3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01147b6:	29 c2                	sub    %eax,%edx
f01147b8:	89 d0                	mov    %edx,%eax
f01147ba:	3d 00 05 00 00       	cmp    $0x500,%eax
f01147bf:	74 17                	je     f01147d8 <test_kmalloc_firstfit2+0xa58>
f01147c1:	83 ec 04             	sub    $0x4,%esp
f01147c4:	68 24 02 12 f0       	push   $0xf0120224
f01147c9:	68 f1 03 00 00       	push   $0x3f1
f01147ce:	68 e2 fd 11 f0       	push   $0xf011fde2
f01147d3:	e8 bb b9 fe ff       	call   f0100193 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01147d8:	e8 1a 7c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01147dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01147e0:	e8 b5 98 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01147e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f01147e8:	83 ec 0c             	sub    $0xc,%esp
f01147eb:	68 00 fc 2f 00       	push   $0x2ffc00
f01147f0:	e8 30 a2 ff ff       	call   f010ea25 <kmalloc>
f01147f5:	83 c4 10             	add    $0x10,%esp
f01147f8:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01147fe:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0114804:	89 c1                	mov    %eax,%ecx
f0114806:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011480d:	10 00 00 
f0114810:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114815:	0f b6 d0             	movzbl %al,%edx
f0114818:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011481e:	01 d0                	add    %edx,%eax
f0114820:	48                   	dec    %eax
f0114821:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0114827:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011482d:	ba 00 00 00 00       	mov    $0x0,%edx
f0114832:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0114838:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011483e:	29 d0                	sub    %edx,%eax
f0114840:	89 c3                	mov    %eax,%ebx
f0114842:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0114849:	10 00 00 
f011484c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114851:	0f b6 c0             	movzbl %al,%eax
f0114854:	c1 e0 04             	shl    $0x4,%eax
f0114857:	89 c2                	mov    %eax,%edx
f0114859:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011485f:	01 d0                	add    %edx,%eax
f0114861:	48                   	dec    %eax
f0114862:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0114868:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011486e:	ba 00 00 00 00       	mov    $0x0,%edx
f0114873:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0114879:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011487f:	29 d0                	sub    %edx,%eax
f0114881:	01 d8                	add    %ebx,%eax
f0114883:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0114888:	39 c1                	cmp    %eax,%ecx
f011488a:	74 17                	je     f01148a3 <test_kmalloc_firstfit2+0xb23>
f011488c:	83 ec 04             	sub    $0x4,%esp
f011488f:	68 f4 01 12 f0       	push   $0xf01201f4
f0114894:	68 ff 03 00 00       	push   $0x3ff
f0114899:	68 e2 fd 11 f0       	push   $0xf011fde2
f011489e:	e8 f0 b8 fe ff       	call   f0100193 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01148a3:	e8 f2 97 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01148a8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01148ab:	74 17                	je     f01148c4 <test_kmalloc_firstfit2+0xb44>
f01148ad:	83 ec 04             	sub    $0x4,%esp
f01148b0:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01148b5:	68 00 04 00 00       	push   $0x400
f01148ba:	68 e2 fd 11 f0       	push   $0xf011fde2
f01148bf:	e8 cf b8 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f01148c4:	e8 2e 7b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01148c9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01148cc:	29 c2                	sub    %eax,%edx
f01148ce:	89 d0                	mov    %edx,%eax
f01148d0:	3d 00 03 00 00       	cmp    $0x300,%eax
f01148d5:	74 17                	je     f01148ee <test_kmalloc_firstfit2+0xb6e>
f01148d7:	83 ec 04             	sub    $0x4,%esp
f01148da:	68 24 02 12 f0       	push   $0xf0120224
f01148df:	68 01 04 00 00       	push   $0x401
f01148e4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01148e9:	e8 a5 b8 fe ff       	call   f0100193 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f01148ee:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01148f5:	10 00 00 
f01148f8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01148fd:	0f b6 d0             	movzbl %al,%edx
f0114900:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0114906:	01 d0                	add    %edx,%eax
f0114908:	48                   	dec    %eax
f0114909:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011490f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114915:	ba 00 00 00 00       	mov    $0x0,%edx
f011491a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0114920:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114926:	29 d0                	sub    %edx,%eax
f0114928:	89 c1                	mov    %eax,%ecx
f011492a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0114931:	10 00 00 
f0114934:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114939:	0f b6 c0             	movzbl %al,%eax
f011493c:	c1 e0 04             	shl    $0x4,%eax
f011493f:	89 c2                	mov    %eax,%edx
f0114941:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114947:	01 d0                	add    %edx,%eax
f0114949:	48                   	dec    %eax
f011494a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0114950:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114956:	ba 00 00 00 00       	mov    $0x0,%edx
f011495b:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0114961:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0114967:	29 d0                	sub    %edx,%eax
f0114969:	01 c8                	add    %ecx,%eax
f011496b:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f0114970:	29 c2                	sub    %eax,%edx
f0114972:	89 d0                	mov    %edx,%eax
f0114974:	83 ec 0c             	sub    $0xc,%esp
f0114977:	50                   	push   %eax
f0114978:	e8 a8 a0 ff ff       	call   f010ea25 <kmalloc>
f011497d:	83 c4 10             	add    $0x10,%esp
f0114980:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f0114986:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011498c:	85 c0                	test   %eax,%eax
f011498e:	74 17                	je     f01149a7 <test_kmalloc_firstfit2+0xc27>
f0114990:	83 ec 04             	sub    $0x4,%esp
f0114993:	68 24 03 12 f0       	push   $0xf0120324
f0114998:	68 07 04 00 00       	push   $0x407
f011499d:	68 e2 fd 11 f0       	push   $0xf011fde2
f01149a2:	e8 ec b7 fe ff       	call   f0100193 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f01149a7:	83 ec 0c             	sub    $0xc,%esp
f01149aa:	68 64 04 12 f0       	push   $0xf0120464
f01149af:	e8 82 2a ff ff       	call   f0107436 <cprintf>
f01149b4:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f01149b7:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01149bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01149bf:	5b                   	pop    %ebx
f01149c0:	5f                   	pop    %edi
f01149c1:	5d                   	pop    %ebp
f01149c2:	c3                   	ret    

f01149c3 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f01149c3:	55                   	push   %ebp
f01149c4:	89 e5                	mov    %esp,%ebp
f01149c6:	57                   	push   %edi
f01149c7:	53                   	push   %ebx
f01149c8:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f01149ce:	83 ec 0c             	sub    $0xc,%esp
f01149d1:	68 24 fd 11 f0       	push   $0xf011fd24
f01149d6:	e8 5b 2a ff ff       	call   f0107436 <cprintf>
f01149db:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01149de:	83 ec 0c             	sub    $0xc,%esp
f01149e1:	68 54 fd 11 f0       	push   $0xf011fd54
f01149e6:	e8 4b 2a ff ff       	call   f0107436 <cprintf>
f01149eb:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01149ee:	83 ec 0c             	sub    $0xc,%esp
f01149f1:	68 24 fd 11 f0       	push   $0xf011fd24
f01149f6:	e8 3b 2a ff ff       	call   f0107436 <cprintf>
f01149fb:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f01149fe:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f0114a04:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0114a09:	b8 00 00 00 00       	mov    $0x0,%eax
f0114a0e:	89 d7                	mov    %edx,%edi
f0114a10:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0114a12:	e8 e0 79 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114a17:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0114a1a:	e8 7b 96 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114a1f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f0114a22:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f0114a29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114a30:	eb 1f                	jmp    f0114a51 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0114a32:	83 ec 0c             	sub    $0xc,%esp
f0114a35:	68 00 00 20 00       	push   $0x200000
f0114a3a:	e8 e6 9f ff ff       	call   f010ea25 <kmalloc>
f0114a3f:	83 c4 10             	add    $0x10,%esp
f0114a42:	89 c2                	mov    %eax,%edx
f0114a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0114a47:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f0114a4e:	ff 45 f4             	incl   -0xc(%ebp)
f0114a51:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0114a55:	7e db                	jle    f0114a32 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f0114a57:	83 ec 0c             	sub    $0xc,%esp
f0114a5a:	68 00 b0 1f 00       	push   $0x1fb000
f0114a5f:	e8 c1 9f ff ff       	call   f010ea25 <kmalloc>
f0114a64:	83 c4 10             	add    $0x10,%esp
f0114a67:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0114a6d:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f0114a73:	89 c1                	mov    %eax,%ecx
f0114a75:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0114a7c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114a81:	0f b6 d0             	movzbl %al,%edx
f0114a84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114a87:	01 d0                	add    %edx,%eax
f0114a89:	48                   	dec    %eax
f0114a8a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0114a8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0114a90:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a95:	f7 75 e4             	divl   -0x1c(%ebp)
f0114a98:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0114a9b:	29 d0                	sub    %edx,%eax
f0114a9d:	89 c3                	mov    %eax,%ebx
f0114a9f:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0114aa6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114aab:	0f b6 c0             	movzbl %al,%eax
f0114aae:	c1 e0 04             	shl    $0x4,%eax
f0114ab1:	89 c2                	mov    %eax,%edx
f0114ab3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0114ab6:	01 d0                	add    %edx,%eax
f0114ab8:	48                   	dec    %eax
f0114ab9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0114abc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114abf:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ac4:	f7 75 dc             	divl   -0x24(%ebp)
f0114ac7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114aca:	29 d0                	sub    %edx,%eax
f0114acc:	01 d8                	add    %ebx,%eax
f0114ace:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0114ad3:	39 c1                	cmp    %eax,%ecx
f0114ad5:	0f 85 34 03 00 00    	jne    f0114e0f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0114adb:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f0114ae1:	89 c1                	mov    %eax,%ecx
f0114ae3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0114aea:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114aef:	0f b6 d0             	movzbl %al,%edx
f0114af2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114af5:	01 d0                	add    %edx,%eax
f0114af7:	48                   	dec    %eax
f0114af8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114afb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114afe:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b03:	f7 75 d4             	divl   -0x2c(%ebp)
f0114b06:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114b09:	29 d0                	sub    %edx,%eax
f0114b0b:	89 c3                	mov    %eax,%ebx
f0114b0d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0114b14:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114b19:	0f b6 c0             	movzbl %al,%eax
f0114b1c:	c1 e0 04             	shl    $0x4,%eax
f0114b1f:	89 c2                	mov    %eax,%edx
f0114b21:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b24:	01 d0                	add    %edx,%eax
f0114b26:	48                   	dec    %eax
f0114b27:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0114b2a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114b2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b32:	f7 75 cc             	divl   -0x34(%ebp)
f0114b35:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114b38:	29 d0                	sub    %edx,%eax
f0114b3a:	01 d8                	add    %ebx,%eax
f0114b3c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0114b41:	39 c1                	cmp    %eax,%ecx
f0114b43:	0f 85 c6 02 00 00    	jne    f0114e0f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0114b49:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0114b4f:	89 c1                	mov    %eax,%ecx
f0114b51:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0114b58:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114b5d:	0f b6 d0             	movzbl %al,%edx
f0114b60:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b63:	01 d0                	add    %edx,%eax
f0114b65:	48                   	dec    %eax
f0114b66:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114b69:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b71:	f7 75 c4             	divl   -0x3c(%ebp)
f0114b74:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114b77:	29 d0                	sub    %edx,%eax
f0114b79:	89 c3                	mov    %eax,%ebx
f0114b7b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0114b82:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114b87:	0f b6 c0             	movzbl %al,%eax
f0114b8a:	c1 e0 04             	shl    $0x4,%eax
f0114b8d:	89 c2                	mov    %eax,%edx
f0114b8f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b92:	01 d0                	add    %edx,%eax
f0114b94:	48                   	dec    %eax
f0114b95:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0114b98:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114b9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ba0:	f7 75 bc             	divl   -0x44(%ebp)
f0114ba3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114ba6:	29 d0                	sub    %edx,%eax
f0114ba8:	01 d8                	add    %ebx,%eax
f0114baa:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0114baf:	39 c1                	cmp    %eax,%ecx
f0114bb1:	0f 85 58 02 00 00    	jne    f0114e0f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0114bb7:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f0114bbd:	89 c1                	mov    %eax,%ecx
f0114bbf:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0114bc6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114bcb:	0f b6 d0             	movzbl %al,%edx
f0114bce:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bd1:	01 d0                	add    %edx,%eax
f0114bd3:	48                   	dec    %eax
f0114bd4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0114bd7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114bda:	ba 00 00 00 00       	mov    $0x0,%edx
f0114bdf:	f7 75 b4             	divl   -0x4c(%ebp)
f0114be2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114be5:	29 d0                	sub    %edx,%eax
f0114be7:	89 c3                	mov    %eax,%ebx
f0114be9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0114bf0:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114bf5:	0f b6 c0             	movzbl %al,%eax
f0114bf8:	c1 e0 04             	shl    $0x4,%eax
f0114bfb:	89 c2                	mov    %eax,%edx
f0114bfd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114c00:	01 d0                	add    %edx,%eax
f0114c02:	48                   	dec    %eax
f0114c03:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0114c06:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114c09:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c0e:	f7 75 ac             	divl   -0x54(%ebp)
f0114c11:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114c14:	29 d0                	sub    %edx,%eax
f0114c16:	01 d8                	add    %ebx,%eax
f0114c18:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0114c1d:	39 c1                	cmp    %eax,%ecx
f0114c1f:	0f 85 ea 01 00 00    	jne    f0114e0f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0114c25:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f0114c2b:	89 c1                	mov    %eax,%ecx
f0114c2d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114c34:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114c39:	0f b6 d0             	movzbl %al,%edx
f0114c3c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114c3f:	01 d0                	add    %edx,%eax
f0114c41:	48                   	dec    %eax
f0114c42:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0114c45:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114c48:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c4d:	f7 75 a4             	divl   -0x5c(%ebp)
f0114c50:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114c53:	29 d0                	sub    %edx,%eax
f0114c55:	89 c3                	mov    %eax,%ebx
f0114c57:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0114c5e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114c63:	0f b6 c0             	movzbl %al,%eax
f0114c66:	c1 e0 04             	shl    $0x4,%eax
f0114c69:	89 c2                	mov    %eax,%edx
f0114c6b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114c6e:	01 d0                	add    %edx,%eax
f0114c70:	48                   	dec    %eax
f0114c71:	89 45 98             	mov    %eax,-0x68(%ebp)
f0114c74:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114c77:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c7c:	f7 75 9c             	divl   -0x64(%ebp)
f0114c7f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114c82:	29 d0                	sub    %edx,%eax
f0114c84:	01 d8                	add    %ebx,%eax
f0114c86:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0114c8b:	39 c1                	cmp    %eax,%ecx
f0114c8d:	0f 85 7c 01 00 00    	jne    f0114e0f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0114c93:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f0114c99:	89 c1                	mov    %eax,%ecx
f0114c9b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0114ca2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114ca7:	0f b6 d0             	movzbl %al,%edx
f0114caa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114cad:	01 d0                	add    %edx,%eax
f0114caf:	48                   	dec    %eax
f0114cb0:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114cb3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114cb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0114cbb:	f7 75 94             	divl   -0x6c(%ebp)
f0114cbe:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114cc1:	29 d0                	sub    %edx,%eax
f0114cc3:	89 c3                	mov    %eax,%ebx
f0114cc5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0114ccc:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114cd1:	0f b6 c0             	movzbl %al,%eax
f0114cd4:	c1 e0 04             	shl    $0x4,%eax
f0114cd7:	89 c2                	mov    %eax,%edx
f0114cd9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114cdc:	01 d0                	add    %edx,%eax
f0114cde:	48                   	dec    %eax
f0114cdf:	89 45 88             	mov    %eax,-0x78(%ebp)
f0114ce2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114ce5:	ba 00 00 00 00       	mov    $0x0,%edx
f0114cea:	f7 75 8c             	divl   -0x74(%ebp)
f0114ced:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114cf0:	29 d0                	sub    %edx,%eax
f0114cf2:	01 d8                	add    %ebx,%eax
f0114cf4:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0114cf9:	39 c1                	cmp    %eax,%ecx
f0114cfb:	0f 85 0e 01 00 00    	jne    f0114e0f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f0114d01:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f0114d07:	89 c1                	mov    %eax,%ecx
f0114d09:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0114d10:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114d15:	0f b6 d0             	movzbl %al,%edx
f0114d18:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114d1b:	01 d0                	add    %edx,%eax
f0114d1d:	48                   	dec    %eax
f0114d1e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114d21:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114d24:	ba 00 00 00 00       	mov    $0x0,%edx
f0114d29:	f7 75 84             	divl   -0x7c(%ebp)
f0114d2c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114d2f:	29 d0                	sub    %edx,%eax
f0114d31:	89 c3                	mov    %eax,%ebx
f0114d33:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0114d3a:	10 00 00 
f0114d3d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114d42:	0f b6 c0             	movzbl %al,%eax
f0114d45:	c1 e0 04             	shl    $0x4,%eax
f0114d48:	89 c2                	mov    %eax,%edx
f0114d4a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0114d50:	01 d0                	add    %edx,%eax
f0114d52:	48                   	dec    %eax
f0114d53:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0114d59:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114d5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0114d64:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0114d6a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114d70:	29 d0                	sub    %edx,%eax
f0114d72:	01 d8                	add    %ebx,%eax
f0114d74:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0114d79:	39 c1                	cmp    %eax,%ecx
f0114d7b:	0f 85 8e 00 00 00    	jne    f0114e0f <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f0114d81:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0114d87:	89 c1                	mov    %eax,%ecx
f0114d89:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0114d90:	10 00 00 
f0114d93:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114d98:	0f b6 d0             	movzbl %al,%edx
f0114d9b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114da1:	01 d0                	add    %edx,%eax
f0114da3:	48                   	dec    %eax
f0114da4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0114daa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114db0:	ba 00 00 00 00       	mov    $0x0,%edx
f0114db5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0114dbb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114dc1:	29 d0                	sub    %edx,%eax
f0114dc3:	89 c3                	mov    %eax,%ebx
f0114dc5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0114dcc:	10 00 00 
f0114dcf:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0114dd4:	0f b6 c0             	movzbl %al,%eax
f0114dd7:	c1 e0 04             	shl    $0x4,%eax
f0114dda:	89 c2                	mov    %eax,%edx
f0114ddc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0114de2:	01 d0                	add    %edx,%eax
f0114de4:	48                   	dec    %eax
f0114de5:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0114deb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114df1:	ba 00 00 00 00       	mov    $0x0,%edx
f0114df6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0114dfc:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114e02:	29 d0                	sub    %edx,%eax
f0114e04:	01 d8                	add    %ebx,%eax
f0114e06:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f0114e0b:	39 c1                	cmp    %eax,%ecx
f0114e0d:	74 17                	je     f0114e26 <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0114e0f:	83 ec 04             	sub    $0x4,%esp
f0114e12:	68 54 00 12 f0       	push   $0xf0120054
f0114e17:	68 2b 04 00 00       	push   $0x42b
f0114e1c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114e21:	e8 6d b3 fe ff       	call   f0100193 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114e26:	e8 6f 92 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114e2b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0114e2e:	74 17                	je     f0114e47 <test_kmalloc_worstfit+0x484>
f0114e30:	83 ec 04             	sub    $0x4,%esp
f0114e33:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0114e38:	68 2d 04 00 00       	push   $0x42d
f0114e3d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114e42:	e8 4c b3 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f0114e47:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0114e4a:	e8 a8 75 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114e4f:	29 c3                	sub    %eax,%ebx
f0114e51:	89 d8                	mov    %ebx,%eax
f0114e53:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f0114e58:	74 17                	je     f0114e71 <test_kmalloc_worstfit+0x4ae>
f0114e5a:	83 ec 04             	sub    $0x4,%esp
f0114e5d:	68 97 00 12 f0       	push   $0xf0120097
f0114e62:	68 2e 04 00 00       	push   $0x42e
f0114e67:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114e6c:	e8 22 b3 fe ff       	call   f0100193 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f0114e71:	e8 81 75 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114e76:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f0114e79:	e8 1c 92 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114e7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f0114e81:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f0114e87:	83 ec 0c             	sub    $0xc,%esp
f0114e8a:	50                   	push   %eax
f0114e8b:	e8 af 9b ff ff       	call   f010ea3f <kfree>
f0114e90:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f0114e93:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f0114e99:	83 ec 0c             	sub    $0xc,%esp
f0114e9c:	50                   	push   %eax
f0114e9d:	e8 9d 9b ff ff       	call   f010ea3f <kfree>
f0114ea2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0114ea5:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0114eab:	83 ec 0c             	sub    $0xc,%esp
f0114eae:	50                   	push   %eax
f0114eaf:	e8 8b 9b ff ff       	call   f010ea3f <kfree>
f0114eb4:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f0114eb7:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f0114ebd:	83 ec 0c             	sub    $0xc,%esp
f0114ec0:	50                   	push   %eax
f0114ec1:	e8 79 9b ff ff       	call   f010ea3f <kfree>
f0114ec6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0114ec9:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f0114ecf:	83 ec 0c             	sub    $0xc,%esp
f0114ed2:	50                   	push   %eax
f0114ed3:	e8 67 9b ff ff       	call   f010ea3f <kfree>
f0114ed8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0114edb:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f0114ee1:	83 ec 0c             	sub    $0xc,%esp
f0114ee4:	50                   	push   %eax
f0114ee5:	e8 55 9b ff ff       	call   f010ea3f <kfree>
f0114eea:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f0114eed:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f0114ef3:	83 ec 0c             	sub    $0xc,%esp
f0114ef6:	50                   	push   %eax
f0114ef7:	e8 43 9b ff ff       	call   f010ea3f <kfree>
f0114efc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f0114eff:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f0114f05:	83 ec 0c             	sub    $0xc,%esp
f0114f08:	50                   	push   %eax
f0114f09:	e8 31 9b ff ff       	call   f010ea3f <kfree>
f0114f0e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f0114f11:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0114f17:	83 ec 0c             	sub    $0xc,%esp
f0114f1a:	50                   	push   %eax
f0114f1b:	e8 1f 9b ff ff       	call   f010ea3f <kfree>
f0114f20:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f0114f23:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f0114f29:	83 ec 0c             	sub    $0xc,%esp
f0114f2c:	50                   	push   %eax
f0114f2d:	e8 0d 9b ff ff       	call   f010ea3f <kfree>
f0114f32:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f0114f35:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f0114f3b:	83 ec 0c             	sub    $0xc,%esp
f0114f3e:	50                   	push   %eax
f0114f3f:	e8 fb 9a ff ff       	call   f010ea3f <kfree>
f0114f44:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f0114f47:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0114f4d:	83 ec 0c             	sub    $0xc,%esp
f0114f50:	50                   	push   %eax
f0114f51:	e8 e9 9a ff ff       	call   f010ea3f <kfree>
f0114f56:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f0114f59:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0114f5f:	83 ec 0c             	sub    $0xc,%esp
f0114f62:	50                   	push   %eax
f0114f63:	e8 d7 9a ff ff       	call   f010ea3f <kfree>
f0114f68:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f0114f6b:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0114f71:	83 ec 0c             	sub    $0xc,%esp
f0114f74:	50                   	push   %eax
f0114f75:	e8 c5 9a ff ff       	call   f010ea3f <kfree>
f0114f7a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f0114f7d:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0114f83:	83 ec 0c             	sub    $0xc,%esp
f0114f86:	50                   	push   %eax
f0114f87:	e8 b3 9a ff ff       	call   f010ea3f <kfree>
f0114f8c:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114f8f:	e8 06 91 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114f94:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0114f97:	74 17                	je     f0114fb0 <test_kmalloc_worstfit+0x5ed>
f0114f99:	83 ec 04             	sub    $0x4,%esp
f0114f9c:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0114fa1:	68 44 04 00 00       	push   $0x444
f0114fa6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114fab:	e8 e3 b1 fe ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0114fb0:	e8 42 74 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114fb5:	89 c2                	mov    %eax,%edx
f0114fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114fba:	29 c2                	sub    %eax,%edx
f0114fbc:	89 d0                	mov    %edx,%eax
f0114fbe:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f0114fc3:	74 17                	je     f0114fdc <test_kmalloc_worstfit+0x619>
f0114fc5:	83 ec 04             	sub    $0x4,%esp
f0114fc8:	68 a8 00 12 f0       	push   $0xf01200a8
f0114fcd:	68 45 04 00 00       	push   $0x445
f0114fd2:	68 e2 fd 11 f0       	push   $0xf011fde2
f0114fd7:	e8 b7 b1 fe ff       	call   f0100193 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f0114fdc:	e8 16 74 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0114fe1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0114fe4:	e8 b1 90 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0114fe9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f0114fec:	83 ec 0c             	sub    $0xc,%esp
f0114fef:	68 00 00 10 00       	push   $0x100000
f0114ff4:	e8 2c 9a ff ff       	call   f010ea25 <kmalloc>
f0114ff9:	83 c4 10             	add    $0x10,%esp
f0114ffc:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f0115002:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0115009:	10 00 00 
f011500c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115011:	0f b6 d0             	movzbl %al,%edx
f0115014:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011501a:	01 d0                	add    %edx,%eax
f011501c:	48                   	dec    %eax
f011501d:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0115023:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0115029:	ba 00 00 00 00       	mov    $0x0,%edx
f011502e:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0115034:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011503a:	29 d0                	sub    %edx,%eax
f011503c:	89 c1                	mov    %eax,%ecx
f011503e:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0115045:	10 00 00 
f0115048:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011504d:	0f b6 c0             	movzbl %al,%eax
f0115050:	c1 e0 04             	shl    $0x4,%eax
f0115053:	89 c2                	mov    %eax,%edx
f0115055:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011505b:	01 d0                	add    %edx,%eax
f011505d:	48                   	dec    %eax
f011505e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0115064:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011506a:	ba 00 00 00 00       	mov    $0x0,%edx
f011506f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0115075:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011507b:	29 d0                	sub    %edx,%eax
f011507d:	01 c8                	add    %ecx,%eax
f011507f:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f0115085:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011508b:	39 c2                	cmp    %eax,%edx
f011508d:	74 17                	je     f01150a6 <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f011508f:	83 ec 04             	sub    $0x4,%esp
f0115092:	68 b0 04 12 f0       	push   $0xf01204b0
f0115097:	68 4c 04 00 00       	push   $0x44c
f011509c:	68 e2 fd 11 f0       	push   $0xf011fde2
f01150a1:	e8 ed b0 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01150a6:	e8 ef 8f ff ff       	call   f010e09a <pf_calculate_free_frames>
f01150ab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01150ae:	74 17                	je     f01150c7 <test_kmalloc_worstfit+0x704>
f01150b0:	83 ec 04             	sub    $0x4,%esp
f01150b3:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01150b8:	68 4d 04 00 00       	push   $0x44d
f01150bd:	68 e2 fd 11 f0       	push   $0xf011fde2
f01150c2:	e8 cc b0 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f01150c7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01150ca:	e8 28 73 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01150cf:	29 c3                	sub    %eax,%ebx
f01150d1:	89 d8                	mov    %ebx,%eax
f01150d3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01150d8:	74 17                	je     f01150f1 <test_kmalloc_worstfit+0x72e>
f01150da:	83 ec 04             	sub    $0x4,%esp
f01150dd:	68 12 03 12 f0       	push   $0xf0120312
f01150e2:	68 4e 04 00 00       	push   $0x44e
f01150e7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01150ec:	e8 a2 b0 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01150f1:	ff 45 e8             	incl   -0x18(%ebp)
f01150f4:	83 ec 08             	sub    $0x8,%esp
f01150f7:	ff 75 e8             	pushl  -0x18(%ebp)
f01150fa:	68 d0 04 12 f0       	push   $0xf01204d0
f01150ff:	e8 32 23 ff ff       	call   f0107436 <cprintf>
f0115104:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0115107:	e8 eb 72 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011510c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011510f:	e8 86 8f ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115114:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f0115117:	83 ec 0c             	sub    $0xc,%esp
f011511a:	68 00 00 40 00       	push   $0x400000
f011511f:	e8 01 99 ff ff       	call   f010ea25 <kmalloc>
f0115124:	83 c4 10             	add    $0x10,%esp
f0115127:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011512d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0115134:	10 00 00 
f0115137:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011513c:	0f b6 d0             	movzbl %al,%edx
f011513f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0115145:	01 d0                	add    %edx,%eax
f0115147:	48                   	dec    %eax
f0115148:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011514e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0115154:	ba 00 00 00 00       	mov    $0x0,%edx
f0115159:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011515f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0115165:	29 d0                	sub    %edx,%eax
f0115167:	89 c1                	mov    %eax,%ecx
f0115169:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0115170:	10 00 00 
f0115173:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115178:	0f b6 c0             	movzbl %al,%eax
f011517b:	c1 e0 04             	shl    $0x4,%eax
f011517e:	89 c2                	mov    %eax,%edx
f0115180:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0115186:	01 d0                	add    %edx,%eax
f0115188:	48                   	dec    %eax
f0115189:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f011518f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0115195:	ba 00 00 00 00       	mov    $0x0,%edx
f011519a:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01151a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01151a6:	29 d0                	sub    %edx,%eax
f01151a8:	01 c8                	add    %ecx,%eax
f01151aa:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f01151b0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01151b6:	39 c2                	cmp    %eax,%edx
f01151b8:	74 17                	je     f01151d1 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f01151ba:	83 ec 04             	sub    $0x4,%esp
f01151bd:	68 b0 04 12 f0       	push   $0xf01204b0
f01151c2:	68 55 04 00 00       	push   $0x455
f01151c7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01151cc:	e8 c2 af fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01151d1:	e8 c4 8e ff ff       	call   f010e09a <pf_calculate_free_frames>
f01151d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01151d9:	74 17                	je     f01151f2 <test_kmalloc_worstfit+0x82f>
f01151db:	83 ec 04             	sub    $0x4,%esp
f01151de:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01151e3:	68 56 04 00 00       	push   $0x456
f01151e8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01151ed:	e8 a1 af fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f01151f2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01151f5:	e8 fd 71 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01151fa:	29 c3                	sub    %eax,%ebx
f01151fc:	89 d8                	mov    %ebx,%eax
f01151fe:	3d 00 04 00 00       	cmp    $0x400,%eax
f0115203:	74 17                	je     f011521c <test_kmalloc_worstfit+0x859>
f0115205:	83 ec 04             	sub    $0x4,%esp
f0115208:	68 12 03 12 f0       	push   $0xf0120312
f011520d:	68 57 04 00 00       	push   $0x457
f0115212:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115217:	e8 77 af fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011521c:	ff 45 e8             	incl   -0x18(%ebp)
f011521f:	83 ec 08             	sub    $0x8,%esp
f0115222:	ff 75 e8             	pushl  -0x18(%ebp)
f0115225:	68 d0 04 12 f0       	push   $0xf01204d0
f011522a:	e8 07 22 ff ff       	call   f0107436 <cprintf>
f011522f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0115232:	e8 c0 71 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115237:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011523a:	e8 5b 8e ff ff       	call   f010e09a <pf_calculate_free_frames>
f011523f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f0115242:	83 ec 0c             	sub    $0xc,%esp
f0115245:	68 00 00 60 00       	push   $0x600000
f011524a:	e8 d6 97 ff ff       	call   f010ea25 <kmalloc>
f011524f:	83 c4 10             	add    $0x10,%esp
f0115252:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f0115258:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011525f:	10 00 00 
f0115262:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115267:	0f b6 d0             	movzbl %al,%edx
f011526a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0115270:	01 d0                	add    %edx,%eax
f0115272:	48                   	dec    %eax
f0115273:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0115279:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011527f:	ba 00 00 00 00       	mov    $0x0,%edx
f0115284:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011528a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0115290:	29 d0                	sub    %edx,%eax
f0115292:	89 c1                	mov    %eax,%ecx
f0115294:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011529b:	10 00 00 
f011529e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01152a3:	0f b6 c0             	movzbl %al,%eax
f01152a6:	c1 e0 04             	shl    $0x4,%eax
f01152a9:	89 c2                	mov    %eax,%edx
f01152ab:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01152b1:	01 d0                	add    %edx,%eax
f01152b3:	48                   	dec    %eax
f01152b4:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01152ba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01152c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01152c5:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01152cb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01152d1:	29 d0                	sub    %edx,%eax
f01152d3:	01 c8                	add    %ecx,%eax
f01152d5:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f01152db:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01152e1:	39 c2                	cmp    %eax,%edx
f01152e3:	74 17                	je     f01152fc <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f01152e5:	83 ec 04             	sub    $0x4,%esp
f01152e8:	68 b0 04 12 f0       	push   $0xf01204b0
f01152ed:	68 5e 04 00 00       	push   $0x45e
f01152f2:	68 e2 fd 11 f0       	push   $0xf011fde2
f01152f7:	e8 97 ae fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01152fc:	e8 99 8d ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115301:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0115304:	74 17                	je     f011531d <test_kmalloc_worstfit+0x95a>
f0115306:	83 ec 04             	sub    $0x4,%esp
f0115309:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011530e:	68 5f 04 00 00       	push   $0x45f
f0115313:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115318:	e8 76 ae fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011531d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0115320:	e8 d2 70 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115325:	29 c3                	sub    %eax,%ebx
f0115327:	89 d8                	mov    %ebx,%eax
f0115329:	3d 00 06 00 00       	cmp    $0x600,%eax
f011532e:	74 17                	je     f0115347 <test_kmalloc_worstfit+0x984>
f0115330:	83 ec 04             	sub    $0x4,%esp
f0115333:	68 12 03 12 f0       	push   $0xf0120312
f0115338:	68 60 04 00 00       	push   $0x460
f011533d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115342:	e8 4c ae fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0115347:	ff 45 e8             	incl   -0x18(%ebp)
f011534a:	83 ec 08             	sub    $0x8,%esp
f011534d:	ff 75 e8             	pushl  -0x18(%ebp)
f0115350:	68 d0 04 12 f0       	push   $0xf01204d0
f0115355:	e8 dc 20 ff ff       	call   f0107436 <cprintf>
f011535a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011535d:	e8 95 70 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115362:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0115365:	e8 30 8d ff ff       	call   f010e09a <pf_calculate_free_frames>
f011536a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011536d:	83 ec 0c             	sub    $0xc,%esp
f0115370:	68 00 00 50 00       	push   $0x500000
f0115375:	e8 ab 96 ff ff       	call   f010ea25 <kmalloc>
f011537a:	83 c4 10             	add    $0x10,%esp
f011537d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0115383:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011538a:	10 00 00 
f011538d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115392:	0f b6 d0             	movzbl %al,%edx
f0115395:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011539b:	01 d0                	add    %edx,%eax
f011539d:	48                   	dec    %eax
f011539e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01153a4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01153aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01153af:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01153b5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01153bb:	29 d0                	sub    %edx,%eax
f01153bd:	89 c1                	mov    %eax,%ecx
f01153bf:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01153c6:	10 00 00 
f01153c9:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01153ce:	0f b6 c0             	movzbl %al,%eax
f01153d1:	c1 e0 04             	shl    $0x4,%eax
f01153d4:	89 c2                	mov    %eax,%edx
f01153d6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01153dc:	01 d0                	add    %edx,%eax
f01153de:	48                   	dec    %eax
f01153df:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01153e5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01153f0:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01153f6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01153fc:	29 d0                	sub    %edx,%eax
f01153fe:	01 c8                	add    %ecx,%eax
f0115400:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0115406:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011540c:	39 c2                	cmp    %eax,%edx
f011540e:	74 17                	je     f0115427 <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f0115410:	83 ec 04             	sub    $0x4,%esp
f0115413:	68 b0 04 12 f0       	push   $0xf01204b0
f0115418:	68 67 04 00 00       	push   $0x467
f011541d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115422:	e8 6c ad fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115427:	e8 6e 8c ff ff       	call   f010e09a <pf_calculate_free_frames>
f011542c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011542f:	74 17                	je     f0115448 <test_kmalloc_worstfit+0xa85>
f0115431:	83 ec 04             	sub    $0x4,%esp
f0115434:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115439:	68 68 04 00 00       	push   $0x468
f011543e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115443:	e8 4b ad fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0115448:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011544b:	e8 a7 6f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115450:	29 c3                	sub    %eax,%ebx
f0115452:	89 d8                	mov    %ebx,%eax
f0115454:	3d 00 05 00 00       	cmp    $0x500,%eax
f0115459:	74 17                	je     f0115472 <test_kmalloc_worstfit+0xaaf>
f011545b:	83 ec 04             	sub    $0x4,%esp
f011545e:	68 12 03 12 f0       	push   $0xf0120312
f0115463:	68 69 04 00 00       	push   $0x469
f0115468:	68 e2 fd 11 f0       	push   $0xf011fde2
f011546d:	e8 21 ad fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0115472:	ff 45 e8             	incl   -0x18(%ebp)
f0115475:	83 ec 08             	sub    $0x8,%esp
f0115478:	ff 75 e8             	pushl  -0x18(%ebp)
f011547b:	68 d0 04 12 f0       	push   $0xf01204d0
f0115480:	e8 b1 1f ff ff       	call   f0107436 <cprintf>
f0115485:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0115488:	e8 6a 6f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011548d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0115490:	e8 05 8c ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115495:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0115498:	83 ec 0c             	sub    $0xc,%esp
f011549b:	68 00 00 40 00       	push   $0x400000
f01154a0:	e8 80 95 ff ff       	call   f010ea25 <kmalloc>
f01154a5:	83 c4 10             	add    $0x10,%esp
f01154a8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f01154ae:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01154b5:	10 00 00 
f01154b8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01154bd:	0f b6 d0             	movzbl %al,%edx
f01154c0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01154c6:	01 d0                	add    %edx,%eax
f01154c8:	48                   	dec    %eax
f01154c9:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01154cf:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01154d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01154da:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01154e0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01154e6:	29 d0                	sub    %edx,%eax
f01154e8:	89 c1                	mov    %eax,%ecx
f01154ea:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01154f1:	10 00 00 
f01154f4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01154f9:	0f b6 c0             	movzbl %al,%eax
f01154fc:	c1 e0 04             	shl    $0x4,%eax
f01154ff:	89 c2                	mov    %eax,%edx
f0115501:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0115507:	01 d0                	add    %edx,%eax
f0115509:	48                   	dec    %eax
f011550a:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0115510:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0115516:	ba 00 00 00 00       	mov    $0x0,%edx
f011551b:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0115521:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0115527:	29 d0                	sub    %edx,%eax
f0115529:	01 c8                	add    %ecx,%eax
f011552b:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f0115531:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0115537:	39 c2                	cmp    %eax,%edx
f0115539:	74 17                	je     f0115552 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f011553b:	83 ec 04             	sub    $0x4,%esp
f011553e:	68 b0 04 12 f0       	push   $0xf01204b0
f0115543:	68 70 04 00 00       	push   $0x470
f0115548:	68 e2 fd 11 f0       	push   $0xf011fde2
f011554d:	e8 41 ac fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115552:	e8 43 8b ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115557:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011555a:	74 17                	je     f0115573 <test_kmalloc_worstfit+0xbb0>
f011555c:	83 ec 04             	sub    $0x4,%esp
f011555f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115564:	68 71 04 00 00       	push   $0x471
f0115569:	68 e2 fd 11 f0       	push   $0xf011fde2
f011556e:	e8 20 ac fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0115573:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0115576:	e8 7c 6e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011557b:	29 c3                	sub    %eax,%ebx
f011557d:	89 d8                	mov    %ebx,%eax
f011557f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0115584:	74 17                	je     f011559d <test_kmalloc_worstfit+0xbda>
f0115586:	83 ec 04             	sub    $0x4,%esp
f0115589:	68 12 03 12 f0       	push   $0xf0120312
f011558e:	68 72 04 00 00       	push   $0x472
f0115593:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115598:	e8 f6 ab fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011559d:	ff 45 e8             	incl   -0x18(%ebp)
f01155a0:	83 ec 08             	sub    $0x8,%esp
f01155a3:	ff 75 e8             	pushl  -0x18(%ebp)
f01155a6:	68 d0 04 12 f0       	push   $0xf01204d0
f01155ab:	e8 86 1e ff ff       	call   f0107436 <cprintf>
f01155b0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01155b3:	e8 3f 6e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01155b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01155bb:	e8 da 8a ff ff       	call   f010e09a <pf_calculate_free_frames>
f01155c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f01155c3:	83 ec 0c             	sub    $0xc,%esp
f01155c6:	68 00 00 20 00       	push   $0x200000
f01155cb:	e8 55 94 ff ff       	call   f010ea25 <kmalloc>
f01155d0:	83 c4 10             	add    $0x10,%esp
f01155d3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f01155d9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01155e0:	10 00 00 
f01155e3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01155e8:	0f b6 d0             	movzbl %al,%edx
f01155eb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01155f1:	01 d0                	add    %edx,%eax
f01155f3:	48                   	dec    %eax
f01155f4:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01155fa:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0115600:	ba 00 00 00 00       	mov    $0x0,%edx
f0115605:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011560b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0115611:	29 d0                	sub    %edx,%eax
f0115613:	89 c1                	mov    %eax,%ecx
f0115615:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011561c:	10 00 00 
f011561f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115624:	0f b6 c0             	movzbl %al,%eax
f0115627:	c1 e0 04             	shl    $0x4,%eax
f011562a:	89 c2                	mov    %eax,%edx
f011562c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0115632:	01 d0                	add    %edx,%eax
f0115634:	48                   	dec    %eax
f0115635:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011563b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0115641:	ba 00 00 00 00       	mov    $0x0,%edx
f0115646:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011564c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0115652:	29 d0                	sub    %edx,%eax
f0115654:	01 c8                	add    %ecx,%eax
f0115656:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011565c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0115662:	39 c2                	cmp    %eax,%edx
f0115664:	74 17                	je     f011567d <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f0115666:	83 ec 04             	sub    $0x4,%esp
f0115669:	68 b0 04 12 f0       	push   $0xf01204b0
f011566e:	68 79 04 00 00       	push   $0x479
f0115673:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115678:	e8 16 ab fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011567d:	e8 18 8a ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115682:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0115685:	74 17                	je     f011569e <test_kmalloc_worstfit+0xcdb>
f0115687:	83 ec 04             	sub    $0x4,%esp
f011568a:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011568f:	68 7a 04 00 00       	push   $0x47a
f0115694:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115699:	e8 f5 aa fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011569e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01156a1:	e8 51 6d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01156a6:	29 c3                	sub    %eax,%ebx
f01156a8:	89 d8                	mov    %ebx,%eax
f01156aa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01156af:	74 17                	je     f01156c8 <test_kmalloc_worstfit+0xd05>
f01156b1:	83 ec 04             	sub    $0x4,%esp
f01156b4:	68 12 03 12 f0       	push   $0xf0120312
f01156b9:	68 7b 04 00 00       	push   $0x47b
f01156be:	68 e2 fd 11 f0       	push   $0xf011fde2
f01156c3:	e8 cb aa fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01156c8:	ff 45 e8             	incl   -0x18(%ebp)
f01156cb:	83 ec 08             	sub    $0x8,%esp
f01156ce:	ff 75 e8             	pushl  -0x18(%ebp)
f01156d1:	68 d0 04 12 f0       	push   $0xf01204d0
f01156d6:	e8 5b 1d ff ff       	call   f0107436 <cprintf>
f01156db:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01156de:	e8 14 6d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01156e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01156e6:	e8 af 89 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01156eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f01156ee:	83 ec 0c             	sub    $0xc,%esp
f01156f1:	68 00 00 18 00       	push   $0x180000
f01156f6:	e8 2a 93 ff ff       	call   f010ea25 <kmalloc>
f01156fb:	83 c4 10             	add    $0x10,%esp
f01156fe:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0115704:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011570b:	10 00 00 
f011570e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115713:	0f b6 d0             	movzbl %al,%edx
f0115716:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011571c:	01 d0                	add    %edx,%eax
f011571e:	48                   	dec    %eax
f011571f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0115725:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011572b:	ba 00 00 00 00       	mov    $0x0,%edx
f0115730:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0115736:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011573c:	29 d0                	sub    %edx,%eax
f011573e:	89 c1                	mov    %eax,%ecx
f0115740:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0115747:	10 00 00 
f011574a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011574f:	0f b6 c0             	movzbl %al,%eax
f0115752:	c1 e0 04             	shl    $0x4,%eax
f0115755:	89 c2                	mov    %eax,%edx
f0115757:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011575d:	01 d0                	add    %edx,%eax
f011575f:	48                   	dec    %eax
f0115760:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0115766:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011576c:	ba 00 00 00 00       	mov    $0x0,%edx
f0115771:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0115777:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011577d:	29 d0                	sub    %edx,%eax
f011577f:	01 c8                	add    %ecx,%eax
f0115781:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0115787:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011578d:	39 c2                	cmp    %eax,%edx
f011578f:	74 17                	je     f01157a8 <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f0115791:	83 ec 04             	sub    $0x4,%esp
f0115794:	68 b0 04 12 f0       	push   $0xf01204b0
f0115799:	68 82 04 00 00       	push   $0x482
f011579e:	68 e2 fd 11 f0       	push   $0xf011fde2
f01157a3:	e8 eb a9 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01157a8:	e8 ed 88 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01157ad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01157b0:	74 17                	je     f01157c9 <test_kmalloc_worstfit+0xe06>
f01157b2:	83 ec 04             	sub    $0x4,%esp
f01157b5:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01157ba:	68 83 04 00 00       	push   $0x483
f01157bf:	68 e2 fd 11 f0       	push   $0xf011fde2
f01157c4:	e8 ca a9 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01157c9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01157cc:	e8 26 6c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01157d1:	29 c3                	sub    %eax,%ebx
f01157d3:	89 d8                	mov    %ebx,%eax
f01157d5:	3d 80 01 00 00       	cmp    $0x180,%eax
f01157da:	74 17                	je     f01157f3 <test_kmalloc_worstfit+0xe30>
f01157dc:	83 ec 04             	sub    $0x4,%esp
f01157df:	68 12 03 12 f0       	push   $0xf0120312
f01157e4:	68 84 04 00 00       	push   $0x484
f01157e9:	68 e2 fd 11 f0       	push   $0xf011fde2
f01157ee:	e8 a0 a9 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01157f3:	ff 45 e8             	incl   -0x18(%ebp)
f01157f6:	83 ec 08             	sub    $0x8,%esp
f01157f9:	ff 75 e8             	pushl  -0x18(%ebp)
f01157fc:	68 d0 04 12 f0       	push   $0xf01204d0
f0115801:	e8 30 1c ff ff       	call   f0107436 <cprintf>
f0115806:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0115809:	e8 e9 6b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011580e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0115811:	e8 84 88 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115816:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0115819:	83 ec 0c             	sub    $0xc,%esp
f011581c:	68 00 00 08 00       	push   $0x80000
f0115821:	e8 ff 91 ff ff       	call   f010ea25 <kmalloc>
f0115826:	83 c4 10             	add    $0x10,%esp
f0115829:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011582f:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0115836:	10 00 00 
f0115839:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011583e:	0f b6 d0             	movzbl %al,%edx
f0115841:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0115847:	01 d0                	add    %edx,%eax
f0115849:	48                   	dec    %eax
f011584a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0115850:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0115856:	ba 00 00 00 00       	mov    $0x0,%edx
f011585b:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0115861:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0115867:	29 d0                	sub    %edx,%eax
f0115869:	89 c1                	mov    %eax,%ecx
f011586b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0115872:	10 00 00 
f0115875:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011587a:	0f b6 c0             	movzbl %al,%eax
f011587d:	c1 e0 04             	shl    $0x4,%eax
f0115880:	89 c2                	mov    %eax,%edx
f0115882:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0115888:	01 d0                	add    %edx,%eax
f011588a:	48                   	dec    %eax
f011588b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0115891:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0115897:	ba 00 00 00 00       	mov    $0x0,%edx
f011589c:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01158a2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01158a8:	29 d0                	sub    %edx,%eax
f01158aa:	01 c8                	add    %ecx,%eax
f01158ac:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f01158b2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01158b8:	39 c2                	cmp    %eax,%edx
f01158ba:	74 17                	je     f01158d3 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f01158bc:	83 ec 04             	sub    $0x4,%esp
f01158bf:	68 b0 04 12 f0       	push   $0xf01204b0
f01158c4:	68 8b 04 00 00       	push   $0x48b
f01158c9:	68 e2 fd 11 f0       	push   $0xf011fde2
f01158ce:	e8 c0 a8 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01158d3:	e8 c2 87 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01158d8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01158db:	74 17                	je     f01158f4 <test_kmalloc_worstfit+0xf31>
f01158dd:	83 ec 04             	sub    $0x4,%esp
f01158e0:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01158e5:	68 8c 04 00 00       	push   $0x48c
f01158ea:	68 e2 fd 11 f0       	push   $0xf011fde2
f01158ef:	e8 9f a8 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01158f4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01158f7:	e8 fb 6a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01158fc:	29 c3                	sub    %eax,%ebx
f01158fe:	89 d8                	mov    %ebx,%eax
f0115900:	3d 80 00 00 00       	cmp    $0x80,%eax
f0115905:	74 17                	je     f011591e <test_kmalloc_worstfit+0xf5b>
f0115907:	83 ec 04             	sub    $0x4,%esp
f011590a:	68 12 03 12 f0       	push   $0xf0120312
f011590f:	68 8d 04 00 00       	push   $0x48d
f0115914:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115919:	e8 75 a8 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011591e:	ff 45 e8             	incl   -0x18(%ebp)
f0115921:	83 ec 08             	sub    $0x8,%esp
f0115924:	ff 75 e8             	pushl  -0x18(%ebp)
f0115927:	68 d0 04 12 f0       	push   $0xf01204d0
f011592c:	e8 05 1b ff ff       	call   f0107436 <cprintf>
f0115931:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0115934:	e8 be 6a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115939:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011593c:	e8 59 87 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115941:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f0115944:	83 ec 0c             	sub    $0xc,%esp
f0115947:	68 00 04 00 00       	push   $0x400
f011594c:	e8 d4 90 ff ff       	call   f010ea25 <kmalloc>
f0115951:	83 c4 10             	add    $0x10,%esp
f0115954:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011595a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0115961:	10 00 00 
f0115964:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115969:	0f b6 d0             	movzbl %al,%edx
f011596c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0115972:	01 d0                	add    %edx,%eax
f0115974:	48                   	dec    %eax
f0115975:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011597b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0115981:	ba 00 00 00 00       	mov    $0x0,%edx
f0115986:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011598c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0115992:	29 d0                	sub    %edx,%eax
f0115994:	89 c1                	mov    %eax,%ecx
f0115996:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011599d:	10 00 00 
f01159a0:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01159a5:	0f b6 c0             	movzbl %al,%eax
f01159a8:	c1 e0 04             	shl    $0x4,%eax
f01159ab:	89 c2                	mov    %eax,%edx
f01159ad:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01159b3:	01 d0                	add    %edx,%eax
f01159b5:	48                   	dec    %eax
f01159b6:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01159bc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01159c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01159c7:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01159cd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01159d3:	29 d0                	sub    %edx,%eax
f01159d5:	01 c8                	add    %ecx,%eax
f01159d7:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f01159dd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01159e3:	39 c2                	cmp    %eax,%edx
f01159e5:	74 17                	je     f01159fe <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f01159e7:	83 ec 04             	sub    $0x4,%esp
f01159ea:	68 b0 04 12 f0       	push   $0xf01204b0
f01159ef:	68 94 04 00 00       	push   $0x494
f01159f4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01159f9:	e8 95 a7 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01159fe:	e8 97 86 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115a03:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0115a06:	74 17                	je     f0115a1f <test_kmalloc_worstfit+0x105c>
f0115a08:	83 ec 04             	sub    $0x4,%esp
f0115a0b:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115a10:	68 95 04 00 00       	push   $0x495
f0115a15:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115a1a:	e8 74 a7 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0115a1f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0115a22:	e8 d0 69 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115a27:	29 c3                	sub    %eax,%ebx
f0115a29:	89 d8                	mov    %ebx,%eax
f0115a2b:	83 f8 01             	cmp    $0x1,%eax
f0115a2e:	74 17                	je     f0115a47 <test_kmalloc_worstfit+0x1084>
f0115a30:	83 ec 04             	sub    $0x4,%esp
f0115a33:	68 12 03 12 f0       	push   $0xf0120312
f0115a38:	68 96 04 00 00       	push   $0x496
f0115a3d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115a42:	e8 4c a7 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0115a47:	ff 45 e8             	incl   -0x18(%ebp)
f0115a4a:	83 ec 08             	sub    $0x8,%esp
f0115a4d:	ff 75 e8             	pushl  -0x18(%ebp)
f0115a50:	68 d0 04 12 f0       	push   $0xf01204d0
f0115a55:	e8 dc 19 ff ff       	call   f0107436 <cprintf>
f0115a5a:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0115a5d:	e8 95 69 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115a62:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0115a65:	e8 30 86 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115a6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f0115a6d:	83 ec 0c             	sub    $0xc,%esp
f0115a70:	68 00 f0 1f 00       	push   $0x1ff000
f0115a75:	e8 ab 8f ff ff       	call   f010ea25 <kmalloc>
f0115a7a:	83 c4 10             	add    $0x10,%esp
f0115a7d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f0115a83:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0115a8a:	10 00 00 
f0115a8d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115a92:	0f b6 d0             	movzbl %al,%edx
f0115a95:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0115a9b:	01 d0                	add    %edx,%eax
f0115a9d:	48                   	dec    %eax
f0115a9e:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0115aa4:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0115aaa:	ba 00 00 00 00       	mov    $0x0,%edx
f0115aaf:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0115ab5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0115abb:	29 d0                	sub    %edx,%eax
f0115abd:	89 c1                	mov    %eax,%ecx
f0115abf:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0115ac6:	10 00 00 
f0115ac9:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115ace:	0f b6 c0             	movzbl %al,%eax
f0115ad1:	c1 e0 04             	shl    $0x4,%eax
f0115ad4:	89 c2                	mov    %eax,%edx
f0115ad6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0115adc:	01 d0                	add    %edx,%eax
f0115ade:	48                   	dec    %eax
f0115adf:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0115ae5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115aeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0115af0:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0115af6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0115afc:	29 d0                	sub    %edx,%eax
f0115afe:	01 c8                	add    %ecx,%eax
f0115b00:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f0115b06:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0115b0c:	39 c2                	cmp    %eax,%edx
f0115b0e:	74 17                	je     f0115b27 <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f0115b10:	83 ec 04             	sub    $0x4,%esp
f0115b13:	68 b0 04 12 f0       	push   $0xf01204b0
f0115b18:	68 9d 04 00 00       	push   $0x49d
f0115b1d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115b22:	e8 6c a6 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115b27:	e8 6e 85 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115b2c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0115b2f:	74 17                	je     f0115b48 <test_kmalloc_worstfit+0x1185>
f0115b31:	83 ec 04             	sub    $0x4,%esp
f0115b34:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115b39:	68 9e 04 00 00       	push   $0x49e
f0115b3e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115b43:	e8 4b a6 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0115b48:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0115b4b:	e8 a7 68 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115b50:	29 c3                	sub    %eax,%ebx
f0115b52:	89 d8                	mov    %ebx,%eax
f0115b54:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0115b59:	74 17                	je     f0115b72 <test_kmalloc_worstfit+0x11af>
f0115b5b:	83 ec 04             	sub    $0x4,%esp
f0115b5e:	68 12 03 12 f0       	push   $0xf0120312
f0115b63:	68 9f 04 00 00       	push   $0x49f
f0115b68:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115b6d:	e8 21 a6 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0115b72:	ff 45 e8             	incl   -0x18(%ebp)
f0115b75:	83 ec 08             	sub    $0x8,%esp
f0115b78:	ff 75 e8             	pushl  -0x18(%ebp)
f0115b7b:	68 d0 04 12 f0       	push   $0xf01204d0
f0115b80:	e8 b1 18 ff ff       	call   f0107436 <cprintf>
f0115b85:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f0115b88:	e8 6a 68 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115b8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0115b90:	e8 05 85 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115b95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f0115b98:	83 ec 0c             	sub    $0xc,%esp
f0115b9b:	68 00 00 40 00       	push   $0x400000
f0115ba0:	e8 80 8e ff ff       	call   f010ea25 <kmalloc>
f0115ba5:	83 c4 10             	add    $0x10,%esp
f0115ba8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f0115bae:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0115bb4:	85 c0                	test   %eax,%eax
f0115bb6:	74 17                	je     f0115bcf <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f0115bb8:	83 ec 04             	sub    $0x4,%esp
f0115bbb:	68 b0 04 12 f0       	push   $0xf01204b0
f0115bc0:	68 a7 04 00 00       	push   $0x4a7
f0115bc5:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115bca:	e8 c4 a5 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115bcf:	e8 c6 84 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115bd4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0115bd7:	74 17                	je     f0115bf0 <test_kmalloc_worstfit+0x122d>
f0115bd9:	83 ec 04             	sub    $0x4,%esp
f0115bdc:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115be1:	68 a8 04 00 00       	push   $0x4a8
f0115be6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115beb:	e8 a3 a5 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f0115bf0:	e8 02 68 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115bf5:	89 c2                	mov    %eax,%edx
f0115bf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115bfa:	39 c2                	cmp    %eax,%edx
f0115bfc:	74 17                	je     f0115c15 <test_kmalloc_worstfit+0x1252>
f0115bfe:	83 ec 04             	sub    $0x4,%esp
f0115c01:	68 12 03 12 f0       	push   $0xf0120312
f0115c06:	68 a9 04 00 00       	push   $0x4a9
f0115c0b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115c10:	e8 7e a5 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0115c15:	ff 45 e8             	incl   -0x18(%ebp)
f0115c18:	83 ec 08             	sub    $0x8,%esp
f0115c1b:	ff 75 e8             	pushl  -0x18(%ebp)
f0115c1e:	68 d0 04 12 f0       	push   $0xf01204d0
f0115c23:	e8 0e 18 ff ff       	call   f0107436 <cprintf>
f0115c28:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f0115c2b:	83 ec 0c             	sub    $0xc,%esp
f0115c2e:	68 e4 04 12 f0       	push   $0xf01204e4
f0115c33:	e8 fe 17 ff ff       	call   f0107436 <cprintf>
f0115c38:	83 c4 10             	add    $0x10,%esp


	return 1;
f0115c3b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115c40:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0115c43:	5b                   	pop    %ebx
f0115c44:	5f                   	pop    %edi
f0115c45:	5d                   	pop    %ebp
f0115c46:	c3                   	ret    

f0115c47 <test_kfree>:

int test_kfree()
{
f0115c47:	55                   	push   %ebp
f0115c48:	89 e5                	mov    %esp,%ebp
f0115c4a:	57                   	push   %edi
f0115c4b:	53                   	push   %ebx
f0115c4c:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f0115c52:	83 ec 0c             	sub    $0xc,%esp
f0115c55:	68 24 fd 11 f0       	push   $0xf011fd24
f0115c5a:	e8 d7 17 ff ff       	call   f0107436 <cprintf>
f0115c5f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0115c62:	83 ec 0c             	sub    $0xc,%esp
f0115c65:	68 54 fd 11 f0       	push   $0xf011fd54
f0115c6a:	e8 c7 17 ff ff       	call   f0107436 <cprintf>
f0115c6f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0115c72:	83 ec 0c             	sub    $0xc,%esp
f0115c75:	68 24 fd 11 f0       	push   $0xf011fd24
f0115c7a:	e8 b7 17 ff ff       	call   f0107436 <cprintf>
f0115c7f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0115c82:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0115c86:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0115c8a:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0115c90:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0115c96:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0115c9d:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0115ca4:	e8 4e 67 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115ca9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0115cac:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0115cb2:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115cb7:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cbc:	89 d7                	mov    %edx,%edi
f0115cbe:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0115cc0:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f0115cc6:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115ccb:	b8 00 00 00 00       	mov    $0x0,%eax
f0115cd0:	89 d7                	mov    %edx,%edi
f0115cd2:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0115cd4:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0115cda:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115cdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0115ce4:	89 d7                	mov    %edx,%edi
f0115ce6:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115ce8:	e8 0a 67 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115ced:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115cf0:	e8 a5 83 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115cf5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0115cf8:	83 ec 0c             	sub    $0xc,%esp
f0115cfb:	68 00 fc 1f 00       	push   $0x1ffc00
f0115d00:	e8 20 8d ff ff       	call   f010ea25 <kmalloc>
f0115d05:	83 c4 10             	add    $0x10,%esp
f0115d08:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115d0e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0115d14:	89 c1                	mov    %eax,%ecx
f0115d16:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0115d1d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115d22:	0f b6 d0             	movzbl %al,%edx
f0115d25:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115d28:	01 d0                	add    %edx,%eax
f0115d2a:	48                   	dec    %eax
f0115d2b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0115d2e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115d31:	ba 00 00 00 00       	mov    $0x0,%edx
f0115d36:	f7 75 c8             	divl   -0x38(%ebp)
f0115d39:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115d3c:	29 d0                	sub    %edx,%eax
f0115d3e:	89 c3                	mov    %eax,%ebx
f0115d40:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0115d47:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115d4c:	0f b6 c0             	movzbl %al,%eax
f0115d4f:	c1 e0 04             	shl    $0x4,%eax
f0115d52:	89 c2                	mov    %eax,%edx
f0115d54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115d57:	01 d0                	add    %edx,%eax
f0115d59:	48                   	dec    %eax
f0115d5a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0115d5d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115d60:	ba 00 00 00 00       	mov    $0x0,%edx
f0115d65:	f7 75 c0             	divl   -0x40(%ebp)
f0115d68:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115d6b:	29 d0                	sub    %edx,%eax
f0115d6d:	01 d8                	add    %ebx,%eax
f0115d6f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0115d74:	39 c1                	cmp    %eax,%ecx
f0115d76:	74 17                	je     f0115d8f <test_kfree+0x148>
f0115d78:	83 ec 04             	sub    $0x4,%esp
f0115d7b:	68 c0 fe 11 f0       	push   $0xf011fec0
f0115d80:	68 d1 04 00 00       	push   $0x4d1
f0115d85:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115d8a:	e8 04 a4 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115d8f:	e8 06 83 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115d94:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115d97:	74 17                	je     f0115db0 <test_kfree+0x169>
f0115d99:	83 ec 04             	sub    $0x4,%esp
f0115d9c:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115da1:	68 d2 04 00 00       	push   $0x4d2
f0115da6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115dab:	e8 e3 a3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115db0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115db3:	e8 3f 66 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115db8:	29 c3                	sub    %eax,%ebx
f0115dba:	89 d8                	mov    %ebx,%eax
f0115dbc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115dc1:	74 17                	je     f0115dda <test_kfree+0x193>
f0115dc3:	83 ec 04             	sub    $0x4,%esp
f0115dc6:	68 5c fe 11 f0       	push   $0xf011fe5c
f0115dcb:	68 d3 04 00 00       	push   $0x4d3
f0115dd0:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115dd5:	e8 b9 a3 fe ff       	call   f0100193 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0115dda:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0115de1:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115de4:	e8 0e 66 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115de9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115dec:	e8 a9 82 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115df1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0115df4:	83 ec 0c             	sub    $0xc,%esp
f0115df7:	68 00 fc 1f 00       	push   $0x1ffc00
f0115dfc:	e8 24 8c ff ff       	call   f010ea25 <kmalloc>
f0115e01:	83 c4 10             	add    $0x10,%esp
f0115e04:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115e0a:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0115e10:	89 c1                	mov    %eax,%ecx
f0115e12:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0115e19:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115e1e:	0f b6 d0             	movzbl %al,%edx
f0115e21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115e24:	01 d0                	add    %edx,%eax
f0115e26:	48                   	dec    %eax
f0115e27:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0115e2a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115e2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0115e32:	f7 75 b8             	divl   -0x48(%ebp)
f0115e35:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115e38:	29 d0                	sub    %edx,%eax
f0115e3a:	89 c3                	mov    %eax,%ebx
f0115e3c:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0115e43:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115e48:	0f b6 c0             	movzbl %al,%eax
f0115e4b:	c1 e0 04             	shl    $0x4,%eax
f0115e4e:	89 c2                	mov    %eax,%edx
f0115e50:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115e53:	01 d0                	add    %edx,%eax
f0115e55:	48                   	dec    %eax
f0115e56:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0115e59:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0115e61:	f7 75 b0             	divl   -0x50(%ebp)
f0115e64:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e67:	29 d0                	sub    %edx,%eax
f0115e69:	01 d8                	add    %ebx,%eax
f0115e6b:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0115e70:	39 c1                	cmp    %eax,%ecx
f0115e72:	74 17                	je     f0115e8b <test_kfree+0x244>
f0115e74:	83 ec 04             	sub    $0x4,%esp
f0115e77:	68 c0 fe 11 f0       	push   $0xf011fec0
f0115e7c:	68 da 04 00 00       	push   $0x4da
f0115e81:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115e86:	e8 08 a3 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115e8b:	e8 0a 82 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115e90:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115e93:	74 17                	je     f0115eac <test_kfree+0x265>
f0115e95:	83 ec 04             	sub    $0x4,%esp
f0115e98:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115e9d:	68 db 04 00 00       	push   $0x4db
f0115ea2:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115ea7:	e8 e7 a2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115eac:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115eaf:	e8 43 65 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115eb4:	29 c3                	sub    %eax,%ebx
f0115eb6:	89 d8                	mov    %ebx,%eax
f0115eb8:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115ebd:	74 17                	je     f0115ed6 <test_kfree+0x28f>
f0115ebf:	83 ec 04             	sub    $0x4,%esp
f0115ec2:	68 5c fe 11 f0       	push   $0xf011fe5c
f0115ec7:	68 dc 04 00 00       	push   $0x4dc
f0115ecc:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115ed1:	e8 bd a2 fe ff       	call   f0100193 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0115ed6:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0115edd:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0115ee0:	e8 12 65 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115ee5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115ee8:	e8 ad 81 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115eed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0115ef0:	83 ec 0c             	sub    $0xc,%esp
f0115ef3:	68 00 08 00 00       	push   $0x800
f0115ef8:	e8 28 8b ff ff       	call   f010ea25 <kmalloc>
f0115efd:	83 c4 10             	add    $0x10,%esp
f0115f00:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115f06:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115f0c:	89 c1                	mov    %eax,%ecx
f0115f0e:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0115f15:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115f1a:	0f b6 d0             	movzbl %al,%edx
f0115f1d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115f20:	01 d0                	add    %edx,%eax
f0115f22:	48                   	dec    %eax
f0115f23:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0115f26:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f29:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f2e:	f7 75 a8             	divl   -0x58(%ebp)
f0115f31:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115f34:	29 d0                	sub    %edx,%eax
f0115f36:	89 c3                	mov    %eax,%ebx
f0115f38:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0115f3f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0115f44:	0f b6 c0             	movzbl %al,%eax
f0115f47:	c1 e0 04             	shl    $0x4,%eax
f0115f4a:	89 c2                	mov    %eax,%edx
f0115f4c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115f4f:	01 d0                	add    %edx,%eax
f0115f51:	48                   	dec    %eax
f0115f52:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0115f55:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115f58:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f5d:	f7 75 a0             	divl   -0x60(%ebp)
f0115f60:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115f63:	29 d0                	sub    %edx,%eax
f0115f65:	01 d8                	add    %ebx,%eax
f0115f67:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0115f6c:	39 c1                	cmp    %eax,%ecx
f0115f6e:	74 17                	je     f0115f87 <test_kfree+0x340>
f0115f70:	83 ec 04             	sub    $0x4,%esp
f0115f73:	68 c0 fe 11 f0       	push   $0xf011fec0
f0115f78:	68 e3 04 00 00       	push   $0x4e3
f0115f7d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115f82:	e8 0c a2 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115f87:	e8 0e 81 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0115f8c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115f8f:	74 17                	je     f0115fa8 <test_kfree+0x361>
f0115f91:	83 ec 04             	sub    $0x4,%esp
f0115f94:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0115f99:	68 e4 04 00 00       	push   $0x4e4
f0115f9e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115fa3:	e8 eb a1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115fa8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115fab:	e8 47 64 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0115fb0:	29 c3                	sub    %eax,%ebx
f0115fb2:	89 d8                	mov    %ebx,%eax
f0115fb4:	83 f8 01             	cmp    $0x1,%eax
f0115fb7:	74 17                	je     f0115fd0 <test_kfree+0x389>
f0115fb9:	83 ec 04             	sub    $0x4,%esp
f0115fbc:	68 5c fe 11 f0       	push   $0xf011fe5c
f0115fc1:	68 e5 04 00 00       	push   $0x4e5
f0115fc6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0115fcb:	e8 c3 a1 fe ff       	call   f0100193 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0115fd0:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0115fd7:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0115fda:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115fe0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0115fe3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115fea:	eb 0e                	jmp    f0115ffa <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f0115fec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115fef:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115ff2:	01 d0                	add    %edx,%eax
f0115ff4:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0115ff7:	ff 45 f4             	incl   -0xc(%ebp)
f0115ffa:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0116000:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116003:	7f e7                	jg     f0115fec <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116005:	e8 ed 63 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011600a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011600d:	e8 88 80 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116012:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0116015:	83 ec 0c             	sub    $0xc,%esp
f0116018:	68 00 08 00 00       	push   $0x800
f011601d:	e8 03 8a ff ff       	call   f010ea25 <kmalloc>
f0116022:	83 c4 10             	add    $0x10,%esp
f0116025:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011602b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0116031:	89 c1                	mov    %eax,%ecx
f0116033:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011603a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011603f:	0f b6 d0             	movzbl %al,%edx
f0116042:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116045:	01 d0                	add    %edx,%eax
f0116047:	48                   	dec    %eax
f0116048:	89 45 90             	mov    %eax,-0x70(%ebp)
f011604b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011604e:	ba 00 00 00 00       	mov    $0x0,%edx
f0116053:	f7 75 94             	divl   -0x6c(%ebp)
f0116056:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116059:	29 d0                	sub    %edx,%eax
f011605b:	89 c3                	mov    %eax,%ebx
f011605d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0116064:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116069:	0f b6 c0             	movzbl %al,%eax
f011606c:	c1 e0 04             	shl    $0x4,%eax
f011606f:	89 c2                	mov    %eax,%edx
f0116071:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116074:	01 d0                	add    %edx,%eax
f0116076:	48                   	dec    %eax
f0116077:	89 45 88             	mov    %eax,-0x78(%ebp)
f011607a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011607d:	ba 00 00 00 00       	mov    $0x0,%edx
f0116082:	f7 75 8c             	divl   -0x74(%ebp)
f0116085:	8b 45 88             	mov    -0x78(%ebp),%eax
f0116088:	29 d0                	sub    %edx,%eax
f011608a:	01 d8                	add    %ebx,%eax
f011608c:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0116091:	39 c1                	cmp    %eax,%ecx
f0116093:	74 17                	je     f01160ac <test_kfree+0x465>
f0116095:	83 ec 04             	sub    $0x4,%esp
f0116098:	68 c0 fe 11 f0       	push   $0xf011fec0
f011609d:	68 f1 04 00 00       	push   $0x4f1
f01160a2:	68 e2 fd 11 f0       	push   $0xf011fde2
f01160a7:	e8 e7 a0 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01160ac:	e8 e9 7f ff ff       	call   f010e09a <pf_calculate_free_frames>
f01160b1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01160b4:	74 17                	je     f01160cd <test_kfree+0x486>
f01160b6:	83 ec 04             	sub    $0x4,%esp
f01160b9:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01160be:	68 f2 04 00 00       	push   $0x4f2
f01160c3:	68 e2 fd 11 f0       	push   $0xf011fde2
f01160c8:	e8 c6 a0 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01160cd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01160d0:	e8 22 63 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01160d5:	29 c3                	sub    %eax,%ebx
f01160d7:	89 d8                	mov    %ebx,%eax
f01160d9:	83 f8 01             	cmp    $0x1,%eax
f01160dc:	74 17                	je     f01160f5 <test_kfree+0x4ae>
f01160de:	83 ec 04             	sub    $0x4,%esp
f01160e1:	68 5c fe 11 f0       	push   $0xf011fe5c
f01160e6:	68 f3 04 00 00       	push   $0x4f3
f01160eb:	68 e2 fd 11 f0       	push   $0xf011fde2
f01160f0:	e8 9e a0 fe ff       	call   f0100193 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01160f5:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f01160fc:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01160ff:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0116105:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0116108:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011610f:	eb 0e                	jmp    f011611f <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f0116111:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116114:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116117:	01 d0                	add    %edx,%eax
f0116119:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011611c:	ff 45 f4             	incl   -0xc(%ebp)
f011611f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0116125:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116128:	7f e7                	jg     f0116111 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011612a:	e8 c8 62 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011612f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116132:	e8 63 7f ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116137:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011613a:	83 ec 0c             	sub    $0xc,%esp
f011613d:	68 00 1c 00 00       	push   $0x1c00
f0116142:	e8 de 88 ff ff       	call   f010ea25 <kmalloc>
f0116147:	83 c4 10             	add    $0x10,%esp
f011614a:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116150:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116156:	89 c1                	mov    %eax,%ecx
f0116158:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011615f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116164:	0f b6 d0             	movzbl %al,%edx
f0116167:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011616a:	01 d0                	add    %edx,%eax
f011616c:	48                   	dec    %eax
f011616d:	89 45 80             	mov    %eax,-0x80(%ebp)
f0116170:	8b 45 80             	mov    -0x80(%ebp),%eax
f0116173:	ba 00 00 00 00       	mov    $0x0,%edx
f0116178:	f7 75 84             	divl   -0x7c(%ebp)
f011617b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011617e:	29 d0                	sub    %edx,%eax
f0116180:	89 c3                	mov    %eax,%ebx
f0116182:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0116189:	10 00 00 
f011618c:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116191:	0f b6 c0             	movzbl %al,%eax
f0116194:	c1 e0 04             	shl    $0x4,%eax
f0116197:	89 c2                	mov    %eax,%edx
f0116199:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011619f:	01 d0                	add    %edx,%eax
f01161a1:	48                   	dec    %eax
f01161a2:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01161a8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01161ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01161b3:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01161b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01161bf:	29 d0                	sub    %edx,%eax
f01161c1:	01 d8                	add    %ebx,%eax
f01161c3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01161c8:	39 c1                	cmp    %eax,%ecx
f01161ca:	74 17                	je     f01161e3 <test_kfree+0x59c>
f01161cc:	83 ec 04             	sub    $0x4,%esp
f01161cf:	68 c0 fe 11 f0       	push   $0xf011fec0
f01161d4:	68 ff 04 00 00       	push   $0x4ff
f01161d9:	68 e2 fd 11 f0       	push   $0xf011fde2
f01161de:	e8 b0 9f fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01161e3:	e8 b2 7e ff ff       	call   f010e09a <pf_calculate_free_frames>
f01161e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01161eb:	74 17                	je     f0116204 <test_kfree+0x5bd>
f01161ed:	83 ec 04             	sub    $0x4,%esp
f01161f0:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01161f5:	68 00 05 00 00       	push   $0x500
f01161fa:	68 e2 fd 11 f0       	push   $0xf011fde2
f01161ff:	e8 8f 9f fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116204:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116207:	e8 eb 61 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011620c:	29 c3                	sub    %eax,%ebx
f011620e:	89 d8                	mov    %ebx,%eax
f0116210:	83 f8 02             	cmp    $0x2,%eax
f0116213:	74 17                	je     f011622c <test_kfree+0x5e5>
f0116215:	83 ec 04             	sub    $0x4,%esp
f0116218:	68 5c fe 11 f0       	push   $0xf011fe5c
f011621d:	68 01 05 00 00       	push   $0x501
f0116222:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116227:	e8 67 9f fe ff       	call   f0100193 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011622c:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f0116233:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0116236:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011623c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011623f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116246:	eb 0e                	jmp    f0116256 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f0116248:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011624b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011624e:	01 d0                	add    %edx,%eax
f0116250:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0116253:	ff 45 f4             	incl   -0xc(%ebp)
f0116256:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011625c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011625f:	7f e7                	jg     f0116248 <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0116261:	e8 91 61 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116266:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116269:	e8 2c 7e ff ff       	call   f010e09a <pf_calculate_free_frames>
f011626e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0116271:	83 ec 0c             	sub    $0xc,%esp
f0116274:	68 00 fc 2f 00       	push   $0x2ffc00
f0116279:	e8 a7 87 ff ff       	call   f010ea25 <kmalloc>
f011627e:	83 c4 10             	add    $0x10,%esp
f0116281:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116287:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011628d:	89 c1                	mov    %eax,%ecx
f011628f:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0116296:	10 00 00 
f0116299:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011629e:	0f b6 d0             	movzbl %al,%edx
f01162a1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01162a7:	01 d0                	add    %edx,%eax
f01162a9:	48                   	dec    %eax
f01162aa:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01162b0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01162b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01162bb:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01162c1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01162c7:	29 d0                	sub    %edx,%eax
f01162c9:	89 c3                	mov    %eax,%ebx
f01162cb:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01162d2:	10 00 00 
f01162d5:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01162da:	0f b6 c0             	movzbl %al,%eax
f01162dd:	c1 e0 04             	shl    $0x4,%eax
f01162e0:	89 c2                	mov    %eax,%edx
f01162e2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01162e8:	01 d0                	add    %edx,%eax
f01162ea:	48                   	dec    %eax
f01162eb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01162f1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01162f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01162fc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0116302:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0116308:	29 d0                	sub    %edx,%eax
f011630a:	01 d8                	add    %ebx,%eax
f011630c:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0116311:	39 c1                	cmp    %eax,%ecx
f0116313:	74 17                	je     f011632c <test_kfree+0x6e5>
f0116315:	83 ec 04             	sub    $0x4,%esp
f0116318:	68 c0 fe 11 f0       	push   $0xf011fec0
f011631d:	68 0d 05 00 00       	push   $0x50d
f0116322:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116327:	e8 67 9e fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011632c:	e8 69 7d ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116331:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116334:	74 17                	je     f011634d <test_kfree+0x706>
f0116336:	83 ec 04             	sub    $0x4,%esp
f0116339:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011633e:	68 0e 05 00 00       	push   $0x50e
f0116343:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116348:	e8 46 9e fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011634d:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116350:	e8 a2 60 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116355:	29 c3                	sub    %eax,%ebx
f0116357:	89 d8                	mov    %ebx,%eax
f0116359:	3d 00 03 00 00       	cmp    $0x300,%eax
f011635e:	74 17                	je     f0116377 <test_kfree+0x730>
f0116360:	83 ec 04             	sub    $0x4,%esp
f0116363:	68 5c fe 11 f0       	push   $0xf011fe5c
f0116368:	68 0f 05 00 00       	push   $0x50f
f011636d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116372:	e8 1c 9e fe ff       	call   f0100193 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0116377:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f011637e:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0116381:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116387:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011638a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116391:	eb 0e                	jmp    f01163a1 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f0116393:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116396:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116399:	01 d0                	add    %edx,%eax
f011639b:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011639e:	ff 45 f4             	incl   -0xc(%ebp)
f01163a1:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01163a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01163aa:	7f e7                	jg     f0116393 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01163ac:	e8 46 60 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01163b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01163b4:	e8 e1 7c ff ff       	call   f010e09a <pf_calculate_free_frames>
f01163b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01163bc:	83 ec 0c             	sub    $0xc,%esp
f01163bf:	68 00 fc 5f 00       	push   $0x5ffc00
f01163c4:	e8 5c 86 ff ff       	call   f010ea25 <kmalloc>
f01163c9:	83 c4 10             	add    $0x10,%esp
f01163cc:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01163d2:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01163d8:	89 c1                	mov    %eax,%ecx
f01163da:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01163e1:	10 00 00 
f01163e4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01163e9:	0f b6 d0             	movzbl %al,%edx
f01163ec:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01163f2:	01 d0                	add    %edx,%eax
f01163f4:	48                   	dec    %eax
f01163f5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01163fb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0116401:	ba 00 00 00 00       	mov    $0x0,%edx
f0116406:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011640c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0116412:	29 d0                	sub    %edx,%eax
f0116414:	89 c3                	mov    %eax,%ebx
f0116416:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011641d:	10 00 00 
f0116420:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116425:	0f b6 c0             	movzbl %al,%eax
f0116428:	c1 e0 04             	shl    $0x4,%eax
f011642b:	89 c2                	mov    %eax,%edx
f011642d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0116433:	01 d0                	add    %edx,%eax
f0116435:	48                   	dec    %eax
f0116436:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011643c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0116442:	ba 00 00 00 00       	mov    $0x0,%edx
f0116447:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011644d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0116453:	29 d0                	sub    %edx,%eax
f0116455:	01 d8                	add    %ebx,%eax
f0116457:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011645c:	39 c1                	cmp    %eax,%ecx
f011645e:	74 17                	je     f0116477 <test_kfree+0x830>
f0116460:	83 ec 04             	sub    $0x4,%esp
f0116463:	68 c0 fe 11 f0       	push   $0xf011fec0
f0116468:	68 1b 05 00 00       	push   $0x51b
f011646d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116472:	e8 1c 9d fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116477:	e8 1e 7c ff ff       	call   f010e09a <pf_calculate_free_frames>
f011647c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011647f:	74 17                	je     f0116498 <test_kfree+0x851>
f0116481:	83 ec 04             	sub    $0x4,%esp
f0116484:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116489:	68 1c 05 00 00       	push   $0x51c
f011648e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116493:	e8 fb 9c fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116498:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011649b:	e8 57 5f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01164a0:	29 c3                	sub    %eax,%ebx
f01164a2:	89 d8                	mov    %ebx,%eax
f01164a4:	3d 00 06 00 00       	cmp    $0x600,%eax
f01164a9:	74 17                	je     f01164c2 <test_kfree+0x87b>
f01164ab:	83 ec 04             	sub    $0x4,%esp
f01164ae:	68 5c fe 11 f0       	push   $0xf011fe5c
f01164b3:	68 1d 05 00 00       	push   $0x51d
f01164b8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01164bd:	e8 d1 9c fe ff       	call   f0100193 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01164c2:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f01164c9:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01164cc:	e8 26 5f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01164d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01164d4:	e8 c1 7b ff ff       	call   f010e09a <pf_calculate_free_frames>
f01164d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01164dc:	83 ec 0c             	sub    $0xc,%esp
f01164df:	68 00 38 00 00       	push   $0x3800
f01164e4:	e8 3c 85 ff ff       	call   f010ea25 <kmalloc>
f01164e9:	83 c4 10             	add    $0x10,%esp
f01164ec:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01164f2:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01164f8:	89 c1                	mov    %eax,%ecx
f01164fa:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0116501:	10 00 00 
f0116504:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116509:	0f b6 d0             	movzbl %al,%edx
f011650c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0116512:	01 d0                	add    %edx,%eax
f0116514:	48                   	dec    %eax
f0116515:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011651b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0116521:	ba 00 00 00 00       	mov    $0x0,%edx
f0116526:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011652c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0116532:	29 d0                	sub    %edx,%eax
f0116534:	89 c3                	mov    %eax,%ebx
f0116536:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011653d:	10 00 00 
f0116540:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116545:	0f b6 c0             	movzbl %al,%eax
f0116548:	c1 e0 04             	shl    $0x4,%eax
f011654b:	89 c2                	mov    %eax,%edx
f011654d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0116553:	01 d0                	add    %edx,%eax
f0116555:	48                   	dec    %eax
f0116556:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011655c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0116562:	ba 00 00 00 00       	mov    $0x0,%edx
f0116567:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011656d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0116573:	29 d0                	sub    %edx,%eax
f0116575:	01 d8                	add    %ebx,%eax
f0116577:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011657c:	39 c1                	cmp    %eax,%ecx
f011657e:	74 17                	je     f0116597 <test_kfree+0x950>
f0116580:	83 ec 04             	sub    $0x4,%esp
f0116583:	68 c0 fe 11 f0       	push   $0xf011fec0
f0116588:	68 24 05 00 00       	push   $0x524
f011658d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116592:	e8 fc 9b fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116597:	e8 fe 7a ff ff       	call   f010e09a <pf_calculate_free_frames>
f011659c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011659f:	74 17                	je     f01165b8 <test_kfree+0x971>
f01165a1:	83 ec 04             	sub    $0x4,%esp
f01165a4:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01165a9:	68 25 05 00 00       	push   $0x525
f01165ae:	68 e2 fd 11 f0       	push   $0xf011fde2
f01165b3:	e8 db 9b fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01165b8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01165bb:	e8 37 5e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01165c0:	29 c3                	sub    %eax,%ebx
f01165c2:	89 d8                	mov    %ebx,%eax
f01165c4:	83 f8 04             	cmp    $0x4,%eax
f01165c7:	74 17                	je     f01165e0 <test_kfree+0x999>
f01165c9:	83 ec 04             	sub    $0x4,%esp
f01165cc:	68 5c fe 11 f0       	push   $0xf011fe5c
f01165d1:	68 26 05 00 00       	push   $0x526
f01165d6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01165db:	e8 b3 9b fe ff       	call   f0100193 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01165e0:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f01165e7:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01165ea:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01165f0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01165f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01165fa:	eb 0e                	jmp    f011660a <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f01165fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01165ff:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116602:	01 d0                	add    %edx,%eax
f0116604:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0116607:	ff 45 f4             	incl   -0xc(%ebp)
f011660a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0116610:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116613:	7f e7                	jg     f01165fc <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0116615:	e8 dd 5d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011661a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116620:	e8 75 7a ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116625:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f011662b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0116631:	83 ec 0c             	sub    $0xc,%esp
f0116634:	50                   	push   %eax
f0116635:	e8 05 84 ff ff       	call   f010ea3f <kfree>
f011663a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011663d:	e8 58 7a ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116642:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0116648:	74 17                	je     f0116661 <test_kfree+0xa1a>
f011664a:	83 ec 04             	sub    $0x4,%esp
f011664d:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116652:	68 35 05 00 00       	push   $0x535
f0116657:	68 e2 fd 11 f0       	push   $0xf011fde2
f011665c:	e8 32 9b fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0116661:	e8 91 5d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116666:	89 c2                	mov    %eax,%edx
f0116668:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011666e:	29 c2                	sub    %eax,%edx
f0116670:	89 d0                	mov    %edx,%eax
f0116672:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116677:	74 17                	je     f0116690 <test_kfree+0xa49>
f0116679:	83 ec 04             	sub    $0x4,%esp
f011667c:	68 20 05 12 f0       	push   $0xf0120520
f0116681:	68 36 05 00 00       	push   $0x536
f0116686:	68 e2 fd 11 f0       	push   $0xf011fde2
f011668b:	e8 03 9b fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116690:	e8 62 5d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116695:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011669b:	e8 fa 79 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01166a0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01166a6:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01166ac:	83 ec 0c             	sub    $0xc,%esp
f01166af:	50                   	push   %eax
f01166b0:	e8 8a 83 ff ff       	call   f010ea3f <kfree>
f01166b5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01166b8:	e8 dd 79 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01166bd:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01166c3:	74 17                	je     f01166dc <test_kfree+0xa95>
f01166c5:	83 ec 04             	sub    $0x4,%esp
f01166c8:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01166cd:	68 3c 05 00 00       	push   $0x53c
f01166d2:	68 e2 fd 11 f0       	push   $0xf011fde2
f01166d7:	e8 b7 9a fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01166dc:	e8 16 5d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01166e1:	89 c2                	mov    %eax,%edx
f01166e3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01166e9:	29 c2                	sub    %eax,%edx
f01166eb:	89 d0                	mov    %edx,%eax
f01166ed:	3d 00 02 00 00       	cmp    $0x200,%eax
f01166f2:	74 17                	je     f011670b <test_kfree+0xac4>
f01166f4:	83 ec 04             	sub    $0x4,%esp
f01166f7:	68 20 05 12 f0       	push   $0xf0120520
f01166fc:	68 3d 05 00 00       	push   $0x53d
f0116701:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116706:	e8 88 9a fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011670b:	e8 e7 5c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116710:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116716:	e8 7f 79 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011671b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0116721:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0116727:	83 ec 0c             	sub    $0xc,%esp
f011672a:	50                   	push   %eax
f011672b:	e8 0f 83 ff ff       	call   f010ea3f <kfree>
f0116730:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116733:	e8 62 79 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116738:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011673e:	74 17                	je     f0116757 <test_kfree+0xb10>
f0116740:	83 ec 04             	sub    $0x4,%esp
f0116743:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116748:	68 43 05 00 00       	push   $0x543
f011674d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116752:	e8 3c 9a fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0116757:	e8 9b 5c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011675c:	89 c2                	mov    %eax,%edx
f011675e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116764:	29 c2                	sub    %eax,%edx
f0116766:	89 d0                	mov    %edx,%eax
f0116768:	3d 00 06 00 00       	cmp    $0x600,%eax
f011676d:	74 17                	je     f0116786 <test_kfree+0xb3f>
f011676f:	83 ec 04             	sub    $0x4,%esp
f0116772:	68 20 05 12 f0       	push   $0xf0120520
f0116777:	68 44 05 00 00       	push   $0x544
f011677c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116781:	e8 0d 9a fe ff       	call   f0100193 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0116786:	83 ec 0c             	sub    $0xc,%esp
f0116789:	68 58 05 12 f0       	push   $0xf0120558
f011678e:	e8 a3 0c ff ff       	call   f0107436 <cprintf>
f0116793:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0116796:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011679c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011679f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01167a6:	eb 1e                	jmp    f01167c6 <test_kfree+0xb7f>
		{
			sums[2] += ptr[i] ;
f01167a8:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f01167ae:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01167b1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01167b4:	01 c8                	add    %ecx,%eax
f01167b6:	8a 00                	mov    (%eax),%al
f01167b8:	0f be c0             	movsbl %al,%eax
f01167bb:	01 d0                	add    %edx,%eax
f01167bd:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01167c3:	ff 45 f4             	incl   -0xc(%ebp)
f01167c6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01167cc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01167cf:	7f d7                	jg     f01167a8 <test_kfree+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01167d1:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f01167d7:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01167dd:	01 c0                	add    %eax,%eax
f01167df:	39 c2                	cmp    %eax,%edx
f01167e1:	74 17                	je     f01167fa <test_kfree+0xbb3>
f01167e3:	83 ec 04             	sub    $0x4,%esp
f01167e6:	68 7c 05 12 f0       	push   $0xf012057c
f01167eb:	68 51 05 00 00       	push   $0x551
f01167f0:	68 e2 fd 11 f0       	push   $0xf011fde2
f01167f5:	e8 99 99 fe ff       	call   f0100193 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01167fa:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0116800:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0116803:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011680a:	eb 1e                	jmp    f011682a <test_kfree+0xbe3>
		{
			sums[3] += ptr[i] ;
f011680c:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0116812:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116815:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116818:	01 c8                	add    %ecx,%eax
f011681a:	8a 00                	mov    (%eax),%al
f011681c:	0f be c0             	movsbl %al,%eax
f011681f:	01 d0                	add    %edx,%eax
f0116821:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0116827:	ff 45 f4             	incl   -0xc(%ebp)
f011682a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0116830:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116833:	7f d7                	jg     f011680c <test_kfree+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0116835:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f011683b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0116841:	89 c1                	mov    %eax,%ecx
f0116843:	01 c9                	add    %ecx,%ecx
f0116845:	01 c8                	add    %ecx,%eax
f0116847:	39 c2                	cmp    %eax,%edx
f0116849:	74 17                	je     f0116862 <test_kfree+0xc1b>
f011684b:	83 ec 04             	sub    $0x4,%esp
f011684e:	68 7c 05 12 f0       	push   $0xf012057c
f0116853:	68 59 05 00 00       	push   $0x559
f0116858:	68 e2 fd 11 f0       	push   $0xf011fde2
f011685d:	e8 31 99 fe ff       	call   f0100193 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0116862:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116868:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011686b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116872:	eb 1e                	jmp    f0116892 <test_kfree+0xc4b>
		{
			sums[4] += ptr[i] ;
f0116874:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f011687a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011687d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116880:	01 c8                	add    %ecx,%eax
f0116882:	8a 00                	mov    (%eax),%al
f0116884:	0f be c0             	movsbl %al,%eax
f0116887:	01 d0                	add    %edx,%eax
f0116889:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011688f:	ff 45 f4             	incl   -0xc(%ebp)
f0116892:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0116898:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011689b:	7f d7                	jg     f0116874 <test_kfree+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f011689d:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01168a3:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01168a9:	c1 e2 02             	shl    $0x2,%edx
f01168ac:	39 d0                	cmp    %edx,%eax
f01168ae:	74 17                	je     f01168c7 <test_kfree+0xc80>
f01168b0:	83 ec 04             	sub    $0x4,%esp
f01168b3:	68 7c 05 12 f0       	push   $0xf012057c
f01168b8:	68 61 05 00 00       	push   $0x561
f01168bd:	68 e2 fd 11 f0       	push   $0xf011fde2
f01168c2:	e8 cc 98 fe ff       	call   f0100193 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01168c7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01168cd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01168d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01168d7:	eb 1e                	jmp    f01168f7 <test_kfree+0xcb0>
		{
			sums[5] += ptr[i] ;
f01168d9:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f01168df:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01168e2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01168e5:	01 c8                	add    %ecx,%eax
f01168e7:	8a 00                	mov    (%eax),%al
f01168e9:	0f be c0             	movsbl %al,%eax
f01168ec:	01 d0                	add    %edx,%eax
f01168ee:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01168f4:	ff 45 f4             	incl   -0xc(%ebp)
f01168f7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01168fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116900:	7f d7                	jg     f01168d9 <test_kfree+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0116902:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0116908:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f011690e:	89 d0                	mov    %edx,%eax
f0116910:	c1 e0 02             	shl    $0x2,%eax
f0116913:	01 d0                	add    %edx,%eax
f0116915:	39 c1                	cmp    %eax,%ecx
f0116917:	74 17                	je     f0116930 <test_kfree+0xce9>
f0116919:	83 ec 04             	sub    $0x4,%esp
f011691c:	68 7c 05 12 f0       	push   $0xf012057c
f0116921:	68 69 05 00 00       	push   $0x569
f0116926:	68 e2 fd 11 f0       	push   $0xf011fde2
f011692b:	e8 63 98 fe ff       	call   f0100193 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0116930:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116936:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0116939:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116940:	eb 1e                	jmp    f0116960 <test_kfree+0xd19>
		{
			sums[7] += ptr[i] ;
f0116942:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0116948:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011694b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011694e:	01 c8                	add    %ecx,%eax
f0116950:	8a 00                	mov    (%eax),%al
f0116952:	0f be c0             	movsbl %al,%eax
f0116955:	01 d0                	add    %edx,%eax
f0116957:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011695d:	ff 45 f4             	incl   -0xc(%ebp)
f0116960:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0116966:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116969:	7f d7                	jg     f0116942 <test_kfree+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f011696b:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0116971:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0116977:	89 d0                	mov    %edx,%eax
f0116979:	01 c0                	add    %eax,%eax
f011697b:	01 d0                	add    %edx,%eax
f011697d:	01 c0                	add    %eax,%eax
f011697f:	01 d0                	add    %edx,%eax
f0116981:	39 c1                	cmp    %eax,%ecx
f0116983:	74 17                	je     f011699c <test_kfree+0xd55>
f0116985:	83 ec 04             	sub    $0x4,%esp
f0116988:	68 7c 05 12 f0       	push   $0xf012057c
f011698d:	68 71 05 00 00       	push   $0x571
f0116992:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116997:	e8 f7 97 fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b30%");
f011699c:	83 ec 0c             	sub    $0xc,%esp
f011699f:	68 af 05 12 f0       	push   $0xf01205af
f01169a4:	e8 8d 0a ff ff       	call   f0107436 <cprintf>
f01169a9:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01169ac:	e8 46 5a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01169b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01169b4:	e8 e1 76 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01169b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01169bc:	83 ec 0c             	sub    $0xc,%esp
f01169bf:	68 00 50 00 00       	push   $0x5000
f01169c4:	e8 5c 80 ff ff       	call   f010ea25 <kmalloc>
f01169c9:	83 c4 10             	add    $0x10,%esp
f01169cc:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01169d2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01169d8:	89 c1                	mov    %eax,%ecx
f01169da:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01169e1:	10 00 00 
f01169e4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01169e9:	0f b6 d0             	movzbl %al,%edx
f01169ec:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01169f2:	01 d0                	add    %edx,%eax
f01169f4:	48                   	dec    %eax
f01169f5:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01169fb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0116a01:	ba 00 00 00 00       	mov    $0x0,%edx
f0116a06:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0116a0c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0116a12:	29 d0                	sub    %edx,%eax
f0116a14:	89 c3                	mov    %eax,%ebx
f0116a16:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0116a1d:	10 00 00 
f0116a20:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116a25:	0f b6 c0             	movzbl %al,%eax
f0116a28:	c1 e0 04             	shl    $0x4,%eax
f0116a2b:	89 c2                	mov    %eax,%edx
f0116a2d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0116a33:	01 d0                	add    %edx,%eax
f0116a35:	48                   	dec    %eax
f0116a36:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0116a3c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0116a42:	ba 00 00 00 00       	mov    $0x0,%edx
f0116a47:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0116a4d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0116a53:	29 d0                	sub    %edx,%eax
f0116a55:	01 d8                	add    %ebx,%eax
f0116a57:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0116a5c:	39 c1                	cmp    %eax,%ecx
f0116a5e:	74 17                	je     f0116a77 <test_kfree+0xe30>
f0116a60:	83 ec 04             	sub    $0x4,%esp
f0116a63:	68 c0 fe 11 f0       	push   $0xf011fec0
f0116a68:	68 7b 05 00 00       	push   $0x57b
f0116a6d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116a72:	e8 1c 97 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116a77:	e8 1e 76 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116a7c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116a7f:	74 17                	je     f0116a98 <test_kfree+0xe51>
f0116a81:	83 ec 04             	sub    $0x4,%esp
f0116a84:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116a89:	68 7c 05 00 00       	push   $0x57c
f0116a8e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116a93:	e8 fb 96 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116a98:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116a9b:	e8 57 59 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116aa0:	29 c3                	sub    %eax,%ebx
f0116aa2:	89 d8                	mov    %ebx,%eax
f0116aa4:	83 f8 05             	cmp    $0x5,%eax
f0116aa7:	74 17                	je     f0116ac0 <test_kfree+0xe79>
f0116aa9:	83 ec 04             	sub    $0x4,%esp
f0116aac:	68 5c fe 11 f0       	push   $0xf011fe5c
f0116ab1:	68 7d 05 00 00       	push   $0x57d
f0116ab6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116abb:	e8 d3 96 fe ff       	call   f0100193 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0116ac0:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0116ac7:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0116aca:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116ad0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0116ad3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116ada:	eb 0e                	jmp    f0116aea <test_kfree+0xea3>
		{
			ptr[i] = 8 ;
f0116adc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116adf:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116ae2:	01 d0                	add    %edx,%eax
f0116ae4:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0116ae7:	ff 45 f4             	incl   -0xc(%ebp)
f0116aea:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0116af0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116af3:	7f e7                	jg     f0116adc <test_kfree+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0116af5:	e8 fd 58 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116afa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116afd:	e8 98 75 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116b02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0116b05:	83 ec 0c             	sub    $0xc,%esp
f0116b08:	68 00 00 10 00       	push   $0x100000
f0116b0d:	e8 13 7f ff ff       	call   f010ea25 <kmalloc>
f0116b12:	83 c4 10             	add    $0x10,%esp
f0116b15:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116b1b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116b21:	89 c1                	mov    %eax,%ecx
f0116b23:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0116b2a:	10 00 00 
f0116b2d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116b32:	0f b6 d0             	movzbl %al,%edx
f0116b35:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0116b3b:	01 d0                	add    %edx,%eax
f0116b3d:	48                   	dec    %eax
f0116b3e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0116b44:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0116b4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0116b4f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0116b55:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0116b5b:	29 d0                	sub    %edx,%eax
f0116b5d:	89 c3                	mov    %eax,%ebx
f0116b5f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0116b66:	10 00 00 
f0116b69:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0116b6e:	0f b6 c0             	movzbl %al,%eax
f0116b71:	c1 e0 04             	shl    $0x4,%eax
f0116b74:	89 c2                	mov    %eax,%edx
f0116b76:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116b7c:	01 d0                	add    %edx,%eax
f0116b7e:	48                   	dec    %eax
f0116b7f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0116b85:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116b8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0116b90:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0116b96:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116b9c:	29 d0                	sub    %edx,%eax
f0116b9e:	01 d8                	add    %ebx,%eax
f0116ba0:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0116ba5:	39 c1                	cmp    %eax,%ecx
f0116ba7:	74 17                	je     f0116bc0 <test_kfree+0xf79>
f0116ba9:	83 ec 04             	sub    $0x4,%esp
f0116bac:	68 c0 fe 11 f0       	push   $0xf011fec0
f0116bb1:	68 89 05 00 00       	push   $0x589
f0116bb6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116bbb:	e8 d3 95 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116bc0:	e8 d5 74 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116bc5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116bc8:	74 17                	je     f0116be1 <test_kfree+0xf9a>
f0116bca:	83 ec 04             	sub    $0x4,%esp
f0116bcd:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116bd2:	68 8a 05 00 00       	push   $0x58a
f0116bd7:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116bdc:	e8 b2 95 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116be1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116be4:	e8 0e 58 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116be9:	29 c3                	sub    %eax,%ebx
f0116beb:	89 d8                	mov    %ebx,%eax
f0116bed:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116bf2:	74 17                	je     f0116c0b <test_kfree+0xfc4>
f0116bf4:	83 ec 04             	sub    $0x4,%esp
f0116bf7:	68 5c fe 11 f0       	push   $0xf011fe5c
f0116bfc:	68 8b 05 00 00       	push   $0x58b
f0116c01:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116c06:	e8 88 95 fe ff       	call   f0100193 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0116c0b:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f0116c12:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0116c15:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116c1b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0116c1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116c25:	eb 0e                	jmp    f0116c35 <test_kfree+0xfee>
		{
			ptr[i] = 9 ;
f0116c27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116c2a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116c2d:	01 d0                	add    %edx,%eax
f0116c2f:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0116c32:	ff 45 f4             	incl   -0xc(%ebp)
f0116c35:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0116c3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116c3e:	7f e7                	jg     f0116c27 <test_kfree+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0116c40:	83 ec 0c             	sub    $0xc,%esp
f0116c43:	68 b6 05 12 f0       	push   $0xf01205b6
f0116c48:	e8 e9 07 ff ff       	call   f0107436 <cprintf>
f0116c4d:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0116c50:	e8 a2 57 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116c55:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c58:	e8 3d 74 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116c5d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0116c60:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116c66:	83 ec 0c             	sub    $0xc,%esp
f0116c69:	50                   	push   %eax
f0116c6a:	e8 d0 7d ff ff       	call   f010ea3f <kfree>
f0116c6f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c72:	e8 23 74 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116c77:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116c7a:	74 17                	je     f0116c93 <test_kfree+0x104c>
f0116c7c:	83 ec 04             	sub    $0x4,%esp
f0116c7f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116c84:	68 9b 05 00 00       	push   $0x59b
f0116c89:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116c8e:	e8 00 95 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0116c93:	e8 5f 57 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116c98:	89 c2                	mov    %eax,%edx
f0116c9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116c9d:	29 c2                	sub    %eax,%edx
f0116c9f:	89 d0                	mov    %edx,%eax
f0116ca1:	83 f8 02             	cmp    $0x2,%eax
f0116ca4:	74 17                	je     f0116cbd <test_kfree+0x1076>
f0116ca6:	83 ec 04             	sub    $0x4,%esp
f0116ca9:	68 20 05 12 f0       	push   $0xf0120520
f0116cae:	68 9c 05 00 00       	push   $0x59c
f0116cb3:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116cb8:	e8 d6 94 fe ff       	call   f0100193 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0116cbd:	e8 35 57 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116cc2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116cc5:	e8 d0 73 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116cca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0116ccd:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116cd3:	83 ec 0c             	sub    $0xc,%esp
f0116cd6:	50                   	push   %eax
f0116cd7:	e8 63 7d ff ff       	call   f010ea3f <kfree>
f0116cdc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116cdf:	e8 b6 73 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116ce4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116ce7:	74 17                	je     f0116d00 <test_kfree+0x10b9>
f0116ce9:	83 ec 04             	sub    $0x4,%esp
f0116cec:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116cf1:	68 a2 05 00 00       	push   $0x5a2
f0116cf6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116cfb:	e8 93 94 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0116d00:	e8 f2 56 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116d05:	89 c2                	mov    %eax,%edx
f0116d07:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116d0a:	29 c2                	sub    %eax,%edx
f0116d0c:	89 d0                	mov    %edx,%eax
f0116d0e:	3d 00 03 00 00       	cmp    $0x300,%eax
f0116d13:	74 17                	je     f0116d2c <test_kfree+0x10e5>
f0116d15:	83 ec 04             	sub    $0x4,%esp
f0116d18:	68 20 05 12 f0       	push   $0xf0120520
f0116d1d:	68 a3 05 00 00       	push   $0x5a3
f0116d22:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116d27:	e8 67 94 fe ff       	call   f0100193 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116d2c:	e8 c6 56 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116d31:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d34:	e8 61 73 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116d39:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0116d3c:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0116d42:	83 ec 0c             	sub    $0xc,%esp
f0116d45:	50                   	push   %eax
f0116d46:	e8 f4 7c ff ff       	call   f010ea3f <kfree>
f0116d4b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116d4e:	e8 47 73 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116d53:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116d56:	74 17                	je     f0116d6f <test_kfree+0x1128>
f0116d58:	83 ec 04             	sub    $0x4,%esp
f0116d5b:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116d60:	68 a9 05 00 00       	push   $0x5a9
f0116d65:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116d6a:	e8 24 94 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0116d6f:	e8 83 56 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116d74:	89 c2                	mov    %eax,%edx
f0116d76:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116d79:	29 c2                	sub    %eax,%edx
f0116d7b:	89 d0                	mov    %edx,%eax
f0116d7d:	83 f8 01             	cmp    $0x1,%eax
f0116d80:	74 17                	je     f0116d99 <test_kfree+0x1152>
f0116d82:	83 ec 04             	sub    $0x4,%esp
f0116d85:	68 20 05 12 f0       	push   $0xf0120520
f0116d8a:	68 aa 05 00 00       	push   $0x5aa
f0116d8f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116d94:	e8 fa 93 fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116d99:	e8 59 56 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116d9e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116da1:	e8 f4 72 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116da6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0116da9:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0116daf:	83 ec 0c             	sub    $0xc,%esp
f0116db2:	50                   	push   %eax
f0116db3:	e8 87 7c ff ff       	call   f010ea3f <kfree>
f0116db8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116dbb:	e8 da 72 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116dc0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116dc3:	74 17                	je     f0116ddc <test_kfree+0x1195>
f0116dc5:	83 ec 04             	sub    $0x4,%esp
f0116dc8:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116dcd:	68 b0 05 00 00       	push   $0x5b0
f0116dd2:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116dd7:	e8 b7 93 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0116ddc:	e8 16 56 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116de1:	89 c2                	mov    %eax,%edx
f0116de3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116de6:	29 c2                	sub    %eax,%edx
f0116de8:	89 d0                	mov    %edx,%eax
f0116dea:	83 f8 01             	cmp    $0x1,%eax
f0116ded:	74 17                	je     f0116e06 <test_kfree+0x11bf>
f0116def:	83 ec 04             	sub    $0x4,%esp
f0116df2:	68 20 05 12 f0       	push   $0xf0120520
f0116df7:	68 b1 05 00 00       	push   $0x5b1
f0116dfc:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116e01:	e8 8d 93 fe ff       	call   f0100193 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0116e06:	e8 ec 55 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116e0b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e0e:	e8 87 72 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116e13:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0116e16:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116e1c:	83 ec 0c             	sub    $0xc,%esp
f0116e1f:	50                   	push   %eax
f0116e20:	e8 1a 7c ff ff       	call   f010ea3f <kfree>
f0116e25:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116e28:	e8 6d 72 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116e2d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116e30:	74 17                	je     f0116e49 <test_kfree+0x1202>
f0116e32:	83 ec 04             	sub    $0x4,%esp
f0116e35:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116e3a:	68 b7 05 00 00       	push   $0x5b7
f0116e3f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116e44:	e8 4a 93 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0116e49:	e8 a9 55 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116e4e:	89 c2                	mov    %eax,%edx
f0116e50:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116e53:	29 c2                	sub    %eax,%edx
f0116e55:	89 d0                	mov    %edx,%eax
f0116e57:	83 f8 04             	cmp    $0x4,%eax
f0116e5a:	74 17                	je     f0116e73 <test_kfree+0x122c>
f0116e5c:	83 ec 04             	sub    $0x4,%esp
f0116e5f:	68 20 05 12 f0       	push   $0xf0120520
f0116e64:	68 b8 05 00 00       	push   $0x5b8
f0116e69:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116e6e:	e8 20 93 fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0116e73:	e8 7f 55 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116e78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e7b:	e8 1a 72 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116e80:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0116e83:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116e89:	83 ec 0c             	sub    $0xc,%esp
f0116e8c:	50                   	push   %eax
f0116e8d:	e8 ad 7b ff ff       	call   f010ea3f <kfree>
f0116e92:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116e95:	e8 00 72 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116e9a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116e9d:	74 17                	je     f0116eb6 <test_kfree+0x126f>
f0116e9f:	83 ec 04             	sub    $0x4,%esp
f0116ea2:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116ea7:	68 be 05 00 00       	push   $0x5be
f0116eac:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116eb1:	e8 dd 92 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0116eb6:	e8 3c 55 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116ebb:	89 c2                	mov    %eax,%edx
f0116ebd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116ec0:	29 c2                	sub    %eax,%edx
f0116ec2:	89 d0                	mov    %edx,%eax
f0116ec4:	83 f8 05             	cmp    $0x5,%eax
f0116ec7:	74 17                	je     f0116ee0 <test_kfree+0x1299>
f0116ec9:	83 ec 04             	sub    $0x4,%esp
f0116ecc:	68 20 05 12 f0       	push   $0xf0120520
f0116ed1:	68 bf 05 00 00       	push   $0x5bf
f0116ed6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116edb:	e8 b3 92 fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0116ee0:	e8 12 55 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116ee5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ee8:	e8 ad 71 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116eed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0116ef0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116ef6:	83 ec 0c             	sub    $0xc,%esp
f0116ef9:	50                   	push   %eax
f0116efa:	e8 40 7b ff ff       	call   f010ea3f <kfree>
f0116eff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116f02:	e8 93 71 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0116f07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116f0a:	74 17                	je     f0116f23 <test_kfree+0x12dc>
f0116f0c:	83 ec 04             	sub    $0x4,%esp
f0116f0f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0116f14:	68 c5 05 00 00       	push   $0x5c5
f0116f19:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116f1e:	e8 70 92 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0116f23:	e8 cf 54 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116f28:	89 c2                	mov    %eax,%edx
f0116f2a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116f2d:	29 c2                	sub    %eax,%edx
f0116f2f:	89 d0                	mov    %edx,%eax
f0116f31:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116f36:	74 17                	je     f0116f4f <test_kfree+0x1308>
f0116f38:	83 ec 04             	sub    $0x4,%esp
f0116f3b:	68 20 05 12 f0       	push   $0xf0120520
f0116f40:	68 c6 05 00 00       	push   $0x5c6
f0116f45:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116f4a:	e8 44 92 fe ff       	call   f0100193 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0116f4f:	e8 a3 54 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0116f54:	89 c2                	mov    %eax,%edx
f0116f56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116f59:	39 c2                	cmp    %eax,%edx
f0116f5b:	74 17                	je     f0116f74 <test_kfree+0x132d>
f0116f5d:	83 ec 04             	sub    $0x4,%esp
f0116f60:	68 c0 05 12 f0       	push   $0xf01205c0
f0116f65:	68 c8 05 00 00       	push   $0x5c8
f0116f6a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116f6f:	e8 1f 92 fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b60%");
f0116f74:	83 ec 0c             	sub    $0xc,%esp
f0116f77:	68 f4 05 12 f0       	push   $0xf01205f4
f0116f7c:	e8 b5 04 ff ff       	call   f0107436 <cprintf>
f0116f81:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0116f84:	83 ec 0c             	sub    $0xc,%esp
f0116f87:	6a 03                	push   $0x3
f0116f89:	e8 f2 57 ff ff       	call   f010c780 <sys_bypassPageFault>
f0116f8e:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0116f91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116f98:	e9 82 00 00 00       	jmp    f011701f <test_kfree+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0116f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116fa0:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0116fa7:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0116faa:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116fad:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0116fb0:	e8 b9 57 ff ff       	call   f010c76e <sys_rcr2>
f0116fb5:	89 c2                	mov    %eax,%edx
f0116fb7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116fba:	39 c2                	cmp    %eax,%edx
f0116fbc:	74 17                	je     f0116fd5 <test_kfree+0x138e>
f0116fbe:	83 ec 04             	sub    $0x4,%esp
f0116fc1:	68 fc 05 12 f0       	push   $0xf01205fc
f0116fc6:	68 d7 05 00 00       	push   $0x5d7
f0116fcb:	68 e2 fd 11 f0       	push   $0xf011fde2
f0116fd0:	e8 be 91 fe ff       	call   f0100193 <_panic>
			ptr[lastIndices[i]] = 10;
f0116fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116fd8:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0116fdf:	89 c2                	mov    %eax,%edx
f0116fe1:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116fe4:	01 d0                	add    %edx,%eax
f0116fe6:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0116fe9:	e8 80 57 ff ff       	call   f010c76e <sys_rcr2>
f0116fee:	89 c2                	mov    %eax,%edx
f0116ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116ff3:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0116ffa:	89 c1                	mov    %eax,%ecx
f0116ffc:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116fff:	01 c8                	add    %ecx,%eax
f0117001:	39 c2                	cmp    %eax,%edx
f0117003:	74 17                	je     f011701c <test_kfree+0x13d5>
f0117005:	83 ec 04             	sub    $0x4,%esp
f0117008:	68 fc 05 12 f0       	push   $0xf01205fc
f011700d:	68 d9 05 00 00       	push   $0x5d9
f0117012:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117017:	e8 77 91 fe ff       	call   f0100193 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011701c:	ff 45 f4             	incl   -0xc(%ebp)
f011701f:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0117023:	0f 8e 74 ff ff ff    	jle    f0116f9d <test_kfree+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0117029:	83 ec 0c             	sub    $0xc,%esp
f011702c:	6a 00                	push   $0x0
f011702e:	e8 4d 57 ff ff       	call   f010c780 <sys_bypassPageFault>
f0117033:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0117036:	83 ec 0c             	sub    $0xc,%esp
f0117039:	68 41 06 12 f0       	push   $0xf0120641
f011703e:	e8 f3 03 ff ff       	call   f0107436 <cprintf>
f0117043:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117046:	e8 ac 53 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011704b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011704e:	e8 47 70 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117053:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0117056:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011705c:	83 ec 0c             	sub    $0xc,%esp
f011705f:	50                   	push   %eax
f0117060:	e8 da 79 ff ff       	call   f010ea3f <kfree>
f0117065:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117068:	e8 2d 70 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011706d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117070:	74 17                	je     f0117089 <test_kfree+0x1442>
f0117072:	83 ec 04             	sub    $0x4,%esp
f0117075:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011707a:	68 e7 05 00 00       	push   $0x5e7
f011707f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117084:	e8 0a 91 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0117089:	e8 69 53 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011708e:	89 c2                	mov    %eax,%edx
f0117090:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117093:	39 c2                	cmp    %eax,%edx
f0117095:	74 17                	je     f01170ae <test_kfree+0x1467>
f0117097:	83 ec 04             	sub    $0x4,%esp
f011709a:	68 48 06 12 f0       	push   $0xf0120648
f011709f:	68 e8 05 00 00       	push   $0x5e8
f01170a4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01170a9:	e8 e5 90 fe ff       	call   f0100193 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01170ae:	e8 44 53 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01170b3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01170b6:	e8 df 6f ff ff       	call   f010e09a <pf_calculate_free_frames>
f01170bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01170be:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01170c4:	83 ec 0c             	sub    $0xc,%esp
f01170c7:	50                   	push   %eax
f01170c8:	e8 72 79 ff ff       	call   f010ea3f <kfree>
f01170cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01170d0:	e8 c5 6f ff ff       	call   f010e09a <pf_calculate_free_frames>
f01170d5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01170d8:	74 17                	je     f01170f1 <test_kfree+0x14aa>
f01170da:	83 ec 04             	sub    $0x4,%esp
f01170dd:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01170e2:	68 ee 05 00 00       	push   $0x5ee
f01170e7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01170ec:	e8 a2 90 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01170f1:	e8 01 53 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01170f6:	89 c2                	mov    %eax,%edx
f01170f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01170fb:	39 c2                	cmp    %eax,%edx
f01170fd:	74 17                	je     f0117116 <test_kfree+0x14cf>
f01170ff:	83 ec 04             	sub    $0x4,%esp
f0117102:	68 48 06 12 f0       	push   $0xf0120648
f0117107:	68 ef 05 00 00       	push   $0x5ef
f011710c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117111:	e8 7d 90 fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0117116:	e8 dc 52 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011711b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011711e:	e8 77 6f ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117123:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0117126:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011712c:	83 ec 0c             	sub    $0xc,%esp
f011712f:	50                   	push   %eax
f0117130:	e8 0a 79 ff ff       	call   f010ea3f <kfree>
f0117135:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117138:	e8 5d 6f ff ff       	call   f010e09a <pf_calculate_free_frames>
f011713d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117140:	74 17                	je     f0117159 <test_kfree+0x1512>
f0117142:	83 ec 04             	sub    $0x4,%esp
f0117145:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011714a:	68 f5 05 00 00       	push   $0x5f5
f011714f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117154:	e8 3a 90 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0117159:	e8 99 52 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011715e:	89 c2                	mov    %eax,%edx
f0117160:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117163:	39 c2                	cmp    %eax,%edx
f0117165:	74 17                	je     f011717e <test_kfree+0x1537>
f0117167:	83 ec 04             	sub    $0x4,%esp
f011716a:	68 48 06 12 f0       	push   $0xf0120648
f011716f:	68 f6 05 00 00       	push   $0x5f6
f0117174:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117179:	e8 15 90 fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011717e:	e8 74 52 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117183:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117186:	e8 0f 6f ff ff       	call   f010e09a <pf_calculate_free_frames>
f011718b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011718e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0117194:	83 ec 0c             	sub    $0xc,%esp
f0117197:	50                   	push   %eax
f0117198:	e8 a2 78 ff ff       	call   f010ea3f <kfree>
f011719d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01171a0:	e8 f5 6e ff ff       	call   f010e09a <pf_calculate_free_frames>
f01171a5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01171a8:	74 17                	je     f01171c1 <test_kfree+0x157a>
f01171aa:	83 ec 04             	sub    $0x4,%esp
f01171ad:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01171b2:	68 fc 05 00 00       	push   $0x5fc
f01171b7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01171bc:	e8 d2 8f fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01171c1:	e8 31 52 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01171c6:	89 c2                	mov    %eax,%edx
f01171c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01171cb:	39 c2                	cmp    %eax,%edx
f01171cd:	74 17                	je     f01171e6 <test_kfree+0x159f>
f01171cf:	83 ec 04             	sub    $0x4,%esp
f01171d2:	68 48 06 12 f0       	push   $0xf0120648
f01171d7:	68 fd 05 00 00       	push   $0x5fd
f01171dc:	68 e2 fd 11 f0       	push   $0xf011fde2
f01171e1:	e8 ad 8f fe ff       	call   f0100193 <_panic>

	}
	cprintf("\b\b\b85%");
f01171e6:	83 ec 0c             	sub    $0xc,%esp
f01171e9:	68 8f 06 12 f0       	push   $0xf012068f
f01171ee:	e8 43 02 ff ff       	call   f0107436 <cprintf>
f01171f3:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01171f6:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01171fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0117204:	eb 4a                	jmp    f0117250 <test_kfree+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0117206:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0117209:	89 c1                	mov    %eax,%ecx
f011720b:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0117210:	83 ec 04             	sub    $0x4,%esp
f0117213:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0117219:	52                   	push   %edx
f011721a:	51                   	push   %ecx
f011721b:	50                   	push   %eax
f011721c:	e8 4a cc fe ff       	call   f0103e6b <get_page_table>
f0117221:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0117224:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011722a:	85 c0                	test   %eax,%eax
f011722c:	75 17                	jne    f0117245 <test_kfree+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f011722e:	83 ec 04             	sub    $0x4,%esp
f0117231:	68 98 06 12 f0       	push   $0xf0120698
f0117236:	68 0b 06 00 00       	push   $0x60b
f011723b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117240:	e8 4e 8f fe ff       	call   f0100193 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0117245:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f011724c:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0117250:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117254:	78 b0                	js     f0117206 <test_kfree+0x15bf>
f0117256:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011725a:	7f 09                	jg     f0117265 <test_kfree+0x161e>
f011725c:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0117263:	76 a1                	jbe    f0117206 <test_kfree+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0117265:	83 ec 0c             	sub    $0xc,%esp
f0117268:	68 be ff 11 f0       	push   $0xf011ffbe
f011726d:	e8 c4 01 ff ff       	call   f0107436 <cprintf>
f0117272:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0117275:	83 ec 0c             	sub    $0xc,%esp
f0117278:	68 00 07 12 f0       	push   $0xf0120700
f011727d:	e8 b4 01 ff ff       	call   f0107436 <cprintf>
f0117282:	83 c4 10             	add    $0x10,%esp

	return 1;
f0117285:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011728a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011728d:	5b                   	pop    %ebx
f011728e:	5f                   	pop    %edi
f011728f:	5d                   	pop    %ebp
f0117290:	c3                   	ret    

f0117291 <test_kfree_bestfit>:

int test_kfree_bestfit()
{
f0117291:	55                   	push   %ebp
f0117292:	89 e5                	mov    %esp,%ebp
f0117294:	57                   	push   %edi
f0117295:	53                   	push   %ebx
f0117296:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f011729c:	83 ec 0c             	sub    $0xc,%esp
f011729f:	68 24 fd 11 f0       	push   $0xf011fd24
f01172a4:	e8 8d 01 ff ff       	call   f0107436 <cprintf>
f01172a9:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01172ac:	83 ec 0c             	sub    $0xc,%esp
f01172af:	68 54 fd 11 f0       	push   $0xf011fd54
f01172b4:	e8 7d 01 ff ff       	call   f0107436 <cprintf>
f01172b9:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01172bc:	83 ec 0c             	sub    $0xc,%esp
f01172bf:	68 24 fd 11 f0       	push   $0xf011fd24
f01172c4:	e8 6d 01 ff ff       	call   f0107436 <cprintf>
f01172c9:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01172cc:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01172d0:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01172d4:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01172da:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01172e0:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01172e7:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01172ee:	e8 04 51 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01172f3:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01172f6:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f01172fc:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117301:	b8 00 00 00 00       	mov    $0x0,%eax
f0117306:	89 d7                	mov    %edx,%edi
f0117308:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011730a:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f0117310:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117315:	b8 00 00 00 00       	mov    $0x0,%eax
f011731a:	89 d7                	mov    %edx,%edi
f011731c:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011731e:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0117324:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117329:	b8 00 00 00 00       	mov    $0x0,%eax
f011732e:	89 d7                	mov    %edx,%edi
f0117330:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117332:	e8 c0 50 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117337:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011733a:	e8 5b 6d ff ff       	call   f010e09a <pf_calculate_free_frames>
f011733f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0117342:	83 ec 0c             	sub    $0xc,%esp
f0117345:	68 00 fc 1f 00       	push   $0x1ffc00
f011734a:	e8 d6 76 ff ff       	call   f010ea25 <kmalloc>
f011734f:	83 c4 10             	add    $0x10,%esp
f0117352:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117358:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011735e:	89 c1                	mov    %eax,%ecx
f0117360:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0117367:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011736c:	0f b6 d0             	movzbl %al,%edx
f011736f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117372:	01 d0                	add    %edx,%eax
f0117374:	48                   	dec    %eax
f0117375:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0117378:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011737b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117380:	f7 75 c8             	divl   -0x38(%ebp)
f0117383:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117386:	29 d0                	sub    %edx,%eax
f0117388:	89 c3                	mov    %eax,%ebx
f011738a:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0117391:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117396:	0f b6 c0             	movzbl %al,%eax
f0117399:	c1 e0 04             	shl    $0x4,%eax
f011739c:	89 c2                	mov    %eax,%edx
f011739e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01173a1:	01 d0                	add    %edx,%eax
f01173a3:	48                   	dec    %eax
f01173a4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01173a7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01173aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01173af:	f7 75 c0             	divl   -0x40(%ebp)
f01173b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01173b5:	29 d0                	sub    %edx,%eax
f01173b7:	01 d8                	add    %ebx,%eax
f01173b9:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01173be:	39 c1                	cmp    %eax,%ecx
f01173c0:	74 17                	je     f01173d9 <test_kfree_bestfit+0x148>
f01173c2:	83 ec 04             	sub    $0x4,%esp
f01173c5:	68 c0 fe 11 f0       	push   $0xf011fec0
f01173ca:	68 38 06 00 00       	push   $0x638
f01173cf:	68 e2 fd 11 f0       	push   $0xf011fde2
f01173d4:	e8 ba 8d fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01173d9:	e8 bc 6c ff ff       	call   f010e09a <pf_calculate_free_frames>
f01173de:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01173e1:	74 17                	je     f01173fa <test_kfree_bestfit+0x169>
f01173e3:	83 ec 04             	sub    $0x4,%esp
f01173e6:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01173eb:	68 39 06 00 00       	push   $0x639
f01173f0:	68 e2 fd 11 f0       	push   $0xf011fde2
f01173f5:	e8 99 8d fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01173fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01173fd:	e8 f5 4f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117402:	29 c3                	sub    %eax,%ebx
f0117404:	89 d8                	mov    %ebx,%eax
f0117406:	3d 00 02 00 00       	cmp    $0x200,%eax
f011740b:	74 17                	je     f0117424 <test_kfree_bestfit+0x193>
f011740d:	83 ec 04             	sub    $0x4,%esp
f0117410:	68 5c fe 11 f0       	push   $0xf011fe5c
f0117415:	68 3a 06 00 00       	push   $0x63a
f011741a:	68 e2 fd 11 f0       	push   $0xf011fde2
f011741f:	e8 6f 8d fe ff       	call   f0100193 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0117424:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f011742b:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011742e:	e8 c4 4f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117433:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117436:	e8 5f 6c ff ff       	call   f010e09a <pf_calculate_free_frames>
f011743b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011743e:	83 ec 0c             	sub    $0xc,%esp
f0117441:	68 00 fc 1f 00       	push   $0x1ffc00
f0117446:	e8 da 75 ff ff       	call   f010ea25 <kmalloc>
f011744b:	83 c4 10             	add    $0x10,%esp
f011744e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117454:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011745a:	89 c1                	mov    %eax,%ecx
f011745c:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117463:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117468:	0f b6 d0             	movzbl %al,%edx
f011746b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011746e:	01 d0                	add    %edx,%eax
f0117470:	48                   	dec    %eax
f0117471:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117474:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117477:	ba 00 00 00 00       	mov    $0x0,%edx
f011747c:	f7 75 b8             	divl   -0x48(%ebp)
f011747f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117482:	29 d0                	sub    %edx,%eax
f0117484:	89 c3                	mov    %eax,%ebx
f0117486:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011748d:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117492:	0f b6 c0             	movzbl %al,%eax
f0117495:	c1 e0 04             	shl    $0x4,%eax
f0117498:	89 c2                	mov    %eax,%edx
f011749a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011749d:	01 d0                	add    %edx,%eax
f011749f:	48                   	dec    %eax
f01174a0:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01174a3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01174a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01174ab:	f7 75 b0             	divl   -0x50(%ebp)
f01174ae:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01174b1:	29 d0                	sub    %edx,%eax
f01174b3:	01 d8                	add    %ebx,%eax
f01174b5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01174ba:	39 c1                	cmp    %eax,%ecx
f01174bc:	74 17                	je     f01174d5 <test_kfree_bestfit+0x244>
f01174be:	83 ec 04             	sub    $0x4,%esp
f01174c1:	68 c0 fe 11 f0       	push   $0xf011fec0
f01174c6:	68 41 06 00 00       	push   $0x641
f01174cb:	68 e2 fd 11 f0       	push   $0xf011fde2
f01174d0:	e8 be 8c fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01174d5:	e8 c0 6b ff ff       	call   f010e09a <pf_calculate_free_frames>
f01174da:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01174dd:	74 17                	je     f01174f6 <test_kfree_bestfit+0x265>
f01174df:	83 ec 04             	sub    $0x4,%esp
f01174e2:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01174e7:	68 42 06 00 00       	push   $0x642
f01174ec:	68 e2 fd 11 f0       	push   $0xf011fde2
f01174f1:	e8 9d 8c fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01174f6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01174f9:	e8 f9 4e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01174fe:	29 c3                	sub    %eax,%ebx
f0117500:	89 d8                	mov    %ebx,%eax
f0117502:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117507:	74 17                	je     f0117520 <test_kfree_bestfit+0x28f>
f0117509:	83 ec 04             	sub    $0x4,%esp
f011750c:	68 5c fe 11 f0       	push   $0xf011fe5c
f0117511:	68 43 06 00 00       	push   $0x643
f0117516:	68 e2 fd 11 f0       	push   $0xf011fde2
f011751b:	e8 73 8c fe ff       	call   f0100193 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0117520:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0117527:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011752a:	e8 c8 4e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011752f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117532:	e8 63 6b ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117537:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011753a:	83 ec 0c             	sub    $0xc,%esp
f011753d:	68 00 08 00 00       	push   $0x800
f0117542:	e8 de 74 ff ff       	call   f010ea25 <kmalloc>
f0117547:	83 c4 10             	add    $0x10,%esp
f011754a:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117550:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0117556:	89 c1                	mov    %eax,%ecx
f0117558:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011755f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117564:	0f b6 d0             	movzbl %al,%edx
f0117567:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011756a:	01 d0                	add    %edx,%eax
f011756c:	48                   	dec    %eax
f011756d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117570:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117573:	ba 00 00 00 00       	mov    $0x0,%edx
f0117578:	f7 75 a8             	divl   -0x58(%ebp)
f011757b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011757e:	29 d0                	sub    %edx,%eax
f0117580:	89 c3                	mov    %eax,%ebx
f0117582:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117589:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011758e:	0f b6 c0             	movzbl %al,%eax
f0117591:	c1 e0 04             	shl    $0x4,%eax
f0117594:	89 c2                	mov    %eax,%edx
f0117596:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117599:	01 d0                	add    %edx,%eax
f011759b:	48                   	dec    %eax
f011759c:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011759f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01175a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01175a7:	f7 75 a0             	divl   -0x60(%ebp)
f01175aa:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01175ad:	29 d0                	sub    %edx,%eax
f01175af:	01 d8                	add    %ebx,%eax
f01175b1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01175b6:	39 c1                	cmp    %eax,%ecx
f01175b8:	74 17                	je     f01175d1 <test_kfree_bestfit+0x340>
f01175ba:	83 ec 04             	sub    $0x4,%esp
f01175bd:	68 c0 fe 11 f0       	push   $0xf011fec0
f01175c2:	68 4a 06 00 00       	push   $0x64a
f01175c7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01175cc:	e8 c2 8b fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01175d1:	e8 c4 6a ff ff       	call   f010e09a <pf_calculate_free_frames>
f01175d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01175d9:	74 17                	je     f01175f2 <test_kfree_bestfit+0x361>
f01175db:	83 ec 04             	sub    $0x4,%esp
f01175de:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01175e3:	68 4b 06 00 00       	push   $0x64b
f01175e8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01175ed:	e8 a1 8b fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01175f2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01175f5:	e8 fd 4d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01175fa:	29 c3                	sub    %eax,%ebx
f01175fc:	89 d8                	mov    %ebx,%eax
f01175fe:	83 f8 01             	cmp    $0x1,%eax
f0117601:	74 17                	je     f011761a <test_kfree_bestfit+0x389>
f0117603:	83 ec 04             	sub    $0x4,%esp
f0117606:	68 5c fe 11 f0       	push   $0xf011fe5c
f011760b:	68 4c 06 00 00       	push   $0x64c
f0117610:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117615:	e8 79 8b fe ff       	call   f0100193 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011761a:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0117621:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0117624:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011762a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011762d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117634:	eb 0e                	jmp    f0117644 <test_kfree_bestfit+0x3b3>
		{
			ptr[i] = 2 ;
f0117636:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117639:	8b 45 98             	mov    -0x68(%ebp),%eax
f011763c:	01 d0                	add    %edx,%eax
f011763e:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0117641:	ff 45 f4             	incl   -0xc(%ebp)
f0117644:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011764a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011764d:	7f e7                	jg     f0117636 <test_kfree_bestfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011764f:	e8 a3 4d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117654:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117657:	e8 3e 6a ff ff       	call   f010e09a <pf_calculate_free_frames>
f011765c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011765f:	83 ec 0c             	sub    $0xc,%esp
f0117662:	68 00 08 00 00       	push   $0x800
f0117667:	e8 b9 73 ff ff       	call   f010ea25 <kmalloc>
f011766c:	83 c4 10             	add    $0x10,%esp
f011766f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117675:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011767b:	89 c1                	mov    %eax,%ecx
f011767d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0117684:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117689:	0f b6 d0             	movzbl %al,%edx
f011768c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011768f:	01 d0                	add    %edx,%eax
f0117691:	48                   	dec    %eax
f0117692:	89 45 90             	mov    %eax,-0x70(%ebp)
f0117695:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117698:	ba 00 00 00 00       	mov    $0x0,%edx
f011769d:	f7 75 94             	divl   -0x6c(%ebp)
f01176a0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01176a3:	29 d0                	sub    %edx,%eax
f01176a5:	89 c3                	mov    %eax,%ebx
f01176a7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01176ae:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01176b3:	0f b6 c0             	movzbl %al,%eax
f01176b6:	c1 e0 04             	shl    $0x4,%eax
f01176b9:	89 c2                	mov    %eax,%edx
f01176bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01176be:	01 d0                	add    %edx,%eax
f01176c0:	48                   	dec    %eax
f01176c1:	89 45 88             	mov    %eax,-0x78(%ebp)
f01176c4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01176c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01176cc:	f7 75 8c             	divl   -0x74(%ebp)
f01176cf:	8b 45 88             	mov    -0x78(%ebp),%eax
f01176d2:	29 d0                	sub    %edx,%eax
f01176d4:	01 d8                	add    %ebx,%eax
f01176d6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01176db:	39 c1                	cmp    %eax,%ecx
f01176dd:	74 17                	je     f01176f6 <test_kfree_bestfit+0x465>
f01176df:	83 ec 04             	sub    $0x4,%esp
f01176e2:	68 c0 fe 11 f0       	push   $0xf011fec0
f01176e7:	68 58 06 00 00       	push   $0x658
f01176ec:	68 e2 fd 11 f0       	push   $0xf011fde2
f01176f1:	e8 9d 8a fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01176f6:	e8 9f 69 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01176fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01176fe:	74 17                	je     f0117717 <test_kfree_bestfit+0x486>
f0117700:	83 ec 04             	sub    $0x4,%esp
f0117703:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0117708:	68 59 06 00 00       	push   $0x659
f011770d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117712:	e8 7c 8a fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117717:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011771a:	e8 d8 4c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011771f:	29 c3                	sub    %eax,%ebx
f0117721:	89 d8                	mov    %ebx,%eax
f0117723:	83 f8 01             	cmp    $0x1,%eax
f0117726:	74 17                	je     f011773f <test_kfree_bestfit+0x4ae>
f0117728:	83 ec 04             	sub    $0x4,%esp
f011772b:	68 5c fe 11 f0       	push   $0xf011fe5c
f0117730:	68 5a 06 00 00       	push   $0x65a
f0117735:	68 e2 fd 11 f0       	push   $0xf011fde2
f011773a:	e8 54 8a fe ff       	call   f0100193 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011773f:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f0117746:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0117749:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011774f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0117752:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117759:	eb 0e                	jmp    f0117769 <test_kfree_bestfit+0x4d8>
		{
			ptr[i] = 3 ;
f011775b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011775e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117761:	01 d0                	add    %edx,%eax
f0117763:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0117766:	ff 45 f4             	incl   -0xc(%ebp)
f0117769:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011776f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117772:	7f e7                	jg     f011775b <test_kfree_bestfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117774:	e8 7e 4c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117779:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011777c:	e8 19 69 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117781:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117784:	83 ec 0c             	sub    $0xc,%esp
f0117787:	68 00 1c 00 00       	push   $0x1c00
f011778c:	e8 94 72 ff ff       	call   f010ea25 <kmalloc>
f0117791:	83 c4 10             	add    $0x10,%esp
f0117794:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011779a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01177a0:	89 c1                	mov    %eax,%ecx
f01177a2:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01177a9:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01177ae:	0f b6 d0             	movzbl %al,%edx
f01177b1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01177b4:	01 d0                	add    %edx,%eax
f01177b6:	48                   	dec    %eax
f01177b7:	89 45 80             	mov    %eax,-0x80(%ebp)
f01177ba:	8b 45 80             	mov    -0x80(%ebp),%eax
f01177bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01177c2:	f7 75 84             	divl   -0x7c(%ebp)
f01177c5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01177c8:	29 d0                	sub    %edx,%eax
f01177ca:	89 c3                	mov    %eax,%ebx
f01177cc:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01177d3:	10 00 00 
f01177d6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01177db:	0f b6 c0             	movzbl %al,%eax
f01177de:	c1 e0 04             	shl    $0x4,%eax
f01177e1:	89 c2                	mov    %eax,%edx
f01177e3:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01177e9:	01 d0                	add    %edx,%eax
f01177eb:	48                   	dec    %eax
f01177ec:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01177f2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01177f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01177fd:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0117803:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0117809:	29 d0                	sub    %edx,%eax
f011780b:	01 d8                	add    %ebx,%eax
f011780d:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117812:	39 c1                	cmp    %eax,%ecx
f0117814:	74 17                	je     f011782d <test_kfree_bestfit+0x59c>
f0117816:	83 ec 04             	sub    $0x4,%esp
f0117819:	68 c0 fe 11 f0       	push   $0xf011fec0
f011781e:	68 66 06 00 00       	push   $0x666
f0117823:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117828:	e8 66 89 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011782d:	e8 68 68 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117832:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117835:	74 17                	je     f011784e <test_kfree_bestfit+0x5bd>
f0117837:	83 ec 04             	sub    $0x4,%esp
f011783a:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011783f:	68 67 06 00 00       	push   $0x667
f0117844:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117849:	e8 45 89 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011784e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0117851:	e8 a1 4b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117856:	29 c3                	sub    %eax,%ebx
f0117858:	89 d8                	mov    %ebx,%eax
f011785a:	83 f8 02             	cmp    $0x2,%eax
f011785d:	74 17                	je     f0117876 <test_kfree_bestfit+0x5e5>
f011785f:	83 ec 04             	sub    $0x4,%esp
f0117862:	68 5c fe 11 f0       	push   $0xf011fe5c
f0117867:	68 68 06 00 00       	push   $0x668
f011786c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117871:	e8 1d 89 fe ff       	call   f0100193 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0117876:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f011787d:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0117880:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117886:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0117889:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117890:	eb 0e                	jmp    f01178a0 <test_kfree_bestfit+0x60f>
		{
			ptr[i] = 4 ;
f0117892:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117895:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117898:	01 d0                	add    %edx,%eax
f011789a:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011789d:	ff 45 f4             	incl   -0xc(%ebp)
f01178a0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01178a6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01178a9:	7f e7                	jg     f0117892 <test_kfree_bestfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01178ab:	e8 47 4b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01178b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178b3:	e8 e2 67 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01178b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01178bb:	83 ec 0c             	sub    $0xc,%esp
f01178be:	68 00 fc 2f 00       	push   $0x2ffc00
f01178c3:	e8 5d 71 ff ff       	call   f010ea25 <kmalloc>
f01178c8:	83 c4 10             	add    $0x10,%esp
f01178cb:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01178d1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01178d7:	89 c1                	mov    %eax,%ecx
f01178d9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01178e0:	10 00 00 
f01178e3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01178e8:	0f b6 d0             	movzbl %al,%edx
f01178eb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01178f1:	01 d0                	add    %edx,%eax
f01178f3:	48                   	dec    %eax
f01178f4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01178fa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117900:	ba 00 00 00 00       	mov    $0x0,%edx
f0117905:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011790b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117911:	29 d0                	sub    %edx,%eax
f0117913:	89 c3                	mov    %eax,%ebx
f0117915:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011791c:	10 00 00 
f011791f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117924:	0f b6 c0             	movzbl %al,%eax
f0117927:	c1 e0 04             	shl    $0x4,%eax
f011792a:	89 c2                	mov    %eax,%edx
f011792c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117932:	01 d0                	add    %edx,%eax
f0117934:	48                   	dec    %eax
f0117935:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011793b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117941:	ba 00 00 00 00       	mov    $0x0,%edx
f0117946:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011794c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117952:	29 d0                	sub    %edx,%eax
f0117954:	01 d8                	add    %ebx,%eax
f0117956:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011795b:	39 c1                	cmp    %eax,%ecx
f011795d:	74 17                	je     f0117976 <test_kfree_bestfit+0x6e5>
f011795f:	83 ec 04             	sub    $0x4,%esp
f0117962:	68 c0 fe 11 f0       	push   $0xf011fec0
f0117967:	68 74 06 00 00       	push   $0x674
f011796c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117971:	e8 1d 88 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117976:	e8 1f 67 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011797b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011797e:	74 17                	je     f0117997 <test_kfree_bestfit+0x706>
f0117980:	83 ec 04             	sub    $0x4,%esp
f0117983:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0117988:	68 75 06 00 00       	push   $0x675
f011798d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117992:	e8 fc 87 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117997:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011799a:	e8 58 4a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011799f:	29 c3                	sub    %eax,%ebx
f01179a1:	89 d8                	mov    %ebx,%eax
f01179a3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01179a8:	74 17                	je     f01179c1 <test_kfree_bestfit+0x730>
f01179aa:	83 ec 04             	sub    $0x4,%esp
f01179ad:	68 5c fe 11 f0       	push   $0xf011fe5c
f01179b2:	68 76 06 00 00       	push   $0x676
f01179b7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01179bc:	e8 d2 87 fe ff       	call   f0100193 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01179c1:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f01179c8:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01179cb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01179d1:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01179d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01179db:	eb 0e                	jmp    f01179eb <test_kfree_bestfit+0x75a>
		{
			ptr[i] = 5 ;
f01179dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01179e0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01179e3:	01 d0                	add    %edx,%eax
f01179e5:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01179e8:	ff 45 f4             	incl   -0xc(%ebp)
f01179eb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01179f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01179f4:	7f e7                	jg     f01179dd <test_kfree_bestfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01179f6:	e8 fc 49 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01179fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01179fe:	e8 97 66 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117a03:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0117a06:	83 ec 0c             	sub    $0xc,%esp
f0117a09:	68 00 fc 5f 00       	push   $0x5ffc00
f0117a0e:	e8 12 70 ff ff       	call   f010ea25 <kmalloc>
f0117a13:	83 c4 10             	add    $0x10,%esp
f0117a16:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117a1c:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117a22:	89 c1                	mov    %eax,%ecx
f0117a24:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0117a2b:	10 00 00 
f0117a2e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117a33:	0f b6 d0             	movzbl %al,%edx
f0117a36:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117a3c:	01 d0                	add    %edx,%eax
f0117a3e:	48                   	dec    %eax
f0117a3f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0117a45:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117a4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a50:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0117a56:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117a5c:	29 d0                	sub    %edx,%eax
f0117a5e:	89 c3                	mov    %eax,%ebx
f0117a60:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0117a67:	10 00 00 
f0117a6a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117a6f:	0f b6 c0             	movzbl %al,%eax
f0117a72:	c1 e0 04             	shl    $0x4,%eax
f0117a75:	89 c2                	mov    %eax,%edx
f0117a77:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117a7d:	01 d0                	add    %edx,%eax
f0117a7f:	48                   	dec    %eax
f0117a80:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0117a86:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117a8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117a91:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0117a97:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117a9d:	29 d0                	sub    %edx,%eax
f0117a9f:	01 d8                	add    %ebx,%eax
f0117aa1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0117aa6:	39 c1                	cmp    %eax,%ecx
f0117aa8:	74 17                	je     f0117ac1 <test_kfree_bestfit+0x830>
f0117aaa:	83 ec 04             	sub    $0x4,%esp
f0117aad:	68 c0 fe 11 f0       	push   $0xf011fec0
f0117ab2:	68 82 06 00 00       	push   $0x682
f0117ab7:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117abc:	e8 d2 86 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117ac1:	e8 d4 65 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117ac6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117ac9:	74 17                	je     f0117ae2 <test_kfree_bestfit+0x851>
f0117acb:	83 ec 04             	sub    $0x4,%esp
f0117ace:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0117ad3:	68 83 06 00 00       	push   $0x683
f0117ad8:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117add:	e8 b1 86 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117ae2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0117ae5:	e8 0d 49 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117aea:	29 c3                	sub    %eax,%ebx
f0117aec:	89 d8                	mov    %ebx,%eax
f0117aee:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117af3:	74 17                	je     f0117b0c <test_kfree_bestfit+0x87b>
f0117af5:	83 ec 04             	sub    $0x4,%esp
f0117af8:	68 5c fe 11 f0       	push   $0xf011fe5c
f0117afd:	68 84 06 00 00       	push   $0x684
f0117b02:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117b07:	e8 87 86 fe ff       	call   f0100193 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0117b0c:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f0117b13:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117b16:	e8 dc 48 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117b1b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b1e:	e8 77 65 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117b23:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117b26:	83 ec 0c             	sub    $0xc,%esp
f0117b29:	68 00 38 00 00       	push   $0x3800
f0117b2e:	e8 f2 6e ff ff       	call   f010ea25 <kmalloc>
f0117b33:	83 c4 10             	add    $0x10,%esp
f0117b36:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117b3c:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117b42:	89 c1                	mov    %eax,%ecx
f0117b44:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0117b4b:	10 00 00 
f0117b4e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117b53:	0f b6 d0             	movzbl %al,%edx
f0117b56:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117b5c:	01 d0                	add    %edx,%eax
f0117b5e:	48                   	dec    %eax
f0117b5f:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0117b65:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117b6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b70:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0117b76:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117b7c:	29 d0                	sub    %edx,%eax
f0117b7e:	89 c3                	mov    %eax,%ebx
f0117b80:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0117b87:	10 00 00 
f0117b8a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0117b8f:	0f b6 c0             	movzbl %al,%eax
f0117b92:	c1 e0 04             	shl    $0x4,%eax
f0117b95:	89 c2                	mov    %eax,%edx
f0117b97:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117b9d:	01 d0                	add    %edx,%eax
f0117b9f:	48                   	dec    %eax
f0117ba0:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0117ba6:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117bac:	ba 00 00 00 00       	mov    $0x0,%edx
f0117bb1:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0117bb7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117bbd:	29 d0                	sub    %edx,%eax
f0117bbf:	01 d8                	add    %ebx,%eax
f0117bc1:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117bc6:	39 c1                	cmp    %eax,%ecx
f0117bc8:	74 17                	je     f0117be1 <test_kfree_bestfit+0x950>
f0117bca:	83 ec 04             	sub    $0x4,%esp
f0117bcd:	68 c0 fe 11 f0       	push   $0xf011fec0
f0117bd2:	68 8b 06 00 00       	push   $0x68b
f0117bd7:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117bdc:	e8 b2 85 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117be1:	e8 b4 64 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117be6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117be9:	74 17                	je     f0117c02 <test_kfree_bestfit+0x971>
f0117beb:	83 ec 04             	sub    $0x4,%esp
f0117bee:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0117bf3:	68 8c 06 00 00       	push   $0x68c
f0117bf8:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117bfd:	e8 91 85 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c02:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0117c05:	e8 ed 47 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117c0a:	29 c3                	sub    %eax,%ebx
f0117c0c:	89 d8                	mov    %ebx,%eax
f0117c0e:	83 f8 04             	cmp    $0x4,%eax
f0117c11:	74 17                	je     f0117c2a <test_kfree_bestfit+0x999>
f0117c13:	83 ec 04             	sub    $0x4,%esp
f0117c16:	68 5c fe 11 f0       	push   $0xf011fe5c
f0117c1b:	68 8d 06 00 00       	push   $0x68d
f0117c20:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117c25:	e8 69 85 fe ff       	call   f0100193 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0117c2a:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f0117c31:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0117c34:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117c3a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0117c3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117c44:	eb 0e                	jmp    f0117c54 <test_kfree_bestfit+0x9c3>
		{
			ptr[i] = 7 ;
f0117c46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117c49:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117c4c:	01 d0                	add    %edx,%eax
f0117c4e:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0117c51:	ff 45 f4             	incl   -0xc(%ebp)
f0117c54:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117c5a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117c5d:	7f e7                	jg     f0117c46 <test_kfree_bestfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0117c5f:	e8 93 47 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117c64:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117c6a:	e8 2b 64 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117c6f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0117c75:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0117c7b:	83 ec 0c             	sub    $0xc,%esp
f0117c7e:	50                   	push   %eax
f0117c7f:	e8 bb 6d ff ff       	call   f010ea3f <kfree>
f0117c84:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117c87:	e8 0e 64 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117c8c:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0117c92:	74 17                	je     f0117cab <test_kfree_bestfit+0xa1a>
f0117c94:	83 ec 04             	sub    $0x4,%esp
f0117c97:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0117c9c:	68 9c 06 00 00       	push   $0x69c
f0117ca1:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117ca6:	e8 e8 84 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0117cab:	e8 47 47 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117cb0:	89 c2                	mov    %eax,%edx
f0117cb2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117cb8:	29 c2                	sub    %eax,%edx
f0117cba:	89 d0                	mov    %edx,%eax
f0117cbc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117cc1:	74 17                	je     f0117cda <test_kfree_bestfit+0xa49>
f0117cc3:	83 ec 04             	sub    $0x4,%esp
f0117cc6:	68 20 05 12 f0       	push   $0xf0120520
f0117ccb:	68 9d 06 00 00       	push   $0x69d
f0117cd0:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117cd5:	e8 b9 84 fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117cda:	e8 18 47 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117cdf:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ce5:	e8 b0 63 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117cea:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0117cf0:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0117cf6:	83 ec 0c             	sub    $0xc,%esp
f0117cf9:	50                   	push   %eax
f0117cfa:	e8 40 6d ff ff       	call   f010ea3f <kfree>
f0117cff:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d02:	e8 93 63 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117d07:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0117d0d:	74 17                	je     f0117d26 <test_kfree_bestfit+0xa95>
f0117d0f:	83 ec 04             	sub    $0x4,%esp
f0117d12:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0117d17:	68 a3 06 00 00       	push   $0x6a3
f0117d1c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117d21:	e8 6d 84 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0117d26:	e8 cc 46 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117d2b:	89 c2                	mov    %eax,%edx
f0117d2d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117d33:	29 c2                	sub    %eax,%edx
f0117d35:	89 d0                	mov    %edx,%eax
f0117d37:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117d3c:	74 17                	je     f0117d55 <test_kfree_bestfit+0xac4>
f0117d3e:	83 ec 04             	sub    $0x4,%esp
f0117d41:	68 20 05 12 f0       	push   $0xf0120520
f0117d46:	68 a4 06 00 00       	push   $0x6a4
f0117d4b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117d50:	e8 3e 84 fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117d55:	e8 9d 46 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117d5a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117d60:	e8 35 63 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117d65:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0117d6b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117d71:	83 ec 0c             	sub    $0xc,%esp
f0117d74:	50                   	push   %eax
f0117d75:	e8 c5 6c ff ff       	call   f010ea3f <kfree>
f0117d7a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117d7d:	e8 18 63 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0117d82:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0117d88:	74 17                	je     f0117da1 <test_kfree_bestfit+0xb10>
f0117d8a:	83 ec 04             	sub    $0x4,%esp
f0117d8d:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0117d92:	68 aa 06 00 00       	push   $0x6aa
f0117d97:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117d9c:	e8 f2 83 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0117da1:	e8 51 46 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117da6:	89 c2                	mov    %eax,%edx
f0117da8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117dae:	29 c2                	sub    %eax,%edx
f0117db0:	89 d0                	mov    %edx,%eax
f0117db2:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117db7:	74 17                	je     f0117dd0 <test_kfree_bestfit+0xb3f>
f0117db9:	83 ec 04             	sub    $0x4,%esp
f0117dbc:	68 20 05 12 f0       	push   $0xf0120520
f0117dc1:	68 ab 06 00 00       	push   $0x6ab
f0117dc6:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117dcb:	e8 c3 83 fe ff       	call   f0100193 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0117dd0:	83 ec 0c             	sub    $0xc,%esp
f0117dd3:	68 58 05 12 f0       	push   $0xf0120558
f0117dd8:	e8 59 f6 fe ff       	call   f0107436 <cprintf>
f0117ddd:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0117de0:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0117de6:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0117de9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117df0:	eb 1e                	jmp    f0117e10 <test_kfree_bestfit+0xb7f>
		{
			sums[2] += ptr[i] ;
f0117df2:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0117df8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117dfb:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117dfe:	01 c8                	add    %ecx,%eax
f0117e00:	8a 00                	mov    (%eax),%al
f0117e02:	0f be c0             	movsbl %al,%eax
f0117e05:	01 d0                	add    %edx,%eax
f0117e07:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0117e0d:	ff 45 f4             	incl   -0xc(%ebp)
f0117e10:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117e16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117e19:	7f d7                	jg     f0117df2 <test_kfree_bestfit+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0117e1b:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0117e21:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117e27:	01 c0                	add    %eax,%eax
f0117e29:	39 c2                	cmp    %eax,%edx
f0117e2b:	74 17                	je     f0117e44 <test_kfree_bestfit+0xbb3>
f0117e2d:	83 ec 04             	sub    $0x4,%esp
f0117e30:	68 7c 05 12 f0       	push   $0xf012057c
f0117e35:	68 b8 06 00 00       	push   $0x6b8
f0117e3a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117e3f:	e8 4f 83 fe ff       	call   f0100193 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0117e44:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0117e4a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0117e4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117e54:	eb 1e                	jmp    f0117e74 <test_kfree_bestfit+0xbe3>
		{
			sums[3] += ptr[i] ;
f0117e56:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0117e5c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117e5f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117e62:	01 c8                	add    %ecx,%eax
f0117e64:	8a 00                	mov    (%eax),%al
f0117e66:	0f be c0             	movsbl %al,%eax
f0117e69:	01 d0                	add    %edx,%eax
f0117e6b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0117e71:	ff 45 f4             	incl   -0xc(%ebp)
f0117e74:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117e7a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117e7d:	7f d7                	jg     f0117e56 <test_kfree_bestfit+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0117e7f:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0117e85:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117e8b:	89 c1                	mov    %eax,%ecx
f0117e8d:	01 c9                	add    %ecx,%ecx
f0117e8f:	01 c8                	add    %ecx,%eax
f0117e91:	39 c2                	cmp    %eax,%edx
f0117e93:	74 17                	je     f0117eac <test_kfree_bestfit+0xc1b>
f0117e95:	83 ec 04             	sub    $0x4,%esp
f0117e98:	68 7c 05 12 f0       	push   $0xf012057c
f0117e9d:	68 c0 06 00 00       	push   $0x6c0
f0117ea2:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117ea7:	e8 e7 82 fe ff       	call   f0100193 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0117eac:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117eb2:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0117eb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117ebc:	eb 1e                	jmp    f0117edc <test_kfree_bestfit+0xc4b>
		{
			sums[4] += ptr[i] ;
f0117ebe:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0117ec4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117ec7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117eca:	01 c8                	add    %ecx,%eax
f0117ecc:	8a 00                	mov    (%eax),%al
f0117ece:	0f be c0             	movsbl %al,%eax
f0117ed1:	01 d0                	add    %edx,%eax
f0117ed3:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0117ed9:	ff 45 f4             	incl   -0xc(%ebp)
f0117edc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117ee2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117ee5:	7f d7                	jg     f0117ebe <test_kfree_bestfit+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0117ee7:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0117eed:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117ef3:	c1 e2 02             	shl    $0x2,%edx
f0117ef6:	39 d0                	cmp    %edx,%eax
f0117ef8:	74 17                	je     f0117f11 <test_kfree_bestfit+0xc80>
f0117efa:	83 ec 04             	sub    $0x4,%esp
f0117efd:	68 7c 05 12 f0       	push   $0xf012057c
f0117f02:	68 c8 06 00 00       	push   $0x6c8
f0117f07:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117f0c:	e8 82 82 fe ff       	call   f0100193 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0117f11:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117f17:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0117f1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117f21:	eb 1e                	jmp    f0117f41 <test_kfree_bestfit+0xcb0>
		{
			sums[5] += ptr[i] ;
f0117f23:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0117f29:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117f2c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117f2f:	01 c8                	add    %ecx,%eax
f0117f31:	8a 00                	mov    (%eax),%al
f0117f33:	0f be c0             	movsbl %al,%eax
f0117f36:	01 d0                	add    %edx,%eax
f0117f38:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0117f3e:	ff 45 f4             	incl   -0xc(%ebp)
f0117f41:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117f47:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117f4a:	7f d7                	jg     f0117f23 <test_kfree_bestfit+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0117f4c:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0117f52:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f0117f58:	89 d0                	mov    %edx,%eax
f0117f5a:	c1 e0 02             	shl    $0x2,%eax
f0117f5d:	01 d0                	add    %edx,%eax
f0117f5f:	39 c1                	cmp    %eax,%ecx
f0117f61:	74 17                	je     f0117f7a <test_kfree_bestfit+0xce9>
f0117f63:	83 ec 04             	sub    $0x4,%esp
f0117f66:	68 7c 05 12 f0       	push   $0xf012057c
f0117f6b:	68 d0 06 00 00       	push   $0x6d0
f0117f70:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117f75:	e8 19 82 fe ff       	call   f0100193 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0117f7a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117f80:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0117f83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117f8a:	eb 1e                	jmp    f0117faa <test_kfree_bestfit+0xd19>
		{
			sums[7] += ptr[i] ;
f0117f8c:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0117f92:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117f95:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117f98:	01 c8                	add    %ecx,%eax
f0117f9a:	8a 00                	mov    (%eax),%al
f0117f9c:	0f be c0             	movsbl %al,%eax
f0117f9f:	01 d0                	add    %edx,%eax
f0117fa1:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0117fa7:	ff 45 f4             	incl   -0xc(%ebp)
f0117faa:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117fb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117fb3:	7f d7                	jg     f0117f8c <test_kfree_bestfit+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0117fb5:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0117fbb:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0117fc1:	89 d0                	mov    %edx,%eax
f0117fc3:	01 c0                	add    %eax,%eax
f0117fc5:	01 d0                	add    %edx,%eax
f0117fc7:	01 c0                	add    %eax,%eax
f0117fc9:	01 d0                	add    %edx,%eax
f0117fcb:	39 c1                	cmp    %eax,%ecx
f0117fcd:	74 17                	je     f0117fe6 <test_kfree_bestfit+0xd55>
f0117fcf:	83 ec 04             	sub    $0x4,%esp
f0117fd2:	68 7c 05 12 f0       	push   $0xf012057c
f0117fd7:	68 d8 06 00 00       	push   $0x6d8
f0117fdc:	68 e2 fd 11 f0       	push   $0xf011fde2
f0117fe1:	e8 ad 81 fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b30%");
f0117fe6:	83 ec 0c             	sub    $0xc,%esp
f0117fe9:	68 af 05 12 f0       	push   $0xf01205af
f0117fee:	e8 43 f4 fe ff       	call   f0107436 <cprintf>
f0117ff3:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0117ff6:	e8 fc 43 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0117ffb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ffe:	e8 97 60 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118003:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0118006:	83 ec 0c             	sub    $0xc,%esp
f0118009:	68 00 50 00 00       	push   $0x5000
f011800e:	e8 12 6a ff ff       	call   f010ea25 <kmalloc>
f0118013:	83 c4 10             	add    $0x10,%esp
f0118016:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011801c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118022:	89 c1                	mov    %eax,%ecx
f0118024:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011802b:	10 00 00 
f011802e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118033:	0f b6 d0             	movzbl %al,%edx
f0118036:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011803c:	01 d0                	add    %edx,%eax
f011803e:	48                   	dec    %eax
f011803f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0118045:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011804b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118050:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0118056:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011805c:	29 d0                	sub    %edx,%eax
f011805e:	89 c3                	mov    %eax,%ebx
f0118060:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0118067:	10 00 00 
f011806a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011806f:	0f b6 c0             	movzbl %al,%eax
f0118072:	c1 e0 04             	shl    $0x4,%eax
f0118075:	89 c2                	mov    %eax,%edx
f0118077:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011807d:	01 d0                	add    %edx,%eax
f011807f:	48                   	dec    %eax
f0118080:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0118086:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011808c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118091:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0118097:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011809d:	29 d0                	sub    %edx,%eax
f011809f:	01 d8                	add    %ebx,%eax
f01180a1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01180a6:	39 c1                	cmp    %eax,%ecx
f01180a8:	74 17                	je     f01180c1 <test_kfree_bestfit+0xe30>
f01180aa:	83 ec 04             	sub    $0x4,%esp
f01180ad:	68 c0 fe 11 f0       	push   $0xf011fec0
f01180b2:	68 e2 06 00 00       	push   $0x6e2
f01180b7:	68 e2 fd 11 f0       	push   $0xf011fde2
f01180bc:	e8 d2 80 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01180c1:	e8 d4 5f ff ff       	call   f010e09a <pf_calculate_free_frames>
f01180c6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01180c9:	74 17                	je     f01180e2 <test_kfree_bestfit+0xe51>
f01180cb:	83 ec 04             	sub    $0x4,%esp
f01180ce:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01180d3:	68 e3 06 00 00       	push   $0x6e3
f01180d8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01180dd:	e8 b1 80 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01180e2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01180e5:	e8 0d 43 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01180ea:	29 c3                	sub    %eax,%ebx
f01180ec:	89 d8                	mov    %ebx,%eax
f01180ee:	83 f8 05             	cmp    $0x5,%eax
f01180f1:	74 17                	je     f011810a <test_kfree_bestfit+0xe79>
f01180f3:	83 ec 04             	sub    $0x4,%esp
f01180f6:	68 5c fe 11 f0       	push   $0xf011fe5c
f01180fb:	68 e4 06 00 00       	push   $0x6e4
f0118100:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118105:	e8 89 80 fe ff       	call   f0100193 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011810a:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0118111:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0118114:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011811a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011811d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118124:	eb 0e                	jmp    f0118134 <test_kfree_bestfit+0xea3>
		{
			ptr[i] = 8 ;
f0118126:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118129:	8b 45 98             	mov    -0x68(%ebp),%eax
f011812c:	01 d0                	add    %edx,%eax
f011812e:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0118131:	ff 45 f4             	incl   -0xc(%ebp)
f0118134:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011813a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011813d:	7f e7                	jg     f0118126 <test_kfree_bestfit+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011813f:	e8 b3 42 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118144:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118147:	e8 4e 5f ff ff       	call   f010e09a <pf_calculate_free_frames>
f011814c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f011814f:	83 ec 0c             	sub    $0xc,%esp
f0118152:	68 00 00 10 00       	push   $0x100000
f0118157:	e8 c9 68 ff ff       	call   f010ea25 <kmalloc>
f011815c:	83 c4 10             	add    $0x10,%esp
f011815f:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118165:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011816b:	89 c1                	mov    %eax,%ecx
f011816d:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0118174:	10 00 00 
f0118177:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011817c:	0f b6 d0             	movzbl %al,%edx
f011817f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118185:	01 d0                	add    %edx,%eax
f0118187:	48                   	dec    %eax
f0118188:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011818e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118194:	ba 00 00 00 00       	mov    $0x0,%edx
f0118199:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011819f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01181a5:	29 d0                	sub    %edx,%eax
f01181a7:	89 c3                	mov    %eax,%ebx
f01181a9:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01181b0:	10 00 00 
f01181b3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01181b8:	0f b6 c0             	movzbl %al,%eax
f01181bb:	c1 e0 04             	shl    $0x4,%eax
f01181be:	89 c2                	mov    %eax,%edx
f01181c0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01181c6:	01 d0                	add    %edx,%eax
f01181c8:	48                   	dec    %eax
f01181c9:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01181cf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01181d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01181da:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01181e0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01181e6:	29 d0                	sub    %edx,%eax
f01181e8:	01 d8                	add    %ebx,%eax
f01181ea:	2d 00 70 ff 09       	sub    $0x9ff7000,%eax
f01181ef:	39 c1                	cmp    %eax,%ecx
f01181f1:	74 17                	je     f011820a <test_kfree_bestfit+0xf79>
f01181f3:	83 ec 04             	sub    $0x4,%esp
f01181f6:	68 c0 fe 11 f0       	push   $0xf011fec0
f01181fb:	68 f0 06 00 00       	push   $0x6f0
f0118200:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118205:	e8 89 7f fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011820a:	e8 8b 5e ff ff       	call   f010e09a <pf_calculate_free_frames>
f011820f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118212:	74 17                	je     f011822b <test_kfree_bestfit+0xf9a>
f0118214:	83 ec 04             	sub    $0x4,%esp
f0118217:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011821c:	68 f1 06 00 00       	push   $0x6f1
f0118221:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118226:	e8 68 7f fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f011822b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011822e:	e8 c4 41 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118233:	29 c3                	sub    %eax,%ebx
f0118235:	89 d8                	mov    %ebx,%eax
f0118237:	3d 00 01 00 00       	cmp    $0x100,%eax
f011823c:	74 17                	je     f0118255 <test_kfree_bestfit+0xfc4>
f011823e:	83 ec 04             	sub    $0x4,%esp
f0118241:	68 5c fe 11 f0       	push   $0xf011fe5c
f0118246:	68 f2 06 00 00       	push   $0x6f2
f011824b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118250:	e8 3e 7f fe ff       	call   f0100193 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0118255:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f011825c:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f011825f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118265:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0118268:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011826f:	eb 0e                	jmp    f011827f <test_kfree_bestfit+0xfee>
		{
			ptr[i] = 9 ;
f0118271:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118274:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118277:	01 d0                	add    %edx,%eax
f0118279:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011827c:	ff 45 f4             	incl   -0xc(%ebp)
f011827f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118285:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0118288:	7f e7                	jg     f0118271 <test_kfree_bestfit+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f011828a:	83 ec 0c             	sub    $0xc,%esp
f011828d:	68 b6 05 12 f0       	push   $0xf01205b6
f0118292:	e8 9f f1 fe ff       	call   f0107436 <cprintf>
f0118297:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f011829a:	e8 58 41 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011829f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01182a2:	e8 f3 5d ff ff       	call   f010e09a <pf_calculate_free_frames>
f01182a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01182aa:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01182b0:	83 ec 0c             	sub    $0xc,%esp
f01182b3:	50                   	push   %eax
f01182b4:	e8 86 67 ff ff       	call   f010ea3f <kfree>
f01182b9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01182bc:	e8 d9 5d ff ff       	call   f010e09a <pf_calculate_free_frames>
f01182c1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01182c4:	74 17                	je     f01182dd <test_kfree_bestfit+0x104c>
f01182c6:	83 ec 04             	sub    $0x4,%esp
f01182c9:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01182ce:	68 02 07 00 00       	push   $0x702
f01182d3:	68 e2 fd 11 f0       	push   $0xf011fde2
f01182d8:	e8 b6 7e fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01182dd:	e8 15 41 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01182e2:	89 c2                	mov    %eax,%edx
f01182e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01182e7:	29 c2                	sub    %eax,%edx
f01182e9:	89 d0                	mov    %edx,%eax
f01182eb:	83 f8 02             	cmp    $0x2,%eax
f01182ee:	74 17                	je     f0118307 <test_kfree_bestfit+0x1076>
f01182f0:	83 ec 04             	sub    $0x4,%esp
f01182f3:	68 20 05 12 f0       	push   $0xf0120520
f01182f8:	68 03 07 00 00       	push   $0x703
f01182fd:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118302:	e8 8c 7e fe ff       	call   f0100193 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118307:	e8 eb 40 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011830c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011830f:	e8 86 5d ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118314:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0118317:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011831d:	83 ec 0c             	sub    $0xc,%esp
f0118320:	50                   	push   %eax
f0118321:	e8 19 67 ff ff       	call   f010ea3f <kfree>
f0118326:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118329:	e8 6c 5d ff ff       	call   f010e09a <pf_calculate_free_frames>
f011832e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118331:	74 17                	je     f011834a <test_kfree_bestfit+0x10b9>
f0118333:	83 ec 04             	sub    $0x4,%esp
f0118336:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011833b:	68 09 07 00 00       	push   $0x709
f0118340:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118345:	e8 49 7e fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011834a:	e8 a8 40 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011834f:	89 c2                	mov    %eax,%edx
f0118351:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118354:	29 c2                	sub    %eax,%edx
f0118356:	89 d0                	mov    %edx,%eax
f0118358:	3d 00 03 00 00       	cmp    $0x300,%eax
f011835d:	74 17                	je     f0118376 <test_kfree_bestfit+0x10e5>
f011835f:	83 ec 04             	sub    $0x4,%esp
f0118362:	68 20 05 12 f0       	push   $0xf0120520
f0118367:	68 0a 07 00 00       	push   $0x70a
f011836c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118371:	e8 1d 7e fe ff       	call   f0100193 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118376:	e8 7c 40 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011837b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011837e:	e8 17 5d ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118383:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0118386:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011838c:	83 ec 0c             	sub    $0xc,%esp
f011838f:	50                   	push   %eax
f0118390:	e8 aa 66 ff ff       	call   f010ea3f <kfree>
f0118395:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118398:	e8 fd 5c ff ff       	call   f010e09a <pf_calculate_free_frames>
f011839d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01183a0:	74 17                	je     f01183b9 <test_kfree_bestfit+0x1128>
f01183a2:	83 ec 04             	sub    $0x4,%esp
f01183a5:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01183aa:	68 10 07 00 00       	push   $0x710
f01183af:	68 e2 fd 11 f0       	push   $0xf011fde2
f01183b4:	e8 da 7d fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01183b9:	e8 39 40 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01183be:	89 c2                	mov    %eax,%edx
f01183c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01183c3:	29 c2                	sub    %eax,%edx
f01183c5:	89 d0                	mov    %edx,%eax
f01183c7:	83 f8 01             	cmp    $0x1,%eax
f01183ca:	74 17                	je     f01183e3 <test_kfree_bestfit+0x1152>
f01183cc:	83 ec 04             	sub    $0x4,%esp
f01183cf:	68 20 05 12 f0       	push   $0xf0120520
f01183d4:	68 11 07 00 00       	push   $0x711
f01183d9:	68 e2 fd 11 f0       	push   $0xf011fde2
f01183de:	e8 b0 7d fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01183e3:	e8 0f 40 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01183e8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183eb:	e8 aa 5c ff ff       	call   f010e09a <pf_calculate_free_frames>
f01183f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01183f3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01183f9:	83 ec 0c             	sub    $0xc,%esp
f01183fc:	50                   	push   %eax
f01183fd:	e8 3d 66 ff ff       	call   f010ea3f <kfree>
f0118402:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118405:	e8 90 5c ff ff       	call   f010e09a <pf_calculate_free_frames>
f011840a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011840d:	74 17                	je     f0118426 <test_kfree_bestfit+0x1195>
f011840f:	83 ec 04             	sub    $0x4,%esp
f0118412:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118417:	68 17 07 00 00       	push   $0x717
f011841c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118421:	e8 6d 7d fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0118426:	e8 cc 3f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011842b:	89 c2                	mov    %eax,%edx
f011842d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118430:	29 c2                	sub    %eax,%edx
f0118432:	89 d0                	mov    %edx,%eax
f0118434:	83 f8 01             	cmp    $0x1,%eax
f0118437:	74 17                	je     f0118450 <test_kfree_bestfit+0x11bf>
f0118439:	83 ec 04             	sub    $0x4,%esp
f011843c:	68 20 05 12 f0       	push   $0xf0120520
f0118441:	68 18 07 00 00       	push   $0x718
f0118446:	68 e2 fd 11 f0       	push   $0xf011fde2
f011844b:	e8 43 7d fe ff       	call   f0100193 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118450:	e8 a2 3f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118455:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118458:	e8 3d 5c ff ff       	call   f010e09a <pf_calculate_free_frames>
f011845d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0118460:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118466:	83 ec 0c             	sub    $0xc,%esp
f0118469:	50                   	push   %eax
f011846a:	e8 d0 65 ff ff       	call   f010ea3f <kfree>
f011846f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118472:	e8 23 5c ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118477:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011847a:	74 17                	je     f0118493 <test_kfree_bestfit+0x1202>
f011847c:	83 ec 04             	sub    $0x4,%esp
f011847f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118484:	68 1e 07 00 00       	push   $0x71e
f0118489:	68 e2 fd 11 f0       	push   $0xf011fde2
f011848e:	e8 00 7d fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0118493:	e8 5f 3f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118498:	89 c2                	mov    %eax,%edx
f011849a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011849d:	29 c2                	sub    %eax,%edx
f011849f:	89 d0                	mov    %edx,%eax
f01184a1:	83 f8 04             	cmp    $0x4,%eax
f01184a4:	74 17                	je     f01184bd <test_kfree_bestfit+0x122c>
f01184a6:	83 ec 04             	sub    $0x4,%esp
f01184a9:	68 20 05 12 f0       	push   $0xf0120520
f01184ae:	68 1f 07 00 00       	push   $0x71f
f01184b3:	68 e2 fd 11 f0       	push   $0xf011fde2
f01184b8:	e8 d6 7c fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01184bd:	e8 35 3f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01184c2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01184c5:	e8 d0 5b ff ff       	call   f010e09a <pf_calculate_free_frames>
f01184ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01184cd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01184d3:	83 ec 0c             	sub    $0xc,%esp
f01184d6:	50                   	push   %eax
f01184d7:	e8 63 65 ff ff       	call   f010ea3f <kfree>
f01184dc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01184df:	e8 b6 5b ff ff       	call   f010e09a <pf_calculate_free_frames>
f01184e4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01184e7:	74 17                	je     f0118500 <test_kfree_bestfit+0x126f>
f01184e9:	83 ec 04             	sub    $0x4,%esp
f01184ec:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01184f1:	68 25 07 00 00       	push   $0x725
f01184f6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01184fb:	e8 93 7c fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0118500:	e8 f2 3e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118505:	89 c2                	mov    %eax,%edx
f0118507:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011850a:	29 c2                	sub    %eax,%edx
f011850c:	89 d0                	mov    %edx,%eax
f011850e:	83 f8 05             	cmp    $0x5,%eax
f0118511:	74 17                	je     f011852a <test_kfree_bestfit+0x1299>
f0118513:	83 ec 04             	sub    $0x4,%esp
f0118516:	68 20 05 12 f0       	push   $0xf0120520
f011851b:	68 26 07 00 00       	push   $0x726
f0118520:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118525:	e8 69 7c fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011852a:	e8 c8 3e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011852f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118532:	e8 63 5b ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118537:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011853a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118540:	83 ec 0c             	sub    $0xc,%esp
f0118543:	50                   	push   %eax
f0118544:	e8 f6 64 ff ff       	call   f010ea3f <kfree>
f0118549:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011854c:	e8 49 5b ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118551:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118554:	74 17                	je     f011856d <test_kfree_bestfit+0x12dc>
f0118556:	83 ec 04             	sub    $0x4,%esp
f0118559:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011855e:	68 2c 07 00 00       	push   $0x72c
f0118563:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118568:	e8 26 7c fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f011856d:	e8 85 3e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118572:	89 c2                	mov    %eax,%edx
f0118574:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118577:	29 c2                	sub    %eax,%edx
f0118579:	89 d0                	mov    %edx,%eax
f011857b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118580:	74 17                	je     f0118599 <test_kfree_bestfit+0x1308>
f0118582:	83 ec 04             	sub    $0x4,%esp
f0118585:	68 20 05 12 f0       	push   $0xf0120520
f011858a:	68 2d 07 00 00       	push   $0x72d
f011858f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118594:	e8 fa 7b fe ff       	call   f0100193 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0118599:	e8 59 3e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011859e:	89 c2                	mov    %eax,%edx
f01185a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01185a3:	39 c2                	cmp    %eax,%edx
f01185a5:	74 17                	je     f01185be <test_kfree_bestfit+0x132d>
f01185a7:	83 ec 04             	sub    $0x4,%esp
f01185aa:	68 c0 05 12 f0       	push   $0xf01205c0
f01185af:	68 2f 07 00 00       	push   $0x72f
f01185b4:	68 e2 fd 11 f0       	push   $0xf011fde2
f01185b9:	e8 d5 7b fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b60%");
f01185be:	83 ec 0c             	sub    $0xc,%esp
f01185c1:	68 f4 05 12 f0       	push   $0xf01205f4
f01185c6:	e8 6b ee fe ff       	call   f0107436 <cprintf>
f01185cb:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01185ce:	83 ec 0c             	sub    $0xc,%esp
f01185d1:	6a 03                	push   $0x3
f01185d3:	e8 a8 41 ff ff       	call   f010c780 <sys_bypassPageFault>
f01185d8:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01185db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01185e2:	e9 82 00 00 00       	jmp    f0118669 <test_kfree_bestfit+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f01185e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01185ea:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f01185f1:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01185f4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01185f7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01185fa:	e8 6f 41 ff ff       	call   f010c76e <sys_rcr2>
f01185ff:	89 c2                	mov    %eax,%edx
f0118601:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118604:	39 c2                	cmp    %eax,%edx
f0118606:	74 17                	je     f011861f <test_kfree_bestfit+0x138e>
f0118608:	83 ec 04             	sub    $0x4,%esp
f011860b:	68 fc 05 12 f0       	push   $0xf01205fc
f0118610:	68 3e 07 00 00       	push   $0x73e
f0118615:	68 e2 fd 11 f0       	push   $0xf011fde2
f011861a:	e8 74 7b fe ff       	call   f0100193 <_panic>
			ptr[lastIndices[i]] = 10;
f011861f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118622:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0118629:	89 c2                	mov    %eax,%edx
f011862b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011862e:	01 d0                	add    %edx,%eax
f0118630:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0118633:	e8 36 41 ff ff       	call   f010c76e <sys_rcr2>
f0118638:	89 c2                	mov    %eax,%edx
f011863a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011863d:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0118644:	89 c1                	mov    %eax,%ecx
f0118646:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118649:	01 c8                	add    %ecx,%eax
f011864b:	39 c2                	cmp    %eax,%edx
f011864d:	74 17                	je     f0118666 <test_kfree_bestfit+0x13d5>
f011864f:	83 ec 04             	sub    $0x4,%esp
f0118652:	68 fc 05 12 f0       	push   $0xf01205fc
f0118657:	68 40 07 00 00       	push   $0x740
f011865c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118661:	e8 2d 7b fe ff       	call   f0100193 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0118666:	ff 45 f4             	incl   -0xc(%ebp)
f0118669:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011866d:	0f 8e 74 ff ff ff    	jle    f01185e7 <test_kfree_bestfit+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0118673:	83 ec 0c             	sub    $0xc,%esp
f0118676:	6a 00                	push   $0x0
f0118678:	e8 03 41 ff ff       	call   f010c780 <sys_bypassPageFault>
f011867d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0118680:	83 ec 0c             	sub    $0xc,%esp
f0118683:	68 41 06 12 f0       	push   $0xf0120641
f0118688:	e8 a9 ed fe ff       	call   f0107436 <cprintf>
f011868d:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118690:	e8 62 3d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118695:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118698:	e8 fd 59 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011869d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01186a0:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01186a6:	83 ec 0c             	sub    $0xc,%esp
f01186a9:	50                   	push   %eax
f01186aa:	e8 90 63 ff ff       	call   f010ea3f <kfree>
f01186af:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01186b2:	e8 e3 59 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01186b7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01186ba:	74 17                	je     f01186d3 <test_kfree_bestfit+0x1442>
f01186bc:	83 ec 04             	sub    $0x4,%esp
f01186bf:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01186c4:	68 4e 07 00 00       	push   $0x74e
f01186c9:	68 e2 fd 11 f0       	push   $0xf011fde2
f01186ce:	e8 c0 7a fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01186d3:	e8 1f 3d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01186d8:	89 c2                	mov    %eax,%edx
f01186da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01186dd:	39 c2                	cmp    %eax,%edx
f01186df:	74 17                	je     f01186f8 <test_kfree_bestfit+0x1467>
f01186e1:	83 ec 04             	sub    $0x4,%esp
f01186e4:	68 48 06 12 f0       	push   $0xf0120648
f01186e9:	68 4f 07 00 00       	push   $0x74f
f01186ee:	68 e2 fd 11 f0       	push   $0xf011fde2
f01186f3:	e8 9b 7a fe ff       	call   f0100193 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01186f8:	e8 fa 3c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01186fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118700:	e8 95 59 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118705:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0118708:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011870e:	83 ec 0c             	sub    $0xc,%esp
f0118711:	50                   	push   %eax
f0118712:	e8 28 63 ff ff       	call   f010ea3f <kfree>
f0118717:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011871a:	e8 7b 59 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011871f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118722:	74 17                	je     f011873b <test_kfree_bestfit+0x14aa>
f0118724:	83 ec 04             	sub    $0x4,%esp
f0118727:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011872c:	68 55 07 00 00       	push   $0x755
f0118731:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118736:	e8 58 7a fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011873b:	e8 b7 3c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118740:	89 c2                	mov    %eax,%edx
f0118742:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118745:	39 c2                	cmp    %eax,%edx
f0118747:	74 17                	je     f0118760 <test_kfree_bestfit+0x14cf>
f0118749:	83 ec 04             	sub    $0x4,%esp
f011874c:	68 48 06 12 f0       	push   $0xf0120648
f0118751:	68 56 07 00 00       	push   $0x756
f0118756:	68 e2 fd 11 f0       	push   $0xf011fde2
f011875b:	e8 33 7a fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0118760:	e8 92 3c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118765:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118768:	e8 2d 59 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011876d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0118770:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118776:	83 ec 0c             	sub    $0xc,%esp
f0118779:	50                   	push   %eax
f011877a:	e8 c0 62 ff ff       	call   f010ea3f <kfree>
f011877f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118782:	e8 13 59 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118787:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011878a:	74 17                	je     f01187a3 <test_kfree_bestfit+0x1512>
f011878c:	83 ec 04             	sub    $0x4,%esp
f011878f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118794:	68 5c 07 00 00       	push   $0x75c
f0118799:	68 e2 fd 11 f0       	push   $0xf011fde2
f011879e:	e8 f0 79 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01187a3:	e8 4f 3c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01187a8:	89 c2                	mov    %eax,%edx
f01187aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01187ad:	39 c2                	cmp    %eax,%edx
f01187af:	74 17                	je     f01187c8 <test_kfree_bestfit+0x1537>
f01187b1:	83 ec 04             	sub    $0x4,%esp
f01187b4:	68 48 06 12 f0       	push   $0xf0120648
f01187b9:	68 5d 07 00 00       	push   $0x75d
f01187be:	68 e2 fd 11 f0       	push   $0xf011fde2
f01187c3:	e8 cb 79 fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01187c8:	e8 2a 3c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01187cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01187d0:	e8 c5 58 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01187d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01187d8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01187de:	83 ec 0c             	sub    $0xc,%esp
f01187e1:	50                   	push   %eax
f01187e2:	e8 58 62 ff ff       	call   f010ea3f <kfree>
f01187e7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01187ea:	e8 ab 58 ff ff       	call   f010e09a <pf_calculate_free_frames>
f01187ef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01187f2:	74 17                	je     f011880b <test_kfree_bestfit+0x157a>
f01187f4:	83 ec 04             	sub    $0x4,%esp
f01187f7:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01187fc:	68 63 07 00 00       	push   $0x763
f0118801:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118806:	e8 88 79 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011880b:	e8 e7 3b ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118810:	89 c2                	mov    %eax,%edx
f0118812:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118815:	39 c2                	cmp    %eax,%edx
f0118817:	74 17                	je     f0118830 <test_kfree_bestfit+0x159f>
f0118819:	83 ec 04             	sub    $0x4,%esp
f011881c:	68 48 06 12 f0       	push   $0xf0120648
f0118821:	68 64 07 00 00       	push   $0x764
f0118826:	68 e2 fd 11 f0       	push   $0xf011fde2
f011882b:	e8 63 79 fe ff       	call   f0100193 <_panic>

	}
	cprintf("\b\b\b85%");
f0118830:	83 ec 0c             	sub    $0xc,%esp
f0118833:	68 8f 06 12 f0       	push   $0xf012068f
f0118838:	e8 f9 eb fe ff       	call   f0107436 <cprintf>
f011883d:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0118840:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0118847:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011884e:	eb 4a                	jmp    f011889a <test_kfree_bestfit+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0118850:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118853:	89 c1                	mov    %eax,%ecx
f0118855:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f011885a:	83 ec 04             	sub    $0x4,%esp
f011885d:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0118863:	52                   	push   %edx
f0118864:	51                   	push   %ecx
f0118865:	50                   	push   %eax
f0118866:	e8 00 b6 fe ff       	call   f0103e6b <get_page_table>
f011886b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011886e:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0118874:	85 c0                	test   %eax,%eax
f0118876:	75 17                	jne    f011888f <test_kfree_bestfit+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0118878:	83 ec 04             	sub    $0x4,%esp
f011887b:	68 98 06 12 f0       	push   $0xf0120698
f0118880:	68 72 07 00 00       	push   $0x772
f0118885:	68 e2 fd 11 f0       	push   $0xf011fde2
f011888a:	e8 04 79 fe ff       	call   f0100193 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011888f:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0118896:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f011889a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011889e:	78 b0                	js     f0118850 <test_kfree_bestfit+0x15bf>
f01188a0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01188a4:	7f 09                	jg     f01188af <test_kfree_bestfit+0x161e>
f01188a6:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01188ad:	76 a1                	jbe    f0118850 <test_kfree_bestfit+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01188af:	83 ec 0c             	sub    $0xc,%esp
f01188b2:	68 be ff 11 f0       	push   $0xf011ffbe
f01188b7:	e8 7a eb fe ff       	call   f0107436 <cprintf>
f01188bc:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01188bf:	83 ec 0c             	sub    $0xc,%esp
f01188c2:	68 00 07 12 f0       	push   $0xf0120700
f01188c7:	e8 6a eb fe ff       	call   f0107436 <cprintf>
f01188cc:	83 c4 10             	add    $0x10,%esp

	return 1;
f01188cf:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01188d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01188d7:	5b                   	pop    %ebx
f01188d8:	5f                   	pop    %edi
f01188d9:	5d                   	pop    %ebp
f01188da:	c3                   	ret    

f01188db <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01188db:	55                   	push   %ebp
f01188dc:	89 e5                	mov    %esp,%ebp
f01188de:	57                   	push   %edi
f01188df:	56                   	push   %esi
f01188e0:	53                   	push   %ebx
f01188e1:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f01188e7:	83 ec 0c             	sub    $0xc,%esp
f01188ea:	68 24 fd 11 f0       	push   $0xf011fd24
f01188ef:	e8 42 eb fe ff       	call   f0107436 <cprintf>
f01188f4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01188f7:	83 ec 0c             	sub    $0xc,%esp
f01188fa:	68 54 fd 11 f0       	push   $0xf011fd54
f01188ff:	e8 32 eb fe ff       	call   f0107436 <cprintf>
f0118904:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118907:	83 ec 0c             	sub    $0xc,%esp
f011890a:	68 24 fd 11 f0       	push   $0xf011fd24
f011890f:	e8 22 eb fe ff       	call   f0107436 <cprintf>
f0118914:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118917:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f011891b:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f011891f:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0118925:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f011892b:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0118932:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118939:	e8 b9 3a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011893e:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0118941:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0118947:	b9 14 00 00 00       	mov    $0x14,%ecx
f011894c:	b8 00 00 00 00       	mov    $0x0,%eax
f0118951:	89 d7                	mov    %edx,%edi
f0118953:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0118955:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f011895b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118960:	b8 00 00 00 00       	mov    $0x0,%eax
f0118965:	89 d7                	mov    %edx,%edi
f0118967:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0118969:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f011896f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118974:	b8 00 00 00 00       	mov    $0x0,%eax
f0118979:	89 d7                	mov    %edx,%edi
f011897b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011897d:	e8 75 3a ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118982:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118985:	e8 10 57 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011898a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011898d:	83 ec 0c             	sub    $0xc,%esp
f0118990:	68 00 fc 1f 00       	push   $0x1ffc00
f0118995:	e8 8b 60 ff ff       	call   f010ea25 <kmalloc>
f011899a:	83 c4 10             	add    $0x10,%esp
f011899d:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01189a3:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f01189a9:	89 c1                	mov    %eax,%ecx
f01189ab:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01189b2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01189b7:	0f b6 d0             	movzbl %al,%edx
f01189ba:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01189bd:	01 d0                	add    %edx,%eax
f01189bf:	48                   	dec    %eax
f01189c0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01189c3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01189c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01189cb:	f7 75 a0             	divl   -0x60(%ebp)
f01189ce:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01189d1:	29 d0                	sub    %edx,%eax
f01189d3:	89 c3                	mov    %eax,%ebx
f01189d5:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01189dc:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01189e1:	0f b6 c0             	movzbl %al,%eax
f01189e4:	c1 e0 04             	shl    $0x4,%eax
f01189e7:	89 c2                	mov    %eax,%edx
f01189e9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01189ec:	01 d0                	add    %edx,%eax
f01189ee:	48                   	dec    %eax
f01189ef:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01189f2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01189f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01189fa:	f7 75 98             	divl   -0x68(%ebp)
f01189fd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118a00:	29 d0                	sub    %edx,%eax
f0118a02:	01 d8                	add    %ebx,%eax
f0118a04:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118a09:	39 c1                	cmp    %eax,%ecx
f0118a0b:	74 17                	je     f0118a24 <test_kheap_phys_addr+0x149>
f0118a0d:	83 ec 04             	sub    $0x4,%esp
f0118a10:	68 c0 fe 11 f0       	push   $0xf011fec0
f0118a15:	68 9f 07 00 00       	push   $0x79f
f0118a1a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118a1f:	e8 6f 77 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118a24:	e8 71 56 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118a29:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118a2c:	74 17                	je     f0118a45 <test_kheap_phys_addr+0x16a>
f0118a2e:	83 ec 04             	sub    $0x4,%esp
f0118a31:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118a36:	68 a0 07 00 00       	push   $0x7a0
f0118a3b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118a40:	e8 4e 77 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a45:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118a48:	e8 aa 39 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118a4d:	29 c3                	sub    %eax,%ebx
f0118a4f:	89 d8                	mov    %ebx,%eax
f0118a51:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118a56:	74 17                	je     f0118a6f <test_kheap_phys_addr+0x194>
f0118a58:	83 ec 04             	sub    $0x4,%esp
f0118a5b:	68 5c fe 11 f0       	push   $0xf011fe5c
f0118a60:	68 a1 07 00 00       	push   $0x7a1
f0118a65:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118a6a:	e8 24 77 fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118a6f:	e8 83 39 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118a74:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a77:	e8 1e 56 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118a7c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118a7f:	83 ec 0c             	sub    $0xc,%esp
f0118a82:	68 00 fc 1f 00       	push   $0x1ffc00
f0118a87:	e8 99 5f ff ff       	call   f010ea25 <kmalloc>
f0118a8c:	83 c4 10             	add    $0x10,%esp
f0118a8f:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a95:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0118a9b:	89 c1                	mov    %eax,%ecx
f0118a9d:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118aa4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118aa9:	0f b6 d0             	movzbl %al,%edx
f0118aac:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118aaf:	01 d0                	add    %edx,%eax
f0118ab1:	48                   	dec    %eax
f0118ab2:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118ab5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118ab8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118abd:	f7 75 90             	divl   -0x70(%ebp)
f0118ac0:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118ac3:	29 d0                	sub    %edx,%eax
f0118ac5:	89 c3                	mov    %eax,%ebx
f0118ac7:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118ace:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118ad3:	0f b6 c0             	movzbl %al,%eax
f0118ad6:	c1 e0 04             	shl    $0x4,%eax
f0118ad9:	89 c2                	mov    %eax,%edx
f0118adb:	8b 45 88             	mov    -0x78(%ebp),%eax
f0118ade:	01 d0                	add    %edx,%eax
f0118ae0:	48                   	dec    %eax
f0118ae1:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0118ae4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118ae7:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aec:	f7 75 88             	divl   -0x78(%ebp)
f0118aef:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0118af2:	29 d0                	sub    %edx,%eax
f0118af4:	01 d8                	add    %ebx,%eax
f0118af6:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0118afb:	39 c1                	cmp    %eax,%ecx
f0118afd:	74 17                	je     f0118b16 <test_kheap_phys_addr+0x23b>
f0118aff:	83 ec 04             	sub    $0x4,%esp
f0118b02:	68 c0 fe 11 f0       	push   $0xf011fec0
f0118b07:	68 a7 07 00 00       	push   $0x7a7
f0118b0c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118b11:	e8 7d 76 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b16:	e8 7f 55 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118b1b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118b1e:	74 17                	je     f0118b37 <test_kheap_phys_addr+0x25c>
f0118b20:	83 ec 04             	sub    $0x4,%esp
f0118b23:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118b28:	68 a8 07 00 00       	push   $0x7a8
f0118b2d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118b32:	e8 5c 76 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b37:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118b3a:	e8 b8 38 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118b3f:	29 c3                	sub    %eax,%ebx
f0118b41:	89 d8                	mov    %ebx,%eax
f0118b43:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118b48:	74 17                	je     f0118b61 <test_kheap_phys_addr+0x286>
f0118b4a:	83 ec 04             	sub    $0x4,%esp
f0118b4d:	68 5c fe 11 f0       	push   $0xf011fe5c
f0118b52:	68 a9 07 00 00       	push   $0x7a9
f0118b57:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118b5c:	e8 32 76 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118b61:	e8 91 38 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118b66:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b69:	e8 2c 55 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118b6e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0118b71:	83 ec 0c             	sub    $0xc,%esp
f0118b74:	68 00 08 00 00       	push   $0x800
f0118b79:	e8 a7 5e ff ff       	call   f010ea25 <kmalloc>
f0118b7e:	83 c4 10             	add    $0x10,%esp
f0118b81:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118b87:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0118b8d:	89 c1                	mov    %eax,%ecx
f0118b8f:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0118b96:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118b9b:	0f b6 d0             	movzbl %al,%edx
f0118b9e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118ba1:	01 d0                	add    %edx,%eax
f0118ba3:	48                   	dec    %eax
f0118ba4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118baa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118bb0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bb5:	f7 75 80             	divl   -0x80(%ebp)
f0118bb8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118bbe:	29 d0                	sub    %edx,%eax
f0118bc0:	89 c3                	mov    %eax,%ebx
f0118bc2:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118bc9:	10 00 00 
f0118bcc:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118bd1:	0f b6 c0             	movzbl %al,%eax
f0118bd4:	c1 e0 04             	shl    $0x4,%eax
f0118bd7:	89 c2                	mov    %eax,%edx
f0118bd9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118bdf:	01 d0                	add    %edx,%eax
f0118be1:	48                   	dec    %eax
f0118be2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118be8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118bee:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bf3:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118bf9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118bff:	29 d0                	sub    %edx,%eax
f0118c01:	01 d8                	add    %ebx,%eax
f0118c03:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0118c08:	39 c1                	cmp    %eax,%ecx
f0118c0a:	74 17                	je     f0118c23 <test_kheap_phys_addr+0x348>
f0118c0c:	83 ec 04             	sub    $0x4,%esp
f0118c0f:	68 c0 fe 11 f0       	push   $0xf011fec0
f0118c14:	68 af 07 00 00       	push   $0x7af
f0118c19:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118c1e:	e8 70 75 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c23:	e8 72 54 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118c28:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118c2b:	74 17                	je     f0118c44 <test_kheap_phys_addr+0x369>
f0118c2d:	83 ec 04             	sub    $0x4,%esp
f0118c30:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118c35:	68 b0 07 00 00       	push   $0x7b0
f0118c3a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118c3f:	e8 4f 75 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118c44:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118c47:	e8 ab 37 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118c4c:	29 c3                	sub    %eax,%ebx
f0118c4e:	89 d8                	mov    %ebx,%eax
f0118c50:	83 f8 01             	cmp    $0x1,%eax
f0118c53:	74 17                	je     f0118c6c <test_kheap_phys_addr+0x391>
f0118c55:	83 ec 04             	sub    $0x4,%esp
f0118c58:	68 5c fe 11 f0       	push   $0xf011fe5c
f0118c5d:	68 b1 07 00 00       	push   $0x7b1
f0118c62:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118c67:	e8 27 75 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118c6c:	e8 86 37 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118c71:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c74:	e8 21 54 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118c79:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118c7c:	83 ec 0c             	sub    $0xc,%esp
f0118c7f:	68 00 08 00 00       	push   $0x800
f0118c84:	e8 9c 5d ff ff       	call   f010ea25 <kmalloc>
f0118c89:	83 c4 10             	add    $0x10,%esp
f0118c8c:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118c92:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0118c98:	89 c1                	mov    %eax,%ecx
f0118c9a:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118ca1:	10 00 00 
f0118ca4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118ca9:	0f b6 d0             	movzbl %al,%edx
f0118cac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118cb2:	01 d0                	add    %edx,%eax
f0118cb4:	48                   	dec    %eax
f0118cb5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118cbb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118cc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cc6:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118ccc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118cd2:	29 d0                	sub    %edx,%eax
f0118cd4:	89 c3                	mov    %eax,%ebx
f0118cd6:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118cdd:	10 00 00 
f0118ce0:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118ce5:	0f b6 c0             	movzbl %al,%eax
f0118ce8:	c1 e0 04             	shl    $0x4,%eax
f0118ceb:	89 c2                	mov    %eax,%edx
f0118ced:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118cf3:	01 d0                	add    %edx,%eax
f0118cf5:	48                   	dec    %eax
f0118cf6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118cfc:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118d02:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d07:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118d0d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118d13:	29 d0                	sub    %edx,%eax
f0118d15:	01 d8                	add    %ebx,%eax
f0118d17:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118d1c:	39 c1                	cmp    %eax,%ecx
f0118d1e:	74 17                	je     f0118d37 <test_kheap_phys_addr+0x45c>
f0118d20:	83 ec 04             	sub    $0x4,%esp
f0118d23:	68 c0 fe 11 f0       	push   $0xf011fec0
f0118d28:	68 b7 07 00 00       	push   $0x7b7
f0118d2d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118d32:	e8 5c 74 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d37:	e8 5e 53 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118d3c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118d3f:	74 17                	je     f0118d58 <test_kheap_phys_addr+0x47d>
f0118d41:	83 ec 04             	sub    $0x4,%esp
f0118d44:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118d49:	68 b8 07 00 00       	push   $0x7b8
f0118d4e:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118d53:	e8 3b 74 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118d58:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118d5b:	e8 97 36 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118d60:	29 c3                	sub    %eax,%ebx
f0118d62:	89 d8                	mov    %ebx,%eax
f0118d64:	83 f8 01             	cmp    $0x1,%eax
f0118d67:	74 17                	je     f0118d80 <test_kheap_phys_addr+0x4a5>
f0118d69:	83 ec 04             	sub    $0x4,%esp
f0118d6c:	68 5c fe 11 f0       	push   $0xf011fe5c
f0118d71:	68 b9 07 00 00       	push   $0x7b9
f0118d76:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118d7b:	e8 13 74 fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118d80:	e8 72 36 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118d85:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118d88:	e8 0d 53 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118d8d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118d90:	83 ec 0c             	sub    $0xc,%esp
f0118d93:	68 00 1c 00 00       	push   $0x1c00
f0118d98:	e8 88 5c ff ff       	call   f010ea25 <kmalloc>
f0118d9d:	83 c4 10             	add    $0x10,%esp
f0118da0:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118da6:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0118dac:	89 c1                	mov    %eax,%ecx
f0118dae:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118db5:	10 00 00 
f0118db8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118dbd:	0f b6 d0             	movzbl %al,%edx
f0118dc0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118dc6:	01 d0                	add    %edx,%eax
f0118dc8:	48                   	dec    %eax
f0118dc9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118dcf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118dd5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dda:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118de0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118de6:	29 d0                	sub    %edx,%eax
f0118de8:	89 c3                	mov    %eax,%ebx
f0118dea:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118df1:	10 00 00 
f0118df4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118df9:	0f b6 c0             	movzbl %al,%eax
f0118dfc:	c1 e0 04             	shl    $0x4,%eax
f0118dff:	89 c2                	mov    %eax,%edx
f0118e01:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118e07:	01 d0                	add    %edx,%eax
f0118e09:	48                   	dec    %eax
f0118e0a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118e10:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118e16:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e1b:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118e21:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118e27:	29 d0                	sub    %edx,%eax
f0118e29:	01 d8                	add    %ebx,%eax
f0118e2b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118e30:	39 c1                	cmp    %eax,%ecx
f0118e32:	74 17                	je     f0118e4b <test_kheap_phys_addr+0x570>
f0118e34:	83 ec 04             	sub    $0x4,%esp
f0118e37:	68 c0 fe 11 f0       	push   $0xf011fec0
f0118e3c:	68 bf 07 00 00       	push   $0x7bf
f0118e41:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118e46:	e8 48 73 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e4b:	e8 4a 52 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118e50:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118e53:	74 17                	je     f0118e6c <test_kheap_phys_addr+0x591>
f0118e55:	83 ec 04             	sub    $0x4,%esp
f0118e58:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118e5d:	68 c0 07 00 00       	push   $0x7c0
f0118e62:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118e67:	e8 27 73 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e6c:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118e6f:	e8 83 35 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118e74:	29 c3                	sub    %eax,%ebx
f0118e76:	89 d8                	mov    %ebx,%eax
f0118e78:	83 f8 02             	cmp    $0x2,%eax
f0118e7b:	74 17                	je     f0118e94 <test_kheap_phys_addr+0x5b9>
f0118e7d:	83 ec 04             	sub    $0x4,%esp
f0118e80:	68 5c fe 11 f0       	push   $0xf011fe5c
f0118e85:	68 c1 07 00 00       	push   $0x7c1
f0118e8a:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118e8f:	e8 ff 72 fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118e94:	e8 5e 35 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118e99:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e9c:	e8 f9 51 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118ea1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118ea4:	83 ec 0c             	sub    $0xc,%esp
f0118ea7:	68 00 fc 2f 00       	push   $0x2ffc00
f0118eac:	e8 74 5b ff ff       	call   f010ea25 <kmalloc>
f0118eb1:	83 c4 10             	add    $0x10,%esp
f0118eb4:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118eba:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0118ec0:	89 c1                	mov    %eax,%ecx
f0118ec2:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118ec9:	10 00 00 
f0118ecc:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118ed1:	0f b6 d0             	movzbl %al,%edx
f0118ed4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118eda:	01 d0                	add    %edx,%eax
f0118edc:	48                   	dec    %eax
f0118edd:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118ee3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118ee9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eee:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118ef4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118efa:	29 d0                	sub    %edx,%eax
f0118efc:	89 c3                	mov    %eax,%ebx
f0118efe:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118f05:	10 00 00 
f0118f08:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118f0d:	0f b6 c0             	movzbl %al,%eax
f0118f10:	c1 e0 04             	shl    $0x4,%eax
f0118f13:	89 c2                	mov    %eax,%edx
f0118f15:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118f1b:	01 d0                	add    %edx,%eax
f0118f1d:	48                   	dec    %eax
f0118f1e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118f24:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118f2a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f2f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118f35:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118f3b:	29 d0                	sub    %edx,%eax
f0118f3d:	01 d8                	add    %ebx,%eax
f0118f3f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118f44:	39 c1                	cmp    %eax,%ecx
f0118f46:	74 17                	je     f0118f5f <test_kheap_phys_addr+0x684>
f0118f48:	83 ec 04             	sub    $0x4,%esp
f0118f4b:	68 c0 fe 11 f0       	push   $0xf011fec0
f0118f50:	68 c7 07 00 00       	push   $0x7c7
f0118f55:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118f5a:	e8 34 72 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f5f:	e8 36 51 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118f64:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118f67:	74 17                	je     f0118f80 <test_kheap_phys_addr+0x6a5>
f0118f69:	83 ec 04             	sub    $0x4,%esp
f0118f6c:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0118f71:	68 c8 07 00 00       	push   $0x7c8
f0118f76:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118f7b:	e8 13 72 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f80:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118f83:	e8 6f 34 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118f88:	29 c3                	sub    %eax,%ebx
f0118f8a:	89 d8                	mov    %ebx,%eax
f0118f8c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118f91:	74 17                	je     f0118faa <test_kheap_phys_addr+0x6cf>
f0118f93:	83 ec 04             	sub    $0x4,%esp
f0118f96:	68 5c fe 11 f0       	push   $0xf011fe5c
f0118f9b:	68 c9 07 00 00       	push   $0x7c9
f0118fa0:	68 e2 fd 11 f0       	push   $0xf011fde2
f0118fa5:	e8 e9 71 fe ff       	call   f0100193 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118faa:	e8 48 34 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0118faf:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118fb2:	e8 e3 50 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0118fb7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118fba:	83 ec 0c             	sub    $0xc,%esp
f0118fbd:	68 00 fc 5f 00       	push   $0x5ffc00
f0118fc2:	e8 5e 5a ff ff       	call   f010ea25 <kmalloc>
f0118fc7:	83 c4 10             	add    $0x10,%esp
f0118fca:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118fd0:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0118fd6:	89 c1                	mov    %eax,%ecx
f0118fd8:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118fdf:	10 00 00 
f0118fe2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0118fe7:	0f b6 d0             	movzbl %al,%edx
f0118fea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118ff0:	01 d0                	add    %edx,%eax
f0118ff2:	48                   	dec    %eax
f0118ff3:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118ff9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118fff:	ba 00 00 00 00       	mov    $0x0,%edx
f0119004:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011900a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119010:	29 d0                	sub    %edx,%eax
f0119012:	89 c3                	mov    %eax,%ebx
f0119014:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011901b:	10 00 00 
f011901e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119023:	0f b6 c0             	movzbl %al,%eax
f0119026:	c1 e0 04             	shl    $0x4,%eax
f0119029:	89 c2                	mov    %eax,%edx
f011902b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119031:	01 d0                	add    %edx,%eax
f0119033:	48                   	dec    %eax
f0119034:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011903a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119040:	ba 00 00 00 00       	mov    $0x0,%edx
f0119045:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011904b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119051:	29 d0                	sub    %edx,%eax
f0119053:	01 d8                	add    %ebx,%eax
f0119055:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011905a:	39 c1                	cmp    %eax,%ecx
f011905c:	74 17                	je     f0119075 <test_kheap_phys_addr+0x79a>
f011905e:	83 ec 04             	sub    $0x4,%esp
f0119061:	68 c0 fe 11 f0       	push   $0xf011fec0
f0119066:	68 cf 07 00 00       	push   $0x7cf
f011906b:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119070:	e8 1e 71 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119075:	e8 20 50 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011907a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011907d:	74 17                	je     f0119096 <test_kheap_phys_addr+0x7bb>
f011907f:	83 ec 04             	sub    $0x4,%esp
f0119082:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119087:	68 d0 07 00 00       	push   $0x7d0
f011908c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119091:	e8 fd 70 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119096:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0119099:	e8 59 33 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011909e:	29 c3                	sub    %eax,%ebx
f01190a0:	89 d8                	mov    %ebx,%eax
f01190a2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01190a7:	74 17                	je     f01190c0 <test_kheap_phys_addr+0x7e5>
f01190a9:	83 ec 04             	sub    $0x4,%esp
f01190ac:	68 5c fe 11 f0       	push   $0xf011fe5c
f01190b1:	68 d1 07 00 00       	push   $0x7d1
f01190b6:	68 e2 fd 11 f0       	push   $0xf011fde2
f01190bb:	e8 d3 70 fe ff       	call   f0100193 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01190c0:	e8 32 33 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01190c5:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01190c8:	e8 cd 4f ff ff       	call   f010e09a <pf_calculate_free_frames>
f01190cd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01190d0:	83 ec 0c             	sub    $0xc,%esp
f01190d3:	68 00 38 00 00       	push   $0x3800
f01190d8:	e8 48 59 ff ff       	call   f010ea25 <kmalloc>
f01190dd:	83 c4 10             	add    $0x10,%esp
f01190e0:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01190e6:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01190ec:	89 c1                	mov    %eax,%ecx
f01190ee:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01190f5:	10 00 00 
f01190f8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01190fd:	0f b6 d0             	movzbl %al,%edx
f0119100:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119106:	01 d0                	add    %edx,%eax
f0119108:	48                   	dec    %eax
f0119109:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011910f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119115:	ba 00 00 00 00       	mov    $0x0,%edx
f011911a:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0119120:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119126:	29 d0                	sub    %edx,%eax
f0119128:	89 c3                	mov    %eax,%ebx
f011912a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0119131:	10 00 00 
f0119134:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119139:	0f b6 c0             	movzbl %al,%eax
f011913c:	c1 e0 04             	shl    $0x4,%eax
f011913f:	89 c2                	mov    %eax,%edx
f0119141:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119147:	01 d0                	add    %edx,%eax
f0119149:	48                   	dec    %eax
f011914a:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0119150:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119156:	ba 00 00 00 00       	mov    $0x0,%edx
f011915b:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119161:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0119167:	29 d0                	sub    %edx,%eax
f0119169:	01 d8                	add    %ebx,%eax
f011916b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0119170:	39 c1                	cmp    %eax,%ecx
f0119172:	74 17                	je     f011918b <test_kheap_phys_addr+0x8b0>
f0119174:	83 ec 04             	sub    $0x4,%esp
f0119177:	68 c0 fe 11 f0       	push   $0xf011fec0
f011917c:	68 d7 07 00 00       	push   $0x7d7
f0119181:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119186:	e8 08 70 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011918b:	e8 0a 4f ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119190:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0119193:	74 17                	je     f01191ac <test_kheap_phys_addr+0x8d1>
f0119195:	83 ec 04             	sub    $0x4,%esp
f0119198:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011919d:	68 d8 07 00 00       	push   $0x7d8
f01191a2:	68 e2 fd 11 f0       	push   $0xf011fde2
f01191a7:	e8 e7 6f fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01191ac:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01191af:	e8 43 32 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01191b4:	29 c3                	sub    %eax,%ebx
f01191b6:	89 d8                	mov    %ebx,%eax
f01191b8:	83 f8 04             	cmp    $0x4,%eax
f01191bb:	74 17                	je     f01191d4 <test_kheap_phys_addr+0x8f9>
f01191bd:	83 ec 04             	sub    $0x4,%esp
f01191c0:	68 5c fe 11 f0       	push   $0xf011fe5c
f01191c5:	68 d9 07 00 00       	push   $0x7d9
f01191ca:	68 e2 fd 11 f0       	push   $0xf011fde2
f01191cf:	e8 bf 6f fe ff       	call   f0100193 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f01191d4:	89 e0                	mov    %esp,%eax
f01191d6:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01191d8:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01191df:	10 00 00 
f01191e2:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01191e7:	0f b6 d0             	movzbl %al,%edx
f01191ea:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01191f0:	01 d0                	add    %edx,%eax
f01191f2:	48                   	dec    %eax
f01191f3:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01191f9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01191ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0119204:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011920a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0119210:	29 d0                	sub    %edx,%eax
f0119212:	89 c1                	mov    %eax,%ecx
f0119214:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011921b:	10 00 00 
f011921e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119223:	0f b6 c0             	movzbl %al,%eax
f0119226:	c1 e0 04             	shl    $0x4,%eax
f0119229:	89 c2                	mov    %eax,%edx
f011922b:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0119231:	01 d0                	add    %edx,%eax
f0119233:	48                   	dec    %eax
f0119234:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011923a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119240:	ba 00 00 00 00       	mov    $0x0,%edx
f0119245:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011924b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119251:	29 d0                	sub    %edx,%eax
f0119253:	01 c8                	add    %ecx,%eax
f0119255:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011925a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f0119260:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119267:	10 00 00 
f011926a:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011926f:	0f b6 d0             	movzbl %al,%edx
f0119272:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119278:	01 d0                	add    %edx,%eax
f011927a:	48                   	dec    %eax
f011927b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0119281:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119287:	ba 00 00 00 00       	mov    $0x0,%edx
f011928c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0119292:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119298:	29 d0                	sub    %edx,%eax
f011929a:	89 c1                	mov    %eax,%ecx
f011929c:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f01192a3:	10 00 00 
f01192a6:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01192ab:	0f b6 c0             	movzbl %al,%eax
f01192ae:	c1 e0 04             	shl    $0x4,%eax
f01192b1:	89 c2                	mov    %eax,%edx
f01192b3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01192b9:	01 d0                	add    %edx,%eax
f01192bb:	48                   	dec    %eax
f01192bc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f01192c2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01192c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01192cd:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f01192d3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01192d9:	29 d0                	sub    %edx,%eax
f01192db:	01 c8                	add    %ecx,%eax
f01192dd:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01192e2:	c1 e8 0c             	shr    $0xc,%eax
f01192e5:	89 c2                	mov    %eax,%edx
f01192e7:	4a                   	dec    %edx
f01192e8:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f01192ee:	c1 e0 02             	shl    $0x2,%eax
f01192f1:	8d 50 03             	lea    0x3(%eax),%edx
f01192f4:	b8 10 00 00 00       	mov    $0x10,%eax
f01192f9:	48                   	dec    %eax
f01192fa:	01 d0                	add    %edx,%eax
f01192fc:	bf 10 00 00 00       	mov    $0x10,%edi
f0119301:	ba 00 00 00 00       	mov    $0x0,%edx
f0119306:	f7 f7                	div    %edi
f0119308:	6b c0 10             	imul   $0x10,%eax,%eax
f011930b:	29 c4                	sub    %eax,%esp
f011930d:	89 e0                	mov    %esp,%eax
f011930f:	83 c0 03             	add    $0x3,%eax
f0119312:	c1 e8 02             	shr    $0x2,%eax
f0119315:	c1 e0 02             	shl    $0x2,%eax
f0119318:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f011931e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0119325:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011932c:	eb 29                	jmp    f0119357 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f011932e:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0119331:	8d 43 01             	lea    0x1(%ebx),%eax
f0119334:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119337:	83 ec 0c             	sub    $0xc,%esp
f011933a:	ff 75 e0             	pushl  -0x20(%ebp)
f011933d:	e8 31 57 ff ff       	call   f010ea73 <kheap_physical_address>
f0119342:	83 c4 10             	add    $0x10,%esp
f0119345:	89 c2                	mov    %eax,%edx
f0119347:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011934d:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0119350:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0119357:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011935a:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0119360:	72 cc                	jb     f011932e <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0119362:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119365:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f011936b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0119372:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0119379:	e9 a5 00 00 00       	jmp    f0119423 <test_kheap_phys_addr+0xb48>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f011937e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0119381:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0119386:	83 ec 04             	sub    $0x4,%esp
f0119389:	8d 8d a8 fd ff ff    	lea    -0x258(%ebp),%ecx
f011938f:	51                   	push   %ecx
f0119390:	52                   	push   %edx
f0119391:	50                   	push   %eax
f0119392:	e8 d4 aa fe ff       	call   f0103e6b <get_page_table>
f0119397:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011939a:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01193a0:	85 c0                	test   %eax,%eax
f01193a2:	75 17                	jne    f01193bb <test_kheap_phys_addr+0xae0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01193a4:	83 ec 04             	sub    $0x4,%esp
f01193a7:	68 38 07 12 f0       	push   $0xf0120738
f01193ac:	68 ee 07 00 00       	push   $0x7ee
f01193b1:	68 e2 fd 11 f0       	push   $0xf011fde2
f01193b6:	e8 d8 6d fe ff       	call   f0100193 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01193bb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01193c2:	eb 44                	jmp    f0119408 <test_kheap_phys_addr+0xb2d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01193c4:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f01193ca:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01193cd:	c1 e2 02             	shl    $0x2,%edx
f01193d0:	01 d0                	add    %edx,%eax
f01193d2:	8b 00                	mov    (%eax),%eax
f01193d4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01193d9:	89 c1                	mov    %eax,%ecx
f01193db:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01193e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01193e4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01193e7:	39 c1                	cmp    %eax,%ecx
f01193e9:	74 17                	je     f0119402 <test_kheap_phys_addr+0xb27>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01193eb:	83 ec 04             	sub    $0x4,%esp
f01193ee:	68 91 07 12 f0       	push   $0xf0120791
f01193f3:	68 f5 07 00 00       	push   $0x7f5
f01193f8:	68 e2 fd 11 f0       	push   $0xf011fde2
f01193fd:	e8 91 6d fe ff       	call   f0100193 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0119402:	ff 45 dc             	incl   -0x24(%ebp)
f0119405:	ff 45 e4             	incl   -0x1c(%ebp)
f0119408:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011940b:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0119411:	7d 09                	jge    f011941c <test_kheap_phys_addr+0xb41>
f0119413:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f011941a:	7e a8                	jle    f01193c4 <test_kheap_phys_addr+0xae9>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011941c:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f0119423:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119426:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f011942c:	0f 82 4c ff ff ff    	jb     f011937e <test_kheap_phys_addr+0xaa3>
f0119432:	89 f4                	mov    %esi,%esp
					panic("Wrong kheap_physical_address");
				}
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0119434:	83 ec 0c             	sub    $0xc,%esp
f0119437:	68 b0 07 12 f0       	push   $0xf01207b0
f011943c:	e8 f5 df fe ff       	call   f0107436 <cprintf>
f0119441:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0119444:	e8 ae 2f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119449:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011944f:	e8 46 4c ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119454:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f011945a:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0119460:	83 ec 0c             	sub    $0xc,%esp
f0119463:	50                   	push   %eax
f0119464:	e8 d6 55 ff ff       	call   f010ea3f <kfree>
f0119469:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011946c:	e8 29 4c ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119471:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0119477:	74 17                	je     f0119490 <test_kheap_phys_addr+0xbb5>
f0119479:	83 ec 04             	sub    $0x4,%esp
f011947c:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119481:	68 02 08 00 00       	push   $0x802
f0119486:	68 e2 fd 11 f0       	push   $0xf011fde2
f011948b:	e8 03 6d fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0119490:	e8 62 2f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119495:	89 c2                	mov    %eax,%edx
f0119497:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011949d:	29 c2                	sub    %eax,%edx
f011949f:	89 d0                	mov    %edx,%eax
f01194a1:	3d 00 02 00 00       	cmp    $0x200,%eax
f01194a6:	74 17                	je     f01194bf <test_kheap_phys_addr+0xbe4>
f01194a8:	83 ec 04             	sub    $0x4,%esp
f01194ab:	68 20 05 12 f0       	push   $0xf0120520
f01194b0:	68 03 08 00 00       	push   $0x803
f01194b5:	68 e2 fd 11 f0       	push   $0xf011fde2
f01194ba:	e8 d4 6c fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01194bf:	e8 33 2f ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f01194c4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01194ca:	e8 cb 4b ff ff       	call   f010e09a <pf_calculate_free_frames>
f01194cf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f01194d5:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01194db:	83 ec 0c             	sub    $0xc,%esp
f01194de:	50                   	push   %eax
f01194df:	e8 5b 55 ff ff       	call   f010ea3f <kfree>
f01194e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01194e7:	e8 ae 4b ff ff       	call   f010e09a <pf_calculate_free_frames>
f01194ec:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01194f2:	74 17                	je     f011950b <test_kheap_phys_addr+0xc30>
f01194f4:	83 ec 04             	sub    $0x4,%esp
f01194f7:	68 f4 fd 11 f0       	push   $0xf011fdf4
f01194fc:	68 09 08 00 00       	push   $0x809
f0119501:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119506:	e8 88 6c fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011950b:	e8 e7 2e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119510:	89 c2                	mov    %eax,%edx
f0119512:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119518:	29 c2                	sub    %eax,%edx
f011951a:	89 d0                	mov    %edx,%eax
f011951c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119521:	74 17                	je     f011953a <test_kheap_phys_addr+0xc5f>
f0119523:	83 ec 04             	sub    $0x4,%esp
f0119526:	68 20 05 12 f0       	push   $0xf0120520
f011952b:	68 0a 08 00 00       	push   $0x80a
f0119530:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119535:	e8 59 6c fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011953a:	e8 b8 2e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011953f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119545:	e8 50 4b ff ff       	call   f010e09a <pf_calculate_free_frames>
f011954a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0119550:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0119556:	83 ec 0c             	sub    $0xc,%esp
f0119559:	50                   	push   %eax
f011955a:	e8 e0 54 ff ff       	call   f010ea3f <kfree>
f011955f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119562:	e8 33 4b ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119567:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011956d:	74 17                	je     f0119586 <test_kheap_phys_addr+0xcab>
f011956f:	83 ec 04             	sub    $0x4,%esp
f0119572:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119577:	68 10 08 00 00       	push   $0x810
f011957c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119581:	e8 0d 6c fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0119586:	e8 6c 2e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011958b:	89 c2                	mov    %eax,%edx
f011958d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119593:	29 c2                	sub    %eax,%edx
f0119595:	89 d0                	mov    %edx,%eax
f0119597:	3d 00 06 00 00       	cmp    $0x600,%eax
f011959c:	74 17                	je     f01195b5 <test_kheap_phys_addr+0xcda>
f011959e:	83 ec 04             	sub    $0x4,%esp
f01195a1:	68 20 05 12 f0       	push   $0xf0120520
f01195a6:	68 11 08 00 00       	push   $0x811
f01195ab:	68 e2 fd 11 f0       	push   $0xf011fde2
f01195b0:	e8 de 6b fe ff       	call   f0100193 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01195b5:	89 e0                	mov    %esp,%eax
f01195b7:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01195b9:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01195c0:	10 00 00 
f01195c3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f01195c8:	0f b6 d0             	movzbl %al,%edx
f01195cb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01195d1:	01 d0                	add    %edx,%eax
f01195d3:	48                   	dec    %eax
f01195d4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01195da:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01195e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01195e5:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01195eb:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01195f1:	29 d0                	sub    %edx,%eax
f01195f3:	89 c1                	mov    %eax,%ecx
f01195f5:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01195fc:	10 00 00 
f01195ff:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119604:	0f b6 c0             	movzbl %al,%eax
f0119607:	c1 e0 04             	shl    $0x4,%eax
f011960a:	89 c2                	mov    %eax,%edx
f011960c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119612:	01 d0                	add    %edx,%eax
f0119614:	48                   	dec    %eax
f0119615:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011961b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119621:	ba 00 00 00 00       	mov    $0x0,%edx
f0119626:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011962c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119632:	29 d0                	sub    %edx,%eax
f0119634:	01 c8                	add    %ecx,%eax
f0119636:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011963b:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f0119641:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119648:	10 00 00 
f011964b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119650:	0f b6 d0             	movzbl %al,%edx
f0119653:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119659:	01 d0                	add    %edx,%eax
f011965b:	48                   	dec    %eax
f011965c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119662:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119668:	ba 00 00 00 00       	mov    $0x0,%edx
f011966d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119673:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119679:	29 d0                	sub    %edx,%eax
f011967b:	89 c1                	mov    %eax,%ecx
f011967d:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119684:	10 00 00 
f0119687:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011968c:	0f b6 c0             	movzbl %al,%eax
f011968f:	c1 e0 04             	shl    $0x4,%eax
f0119692:	89 c2                	mov    %eax,%edx
f0119694:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011969a:	01 d0                	add    %edx,%eax
f011969c:	48                   	dec    %eax
f011969d:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01196a3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01196a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01196ae:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01196b4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01196ba:	29 d0                	sub    %edx,%eax
f01196bc:	01 c8                	add    %ecx,%eax
f01196be:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01196c3:	c1 e8 0c             	shr    $0xc,%eax
f01196c6:	89 c2                	mov    %eax,%edx
f01196c8:	4a                   	dec    %edx
f01196c9:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f01196cf:	c1 e0 02             	shl    $0x2,%eax
f01196d2:	8d 50 03             	lea    0x3(%eax),%edx
f01196d5:	b8 10 00 00 00       	mov    $0x10,%eax
f01196da:	48                   	dec    %eax
f01196db:	01 d0                	add    %edx,%eax
f01196dd:	bf 10 00 00 00       	mov    $0x10,%edi
f01196e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e7:	f7 f7                	div    %edi
f01196e9:	6b c0 10             	imul   $0x10,%eax,%eax
f01196ec:	29 c4                	sub    %eax,%esp
f01196ee:	89 e0                	mov    %esp,%eax
f01196f0:	83 c0 03             	add    $0x3,%eax
f01196f3:	c1 e8 02             	shr    $0x2,%eax
f01196f6:	c1 e0 02             	shl    $0x2,%eax
f01196f9:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f01196ff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0119706:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f011970d:	eb 29                	jmp    f0119738 <test_kheap_phys_addr+0xe5d>
		{
			allPAs[i++] = kheap_physical_address(va);
f011970f:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0119712:	8d 43 01             	lea    0x1(%ebx),%eax
f0119715:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119718:	83 ec 0c             	sub    $0xc,%esp
f011971b:	ff 75 d8             	pushl  -0x28(%ebp)
f011971e:	e8 50 53 ff ff       	call   f010ea73 <kheap_physical_address>
f0119723:	83 c4 10             	add    $0x10,%esp
f0119726:	89 c2                	mov    %eax,%edx
f0119728:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011972e:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0119731:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0119738:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011973b:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0119741:	72 cc                	jb     f011970f <test_kheap_phys_addr+0xe34>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0119743:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119746:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f011974c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0119753:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f011975a:	e9 a5 00 00 00       	jmp    f0119804 <test_kheap_phys_addr+0xf29>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f011975f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119762:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0119767:	83 ec 04             	sub    $0x4,%esp
f011976a:	8d 8d a4 fd ff ff    	lea    -0x25c(%ebp),%ecx
f0119770:	51                   	push   %ecx
f0119771:	52                   	push   %edx
f0119772:	50                   	push   %eax
f0119773:	e8 f3 a6 fe ff       	call   f0103e6b <get_page_table>
f0119778:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011977b:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0119781:	85 c0                	test   %eax,%eax
f0119783:	75 17                	jne    f011979c <test_kheap_phys_addr+0xec1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0119785:	83 ec 04             	sub    $0x4,%esp
f0119788:	68 38 07 12 f0       	push   $0xf0120738
f011978d:	68 27 08 00 00       	push   $0x827
f0119792:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119797:	e8 f7 69 fe ff       	call   f0100193 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011979c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01197a3:	eb 44                	jmp    f01197e9 <test_kheap_phys_addr+0xf0e>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f01197a5:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f01197ab:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01197ae:	c1 e2 02             	shl    $0x2,%edx
f01197b1:	01 d0                	add    %edx,%eax
f01197b3:	8b 00                	mov    (%eax),%eax
f01197b5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01197ba:	89 c1                	mov    %eax,%ecx
f01197bc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01197c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01197c5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01197c8:	39 c1                	cmp    %eax,%ecx
f01197ca:	74 17                	je     f01197e3 <test_kheap_phys_addr+0xf08>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01197cc:	83 ec 04             	sub    $0x4,%esp
f01197cf:	68 91 07 12 f0       	push   $0xf0120791
f01197d4:	68 2e 08 00 00       	push   $0x82e
f01197d9:	68 e2 fd 11 f0       	push   $0xf011fde2
f01197de:	e8 b0 69 fe ff       	call   f0100193 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01197e3:	ff 45 d4             	incl   -0x2c(%ebp)
f01197e6:	ff 45 e4             	incl   -0x1c(%ebp)
f01197e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01197ec:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f01197f2:	7d 09                	jge    f01197fd <test_kheap_phys_addr+0xf22>
f01197f4:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01197fb:	7e a8                	jle    f01197a5 <test_kheap_phys_addr+0xeca>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01197fd:	81 45 d8 00 00 40 00 	addl   $0x400000,-0x28(%ebp)
f0119804:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119807:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f011980d:	0f 82 4c ff ff ff    	jb     f011975f <test_kheap_phys_addr+0xe84>
f0119813:	89 f4                	mov    %esi,%esp
				}
			}
		}
	}

	cprintf("\b\b\b80%");
f0119815:	83 ec 0c             	sub    $0xc,%esp
f0119818:	68 65 ff 11 f0       	push   $0xf011ff65
f011981d:	e8 14 dc fe ff       	call   f0107436 <cprintf>
f0119822:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0119825:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011982c:	10 00 00 
f011982f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119834:	0f b6 d0             	movzbl %al,%edx
f0119837:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011983d:	01 d0                	add    %edx,%eax
f011983f:	48                   	dec    %eax
f0119840:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0119846:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011984c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119851:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0119857:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011985d:	29 d0                	sub    %edx,%eax
f011985f:	89 c1                	mov    %eax,%ecx
f0119861:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0119868:	10 00 00 
f011986b:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119870:	0f b6 c0             	movzbl %al,%eax
f0119873:	c1 e0 04             	shl    $0x4,%eax
f0119876:	89 c2                	mov    %eax,%edx
f0119878:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011987e:	01 d0                	add    %edx,%eax
f0119880:	48                   	dec    %eax
f0119881:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0119887:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011988d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119892:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0119898:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011989e:	29 d0                	sub    %edx,%eax
f01198a0:	01 c8                	add    %ecx,%eax
f01198a2:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01198a7:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f01198ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01198b4:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01198ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01198bd:	eb 0a                	jmp    f01198c9 <test_kheap_phys_addr+0xfee>
		{
			i++;
f01198bf:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01198c2:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01198c9:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01198d0:	76 ed                	jbe    f01198bf <test_kheap_phys_addr+0xfe4>
		{
			i++;
		}
		int ii = i ;
f01198d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01198d5:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f01198db:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01198e2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01198e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01198eb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01198f2:	e9 ce 00 00 00       	jmp    f01199c5 <test_kheap_phys_addr+0x10ea>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
f01198f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01198fa:	89 c1                	mov    %eax,%ecx
f01198fc:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f0119901:	83 ec 04             	sub    $0x4,%esp
f0119904:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f011990a:	52                   	push   %edx
f011990b:	51                   	push   %ecx
f011990c:	50                   	push   %eax
f011990d:	e8 59 a5 fe ff       	call   f0103e6b <get_page_table>
f0119912:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0119915:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f011991b:	85 c0                	test   %eax,%eax
f011991d:	75 17                	jne    f0119936 <test_kheap_phys_addr+0x105b>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011991f:	83 ec 04             	sub    $0x4,%esp
f0119922:	68 38 07 12 f0       	push   $0xf0120738
f0119927:	68 49 08 00 00       	push   $0x849
f011992c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119931:	e8 5d 68 fe ff       	call   f0100193 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0119936:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011993d:	eb 67                	jmp    f01199a6 <test_kheap_phys_addr+0x10cb>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f011993f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119942:	c1 e0 0c             	shl    $0xc,%eax
f0119945:	89 c2                	mov    %eax,%edx
f0119947:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011994d:	01 d0                	add    %edx,%eax
f011994f:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0119955:	83 ec 0c             	sub    $0xc,%esp
f0119958:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f011995e:	e8 10 51 ff ff       	call   f010ea73 <kheap_physical_address>
f0119963:	83 c4 10             	add    $0x10,%esp
f0119966:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f011996c:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0119972:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119975:	c1 e2 02             	shl    $0x2,%edx
f0119978:	01 d0                	add    %edx,%eax
f011997a:	8b 00                	mov    (%eax),%eax
f011997c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0119981:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0119987:	74 17                	je     f01199a0 <test_kheap_phys_addr+0x10c5>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0119989:	83 ec 04             	sub    $0x4,%esp
f011998c:	68 91 07 12 f0       	push   $0xf0120791
f0119991:	68 53 08 00 00       	push   $0x853
f0119996:	68 e2 fd 11 f0       	push   $0xf011fde2
f011999b:	e8 f3 67 fe ff       	call   f0100193 <_panic>
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01199a0:	ff 45 cc             	incl   -0x34(%ebp)
f01199a3:	ff 45 e4             	incl   -0x1c(%ebp)
f01199a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01199a9:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f01199af:	7d 09                	jge    f01199ba <test_kheap_phys_addr+0x10df>
f01199b1:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01199b8:	7e 85                	jle    f011993f <test_kheap_phys_addr+0x1064>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01199ba:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01199c1:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01199c5:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01199c9:	0f 88 28 ff ff ff    	js     f01198f7 <test_kheap_phys_addr+0x101c>
f01199cf:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01199d3:	7f 0d                	jg     f01199e2 <test_kheap_phys_addr+0x1107>
f01199d5:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01199dc:	0f 86 15 ff ff ff    	jbe    f01198f7 <test_kheap_phys_addr+0x101c>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01199e2:	83 ec 0c             	sub    $0xc,%esp
f01199e5:	68 be ff 11 f0       	push   $0xf011ffbe
f01199ea:	e8 47 da fe ff       	call   f0107436 <cprintf>
f01199ef:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01199f2:	83 ec 0c             	sub    $0xc,%esp
f01199f5:	68 e4 07 12 f0       	push   $0xf01207e4
f01199fa:	e8 37 da fe ff       	call   f0107436 <cprintf>
f01199ff:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119a02:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119a07:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119a0a:	5b                   	pop    %ebx
f0119a0b:	5e                   	pop    %esi
f0119a0c:	5f                   	pop    %edi
f0119a0d:	5d                   	pop    %ebp
f0119a0e:	c3                   	ret    

f0119a0f <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0119a0f:	55                   	push   %ebp
f0119a10:	89 e5                	mov    %esp,%ebp
f0119a12:	57                   	push   %edi
f0119a13:	56                   	push   %esi
f0119a14:	53                   	push   %ebx
f0119a15:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0119a1b:	89 e0                	mov    %esp,%eax
f0119a1d:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0119a1f:	83 ec 0c             	sub    $0xc,%esp
f0119a22:	68 24 fd 11 f0       	push   $0xf011fd24
f0119a27:	e8 0a da fe ff       	call   f0107436 <cprintf>
f0119a2c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119a2f:	83 ec 0c             	sub    $0xc,%esp
f0119a32:	68 54 fd 11 f0       	push   $0xf011fd54
f0119a37:	e8 fa d9 fe ff       	call   f0107436 <cprintf>
f0119a3c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119a3f:	83 ec 0c             	sub    $0xc,%esp
f0119a42:	68 24 fd 11 f0       	push   $0xf011fd24
f0119a47:	e8 ea d9 fe ff       	call   f0107436 <cprintf>
f0119a4c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0119a4f:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0119a53:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0119a57:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0119a5d:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0119a63:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0119a6a:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0119a71:	e8 81 29 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119a76:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0119a79:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0119a7f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119a84:	b8 00 00 00 00       	mov    $0x0,%eax
f0119a89:	89 d7                	mov    %edx,%edi
f0119a8b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0119a8d:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0119a93:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119a98:	b8 00 00 00 00       	mov    $0x0,%eax
f0119a9d:	89 d7                	mov    %edx,%edi
f0119a9f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0119aa1:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0119aa7:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119aac:	b8 00 00 00 00       	mov    $0x0,%eax
f0119ab1:	89 d7                	mov    %edx,%edi
f0119ab3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119ab5:	e8 3d 29 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119aba:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119abd:	e8 d8 45 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119ac2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0119ac5:	83 ec 0c             	sub    $0xc,%esp
f0119ac8:	68 00 fc 1f 00       	push   $0x1ffc00
f0119acd:	e8 53 4f ff ff       	call   f010ea25 <kmalloc>
f0119ad2:	83 c4 10             	add    $0x10,%esp
f0119ad5:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119adb:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0119ae1:	89 c1                	mov    %eax,%ecx
f0119ae3:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119aea:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119aef:	0f b6 d0             	movzbl %al,%edx
f0119af2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119af5:	01 d0                	add    %edx,%eax
f0119af7:	48                   	dec    %eax
f0119af8:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119afb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119afe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b03:	f7 75 b4             	divl   -0x4c(%ebp)
f0119b06:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119b09:	29 d0                	sub    %edx,%eax
f0119b0b:	89 c3                	mov    %eax,%ebx
f0119b0d:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0119b14:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119b19:	0f b6 c0             	movzbl %al,%eax
f0119b1c:	c1 e0 04             	shl    $0x4,%eax
f0119b1f:	89 c2                	mov    %eax,%edx
f0119b21:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119b24:	01 d0                	add    %edx,%eax
f0119b26:	48                   	dec    %eax
f0119b27:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0119b2a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119b2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b32:	f7 75 ac             	divl   -0x54(%ebp)
f0119b35:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119b38:	29 d0                	sub    %edx,%eax
f0119b3a:	01 d8                	add    %ebx,%eax
f0119b3c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119b41:	39 c1                	cmp    %eax,%ecx
f0119b43:	74 17                	je     f0119b5c <test_kheap_virt_addr+0x14d>
f0119b45:	83 ec 04             	sub    $0x4,%esp
f0119b48:	68 c0 fe 11 f0       	push   $0xf011fec0
f0119b4d:	68 80 08 00 00       	push   $0x880
f0119b52:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119b57:	e8 37 66 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b5c:	e8 39 45 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119b61:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119b64:	74 17                	je     f0119b7d <test_kheap_virt_addr+0x16e>
f0119b66:	83 ec 04             	sub    $0x4,%esp
f0119b69:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119b6e:	68 81 08 00 00       	push   $0x881
f0119b73:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119b78:	e8 16 66 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119b7d:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119b80:	e8 72 28 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119b85:	29 c3                	sub    %eax,%ebx
f0119b87:	89 d8                	mov    %ebx,%eax
f0119b89:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119b8e:	74 17                	je     f0119ba7 <test_kheap_virt_addr+0x198>
f0119b90:	83 ec 04             	sub    $0x4,%esp
f0119b93:	68 5c fe 11 f0       	push   $0xf011fe5c
f0119b98:	68 82 08 00 00       	push   $0x882
f0119b9d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119ba2:	e8 ec 65 fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119ba7:	e8 4b 28 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119bac:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119baf:	e8 e6 44 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119bb4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0119bb7:	83 ec 0c             	sub    $0xc,%esp
f0119bba:	68 00 fc 1f 00       	push   $0x1ffc00
f0119bbf:	e8 61 4e ff ff       	call   f010ea25 <kmalloc>
f0119bc4:	83 c4 10             	add    $0x10,%esp
f0119bc7:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119bcd:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0119bd3:	89 c1                	mov    %eax,%ecx
f0119bd5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119bdc:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119be1:	0f b6 d0             	movzbl %al,%edx
f0119be4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119be7:	01 d0                	add    %edx,%eax
f0119be9:	48                   	dec    %eax
f0119bea:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0119bed:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119bf0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bf5:	f7 75 a4             	divl   -0x5c(%ebp)
f0119bf8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119bfb:	29 d0                	sub    %edx,%eax
f0119bfd:	89 c3                	mov    %eax,%ebx
f0119bff:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119c06:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119c0b:	0f b6 c0             	movzbl %al,%eax
f0119c0e:	c1 e0 04             	shl    $0x4,%eax
f0119c11:	89 c2                	mov    %eax,%edx
f0119c13:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119c16:	01 d0                	add    %edx,%eax
f0119c18:	48                   	dec    %eax
f0119c19:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119c1c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119c1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c24:	f7 75 9c             	divl   -0x64(%ebp)
f0119c27:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119c2a:	29 d0                	sub    %edx,%eax
f0119c2c:	01 d8                	add    %ebx,%eax
f0119c2e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0119c33:	39 c1                	cmp    %eax,%ecx
f0119c35:	74 17                	je     f0119c4e <test_kheap_virt_addr+0x23f>
f0119c37:	83 ec 04             	sub    $0x4,%esp
f0119c3a:	68 c0 fe 11 f0       	push   $0xf011fec0
f0119c3f:	68 88 08 00 00       	push   $0x888
f0119c44:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119c49:	e8 45 65 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c4e:	e8 47 44 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119c53:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119c56:	74 17                	je     f0119c6f <test_kheap_virt_addr+0x260>
f0119c58:	83 ec 04             	sub    $0x4,%esp
f0119c5b:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119c60:	68 89 08 00 00       	push   $0x889
f0119c65:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119c6a:	e8 24 65 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119c6f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119c72:	e8 80 27 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119c77:	29 c3                	sub    %eax,%ebx
f0119c79:	89 d8                	mov    %ebx,%eax
f0119c7b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119c80:	74 17                	je     f0119c99 <test_kheap_virt_addr+0x28a>
f0119c82:	83 ec 04             	sub    $0x4,%esp
f0119c85:	68 5c fe 11 f0       	push   $0xf011fe5c
f0119c8a:	68 8a 08 00 00       	push   $0x88a
f0119c8f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119c94:	e8 fa 64 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0119c99:	e8 59 27 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119c9e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ca1:	e8 f4 43 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119ca6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0119ca9:	83 ec 0c             	sub    $0xc,%esp
f0119cac:	68 00 08 00 00       	push   $0x800
f0119cb1:	e8 6f 4d ff ff       	call   f010ea25 <kmalloc>
f0119cb6:	83 c4 10             	add    $0x10,%esp
f0119cb9:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119cbf:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0119cc5:	89 c1                	mov    %eax,%ecx
f0119cc7:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119cce:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119cd3:	0f b6 d0             	movzbl %al,%edx
f0119cd6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119cd9:	01 d0                	add    %edx,%eax
f0119cdb:	48                   	dec    %eax
f0119cdc:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119cdf:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119ce2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ce7:	f7 75 94             	divl   -0x6c(%ebp)
f0119cea:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119ced:	29 d0                	sub    %edx,%eax
f0119cef:	89 c3                	mov    %eax,%ebx
f0119cf1:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119cf8:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119cfd:	0f b6 c0             	movzbl %al,%eax
f0119d00:	c1 e0 04             	shl    $0x4,%eax
f0119d03:	89 c2                	mov    %eax,%edx
f0119d05:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119d08:	01 d0                	add    %edx,%eax
f0119d0a:	48                   	dec    %eax
f0119d0b:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119d0e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119d11:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d16:	f7 75 8c             	divl   -0x74(%ebp)
f0119d19:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119d1c:	29 d0                	sub    %edx,%eax
f0119d1e:	01 d8                	add    %ebx,%eax
f0119d20:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0119d25:	39 c1                	cmp    %eax,%ecx
f0119d27:	74 17                	je     f0119d40 <test_kheap_virt_addr+0x331>
f0119d29:	83 ec 04             	sub    $0x4,%esp
f0119d2c:	68 c0 fe 11 f0       	push   $0xf011fec0
f0119d31:	68 90 08 00 00       	push   $0x890
f0119d36:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119d3b:	e8 53 64 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d40:	e8 55 43 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119d45:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119d48:	74 17                	je     f0119d61 <test_kheap_virt_addr+0x352>
f0119d4a:	83 ec 04             	sub    $0x4,%esp
f0119d4d:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119d52:	68 91 08 00 00       	push   $0x891
f0119d57:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119d5c:	e8 32 64 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119d61:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119d64:	e8 8e 26 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119d69:	29 c3                	sub    %eax,%ebx
f0119d6b:	89 d8                	mov    %ebx,%eax
f0119d6d:	83 f8 01             	cmp    $0x1,%eax
f0119d70:	74 17                	je     f0119d89 <test_kheap_virt_addr+0x37a>
f0119d72:	83 ec 04             	sub    $0x4,%esp
f0119d75:	68 5c fe 11 f0       	push   $0xf011fe5c
f0119d7a:	68 92 08 00 00       	push   $0x892
f0119d7f:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119d84:	e8 0a 64 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0119d89:	e8 69 26 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119d8e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d91:	e8 04 43 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119d96:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0119d99:	83 ec 0c             	sub    $0xc,%esp
f0119d9c:	68 00 08 00 00       	push   $0x800
f0119da1:	e8 7f 4c ff ff       	call   f010ea25 <kmalloc>
f0119da6:	83 c4 10             	add    $0x10,%esp
f0119da9:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119daf:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0119db5:	89 c1                	mov    %eax,%ecx
f0119db7:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0119dbe:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119dc3:	0f b6 d0             	movzbl %al,%edx
f0119dc6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119dc9:	01 d0                	add    %edx,%eax
f0119dcb:	48                   	dec    %eax
f0119dcc:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119dcf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119dd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dd7:	f7 75 84             	divl   -0x7c(%ebp)
f0119dda:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119ddd:	29 d0                	sub    %edx,%eax
f0119ddf:	89 c3                	mov    %eax,%ebx
f0119de1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119de8:	10 00 00 
f0119deb:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119df0:	0f b6 c0             	movzbl %al,%eax
f0119df3:	c1 e0 04             	shl    $0x4,%eax
f0119df6:	89 c2                	mov    %eax,%edx
f0119df8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119dfe:	01 d0                	add    %edx,%eax
f0119e00:	48                   	dec    %eax
f0119e01:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0119e07:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119e0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e12:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0119e18:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119e1e:	29 d0                	sub    %edx,%eax
f0119e20:	01 d8                	add    %ebx,%eax
f0119e22:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0119e27:	39 c1                	cmp    %eax,%ecx
f0119e29:	74 17                	je     f0119e42 <test_kheap_virt_addr+0x433>
f0119e2b:	83 ec 04             	sub    $0x4,%esp
f0119e2e:	68 c0 fe 11 f0       	push   $0xf011fec0
f0119e33:	68 98 08 00 00       	push   $0x898
f0119e38:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119e3d:	e8 51 63 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e42:	e8 53 42 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119e47:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119e4a:	74 17                	je     f0119e63 <test_kheap_virt_addr+0x454>
f0119e4c:	83 ec 04             	sub    $0x4,%esp
f0119e4f:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119e54:	68 99 08 00 00       	push   $0x899
f0119e59:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119e5e:	e8 30 63 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119e63:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119e66:	e8 8c 25 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119e6b:	29 c3                	sub    %eax,%ebx
f0119e6d:	89 d8                	mov    %ebx,%eax
f0119e6f:	83 f8 01             	cmp    $0x1,%eax
f0119e72:	74 17                	je     f0119e8b <test_kheap_virt_addr+0x47c>
f0119e74:	83 ec 04             	sub    $0x4,%esp
f0119e77:	68 5c fe 11 f0       	push   $0xf011fe5c
f0119e7c:	68 9a 08 00 00       	push   $0x89a
f0119e81:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119e86:	e8 08 63 fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0119e8b:	e8 67 25 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119e90:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e93:	e8 02 42 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119e98:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0119e9b:	83 ec 0c             	sub    $0xc,%esp
f0119e9e:	68 00 1c 00 00       	push   $0x1c00
f0119ea3:	e8 7d 4b ff ff       	call   f010ea25 <kmalloc>
f0119ea8:	83 c4 10             	add    $0x10,%esp
f0119eab:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119eb1:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0119eb7:	89 c1                	mov    %eax,%ecx
f0119eb9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0119ec0:	10 00 00 
f0119ec3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119ec8:	0f b6 d0             	movzbl %al,%edx
f0119ecb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119ed1:	01 d0                	add    %edx,%eax
f0119ed3:	48                   	dec    %eax
f0119ed4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0119eda:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119ee0:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ee5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0119eeb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119ef1:	29 d0                	sub    %edx,%eax
f0119ef3:	89 c3                	mov    %eax,%ebx
f0119ef5:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0119efc:	10 00 00 
f0119eff:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119f04:	0f b6 c0             	movzbl %al,%eax
f0119f07:	c1 e0 04             	shl    $0x4,%eax
f0119f0a:	89 c2                	mov    %eax,%edx
f0119f0c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119f12:	01 d0                	add    %edx,%eax
f0119f14:	48                   	dec    %eax
f0119f15:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119f1b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119f21:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f26:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119f2c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119f32:	29 d0                	sub    %edx,%eax
f0119f34:	01 d8                	add    %ebx,%eax
f0119f36:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0119f3b:	39 c1                	cmp    %eax,%ecx
f0119f3d:	74 17                	je     f0119f56 <test_kheap_virt_addr+0x547>
f0119f3f:	83 ec 04             	sub    $0x4,%esp
f0119f42:	68 c0 fe 11 f0       	push   $0xf011fec0
f0119f47:	68 a0 08 00 00       	push   $0x8a0
f0119f4c:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119f51:	e8 3d 62 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f56:	e8 3f 41 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119f5b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119f5e:	74 17                	je     f0119f77 <test_kheap_virt_addr+0x568>
f0119f60:	83 ec 04             	sub    $0x4,%esp
f0119f63:	68 f4 fd 11 f0       	push   $0xf011fdf4
f0119f68:	68 a1 08 00 00       	push   $0x8a1
f0119f6d:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119f72:	e8 1c 62 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119f77:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119f7a:	e8 78 24 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119f7f:	29 c3                	sub    %eax,%ebx
f0119f81:	89 d8                	mov    %ebx,%eax
f0119f83:	83 f8 02             	cmp    $0x2,%eax
f0119f86:	74 17                	je     f0119f9f <test_kheap_virt_addr+0x590>
f0119f88:	83 ec 04             	sub    $0x4,%esp
f0119f8b:	68 5c fe 11 f0       	push   $0xf011fe5c
f0119f90:	68 a2 08 00 00       	push   $0x8a2
f0119f95:	68 e2 fd 11 f0       	push   $0xf011fde2
f0119f9a:	e8 f4 61 fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119f9f:	e8 53 24 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f0119fa4:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119fa7:	e8 ee 40 ff ff       	call   f010e09a <pf_calculate_free_frames>
f0119fac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0119faf:	83 ec 0c             	sub    $0xc,%esp
f0119fb2:	68 00 fc 2f 00       	push   $0x2ffc00
f0119fb7:	e8 69 4a ff ff       	call   f010ea25 <kmalloc>
f0119fbc:	83 c4 10             	add    $0x10,%esp
f0119fbf:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119fc5:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0119fcb:	89 c1                	mov    %eax,%ecx
f0119fcd:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0119fd4:	10 00 00 
f0119fd7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f0119fdc:	0f b6 d0             	movzbl %al,%edx
f0119fdf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119fe5:	01 d0                	add    %edx,%eax
f0119fe7:	48                   	dec    %eax
f0119fe8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119fee:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119ff4:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ff9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0119fff:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011a005:	29 d0                	sub    %edx,%eax
f011a007:	89 c3                	mov    %eax,%ebx
f011a009:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011a010:	10 00 00 
f011a013:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a018:	0f b6 c0             	movzbl %al,%eax
f011a01b:	c1 e0 04             	shl    $0x4,%eax
f011a01e:	89 c2                	mov    %eax,%edx
f011a020:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011a026:	01 d0                	add    %edx,%eax
f011a028:	48                   	dec    %eax
f011a029:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011a02f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a035:	ba 00 00 00 00       	mov    $0x0,%edx
f011a03a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011a040:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a046:	29 d0                	sub    %edx,%eax
f011a048:	01 d8                	add    %ebx,%eax
f011a04a:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011a04f:	39 c1                	cmp    %eax,%ecx
f011a051:	74 17                	je     f011a06a <test_kheap_virt_addr+0x65b>
f011a053:	83 ec 04             	sub    $0x4,%esp
f011a056:	68 c0 fe 11 f0       	push   $0xf011fec0
f011a05b:	68 a8 08 00 00       	push   $0x8a8
f011a060:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a065:	e8 29 61 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a06a:	e8 2b 40 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a06f:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011a072:	74 17                	je     f011a08b <test_kheap_virt_addr+0x67c>
f011a074:	83 ec 04             	sub    $0x4,%esp
f011a077:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011a07c:	68 a9 08 00 00       	push   $0x8a9
f011a081:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a086:	e8 08 61 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a08b:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011a08e:	e8 64 23 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a093:	29 c3                	sub    %eax,%ebx
f011a095:	89 d8                	mov    %ebx,%eax
f011a097:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a09c:	74 17                	je     f011a0b5 <test_kheap_virt_addr+0x6a6>
f011a09e:	83 ec 04             	sub    $0x4,%esp
f011a0a1:	68 5c fe 11 f0       	push   $0xf011fe5c
f011a0a6:	68 aa 08 00 00       	push   $0x8aa
f011a0ab:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a0b0:	e8 de 60 fe ff       	call   f0100193 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011a0b5:	e8 3d 23 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a0ba:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0bd:	e8 d8 3f ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a0c2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011a0c5:	83 ec 0c             	sub    $0xc,%esp
f011a0c8:	68 00 fc 5f 00       	push   $0x5ffc00
f011a0cd:	e8 53 49 ff ff       	call   f010ea25 <kmalloc>
f011a0d2:	83 c4 10             	add    $0x10,%esp
f011a0d5:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011a0db:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011a0e1:	89 c1                	mov    %eax,%ecx
f011a0e3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011a0ea:	10 00 00 
f011a0ed:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a0f2:	0f b6 d0             	movzbl %al,%edx
f011a0f5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a0fb:	01 d0                	add    %edx,%eax
f011a0fd:	48                   	dec    %eax
f011a0fe:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011a104:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a10a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a10f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011a115:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a11b:	29 d0                	sub    %edx,%eax
f011a11d:	89 c3                	mov    %eax,%ebx
f011a11f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011a126:	10 00 00 
f011a129:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a12e:	0f b6 c0             	movzbl %al,%eax
f011a131:	c1 e0 04             	shl    $0x4,%eax
f011a134:	89 c2                	mov    %eax,%edx
f011a136:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a13c:	01 d0                	add    %edx,%eax
f011a13e:	48                   	dec    %eax
f011a13f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011a145:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a14b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a150:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011a156:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a15c:	29 d0                	sub    %edx,%eax
f011a15e:	01 d8                	add    %ebx,%eax
f011a160:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011a165:	39 c1                	cmp    %eax,%ecx
f011a167:	74 17                	je     f011a180 <test_kheap_virt_addr+0x771>
f011a169:	83 ec 04             	sub    $0x4,%esp
f011a16c:	68 c0 fe 11 f0       	push   $0xf011fec0
f011a171:	68 b0 08 00 00       	push   $0x8b0
f011a176:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a17b:	e8 13 60 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a180:	e8 15 3f ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a185:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011a188:	74 17                	je     f011a1a1 <test_kheap_virt_addr+0x792>
f011a18a:	83 ec 04             	sub    $0x4,%esp
f011a18d:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011a192:	68 b1 08 00 00       	push   $0x8b1
f011a197:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a19c:	e8 f2 5f fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a1a1:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011a1a4:	e8 4e 22 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a1a9:	29 c3                	sub    %eax,%ebx
f011a1ab:	89 d8                	mov    %ebx,%eax
f011a1ad:	3d 00 06 00 00       	cmp    $0x600,%eax
f011a1b2:	74 17                	je     f011a1cb <test_kheap_virt_addr+0x7bc>
f011a1b4:	83 ec 04             	sub    $0x4,%esp
f011a1b7:	68 5c fe 11 f0       	push   $0xf011fe5c
f011a1bc:	68 b2 08 00 00       	push   $0x8b2
f011a1c1:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a1c6:	e8 c8 5f fe ff       	call   f0100193 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011a1cb:	e8 27 22 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a1d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a1d3:	e8 c2 3e ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a1d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011a1db:	83 ec 0c             	sub    $0xc,%esp
f011a1de:	68 00 38 00 00       	push   $0x3800
f011a1e3:	e8 3d 48 ff ff       	call   f010ea25 <kmalloc>
f011a1e8:	83 c4 10             	add    $0x10,%esp
f011a1eb:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011a1f1:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f011a1f7:	89 c1                	mov    %eax,%ecx
f011a1f9:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011a200:	10 00 00 
f011a203:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a208:	0f b6 d0             	movzbl %al,%edx
f011a20b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a211:	01 d0                	add    %edx,%eax
f011a213:	48                   	dec    %eax
f011a214:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011a21a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a220:	ba 00 00 00 00       	mov    $0x0,%edx
f011a225:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011a22b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a231:	29 d0                	sub    %edx,%eax
f011a233:	89 c3                	mov    %eax,%ebx
f011a235:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a23c:	10 00 00 
f011a23f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a244:	0f b6 c0             	movzbl %al,%eax
f011a247:	c1 e0 04             	shl    $0x4,%eax
f011a24a:	89 c2                	mov    %eax,%edx
f011a24c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a252:	01 d0                	add    %edx,%eax
f011a254:	48                   	dec    %eax
f011a255:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a25b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a261:	ba 00 00 00 00       	mov    $0x0,%edx
f011a266:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a26c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a272:	29 d0                	sub    %edx,%eax
f011a274:	01 d8                	add    %ebx,%eax
f011a276:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011a27b:	39 c1                	cmp    %eax,%ecx
f011a27d:	74 17                	je     f011a296 <test_kheap_virt_addr+0x887>
f011a27f:	83 ec 04             	sub    $0x4,%esp
f011a282:	68 c0 fe 11 f0       	push   $0xf011fec0
f011a287:	68 b8 08 00 00       	push   $0x8b8
f011a28c:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a291:	e8 fd 5e fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a296:	e8 ff 3d ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a29b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011a29e:	74 17                	je     f011a2b7 <test_kheap_virt_addr+0x8a8>
f011a2a0:	83 ec 04             	sub    $0x4,%esp
f011a2a3:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011a2a8:	68 b9 08 00 00       	push   $0x8b9
f011a2ad:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a2b2:	e8 dc 5e fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a2b7:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011a2ba:	e8 38 21 ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a2bf:	29 c3                	sub    %eax,%ebx
f011a2c1:	89 d8                	mov    %ebx,%eax
f011a2c3:	83 f8 04             	cmp    $0x4,%eax
f011a2c6:	74 17                	je     f011a2df <test_kheap_virt_addr+0x8d0>
f011a2c8:	83 ec 04             	sub    $0x4,%esp
f011a2cb:	68 5c fe 11 f0       	push   $0xf011fe5c
f011a2d0:	68 ba 08 00 00       	push   $0x8ba
f011a2d5:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a2da:	e8 b4 5e fe ff       	call   f0100193 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f011a2df:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a2e6:	10 00 00 
f011a2e9:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a2ee:	0f b6 d0             	movzbl %al,%edx
f011a2f1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a2f7:	01 d0                	add    %edx,%eax
f011a2f9:	48                   	dec    %eax
f011a2fa:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a300:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a306:	ba 00 00 00 00       	mov    $0x0,%edx
f011a30b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a311:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a317:	29 d0                	sub    %edx,%eax
f011a319:	89 c1                	mov    %eax,%ecx
f011a31b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a322:	10 00 00 
f011a325:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a32a:	0f b6 c0             	movzbl %al,%eax
f011a32d:	c1 e0 04             	shl    $0x4,%eax
f011a330:	89 c2                	mov    %eax,%edx
f011a332:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a338:	01 d0                	add    %edx,%eax
f011a33a:	48                   	dec    %eax
f011a33b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a341:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a347:	ba 00 00 00 00       	mov    $0x0,%edx
f011a34c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a352:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a358:	29 d0                	sub    %edx,%eax
f011a35a:	01 c8                	add    %ecx,%eax
f011a35c:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011a361:	c1 e8 0c             	shr    $0xc,%eax
f011a364:	89 c2                	mov    %eax,%edx
f011a366:	4a                   	dec    %edx
f011a367:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f011a36d:	c1 e0 02             	shl    $0x2,%eax
f011a370:	8d 50 03             	lea    0x3(%eax),%edx
f011a373:	b8 10 00 00 00       	mov    $0x10,%eax
f011a378:	48                   	dec    %eax
f011a379:	01 d0                	add    %edx,%eax
f011a37b:	bf 10 00 00 00       	mov    $0x10,%edi
f011a380:	ba 00 00 00 00       	mov    $0x0,%edx
f011a385:	f7 f7                	div    %edi
f011a387:	6b c0 10             	imul   $0x10,%eax,%eax
f011a38a:	29 c4                	sub    %eax,%esp
f011a38c:	89 e0                	mov    %esp,%eax
f011a38e:	83 c0 03             	add    $0x3,%eax
f011a391:	c1 e8 02             	shr    $0x2,%eax
f011a394:	c1 e0 02             	shl    $0x2,%eax
f011a397:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE ;
f011a39d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a3a4:	10 00 00 
f011a3a7:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a3ac:	0f b6 d0             	movzbl %al,%edx
f011a3af:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a3b5:	01 d0                	add    %edx,%eax
f011a3b7:	48                   	dec    %eax
f011a3b8:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a3be:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a3c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3c9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a3cf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a3d5:	29 d0                	sub    %edx,%eax
f011a3d7:	89 c1                	mov    %eax,%ecx
f011a3d9:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a3e0:	10 00 00 
f011a3e3:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a3e8:	0f b6 c0             	movzbl %al,%eax
f011a3eb:	c1 e0 04             	shl    $0x4,%eax
f011a3ee:	89 c2                	mov    %eax,%edx
f011a3f0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a3f6:	01 d0                	add    %edx,%eax
f011a3f8:	48                   	dec    %eax
f011a3f9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a3ff:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a405:	ba 00 00 00 00       	mov    $0x0,%edx
f011a40a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a410:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a416:	29 d0                	sub    %edx,%eax
f011a418:	01 c8                	add    %ecx,%eax
f011a41a:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011a41f:	c1 e8 0c             	shr    $0xc,%eax
f011a422:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011a428:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011a42f:	10 00 00 
f011a432:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a437:	0f b6 d0             	movzbl %al,%edx
f011a43a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a440:	01 d0                	add    %edx,%eax
f011a442:	48                   	dec    %eax
f011a443:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011a449:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a44f:	ba 00 00 00 00       	mov    $0x0,%edx
f011a454:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011a45a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a460:	29 d0                	sub    %edx,%eax
f011a462:	89 c1                	mov    %eax,%ecx
f011a464:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011a46b:	10 00 00 
f011a46e:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a473:	0f b6 c0             	movzbl %al,%eax
f011a476:	c1 e0 04             	shl    $0x4,%eax
f011a479:	89 c2                	mov    %eax,%edx
f011a47b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a481:	01 d0                	add    %edx,%eax
f011a483:	48                   	dec    %eax
f011a484:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011a48a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a490:	ba 00 00 00 00       	mov    $0x0,%edx
f011a495:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011a49b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a4a1:	29 d0                	sub    %edx,%eax
f011a4a3:	01 c8                	add    %ecx,%eax
f011a4a5:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011a4aa:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f011a4b0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011a4b7:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f011a4be:	e9 d8 00 00 00       	jmp    f011a59b <test_kheap_virt_addr+0xb8c>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f011a4c3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011a4c6:	a1 70 da 3c f0       	mov    0xf03cda70,%eax
f011a4cb:	83 ec 04             	sub    $0x4,%esp
f011a4ce:	8d 8d bc fd ff ff    	lea    -0x244(%ebp),%ecx
f011a4d4:	51                   	push   %ecx
f011a4d5:	52                   	push   %edx
f011a4d6:	50                   	push   %eax
f011a4d7:	e8 8f 99 fe ff       	call   f0103e6b <get_page_table>
f011a4dc:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011a4df:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f011a4e5:	85 c0                	test   %eax,%eax
f011a4e7:	75 17                	jne    f011a500 <test_kheap_virt_addr+0xaf1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011a4e9:	83 ec 04             	sub    $0x4,%esp
f011a4ec:	68 38 07 12 f0       	push   $0xf0120738
f011a4f1:	68 cb 08 00 00       	push   $0x8cb
f011a4f6:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a4fb:	e8 93 5c fe ff       	call   f0100193 <_panic>

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f011a500:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011a507:	eb 73                	jmp    f011a57c <test_kheap_virt_addr+0xb6d>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f011a509:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f011a50f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a512:	c1 e2 02             	shl    $0x2,%edx
f011a515:	01 d0                	add    %edx,%eax
f011a517:	8b 00                	mov    (%eax),%eax
f011a519:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011a51e:	89 c1                	mov    %eax,%ecx
f011a520:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a526:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a529:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a52c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a532:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a535:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a538:	83 ec 0c             	sub    $0xc,%esp
f011a53b:	50                   	push   %eax
f011a53c:	e8 18 45 ff ff       	call   f010ea59 <kheap_virtual_address>
f011a541:	83 c4 10             	add    $0x10,%esp
f011a544:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)

				if (retrievedVA != (va + j*PAGE_SIZE))
f011a54a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a54d:	c1 e0 0c             	shl    $0xc,%eax
f011a550:	89 c2                	mov    %eax,%edx
f011a552:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a555:	01 d0                	add    %edx,%eax
f011a557:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f011a55d:	74 17                	je     f011a576 <test_kheap_virt_addr+0xb67>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_virtual_address");
f011a55f:	83 ec 04             	sub    $0x4,%esp
f011a562:	68 2c 08 12 f0       	push   $0xf012082c
f011a567:	68 d5 08 00 00       	push   $0x8d5
f011a56c:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a571:	e8 1d 5c fe ff       	call   f0100193 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f011a576:	ff 45 dc             	incl   -0x24(%ebp)
f011a579:	ff 45 e0             	incl   -0x20(%ebp)
f011a57c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a57f:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f011a585:	7d 0d                	jge    f011a594 <test_kheap_virt_addr+0xb85>
f011a587:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f011a58e:	0f 8e 75 ff ff ff    	jle    f011a509 <test_kheap_virt_addr+0xafa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011a594:	81 45 e4 00 00 40 00 	addl   $0x400000,-0x1c(%ebp)
f011a59b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a59e:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f011a5a4:	0f 82 19 ff ff ff    	jb     f011a4c3 <test_kheap_virt_addr+0xab4>
					panic("Wrong kheap_virtual_address");
				}
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f011a5aa:	83 ec 0c             	sub    $0xc,%esp
f011a5ad:	68 48 08 12 f0       	push   $0xf0120848
f011a5b2:	e8 7f ce fe ff       	call   f0107436 <cprintf>
f011a5b7:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011a5ba:	e8 38 1e ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a5bf:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011a5c5:	e8 d0 3a ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a5ca:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f011a5d0:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f011a5d6:	83 ec 0c             	sub    $0xc,%esp
f011a5d9:	50                   	push   %eax
f011a5da:	e8 60 44 ff ff       	call   f010ea3f <kfree>
f011a5df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5e2:	e8 b3 3a ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a5e7:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011a5ed:	74 17                	je     f011a606 <test_kheap_virt_addr+0xbf7>
f011a5ef:	83 ec 04             	sub    $0x4,%esp
f011a5f2:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011a5f7:	68 e2 08 00 00       	push   $0x8e2
f011a5fc:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a601:	e8 8d 5b fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011a606:	e8 ec 1d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a60b:	89 c2                	mov    %eax,%edx
f011a60d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a613:	29 c2                	sub    %eax,%edx
f011a615:	89 d0                	mov    %edx,%eax
f011a617:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a61c:	74 17                	je     f011a635 <test_kheap_virt_addr+0xc26>
f011a61e:	83 ec 04             	sub    $0x4,%esp
f011a621:	68 20 05 12 f0       	push   $0xf0120520
f011a626:	68 e3 08 00 00       	push   $0x8e3
f011a62b:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a630:	e8 5e 5b fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a635:	e8 bd 1d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a63a:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a640:	e8 55 3a ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a645:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f011a64b:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f011a651:	83 ec 0c             	sub    $0xc,%esp
f011a654:	50                   	push   %eax
f011a655:	e8 e5 43 ff ff       	call   f010ea3f <kfree>
f011a65a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a65d:	e8 38 3a ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a662:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011a668:	74 17                	je     f011a681 <test_kheap_virt_addr+0xc72>
f011a66a:	83 ec 04             	sub    $0x4,%esp
f011a66d:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011a672:	68 e9 08 00 00       	push   $0x8e9
f011a677:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a67c:	e8 12 5b fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011a681:	e8 71 1d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a686:	89 c2                	mov    %eax,%edx
f011a688:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a68e:	29 c2                	sub    %eax,%edx
f011a690:	89 d0                	mov    %edx,%eax
f011a692:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a697:	74 17                	je     f011a6b0 <test_kheap_virt_addr+0xca1>
f011a699:	83 ec 04             	sub    $0x4,%esp
f011a69c:	68 20 05 12 f0       	push   $0xf0120520
f011a6a1:	68 ea 08 00 00       	push   $0x8ea
f011a6a6:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a6ab:	e8 e3 5a fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011a6b0:	e8 42 1d ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a6b5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a6bb:	e8 da 39 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a6c0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f011a6c6:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011a6cc:	83 ec 0c             	sub    $0xc,%esp
f011a6cf:	50                   	push   %eax
f011a6d0:	e8 6a 43 ff ff       	call   f010ea3f <kfree>
f011a6d5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a6d8:	e8 bd 39 ff ff       	call   f010e09a <pf_calculate_free_frames>
f011a6dd:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011a6e3:	74 17                	je     f011a6fc <test_kheap_virt_addr+0xced>
f011a6e5:	83 ec 04             	sub    $0x4,%esp
f011a6e8:	68 f4 fd 11 f0       	push   $0xf011fdf4
f011a6ed:	68 f0 08 00 00       	push   $0x8f0
f011a6f2:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a6f7:	e8 97 5a fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011a6fc:	e8 f6 1c ff ff       	call   f010c3f7 <sys_calculate_free_frames>
f011a701:	89 c2                	mov    %eax,%edx
f011a703:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a709:	29 c2                	sub    %eax,%edx
f011a70b:	89 d0                	mov    %edx,%eax
f011a70d:	3d 00 06 00 00       	cmp    $0x600,%eax
f011a712:	74 17                	je     f011a72b <test_kheap_virt_addr+0xd1c>
f011a714:	83 ec 04             	sub    $0x4,%esp
f011a717:	68 20 05 12 f0       	push   $0xf0120520
f011a71c:	68 f1 08 00 00       	push   $0x8f1
f011a721:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a726:	e8 68 5a fe ff       	call   f0100193 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011a72b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011a732:	10 00 00 
f011a735:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a73a:	0f b6 d0             	movzbl %al,%edx
f011a73d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a743:	01 d0                	add    %edx,%eax
f011a745:	48                   	dec    %eax
f011a746:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011a74c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a752:	ba 00 00 00 00       	mov    $0x0,%edx
f011a757:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011a75d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a763:	29 d0                	sub    %edx,%eax
f011a765:	89 c1                	mov    %eax,%ecx
f011a767:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011a76e:	10 00 00 
f011a771:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a776:	0f b6 c0             	movzbl %al,%eax
f011a779:	c1 e0 04             	shl    $0x4,%eax
f011a77c:	89 c2                	mov    %eax,%edx
f011a77e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a784:	01 d0                	add    %edx,%eax
f011a786:	48                   	dec    %eax
f011a787:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011a78d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a793:	ba 00 00 00 00       	mov    $0x0,%edx
f011a798:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011a79e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a7a4:	29 d0                	sub    %edx,%eax
f011a7a6:	01 c8                	add    %ecx,%eax
f011a7a8:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011a7ad:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f011a7b3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAB_ALLOCATIONS) / PAGE_SIZE;
f011a7ba:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a7c1:	10 00 00 
f011a7c4:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a7c9:	0f b6 d0             	movzbl %al,%edx
f011a7cc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a7d2:	01 d0                	add    %edx,%eax
f011a7d4:	48                   	dec    %eax
f011a7d5:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a7db:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a7e1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7e6:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a7ec:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a7f2:	29 d0                	sub    %edx,%eax
f011a7f4:	89 c1                	mov    %eax,%ecx
f011a7f6:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a7fd:	10 00 00 
f011a800:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011a805:	0f b6 c0             	movzbl %al,%eax
f011a808:	c1 e0 04             	shl    $0x4,%eax
f011a80b:	89 c2                	mov    %eax,%edx
f011a80d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a813:	01 d0                	add    %edx,%eax
f011a815:	48                   	dec    %eax
f011a816:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a81c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a822:	ba 00 00 00 00       	mov    $0x0,%edx
f011a827:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a82d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a833:	29 d0                	sub    %edx,%eax
f011a835:	01 c8                	add    %ecx,%eax
f011a837:	05 00 40 00 00       	add    $0x4000,%eax
f011a83c:	c1 e8 0c             	shr    $0xc,%eax
f011a83f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011a845:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a84b:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a84e:	eb 41                	jmp    f011a891 <test_kheap_virt_addr+0xe82>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a850:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a856:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a859:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a85c:	83 ec 0c             	sub    $0xc,%esp
f011a85f:	50                   	push   %eax
f011a860:	e8 f4 41 ff ff       	call   f010ea59 <kheap_virtual_address>
f011a865:	83 c4 10             	add    $0x10,%esp
f011a868:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f011a86e:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f011a875:	74 17                	je     f011a88e <test_kheap_virt_addr+0xe7f>
			{
				panic("Wrong kheap_virtual_address");
f011a877:	83 ec 04             	sub    $0x4,%esp
f011a87a:	68 2c 08 12 f0       	push   $0xf012082c
f011a87f:	68 02 09 00 00       	push   $0x902
f011a884:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a889:	e8 05 59 fe ff       	call   f0100193 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAB_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011a88e:	ff 45 d8             	incl   -0x28(%ebp)
f011a891:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a897:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011a89d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a8a0:	39 c2                	cmp    %eax,%edx
f011a8a2:	77 ac                	ja     f011a850 <test_kheap_virt_addr+0xe41>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a8a4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a8aa:	05 00 04 00 00       	add    $0x400,%eax
f011a8af:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a8b2:	eb 4b                	jmp    f011a8ff <test_kheap_virt_addr+0xef0>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a8b4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a8ba:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a8bd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a8c0:	83 ec 0c             	sub    $0xc,%esp
f011a8c3:	50                   	push   %eax
f011a8c4:	e8 90 41 ff ff       	call   f010ea59 <kheap_virtual_address>
f011a8c9:	83 c4 10             	add    $0x10,%esp
f011a8cc:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f011a8d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a8d5:	c1 e0 0c             	shl    $0xc,%eax
f011a8d8:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011a8dd:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f011a8e3:	74 17                	je     f011a8fc <test_kheap_virt_addr+0xeed>
			{
				panic("Wrong kheap_virtual_address");
f011a8e5:	83 ec 04             	sub    $0x4,%esp
f011a8e8:	68 2c 08 12 f0       	push   $0xf012082c
f011a8ed:	68 0c 09 00 00       	push   $0x90c
f011a8f2:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a8f7:	e8 97 58 fe ff       	call   f0100193 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a8fc:	ff 45 d8             	incl   -0x28(%ebp)
f011a8ff:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a905:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f011a90b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a90e:	39 c2                	cmp    %eax,%edx
f011a910:	77 a2                	ja     f011a8b4 <test_kheap_virt_addr+0xea5>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a912:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a918:	05 04 07 00 00       	add    $0x704,%eax
f011a91d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a920:	eb 41                	jmp    f011a963 <test_kheap_virt_addr+0xf54>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a922:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a928:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a92b:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a92e:	83 ec 0c             	sub    $0xc,%esp
f011a931:	50                   	push   %eax
f011a932:	e8 22 41 ff ff       	call   f010ea59 <kheap_virtual_address>
f011a937:	83 c4 10             	add    $0x10,%esp
f011a93a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f011a940:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f011a947:	74 17                	je     f011a960 <test_kheap_virt_addr+0xf51>
			{
				panic("Wrong kheap_virtual_address");
f011a949:	83 ec 04             	sub    $0x4,%esp
f011a94c:	68 2c 08 12 f0       	push   $0xf012082c
f011a951:	68 15 09 00 00       	push   $0x915
f011a956:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a95b:	e8 33 58 fe ff       	call   f0100193 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a960:	ff 45 d8             	incl   -0x28(%ebp)
f011a963:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a969:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f011a96f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a972:	39 c2                	cmp    %eax,%edx
f011a974:	77 ac                	ja     f011a922 <test_kheap_virt_addr+0xf13>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011a976:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a97c:	05 04 0d 00 00       	add    $0xd04,%eax
f011a981:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a984:	eb 4b                	jmp    f011a9d1 <test_kheap_virt_addr+0xfc2>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a986:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a98c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a98f:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a992:	83 ec 0c             	sub    $0xc,%esp
f011a995:	50                   	push   %eax
f011a996:	e8 be 40 ff ff       	call   f010ea59 <kheap_virtual_address>
f011a99b:	83 c4 10             	add    $0x10,%esp
f011a99e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f011a9a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a9a7:	c1 e0 0c             	shl    $0xc,%eax
f011a9aa:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011a9af:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f011a9b5:	74 17                	je     f011a9ce <test_kheap_virt_addr+0xfbf>
			{
				panic("Wrong kheap_virtual_address");
f011a9b7:	83 ec 04             	sub    $0x4,%esp
f011a9ba:	68 2c 08 12 f0       	push   $0xf012082c
f011a9bf:	68 1e 09 00 00       	push   $0x91e
f011a9c4:	68 e2 fd 11 f0       	push   $0xf011fde2
f011a9c9:	e8 c5 57 fe ff       	call   f0100193 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011a9ce:	ff 45 d8             	incl   -0x28(%ebp)
f011a9d1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a9d7:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f011a9dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a9e0:	39 c2                	cmp    %eax,%edx
f011a9e2:	77 a2                	ja     f011a986 <test_kheap_virt_addr+0xf77>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f011a9e4:	83 ec 0c             	sub    $0xc,%esp
f011a9e7:	68 65 ff 11 f0       	push   $0xf011ff65
f011a9ec:	e8 45 ca fe ff       	call   f0107436 <cprintf>
f011a9f1:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011a9f4:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f011a9fb:	eb 54                	jmp    f011aa51 <test_kheap_virt_addr+0x1042>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011a9fd:	83 ec 0c             	sub    $0xc,%esp
f011aa00:	ff 75 d4             	pushl  -0x2c(%ebp)
f011aa03:	e8 51 40 ff ff       	call   f010ea59 <kheap_virtual_address>
f011aa08:	83 c4 10             	add    $0x10,%esp
f011aa0b:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f011aa11:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f011aa18:	74 30                	je     f011aa4a <test_kheap_virt_addr+0x103b>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011aa1a:	83 ec 04             	sub    $0x4,%esp
f011aa1d:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f011aa23:	ff 75 d4             	pushl  -0x2c(%ebp)
f011aa26:	68 79 08 12 f0       	push   $0xf0120879
f011aa2b:	e8 06 ca fe ff       	call   f0107436 <cprintf>
f011aa30:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f011aa33:	83 ec 04             	sub    $0x4,%esp
f011aa36:	68 2c 08 12 f0       	push   $0xf012082c
f011aa3b:	68 2e 09 00 00       	push   $0x92e
f011aa40:	68 e2 fd 11 f0       	push   $0xf011fde2
f011aa45:	e8 49 57 fe ff       	call   f0100193 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011aa4a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f011aa51:	b8 70 db 3c 00       	mov    $0x3cdb70,%eax
f011aa56:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f011aa59:	72 a2                	jb     f011a9fd <test_kheap_virt_addr+0xfee>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f011aa5b:	83 ec 0c             	sub    $0xc,%esp
f011aa5e:	68 be ff 11 f0       	push   $0xf011ffbe
f011aa63:	e8 ce c9 fe ff       	call   f0107436 <cprintf>
f011aa68:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f011aa6b:	83 ec 0c             	sub    $0xc,%esp
f011aa6e:	68 98 08 12 f0       	push   $0xf0120898
f011aa73:	e8 be c9 fe ff       	call   f0107436 <cprintf>
f011aa78:	83 c4 10             	add    $0x10,%esp

	return 1;
f011aa7b:	b8 01 00 00 00       	mov    $0x1,%eax
f011aa80:	89 f4                	mov    %esi,%esp

}
f011aa82:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011aa85:	5b                   	pop    %ebx
f011aa86:	5e                   	pop    %esi
f011aa87:	5f                   	pop    %edi
f011aa88:	5d                   	pop    %ebp
f011aa89:	c3                   	ret    

f011aa8a <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011aa8a:	55                   	push   %ebp
f011aa8b:	89 e5                	mov    %esp,%ebp
//		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
//	}
//
//	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");

	return 1;
f011aa8d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011aa92:	5d                   	pop    %ebp
f011aa93:	c3                   	ret    

f011aa94 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f011aa94:	55                   	push   %ebp
f011aa95:	89 e5                	mov    %esp,%ebp
f011aa97:	53                   	push   %ebx
f011aa98:	83 ec 14             	sub    $0x14,%esp
f011aa9b:	8b 45 10             	mov    0x10(%ebp),%eax
f011aa9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011aaa1:	8b 45 14             	mov    0x14(%ebp),%eax
f011aaa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f011aaa7:	8b 45 18             	mov    0x18(%ebp),%eax
f011aaaa:	ba 00 00 00 00       	mov    $0x0,%edx
f011aaaf:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f011aab2:	77 55                	ja     f011ab09 <printnum+0x75>
f011aab4:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f011aab7:	72 05                	jb     f011aabe <printnum+0x2a>
f011aab9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aabc:	77 4b                	ja     f011ab09 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f011aabe:	8b 45 1c             	mov    0x1c(%ebp),%eax
f011aac1:	8d 58 ff             	lea    -0x1(%eax),%ebx
f011aac4:	8b 45 18             	mov    0x18(%ebp),%eax
f011aac7:	ba 00 00 00 00       	mov    $0x0,%edx
f011aacc:	52                   	push   %edx
f011aacd:	50                   	push   %eax
f011aace:	ff 75 f4             	pushl  -0xc(%ebp)
f011aad1:	ff 75 f0             	pushl  -0x10(%ebp)
f011aad4:	e8 87 19 00 00       	call   f011c460 <__udivdi3>
f011aad9:	83 c4 10             	add    $0x10,%esp
f011aadc:	83 ec 04             	sub    $0x4,%esp
f011aadf:	ff 75 20             	pushl  0x20(%ebp)
f011aae2:	53                   	push   %ebx
f011aae3:	ff 75 18             	pushl  0x18(%ebp)
f011aae6:	52                   	push   %edx
f011aae7:	50                   	push   %eax
f011aae8:	ff 75 0c             	pushl  0xc(%ebp)
f011aaeb:	ff 75 08             	pushl  0x8(%ebp)
f011aaee:	e8 a1 ff ff ff       	call   f011aa94 <printnum>
f011aaf3:	83 c4 20             	add    $0x20,%esp
f011aaf6:	eb 1a                	jmp    f011ab12 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f011aaf8:	83 ec 08             	sub    $0x8,%esp
f011aafb:	ff 75 0c             	pushl  0xc(%ebp)
f011aafe:	ff 75 20             	pushl  0x20(%ebp)
f011ab01:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab04:	ff d0                	call   *%eax
f011ab06:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f011ab09:	ff 4d 1c             	decl   0x1c(%ebp)
f011ab0c:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f011ab10:	7f e6                	jg     f011aaf8 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f011ab12:	8b 4d 18             	mov    0x18(%ebp),%ecx
f011ab15:	bb 00 00 00 00       	mov    $0x0,%ebx
f011ab1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ab1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ab20:	53                   	push   %ebx
f011ab21:	51                   	push   %ecx
f011ab22:	52                   	push   %edx
f011ab23:	50                   	push   %eax
f011ab24:	e8 47 1a 00 00       	call   f011c570 <__umoddi3>
f011ab29:	83 c4 10             	add    $0x10,%esp
f011ab2c:	05 f4 0a 12 f0       	add    $0xf0120af4,%eax
f011ab31:	8a 00                	mov    (%eax),%al
f011ab33:	0f be c0             	movsbl %al,%eax
f011ab36:	83 ec 08             	sub    $0x8,%esp
f011ab39:	ff 75 0c             	pushl  0xc(%ebp)
f011ab3c:	50                   	push   %eax
f011ab3d:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab40:	ff d0                	call   *%eax
f011ab42:	83 c4 10             	add    $0x10,%esp
}
f011ab45:	90                   	nop
f011ab46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011ab49:	c9                   	leave  
f011ab4a:	c3                   	ret    

f011ab4b <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f011ab4b:	55                   	push   %ebp
f011ab4c:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f011ab4e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f011ab52:	7e 1c                	jle    f011ab70 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f011ab54:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab57:	8b 00                	mov    (%eax),%eax
f011ab59:	8d 50 08             	lea    0x8(%eax),%edx
f011ab5c:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab5f:	89 10                	mov    %edx,(%eax)
f011ab61:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab64:	8b 00                	mov    (%eax),%eax
f011ab66:	83 e8 08             	sub    $0x8,%eax
f011ab69:	8b 50 04             	mov    0x4(%eax),%edx
f011ab6c:	8b 00                	mov    (%eax),%eax
f011ab6e:	eb 40                	jmp    f011abb0 <getuint+0x65>
	else if (lflag)
f011ab70:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011ab74:	74 1e                	je     f011ab94 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f011ab76:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab79:	8b 00                	mov    (%eax),%eax
f011ab7b:	8d 50 04             	lea    0x4(%eax),%edx
f011ab7e:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab81:	89 10                	mov    %edx,(%eax)
f011ab83:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab86:	8b 00                	mov    (%eax),%eax
f011ab88:	83 e8 04             	sub    $0x4,%eax
f011ab8b:	8b 00                	mov    (%eax),%eax
f011ab8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab92:	eb 1c                	jmp    f011abb0 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f011ab94:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab97:	8b 00                	mov    (%eax),%eax
f011ab99:	8d 50 04             	lea    0x4(%eax),%edx
f011ab9c:	8b 45 08             	mov    0x8(%ebp),%eax
f011ab9f:	89 10                	mov    %edx,(%eax)
f011aba1:	8b 45 08             	mov    0x8(%ebp),%eax
f011aba4:	8b 00                	mov    (%eax),%eax
f011aba6:	83 e8 04             	sub    $0x4,%eax
f011aba9:	8b 00                	mov    (%eax),%eax
f011abab:	ba 00 00 00 00       	mov    $0x0,%edx
}
f011abb0:	5d                   	pop    %ebp
f011abb1:	c3                   	ret    

f011abb2 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f011abb2:	55                   	push   %ebp
f011abb3:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f011abb5:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f011abb9:	7e 1c                	jle    f011abd7 <getint+0x25>
		return va_arg(*ap, long long);
f011abbb:	8b 45 08             	mov    0x8(%ebp),%eax
f011abbe:	8b 00                	mov    (%eax),%eax
f011abc0:	8d 50 08             	lea    0x8(%eax),%edx
f011abc3:	8b 45 08             	mov    0x8(%ebp),%eax
f011abc6:	89 10                	mov    %edx,(%eax)
f011abc8:	8b 45 08             	mov    0x8(%ebp),%eax
f011abcb:	8b 00                	mov    (%eax),%eax
f011abcd:	83 e8 08             	sub    $0x8,%eax
f011abd0:	8b 50 04             	mov    0x4(%eax),%edx
f011abd3:	8b 00                	mov    (%eax),%eax
f011abd5:	eb 38                	jmp    f011ac0f <getint+0x5d>
	else if (lflag)
f011abd7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011abdb:	74 1a                	je     f011abf7 <getint+0x45>
		return va_arg(*ap, long);
f011abdd:	8b 45 08             	mov    0x8(%ebp),%eax
f011abe0:	8b 00                	mov    (%eax),%eax
f011abe2:	8d 50 04             	lea    0x4(%eax),%edx
f011abe5:	8b 45 08             	mov    0x8(%ebp),%eax
f011abe8:	89 10                	mov    %edx,(%eax)
f011abea:	8b 45 08             	mov    0x8(%ebp),%eax
f011abed:	8b 00                	mov    (%eax),%eax
f011abef:	83 e8 04             	sub    $0x4,%eax
f011abf2:	8b 00                	mov    (%eax),%eax
f011abf4:	99                   	cltd   
f011abf5:	eb 18                	jmp    f011ac0f <getint+0x5d>
	else
		return va_arg(*ap, int);
f011abf7:	8b 45 08             	mov    0x8(%ebp),%eax
f011abfa:	8b 00                	mov    (%eax),%eax
f011abfc:	8d 50 04             	lea    0x4(%eax),%edx
f011abff:	8b 45 08             	mov    0x8(%ebp),%eax
f011ac02:	89 10                	mov    %edx,(%eax)
f011ac04:	8b 45 08             	mov    0x8(%ebp),%eax
f011ac07:	8b 00                	mov    (%eax),%eax
f011ac09:	83 e8 04             	sub    $0x4,%eax
f011ac0c:	8b 00                	mov    (%eax),%eax
f011ac0e:	99                   	cltd   
}
f011ac0f:	5d                   	pop    %ebp
f011ac10:	c3                   	ret    

f011ac11 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f011ac11:	55                   	push   %ebp
f011ac12:	89 e5                	mov    %esp,%ebp
f011ac14:	56                   	push   %esi
f011ac15:	53                   	push   %ebx
f011ac16:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f011ac19:	eb 17                	jmp    f011ac32 <vprintfmt+0x21>
			if (ch == '\0')
f011ac1b:	85 db                	test   %ebx,%ebx
f011ac1d:	0f 84 af 03 00 00    	je     f011afd2 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f011ac23:	83 ec 08             	sub    $0x8,%esp
f011ac26:	ff 75 0c             	pushl  0xc(%ebp)
f011ac29:	53                   	push   %ebx
f011ac2a:	8b 45 08             	mov    0x8(%ebp),%eax
f011ac2d:	ff d0                	call   *%eax
f011ac2f:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f011ac32:	8b 45 10             	mov    0x10(%ebp),%eax
f011ac35:	8d 50 01             	lea    0x1(%eax),%edx
f011ac38:	89 55 10             	mov    %edx,0x10(%ebp)
f011ac3b:	8a 00                	mov    (%eax),%al
f011ac3d:	0f b6 d8             	movzbl %al,%ebx
f011ac40:	83 fb 25             	cmp    $0x25,%ebx
f011ac43:	75 d6                	jne    f011ac1b <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f011ac45:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f011ac49:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f011ac50:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f011ac57:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f011ac5e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f011ac65:	8b 45 10             	mov    0x10(%ebp),%eax
f011ac68:	8d 50 01             	lea    0x1(%eax),%edx
f011ac6b:	89 55 10             	mov    %edx,0x10(%ebp)
f011ac6e:	8a 00                	mov    (%eax),%al
f011ac70:	0f b6 d8             	movzbl %al,%ebx
f011ac73:	8d 43 dd             	lea    -0x23(%ebx),%eax
f011ac76:	83 f8 55             	cmp    $0x55,%eax
f011ac79:	0f 87 2b 03 00 00    	ja     f011afaa <vprintfmt+0x399>
f011ac7f:	8b 04 85 18 0b 12 f0 	mov    -0xfedf4e8(,%eax,4),%eax
f011ac86:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f011ac88:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f011ac8c:	eb d7                	jmp    f011ac65 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f011ac8e:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f011ac92:	eb d1                	jmp    f011ac65 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f011ac94:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f011ac9b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011ac9e:	89 d0                	mov    %edx,%eax
f011aca0:	c1 e0 02             	shl    $0x2,%eax
f011aca3:	01 d0                	add    %edx,%eax
f011aca5:	01 c0                	add    %eax,%eax
f011aca7:	01 d8                	add    %ebx,%eax
f011aca9:	83 e8 30             	sub    $0x30,%eax
f011acac:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f011acaf:	8b 45 10             	mov    0x10(%ebp),%eax
f011acb2:	8a 00                	mov    (%eax),%al
f011acb4:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f011acb7:	83 fb 2f             	cmp    $0x2f,%ebx
f011acba:	7e 3e                	jle    f011acfa <vprintfmt+0xe9>
f011acbc:	83 fb 39             	cmp    $0x39,%ebx
f011acbf:	7f 39                	jg     f011acfa <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f011acc1:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f011acc4:	eb d5                	jmp    f011ac9b <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f011acc6:	8b 45 14             	mov    0x14(%ebp),%eax
f011acc9:	83 c0 04             	add    $0x4,%eax
f011accc:	89 45 14             	mov    %eax,0x14(%ebp)
f011accf:	8b 45 14             	mov    0x14(%ebp),%eax
f011acd2:	83 e8 04             	sub    $0x4,%eax
f011acd5:	8b 00                	mov    (%eax),%eax
f011acd7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f011acda:	eb 1f                	jmp    f011acfb <vprintfmt+0xea>

		case '.':
			if (width < 0)
f011acdc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011ace0:	79 83                	jns    f011ac65 <vprintfmt+0x54>
				width = 0;
f011ace2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f011ace9:	e9 77 ff ff ff       	jmp    f011ac65 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f011acee:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f011acf5:	e9 6b ff ff ff       	jmp    f011ac65 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f011acfa:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f011acfb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011acff:	0f 89 60 ff ff ff    	jns    f011ac65 <vprintfmt+0x54>
				width = precision, precision = -1;
f011ad05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ad08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011ad0b:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f011ad12:	e9 4e ff ff ff       	jmp    f011ac65 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f011ad17:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f011ad1a:	e9 46 ff ff ff       	jmp    f011ac65 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f011ad1f:	8b 45 14             	mov    0x14(%ebp),%eax
f011ad22:	83 c0 04             	add    $0x4,%eax
f011ad25:	89 45 14             	mov    %eax,0x14(%ebp)
f011ad28:	8b 45 14             	mov    0x14(%ebp),%eax
f011ad2b:	83 e8 04             	sub    $0x4,%eax
f011ad2e:	8b 00                	mov    (%eax),%eax
f011ad30:	83 ec 08             	sub    $0x8,%esp
f011ad33:	ff 75 0c             	pushl  0xc(%ebp)
f011ad36:	50                   	push   %eax
f011ad37:	8b 45 08             	mov    0x8(%ebp),%eax
f011ad3a:	ff d0                	call   *%eax
f011ad3c:	83 c4 10             	add    $0x10,%esp
			break;
f011ad3f:	e9 89 02 00 00       	jmp    f011afcd <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f011ad44:	8b 45 14             	mov    0x14(%ebp),%eax
f011ad47:	83 c0 04             	add    $0x4,%eax
f011ad4a:	89 45 14             	mov    %eax,0x14(%ebp)
f011ad4d:	8b 45 14             	mov    0x14(%ebp),%eax
f011ad50:	83 e8 04             	sub    $0x4,%eax
f011ad53:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f011ad55:	85 db                	test   %ebx,%ebx
f011ad57:	79 02                	jns    f011ad5b <vprintfmt+0x14a>
				err = -err;
f011ad59:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f011ad5b:	83 fb 64             	cmp    $0x64,%ebx
f011ad5e:	7f 0b                	jg     f011ad6b <vprintfmt+0x15a>
f011ad60:	8b 34 9d 60 09 12 f0 	mov    -0xfedf6a0(,%ebx,4),%esi
f011ad67:	85 f6                	test   %esi,%esi
f011ad69:	75 19                	jne    f011ad84 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f011ad6b:	53                   	push   %ebx
f011ad6c:	68 05 0b 12 f0       	push   $0xf0120b05
f011ad71:	ff 75 0c             	pushl  0xc(%ebp)
f011ad74:	ff 75 08             	pushl  0x8(%ebp)
f011ad77:	e8 5e 02 00 00       	call   f011afda <printfmt>
f011ad7c:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f011ad7f:	e9 49 02 00 00       	jmp    f011afcd <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f011ad84:	56                   	push   %esi
f011ad85:	68 0e 0b 12 f0       	push   $0xf0120b0e
f011ad8a:	ff 75 0c             	pushl  0xc(%ebp)
f011ad8d:	ff 75 08             	pushl  0x8(%ebp)
f011ad90:	e8 45 02 00 00       	call   f011afda <printfmt>
f011ad95:	83 c4 10             	add    $0x10,%esp
			break;
f011ad98:	e9 30 02 00 00       	jmp    f011afcd <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f011ad9d:	8b 45 14             	mov    0x14(%ebp),%eax
f011ada0:	83 c0 04             	add    $0x4,%eax
f011ada3:	89 45 14             	mov    %eax,0x14(%ebp)
f011ada6:	8b 45 14             	mov    0x14(%ebp),%eax
f011ada9:	83 e8 04             	sub    $0x4,%eax
f011adac:	8b 30                	mov    (%eax),%esi
f011adae:	85 f6                	test   %esi,%esi
f011adb0:	75 05                	jne    f011adb7 <vprintfmt+0x1a6>
				p = "(null)";
f011adb2:	be 11 0b 12 f0       	mov    $0xf0120b11,%esi
			if (width > 0 && padc != '-')
f011adb7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011adbb:	7e 6d                	jle    f011ae2a <vprintfmt+0x219>
f011adbd:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f011adc1:	74 67                	je     f011ae2a <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f011adc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011adc6:	83 ec 08             	sub    $0x8,%esp
f011adc9:	50                   	push   %eax
f011adca:	56                   	push   %esi
f011adcb:	e8 12 05 00 00       	call   f011b2e2 <strnlen>
f011add0:	83 c4 10             	add    $0x10,%esp
f011add3:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f011add6:	eb 16                	jmp    f011adee <vprintfmt+0x1dd>
					putch(padc, putdat);
f011add8:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f011addc:	83 ec 08             	sub    $0x8,%esp
f011addf:	ff 75 0c             	pushl  0xc(%ebp)
f011ade2:	50                   	push   %eax
f011ade3:	8b 45 08             	mov    0x8(%ebp),%eax
f011ade6:	ff d0                	call   *%eax
f011ade8:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f011adeb:	ff 4d e4             	decl   -0x1c(%ebp)
f011adee:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011adf2:	7f e4                	jg     f011add8 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f011adf4:	eb 34                	jmp    f011ae2a <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f011adf6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011adfa:	74 1c                	je     f011ae18 <vprintfmt+0x207>
f011adfc:	83 fb 1f             	cmp    $0x1f,%ebx
f011adff:	7e 05                	jle    f011ae06 <vprintfmt+0x1f5>
f011ae01:	83 fb 7e             	cmp    $0x7e,%ebx
f011ae04:	7e 12                	jle    f011ae18 <vprintfmt+0x207>
					putch('?', putdat);
f011ae06:	83 ec 08             	sub    $0x8,%esp
f011ae09:	ff 75 0c             	pushl  0xc(%ebp)
f011ae0c:	6a 3f                	push   $0x3f
f011ae0e:	8b 45 08             	mov    0x8(%ebp),%eax
f011ae11:	ff d0                	call   *%eax
f011ae13:	83 c4 10             	add    $0x10,%esp
f011ae16:	eb 0f                	jmp    f011ae27 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f011ae18:	83 ec 08             	sub    $0x8,%esp
f011ae1b:	ff 75 0c             	pushl  0xc(%ebp)
f011ae1e:	53                   	push   %ebx
f011ae1f:	8b 45 08             	mov    0x8(%ebp),%eax
f011ae22:	ff d0                	call   *%eax
f011ae24:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f011ae27:	ff 4d e4             	decl   -0x1c(%ebp)
f011ae2a:	89 f0                	mov    %esi,%eax
f011ae2c:	8d 70 01             	lea    0x1(%eax),%esi
f011ae2f:	8a 00                	mov    (%eax),%al
f011ae31:	0f be d8             	movsbl %al,%ebx
f011ae34:	85 db                	test   %ebx,%ebx
f011ae36:	74 24                	je     f011ae5c <vprintfmt+0x24b>
f011ae38:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ae3c:	78 b8                	js     f011adf6 <vprintfmt+0x1e5>
f011ae3e:	ff 4d e0             	decl   -0x20(%ebp)
f011ae41:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ae45:	79 af                	jns    f011adf6 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f011ae47:	eb 13                	jmp    f011ae5c <vprintfmt+0x24b>
				putch(' ', putdat);
f011ae49:	83 ec 08             	sub    $0x8,%esp
f011ae4c:	ff 75 0c             	pushl  0xc(%ebp)
f011ae4f:	6a 20                	push   $0x20
f011ae51:	8b 45 08             	mov    0x8(%ebp),%eax
f011ae54:	ff d0                	call   *%eax
f011ae56:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f011ae59:	ff 4d e4             	decl   -0x1c(%ebp)
f011ae5c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011ae60:	7f e7                	jg     f011ae49 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f011ae62:	e9 66 01 00 00       	jmp    f011afcd <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f011ae67:	83 ec 08             	sub    $0x8,%esp
f011ae6a:	ff 75 e8             	pushl  -0x18(%ebp)
f011ae6d:	8d 45 14             	lea    0x14(%ebp),%eax
f011ae70:	50                   	push   %eax
f011ae71:	e8 3c fd ff ff       	call   f011abb2 <getint>
f011ae76:	83 c4 10             	add    $0x10,%esp
f011ae79:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ae7c:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f011ae7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ae82:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae85:	85 d2                	test   %edx,%edx
f011ae87:	79 23                	jns    f011aeac <vprintfmt+0x29b>
				putch('-', putdat);
f011ae89:	83 ec 08             	sub    $0x8,%esp
f011ae8c:	ff 75 0c             	pushl  0xc(%ebp)
f011ae8f:	6a 2d                	push   $0x2d
f011ae91:	8b 45 08             	mov    0x8(%ebp),%eax
f011ae94:	ff d0                	call   *%eax
f011ae96:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f011ae99:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ae9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ae9f:	f7 d8                	neg    %eax
f011aea1:	83 d2 00             	adc    $0x0,%edx
f011aea4:	f7 da                	neg    %edx
f011aea6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011aea9:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f011aeac:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f011aeb3:	e9 bc 00 00 00       	jmp    f011af74 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f011aeb8:	83 ec 08             	sub    $0x8,%esp
f011aebb:	ff 75 e8             	pushl  -0x18(%ebp)
f011aebe:	8d 45 14             	lea    0x14(%ebp),%eax
f011aec1:	50                   	push   %eax
f011aec2:	e8 84 fc ff ff       	call   f011ab4b <getuint>
f011aec7:	83 c4 10             	add    $0x10,%esp
f011aeca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011aecd:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f011aed0:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f011aed7:	e9 98 00 00 00       	jmp    f011af74 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f011aedc:	83 ec 08             	sub    $0x8,%esp
f011aedf:	ff 75 0c             	pushl  0xc(%ebp)
f011aee2:	6a 58                	push   $0x58
f011aee4:	8b 45 08             	mov    0x8(%ebp),%eax
f011aee7:	ff d0                	call   *%eax
f011aee9:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f011aeec:	83 ec 08             	sub    $0x8,%esp
f011aeef:	ff 75 0c             	pushl  0xc(%ebp)
f011aef2:	6a 58                	push   $0x58
f011aef4:	8b 45 08             	mov    0x8(%ebp),%eax
f011aef7:	ff d0                	call   *%eax
f011aef9:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f011aefc:	83 ec 08             	sub    $0x8,%esp
f011aeff:	ff 75 0c             	pushl  0xc(%ebp)
f011af02:	6a 58                	push   $0x58
f011af04:	8b 45 08             	mov    0x8(%ebp),%eax
f011af07:	ff d0                	call   *%eax
f011af09:	83 c4 10             	add    $0x10,%esp
			break;
f011af0c:	e9 bc 00 00 00       	jmp    f011afcd <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f011af11:	83 ec 08             	sub    $0x8,%esp
f011af14:	ff 75 0c             	pushl  0xc(%ebp)
f011af17:	6a 30                	push   $0x30
f011af19:	8b 45 08             	mov    0x8(%ebp),%eax
f011af1c:	ff d0                	call   *%eax
f011af1e:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f011af21:	83 ec 08             	sub    $0x8,%esp
f011af24:	ff 75 0c             	pushl  0xc(%ebp)
f011af27:	6a 78                	push   $0x78
f011af29:	8b 45 08             	mov    0x8(%ebp),%eax
f011af2c:	ff d0                	call   *%eax
f011af2e:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f011af31:	8b 45 14             	mov    0x14(%ebp),%eax
f011af34:	83 c0 04             	add    $0x4,%eax
f011af37:	89 45 14             	mov    %eax,0x14(%ebp)
f011af3a:	8b 45 14             	mov    0x14(%ebp),%eax
f011af3d:	83 e8 04             	sub    $0x4,%eax
f011af40:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f011af42:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011af45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f011af4c:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f011af53:	eb 1f                	jmp    f011af74 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f011af55:	83 ec 08             	sub    $0x8,%esp
f011af58:	ff 75 e8             	pushl  -0x18(%ebp)
f011af5b:	8d 45 14             	lea    0x14(%ebp),%eax
f011af5e:	50                   	push   %eax
f011af5f:	e8 e7 fb ff ff       	call   f011ab4b <getuint>
f011af64:	83 c4 10             	add    $0x10,%esp
f011af67:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011af6a:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f011af6d:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f011af74:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f011af78:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011af7b:	83 ec 04             	sub    $0x4,%esp
f011af7e:	52                   	push   %edx
f011af7f:	ff 75 e4             	pushl  -0x1c(%ebp)
f011af82:	50                   	push   %eax
f011af83:	ff 75 f4             	pushl  -0xc(%ebp)
f011af86:	ff 75 f0             	pushl  -0x10(%ebp)
f011af89:	ff 75 0c             	pushl  0xc(%ebp)
f011af8c:	ff 75 08             	pushl  0x8(%ebp)
f011af8f:	e8 00 fb ff ff       	call   f011aa94 <printnum>
f011af94:	83 c4 20             	add    $0x20,%esp
			break;
f011af97:	eb 34                	jmp    f011afcd <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f011af99:	83 ec 08             	sub    $0x8,%esp
f011af9c:	ff 75 0c             	pushl  0xc(%ebp)
f011af9f:	53                   	push   %ebx
f011afa0:	8b 45 08             	mov    0x8(%ebp),%eax
f011afa3:	ff d0                	call   *%eax
f011afa5:	83 c4 10             	add    $0x10,%esp
			break;
f011afa8:	eb 23                	jmp    f011afcd <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f011afaa:	83 ec 08             	sub    $0x8,%esp
f011afad:	ff 75 0c             	pushl  0xc(%ebp)
f011afb0:	6a 25                	push   $0x25
f011afb2:	8b 45 08             	mov    0x8(%ebp),%eax
f011afb5:	ff d0                	call   *%eax
f011afb7:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f011afba:	ff 4d 10             	decl   0x10(%ebp)
f011afbd:	eb 03                	jmp    f011afc2 <vprintfmt+0x3b1>
f011afbf:	ff 4d 10             	decl   0x10(%ebp)
f011afc2:	8b 45 10             	mov    0x10(%ebp),%eax
f011afc5:	48                   	dec    %eax
f011afc6:	8a 00                	mov    (%eax),%al
f011afc8:	3c 25                	cmp    $0x25,%al
f011afca:	75 f3                	jne    f011afbf <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f011afcc:	90                   	nop
		}
	}
f011afcd:	e9 47 fc ff ff       	jmp    f011ac19 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f011afd2:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f011afd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011afd6:	5b                   	pop    %ebx
f011afd7:	5e                   	pop    %esi
f011afd8:	5d                   	pop    %ebp
f011afd9:	c3                   	ret    

f011afda <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f011afda:	55                   	push   %ebp
f011afdb:	89 e5                	mov    %esp,%ebp
f011afdd:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f011afe0:	8d 45 10             	lea    0x10(%ebp),%eax
f011afe3:	83 c0 04             	add    $0x4,%eax
f011afe6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f011afe9:	8b 45 10             	mov    0x10(%ebp),%eax
f011afec:	ff 75 f4             	pushl  -0xc(%ebp)
f011afef:	50                   	push   %eax
f011aff0:	ff 75 0c             	pushl  0xc(%ebp)
f011aff3:	ff 75 08             	pushl  0x8(%ebp)
f011aff6:	e8 16 fc ff ff       	call   f011ac11 <vprintfmt>
f011affb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f011affe:	90                   	nop
f011afff:	c9                   	leave  
f011b000:	c3                   	ret    

f011b001 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f011b001:	55                   	push   %ebp
f011b002:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f011b004:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b007:	8b 40 08             	mov    0x8(%eax),%eax
f011b00a:	8d 50 01             	lea    0x1(%eax),%edx
f011b00d:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b010:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f011b013:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b016:	8b 10                	mov    (%eax),%edx
f011b018:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b01b:	8b 40 04             	mov    0x4(%eax),%eax
f011b01e:	39 c2                	cmp    %eax,%edx
f011b020:	73 12                	jae    f011b034 <sprintputch+0x33>
		*b->buf++ = ch;
f011b022:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b025:	8b 00                	mov    (%eax),%eax
f011b027:	8d 48 01             	lea    0x1(%eax),%ecx
f011b02a:	8b 55 0c             	mov    0xc(%ebp),%edx
f011b02d:	89 0a                	mov    %ecx,(%edx)
f011b02f:	8b 55 08             	mov    0x8(%ebp),%edx
f011b032:	88 10                	mov    %dl,(%eax)
}
f011b034:	90                   	nop
f011b035:	5d                   	pop    %ebp
f011b036:	c3                   	ret    

f011b037 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f011b037:	55                   	push   %ebp
f011b038:	89 e5                	mov    %esp,%ebp
f011b03a:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f011b03d:	8b 45 08             	mov    0x8(%ebp),%eax
f011b040:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011b043:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b046:	8d 50 ff             	lea    -0x1(%eax),%edx
f011b049:	8b 45 08             	mov    0x8(%ebp),%eax
f011b04c:	01 d0                	add    %edx,%eax
f011b04e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011b051:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f011b058:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011b05c:	74 06                	je     f011b064 <vsnprintf+0x2d>
f011b05e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011b062:	7f 07                	jg     f011b06b <vsnprintf+0x34>
		return -E_INVAL;
f011b064:	b8 03 00 00 00       	mov    $0x3,%eax
f011b069:	eb 20                	jmp    f011b08b <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f011b06b:	ff 75 14             	pushl  0x14(%ebp)
f011b06e:	ff 75 10             	pushl  0x10(%ebp)
f011b071:	8d 45 ec             	lea    -0x14(%ebp),%eax
f011b074:	50                   	push   %eax
f011b075:	68 01 b0 11 f0       	push   $0xf011b001
f011b07a:	e8 92 fb ff ff       	call   f011ac11 <vprintfmt>
f011b07f:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f011b082:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011b085:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f011b088:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f011b08b:	c9                   	leave  
f011b08c:	c3                   	ret    

f011b08d <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f011b08d:	55                   	push   %ebp
f011b08e:	89 e5                	mov    %esp,%ebp
f011b090:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f011b093:	8d 45 10             	lea    0x10(%ebp),%eax
f011b096:	83 c0 04             	add    $0x4,%eax
f011b099:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f011b09c:	8b 45 10             	mov    0x10(%ebp),%eax
f011b09f:	ff 75 f4             	pushl  -0xc(%ebp)
f011b0a2:	50                   	push   %eax
f011b0a3:	ff 75 0c             	pushl  0xc(%ebp)
f011b0a6:	ff 75 08             	pushl  0x8(%ebp)
f011b0a9:	e8 89 ff ff ff       	call   f011b037 <vsnprintf>
f011b0ae:	83 c4 10             	add    $0x10,%esp
f011b0b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f011b0b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f011b0b7:	c9                   	leave  
f011b0b8:	c3                   	ret    

f011b0b9 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f011b0b9:	55                   	push   %ebp
f011b0ba:	89 e5                	mov    %esp,%ebp
f011b0bc:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f011b0bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011b0c3:	74 13                	je     f011b0d8 <readline+0x1f>
		cprintf("%s", prompt);
f011b0c5:	83 ec 08             	sub    $0x8,%esp
f011b0c8:	ff 75 08             	pushl  0x8(%ebp)
f011b0cb:	68 70 0c 12 f0       	push   $0xf0120c70
f011b0d0:	e8 61 c3 fe ff       	call   f0107436 <cprintf>
f011b0d5:	83 c4 10             	add    $0x10,%esp

	i = 0;
f011b0d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f011b0df:	83 ec 0c             	sub    $0xc,%esp
f011b0e2:	6a 00                	push   $0x0
f011b0e4:	e8 52 5c fe ff       	call   f0100d3b <iscons>
f011b0e9:	83 c4 10             	add    $0x10,%esp
f011b0ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f011b0ef:	e8 2e 5c fe ff       	call   f0100d22 <getchar>
f011b0f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f011b0f7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011b0fb:	79 22                	jns    f011b11f <readline+0x66>
			if (c != -E_EOF)
f011b0fd:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f011b101:	0f 84 ad 00 00 00    	je     f011b1b4 <readline+0xfb>
				cprintf("read error: %e\n", c);
f011b107:	83 ec 08             	sub    $0x8,%esp
f011b10a:	ff 75 ec             	pushl  -0x14(%ebp)
f011b10d:	68 73 0c 12 f0       	push   $0xf0120c73
f011b112:	e8 1f c3 fe ff       	call   f0107436 <cprintf>
f011b117:	83 c4 10             	add    $0x10,%esp
			return;
f011b11a:	e9 95 00 00 00       	jmp    f011b1b4 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f011b11f:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f011b123:	7e 34                	jle    f011b159 <readline+0xa0>
f011b125:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f011b12c:	7f 2b                	jg     f011b159 <readline+0xa0>
			if (echoing)
f011b12e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b132:	74 0e                	je     f011b142 <readline+0x89>
				cputchar(c);
f011b134:	83 ec 0c             	sub    $0xc,%esp
f011b137:	ff 75 ec             	pushl  -0x14(%ebp)
f011b13a:	e8 cc 5b fe ff       	call   f0100d0b <cputchar>
f011b13f:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f011b142:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b145:	8d 50 01             	lea    0x1(%eax),%edx
f011b148:	89 55 f4             	mov    %edx,-0xc(%ebp)
f011b14b:	89 c2                	mov    %eax,%edx
f011b14d:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b150:	01 d0                	add    %edx,%eax
f011b152:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b155:	88 10                	mov    %dl,(%eax)
f011b157:	eb 56                	jmp    f011b1af <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f011b159:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f011b15d:	75 1f                	jne    f011b17e <readline+0xc5>
f011b15f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011b163:	7e 19                	jle    f011b17e <readline+0xc5>
			if (echoing)
f011b165:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b169:	74 0e                	je     f011b179 <readline+0xc0>
				cputchar(c);
f011b16b:	83 ec 0c             	sub    $0xc,%esp
f011b16e:	ff 75 ec             	pushl  -0x14(%ebp)
f011b171:	e8 95 5b fe ff       	call   f0100d0b <cputchar>
f011b176:	83 c4 10             	add    $0x10,%esp

			i--;
f011b179:	ff 4d f4             	decl   -0xc(%ebp)
f011b17c:	eb 31                	jmp    f011b1af <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f011b17e:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f011b182:	74 0a                	je     f011b18e <readline+0xd5>
f011b184:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f011b188:	0f 85 61 ff ff ff    	jne    f011b0ef <readline+0x36>
			if (echoing)
f011b18e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b192:	74 0e                	je     f011b1a2 <readline+0xe9>
				cputchar(c);
f011b194:	83 ec 0c             	sub    $0xc,%esp
f011b197:	ff 75 ec             	pushl  -0x14(%ebp)
f011b19a:	e8 6c 5b fe ff       	call   f0100d0b <cputchar>
f011b19f:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f011b1a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b1a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b1a8:	01 d0                	add    %edx,%eax
f011b1aa:	c6 00 00             	movb   $0x0,(%eax)
			return;
f011b1ad:	eb 06                	jmp    f011b1b5 <readline+0xfc>
		}
	}
f011b1af:	e9 3b ff ff ff       	jmp    f011b0ef <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f011b1b4:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f011b1b5:	c9                   	leave  
f011b1b6:	c3                   	ret    

f011b1b7 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f011b1b7:	55                   	push   %ebp
f011b1b8:	89 e5                	mov    %esp,%ebp
f011b1ba:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f011b1bd:	e8 47 13 ff ff       	call   f010c509 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f011b1c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011b1c6:	74 13                	je     f011b1db <atomic_readline+0x24>
		cprintf("%s", prompt);
f011b1c8:	83 ec 08             	sub    $0x8,%esp
f011b1cb:	ff 75 08             	pushl  0x8(%ebp)
f011b1ce:	68 70 0c 12 f0       	push   $0xf0120c70
f011b1d3:	e8 5e c2 fe ff       	call   f0107436 <cprintf>
f011b1d8:	83 c4 10             	add    $0x10,%esp

	i = 0;
f011b1db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f011b1e2:	83 ec 0c             	sub    $0xc,%esp
f011b1e5:	6a 00                	push   $0x0
f011b1e7:	e8 4f 5b fe ff       	call   f0100d3b <iscons>
f011b1ec:	83 c4 10             	add    $0x10,%esp
f011b1ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f011b1f2:	e8 2b 5b fe ff       	call   f0100d22 <getchar>
f011b1f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f011b1fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011b1fe:	79 23                	jns    f011b223 <atomic_readline+0x6c>
			if (c != -E_EOF)
f011b200:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f011b204:	74 13                	je     f011b219 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f011b206:	83 ec 08             	sub    $0x8,%esp
f011b209:	ff 75 ec             	pushl  -0x14(%ebp)
f011b20c:	68 73 0c 12 f0       	push   $0xf0120c73
f011b211:	e8 20 c2 fe ff       	call   f0107436 <cprintf>
f011b216:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f011b219:	e8 05 13 ff ff       	call   f010c523 <sys_enable_interrupt>
			return;
f011b21e:	e9 9a 00 00 00       	jmp    f011b2bd <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f011b223:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f011b227:	7e 34                	jle    f011b25d <atomic_readline+0xa6>
f011b229:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f011b230:	7f 2b                	jg     f011b25d <atomic_readline+0xa6>
			if (echoing)
f011b232:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b236:	74 0e                	je     f011b246 <atomic_readline+0x8f>
				cputchar(c);
f011b238:	83 ec 0c             	sub    $0xc,%esp
f011b23b:	ff 75 ec             	pushl  -0x14(%ebp)
f011b23e:	e8 c8 5a fe ff       	call   f0100d0b <cputchar>
f011b243:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f011b246:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b249:	8d 50 01             	lea    0x1(%eax),%edx
f011b24c:	89 55 f4             	mov    %edx,-0xc(%ebp)
f011b24f:	89 c2                	mov    %eax,%edx
f011b251:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b254:	01 d0                	add    %edx,%eax
f011b256:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b259:	88 10                	mov    %dl,(%eax)
f011b25b:	eb 5b                	jmp    f011b2b8 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f011b25d:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f011b261:	75 1f                	jne    f011b282 <atomic_readline+0xcb>
f011b263:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011b267:	7e 19                	jle    f011b282 <atomic_readline+0xcb>
			if (echoing)
f011b269:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b26d:	74 0e                	je     f011b27d <atomic_readline+0xc6>
				cputchar(c);
f011b26f:	83 ec 0c             	sub    $0xc,%esp
f011b272:	ff 75 ec             	pushl  -0x14(%ebp)
f011b275:	e8 91 5a fe ff       	call   f0100d0b <cputchar>
f011b27a:	83 c4 10             	add    $0x10,%esp
			i--;
f011b27d:	ff 4d f4             	decl   -0xc(%ebp)
f011b280:	eb 36                	jmp    f011b2b8 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f011b282:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f011b286:	74 0a                	je     f011b292 <atomic_readline+0xdb>
f011b288:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f011b28c:	0f 85 60 ff ff ff    	jne    f011b1f2 <atomic_readline+0x3b>
			if (echoing)
f011b292:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b296:	74 0e                	je     f011b2a6 <atomic_readline+0xef>
				cputchar(c);
f011b298:	83 ec 0c             	sub    $0xc,%esp
f011b29b:	ff 75 ec             	pushl  -0x14(%ebp)
f011b29e:	e8 68 5a fe ff       	call   f0100d0b <cputchar>
f011b2a3:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f011b2a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b2a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b2ac:	01 d0                	add    %edx,%eax
f011b2ae:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f011b2b1:	e8 6d 12 ff ff       	call   f010c523 <sys_enable_interrupt>
			return;
f011b2b6:	eb 05                	jmp    f011b2bd <atomic_readline+0x106>
		}
	}
f011b2b8:	e9 35 ff ff ff       	jmp    f011b1f2 <atomic_readline+0x3b>
}
f011b2bd:	c9                   	leave  
f011b2be:	c3                   	ret    

f011b2bf <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f011b2bf:	55                   	push   %ebp
f011b2c0:	89 e5                	mov    %esp,%ebp
f011b2c2:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f011b2c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011b2cc:	eb 06                	jmp    f011b2d4 <strlen+0x15>
		n++;
f011b2ce:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f011b2d1:	ff 45 08             	incl   0x8(%ebp)
f011b2d4:	8b 45 08             	mov    0x8(%ebp),%eax
f011b2d7:	8a 00                	mov    (%eax),%al
f011b2d9:	84 c0                	test   %al,%al
f011b2db:	75 f1                	jne    f011b2ce <strlen+0xf>
		n++;
	return n;
f011b2dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011b2e0:	c9                   	leave  
f011b2e1:	c3                   	ret    

f011b2e2 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f011b2e2:	55                   	push   %ebp
f011b2e3:	89 e5                	mov    %esp,%ebp
f011b2e5:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f011b2e8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011b2ef:	eb 09                	jmp    f011b2fa <strnlen+0x18>
		n++;
f011b2f1:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f011b2f4:	ff 45 08             	incl   0x8(%ebp)
f011b2f7:	ff 4d 0c             	decl   0xc(%ebp)
f011b2fa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011b2fe:	74 09                	je     f011b309 <strnlen+0x27>
f011b300:	8b 45 08             	mov    0x8(%ebp),%eax
f011b303:	8a 00                	mov    (%eax),%al
f011b305:	84 c0                	test   %al,%al
f011b307:	75 e8                	jne    f011b2f1 <strnlen+0xf>
		n++;
	return n;
f011b309:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011b30c:	c9                   	leave  
f011b30d:	c3                   	ret    

f011b30e <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f011b30e:	55                   	push   %ebp
f011b30f:	89 e5                	mov    %esp,%ebp
f011b311:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f011b314:	8b 45 08             	mov    0x8(%ebp),%eax
f011b317:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f011b31a:	90                   	nop
f011b31b:	8b 45 08             	mov    0x8(%ebp),%eax
f011b31e:	8d 50 01             	lea    0x1(%eax),%edx
f011b321:	89 55 08             	mov    %edx,0x8(%ebp)
f011b324:	8b 55 0c             	mov    0xc(%ebp),%edx
f011b327:	8d 4a 01             	lea    0x1(%edx),%ecx
f011b32a:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f011b32d:	8a 12                	mov    (%edx),%dl
f011b32f:	88 10                	mov    %dl,(%eax)
f011b331:	8a 00                	mov    (%eax),%al
f011b333:	84 c0                	test   %al,%al
f011b335:	75 e4                	jne    f011b31b <strcpy+0xd>
		/* do nothing */;
	return ret;
f011b337:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011b33a:	c9                   	leave  
f011b33b:	c3                   	ret    

f011b33c <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f011b33c:	55                   	push   %ebp
f011b33d:	89 e5                	mov    %esp,%ebp
f011b33f:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f011b342:	8b 45 08             	mov    0x8(%ebp),%eax
f011b345:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f011b348:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011b34f:	eb 1f                	jmp    f011b370 <strncpy+0x34>
		*dst++ = *src;
f011b351:	8b 45 08             	mov    0x8(%ebp),%eax
f011b354:	8d 50 01             	lea    0x1(%eax),%edx
f011b357:	89 55 08             	mov    %edx,0x8(%ebp)
f011b35a:	8b 55 0c             	mov    0xc(%ebp),%edx
f011b35d:	8a 12                	mov    (%edx),%dl
f011b35f:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f011b361:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b364:	8a 00                	mov    (%eax),%al
f011b366:	84 c0                	test   %al,%al
f011b368:	74 03                	je     f011b36d <strncpy+0x31>
			src++;
f011b36a:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f011b36d:	ff 45 fc             	incl   -0x4(%ebp)
f011b370:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b373:	3b 45 10             	cmp    0x10(%ebp),%eax
f011b376:	72 d9                	jb     f011b351 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f011b378:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f011b37b:	c9                   	leave  
f011b37c:	c3                   	ret    

f011b37d <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f011b37d:	55                   	push   %ebp
f011b37e:	89 e5                	mov    %esp,%ebp
f011b380:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f011b383:	8b 45 08             	mov    0x8(%ebp),%eax
f011b386:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f011b389:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011b38d:	74 30                	je     f011b3bf <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f011b38f:	eb 16                	jmp    f011b3a7 <strlcpy+0x2a>
			*dst++ = *src++;
f011b391:	8b 45 08             	mov    0x8(%ebp),%eax
f011b394:	8d 50 01             	lea    0x1(%eax),%edx
f011b397:	89 55 08             	mov    %edx,0x8(%ebp)
f011b39a:	8b 55 0c             	mov    0xc(%ebp),%edx
f011b39d:	8d 4a 01             	lea    0x1(%edx),%ecx
f011b3a0:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f011b3a3:	8a 12                	mov    (%edx),%dl
f011b3a5:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f011b3a7:	ff 4d 10             	decl   0x10(%ebp)
f011b3aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011b3ae:	74 09                	je     f011b3b9 <strlcpy+0x3c>
f011b3b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b3b3:	8a 00                	mov    (%eax),%al
f011b3b5:	84 c0                	test   %al,%al
f011b3b7:	75 d8                	jne    f011b391 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f011b3b9:	8b 45 08             	mov    0x8(%ebp),%eax
f011b3bc:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f011b3bf:	8b 55 08             	mov    0x8(%ebp),%edx
f011b3c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b3c5:	29 c2                	sub    %eax,%edx
f011b3c7:	89 d0                	mov    %edx,%eax
}
f011b3c9:	c9                   	leave  
f011b3ca:	c3                   	ret    

f011b3cb <strcmp>:

int
strcmp(const char *p, const char *q)
{
f011b3cb:	55                   	push   %ebp
f011b3cc:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f011b3ce:	eb 06                	jmp    f011b3d6 <strcmp+0xb>
		p++, q++;
f011b3d0:	ff 45 08             	incl   0x8(%ebp)
f011b3d3:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f011b3d6:	8b 45 08             	mov    0x8(%ebp),%eax
f011b3d9:	8a 00                	mov    (%eax),%al
f011b3db:	84 c0                	test   %al,%al
f011b3dd:	74 0e                	je     f011b3ed <strcmp+0x22>
f011b3df:	8b 45 08             	mov    0x8(%ebp),%eax
f011b3e2:	8a 10                	mov    (%eax),%dl
f011b3e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b3e7:	8a 00                	mov    (%eax),%al
f011b3e9:	38 c2                	cmp    %al,%dl
f011b3eb:	74 e3                	je     f011b3d0 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f011b3ed:	8b 45 08             	mov    0x8(%ebp),%eax
f011b3f0:	8a 00                	mov    (%eax),%al
f011b3f2:	0f b6 d0             	movzbl %al,%edx
f011b3f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b3f8:	8a 00                	mov    (%eax),%al
f011b3fa:	0f b6 c0             	movzbl %al,%eax
f011b3fd:	29 c2                	sub    %eax,%edx
f011b3ff:	89 d0                	mov    %edx,%eax
}
f011b401:	5d                   	pop    %ebp
f011b402:	c3                   	ret    

f011b403 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f011b403:	55                   	push   %ebp
f011b404:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f011b406:	eb 09                	jmp    f011b411 <strncmp+0xe>
		n--, p++, q++;
f011b408:	ff 4d 10             	decl   0x10(%ebp)
f011b40b:	ff 45 08             	incl   0x8(%ebp)
f011b40e:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f011b411:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011b415:	74 17                	je     f011b42e <strncmp+0x2b>
f011b417:	8b 45 08             	mov    0x8(%ebp),%eax
f011b41a:	8a 00                	mov    (%eax),%al
f011b41c:	84 c0                	test   %al,%al
f011b41e:	74 0e                	je     f011b42e <strncmp+0x2b>
f011b420:	8b 45 08             	mov    0x8(%ebp),%eax
f011b423:	8a 10                	mov    (%eax),%dl
f011b425:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b428:	8a 00                	mov    (%eax),%al
f011b42a:	38 c2                	cmp    %al,%dl
f011b42c:	74 da                	je     f011b408 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f011b42e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011b432:	75 07                	jne    f011b43b <strncmp+0x38>
		return 0;
f011b434:	b8 00 00 00 00       	mov    $0x0,%eax
f011b439:	eb 14                	jmp    f011b44f <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f011b43b:	8b 45 08             	mov    0x8(%ebp),%eax
f011b43e:	8a 00                	mov    (%eax),%al
f011b440:	0f b6 d0             	movzbl %al,%edx
f011b443:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b446:	8a 00                	mov    (%eax),%al
f011b448:	0f b6 c0             	movzbl %al,%eax
f011b44b:	29 c2                	sub    %eax,%edx
f011b44d:	89 d0                	mov    %edx,%eax
}
f011b44f:	5d                   	pop    %ebp
f011b450:	c3                   	ret    

f011b451 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f011b451:	55                   	push   %ebp
f011b452:	89 e5                	mov    %esp,%ebp
f011b454:	83 ec 04             	sub    $0x4,%esp
f011b457:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b45a:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f011b45d:	eb 12                	jmp    f011b471 <strchr+0x20>
		if (*s == c)
f011b45f:	8b 45 08             	mov    0x8(%ebp),%eax
f011b462:	8a 00                	mov    (%eax),%al
f011b464:	3a 45 fc             	cmp    -0x4(%ebp),%al
f011b467:	75 05                	jne    f011b46e <strchr+0x1d>
			return (char *) s;
f011b469:	8b 45 08             	mov    0x8(%ebp),%eax
f011b46c:	eb 11                	jmp    f011b47f <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f011b46e:	ff 45 08             	incl   0x8(%ebp)
f011b471:	8b 45 08             	mov    0x8(%ebp),%eax
f011b474:	8a 00                	mov    (%eax),%al
f011b476:	84 c0                	test   %al,%al
f011b478:	75 e5                	jne    f011b45f <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f011b47a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011b47f:	c9                   	leave  
f011b480:	c3                   	ret    

f011b481 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f011b481:	55                   	push   %ebp
f011b482:	89 e5                	mov    %esp,%ebp
f011b484:	83 ec 04             	sub    $0x4,%esp
f011b487:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b48a:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f011b48d:	eb 0d                	jmp    f011b49c <strfind+0x1b>
		if (*s == c)
f011b48f:	8b 45 08             	mov    0x8(%ebp),%eax
f011b492:	8a 00                	mov    (%eax),%al
f011b494:	3a 45 fc             	cmp    -0x4(%ebp),%al
f011b497:	74 0e                	je     f011b4a7 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f011b499:	ff 45 08             	incl   0x8(%ebp)
f011b49c:	8b 45 08             	mov    0x8(%ebp),%eax
f011b49f:	8a 00                	mov    (%eax),%al
f011b4a1:	84 c0                	test   %al,%al
f011b4a3:	75 ea                	jne    f011b48f <strfind+0xe>
f011b4a5:	eb 01                	jmp    f011b4a8 <strfind+0x27>
		if (*s == c)
			break;
f011b4a7:	90                   	nop
	return (char *) s;
f011b4a8:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011b4ab:	c9                   	leave  
f011b4ac:	c3                   	ret    

f011b4ad <memset>:


void *
memset(void *v, int c, uint32 n)
{
f011b4ad:	55                   	push   %ebp
f011b4ae:	89 e5                	mov    %esp,%ebp
f011b4b0:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f011b4b3:	8b 45 08             	mov    0x8(%ebp),%eax
f011b4b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f011b4b9:	8b 45 10             	mov    0x10(%ebp),%eax
f011b4bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f011b4bf:	eb 0e                	jmp    f011b4cf <memset+0x22>
		*p++ = c;
f011b4c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b4c4:	8d 50 01             	lea    0x1(%eax),%edx
f011b4c7:	89 55 fc             	mov    %edx,-0x4(%ebp)
f011b4ca:	8b 55 0c             	mov    0xc(%ebp),%edx
f011b4cd:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f011b4cf:	ff 4d f8             	decl   -0x8(%ebp)
f011b4d2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f011b4d6:	79 e9                	jns    f011b4c1 <memset+0x14>
		*p++ = c;

	return v;
f011b4d8:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011b4db:	c9                   	leave  
f011b4dc:	c3                   	ret    

f011b4dd <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f011b4dd:	55                   	push   %ebp
f011b4de:	89 e5                	mov    %esp,%ebp
f011b4e0:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f011b4e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b4e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f011b4e9:	8b 45 08             	mov    0x8(%ebp),%eax
f011b4ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f011b4ef:	eb 16                	jmp    f011b507 <memcpy+0x2a>
		*d++ = *s++;
f011b4f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b4f4:	8d 50 01             	lea    0x1(%eax),%edx
f011b4f7:	89 55 f8             	mov    %edx,-0x8(%ebp)
f011b4fa:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011b4fd:	8d 4a 01             	lea    0x1(%edx),%ecx
f011b500:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f011b503:	8a 12                	mov    (%edx),%dl
f011b505:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f011b507:	8b 45 10             	mov    0x10(%ebp),%eax
f011b50a:	8d 50 ff             	lea    -0x1(%eax),%edx
f011b50d:	89 55 10             	mov    %edx,0x10(%ebp)
f011b510:	85 c0                	test   %eax,%eax
f011b512:	75 dd                	jne    f011b4f1 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f011b514:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011b517:	c9                   	leave  
f011b518:	c3                   	ret    

f011b519 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f011b519:	55                   	push   %ebp
f011b51a:	89 e5                	mov    %esp,%ebp
f011b51c:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f011b51f:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b522:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f011b525:	8b 45 08             	mov    0x8(%ebp),%eax
f011b528:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f011b52b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b52e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f011b531:	73 50                	jae    f011b583 <memmove+0x6a>
f011b533:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011b536:	8b 45 10             	mov    0x10(%ebp),%eax
f011b539:	01 d0                	add    %edx,%eax
f011b53b:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f011b53e:	76 43                	jbe    f011b583 <memmove+0x6a>
		s += n;
f011b540:	8b 45 10             	mov    0x10(%ebp),%eax
f011b543:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f011b546:	8b 45 10             	mov    0x10(%ebp),%eax
f011b549:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f011b54c:	eb 10                	jmp    f011b55e <memmove+0x45>
			*--d = *--s;
f011b54e:	ff 4d f8             	decl   -0x8(%ebp)
f011b551:	ff 4d fc             	decl   -0x4(%ebp)
f011b554:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b557:	8a 10                	mov    (%eax),%dl
f011b559:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b55c:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f011b55e:	8b 45 10             	mov    0x10(%ebp),%eax
f011b561:	8d 50 ff             	lea    -0x1(%eax),%edx
f011b564:	89 55 10             	mov    %edx,0x10(%ebp)
f011b567:	85 c0                	test   %eax,%eax
f011b569:	75 e3                	jne    f011b54e <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f011b56b:	eb 23                	jmp    f011b590 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f011b56d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b570:	8d 50 01             	lea    0x1(%eax),%edx
f011b573:	89 55 f8             	mov    %edx,-0x8(%ebp)
f011b576:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011b579:	8d 4a 01             	lea    0x1(%edx),%ecx
f011b57c:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f011b57f:	8a 12                	mov    (%edx),%dl
f011b581:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f011b583:	8b 45 10             	mov    0x10(%ebp),%eax
f011b586:	8d 50 ff             	lea    -0x1(%eax),%edx
f011b589:	89 55 10             	mov    %edx,0x10(%ebp)
f011b58c:	85 c0                	test   %eax,%eax
f011b58e:	75 dd                	jne    f011b56d <memmove+0x54>
			*d++ = *s++;

	return dst;
f011b590:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011b593:	c9                   	leave  
f011b594:	c3                   	ret    

f011b595 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f011b595:	55                   	push   %ebp
f011b596:	89 e5                	mov    %esp,%ebp
f011b598:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f011b59b:	8b 45 08             	mov    0x8(%ebp),%eax
f011b59e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f011b5a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b5a4:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f011b5a7:	eb 2a                	jmp    f011b5d3 <memcmp+0x3e>
		if (*s1 != *s2)
f011b5a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b5ac:	8a 10                	mov    (%eax),%dl
f011b5ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b5b1:	8a 00                	mov    (%eax),%al
f011b5b3:	38 c2                	cmp    %al,%dl
f011b5b5:	74 16                	je     f011b5cd <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f011b5b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b5ba:	8a 00                	mov    (%eax),%al
f011b5bc:	0f b6 d0             	movzbl %al,%edx
f011b5bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b5c2:	8a 00                	mov    (%eax),%al
f011b5c4:	0f b6 c0             	movzbl %al,%eax
f011b5c7:	29 c2                	sub    %eax,%edx
f011b5c9:	89 d0                	mov    %edx,%eax
f011b5cb:	eb 18                	jmp    f011b5e5 <memcmp+0x50>
		s1++, s2++;
f011b5cd:	ff 45 fc             	incl   -0x4(%ebp)
f011b5d0:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f011b5d3:	8b 45 10             	mov    0x10(%ebp),%eax
f011b5d6:	8d 50 ff             	lea    -0x1(%eax),%edx
f011b5d9:	89 55 10             	mov    %edx,0x10(%ebp)
f011b5dc:	85 c0                	test   %eax,%eax
f011b5de:	75 c9                	jne    f011b5a9 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f011b5e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011b5e5:	c9                   	leave  
f011b5e6:	c3                   	ret    

f011b5e7 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f011b5e7:	55                   	push   %ebp
f011b5e8:	89 e5                	mov    %esp,%ebp
f011b5ea:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f011b5ed:	8b 55 08             	mov    0x8(%ebp),%edx
f011b5f0:	8b 45 10             	mov    0x10(%ebp),%eax
f011b5f3:	01 d0                	add    %edx,%eax
f011b5f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f011b5f8:	eb 15                	jmp    f011b60f <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f011b5fa:	8b 45 08             	mov    0x8(%ebp),%eax
f011b5fd:	8a 00                	mov    (%eax),%al
f011b5ff:	0f b6 d0             	movzbl %al,%edx
f011b602:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b605:	0f b6 c0             	movzbl %al,%eax
f011b608:	39 c2                	cmp    %eax,%edx
f011b60a:	74 0d                	je     f011b619 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f011b60c:	ff 45 08             	incl   0x8(%ebp)
f011b60f:	8b 45 08             	mov    0x8(%ebp),%eax
f011b612:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f011b615:	72 e3                	jb     f011b5fa <memfind+0x13>
f011b617:	eb 01                	jmp    f011b61a <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f011b619:	90                   	nop
	return (void *) s;
f011b61a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011b61d:	c9                   	leave  
f011b61e:	c3                   	ret    

f011b61f <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f011b61f:	55                   	push   %ebp
f011b620:	89 e5                	mov    %esp,%ebp
f011b622:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f011b625:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f011b62c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f011b633:	eb 03                	jmp    f011b638 <strtol+0x19>
		s++;
f011b635:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f011b638:	8b 45 08             	mov    0x8(%ebp),%eax
f011b63b:	8a 00                	mov    (%eax),%al
f011b63d:	3c 20                	cmp    $0x20,%al
f011b63f:	74 f4                	je     f011b635 <strtol+0x16>
f011b641:	8b 45 08             	mov    0x8(%ebp),%eax
f011b644:	8a 00                	mov    (%eax),%al
f011b646:	3c 09                	cmp    $0x9,%al
f011b648:	74 eb                	je     f011b635 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f011b64a:	8b 45 08             	mov    0x8(%ebp),%eax
f011b64d:	8a 00                	mov    (%eax),%al
f011b64f:	3c 2b                	cmp    $0x2b,%al
f011b651:	75 05                	jne    f011b658 <strtol+0x39>
		s++;
f011b653:	ff 45 08             	incl   0x8(%ebp)
f011b656:	eb 13                	jmp    f011b66b <strtol+0x4c>
	else if (*s == '-')
f011b658:	8b 45 08             	mov    0x8(%ebp),%eax
f011b65b:	8a 00                	mov    (%eax),%al
f011b65d:	3c 2d                	cmp    $0x2d,%al
f011b65f:	75 0a                	jne    f011b66b <strtol+0x4c>
		s++, neg = 1;
f011b661:	ff 45 08             	incl   0x8(%ebp)
f011b664:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f011b66b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011b66f:	74 06                	je     f011b677 <strtol+0x58>
f011b671:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f011b675:	75 20                	jne    f011b697 <strtol+0x78>
f011b677:	8b 45 08             	mov    0x8(%ebp),%eax
f011b67a:	8a 00                	mov    (%eax),%al
f011b67c:	3c 30                	cmp    $0x30,%al
f011b67e:	75 17                	jne    f011b697 <strtol+0x78>
f011b680:	8b 45 08             	mov    0x8(%ebp),%eax
f011b683:	40                   	inc    %eax
f011b684:	8a 00                	mov    (%eax),%al
f011b686:	3c 78                	cmp    $0x78,%al
f011b688:	75 0d                	jne    f011b697 <strtol+0x78>
		s += 2, base = 16;
f011b68a:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f011b68e:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f011b695:	eb 28                	jmp    f011b6bf <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f011b697:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011b69b:	75 15                	jne    f011b6b2 <strtol+0x93>
f011b69d:	8b 45 08             	mov    0x8(%ebp),%eax
f011b6a0:	8a 00                	mov    (%eax),%al
f011b6a2:	3c 30                	cmp    $0x30,%al
f011b6a4:	75 0c                	jne    f011b6b2 <strtol+0x93>
		s++, base = 8;
f011b6a6:	ff 45 08             	incl   0x8(%ebp)
f011b6a9:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f011b6b0:	eb 0d                	jmp    f011b6bf <strtol+0xa0>
	else if (base == 0)
f011b6b2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011b6b6:	75 07                	jne    f011b6bf <strtol+0xa0>
		base = 10;
f011b6b8:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f011b6bf:	8b 45 08             	mov    0x8(%ebp),%eax
f011b6c2:	8a 00                	mov    (%eax),%al
f011b6c4:	3c 2f                	cmp    $0x2f,%al
f011b6c6:	7e 19                	jle    f011b6e1 <strtol+0xc2>
f011b6c8:	8b 45 08             	mov    0x8(%ebp),%eax
f011b6cb:	8a 00                	mov    (%eax),%al
f011b6cd:	3c 39                	cmp    $0x39,%al
f011b6cf:	7f 10                	jg     f011b6e1 <strtol+0xc2>
			dig = *s - '0';
f011b6d1:	8b 45 08             	mov    0x8(%ebp),%eax
f011b6d4:	8a 00                	mov    (%eax),%al
f011b6d6:	0f be c0             	movsbl %al,%eax
f011b6d9:	83 e8 30             	sub    $0x30,%eax
f011b6dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011b6df:	eb 42                	jmp    f011b723 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f011b6e1:	8b 45 08             	mov    0x8(%ebp),%eax
f011b6e4:	8a 00                	mov    (%eax),%al
f011b6e6:	3c 60                	cmp    $0x60,%al
f011b6e8:	7e 19                	jle    f011b703 <strtol+0xe4>
f011b6ea:	8b 45 08             	mov    0x8(%ebp),%eax
f011b6ed:	8a 00                	mov    (%eax),%al
f011b6ef:	3c 7a                	cmp    $0x7a,%al
f011b6f1:	7f 10                	jg     f011b703 <strtol+0xe4>
			dig = *s - 'a' + 10;
f011b6f3:	8b 45 08             	mov    0x8(%ebp),%eax
f011b6f6:	8a 00                	mov    (%eax),%al
f011b6f8:	0f be c0             	movsbl %al,%eax
f011b6fb:	83 e8 57             	sub    $0x57,%eax
f011b6fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011b701:	eb 20                	jmp    f011b723 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f011b703:	8b 45 08             	mov    0x8(%ebp),%eax
f011b706:	8a 00                	mov    (%eax),%al
f011b708:	3c 40                	cmp    $0x40,%al
f011b70a:	7e 39                	jle    f011b745 <strtol+0x126>
f011b70c:	8b 45 08             	mov    0x8(%ebp),%eax
f011b70f:	8a 00                	mov    (%eax),%al
f011b711:	3c 5a                	cmp    $0x5a,%al
f011b713:	7f 30                	jg     f011b745 <strtol+0x126>
			dig = *s - 'A' + 10;
f011b715:	8b 45 08             	mov    0x8(%ebp),%eax
f011b718:	8a 00                	mov    (%eax),%al
f011b71a:	0f be c0             	movsbl %al,%eax
f011b71d:	83 e8 37             	sub    $0x37,%eax
f011b720:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f011b723:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b726:	3b 45 10             	cmp    0x10(%ebp),%eax
f011b729:	7d 19                	jge    f011b744 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f011b72b:	ff 45 08             	incl   0x8(%ebp)
f011b72e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b731:	0f af 45 10          	imul   0x10(%ebp),%eax
f011b735:	89 c2                	mov    %eax,%edx
f011b737:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b73a:	01 d0                	add    %edx,%eax
f011b73c:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f011b73f:	e9 7b ff ff ff       	jmp    f011b6bf <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f011b744:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f011b745:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011b749:	74 08                	je     f011b753 <strtol+0x134>
		*endptr = (char *) s;
f011b74b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b74e:	8b 55 08             	mov    0x8(%ebp),%edx
f011b751:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f011b753:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011b757:	74 07                	je     f011b760 <strtol+0x141>
f011b759:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b75c:	f7 d8                	neg    %eax
f011b75e:	eb 03                	jmp    f011b763 <strtol+0x144>
f011b760:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f011b763:	c9                   	leave  
f011b764:	c3                   	ret    

f011b765 <ltostr>:

void
ltostr(long value, char *str)
{
f011b765:	55                   	push   %ebp
f011b766:	89 e5                	mov    %esp,%ebp
f011b768:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f011b76b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f011b772:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f011b779:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011b77d:	79 13                	jns    f011b792 <ltostr+0x2d>
	{
		neg = 1;
f011b77f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f011b786:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b789:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f011b78c:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f011b78f:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f011b792:	8b 45 08             	mov    0x8(%ebp),%eax
f011b795:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011b79a:	99                   	cltd   
f011b79b:	f7 f9                	idiv   %ecx
f011b79d:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f011b7a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b7a3:	8d 50 01             	lea    0x1(%eax),%edx
f011b7a6:	89 55 f8             	mov    %edx,-0x8(%ebp)
f011b7a9:	89 c2                	mov    %eax,%edx
f011b7ab:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b7ae:	01 d0                	add    %edx,%eax
f011b7b0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b7b3:	83 c2 30             	add    $0x30,%edx
f011b7b6:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f011b7b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f011b7bb:	b8 67 66 66 66       	mov    $0x66666667,%eax
f011b7c0:	f7 e9                	imul   %ecx
f011b7c2:	c1 fa 02             	sar    $0x2,%edx
f011b7c5:	89 c8                	mov    %ecx,%eax
f011b7c7:	c1 f8 1f             	sar    $0x1f,%eax
f011b7ca:	29 c2                	sub    %eax,%edx
f011b7cc:	89 d0                	mov    %edx,%eax
f011b7ce:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f011b7d1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f011b7d4:	b8 67 66 66 66       	mov    $0x66666667,%eax
f011b7d9:	f7 e9                	imul   %ecx
f011b7db:	c1 fa 02             	sar    $0x2,%edx
f011b7de:	89 c8                	mov    %ecx,%eax
f011b7e0:	c1 f8 1f             	sar    $0x1f,%eax
f011b7e3:	29 c2                	sub    %eax,%edx
f011b7e5:	89 d0                	mov    %edx,%eax
f011b7e7:	c1 e0 02             	shl    $0x2,%eax
f011b7ea:	01 d0                	add    %edx,%eax
f011b7ec:	01 c0                	add    %eax,%eax
f011b7ee:	29 c1                	sub    %eax,%ecx
f011b7f0:	89 ca                	mov    %ecx,%edx
f011b7f2:	85 d2                	test   %edx,%edx
f011b7f4:	75 9c                	jne    f011b792 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f011b7f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f011b7fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b800:	48                   	dec    %eax
f011b801:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f011b804:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011b808:	74 3d                	je     f011b847 <ltostr+0xe2>
		start = 1 ;
f011b80a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f011b811:	eb 34                	jmp    f011b847 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f011b813:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b816:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b819:	01 d0                	add    %edx,%eax
f011b81b:	8a 00                	mov    (%eax),%al
f011b81d:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f011b820:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b823:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b826:	01 c2                	add    %eax,%edx
f011b828:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f011b82b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b82e:	01 c8                	add    %ecx,%eax
f011b830:	8a 00                	mov    (%eax),%al
f011b832:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f011b834:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011b837:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b83a:	01 c2                	add    %eax,%edx
f011b83c:	8a 45 eb             	mov    -0x15(%ebp),%al
f011b83f:	88 02                	mov    %al,(%edx)
		start++ ;
f011b841:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f011b844:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f011b847:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b84a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b84d:	7c c4                	jl     f011b813 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f011b84f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f011b852:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b855:	01 d0                	add    %edx,%eax
f011b857:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f011b85a:	90                   	nop
f011b85b:	c9                   	leave  
f011b85c:	c3                   	ret    

f011b85d <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f011b85d:	55                   	push   %ebp
f011b85e:	89 e5                	mov    %esp,%ebp
f011b860:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f011b863:	ff 75 08             	pushl  0x8(%ebp)
f011b866:	e8 54 fa ff ff       	call   f011b2bf <strlen>
f011b86b:	83 c4 04             	add    $0x4,%esp
f011b86e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f011b871:	ff 75 0c             	pushl  0xc(%ebp)
f011b874:	e8 46 fa ff ff       	call   f011b2bf <strlen>
f011b879:	83 c4 04             	add    $0x4,%esp
f011b87c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f011b87f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f011b886:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011b88d:	eb 17                	jmp    f011b8a6 <strcconcat+0x49>
		final[s] = str1[s] ;
f011b88f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011b892:	8b 45 10             	mov    0x10(%ebp),%eax
f011b895:	01 c2                	add    %eax,%edx
f011b897:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f011b89a:	8b 45 08             	mov    0x8(%ebp),%eax
f011b89d:	01 c8                	add    %ecx,%eax
f011b89f:	8a 00                	mov    (%eax),%al
f011b8a1:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f011b8a3:	ff 45 fc             	incl   -0x4(%ebp)
f011b8a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b8a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b8ac:	7c e1                	jl     f011b88f <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f011b8ae:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f011b8b5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f011b8bc:	eb 1f                	jmp    f011b8dd <strcconcat+0x80>
		final[s++] = str2[i] ;
f011b8be:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b8c1:	8d 50 01             	lea    0x1(%eax),%edx
f011b8c4:	89 55 fc             	mov    %edx,-0x4(%ebp)
f011b8c7:	89 c2                	mov    %eax,%edx
f011b8c9:	8b 45 10             	mov    0x10(%ebp),%eax
f011b8cc:	01 c2                	add    %eax,%edx
f011b8ce:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f011b8d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f011b8d4:	01 c8                	add    %ecx,%eax
f011b8d6:	8a 00                	mov    (%eax),%al
f011b8d8:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f011b8da:	ff 45 f8             	incl   -0x8(%ebp)
f011b8dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b8e0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b8e3:	7c d9                	jl     f011b8be <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f011b8e5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011b8e8:	8b 45 10             	mov    0x10(%ebp),%eax
f011b8eb:	01 d0                	add    %edx,%eax
f011b8ed:	c6 00 00             	movb   $0x0,(%eax)
}
f011b8f0:	90                   	nop
f011b8f1:	c9                   	leave  
f011b8f2:	c3                   	ret    

f011b8f3 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f011b8f3:	55                   	push   %ebp
f011b8f4:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f011b8f6:	8b 45 14             	mov    0x14(%ebp),%eax
f011b8f9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f011b8ff:	8b 45 14             	mov    0x14(%ebp),%eax
f011b902:	8b 00                	mov    (%eax),%eax
f011b904:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011b90b:	8b 45 10             	mov    0x10(%ebp),%eax
f011b90e:	01 d0                	add    %edx,%eax
f011b910:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f011b916:	eb 0c                	jmp    f011b924 <strsplit+0x31>
			*string++ = 0;
f011b918:	8b 45 08             	mov    0x8(%ebp),%eax
f011b91b:	8d 50 01             	lea    0x1(%eax),%edx
f011b91e:	89 55 08             	mov    %edx,0x8(%ebp)
f011b921:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f011b924:	8b 45 08             	mov    0x8(%ebp),%eax
f011b927:	8a 00                	mov    (%eax),%al
f011b929:	84 c0                	test   %al,%al
f011b92b:	74 18                	je     f011b945 <strsplit+0x52>
f011b92d:	8b 45 08             	mov    0x8(%ebp),%eax
f011b930:	8a 00                	mov    (%eax),%al
f011b932:	0f be c0             	movsbl %al,%eax
f011b935:	50                   	push   %eax
f011b936:	ff 75 0c             	pushl  0xc(%ebp)
f011b939:	e8 13 fb ff ff       	call   f011b451 <strchr>
f011b93e:	83 c4 08             	add    $0x8,%esp
f011b941:	85 c0                	test   %eax,%eax
f011b943:	75 d3                	jne    f011b918 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f011b945:	8b 45 08             	mov    0x8(%ebp),%eax
f011b948:	8a 00                	mov    (%eax),%al
f011b94a:	84 c0                	test   %al,%al
f011b94c:	74 5a                	je     f011b9a8 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f011b94e:	8b 45 14             	mov    0x14(%ebp),%eax
f011b951:	8b 00                	mov    (%eax),%eax
f011b953:	83 f8 0f             	cmp    $0xf,%eax
f011b956:	75 07                	jne    f011b95f <strsplit+0x6c>
		{
			return 0;
f011b958:	b8 00 00 00 00       	mov    $0x0,%eax
f011b95d:	eb 66                	jmp    f011b9c5 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f011b95f:	8b 45 14             	mov    0x14(%ebp),%eax
f011b962:	8b 00                	mov    (%eax),%eax
f011b964:	8d 48 01             	lea    0x1(%eax),%ecx
f011b967:	8b 55 14             	mov    0x14(%ebp),%edx
f011b96a:	89 0a                	mov    %ecx,(%edx)
f011b96c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011b973:	8b 45 10             	mov    0x10(%ebp),%eax
f011b976:	01 c2                	add    %eax,%edx
f011b978:	8b 45 08             	mov    0x8(%ebp),%eax
f011b97b:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f011b97d:	eb 03                	jmp    f011b982 <strsplit+0x8f>
			string++;
f011b97f:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f011b982:	8b 45 08             	mov    0x8(%ebp),%eax
f011b985:	8a 00                	mov    (%eax),%al
f011b987:	84 c0                	test   %al,%al
f011b989:	74 8b                	je     f011b916 <strsplit+0x23>
f011b98b:	8b 45 08             	mov    0x8(%ebp),%eax
f011b98e:	8a 00                	mov    (%eax),%al
f011b990:	0f be c0             	movsbl %al,%eax
f011b993:	50                   	push   %eax
f011b994:	ff 75 0c             	pushl  0xc(%ebp)
f011b997:	e8 b5 fa ff ff       	call   f011b451 <strchr>
f011b99c:	83 c4 08             	add    $0x8,%esp
f011b99f:	85 c0                	test   %eax,%eax
f011b9a1:	74 dc                	je     f011b97f <strsplit+0x8c>
			string++;
	}
f011b9a3:	e9 6e ff ff ff       	jmp    f011b916 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f011b9a8:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f011b9a9:	8b 45 14             	mov    0x14(%ebp),%eax
f011b9ac:	8b 00                	mov    (%eax),%eax
f011b9ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011b9b5:	8b 45 10             	mov    0x10(%ebp),%eax
f011b9b8:	01 d0                	add    %edx,%eax
f011b9ba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f011b9c0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011b9c5:	c9                   	leave  
f011b9c6:	c3                   	ret    

f011b9c7 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f011b9c7:	55                   	push   %ebp
f011b9c8:	89 e5                	mov    %esp,%ebp
f011b9ca:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f011b9cd:	90                   	nop
f011b9ce:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f011b9d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011b9d8:	89 c2                	mov    %eax,%edx
f011b9da:	ec                   	in     (%dx),%al
f011b9db:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f011b9de:	8a 45 f7             	mov    -0x9(%ebp),%al
f011b9e1:	0f b6 c0             	movzbl %al,%eax
f011b9e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011b9e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b9ea:	25 c0 00 00 00       	and    $0xc0,%eax
f011b9ef:	83 f8 40             	cmp    $0x40,%eax
f011b9f2:	75 da                	jne    f011b9ce <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f011b9f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011b9f8:	74 11                	je     f011ba0b <ide_wait_ready+0x44>
f011b9fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011b9fd:	83 e0 21             	and    $0x21,%eax
f011ba00:	85 c0                	test   %eax,%eax
f011ba02:	74 07                	je     f011ba0b <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f011ba04:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f011ba09:	eb 05                	jmp    f011ba10 <ide_wait_ready+0x49>
	}
	return 0;
f011ba0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011ba10:	c9                   	leave  
f011ba11:	c3                   	ret    

f011ba12 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f011ba12:	55                   	push   %ebp
f011ba13:	89 e5                	mov    %esp,%ebp
f011ba15:	57                   	push   %edi
f011ba16:	53                   	push   %ebx
f011ba17:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f011ba1a:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f011ba21:	76 16                	jbe    f011ba39 <ide_read+0x27>
f011ba23:	68 83 0c 12 f0       	push   $0xf0120c83
f011ba28:	68 90 0c 12 f0       	push   $0xf0120c90
f011ba2d:	6a 25                	push   $0x25
f011ba2f:	68 a5 0c 12 f0       	push   $0xf0120ca5
f011ba34:	e8 5a 47 fe ff       	call   f0100193 <_panic>

	ide_wait_ready(0);
f011ba39:	83 ec 0c             	sub    $0xc,%esp
f011ba3c:	6a 00                	push   $0x0
f011ba3e:	e8 84 ff ff ff       	call   f011b9c7 <ide_wait_ready>
f011ba43:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f011ba46:	8b 45 10             	mov    0x10(%ebp),%eax
f011ba49:	0f b6 c0             	movzbl %al,%eax
f011ba4c:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f011ba53:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f011ba56:	8a 45 d2             	mov    -0x2e(%ebp),%al
f011ba59:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011ba5c:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f011ba5d:	8b 45 08             	mov    0x8(%ebp),%eax
f011ba60:	0f b6 c0             	movzbl %al,%eax
f011ba63:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f011ba6a:	88 45 d3             	mov    %al,-0x2d(%ebp)
f011ba6d:	8a 45 d3             	mov    -0x2d(%ebp),%al
f011ba70:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ba73:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f011ba74:	8b 45 08             	mov    0x8(%ebp),%eax
f011ba77:	c1 e8 08             	shr    $0x8,%eax
f011ba7a:	0f b6 c0             	movzbl %al,%eax
f011ba7d:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f011ba84:	88 45 d4             	mov    %al,-0x2c(%ebp)
f011ba87:	8a 45 d4             	mov    -0x2c(%ebp),%al
f011ba8a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011ba8d:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f011ba8e:	8b 45 08             	mov    0x8(%ebp),%eax
f011ba91:	c1 e8 10             	shr    $0x10,%eax
f011ba94:	0f b6 c0             	movzbl %al,%eax
f011ba97:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f011ba9e:	88 45 d5             	mov    %al,-0x2b(%ebp)
f011baa1:	8a 45 d5             	mov    -0x2b(%ebp),%al
f011baa4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011baa7:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f011baa8:	a1 0c 2a 34 f0       	mov    0xf0342a0c,%eax
f011baad:	83 e0 01             	and    $0x1,%eax
f011bab0:	c1 e0 04             	shl    $0x4,%eax
f011bab3:	88 c2                	mov    %al,%dl
f011bab5:	8b 45 08             	mov    0x8(%ebp),%eax
f011bab8:	c1 e8 18             	shr    $0x18,%eax
f011babb:	83 e0 0f             	and    $0xf,%eax
f011babe:	09 d0                	or     %edx,%eax
f011bac0:	83 c8 e0             	or     $0xffffffe0,%eax
f011bac3:	0f b6 c0             	movzbl %al,%eax
f011bac6:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f011bacd:	88 45 d6             	mov    %al,-0x2a(%ebp)
f011bad0:	8a 45 d6             	mov    -0x2a(%ebp),%al
f011bad3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011bad6:	ee                   	out    %al,(%dx)
f011bad7:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f011bade:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f011bae2:	8a 45 d7             	mov    -0x29(%ebp),%al
f011bae5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011bae8:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f011bae9:	eb 55                	jmp    f011bb40 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f011baeb:	83 ec 0c             	sub    $0xc,%esp
f011baee:	6a 01                	push   $0x1
f011baf0:	e8 d2 fe ff ff       	call   f011b9c7 <ide_wait_ready>
f011baf5:	83 c4 10             	add    $0x10,%esp
f011baf8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011bafb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011baff:	79 05                	jns    f011bb06 <ide_read+0xf4>
			return r;
f011bb01:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bb04:	eb 45                	jmp    f011bb4b <ide_read+0x139>
f011bb06:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f011bb0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f011bb10:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011bb13:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f011bb1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bb1d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011bb20:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bb23:	89 cb                	mov    %ecx,%ebx
f011bb25:	89 df                	mov    %ebx,%edi
f011bb27:	89 c1                	mov    %eax,%ecx
f011bb29:	fc                   	cld    
f011bb2a:	f2 6d                	repnz insl (%dx),%es:(%edi)
f011bb2c:	89 c8                	mov    %ecx,%eax
f011bb2e:	89 fb                	mov    %edi,%ebx
f011bb30:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011bb33:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f011bb36:	ff 4d 10             	decl   0x10(%ebp)
f011bb39:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011bb40:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011bb44:	75 a5                	jne    f011baeb <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f011bb46:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011bb4b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bb4e:	5b                   	pop    %ebx
f011bb4f:	5f                   	pop    %edi
f011bb50:	5d                   	pop    %ebp
f011bb51:	c3                   	ret    

f011bb52 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f011bb52:	55                   	push   %ebp
f011bb53:	89 e5                	mov    %esp,%ebp
f011bb55:	56                   	push   %esi
f011bb56:	53                   	push   %ebx
f011bb57:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f011bb5a:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f011bb61:	76 16                	jbe    f011bb79 <ide_write+0x27>
f011bb63:	68 83 0c 12 f0       	push   $0xf0120c83
f011bb68:	68 90 0c 12 f0       	push   $0xf0120c90
f011bb6d:	6a 3e                	push   $0x3e
f011bb6f:	68 a5 0c 12 f0       	push   $0xf0120ca5
f011bb74:	e8 1a 46 fe ff       	call   f0100193 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f011bb79:	83 ec 0c             	sub    $0xc,%esp
f011bb7c:	6a 00                	push   $0x0
f011bb7e:	e8 44 fe ff ff       	call   f011b9c7 <ide_wait_ready>
f011bb83:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f011bb86:	8b 45 10             	mov    0x10(%ebp),%eax
f011bb89:	0f b6 c0             	movzbl %al,%eax
f011bb8c:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f011bb93:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f011bb96:	8a 45 d2             	mov    -0x2e(%ebp),%al
f011bb99:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011bb9c:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f011bb9d:	8b 45 08             	mov    0x8(%ebp),%eax
f011bba0:	0f b6 c0             	movzbl %al,%eax
f011bba3:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f011bbaa:	88 45 d3             	mov    %al,-0x2d(%ebp)
f011bbad:	8a 45 d3             	mov    -0x2d(%ebp),%al
f011bbb0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bbb3:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f011bbb4:	8b 45 08             	mov    0x8(%ebp),%eax
f011bbb7:	c1 e8 08             	shr    $0x8,%eax
f011bbba:	0f b6 c0             	movzbl %al,%eax
f011bbbd:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f011bbc4:	88 45 d4             	mov    %al,-0x2c(%ebp)
f011bbc7:	8a 45 d4             	mov    -0x2c(%ebp),%al
f011bbca:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011bbcd:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f011bbce:	8b 45 08             	mov    0x8(%ebp),%eax
f011bbd1:	c1 e8 10             	shr    $0x10,%eax
f011bbd4:	0f b6 c0             	movzbl %al,%eax
f011bbd7:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f011bbde:	88 45 d5             	mov    %al,-0x2b(%ebp)
f011bbe1:	8a 45 d5             	mov    -0x2b(%ebp),%al
f011bbe4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bbe7:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f011bbe8:	a1 0c 2a 34 f0       	mov    0xf0342a0c,%eax
f011bbed:	83 e0 01             	and    $0x1,%eax
f011bbf0:	c1 e0 04             	shl    $0x4,%eax
f011bbf3:	88 c2                	mov    %al,%dl
f011bbf5:	8b 45 08             	mov    0x8(%ebp),%eax
f011bbf8:	c1 e8 18             	shr    $0x18,%eax
f011bbfb:	83 e0 0f             	and    $0xf,%eax
f011bbfe:	09 d0                	or     %edx,%eax
f011bc00:	83 c8 e0             	or     $0xffffffe0,%eax
f011bc03:	0f b6 c0             	movzbl %al,%eax
f011bc06:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f011bc0d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f011bc10:	8a 45 d6             	mov    -0x2a(%ebp),%al
f011bc13:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011bc16:	ee                   	out    %al,(%dx)
f011bc17:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f011bc1e:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f011bc22:	8a 45 d7             	mov    -0x29(%ebp),%al
f011bc25:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011bc28:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011bc29:	eb 55                	jmp    f011bc80 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f011bc2b:	83 ec 0c             	sub    $0xc,%esp
f011bc2e:	6a 01                	push   $0x1
f011bc30:	e8 92 fd ff ff       	call   f011b9c7 <ide_wait_ready>
f011bc35:	83 c4 10             	add    $0x10,%esp
f011bc38:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011bc3b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011bc3f:	79 05                	jns    f011bc46 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f011bc41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bc44:	eb 45                	jmp    f011bc8b <ide_write+0x139>
f011bc46:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f011bc4d:	8b 45 0c             	mov    0xc(%ebp),%eax
f011bc50:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011bc53:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f011bc5a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bc5d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011bc60:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bc63:	89 cb                	mov    %ecx,%ebx
f011bc65:	89 de                	mov    %ebx,%esi
f011bc67:	89 c1                	mov    %eax,%ecx
f011bc69:	fc                   	cld    
f011bc6a:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f011bc6c:	89 c8                	mov    %ecx,%eax
f011bc6e:	89 f3                	mov    %esi,%ebx
f011bc70:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011bc73:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011bc76:	ff 4d 10             	decl   0x10(%ebp)
f011bc79:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011bc80:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011bc84:	75 a5                	jne    f011bc2b <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f011bc86:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011bc8b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bc8e:	5b                   	pop    %ebx
f011bc8f:	5e                   	pop    %esi
f011bc90:	5d                   	pop    %ebp
f011bc91:	c3                   	ret    

f011bc92 <scarce_memory>:
#include <kern/sched.h>
#include <kern/kclock.h>
#include <kern/utilities.h>

void scarce_memory()
{
f011bc92:	55                   	push   %ebp
f011bc93:	89 e5                	mov    %esp,%ebp
f011bc95:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f011bc98:	a1 e0 89 3a f0       	mov    0xf03a89e0,%eax
f011bc9d:	ba 64 00 00 00       	mov    $0x64,%edx
f011bca2:	29 c2                	sub    %eax,%edx
f011bca4:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f011bca9:	0f af c2             	imul   %edx,%eax
f011bcac:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011bcb1:	f7 e2                	mul    %edx
f011bcb3:	89 d0                	mov    %edx,%eax
f011bcb5:	c1 e8 05             	shr    $0x5,%eax
f011bcb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f011bcbb:	a1 e0 89 3a f0       	mov    0xf03a89e0,%eax
f011bcc0:	ba 64 00 00 00       	mov    $0x64,%edx
f011bcc5:	29 c2                	sub    %eax,%edx
f011bcc7:	a1 d0 f5 3a f0       	mov    0xf03af5d0,%eax
f011bccc:	89 d1                	mov    %edx,%ecx
f011bcce:	0f af c8             	imul   %eax,%ecx
f011bcd1:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011bcd6:	f7 e1                	mul    %ecx
f011bcd8:	c1 ea 05             	shr    $0x5,%edx
f011bcdb:	89 d0                	mov    %edx,%eax
f011bcdd:	c1 e0 02             	shl    $0x2,%eax
f011bce0:	01 d0                	add    %edx,%eax
f011bce2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011bce9:	01 d0                	add    %edx,%eax
f011bceb:	c1 e0 02             	shl    $0x2,%eax
f011bcee:	29 c1                	sub    %eax,%ecx
f011bcf0:	89 ca                	mov    %ecx,%edx
f011bcf2:	85 d2                	test   %edx,%edx
f011bcf4:	74 03                	je     f011bcf9 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f011bcf6:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f011bcf9:	8b 15 d0 f5 3a f0    	mov    0xf03af5d0,%edx
f011bcff:	a1 60 da 3c f0       	mov    0xf03cda60,%eax
f011bd04:	29 c2                	sub    %eax,%edx
f011bd06:	89 d0                	mov    %edx,%eax
f011bd08:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f011bd0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011bd0e:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bd11:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f011bd14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f011bd1b:	eb 12                	jmp    f011bd2f <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f011bd1d:	83 ec 0c             	sub    $0xc,%esp
f011bd20:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f011bd23:	50                   	push   %eax
f011bd24:	e8 c3 7f fe ff       	call   f0103cec <allocate_frame>
f011bd29:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f011bd2c:	ff 45 f0             	incl   -0x10(%ebp)
f011bd2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bd32:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bd35:	76 e6                	jbe    f011bd1d <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f011bd37:	90                   	nop
f011bd38:	c9                   	leave  
f011bd39:	c3                   	ret    

f011bd3a <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f011bd3a:	55                   	push   %ebp
f011bd3b:	89 e5                	mov    %esp,%ebp
f011bd3d:	83 ec 60             	sub    $0x60,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f011bd40:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f011bd47:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f011bd4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f011bd55:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f011bd59:	0f 85 77 02 00 00    	jne    f011bfd6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x29c>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f011bd5f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd66:	e9 14 01 00 00       	jmp    f011be7f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x145>
		{
			struct Env * ptr_ready_env = NULL;
f011bd6b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f011bd72:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bd75:	c1 e0 04             	shl    $0x4,%eax
f011bd78:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f011bd7d:	8b 00                	mov    (%eax),%eax
f011bd7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011bd82:	e9 b5 00 00 00       	jmp    f011be3c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x102>
			{
				int j=0, counter=0;
f011bd87:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011bd8e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				for(;j<ptr_ready_env->page_WS_max_size; j++) if(ptr_ready_env->ptr_pageWorkingSet[j].empty == 0) counter++;
f011bd95:	eb 21                	jmp    f011bdb8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x7e>
f011bd97:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f011bd9a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011bd9d:	89 d0                	mov    %edx,%eax
f011bd9f:	c1 e0 02             	shl    $0x2,%eax
f011bda2:	01 d0                	add    %edx,%eax
f011bda4:	c1 e0 02             	shl    $0x2,%eax
f011bda7:	01 c8                	add    %ecx,%eax
f011bda9:	83 c0 7c             	add    $0x7c,%eax
f011bdac:	8a 00                	mov    (%eax),%al
f011bdae:	84 c0                	test   %al,%al
f011bdb0:	75 03                	jne    f011bdb5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x7b>
f011bdb2:	ff 45 e4             	incl   -0x1c(%ebp)
f011bdb5:	ff 45 e8             	incl   -0x18(%ebp)
f011bdb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bdbb:	8b 50 74             	mov    0x74(%eax),%edx
f011bdbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bdc1:	39 c2                	cmp    %eax,%edx
f011bdc3:	77 d2                	ja     f011bd97 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x5d>
				int num_of_pages_in_WS = counter;
f011bdc5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bdc8:	89 45 b8             	mov    %eax,-0x48(%ebp)

				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011bdcb:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011bdd0:	8b 90 f4 52 00 00    	mov    0x52f4(%eax),%edx
f011bdd6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bdd9:	0f af c2             	imul   %edx,%eax
f011bddc:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011bde1:	f7 e2                	mul    %edx
f011bde3:	89 d0                	mov    %edx,%eax
f011bde5:	c1 e8 05             	shr    $0x5,%eax
f011bde8:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011bdeb:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011bdf0:	8b 90 f4 52 00 00    	mov    0x52f4(%eax),%edx
f011bdf6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bdf9:	89 d1                	mov    %edx,%ecx
f011bdfb:	0f af c8             	imul   %eax,%ecx
f011bdfe:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011be03:	f7 e1                	mul    %ecx
f011be05:	c1 ea 05             	shr    $0x5,%edx
f011be08:	89 d0                	mov    %edx,%eax
f011be0a:	c1 e0 02             	shl    $0x2,%eax
f011be0d:	01 d0                	add    %edx,%eax
f011be0f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011be16:	01 d0                	add    %edx,%eax
f011be18:	c1 e0 02             	shl    $0x2,%eax
f011be1b:	29 c1                	sub    %eax,%ecx
f011be1d:	89 ca                	mov    %ecx,%edx
f011be1f:	85 d2                	test   %edx,%edx
f011be21:	74 03                	je     f011be26 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xec>
					num_of_pages_to_be_removed++;
f011be23:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f011be26:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011be29:	01 45 fc             	add    %eax,-0x4(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f011be2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011be2f:	c1 e0 04             	shl    $0x4,%eax
f011be32:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f011be37:	8b 00                	mov    (%eax),%eax
f011be39:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011be3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011be40:	74 08                	je     f011be4a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x110>
f011be42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011be45:	8b 40 44             	mov    0x44(%eax),%eax
f011be48:	eb 05                	jmp    f011be4f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x115>
f011be4a:	b8 00 00 00 00       	mov    $0x0,%eax
f011be4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011be52:	c1 e2 04             	shl    $0x4,%edx
f011be55:	81 c2 48 2a 34 f0    	add    $0xf0342a48,%edx
f011be5b:	89 02                	mov    %eax,(%edx)
f011be5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011be60:	c1 e0 04             	shl    $0x4,%eax
f011be63:	05 48 2a 34 f0       	add    $0xf0342a48,%eax
f011be68:	8b 00                	mov    (%eax),%eax
f011be6a:	85 c0                	test   %eax,%eax
f011be6c:	0f 85 15 ff ff ff    	jne    f011bd87 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f011be72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011be76:	0f 85 0b ff ff ff    	jne    f011bd87 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f011be7c:	ff 45 f0             	incl   -0x10(%ebp)
f011be7f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011be84:	0f b6 c0             	movzbl %al,%eax
f011be87:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011be8a:	0f 8f db fe ff ff    	jg     f011bd6b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f011be90:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f011be97:	a1 e4 89 3a f0       	mov    0xf03a89e4,%eax
f011be9c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011be9f:	eb 52                	jmp    f011bef3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1b9>
		{
			int j=0, counter=0;
f011bea1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011bea8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
			for(;j<ptr_exit_env->page_WS_max_size; j++) if(ptr_exit_env->ptr_pageWorkingSet[j].empty == 0) counter++;
f011beaf:	eb 21                	jmp    f011bed2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x198>
f011beb1:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f011beb4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011beb7:	89 d0                	mov    %edx,%eax
f011beb9:	c1 e0 02             	shl    $0x2,%eax
f011bebc:	01 d0                	add    %edx,%eax
f011bebe:	c1 e0 02             	shl    $0x2,%eax
f011bec1:	01 c8                	add    %ecx,%eax
f011bec3:	83 c0 7c             	add    $0x7c,%eax
f011bec6:	8a 00                	mov    (%eax),%al
f011bec8:	84 c0                	test   %al,%al
f011beca:	75 03                	jne    f011becf <calc_no_pages_tobe_removed_from_ready_exit_queues+0x195>
f011becc:	ff 45 d4             	incl   -0x2c(%ebp)
f011becf:	ff 45 d8             	incl   -0x28(%ebp)
f011bed2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bed5:	8b 50 74             	mov    0x74(%eax),%edx
f011bed8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011bedb:	39 c2                	cmp    %eax,%edx
f011bedd:	77 d2                	ja     f011beb1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x177>
			int num_of_pages_in_WS = counter;
f011bedf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bee2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

			no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
f011bee5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bee8:	01 45 f8             	add    %eax,-0x8(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f011beeb:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f011bef0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011bef3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011bef7:	74 08                	je     f011bf01 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1c7>
f011bef9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011befc:	8b 40 44             	mov    0x44(%eax),%eax
f011beff:	eb 05                	jmp    f011bf06 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1cc>
f011bf01:	b8 00 00 00 00       	mov    $0x0,%eax
f011bf06:	a3 ec 89 3a f0       	mov    %eax,0xf03a89ec
f011bf0b:	a1 ec 89 3a f0       	mov    0xf03a89ec,%eax
f011bf10:	85 c0                	test   %eax,%eax
f011bf12:	75 8d                	jne    f011bea1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x167>
f011bf14:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011bf18:	75 87                	jne    f011bea1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x167>
			int num_of_pages_in_WS = counter;

			no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
		}

		if(curenv != NULL)
f011bf1a:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011bf1f:	85 c0                	test   %eax,%eax
f011bf21:	0f 84 59 01 00 00    	je     f011c080 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x346>
		{
			int j=0, counter=0;
f011bf27:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011bf2e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
			for(;j<curenv->page_WS_max_size; j++) if(curenv->ptr_pageWorkingSet[j].empty == 0) counter++;
f011bf35:	eb 24                	jmp    f011bf5b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x221>
f011bf37:	8b 0d 50 21 34 f0    	mov    0xf0342150,%ecx
f011bf3d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011bf40:	89 d0                	mov    %edx,%eax
f011bf42:	c1 e0 02             	shl    $0x2,%eax
f011bf45:	01 d0                	add    %edx,%eax
f011bf47:	c1 e0 02             	shl    $0x2,%eax
f011bf4a:	01 c8                	add    %ecx,%eax
f011bf4c:	83 c0 7c             	add    $0x7c,%eax
f011bf4f:	8a 00                	mov    (%eax),%al
f011bf51:	84 c0                	test   %al,%al
f011bf53:	75 03                	jne    f011bf58 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x21e>
f011bf55:	ff 45 cc             	incl   -0x34(%ebp)
f011bf58:	ff 45 d0             	incl   -0x30(%ebp)
f011bf5b:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011bf60:	8b 50 74             	mov    0x74(%eax),%edx
f011bf63:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bf66:	39 c2                	cmp    %eax,%edx
f011bf68:	77 cd                	ja     f011bf37 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1fd>
			int num_of_pages_in_WS = counter;
f011bf6a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bf6d:	89 45 b0             	mov    %eax,-0x50(%ebp)

			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011bf70:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011bf75:	8b 90 f4 52 00 00    	mov    0x52f4(%eax),%edx
f011bf7b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bf7e:	0f af c2             	imul   %edx,%eax
f011bf81:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011bf86:	f7 e2                	mul    %edx
f011bf88:	89 d0                	mov    %edx,%eax
f011bf8a:	c1 e8 05             	shr    $0x5,%eax
f011bf8d:	89 45 c8             	mov    %eax,-0x38(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011bf90:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011bf95:	8b 90 f4 52 00 00    	mov    0x52f4(%eax),%edx
f011bf9b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bf9e:	89 d1                	mov    %edx,%ecx
f011bfa0:	0f af c8             	imul   %eax,%ecx
f011bfa3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011bfa8:	f7 e1                	mul    %ecx
f011bfaa:	c1 ea 05             	shr    $0x5,%edx
f011bfad:	89 d0                	mov    %edx,%eax
f011bfaf:	c1 e0 02             	shl    $0x2,%eax
f011bfb2:	01 d0                	add    %edx,%eax
f011bfb4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011bfbb:	01 d0                	add    %edx,%eax
f011bfbd:	c1 e0 02             	shl    $0x2,%eax
f011bfc0:	29 c1                	sub    %eax,%ecx
f011bfc2:	89 ca                	mov    %ecx,%edx
f011bfc4:	85 d2                	test   %edx,%edx
f011bfc6:	74 03                	je     f011bfcb <calc_no_pages_tobe_removed_from_ready_exit_queues+0x291>
				num_of_pages_to_be_removed++;
f011bfc8:	ff 45 c8             	incl   -0x38(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011bfcb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bfce:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011bfd1:	e9 aa 00 00 00       	jmp    f011c080 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x346>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int j=0, counter=0;
f011bfd6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011bfdd:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
		for(;j<curenv->page_WS_max_size; j++) if(curenv->ptr_pageWorkingSet[j].empty == 0) counter++;
f011bfe4:	eb 24                	jmp    f011c00a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2d0>
f011bfe6:	8b 0d 50 21 34 f0    	mov    0xf0342150,%ecx
f011bfec:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011bfef:	89 d0                	mov    %edx,%eax
f011bff1:	c1 e0 02             	shl    $0x2,%eax
f011bff4:	01 d0                	add    %edx,%eax
f011bff6:	c1 e0 02             	shl    $0x2,%eax
f011bff9:	01 c8                	add    %ecx,%eax
f011bffb:	83 c0 7c             	add    $0x7c,%eax
f011bffe:	8a 00                	mov    (%eax),%al
f011c000:	84 c0                	test   %al,%al
f011c002:	75 03                	jne    f011c007 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2cd>
f011c004:	ff 45 c0             	incl   -0x40(%ebp)
f011c007:	ff 45 c4             	incl   -0x3c(%ebp)
f011c00a:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011c00f:	8b 50 74             	mov    0x74(%eax),%edx
f011c012:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c015:	39 c2                	cmp    %eax,%edx
f011c017:	77 cd                	ja     f011bfe6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2ac>
		int num_of_pages_in_WS = counter;
f011c019:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c01c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011c01f:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011c024:	8b 90 f4 52 00 00    	mov    0x52f4(%eax),%edx
f011c02a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c02d:	0f af c2             	imul   %edx,%eax
f011c030:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011c035:	f7 e2                	mul    %edx
f011c037:	89 d0                	mov    %edx,%eax
f011c039:	c1 e8 05             	shr    $0x5,%eax
f011c03c:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011c03f:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011c044:	8b 90 f4 52 00 00    	mov    0x52f4(%eax),%edx
f011c04a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011c04d:	89 d1                	mov    %edx,%ecx
f011c04f:	0f af c8             	imul   %eax,%ecx
f011c052:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011c057:	f7 e1                	mul    %ecx
f011c059:	c1 ea 05             	shr    $0x5,%edx
f011c05c:	89 d0                	mov    %edx,%eax
f011c05e:	c1 e0 02             	shl    $0x2,%eax
f011c061:	01 d0                	add    %edx,%eax
f011c063:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011c06a:	01 d0                	add    %edx,%eax
f011c06c:	c1 e0 02             	shl    $0x2,%eax
f011c06f:	29 c1                	sub    %eax,%ecx
f011c071:	89 ca                	mov    %ecx,%edx
f011c073:	85 d2                	test   %edx,%edx
f011c075:	74 03                	je     f011c07a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x340>
			num_of_pages_to_be_removed++;
f011c077:	ff 45 bc             	incl   -0x44(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011c07a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c07d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f011c080:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c083:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011c086:	01 c2                	add    %eax,%edx
f011c088:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011c08b:	01 d0                	add    %edx,%eax
}
f011c08d:	c9                   	leave  
f011c08e:	c3                   	ret    

f011c08f <schenv>:


void schenv()
{
f011c08f:	55                   	push   %ebp
f011c090:	89 e5                	mov    %esp,%ebp
f011c092:	83 ec 10             	sub    $0x10,%esp
	__nl = 0;
f011c095:	c6 05 18 f6 3a f0 00 	movb   $0x0,0xf03af618
	__ne = NULL;
f011c09c:	c7 05 e4 f5 3a f0 00 	movl   $0x0,0xf03af5e4
f011c0a3:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f011c0a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011c0ad:	eb 30                	jmp    f011c0df <schenv+0x50>
	{
		if (LIST_SIZE(&(env_ready_queues[i])))
f011c0af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011c0b2:	c1 e0 04             	shl    $0x4,%eax
f011c0b5:	05 4c 2a 34 f0       	add    $0xf0342a4c,%eax
f011c0ba:	8b 00                	mov    (%eax),%eax
f011c0bc:	85 c0                	test   %eax,%eax
f011c0be:	74 1c                	je     f011c0dc <schenv+0x4d>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f011c0c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011c0c3:	c1 e0 04             	shl    $0x4,%eax
f011c0c6:	05 44 2a 34 f0       	add    $0xf0342a44,%eax
f011c0cb:	8b 00                	mov    (%eax),%eax
f011c0cd:	a3 e4 f5 3a f0       	mov    %eax,0xf03af5e4
			__nl = i;
f011c0d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011c0d5:	a2 18 f6 3a f0       	mov    %al,0xf03af618
			break;
f011c0da:	eb 10                	jmp    f011c0ec <schenv+0x5d>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f011c0dc:	ff 45 fc             	incl   -0x4(%ebp)
f011c0df:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011c0e4:	0f b6 c0             	movzbl %al,%eax
f011c0e7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f011c0ea:	7f c3                	jg     f011c0af <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f011c0ec:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011c0f1:	85 c0                	test   %eax,%eax
f011c0f3:	0f 84 86 00 00 00    	je     f011c17f <schenv+0xf0>
	{
		if (__ne != NULL)
f011c0f9:	a1 e4 f5 3a f0       	mov    0xf03af5e4,%eax
f011c0fe:	85 c0                	test   %eax,%eax
f011c100:	74 4b                	je     f011c14d <schenv+0xbe>
		{
			if ((__pl + 1) < __nl)
f011c102:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c107:	0f b6 c0             	movzbl %al,%eax
f011c10a:	8d 50 01             	lea    0x1(%eax),%edx
f011c10d:	a0 18 f6 3a f0       	mov    0xf03af618,%al
f011c112:	0f b6 c0             	movzbl %al,%eax
f011c115:	39 c2                	cmp    %eax,%edx
f011c117:	7d 66                	jge    f011c17f <schenv+0xf0>
			{
				__ne = curenv;
f011c119:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011c11e:	a3 e4 f5 3a f0       	mov    %eax,0xf03af5e4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011c123:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c128:	0f b6 c0             	movzbl %al,%eax
f011c12b:	8a 15 08 f6 3a f0    	mov    0xf03af608,%dl
f011c131:	0f b6 d2             	movzbl %dl,%edx
f011c134:	4a                   	dec    %edx
f011c135:	39 d0                	cmp    %edx,%eax
f011c137:	7d 08                	jge    f011c141 <schenv+0xb2>
f011c139:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c13e:	40                   	inc    %eax
f011c13f:	eb 05                	jmp    f011c146 <schenv+0xb7>
f011c141:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c146:	a2 18 f6 3a f0       	mov    %al,0xf03af618
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f011c14b:	eb 32                	jmp    f011c17f <schenv+0xf0>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f011c14d:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011c152:	a3 e4 f5 3a f0       	mov    %eax,0xf03af5e4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011c157:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c15c:	0f b6 c0             	movzbl %al,%eax
f011c15f:	8a 15 08 f6 3a f0    	mov    0xf03af608,%dl
f011c165:	0f b6 d2             	movzbl %dl,%edx
f011c168:	4a                   	dec    %edx
f011c169:	39 d0                	cmp    %edx,%eax
f011c16b:	7d 08                	jge    f011c175 <schenv+0xe6>
f011c16d:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c172:	40                   	inc    %eax
f011c173:	eb 05                	jmp    f011c17a <schenv+0xeb>
f011c175:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c17a:	a2 18 f6 3a f0       	mov    %al,0xf03af618
		}
	}
}
f011c17f:	90                   	nop
f011c180:	c9                   	leave  
f011c181:	c3                   	ret    

f011c182 <chksch>:

void chksch(uint8 onoff)
{
f011c182:	55                   	push   %ebp
f011c183:	89 e5                	mov    %esp,%ebp
f011c185:	83 ec 04             	sub    $0x4,%esp
f011c188:	8b 45 08             	mov    0x8(%ebp),%eax
f011c18b:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f011c18e:	c7 05 14 f6 3a f0 00 	movl   $0x0,0xf03af614
f011c195:	00 00 00 
	__ne = NULL;
f011c198:	c7 05 e4 f5 3a f0 00 	movl   $0x0,0xf03af5e4
f011c19f:	00 00 00 
	__pl = 0 ;
f011c1a2:	c6 05 20 2a 34 f0 00 	movb   $0x0,0xf0342a20
	__nl = 0 ;
f011c1a9:	c6 05 18 f6 3a f0 00 	movb   $0x0,0xf03af618
	__chkstatus = onoff;
f011c1b0:	8a 45 fc             	mov    -0x4(%ebp),%al
f011c1b3:	a2 e0 f5 3a f0       	mov    %al,0xf03af5e0
}
f011c1b8:	90                   	nop
f011c1b9:	c9                   	leave  
f011c1ba:	c3                   	ret    

f011c1bb <chk1>:
void chk1()
{
f011c1bb:	55                   	push   %ebp
f011c1bc:	89 e5                	mov    %esp,%ebp
	if (__chkstatus == 0)
f011c1be:	a0 e0 f5 3a f0       	mov    0xf03af5e0,%al
f011c1c3:	84 c0                	test   %al,%al
f011c1c5:	74 2b                	je     f011c1f2 <chk1+0x37>
		return ;
	__pe = curenv;
f011c1c7:	a1 50 21 34 f0       	mov    0xf0342150,%eax
f011c1cc:	a3 14 f6 3a f0       	mov    %eax,0xf03af614
	__pl = __nl ;
f011c1d1:	a0 18 f6 3a f0       	mov    0xf03af618,%al
f011c1d6:	a2 20 2a 34 f0       	mov    %al,0xf0342a20
	if (__pe == NULL)
f011c1db:	a1 14 f6 3a f0       	mov    0xf03af614,%eax
f011c1e0:	85 c0                	test   %eax,%eax
f011c1e2:	75 07                	jne    f011c1eb <chk1+0x30>
	{
		__pl = 0;
f011c1e4:	c6 05 20 2a 34 f0 00 	movb   $0x0,0xf0342a20
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f011c1eb:	e8 9f fe ff ff       	call   f011c08f <schenv>
f011c1f0:	eb 01                	jmp    f011c1f3 <chk1+0x38>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f011c1f2:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f011c1f3:	5d                   	pop    %ebp
f011c1f4:	c3                   	ret    

f011c1f5 <chk2>:
void chk2(struct Env* __se)
{
f011c1f5:	55                   	push   %ebp
f011c1f6:	89 e5                	mov    %esp,%ebp
f011c1f8:	53                   	push   %ebx
f011c1f9:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f011c1fc:	a0 e0 f5 3a f0       	mov    0xf03af5e0,%al
f011c201:	84 c0                	test   %al,%al
f011c203:	0f 84 35 02 00 00    	je     f011c43e <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f011c209:	a1 e4 f5 3a f0       	mov    0xf03af5e4,%eax
f011c20e:	39 45 08             	cmp    %eax,0x8(%ebp)
f011c211:	74 19                	je     f011c22c <chk2+0x37>
f011c213:	68 b0 0c 12 f0       	push   $0xf0120cb0
f011c218:	68 bd 0c 12 f0       	push   $0xf0120cbd
f011c21d:	68 9b 00 00 00       	push   $0x9b
f011c222:	68 d2 0c 12 f0       	push   $0xf0120cd2
f011c227:	e8 d6 3f fe ff       	call   f0100202 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f011c22c:	a1 e4 f5 3a f0       	mov    0xf03af5e4,%eax
f011c231:	85 c0                	test   %eax,%eax
f011c233:	0f 84 1b 01 00 00    	je     f011c354 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f011c239:	a0 18 f6 3a f0       	mov    0xf03af618,%al
f011c23e:	0f b6 c0             	movzbl %al,%eax
f011c241:	8a 80 d4 f5 3a f0    	mov    -0xfc50a2c(%eax),%al
f011c247:	0f b6 d8             	movzbl %al,%ebx
f011c24a:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f011c24f:	99                   	cltd   
f011c250:	f7 fb                	idiv   %ebx
f011c252:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f011c258:	a0 18 f6 3a f0       	mov    0xf03af618,%al
f011c25d:	0f b6 c0             	movzbl %al,%eax
f011c260:	8a 80 d4 f5 3a f0    	mov    -0xfc50a2c(%eax),%al
f011c266:	0f b6 d8             	movzbl %al,%ebx
f011c269:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f011c26e:	99                   	cltd   
f011c26f:	f7 fb                	idiv   %ebx
f011c271:	89 c3                	mov    %eax,%ebx
f011c273:	89 c8                	mov    %ecx,%eax
f011c275:	99                   	cltd   
f011c276:	f7 fb                	idiv   %ebx
f011c278:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f011c27c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011c280:	83 e0 01             	and    $0x1,%eax
f011c283:	66 85 c0             	test   %ax,%ax
f011c286:	74 07                	je     f011c28f <chk2+0x9a>
f011c288:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011c28c:	40                   	inc    %eax
f011c28d:	eb 04                	jmp    f011c293 <chk2+0x9e>
f011c28f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011c293:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f011c297:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f011c29b:	89 d0                	mov    %edx,%eax
f011c29d:	c1 e0 02             	shl    $0x2,%eax
f011c2a0:	01 d0                	add    %edx,%eax
f011c2a2:	01 c0                	add    %eax,%eax
f011c2a4:	01 d0                	add    %edx,%eax
f011c2a6:	c1 e0 02             	shl    $0x2,%eax
f011c2a9:	01 d0                	add    %edx,%eax
f011c2ab:	01 c0                	add    %eax,%eax
f011c2ad:	89 c1                	mov    %eax,%ecx
f011c2af:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011c2b4:	f7 e9                	imul   %ecx
f011c2b6:	c1 fa 05             	sar    $0x5,%edx
f011c2b9:	89 c8                	mov    %ecx,%eax
f011c2bb:	c1 f8 1f             	sar    $0x1f,%eax
f011c2be:	29 c2                	sub    %eax,%edx
f011c2c0:	89 d0                	mov    %edx,%eax
f011c2c2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f011c2c6:	e8 cb ae fe ff       	call   f0107196 <kclock_read_cnt0>
f011c2cb:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f011c2cf:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011c2d3:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f011c2d7:	76 0a                	jbe    f011c2e3 <chk2+0xee>
f011c2d9:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011c2dd:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011c2e1:	76 19                	jbe    f011c2fc <chk2+0x107>
f011c2e3:	68 e4 0c 12 f0       	push   $0xf0120ce4
f011c2e8:	68 bd 0c 12 f0       	push   $0xf0120cbd
f011c2ed:	68 a5 00 00 00       	push   $0xa5
f011c2f2:	68 d2 0c 12 f0       	push   $0xf0120cd2
f011c2f7:	e8 06 3f fe ff       	call   f0100202 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f011c2fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c303:	eb 42                	jmp    f011c347 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f011c305:	a1 e4 f5 3a f0       	mov    0xf03af5e4,%eax
f011c30a:	8b 40 4c             	mov    0x4c(%eax),%eax
f011c30d:	89 c2                	mov    %eax,%edx
f011c30f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c312:	c1 e0 04             	shl    $0x4,%eax
f011c315:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f011c31a:	83 ec 08             	sub    $0x8,%esp
f011c31d:	52                   	push   %edx
f011c31e:	50                   	push   %eax
f011c31f:	e8 c1 e5 fe ff       	call   f010a8e5 <find_env_in_queue>
f011c324:	83 c4 10             	add    $0x10,%esp
f011c327:	85 c0                	test   %eax,%eax
f011c329:	74 19                	je     f011c344 <chk2+0x14f>
f011c32b:	68 08 0d 12 f0       	push   $0xf0120d08
f011c330:	68 bd 0c 12 f0       	push   $0xf0120cbd
f011c335:	68 a9 00 00 00       	push   $0xa9
f011c33a:	68 d2 0c 12 f0       	push   $0xf0120cd2
f011c33f:	e8 be 3e fe ff       	call   f0100202 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f011c344:	ff 45 f4             	incl   -0xc(%ebp)
f011c347:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011c34c:	0f b6 c0             	movzbl %al,%eax
f011c34f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c352:	7f b1                	jg     f011c305 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f011c354:	a1 14 f6 3a f0       	mov    0xf03af614,%eax
f011c359:	85 c0                	test   %eax,%eax
f011c35b:	0f 84 de 00 00 00    	je     f011c43f <chk2+0x24a>
f011c361:	8b 15 14 f6 3a f0    	mov    0xf03af614,%edx
f011c367:	a1 e4 f5 3a f0       	mov    0xf03af5e4,%eax
f011c36c:	39 c2                	cmp    %eax,%edx
f011c36e:	0f 84 cb 00 00 00    	je     f011c43f <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f011c374:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c379:	0f b6 c0             	movzbl %al,%eax
f011c37c:	8a 15 08 f6 3a f0    	mov    0xf03af608,%dl
f011c382:	0f b6 d2             	movzbl %dl,%edx
f011c385:	4a                   	dec    %edx
f011c386:	39 d0                	cmp    %edx,%eax
f011c388:	74 08                	je     f011c392 <chk2+0x19d>
f011c38a:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c38f:	40                   	inc    %eax
f011c390:	eb 05                	jmp    f011c397 <chk2+0x1a2>
f011c392:	a0 20 2a 34 f0       	mov    0xf0342a20,%al
f011c397:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f011c39a:	a1 14 f6 3a f0       	mov    0xf03af614,%eax
f011c39f:	8b 40 4c             	mov    0x4c(%eax),%eax
f011c3a2:	89 c2                	mov    %eax,%edx
f011c3a4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f011c3a8:	c1 e0 04             	shl    $0x4,%eax
f011c3ab:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f011c3b0:	83 ec 08             	sub    $0x8,%esp
f011c3b3:	52                   	push   %edx
f011c3b4:	50                   	push   %eax
f011c3b5:	e8 2b e5 fe ff       	call   f010a8e5 <find_env_in_queue>
f011c3ba:	83 c4 10             	add    $0x10,%esp
f011c3bd:	85 c0                	test   %eax,%eax
f011c3bf:	75 19                	jne    f011c3da <chk2+0x1e5>
f011c3c1:	68 48 0d 12 f0       	push   $0xf0120d48
f011c3c6:	68 bd 0c 12 f0       	push   $0xf0120cbd
f011c3cb:	68 af 00 00 00       	push   $0xaf
f011c3d0:	68 d2 0c 12 f0       	push   $0xf0120cd2
f011c3d5:	e8 28 3e fe ff       	call   f0100202 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f011c3da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c3e1:	eb 4c                	jmp    f011c42f <chk2+0x23a>
		{
			if (i == __tl) continue;
f011c3e3:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f011c3e7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c3ea:	74 3f                	je     f011c42b <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f011c3ec:	a1 14 f6 3a f0       	mov    0xf03af614,%eax
f011c3f1:	8b 40 4c             	mov    0x4c(%eax),%eax
f011c3f4:	89 c2                	mov    %eax,%edx
f011c3f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011c3f9:	c1 e0 04             	shl    $0x4,%eax
f011c3fc:	05 40 2a 34 f0       	add    $0xf0342a40,%eax
f011c401:	83 ec 08             	sub    $0x8,%esp
f011c404:	52                   	push   %edx
f011c405:	50                   	push   %eax
f011c406:	e8 da e4 fe ff       	call   f010a8e5 <find_env_in_queue>
f011c40b:	83 c4 10             	add    $0x10,%esp
f011c40e:	85 c0                	test   %eax,%eax
f011c410:	74 1a                	je     f011c42c <chk2+0x237>
f011c412:	68 8c 0d 12 f0       	push   $0xf0120d8c
f011c417:	68 bd 0c 12 f0       	push   $0xf0120cbd
f011c41c:	68 b3 00 00 00       	push   $0xb3
f011c421:	68 d2 0c 12 f0       	push   $0xf0120cd2
f011c426:	e8 d7 3d fe ff       	call   f0100202 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f011c42b:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f011c42c:	ff 45 f0             	incl   -0x10(%ebp)
f011c42f:	a0 08 f6 3a f0       	mov    0xf03af608,%al
f011c434:	0f b6 c0             	movzbl %al,%eax
f011c437:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c43a:	7f a7                	jg     f011c3e3 <chk2+0x1ee>
f011c43c:	eb 01                	jmp    f011c43f <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f011c43e:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f011c43f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011c442:	c9                   	leave  
f011c443:	c3                   	ret    

f011c444 <set_program_priority>:
#include <kern/memory_manager.h>
#include <kern/kheap.h>
#include <kern/file_manager.h>

void set_program_priority(struct Env* env, int priority)
{
f011c444:	55                   	push   %ebp
f011c445:	89 e5                	mov    %esp,%ebp
f011c447:	83 ec 08             	sub    $0x8,%esp
	panic("set_program_priority() is not implemented yet...!!");
f011c44a:	83 ec 04             	sub    $0x4,%esp
f011c44d:	68 cc 0d 12 f0       	push   $0xf0120dcc
f011c452:	6a 0b                	push   $0xb
f011c454:	68 ff 0d 12 f0       	push   $0xf0120dff
f011c459:	e8 35 3d fe ff       	call   f0100193 <_panic>
f011c45e:	66 90                	xchg   %ax,%ax

f011c460 <__udivdi3>:
f011c460:	55                   	push   %ebp
f011c461:	57                   	push   %edi
f011c462:	56                   	push   %esi
f011c463:	53                   	push   %ebx
f011c464:	83 ec 1c             	sub    $0x1c,%esp
f011c467:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f011c46b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f011c46f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f011c473:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f011c477:	89 ca                	mov    %ecx,%edx
f011c479:	89 f8                	mov    %edi,%eax
f011c47b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f011c47f:	85 f6                	test   %esi,%esi
f011c481:	75 2d                	jne    f011c4b0 <__udivdi3+0x50>
f011c483:	39 cf                	cmp    %ecx,%edi
f011c485:	77 65                	ja     f011c4ec <__udivdi3+0x8c>
f011c487:	89 fd                	mov    %edi,%ebp
f011c489:	85 ff                	test   %edi,%edi
f011c48b:	75 0b                	jne    f011c498 <__udivdi3+0x38>
f011c48d:	b8 01 00 00 00       	mov    $0x1,%eax
f011c492:	31 d2                	xor    %edx,%edx
f011c494:	f7 f7                	div    %edi
f011c496:	89 c5                	mov    %eax,%ebp
f011c498:	31 d2                	xor    %edx,%edx
f011c49a:	89 c8                	mov    %ecx,%eax
f011c49c:	f7 f5                	div    %ebp
f011c49e:	89 c1                	mov    %eax,%ecx
f011c4a0:	89 d8                	mov    %ebx,%eax
f011c4a2:	f7 f5                	div    %ebp
f011c4a4:	89 cf                	mov    %ecx,%edi
f011c4a6:	89 fa                	mov    %edi,%edx
f011c4a8:	83 c4 1c             	add    $0x1c,%esp
f011c4ab:	5b                   	pop    %ebx
f011c4ac:	5e                   	pop    %esi
f011c4ad:	5f                   	pop    %edi
f011c4ae:	5d                   	pop    %ebp
f011c4af:	c3                   	ret    
f011c4b0:	39 ce                	cmp    %ecx,%esi
f011c4b2:	77 28                	ja     f011c4dc <__udivdi3+0x7c>
f011c4b4:	0f bd fe             	bsr    %esi,%edi
f011c4b7:	83 f7 1f             	xor    $0x1f,%edi
f011c4ba:	75 40                	jne    f011c4fc <__udivdi3+0x9c>
f011c4bc:	39 ce                	cmp    %ecx,%esi
f011c4be:	72 0a                	jb     f011c4ca <__udivdi3+0x6a>
f011c4c0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f011c4c4:	0f 87 9e 00 00 00    	ja     f011c568 <__udivdi3+0x108>
f011c4ca:	b8 01 00 00 00       	mov    $0x1,%eax
f011c4cf:	89 fa                	mov    %edi,%edx
f011c4d1:	83 c4 1c             	add    $0x1c,%esp
f011c4d4:	5b                   	pop    %ebx
f011c4d5:	5e                   	pop    %esi
f011c4d6:	5f                   	pop    %edi
f011c4d7:	5d                   	pop    %ebp
f011c4d8:	c3                   	ret    
f011c4d9:	8d 76 00             	lea    0x0(%esi),%esi
f011c4dc:	31 ff                	xor    %edi,%edi
f011c4de:	31 c0                	xor    %eax,%eax
f011c4e0:	89 fa                	mov    %edi,%edx
f011c4e2:	83 c4 1c             	add    $0x1c,%esp
f011c4e5:	5b                   	pop    %ebx
f011c4e6:	5e                   	pop    %esi
f011c4e7:	5f                   	pop    %edi
f011c4e8:	5d                   	pop    %ebp
f011c4e9:	c3                   	ret    
f011c4ea:	66 90                	xchg   %ax,%ax
f011c4ec:	89 d8                	mov    %ebx,%eax
f011c4ee:	f7 f7                	div    %edi
f011c4f0:	31 ff                	xor    %edi,%edi
f011c4f2:	89 fa                	mov    %edi,%edx
f011c4f4:	83 c4 1c             	add    $0x1c,%esp
f011c4f7:	5b                   	pop    %ebx
f011c4f8:	5e                   	pop    %esi
f011c4f9:	5f                   	pop    %edi
f011c4fa:	5d                   	pop    %ebp
f011c4fb:	c3                   	ret    
f011c4fc:	bd 20 00 00 00       	mov    $0x20,%ebp
f011c501:	89 eb                	mov    %ebp,%ebx
f011c503:	29 fb                	sub    %edi,%ebx
f011c505:	89 f9                	mov    %edi,%ecx
f011c507:	d3 e6                	shl    %cl,%esi
f011c509:	89 c5                	mov    %eax,%ebp
f011c50b:	88 d9                	mov    %bl,%cl
f011c50d:	d3 ed                	shr    %cl,%ebp
f011c50f:	89 e9                	mov    %ebp,%ecx
f011c511:	09 f1                	or     %esi,%ecx
f011c513:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f011c517:	89 f9                	mov    %edi,%ecx
f011c519:	d3 e0                	shl    %cl,%eax
f011c51b:	89 c5                	mov    %eax,%ebp
f011c51d:	89 d6                	mov    %edx,%esi
f011c51f:	88 d9                	mov    %bl,%cl
f011c521:	d3 ee                	shr    %cl,%esi
f011c523:	89 f9                	mov    %edi,%ecx
f011c525:	d3 e2                	shl    %cl,%edx
f011c527:	8b 44 24 08          	mov    0x8(%esp),%eax
f011c52b:	88 d9                	mov    %bl,%cl
f011c52d:	d3 e8                	shr    %cl,%eax
f011c52f:	09 c2                	or     %eax,%edx
f011c531:	89 d0                	mov    %edx,%eax
f011c533:	89 f2                	mov    %esi,%edx
f011c535:	f7 74 24 0c          	divl   0xc(%esp)
f011c539:	89 d6                	mov    %edx,%esi
f011c53b:	89 c3                	mov    %eax,%ebx
f011c53d:	f7 e5                	mul    %ebp
f011c53f:	39 d6                	cmp    %edx,%esi
f011c541:	72 19                	jb     f011c55c <__udivdi3+0xfc>
f011c543:	74 0b                	je     f011c550 <__udivdi3+0xf0>
f011c545:	89 d8                	mov    %ebx,%eax
f011c547:	31 ff                	xor    %edi,%edi
f011c549:	e9 58 ff ff ff       	jmp    f011c4a6 <__udivdi3+0x46>
f011c54e:	66 90                	xchg   %ax,%ax
f011c550:	8b 54 24 08          	mov    0x8(%esp),%edx
f011c554:	89 f9                	mov    %edi,%ecx
f011c556:	d3 e2                	shl    %cl,%edx
f011c558:	39 c2                	cmp    %eax,%edx
f011c55a:	73 e9                	jae    f011c545 <__udivdi3+0xe5>
f011c55c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f011c55f:	31 ff                	xor    %edi,%edi
f011c561:	e9 40 ff ff ff       	jmp    f011c4a6 <__udivdi3+0x46>
f011c566:	66 90                	xchg   %ax,%ax
f011c568:	31 c0                	xor    %eax,%eax
f011c56a:	e9 37 ff ff ff       	jmp    f011c4a6 <__udivdi3+0x46>
f011c56f:	90                   	nop

f011c570 <__umoddi3>:
f011c570:	55                   	push   %ebp
f011c571:	57                   	push   %edi
f011c572:	56                   	push   %esi
f011c573:	53                   	push   %ebx
f011c574:	83 ec 1c             	sub    $0x1c,%esp
f011c577:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f011c57b:	8b 74 24 34          	mov    0x34(%esp),%esi
f011c57f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f011c583:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f011c587:	89 44 24 0c          	mov    %eax,0xc(%esp)
f011c58b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f011c58f:	89 f3                	mov    %esi,%ebx
f011c591:	89 fa                	mov    %edi,%edx
f011c593:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f011c597:	89 34 24             	mov    %esi,(%esp)
f011c59a:	85 c0                	test   %eax,%eax
f011c59c:	75 1a                	jne    f011c5b8 <__umoddi3+0x48>
f011c59e:	39 f7                	cmp    %esi,%edi
f011c5a0:	0f 86 a2 00 00 00    	jbe    f011c648 <__umoddi3+0xd8>
f011c5a6:	89 c8                	mov    %ecx,%eax
f011c5a8:	89 f2                	mov    %esi,%edx
f011c5aa:	f7 f7                	div    %edi
f011c5ac:	89 d0                	mov    %edx,%eax
f011c5ae:	31 d2                	xor    %edx,%edx
f011c5b0:	83 c4 1c             	add    $0x1c,%esp
f011c5b3:	5b                   	pop    %ebx
f011c5b4:	5e                   	pop    %esi
f011c5b5:	5f                   	pop    %edi
f011c5b6:	5d                   	pop    %ebp
f011c5b7:	c3                   	ret    
f011c5b8:	39 f0                	cmp    %esi,%eax
f011c5ba:	0f 87 ac 00 00 00    	ja     f011c66c <__umoddi3+0xfc>
f011c5c0:	0f bd e8             	bsr    %eax,%ebp
f011c5c3:	83 f5 1f             	xor    $0x1f,%ebp
f011c5c6:	0f 84 ac 00 00 00    	je     f011c678 <__umoddi3+0x108>
f011c5cc:	bf 20 00 00 00       	mov    $0x20,%edi
f011c5d1:	29 ef                	sub    %ebp,%edi
f011c5d3:	89 fe                	mov    %edi,%esi
f011c5d5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f011c5d9:	89 e9                	mov    %ebp,%ecx
f011c5db:	d3 e0                	shl    %cl,%eax
f011c5dd:	89 d7                	mov    %edx,%edi
f011c5df:	89 f1                	mov    %esi,%ecx
f011c5e1:	d3 ef                	shr    %cl,%edi
f011c5e3:	09 c7                	or     %eax,%edi
f011c5e5:	89 e9                	mov    %ebp,%ecx
f011c5e7:	d3 e2                	shl    %cl,%edx
f011c5e9:	89 14 24             	mov    %edx,(%esp)
f011c5ec:	89 d8                	mov    %ebx,%eax
f011c5ee:	d3 e0                	shl    %cl,%eax
f011c5f0:	89 c2                	mov    %eax,%edx
f011c5f2:	8b 44 24 08          	mov    0x8(%esp),%eax
f011c5f6:	d3 e0                	shl    %cl,%eax
f011c5f8:	89 44 24 04          	mov    %eax,0x4(%esp)
f011c5fc:	8b 44 24 08          	mov    0x8(%esp),%eax
f011c600:	89 f1                	mov    %esi,%ecx
f011c602:	d3 e8                	shr    %cl,%eax
f011c604:	09 d0                	or     %edx,%eax
f011c606:	d3 eb                	shr    %cl,%ebx
f011c608:	89 da                	mov    %ebx,%edx
f011c60a:	f7 f7                	div    %edi
f011c60c:	89 d3                	mov    %edx,%ebx
f011c60e:	f7 24 24             	mull   (%esp)
f011c611:	89 c6                	mov    %eax,%esi
f011c613:	89 d1                	mov    %edx,%ecx
f011c615:	39 d3                	cmp    %edx,%ebx
f011c617:	0f 82 87 00 00 00    	jb     f011c6a4 <__umoddi3+0x134>
f011c61d:	0f 84 91 00 00 00    	je     f011c6b4 <__umoddi3+0x144>
f011c623:	8b 54 24 04          	mov    0x4(%esp),%edx
f011c627:	29 f2                	sub    %esi,%edx
f011c629:	19 cb                	sbb    %ecx,%ebx
f011c62b:	89 d8                	mov    %ebx,%eax
f011c62d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f011c631:	d3 e0                	shl    %cl,%eax
f011c633:	89 e9                	mov    %ebp,%ecx
f011c635:	d3 ea                	shr    %cl,%edx
f011c637:	09 d0                	or     %edx,%eax
f011c639:	89 e9                	mov    %ebp,%ecx
f011c63b:	d3 eb                	shr    %cl,%ebx
f011c63d:	89 da                	mov    %ebx,%edx
f011c63f:	83 c4 1c             	add    $0x1c,%esp
f011c642:	5b                   	pop    %ebx
f011c643:	5e                   	pop    %esi
f011c644:	5f                   	pop    %edi
f011c645:	5d                   	pop    %ebp
f011c646:	c3                   	ret    
f011c647:	90                   	nop
f011c648:	89 fd                	mov    %edi,%ebp
f011c64a:	85 ff                	test   %edi,%edi
f011c64c:	75 0b                	jne    f011c659 <__umoddi3+0xe9>
f011c64e:	b8 01 00 00 00       	mov    $0x1,%eax
f011c653:	31 d2                	xor    %edx,%edx
f011c655:	f7 f7                	div    %edi
f011c657:	89 c5                	mov    %eax,%ebp
f011c659:	89 f0                	mov    %esi,%eax
f011c65b:	31 d2                	xor    %edx,%edx
f011c65d:	f7 f5                	div    %ebp
f011c65f:	89 c8                	mov    %ecx,%eax
f011c661:	f7 f5                	div    %ebp
f011c663:	89 d0                	mov    %edx,%eax
f011c665:	e9 44 ff ff ff       	jmp    f011c5ae <__umoddi3+0x3e>
f011c66a:	66 90                	xchg   %ax,%ax
f011c66c:	89 c8                	mov    %ecx,%eax
f011c66e:	89 f2                	mov    %esi,%edx
f011c670:	83 c4 1c             	add    $0x1c,%esp
f011c673:	5b                   	pop    %ebx
f011c674:	5e                   	pop    %esi
f011c675:	5f                   	pop    %edi
f011c676:	5d                   	pop    %ebp
f011c677:	c3                   	ret    
f011c678:	3b 04 24             	cmp    (%esp),%eax
f011c67b:	72 06                	jb     f011c683 <__umoddi3+0x113>
f011c67d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f011c681:	77 0f                	ja     f011c692 <__umoddi3+0x122>
f011c683:	89 f2                	mov    %esi,%edx
f011c685:	29 f9                	sub    %edi,%ecx
f011c687:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f011c68b:	89 14 24             	mov    %edx,(%esp)
f011c68e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f011c692:	8b 44 24 04          	mov    0x4(%esp),%eax
f011c696:	8b 14 24             	mov    (%esp),%edx
f011c699:	83 c4 1c             	add    $0x1c,%esp
f011c69c:	5b                   	pop    %ebx
f011c69d:	5e                   	pop    %esi
f011c69e:	5f                   	pop    %edi
f011c69f:	5d                   	pop    %ebp
f011c6a0:	c3                   	ret    
f011c6a1:	8d 76 00             	lea    0x0(%esi),%esi
f011c6a4:	2b 04 24             	sub    (%esp),%eax
f011c6a7:	19 fa                	sbb    %edi,%edx
f011c6a9:	89 d1                	mov    %edx,%ecx
f011c6ab:	89 c6                	mov    %eax,%esi
f011c6ad:	e9 71 ff ff ff       	jmp    f011c623 <__umoddi3+0xb3>
f011c6b2:	66 90                	xchg   %ax,%ax
f011c6b4:	39 44 24 04          	cmp    %eax,0x4(%esp)
f011c6b8:	72 ea                	jb     f011c6a4 <__umoddi3+0x134>
f011c6ba:	89 d9                	mov    %ebx,%ecx
f011c6bc:	e9 62 ff ff ff       	jmp    f011c623 <__umoddi3+0xb3>
