
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 40 15 00 	lgdtl  0x154018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 3f 15 f0       	mov    $0xf0153fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 02 00 00 00       	call   f010003f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <FOS_initialize>:
extern uint32 isBufferingEnabled();
extern uint32 setModifiedBufferLength();

//First ever function called in FOS kernel
void FOS_initialize()
{
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100045:	ba 50 12 3b f0       	mov    $0xf03b1250,%edx
f010004a:	b8 d3 55 32 f0       	mov    $0xf03255d3,%eax
f010004f:	29 c2                	sub    %eax,%edx
f0100051:	89 d0                	mov    %edx,%eax
f0100053:	83 ec 04             	sub    $0x4,%esp
f0100056:	50                   	push   %eax
f0100057:	6a 00                	push   $0x0
f0100059:	68 d3 55 32 f0       	push   $0xf03255d3
f010005e:	e8 0d 9a 01 00       	call   f0119a70 <memset>
f0100063:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100066:	e8 6f 0c 00 00       	call   f0100cda <console_initialize>

	//print welcome message
	print_welcome_message();
f010006b:	e8 aa 00 00 00       	call   f010011a <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100070:	e8 5c 2e 00 00       	call   f0102ed1 <detect_memory>
	initialize_kernel_VM();
f0100075:	e8 d9 34 00 00       	call   f0103553 <initialize_kernel_VM>
	initialize_paging();
f010007a:	e8 f6 38 00 00       	call   f0103975 <initialize_paging>
//	page_check();


	// Lab 3 user environment initialization functions
	env_init();
f010007f:	e8 b7 67 00 00       	call   f010683b <env_init>
	idt_init();
f0100084:	e8 6b 75 00 00       	call   f01075f4 <idt_init>
	//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
	setPageReplacmentAlgorithmFIFO();
f0100089:	e8 8a 8a 00 00       	call   f0108b18 <setPageReplacmentAlgorithmFIFO>
	setUHeapPlacementStrategyFIRSTFIT();
f010008e:	e8 ea 4c 00 00       	call   f0104d7d <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f0100093:	e8 a1 4d 00 00       	call   f0104e39 <setKHeapPlacementStrategyFIRSTFIT>
	enableBuffering(0);
f0100098:	83 ec 0c             	sub    $0xc,%esp
f010009b:	6a 00                	push   $0x0
f010009d:	e8 35 8b 00 00       	call   f0108bd7 <enableBuffering>
f01000a2:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(0) ;
f01000a5:	83 ec 0c             	sub    $0xc,%esp
f01000a8:	6a 00                	push   $0x0
f01000aa:	e8 10 8b 00 00       	call   f0108bbf <enableModifiedBuffer>
f01000af:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(50);
f01000b2:	83 ec 0c             	sub    $0xc,%esp
f01000b5:	6a 32                	push   $0x32
f01000b7:	e8 33 8b 00 00       	call   f0108bef <setModifiedBufferLength>
f01000bc:	83 c4 10             	add    $0x10,%esp

	//chksch(1);
	chksch(0);
f01000bf:	83 ec 0c             	sub    $0xc,%esp
f01000c2:	6a 00                	push   $0x0
f01000c4:	e8 7c a6 01 00       	call   f011a745 <chksch>
f01000c9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000cc:	e8 03 73 00 00       	call   f01073d4 <pic_init>
	sched_init() ;
f01000d1:	e8 26 93 00 00       	call   f01093fc <sched_init>
#if USE_KHEAP
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif

	create_shares_array(MAX_SHARES);
f01000d6:	83 ec 0c             	sub    $0xc,%esp
f01000d9:	6a 64                	push   $0x64
f01000db:	e8 bd cb 00 00       	call   f010cc9d <create_shares_array>
f01000e0:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000e3:	83 ec 0c             	sub    $0xc,%esp
f01000e6:	68 2c 01 00 00       	push   $0x12c
f01000eb:	e8 80 c8 00 00       	call   f010c970 <create_semaphores_array>
f01000f0:	83 c4 10             	add    $0x10,%esp

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f01000f3:	83 ec 0c             	sub    $0xc,%esp
f01000f6:	68 a0 ac 11 f0       	push   $0xf011aca0
f01000fb:	e8 a3 74 00 00       	call   f01075a3 <cprintf>
f0100100:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100103:	83 ec 0c             	sub    $0xc,%esp
f0100106:	68 cc ac 11 f0       	push   $0xf011accc
f010010b:	e8 93 74 00 00       	call   f01075a3 <cprintf>
f0100110:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100113:	e8 f9 16 00 00       	call   f0101811 <run_command_prompt>
	}
f0100118:	eb d9                	jmp    f01000f3 <FOS_initialize+0xb4>

f010011a <print_welcome_message>:
}


void print_welcome_message()
{
f010011a:	55                   	push   %ebp
f010011b:	89 e5                	mov    %esp,%ebp
f010011d:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100120:	83 ec 0c             	sub    $0xc,%esp
f0100123:	68 f1 ac 11 f0       	push   $0xf011acf1
f0100128:	e8 76 74 00 00       	call   f01075a3 <cprintf>
f010012d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100130:	83 ec 0c             	sub    $0xc,%esp
f0100133:	68 f8 ac 11 f0       	push   $0xf011acf8
f0100138:	e8 66 74 00 00       	call   f01075a3 <cprintf>
f010013d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100140:	83 ec 0c             	sub    $0xc,%esp
f0100143:	68 40 ad 11 f0       	push   $0xf011ad40
f0100148:	e8 56 74 00 00       	call   f01075a3 <cprintf>
f010014d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100150:	83 ec 0c             	sub    $0xc,%esp
f0100153:	68 88 ad 11 f0       	push   $0xf011ad88
f0100158:	e8 46 74 00 00       	call   f01075a3 <cprintf>
f010015d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100160:	83 ec 0c             	sub    $0xc,%esp
f0100163:	68 40 ad 11 f0       	push   $0xf011ad40
f0100168:	e8 36 74 00 00       	call   f01075a3 <cprintf>
f010016d:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100170:	83 ec 0c             	sub    $0xc,%esp
f0100173:	68 f8 ac 11 f0       	push   $0xf011acf8
f0100178:	e8 26 74 00 00       	call   f01075a3 <cprintf>
f010017d:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100180:	83 ec 0c             	sub    $0xc,%esp
f0100183:	68 cd ad 11 f0       	push   $0xf011adcd
f0100188:	e8 16 74 00 00       	call   f01075a3 <cprintf>
f010018d:	83 c4 10             	add    $0x10,%esp
}
f0100190:	90                   	nop
f0100191:	c9                   	leave  
f0100192:	c3                   	ret    

f0100193 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100193:	55                   	push   %ebp
f0100194:	89 e5                	mov    %esp,%ebp
f0100196:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100199:	8b 45 10             	mov    0x10(%ebp),%eax
f010019c:	a3 e0 55 32 f0       	mov    %eax,0xf03255e0

	va_start(ap, fmt);
f01001a1:	8d 45 10             	lea    0x10(%ebp),%eax
f01001a4:	83 c0 04             	add    $0x4,%eax
f01001a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001aa:	83 ec 04             	sub    $0x4,%esp
f01001ad:	ff 75 0c             	pushl  0xc(%ebp)
f01001b0:	ff 75 08             	pushl  0x8(%ebp)
f01001b3:	68 d2 ad 11 f0       	push   $0xf011add2
f01001b8:	e8 e6 73 00 00       	call   f01075a3 <cprintf>
f01001bd:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001c0:	8b 45 10             	mov    0x10(%ebp),%eax
f01001c3:	83 ec 08             	sub    $0x8,%esp
f01001c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01001c9:	50                   	push   %eax
f01001ca:	e8 ab 73 00 00       	call   f010757a <vcprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 eb ad 11 f0       	push   $0xf011adeb
f01001da:	e8 c4 73 00 00       	call   f01075a3 <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001e2:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01001e7:	85 c0                	test   %eax,%eax
f01001e9:	74 12                	je     f01001fd <_panic+0x6a>
f01001eb:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01001f0:	8b 40 54             	mov    0x54(%eax),%eax
f01001f3:	83 f8 02             	cmp    $0x2,%eax
f01001f6:	75 05                	jne    f01001fd <_panic+0x6a>
	{
		//2015
		env_exit();
f01001f8:	e8 04 6d 00 00       	call   f0106f01 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f01001fd:	e8 19 90 00 00       	call   f010921b <fos_scheduler>

f0100202 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100202:	55                   	push   %ebp
f0100203:	89 e5                	mov    %esp,%ebp
f0100205:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100208:	8b 45 10             	mov    0x10(%ebp),%eax
f010020b:	a3 e0 55 32 f0       	mov    %eax,0xf03255e0

	va_start(ap, fmt);
f0100210:	8d 45 10             	lea    0x10(%ebp),%eax
f0100213:	83 c0 04             	add    $0x4,%eax
f0100216:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100219:	83 ec 04             	sub    $0x4,%esp
f010021c:	ff 75 0c             	pushl  0xc(%ebp)
f010021f:	ff 75 08             	pushl  0x8(%ebp)
f0100222:	68 d2 ad 11 f0       	push   $0xf011add2
f0100227:	e8 77 73 00 00       	call   f01075a3 <cprintf>
f010022c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010022f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100232:	83 ec 08             	sub    $0x8,%esp
f0100235:	ff 75 f4             	pushl  -0xc(%ebp)
f0100238:	50                   	push   %eax
f0100239:	e8 3c 73 00 00       	call   f010757a <vcprintf>
f010023e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100241:	83 ec 0c             	sub    $0xc,%esp
f0100244:	68 eb ad 11 f0       	push   $0xf011adeb
f0100249:	e8 55 73 00 00       	call   f01075a3 <cprintf>
f010024e:	83 c4 10             	add    $0x10,%esp

dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100251:	e8 de 9c 00 00       	call   f0109f34 <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100256:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010025b:	85 c0                	test   %eax,%eax
f010025d:	74 14                	je     f0100273 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f010025f:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0100264:	8b 40 4c             	mov    0x4c(%eax),%eax
f0100267:	83 ec 0c             	sub    $0xc,%esp
f010026a:	50                   	push   %eax
f010026b:	e8 a4 9a 00 00       	call   f0109d14 <sched_exit_env>
f0100270:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100273:	e8 a3 8f 00 00       	call   f010921b <fos_scheduler>

f0100278 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100278:	55                   	push   %ebp
f0100279:	89 e5                	mov    %esp,%ebp
f010027b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010027e:	8b 45 10             	mov    0x10(%ebp),%eax
f0100281:	a3 e0 55 32 f0       	mov    %eax,0xf03255e0

	va_start(ap, fmt);
f0100286:	8d 45 10             	lea    0x10(%ebp),%eax
f0100289:	83 c0 04             	add    $0x4,%eax
f010028c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010028f:	83 ec 04             	sub    $0x4,%esp
f0100292:	ff 75 0c             	pushl  0xc(%ebp)
f0100295:	ff 75 08             	pushl  0x8(%ebp)
f0100298:	68 d2 ad 11 f0       	push   $0xf011add2
f010029d:	e8 01 73 00 00       	call   f01075a3 <cprintf>
f01002a2:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002a5:	8b 45 10             	mov    0x10(%ebp),%eax
f01002a8:	83 ec 08             	sub    $0x8,%esp
f01002ab:	ff 75 f4             	pushl  -0xc(%ebp)
f01002ae:	50                   	push   %eax
f01002af:	e8 c6 72 00 00       	call   f010757a <vcprintf>
f01002b4:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002b7:	83 ec 0c             	sub    $0xc,%esp
f01002ba:	68 eb ad 11 f0       	push   $0xf011adeb
f01002bf:	e8 df 72 00 00       	call   f01075a3 <cprintf>
f01002c4:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002c7:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01002cc:	85 c0                	test   %eax,%eax
f01002ce:	74 28                	je     f01002f8 <_panic_into_prompt+0x80>
f01002d0:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01002d5:	8b 40 54             	mov    0x54(%eax),%eax
f01002d8:	83 f8 02             	cmp    $0x2,%eax
f01002db:	75 1b                	jne    f01002f8 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002dd:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01002e2:	83 ec 0c             	sub    $0xc,%esp
f01002e5:	50                   	push   %eax
f01002e6:	e8 59 92 00 00       	call   f0109544 <sched_insert_exit>
f01002eb:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01002ee:	c7 05 30 58 32 f0 00 	movl   $0x0,0xf0325830
f01002f5:	00 00 00 
	}

	lcr3(phys_page_directory);
f01002f8:	a1 58 11 3b f0       	mov    0xf03b1158,%eax
f01002fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100300:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100303:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100306:	c7 05 e0 2c 39 f0 00 	movl   $0x0,0xf0392ce0
f010030d:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100310:	83 ec 0c             	sub    $0xc,%esp
f0100313:	6a 00                	push   $0x0
f0100315:	e8 f7 14 00 00       	call   f0101811 <run_command_prompt>
f010031a:	83 c4 10             	add    $0x10,%esp
f010031d:	eb f1                	jmp    f0100310 <_panic_into_prompt+0x98>

f010031f <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f010031f:	55                   	push   %ebp
f0100320:	89 e5                	mov    %esp,%ebp
f0100322:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100325:	8d 45 10             	lea    0x10(%ebp),%eax
f0100328:	83 c0 04             	add    $0x4,%eax
f010032b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f010032e:	83 ec 04             	sub    $0x4,%esp
f0100331:	ff 75 0c             	pushl  0xc(%ebp)
f0100334:	ff 75 08             	pushl  0x8(%ebp)
f0100337:	68 ed ad 11 f0       	push   $0xf011aded
f010033c:	e8 62 72 00 00       	call   f01075a3 <cprintf>
f0100341:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100344:	8b 45 10             	mov    0x10(%ebp),%eax
f0100347:	83 ec 08             	sub    $0x8,%esp
f010034a:	ff 75 f4             	pushl  -0xc(%ebp)
f010034d:	50                   	push   %eax
f010034e:	e8 27 72 00 00       	call   f010757a <vcprintf>
f0100353:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100356:	83 ec 0c             	sub    $0xc,%esp
f0100359:	68 eb ad 11 f0       	push   $0xf011adeb
f010035e:	e8 40 72 00 00       	call   f01075a3 <cprintf>
f0100363:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100366:	90                   	nop
f0100367:	c9                   	leave  
f0100368:	c3                   	ret    

f0100369 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100369:	55                   	push   %ebp
f010036a:	89 e5                	mov    %esp,%ebp
f010036c:	83 ec 10             	sub    $0x10,%esp
f010036f:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100376:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100379:	89 c2                	mov    %eax,%edx
f010037b:	ec                   	in     (%dx),%al
f010037c:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010037f:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100382:	0f b6 c0             	movzbl %al,%eax
f0100385:	83 e0 01             	and    $0x1,%eax
f0100388:	85 c0                	test   %eax,%eax
f010038a:	75 07                	jne    f0100393 <serial_proc_data+0x2a>
		return -1;
f010038c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100391:	eb 16                	jmp    f01003a9 <serial_proc_data+0x40>
f0100393:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010039a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010039d:	89 c2                	mov    %eax,%edx
f010039f:	ec                   	in     (%dx),%al
f01003a0:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003a3:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003a6:	0f b6 c0             	movzbl %al,%eax
}
f01003a9:	c9                   	leave  
f01003aa:	c3                   	ret    

f01003ab <serial_intr>:

void
serial_intr(void)
{
f01003ab:	55                   	push   %ebp
f01003ac:	89 e5                	mov    %esp,%ebp
f01003ae:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003b1:	a1 04 56 32 f0       	mov    0xf0325604,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 10                	je     f01003ca <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003ba:	83 ec 0c             	sub    $0xc,%esp
f01003bd:	68 69 03 10 f0       	push   $0xf0100369
f01003c2:	e8 58 07 00 00       	call   f0100b1f <cons_intr>
f01003c7:	83 c4 10             	add    $0x10,%esp
}
f01003ca:	90                   	nop
f01003cb:	c9                   	leave  
f01003cc:	c3                   	ret    

f01003cd <serial_init>:

void
serial_init(void)
{
f01003cd:	55                   	push   %ebp
f01003ce:	89 e5                	mov    %esp,%ebp
f01003d0:	83 ec 40             	sub    $0x40,%esp
f01003d3:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003da:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003de:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003e1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003e4:	ee                   	out    %al,(%dx)
f01003e5:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ec:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01003f0:	8a 45 cf             	mov    -0x31(%ebp),%al
f01003f3:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01003f6:	ee                   	out    %al,(%dx)
f01003f7:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01003fe:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100402:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100405:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100408:	ee                   	out    %al,(%dx)
f0100409:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100410:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100414:	8a 45 d1             	mov    -0x2f(%ebp),%al
f0100417:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010041a:	ee                   	out    %al,(%dx)
f010041b:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100422:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100426:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100429:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010042c:	ee                   	out    %al,(%dx)
f010042d:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100434:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f0100438:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010043b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010043e:	ee                   	out    %al,(%dx)
f010043f:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100446:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010044a:	8a 45 d4             	mov    -0x2c(%ebp),%al
f010044d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100450:	ee                   	out    %al,(%dx)
f0100451:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100458:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010045b:	89 c2                	mov    %eax,%edx
f010045d:	ec                   	in     (%dx),%al
f010045e:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100461:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100464:	3c ff                	cmp    $0xff,%al
f0100466:	0f 95 c0             	setne  %al
f0100469:	0f b6 c0             	movzbl %al,%eax
f010046c:	a3 04 56 32 f0       	mov    %eax,0xf0325604
f0100471:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100478:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010047b:	89 c2                	mov    %eax,%edx
f010047d:	ec                   	in     (%dx),%al
f010047e:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100481:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f0100488:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010048b:	89 c2                	mov    %eax,%edx
f010048d:	ec                   	in     (%dx),%al
f010048e:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100491:	90                   	nop
f0100492:	c9                   	leave  
f0100493:	c3                   	ret    

f0100494 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100494:	55                   	push   %ebp
f0100495:	89 e5                	mov    %esp,%ebp
f0100497:	83 ec 20             	sub    $0x20,%esp
f010049a:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004a4:	89 c2                	mov    %eax,%edx
f01004a6:	ec                   	in     (%dx),%al
f01004a7:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004aa:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004b4:	89 c2                	mov    %eax,%edx
f01004b6:	ec                   	in     (%dx),%al
f01004b7:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004ba:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004c4:	89 c2                	mov    %eax,%edx
f01004c6:	ec                   	in     (%dx),%al
f01004c7:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004ca:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004d4:	89 c2                	mov    %eax,%edx
f01004d6:	ec                   	in     (%dx),%al
f01004d7:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004da:	90                   	nop
f01004db:	c9                   	leave  
f01004dc:	c3                   	ret    

f01004dd <lpt_putc>:

static void
lpt_putc(int c)
{
f01004dd:	55                   	push   %ebp
f01004de:	89 e5                	mov    %esp,%ebp
f01004e0:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004ea:	eb 08                	jmp    f01004f4 <lpt_putc+0x17>
		delay();
f01004ec:	e8 a3 ff ff ff       	call   f0100494 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f1:	ff 45 fc             	incl   -0x4(%ebp)
f01004f4:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01004fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01004fe:	89 c2                	mov    %eax,%edx
f0100500:	ec                   	in     (%dx),%al
f0100501:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100504:	8a 45 eb             	mov    -0x15(%ebp),%al
f0100507:	84 c0                	test   %al,%al
f0100509:	78 09                	js     f0100514 <lpt_putc+0x37>
f010050b:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100512:	7e d8                	jle    f01004ec <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100514:	8b 45 08             	mov    0x8(%ebp),%eax
f0100517:	0f b6 c0             	movzbl %al,%eax
f010051a:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100521:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100524:	8a 45 e8             	mov    -0x18(%ebp),%al
f0100527:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010052a:	ee                   	out    %al,(%dx)
f010052b:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100532:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100536:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100539:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010053c:	ee                   	out    %al,(%dx)
f010053d:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100544:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100548:	8a 45 ea             	mov    -0x16(%ebp),%al
f010054b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010054e:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f010054f:	90                   	nop
f0100550:	c9                   	leave  
f0100551:	c3                   	ret    

f0100552 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100552:	55                   	push   %ebp
f0100553:	89 e5                	mov    %esp,%ebp
f0100555:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100558:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f010055f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100562:	66 8b 00             	mov    (%eax),%ax
f0100565:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100569:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010056c:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100571:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100574:	66 8b 00             	mov    (%eax),%ax
f0100577:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010057b:	74 13                	je     f0100590 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f010057d:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100584:	c7 05 08 56 32 f0 b4 	movl   $0x3b4,0xf0325608
f010058b:	03 00 00 
f010058e:	eb 14                	jmp    f01005a4 <cga_init+0x52>
	} else {
		*cp = was;
f0100590:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100593:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f0100597:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010059a:	c7 05 08 56 32 f0 d4 	movl   $0x3d4,0xf0325608
f01005a1:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005a4:	a1 08 56 32 f0       	mov    0xf0325608,%eax
f01005a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005ac:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005b0:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005b6:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005b7:	a1 08 56 32 f0       	mov    0xf0325608,%eax
f01005bc:	40                   	inc    %eax
f01005bd:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005c3:	89 c2                	mov    %eax,%edx
f01005c5:	ec                   	in     (%dx),%al
f01005c6:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005c9:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005cc:	0f b6 c0             	movzbl %al,%eax
f01005cf:	c1 e0 08             	shl    $0x8,%eax
f01005d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005d5:	a1 08 56 32 f0       	mov    0xf0325608,%eax
f01005da:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005dd:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005e1:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005e7:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005e8:	a1 08 56 32 f0       	mov    0xf0325608,%eax
f01005ed:	40                   	inc    %eax
f01005ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01005f4:	89 c2                	mov    %eax,%edx
f01005f6:	ec                   	in     (%dx),%al
f01005f7:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01005fa:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01005fd:	0f b6 c0             	movzbl %al,%eax
f0100600:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100603:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100606:	a3 0c 56 32 f0       	mov    %eax,0xf032560c
	crt_pos = pos;
f010060b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010060e:	66 a3 10 56 32 f0    	mov    %ax,0xf0325610
}
f0100614:	90                   	nop
f0100615:	c9                   	leave  
f0100616:	c3                   	ret    

f0100617 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f0100617:	55                   	push   %ebp
f0100618:	89 e5                	mov    %esp,%ebp
f010061a:	53                   	push   %ebx
f010061b:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f010061e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100621:	b0 00                	mov    $0x0,%al
f0100623:	85 c0                	test   %eax,%eax
f0100625:	75 07                	jne    f010062e <cga_putc+0x17>
		c |= 0x0700;
f0100627:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f010062e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100631:	0f b6 c0             	movzbl %al,%eax
f0100634:	83 f8 0a             	cmp    $0xa,%eax
f0100637:	74 77                	je     f01006b0 <cga_putc+0x99>
f0100639:	83 f8 0a             	cmp    $0xa,%eax
f010063c:	7f 13                	jg     f0100651 <cga_putc+0x3a>
f010063e:	83 f8 08             	cmp    $0x8,%eax
f0100641:	74 2e                	je     f0100671 <cga_putc+0x5a>
f0100643:	83 f8 09             	cmp    $0x9,%eax
f0100646:	0f 84 a8 00 00 00    	je     f01006f4 <cga_putc+0xdd>
f010064c:	e9 22 01 00 00       	jmp    f0100773 <cga_putc+0x15c>
f0100651:	3d e4 00 00 00       	cmp    $0xe4,%eax
f0100656:	0f 84 de 00 00 00    	je     f010073a <cga_putc+0x123>
f010065c:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100661:	0f 84 f1 00 00 00    	je     f0100758 <cga_putc+0x141>
f0100667:	83 f8 0d             	cmp    $0xd,%eax
f010066a:	74 5d                	je     f01006c9 <cga_putc+0xb2>
f010066c:	e9 02 01 00 00       	jmp    f0100773 <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100671:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100677:	66 85 c0             	test   %ax,%ax
f010067a:	0f 84 4f 01 00 00    	je     f01007cf <cga_putc+0x1b8>
			crt_pos--;
f0100680:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100686:	48                   	dec    %eax
f0100687:	66 a3 10 56 32 f0    	mov    %ax,0xf0325610
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068d:	8b 15 0c 56 32 f0    	mov    0xf032560c,%edx
f0100693:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100699:	0f b7 c0             	movzwl %ax,%eax
f010069c:	01 c0                	add    %eax,%eax
f010069e:	01 c2                	add    %eax,%edx
f01006a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a3:	b0 00                	mov    $0x0,%al
f01006a5:	83 c8 20             	or     $0x20,%eax
f01006a8:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006ab:	e9 1f 01 00 00       	jmp    f01007cf <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f01006b0:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f01006b6:	83 c0 50             	add    $0x50,%eax
f01006b9:	66 a3 10 56 32 f0    	mov    %ax,0xf0325610
		text_length = 0;
f01006bf:	c7 05 00 56 32 f0 00 	movl   $0x0,0xf0325600
f01006c6:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006c9:	66 8b 0d 10 56 32 f0 	mov    0xf0325610,%cx
f01006d0:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f01006d6:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006db:	ba 00 00 00 00       	mov    $0x0,%edx
f01006e0:	66 f7 f3             	div    %bx
f01006e3:	89 d0                	mov    %edx,%eax
f01006e5:	29 c1                	sub    %eax,%ecx
f01006e7:	89 c8                	mov    %ecx,%eax
f01006e9:	66 a3 10 56 32 f0    	mov    %ax,0xf0325610
		break;
f01006ef:	e9 e5 00 00 00       	jmp    f01007d9 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01006f4:	83 ec 0c             	sub    $0xc,%esp
f01006f7:	6a 20                	push   $0x20
f01006f9:	e8 ba 05 00 00       	call   f0100cb8 <cons_putc>
f01006fe:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100701:	83 ec 0c             	sub    $0xc,%esp
f0100704:	6a 20                	push   $0x20
f0100706:	e8 ad 05 00 00       	call   f0100cb8 <cons_putc>
f010070b:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070e:	83 ec 0c             	sub    $0xc,%esp
f0100711:	6a 20                	push   $0x20
f0100713:	e8 a0 05 00 00       	call   f0100cb8 <cons_putc>
f0100718:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010071b:	83 ec 0c             	sub    $0xc,%esp
f010071e:	6a 20                	push   $0x20
f0100720:	e8 93 05 00 00       	call   f0100cb8 <cons_putc>
f0100725:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100728:	83 ec 0c             	sub    $0xc,%esp
f010072b:	6a 20                	push   $0x20
f010072d:	e8 86 05 00 00       	call   f0100cb8 <cons_putc>
f0100732:	83 c4 10             	add    $0x10,%esp
		break;
f0100735:	e9 9f 00 00 00       	jmp    f01007d9 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f010073a:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100740:	66 85 c0             	test   %ax,%ax
f0100743:	0f 84 89 00 00 00    	je     f01007d2 <cga_putc+0x1bb>
		     crt_pos--;
f0100749:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f010074f:	48                   	dec    %eax
f0100750:	66 a3 10 56 32 f0    	mov    %ax,0xf0325610
		     break;
f0100756:	eb 7a                	jmp    f01007d2 <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100758:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f010075e:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100762:	77 71                	ja     f01007d5 <cga_putc+0x1be>
			     crt_pos++;
f0100764:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f010076a:	40                   	inc    %eax
f010076b:	66 a3 10 56 32 f0    	mov    %ax,0xf0325610
			     break;
f0100771:	eb 62                	jmp    f01007d5 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f0100773:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f010077a:	74 5c                	je     f01007d8 <cga_putc+0x1c1>
f010077c:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f0100783:	74 53                	je     f01007d8 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f0100785:	8b 0d 0c 56 32 f0    	mov    0xf032560c,%ecx
f010078b:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100791:	8d 50 01             	lea    0x1(%eax),%edx
f0100794:	66 89 15 10 56 32 f0 	mov    %dx,0xf0325610
f010079b:	0f b7 c0             	movzwl %ax,%eax
f010079e:	01 c0                	add    %eax,%eax
f01007a0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01007a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01007a6:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f01007a9:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f01007af:	0f b7 c0             	movzwl %ax,%eax
f01007b2:	8b 15 00 56 32 f0    	mov    0xf0325600,%edx
f01007b8:	81 c2 80 07 00 00    	add    $0x780,%edx
f01007be:	39 d0                	cmp    %edx,%eax
f01007c0:	7e 16                	jle    f01007d8 <cga_putc+0x1c1>
				text_length++;
f01007c2:	a1 00 56 32 f0       	mov    0xf0325600,%eax
f01007c7:	40                   	inc    %eax
f01007c8:	a3 00 56 32 f0       	mov    %eax,0xf0325600
		}
		break;
f01007cd:	eb 09                	jmp    f01007d8 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007cf:	90                   	nop
f01007d0:	eb 07                	jmp    f01007d9 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f01007d2:	90                   	nop
f01007d3:	eb 04                	jmp    f01007d9 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f01007d5:	90                   	nop
f01007d6:	eb 01                	jmp    f01007d9 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01007d8:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007d9:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f01007df:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007e3:	76 58                	jbe    f010083d <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01007e5:	a1 0c 56 32 f0       	mov    0xf032560c,%eax
f01007ea:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01007f0:	a1 0c 56 32 f0       	mov    0xf032560c,%eax
f01007f5:	83 ec 04             	sub    $0x4,%esp
f01007f8:	68 00 0f 00 00       	push   $0xf00
f01007fd:	52                   	push   %edx
f01007fe:	50                   	push   %eax
f01007ff:	e8 9c 92 01 00       	call   f0119aa0 <memcpy>
f0100804:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100807:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f010080e:	eb 15                	jmp    f0100825 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f0100810:	8b 15 0c 56 32 f0    	mov    0xf032560c,%edx
f0100816:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100819:	01 c0                	add    %eax,%eax
f010081b:	01 d0                	add    %edx,%eax
f010081d:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100822:	ff 45 f4             	incl   -0xc(%ebp)
f0100825:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f010082c:	7e e2                	jle    f0100810 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f010082e:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100834:	83 e8 50             	sub    $0x50,%eax
f0100837:	66 a3 10 56 32 f0    	mov    %ax,0xf0325610
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f010083d:	a1 08 56 32 f0       	mov    0xf0325608,%eax
f0100842:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100845:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100849:	8a 45 e0             	mov    -0x20(%ebp),%al
f010084c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010084f:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100850:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100856:	66 c1 e8 08          	shr    $0x8,%ax
f010085a:	0f b6 c0             	movzbl %al,%eax
f010085d:	8b 15 08 56 32 f0    	mov    0xf0325608,%edx
f0100863:	42                   	inc    %edx
f0100864:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100867:	88 45 e1             	mov    %al,-0x1f(%ebp)
f010086a:	8a 45 e1             	mov    -0x1f(%ebp),%al
f010086d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100870:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100871:	a1 08 56 32 f0       	mov    0xf0325608,%eax
f0100876:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100879:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f010087d:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100880:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100883:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100884:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f010088a:	0f b6 c0             	movzbl %al,%eax
f010088d:	8b 15 08 56 32 f0    	mov    0xf0325608,%edx
f0100893:	42                   	inc    %edx
f0100894:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100897:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010089a:	8a 45 e3             	mov    -0x1d(%ebp),%al
f010089d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008a0:	ee                   	out    %al,(%dx)
}
f01008a1:	90                   	nop
f01008a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008a5:	c9                   	leave  
f01008a6:	c3                   	ret    

f01008a7 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008a7:	55                   	push   %ebp
f01008a8:	89 e5                	mov    %esp,%ebp
f01008aa:	83 ec 28             	sub    $0x28,%esp
f01008ad:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01008b7:	89 c2                	mov    %eax,%edx
f01008b9:	ec                   	in     (%dx),%al
f01008ba:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01008bd:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f01008c0:	0f b6 c0             	movzbl %al,%eax
f01008c3:	83 e0 01             	and    $0x1,%eax
f01008c6:	85 c0                	test   %eax,%eax
f01008c8:	75 0a                	jne    f01008d4 <kbd_proc_data+0x2d>
		return -1;
f01008ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01008cf:	e9 2a 02 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
f01008d4:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01008de:	89 c2                	mov    %eax,%edx
f01008e0:	ec                   	in     (%dx),%al
f01008e1:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f01008e4:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f01008e7:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f01008ea:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f01008ee:	75 17                	jne    f0100907 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f01008f0:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f01008f5:	83 c8 40             	or     $0x40,%eax
f01008f8:	a3 28 58 32 f0       	mov    %eax,0xf0325828
		return 0;
f01008fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0100902:	e9 f7 01 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100907:	8a 45 f3             	mov    -0xd(%ebp),%al
f010090a:	84 c0                	test   %al,%al
f010090c:	79 44                	jns    f0100952 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f010090e:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100913:	83 e0 40             	and    $0x40,%eax
f0100916:	85 c0                	test   %eax,%eax
f0100918:	75 08                	jne    f0100922 <kbd_proc_data+0x7b>
f010091a:	8a 45 f3             	mov    -0xd(%ebp),%al
f010091d:	83 e0 7f             	and    $0x7f,%eax
f0100920:	eb 03                	jmp    f0100925 <kbd_proc_data+0x7e>
f0100922:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100925:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100928:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010092c:	8a 80 20 40 15 f0    	mov    -0xfeabfe0(%eax),%al
f0100932:	83 c8 40             	or     $0x40,%eax
f0100935:	0f b6 c0             	movzbl %al,%eax
f0100938:	f7 d0                	not    %eax
f010093a:	89 c2                	mov    %eax,%edx
f010093c:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100941:	21 d0                	and    %edx,%eax
f0100943:	a3 28 58 32 f0       	mov    %eax,0xf0325828
		return 0;
f0100948:	b8 00 00 00 00       	mov    $0x0,%eax
f010094d:	e9 ac 01 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100952:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100957:	83 e0 40             	and    $0x40,%eax
f010095a:	85 c0                	test   %eax,%eax
f010095c:	74 11                	je     f010096f <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f010095e:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100962:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100967:	83 e0 bf             	and    $0xffffffbf,%eax
f010096a:	a3 28 58 32 f0       	mov    %eax,0xf0325828
	}

	shift |= shiftcode[data];
f010096f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100973:	8a 80 20 40 15 f0    	mov    -0xfeabfe0(%eax),%al
f0100979:	0f b6 d0             	movzbl %al,%edx
f010097c:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100981:	09 d0                	or     %edx,%eax
f0100983:	a3 28 58 32 f0       	mov    %eax,0xf0325828
	shift ^= togglecode[data];
f0100988:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010098c:	8a 80 20 41 15 f0    	mov    -0xfeabee0(%eax),%al
f0100992:	0f b6 d0             	movzbl %al,%edx
f0100995:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f010099a:	31 d0                	xor    %edx,%eax
f010099c:	a3 28 58 32 f0       	mov    %eax,0xf0325828

	c = charcode[shift & (CTL | SHIFT)][data];
f01009a1:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f01009a6:	83 e0 03             	and    $0x3,%eax
f01009a9:	8b 14 85 20 45 15 f0 	mov    -0xfeabae0(,%eax,4),%edx
f01009b0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009b4:	01 d0                	add    %edx,%eax
f01009b6:	8a 00                	mov    (%eax),%al
f01009b8:	0f b6 c0             	movzbl %al,%eax
f01009bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f01009be:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009c5:	0f 85 9c 00 00 00    	jne    f0100a67 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f01009cb:	a1 00 56 32 f0       	mov    0xf0325600,%eax
f01009d0:	85 c0                	test   %eax,%eax
f01009d2:	0f 8e 85 00 00 00    	jle    f0100a5d <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f01009d8:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f01009de:	0f b7 c0             	movzwl %ax,%eax
f01009e1:	8b 15 00 56 32 f0    	mov    0xf0325600,%edx
f01009e7:	81 c2 80 07 00 00    	add    $0x780,%edx
f01009ed:	39 d0                	cmp    %edx,%eax
f01009ef:	75 0a                	jne    f01009fb <kbd_proc_data+0x154>
				return 0;
f01009f1:	b8 00 00 00 00       	mov    $0x0,%eax
f01009f6:	e9 03 01 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
			else {
			text_length--;
f01009fb:	a1 00 56 32 f0       	mov    0xf0325600,%eax
f0100a00:	48                   	dec    %eax
f0100a01:	a3 00 56 32 f0       	mov    %eax,0xf0325600
				int crt_pos_Length = crt_pos - 1925;
f0100a06:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100a0c:	0f b7 c0             	movzwl %ax,%eax
f0100a0f:	2d 85 07 00 00       	sub    $0x785,%eax
f0100a14:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a17:	66 a1 10 56 32 f0    	mov    0xf0325610,%ax
f0100a1d:	0f b7 c0             	movzwl %ax,%eax
f0100a20:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a23:	eb 26                	jmp    f0100a4b <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100a25:	8b 15 0c 56 32 f0    	mov    0xf032560c,%edx
f0100a2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100a2e:	01 c0                	add    %eax,%eax
f0100a30:	01 c2                	add    %eax,%edx
f0100a32:	a1 0c 56 32 f0       	mov    0xf032560c,%eax
f0100a37:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100a3a:	41                   	inc    %ecx
f0100a3b:	01 c9                	add    %ecx,%ecx
f0100a3d:	01 c8                	add    %ecx,%eax
f0100a3f:	66 8b 00             	mov    (%eax),%ax
f0100a42:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100a45:	ff 45 e8             	incl   -0x18(%ebp)
f0100a48:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a4b:	a1 00 56 32 f0       	mov    0xf0325600,%eax
f0100a50:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100a53:	7e d0                	jle    f0100a25 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100a55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a58:	e9 a1 00 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100a5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a62:	e9 97 00 00 00       	jmp    f0100afe <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100a67:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100a6c:	83 e0 08             	and    $0x8,%eax
f0100a6f:	85 c0                	test   %eax,%eax
f0100a71:	74 22                	je     f0100a95 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100a73:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a77:	7e 0c                	jle    f0100a85 <kbd_proc_data+0x1de>
f0100a79:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a7d:	7f 06                	jg     f0100a85 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100a7f:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a83:	eb 10                	jmp    f0100a95 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100a85:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a89:	7e 0a                	jle    f0100a95 <kbd_proc_data+0x1ee>
f0100a8b:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a8f:	7f 04                	jg     f0100a95 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100a91:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100a95:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100a9a:	83 f8 10             	cmp    $0x10,%eax
f0100a9d:	75 13                	jne    f0100ab2 <kbd_proc_data+0x20b>
f0100a9f:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100aa3:	7e 0d                	jle    f0100ab2 <kbd_proc_data+0x20b>
f0100aa5:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100aa9:	7f 07                	jg     f0100ab2 <kbd_proc_data+0x20b>
		return 0;
f0100aab:	b8 00 00 00 00       	mov    $0x0,%eax
f0100ab0:	eb 4c                	jmp    f0100afe <kbd_proc_data+0x257>
	if (c == 255)
f0100ab2:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100ab9:	75 07                	jne    f0100ac2 <kbd_proc_data+0x21b>
		return 0;
f0100abb:	b8 00 00 00 00       	mov    $0x0,%eax
f0100ac0:	eb 3c                	jmp    f0100afe <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100ac2:	a1 28 58 32 f0       	mov    0xf0325828,%eax
f0100ac7:	f7 d0                	not    %eax
f0100ac9:	83 e0 06             	and    $0x6,%eax
f0100acc:	85 c0                	test   %eax,%eax
f0100ace:	75 2b                	jne    f0100afb <kbd_proc_data+0x254>
f0100ad0:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100ad7:	75 22                	jne    f0100afb <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100ad9:	83 ec 0c             	sub    $0xc,%esp
f0100adc:	68 08 ae 11 f0       	push   $0xf011ae08
f0100ae1:	e8 bd 6a 00 00       	call   f01075a3 <cprintf>
f0100ae6:	83 c4 10             	add    $0x10,%esp
f0100ae9:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100af0:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100af4:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100af7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100afa:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100afb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100afe:	c9                   	leave  
f0100aff:	c3                   	ret    

f0100b00 <kbd_intr>:

void
kbd_intr(void)
{
f0100b00:	55                   	push   %ebp
f0100b01:	89 e5                	mov    %esp,%ebp
f0100b03:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100b06:	83 ec 0c             	sub    $0xc,%esp
f0100b09:	68 a7 08 10 f0       	push   $0xf01008a7
f0100b0e:	e8 0c 00 00 00       	call   f0100b1f <cons_intr>
f0100b13:	83 c4 10             	add    $0x10,%esp
}
f0100b16:	90                   	nop
f0100b17:	c9                   	leave  
f0100b18:	c3                   	ret    

f0100b19 <kbd_init>:

void
kbd_init(void)
{
f0100b19:	55                   	push   %ebp
f0100b1a:	89 e5                	mov    %esp,%ebp
}
f0100b1c:	90                   	nop
f0100b1d:	5d                   	pop    %ebp
f0100b1e:	c3                   	ret    

f0100b1f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100b1f:	55                   	push   %ebp
f0100b20:	89 e5                	mov    %esp,%ebp
f0100b22:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100b25:	eb 35                	jmp    f0100b5c <cons_intr+0x3d>
		if (c == 0)
f0100b27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b2b:	75 02                	jne    f0100b2f <cons_intr+0x10>
			continue;
f0100b2d:	eb 2d                	jmp    f0100b5c <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100b2f:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100b34:	8d 50 01             	lea    0x1(%eax),%edx
f0100b37:	89 15 24 58 32 f0    	mov    %edx,0xf0325824
f0100b3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b40:	88 90 20 56 32 f0    	mov    %dl,-0xfcda9e0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100b46:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100b4b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b50:	75 0a                	jne    f0100b5c <cons_intr+0x3d>
			cons.wpos = 0;
f0100b52:	c7 05 24 58 32 f0 00 	movl   $0x0,0xf0325824
f0100b59:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100b5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100b5f:	ff d0                	call   *%eax
f0100b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b64:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b68:	75 bd                	jne    f0100b27 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100b6a:	90                   	nop
f0100b6b:	c9                   	leave  
f0100b6c:	c3                   	ret    

f0100b6d <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100b6d:	55                   	push   %ebp
f0100b6e:	89 e5                	mov    %esp,%ebp
f0100b70:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100b73:	e8 33 f8 ff ff       	call   f01003ab <serial_intr>
	kbd_intr();
f0100b78:	e8 83 ff ff ff       	call   f0100b00 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100b7d:	8b 15 20 58 32 f0    	mov    0xf0325820,%edx
f0100b83:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100b88:	39 c2                	cmp    %eax,%edx
f0100b8a:	74 35                	je     f0100bc1 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b8c:	a1 20 58 32 f0       	mov    0xf0325820,%eax
f0100b91:	8d 50 01             	lea    0x1(%eax),%edx
f0100b94:	89 15 20 58 32 f0    	mov    %edx,0xf0325820
f0100b9a:	8a 80 20 56 32 f0    	mov    -0xfcda9e0(%eax),%al
f0100ba0:	0f b6 c0             	movzbl %al,%eax
f0100ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100ba6:	a1 20 58 32 f0       	mov    0xf0325820,%eax
f0100bab:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bb0:	75 0a                	jne    f0100bbc <cons_getc+0x4f>
			cons.rpos = 0;
f0100bb2:	c7 05 20 58 32 f0 00 	movl   $0x0,0xf0325820
f0100bb9:	00 00 00 
		return c;
f0100bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100bbf:	eb 05                	jmp    f0100bc6 <cons_getc+0x59>
	}
	return 0;
f0100bc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100bc6:	c9                   	leave  
f0100bc7:	c3                   	ret    

f0100bc8 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100bc8:	55                   	push   %ebp
f0100bc9:	89 e5                	mov    %esp,%ebp
f0100bcb:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100bce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100bd5:	a1 04 56 32 f0       	mov    0xf0325604,%eax
f0100bda:	85 c0                	test   %eax,%eax
f0100bdc:	74 41                	je     f0100c1f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100bde:	e8 86 f7 ff ff       	call   f0100369 <serial_proc_data>
f0100be3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100be6:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100bea:	74 33                	je     f0100c1f <cons_getc2+0x57>
				if (c1 == 0)
f0100bec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bf0:	74 2d                	je     f0100c1f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100bf2:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100bf7:	8d 50 01             	lea    0x1(%eax),%edx
f0100bfa:	89 15 24 58 32 f0    	mov    %edx,0xf0325824
f0100c00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100c03:	88 90 20 56 32 f0    	mov    %dl,-0xfcda9e0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100c09:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100c0e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c13:	75 0a                	jne    f0100c1f <cons_getc2+0x57>
						cons.wpos = 0;
f0100c15:	c7 05 24 58 32 f0 00 	movl   $0x0,0xf0325824
f0100c1c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100c1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100c26:	e8 7c fc ff ff       	call   f01008a7 <kbd_proc_data>
f0100c2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100c2e:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100c32:	74 33                	je     f0100c67 <cons_getc2+0x9f>
			if (c2 == 0)
f0100c34:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c38:	74 2d                	je     f0100c67 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100c3a:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100c3f:	8d 50 01             	lea    0x1(%eax),%edx
f0100c42:	89 15 24 58 32 f0    	mov    %edx,0xf0325824
f0100c48:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100c4b:	88 90 20 56 32 f0    	mov    %dl,-0xfcda9e0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100c51:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100c56:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c5b:	75 0a                	jne    f0100c67 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100c5d:	c7 05 24 58 32 f0 00 	movl   $0x0,0xf0325824
f0100c64:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100c67:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c6b:	7e 44                	jle    f0100cb1 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100c6d:	8b 15 20 58 32 f0    	mov    0xf0325820,%edx
f0100c73:	a1 24 58 32 f0       	mov    0xf0325824,%eax
f0100c78:	39 c2                	cmp    %eax,%edx
f0100c7a:	74 35                	je     f0100cb1 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100c7c:	a1 20 58 32 f0       	mov    0xf0325820,%eax
f0100c81:	8d 50 01             	lea    0x1(%eax),%edx
f0100c84:	89 15 20 58 32 f0    	mov    %edx,0xf0325820
f0100c8a:	8a 80 20 56 32 f0    	mov    -0xfcda9e0(%eax),%al
f0100c90:	0f b6 c0             	movzbl %al,%eax
f0100c93:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c96:	a1 20 58 32 f0       	mov    0xf0325820,%eax
f0100c9b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ca0:	75 0a                	jne    f0100cac <cons_getc2+0xe4>
				cons.rpos = 0;
f0100ca2:	c7 05 20 58 32 f0 00 	movl   $0x0,0xf0325820
f0100ca9:	00 00 00 
			return c;
f0100cac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100caf:	eb 05                	jmp    f0100cb6 <cons_getc2+0xee>
		}
	}
	return 0;
f0100cb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100cb6:	c9                   	leave  
f0100cb7:	c3                   	ret    

f0100cb8 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100cb8:	55                   	push   %ebp
f0100cb9:	89 e5                	mov    %esp,%ebp
f0100cbb:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100cbe:	ff 75 08             	pushl  0x8(%ebp)
f0100cc1:	e8 17 f8 ff ff       	call   f01004dd <lpt_putc>
f0100cc6:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100cc9:	83 ec 0c             	sub    $0xc,%esp
f0100ccc:	ff 75 08             	pushl  0x8(%ebp)
f0100ccf:	e8 43 f9 ff ff       	call   f0100617 <cga_putc>
f0100cd4:	83 c4 10             	add    $0x10,%esp
}
f0100cd7:	90                   	nop
f0100cd8:	c9                   	leave  
f0100cd9:	c3                   	ret    

f0100cda <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100cda:	55                   	push   %ebp
f0100cdb:	89 e5                	mov    %esp,%ebp
f0100cdd:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100ce0:	e8 6d f8 ff ff       	call   f0100552 <cga_init>
	kbd_init();
f0100ce5:	e8 2f fe ff ff       	call   f0100b19 <kbd_init>
	serial_init();
f0100cea:	e8 de f6 ff ff       	call   f01003cd <serial_init>

	if (!serial_exists)
f0100cef:	a1 04 56 32 f0       	mov    0xf0325604,%eax
f0100cf4:	85 c0                	test   %eax,%eax
f0100cf6:	75 10                	jne    f0100d08 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100cf8:	83 ec 0c             	sub    $0xc,%esp
f0100cfb:	68 14 ae 11 f0       	push   $0xf011ae14
f0100d00:	e8 9e 68 00 00       	call   f01075a3 <cprintf>
f0100d05:	83 c4 10             	add    $0x10,%esp
}
f0100d08:	90                   	nop
f0100d09:	c9                   	leave  
f0100d0a:	c3                   	ret    

f0100d0b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100d0b:	55                   	push   %ebp
f0100d0c:	89 e5                	mov    %esp,%ebp
f0100d0e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100d11:	83 ec 0c             	sub    $0xc,%esp
f0100d14:	ff 75 08             	pushl  0x8(%ebp)
f0100d17:	e8 9c ff ff ff       	call   f0100cb8 <cons_putc>
f0100d1c:	83 c4 10             	add    $0x10,%esp
}
f0100d1f:	90                   	nop
f0100d20:	c9                   	leave  
f0100d21:	c3                   	ret    

f0100d22 <getchar>:

int
getchar(void)
{
f0100d22:	55                   	push   %ebp
f0100d23:	89 e5                	mov    %esp,%ebp
f0100d25:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100d28:	e8 40 fe ff ff       	call   f0100b6d <cons_getc>
f0100d2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d34:	74 f2                	je     f0100d28 <getchar+0x6>
		/* do nothing */;
	return c;
f0100d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d39:	c9                   	leave  
f0100d3a:	c3                   	ret    

f0100d3b <iscons>:

int
iscons(int fdnum)
{
f0100d3b:	55                   	push   %ebp
f0100d3c:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100d3e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100d43:	5d                   	pop    %ebp
f0100d44:	c3                   	ret    

f0100d45 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f0100d45:	55                   	push   %ebp
f0100d46:	89 e5                	mov    %esp,%ebp
f0100d48:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100d4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d4e:	c1 e8 0c             	shr    $0xc,%eax
f0100d51:	89 c2                	mov    %eax,%edx
f0100d53:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0100d58:	39 c2                	cmp    %eax,%edx
f0100d5a:	72 14                	jb     f0100d70 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100d5c:	83 ec 04             	sub    $0x4,%esp
f0100d5f:	68 34 ae 11 f0       	push   $0xf011ae34
f0100d64:	6a 78                	push   $0x78
f0100d66:	68 59 ae 11 f0       	push   $0xf011ae59
f0100d6b:	e8 23 f4 ff ff       	call   f0100193 <_panic>
	return &frames_info[PPN(physical_address)];
f0100d70:	8b 15 44 11 3b f0    	mov    0xf03b1144,%edx
f0100d76:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d79:	c1 e8 0c             	shr    $0xc,%eax
f0100d7c:	89 c1                	mov    %eax,%ecx
f0100d7e:	89 c8                	mov    %ecx,%eax
f0100d80:	01 c0                	add    %eax,%eax
f0100d82:	01 c8                	add    %ecx,%eax
f0100d84:	c1 e0 03             	shl    $0x3,%eax
f0100d87:	01 d0                	add    %edx,%eax
}
f0100d89:	c9                   	leave  
f0100d8a:	c3                   	ret    

f0100d8b <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100d8b:	55                   	push   %ebp
f0100d8c:	89 e5                	mov    %esp,%ebp
f0100d8e:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100d91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100d98:	eb 10                	jmp    f0100daa <clearandwritecommand+0x1f>
		cputchar('\b');
f0100d9a:	83 ec 0c             	sub    $0xc,%esp
f0100d9d:	6a 08                	push   $0x8
f0100d9f:	e8 67 ff ff ff       	call   f0100d0b <cputchar>
f0100da4:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100da7:	ff 45 f4             	incl   -0xc(%ebp)
f0100daa:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dad:	8b 00                	mov    (%eax),%eax
f0100daf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100db2:	7f e6                	jg     f0100d9a <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100db4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100db7:	c1 e0 0a             	shl    $0xa,%eax
f0100dba:	05 00 bd 3a f0       	add    $0xf03abd00,%eax
f0100dbf:	83 ec 0c             	sub    $0xc,%esp
f0100dc2:	50                   	push   %eax
f0100dc3:	e8 ba 8a 01 00       	call   f0119882 <strlen>
f0100dc8:	83 c4 10             	add    $0x10,%esp
f0100dcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100dce:	83 ec 04             	sub    $0x4,%esp
f0100dd1:	68 00 04 00 00       	push   $0x400
f0100dd6:	68 20 0d 3b f0       	push   $0xf03b0d20
f0100ddb:	ff 75 10             	pushl  0x10(%ebp)
f0100dde:	e8 bd 8c 01 00       	call   f0119aa0 <memcpy>
f0100de3:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100de6:	8b 45 08             	mov    0x8(%ebp),%eax
f0100de9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100def:	eb 52                	jmp    f0100e43 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100df1:	8b 45 08             	mov    0x8(%ebp),%eax
f0100df4:	8b 00                	mov    (%eax),%eax
f0100df6:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100df9:	c1 e2 0a             	shl    $0xa,%edx
f0100dfc:	01 d0                	add    %edx,%eax
f0100dfe:	05 00 bd 3a f0       	add    $0xf03abd00,%eax
f0100e03:	8a 00                	mov    (%eax),%al
f0100e05:	0f be c0             	movsbl %al,%eax
f0100e08:	83 ec 0c             	sub    $0xc,%esp
f0100e0b:	50                   	push   %eax
f0100e0c:	e8 fa fe ff ff       	call   f0100d0b <cputchar>
f0100e11:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100e14:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e17:	8b 00                	mov    (%eax),%eax
f0100e19:	89 c2                	mov    %eax,%edx
f0100e1b:	8b 45 10             	mov    0x10(%ebp),%eax
f0100e1e:	01 c2                	add    %eax,%edx
f0100e20:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e23:	8b 00                	mov    (%eax),%eax
f0100e25:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100e28:	c1 e1 0a             	shl    $0xa,%ecx
f0100e2b:	01 c8                	add    %ecx,%eax
f0100e2d:	05 00 bd 3a f0       	add    $0xf03abd00,%eax
f0100e32:	8a 00                	mov    (%eax),%al
f0100e34:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100e36:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e39:	8b 00                	mov    (%eax),%eax
f0100e3b:	8d 50 01             	lea    0x1(%eax),%edx
f0100e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e41:	89 10                	mov    %edx,(%eax)
f0100e43:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e46:	8b 00                	mov    (%eax),%eax
f0100e48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100e4b:	7c a4                	jl     f0100df1 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100e4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e53:	89 10                	mov    %edx,(%eax)
}
f0100e55:	90                   	nop
f0100e56:	c9                   	leave  
f0100e57:	c3                   	ret    

f0100e58 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100e58:	55                   	push   %ebp
f0100e59:	89 e5                	mov    %esp,%ebp
f0100e5b:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100e5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e65:	eb 10                	jmp    f0100e77 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100e67:	83 ec 0c             	sub    $0xc,%esp
f0100e6a:	6a 08                	push   $0x8
f0100e6c:	e8 9a fe ff ff       	call   f0100d0b <cputchar>
f0100e71:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100e74:	ff 45 f4             	incl   -0xc(%ebp)
f0100e77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100e7a:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100e7d:	7c e8                	jl     f0100e67 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100e7f:	83 ec 0c             	sub    $0xc,%esp
f0100e82:	ff 75 0c             	pushl  0xc(%ebp)
f0100e85:	e8 f8 89 01 00       	call   f0119882 <strlen>
f0100e8a:	83 c4 10             	add    $0x10,%esp
f0100e8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100e90:	83 ec 04             	sub    $0x4,%esp
f0100e93:	68 00 04 00 00       	push   $0x400
f0100e98:	68 20 0d 3b f0       	push   $0xf03b0d20
f0100e9d:	ff 75 10             	pushl  0x10(%ebp)
f0100ea0:	e8 fb 8b 01 00       	call   f0119aa0 <memcpy>
f0100ea5:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100ea8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100eb1:	eb 46                	jmp    f0100ef9 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100eb3:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eb6:	8b 00                	mov    (%eax),%eax
f0100eb8:	89 c2                	mov    %eax,%edx
f0100eba:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ebd:	01 d0                	add    %edx,%eax
f0100ebf:	8a 00                	mov    (%eax),%al
f0100ec1:	0f be c0             	movsbl %al,%eax
f0100ec4:	83 ec 0c             	sub    $0xc,%esp
f0100ec7:	50                   	push   %eax
f0100ec8:	e8 3e fe ff ff       	call   f0100d0b <cputchar>
f0100ecd:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100ed0:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ed3:	8b 00                	mov    (%eax),%eax
f0100ed5:	89 c2                	mov    %eax,%edx
f0100ed7:	8b 45 10             	mov    0x10(%ebp),%eax
f0100eda:	01 c2                	add    %eax,%edx
f0100edc:	8b 45 14             	mov    0x14(%ebp),%eax
f0100edf:	8b 00                	mov    (%eax),%eax
f0100ee1:	89 c1                	mov    %eax,%ecx
f0100ee3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ee6:	01 c8                	add    %ecx,%eax
f0100ee8:	8a 00                	mov    (%eax),%al
f0100eea:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100eec:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	8d 50 01             	lea    0x1(%eax),%edx
f0100ef4:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ef7:	89 10                	mov    %edx,(%eax)
f0100ef9:	8b 45 14             	mov    0x14(%ebp),%eax
f0100efc:	8b 00                	mov    (%eax),%eax
f0100efe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f01:	7c b0                	jl     f0100eb3 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100f03:	8b 45 18             	mov    0x18(%ebp),%eax
f0100f06:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f09:	89 10                	mov    %edx,(%eax)
}
f0100f0b:	90                   	nop
f0100f0c:	c9                   	leave  
f0100f0d:	c3                   	ret    

f0100f0e <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100f0e:	55                   	push   %ebp
f0100f0f:	89 e5                	mov    %esp,%ebp
f0100f11:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100f14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f1b:	eb 21                	jmp    f0100f3e <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f20:	c1 e0 0a             	shl    $0xa,%eax
f0100f23:	05 00 2d 39 f0       	add    $0xf0392d00,%eax
f0100f28:	83 ec 04             	sub    $0x4,%esp
f0100f2b:	68 00 04 00 00       	push   $0x400
f0100f30:	6a 00                	push   $0x0
f0100f32:	50                   	push   %eax
f0100f33:	e8 38 8b 01 00       	call   f0119a70 <memset>
f0100f38:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0100f3b:	ff 45 f4             	incl   -0xc(%ebp)
f0100f3e:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0100f42:	7e d9                	jle    f0100f1d <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0100f44:	90                   	nop
f0100f45:	c9                   	leave  
f0100f46:	c3                   	ret    

f0100f47 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0100f47:	55                   	push   %ebp
f0100f48:	89 e5                	mov    %esp,%ebp
f0100f4a:	57                   	push   %edi
f0100f4b:	53                   	push   %ebx
f0100f4c:	81 ec b0 08 00 00    	sub    $0x8b0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0100f52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0100f56:	74 13                	je     f0100f6b <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0100f58:	83 ec 08             	sub    $0x8,%esp
f0100f5b:	ff 75 08             	pushl  0x8(%ebp)
f0100f5e:	68 8d b8 11 f0       	push   $0xf011b88d
f0100f63:	e8 3b 66 00 00       	call   f01075a3 <cprintf>
f0100f68:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0100f6b:	a1 d4 47 15 f0       	mov    0xf01547d4,%eax
f0100f70:	40                   	inc    %eax
f0100f71:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0100f74:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
f0100f7b:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f7e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0100f81:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100f84:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f0100f87:	83 ec 0c             	sub    $0xc,%esp
f0100f8a:	6a 00                	push   $0x0
f0100f8c:	e8 aa fd ff ff       	call   f0100d3b <iscons>
f0100f91:	83 c4 10             	add    $0x10,%esp
f0100f94:	89 45 ac             	mov    %eax,-0x54(%ebp)
	while (1) {
		c = getchar();
f0100f97:	e8 86 fd ff ff       	call   f0100d22 <getchar>
f0100f9c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (i > lastIndex)
f0100f9f:	8b 55 90             	mov    -0x70(%ebp),%edx
f0100fa2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100fa5:	39 c2                	cmp    %eax,%edx
f0100fa7:	7e 06                	jle    f0100faf <command_prompt_readline+0x68>
			lastIndex = i;
f0100fa9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100fac:	89 45 8c             	mov    %eax,-0x74(%ebp)
		if (c < 0) {
f0100faf:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0100fb3:	79 22                	jns    f0100fd7 <command_prompt_readline+0x90>

			if (c != -E_EOF)
f0100fb5:	83 7d a8 07          	cmpl   $0x7,-0x58(%ebp)
f0100fb9:	0f 84 47 08 00 00    	je     f0101806 <command_prompt_readline+0x8bf>
				cprintf("read error: %e\n", c);
f0100fbf:	83 ec 08             	sub    $0x8,%esp
f0100fc2:	ff 75 a8             	pushl  -0x58(%ebp)
f0100fc5:	68 90 b8 11 f0       	push   $0xf011b890
f0100fca:	e8 d4 65 00 00       	call   f01075a3 <cprintf>
f0100fcf:	83 c4 10             	add    $0x10,%esp
			return;
f0100fd2:	e9 2f 08 00 00       	jmp    f0101806 <command_prompt_readline+0x8bf>
		} else if (c == 226) { // Up arrow
f0100fd7:	81 7d a8 e2 00 00 00 	cmpl   $0xe2,-0x58(%ebp)
f0100fde:	75 24                	jne    f0101004 <command_prompt_readline+0xbd>
			if (commandidx)
f0100fe0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100fe4:	74 03                	je     f0100fe9 <command_prompt_readline+0xa2>
				commandidx--;
f0100fe6:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0100fe9:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0100fec:	50                   	push   %eax
f0100fed:	ff 75 0c             	pushl  0xc(%ebp)
f0100ff0:	ff 75 f4             	pushl  -0xc(%ebp)
f0100ff3:	8d 45 90             	lea    -0x70(%ebp),%eax
f0100ff6:	50                   	push   %eax
f0100ff7:	e8 8f fd ff ff       	call   f0100d8b <clearandwritecommand>
f0100ffc:	83 c4 10             	add    $0x10,%esp
f0100fff:	e9 eb 07 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == 227) { // Down arrow
f0101004:	81 7d a8 e3 00 00 00 	cmpl   $0xe3,-0x58(%ebp)
f010100b:	75 35                	jne    f0101042 <command_prompt_readline+0xfb>
			if (commandidx < last_command_idx)
f010100d:	a1 d4 47 15 f0       	mov    0xf01547d4,%eax
f0101012:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101015:	7d 03                	jge    f010101a <command_prompt_readline+0xd3>
				commandidx++;
f0101017:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f010101a:	a1 d4 47 15 f0       	mov    0xf01547d4,%eax
f010101f:	85 c0                	test   %eax,%eax
f0101021:	0f 88 c8 07 00 00    	js     f01017ef <command_prompt_readline+0x8a8>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101027:	8d 45 8c             	lea    -0x74(%ebp),%eax
f010102a:	50                   	push   %eax
f010102b:	ff 75 0c             	pushl  0xc(%ebp)
f010102e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101031:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101034:	50                   	push   %eax
f0101035:	e8 51 fd ff ff       	call   f0100d8b <clearandwritecommand>
f010103a:	83 c4 10             	add    $0x10,%esp
f010103d:	e9 ad 07 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == 9) { // Tab button
f0101042:	83 7d a8 09          	cmpl   $0x9,-0x58(%ebp)
f0101046:	0f 85 71 05 00 00    	jne    f01015bd <command_prompt_readline+0x676>
			if (last_c != 9) {
f010104c:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101050:	0f 84 0c 05 00 00    	je     f0101562 <command_prompt_readline+0x61b>
				clear_prefix_list(PrefixList, 100);
f0101056:	83 ec 08             	sub    $0x8,%esp
f0101059:	6a 64                	push   $0x64
f010105b:	68 00 2d 39 f0       	push   $0xf0392d00
f0101060:	e8 a9 fe ff ff       	call   f0100f0e <clear_prefix_list>
f0101065:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101068:	83 ec 0c             	sub    $0xc,%esp
f010106b:	ff 75 0c             	pushl  0xc(%ebp)
f010106e:	e8 0f 88 01 00       	call   f0119882 <strlen>
f0101073:	83 c4 10             	add    $0x10,%esp
f0101076:	85 c0                	test   %eax,%eax
f0101078:	0f 84 7c 07 00 00    	je     f01017fa <command_prompt_readline+0x8b3>
f010107e:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f0101085:	0f 84 6f 07 00 00    	je     f01017fa <command_prompt_readline+0x8b3>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f010108b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101092:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101095:	89 45 88             	mov    %eax,-0x78(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f0101098:	83 ec 08             	sub    $0x8,%esp
f010109b:	ff 75 0c             	pushl  0xc(%ebp)
f010109e:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010a4:	50                   	push   %eax
f01010a5:	e8 27 88 01 00       	call   f01198d1 <strcpy>
f01010aa:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01010ad:	83 ec 0c             	sub    $0xc,%esp
f01010b0:	ff 75 0c             	pushl  0xc(%ebp)
f01010b3:	e8 ca 87 01 00       	call   f0119882 <strlen>
f01010b8:	83 c4 10             	add    $0x10,%esp
f01010bb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
				if (buf[bufLength - 1] == ' ')
f01010be:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01010c1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01010c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010c7:	01 d0                	add    %edx,%eax
f01010c9:	8a 00                	mov    (%eax),%al
f01010cb:	3c 20                	cmp    $0x20,%al
f01010cd:	0f 84 2d 07 00 00    	je     f0101800 <command_prompt_readline+0x8b9>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01010d3:	8d 45 88             	lea    -0x78(%ebp),%eax
f01010d6:	50                   	push   %eax
f01010d7:	8d 85 48 f7 ff ff    	lea    -0x8b8(%ebp),%eax
f01010dd:	50                   	push   %eax
f01010de:	68 a0 b8 11 f0       	push   $0xf011b8a0
f01010e3:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010e9:	50                   	push   %eax
f01010ea:	e8 c7 8d 01 00       	call   f0119eb6 <strsplit>
f01010ef:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f01010f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				if (number_of_arguments > 1) {
f01010f9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01010fc:	83 f8 01             	cmp    $0x1,%eax
f01010ff:	0f 8e dc 00 00 00    	jle    f01011e1 <command_prompt_readline+0x29a>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
f0101105:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f010110b:	83 ec 08             	sub    $0x8,%esp
f010110e:	68 0f b1 11 f0       	push   $0xf011b10f
f0101113:	50                   	push   %eax
f0101114:	e8 75 88 01 00       	call   f011998e <strcmp>
f0101119:	83 c4 10             	add    $0x10,%esp
f010111c:	85 c0                	test   %eax,%eax
f010111e:	74 21                	je     f0101141 <command_prompt_readline+0x1fa>
f0101120:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f0101126:	83 ec 08             	sub    $0x8,%esp
f0101129:	68 2e b1 11 f0       	push   $0xf011b12e
f010112e:	50                   	push   %eax
f010112f:	e8 5a 88 01 00       	call   f011998e <strcmp>
f0101134:	83 c4 10             	add    $0x10,%esp
f0101137:	85 c0                	test   %eax,%eax
f0101139:	74 06                	je     f0101141 <command_prompt_readline+0x1fa>
						continue;
f010113b:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f010113c:	e9 b9 06 00 00       	jmp    f01017fa <command_prompt_readline+0x8b3>
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
f0101141:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101148:	00 00 00 
f010114b:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f0101151:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101156:	b8 00 00 00 00       	mov    $0x0,%eax
f010115b:	89 d7                	mov    %edx,%edi
f010115d:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f010115f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101162:	48                   	dec    %eax
f0101163:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f010116a:	83 ec 0c             	sub    $0xc,%esp
f010116d:	50                   	push   %eax
f010116e:	e8 0f 87 01 00       	call   f0119882 <strlen>
f0101173:	83 c4 10             	add    $0x10,%esp
f0101176:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0101179:	29 c2                	sub    %eax,%edx
f010117b:	89 d0                	mov    %edx,%eax
f010117d:	89 45 a0             	mov    %eax,-0x60(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101180:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0101187:	eb 1d                	jmp    f01011a6 <command_prompt_readline+0x25f>
						temp[it_str++] = buf[var];
f0101189:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010118c:	8d 50 01             	lea    0x1(%eax),%edx
f010118f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0101192:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101195:	8b 55 0c             	mov    0xc(%ebp),%edx
f0101198:	01 ca                	add    %ecx,%edx
f010119a:	8a 12                	mov    (%edx),%dl
f010119c:	88 94 05 88 fb ff ff 	mov    %dl,-0x478(%ebp,%eax,1)
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01011a3:	ff 45 e0             	incl   -0x20(%ebp)
f01011a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01011a9:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f01011ac:	7c db                	jl     f0101189 <command_prompt_readline+0x242>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01011ae:	83 ec 08             	sub    $0x8,%esp
f01011b1:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01011b7:	50                   	push   %eax
f01011b8:	ff 75 0c             	pushl  0xc(%ebp)
f01011bb:	e8 11 87 01 00       	call   f01198d1 <strcpy>
f01011c0:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f01011c3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011c6:	48                   	dec    %eax
f01011c7:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f01011ce:	83 ec 08             	sub    $0x8,%esp
f01011d1:	50                   	push   %eax
f01011d2:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011d8:	50                   	push   %eax
f01011d9:	e8 f3 86 01 00       	call   f01198d1 <strcpy>
f01011de:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f01011e1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if(number_of_arguments == 1)
f01011e8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011eb:	83 f8 01             	cmp    $0x1,%eax
f01011ee:	0f 85 2c 01 00 00    	jne    f0101320 <command_prompt_readline+0x3d9>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01011f4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01011fb:	e9 0f 01 00 00       	jmp    f010130f <command_prompt_readline+0x3c8>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f0101200:	83 ec 0c             	sub    $0xc,%esp
f0101203:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101209:	50                   	push   %eax
f010120a:	e8 73 86 01 00       	call   f0119882 <strlen>
f010120f:	83 c4 10             	add    $0x10,%esp
f0101212:	89 c1                	mov    %eax,%ecx
f0101214:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0101217:	89 d0                	mov    %edx,%eax
f0101219:	01 c0                	add    %eax,%eax
f010121b:	01 d0                	add    %edx,%eax
f010121d:	c1 e0 02             	shl    $0x2,%eax
f0101220:	05 40 45 15 f0       	add    $0xf0154540,%eax
f0101225:	8b 00                	mov    (%eax),%eax
f0101227:	83 ec 04             	sub    $0x4,%esp
f010122a:	51                   	push   %ecx
f010122b:	50                   	push   %eax
f010122c:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101232:	50                   	push   %eax
f0101233:	e8 8e 87 01 00       	call   f01199c6 <strncmp>
f0101238:	83 c4 10             	add    $0x10,%esp
f010123b:	89 45 9c             	mov    %eax,-0x64(%ebp)
						if (x == 0) {
f010123e:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0101242:	0f 85 c4 00 00 00    	jne    f010130c <command_prompt_readline+0x3c5>
							it_str = -1;
f0101248:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f010124f:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101256:	00 00 00 
f0101259:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f010125f:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101264:	b8 00 00 00 00       	mov    $0x0,%eax
f0101269:	89 d7                	mov    %edx,%edi
f010126b:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f010126d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0101274:	eb 2d                	jmp    f01012a3 <command_prompt_readline+0x35c>
								string[++it_str] = commands[var].name[var3];
f0101276:	ff 45 e4             	incl   -0x1c(%ebp)
f0101279:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010127c:	89 d0                	mov    %edx,%eax
f010127e:	01 c0                	add    %eax,%eax
f0101280:	01 d0                	add    %edx,%eax
f0101282:	c1 e0 02             	shl    $0x2,%eax
f0101285:	05 40 45 15 f0       	add    $0xf0154540,%eax
f010128a:	8b 10                	mov    (%eax),%edx
f010128c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010128f:	01 d0                	add    %edx,%eax
f0101291:	8a 00                	mov    (%eax),%al
f0101293:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f0101299:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010129c:	01 ca                	add    %ecx,%edx
f010129e:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01012a0:	ff 45 d4             	incl   -0x2c(%ebp)
f01012a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01012a6:	89 d0                	mov    %edx,%eax
f01012a8:	01 c0                	add    %eax,%eax
f01012aa:	01 d0                	add    %edx,%eax
f01012ac:	c1 e0 02             	shl    $0x2,%eax
f01012af:	05 40 45 15 f0       	add    $0xf0154540,%eax
f01012b4:	8b 00                	mov    (%eax),%eax
f01012b6:	83 ec 0c             	sub    $0xc,%esp
f01012b9:	50                   	push   %eax
f01012ba:	e8 c3 85 01 00       	call   f0119882 <strlen>
f01012bf:	83 c4 10             	add    $0x10,%esp
f01012c2:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01012c5:	7f af                	jg     f0101276 <command_prompt_readline+0x32f>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f01012c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012ca:	c1 e0 0a             	shl    $0xa,%eax
f01012cd:	05 00 2d 39 f0       	add    $0xf0392d00,%eax
f01012d2:	83 ec 04             	sub    $0x4,%esp
f01012d5:	68 00 04 00 00       	push   $0x400
f01012da:	6a 00                	push   $0x0
f01012dc:	50                   	push   %eax
f01012dd:	e8 8e 87 01 00       	call   f0119a70 <memset>
f01012e2:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f01012e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01012e8:	40                   	inc    %eax
f01012e9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01012ec:	c1 e2 0a             	shl    $0xa,%edx
f01012ef:	81 c2 00 2d 39 f0    	add    $0xf0392d00,%edx
f01012f5:	83 ec 04             	sub    $0x4,%esp
f01012f8:	50                   	push   %eax
f01012f9:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01012ff:	50                   	push   %eax
f0101300:	52                   	push   %edx
f0101301:	e8 f9 85 01 00       	call   f01198ff <strncpy>
f0101306:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f0101309:	ff 45 dc             	incl   -0x24(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010130c:	ff 45 d8             	incl   -0x28(%ebp)
f010130f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101312:	83 f8 36             	cmp    $0x36,%eax
f0101315:	0f 86 e5 fe ff ff    	jbe    f0101200 <command_prompt_readline+0x2b9>
f010131b:	e9 73 01 00 00       	jmp    f0101493 <command_prompt_readline+0x54c>
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101320:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101327:	e9 59 01 00 00       	jmp    f0101485 <command_prompt_readline+0x53e>
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f010132c:	83 ec 0c             	sub    $0xc,%esp
f010132f:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101335:	50                   	push   %eax
f0101336:	e8 47 85 01 00       	call   f0119882 <strlen>
f010133b:	83 c4 10             	add    $0x10,%esp
f010133e:	89 c1                	mov    %eax,%ecx
f0101340:	8b 1d 70 49 15 f0    	mov    0xf0154970,%ebx
f0101346:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101349:	89 d0                	mov    %edx,%eax
f010134b:	01 c0                	add    %eax,%eax
f010134d:	01 d0                	add    %edx,%eax
f010134f:	c1 e0 02             	shl    $0x2,%eax
f0101352:	01 d8                	add    %ebx,%eax
f0101354:	8b 00                	mov    (%eax),%eax
f0101356:	83 ec 04             	sub    $0x4,%esp
f0101359:	51                   	push   %ecx
f010135a:	50                   	push   %eax
f010135b:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101361:	50                   	push   %eax
f0101362:	e8 5f 86 01 00       	call   f01199c6 <strncmp>
f0101367:	83 c4 10             	add    $0x10,%esp
f010136a:	89 45 98             	mov    %eax,-0x68(%ebp)
						if (x == 0) {
f010136d:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101371:	0f 85 0b 01 00 00    	jne    f0101482 <command_prompt_readline+0x53b>
							it_str = -1;
f0101377:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f010137e:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101385:	00 00 00 
f0101388:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f010138e:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101393:	b8 00 00 00 00       	mov    $0x0,%eax
f0101398:	89 d7                	mov    %edx,%edi
f010139a:	f3 ab                	rep stos %eax,%es:(%edi)
							if (number_of_arguments > 1) {
f010139c:	8b 45 88             	mov    -0x78(%ebp),%eax
f010139f:	83 f8 01             	cmp    $0x1,%eax
f01013a2:	7e 39                	jle    f01013dd <command_prompt_readline+0x496>
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013a4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013ab:	eb 1d                	jmp    f01013ca <command_prompt_readline+0x483>
									string[++it_str] = buf[var2];
f01013ad:	ff 45 e4             	incl   -0x1c(%ebp)
f01013b0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01013b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013b6:	01 d0                	add    %edx,%eax
f01013b8:	8a 00                	mov    (%eax),%al
f01013ba:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013c3:	01 ca                	add    %ecx,%edx
f01013c5:	88 02                	mov    %al,(%edx)
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013c7:	ff 45 cc             	incl   -0x34(%ebp)
f01013ca:	83 ec 0c             	sub    $0xc,%esp
f01013cd:	ff 75 0c             	pushl  0xc(%ebp)
f01013d0:	e8 ad 84 01 00       	call   f0119882 <strlen>
f01013d5:	83 c4 10             	add    $0x10,%esp
f01013d8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01013db:	7f d0                	jg     f01013ad <command_prompt_readline+0x466>
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013dd:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01013e4:	eb 30                	jmp    f0101416 <command_prompt_readline+0x4cf>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
f01013e6:	ff 45 e4             	incl   -0x1c(%ebp)
f01013e9:	8b 0d 70 49 15 f0    	mov    0xf0154970,%ecx
f01013ef:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01013f2:	89 d0                	mov    %edx,%eax
f01013f4:	01 c0                	add    %eax,%eax
f01013f6:	01 d0                	add    %edx,%eax
f01013f8:	c1 e0 02             	shl    $0x2,%eax
f01013fb:	01 c8                	add    %ecx,%eax
f01013fd:	8b 10                	mov    (%eax),%edx
f01013ff:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0101402:	01 d0                	add    %edx,%eax
f0101404:	8a 00                	mov    (%eax),%al
f0101406:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f010140c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010140f:	01 ca                	add    %ecx,%edx
f0101411:	88 02                	mov    %al,(%edx)
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101413:	ff 45 c8             	incl   -0x38(%ebp)
f0101416:	8b 0d 70 49 15 f0    	mov    0xf0154970,%ecx
f010141c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010141f:	89 d0                	mov    %edx,%eax
f0101421:	01 c0                	add    %eax,%eax
f0101423:	01 d0                	add    %edx,%eax
f0101425:	c1 e0 02             	shl    $0x2,%eax
f0101428:	01 c8                	add    %ecx,%eax
f010142a:	8b 00                	mov    (%eax),%eax
f010142c:	83 ec 0c             	sub    $0xc,%esp
f010142f:	50                   	push   %eax
f0101430:	e8 4d 84 01 00       	call   f0119882 <strlen>
f0101435:	83 c4 10             	add    $0x10,%esp
f0101438:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f010143b:	7f a9                	jg     f01013e6 <command_prompt_readline+0x49f>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f010143d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101440:	c1 e0 0a             	shl    $0xa,%eax
f0101443:	05 00 2d 39 f0       	add    $0xf0392d00,%eax
f0101448:	83 ec 04             	sub    $0x4,%esp
f010144b:	68 00 04 00 00       	push   $0x400
f0101450:	6a 00                	push   $0x0
f0101452:	50                   	push   %eax
f0101453:	e8 18 86 01 00       	call   f0119a70 <memset>
f0101458:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f010145b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010145e:	40                   	inc    %eax
f010145f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101462:	c1 e2 0a             	shl    $0xa,%edx
f0101465:	81 c2 00 2d 39 f0    	add    $0xf0392d00,%edx
f010146b:	83 ec 04             	sub    $0x4,%esp
f010146e:	50                   	push   %eax
f010146f:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f0101475:	50                   	push   %eax
f0101476:	52                   	push   %edx
f0101477:	e8 83 84 01 00       	call   f01198ff <strncpy>
f010147c:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010147f:	ff 45 dc             	incl   -0x24(%ebp)
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f0101482:	ff 45 d0             	incl   -0x30(%ebp)
f0101485:	a1 74 49 15 f0       	mov    0xf0154974,%eax
f010148a:	39 45 d0             	cmp    %eax,-0x30(%ebp)
f010148d:	0f 8c 99 fe ff ff    	jl     f010132c <command_prompt_readline+0x3e5>
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
							it_prefix_list++;
						}
					}
				}
				prefix_list_size = it_prefix_list;
f0101493:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101496:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f0101499:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010149d:	0f 84 4c 03 00 00    	je     f01017ef <command_prompt_readline+0x8a8>
					prefix_list_idx = it_str = 0;
f01014a3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01014aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01014ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014b0:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01014b7:	eb 1f                	jmp    f01014d8 <command_prompt_readline+0x591>
						buf[it_str++] = PrefixList[0][var2];}
f01014b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01014bc:	8d 50 01             	lea    0x1(%eax),%edx
f01014bf:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01014c2:	89 c2                	mov    %eax,%edx
f01014c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014c7:	01 c2                	add    %eax,%edx
f01014c9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01014cc:	05 00 2d 39 f0       	add    $0xf0392d00,%eax
f01014d1:	8a 00                	mov    (%eax),%al
f01014d3:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014d5:	ff 45 c4             	incl   -0x3c(%ebp)
f01014d8:	83 ec 0c             	sub    $0xc,%esp
f01014db:	68 00 2d 39 f0       	push   $0xf0392d00
f01014e0:	e8 9d 83 01 00       	call   f0119882 <strlen>
f01014e5:	83 c4 10             	add    $0x10,%esp
f01014e8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01014eb:	7f cc                	jg     f01014b9 <command_prompt_readline+0x572>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f01014ed:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f01014f4:	eb 10                	jmp    f0101506 <command_prompt_readline+0x5bf>
						cputchar('\b');}
f01014f6:	83 ec 0c             	sub    $0xc,%esp
f01014f9:	6a 08                	push   $0x8
f01014fb:	e8 0b f8 ff ff       	call   f0100d0b <cputchar>
f0101500:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101503:	ff 45 c0             	incl   -0x40(%ebp)
f0101506:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101509:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f010150c:	7c e8                	jl     f01014f6 <command_prompt_readline+0x5af>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010150e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101515:	eb 1c                	jmp    f0101533 <command_prompt_readline+0x5ec>
						cputchar(buf[j]);}
f0101517:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010151a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010151d:	01 d0                	add    %edx,%eax
f010151f:	8a 00                	mov    (%eax),%al
f0101521:	0f be c0             	movsbl %al,%eax
f0101524:	83 ec 0c             	sub    $0xc,%esp
f0101527:	50                   	push   %eax
f0101528:	e8 de f7 ff ff       	call   f0100d0b <cputchar>
f010152d:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101530:	ff 45 bc             	incl   -0x44(%ebp)
f0101533:	83 ec 0c             	sub    $0xc,%esp
f0101536:	ff 75 0c             	pushl  0xc(%ebp)
f0101539:	e8 44 83 01 00       	call   f0119882 <strlen>
f010153e:	83 c4 10             	add    $0x10,%esp
f0101541:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0101544:	7f d1                	jg     f0101517 <command_prompt_readline+0x5d0>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101546:	83 ec 0c             	sub    $0xc,%esp
f0101549:	ff 75 0c             	pushl  0xc(%ebp)
f010154c:	e8 31 83 01 00       	call   f0119882 <strlen>
f0101551:	83 c4 10             	add    $0x10,%esp
f0101554:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101557:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010155a:	89 45 90             	mov    %eax,-0x70(%ebp)
f010155d:	e9 8d 02 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101562:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101566:	0f 8e 83 02 00 00    	jle    f01017ef <command_prompt_readline+0x8a8>
f010156c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010156f:	89 45 94             	mov    %eax,-0x6c(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f0101572:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101575:	40                   	inc    %eax
f0101576:	99                   	cltd   
f0101577:	f7 7d ec             	idivl  -0x14(%ebp)
f010157a:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f010157d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101580:	c1 e0 0a             	shl    $0xa,%eax
f0101583:	8d 98 00 2d 39 f0    	lea    -0xfc6d300(%eax),%ebx
f0101589:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010158c:	c1 e0 0a             	shl    $0xa,%eax
f010158f:	05 00 2d 39 f0       	add    $0xf0392d00,%eax
f0101594:	83 ec 0c             	sub    $0xc,%esp
f0101597:	50                   	push   %eax
f0101598:	e8 e5 82 01 00       	call   f0119882 <strlen>
f010159d:	83 c4 10             	add    $0x10,%esp
f01015a0:	83 ec 0c             	sub    $0xc,%esp
f01015a3:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01015a6:	52                   	push   %edx
f01015a7:	8d 55 90             	lea    -0x70(%ebp),%edx
f01015aa:	52                   	push   %edx
f01015ab:	ff 75 0c             	pushl  0xc(%ebp)
f01015ae:	53                   	push   %ebx
f01015af:	50                   	push   %eax
f01015b0:	e8 a3 f8 ff ff       	call   f0100e58 <RoundAutoCompleteCommandWithTheSamePrefix>
f01015b5:	83 c4 20             	add    $0x20,%esp
f01015b8:	e9 32 02 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
				}
			}
		}

		else if (c == 228) { // left arrow
f01015bd:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f01015c4:	75 25                	jne    f01015eb <command_prompt_readline+0x6a4>
			if (i > 0) {
f01015c6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015c9:	85 c0                	test   %eax,%eax
f01015cb:	0f 8e 1e 02 00 00    	jle    f01017ef <command_prompt_readline+0x8a8>
				i--;
f01015d1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015d4:	48                   	dec    %eax
f01015d5:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015d8:	83 ec 0c             	sub    $0xc,%esp
f01015db:	ff 75 a8             	pushl  -0x58(%ebp)
f01015de:	e8 28 f7 ff ff       	call   f0100d0b <cputchar>
f01015e3:	83 c4 10             	add    $0x10,%esp
f01015e6:	e9 04 02 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
			}
		} else if (c == 229) { // right arrow
f01015eb:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f01015f2:	75 28                	jne    f010161c <command_prompt_readline+0x6d5>
			if (i < lastIndex) {
f01015f4:	8b 55 90             	mov    -0x70(%ebp),%edx
f01015f7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01015fa:	39 c2                	cmp    %eax,%edx
f01015fc:	0f 8d ed 01 00 00    	jge    f01017ef <command_prompt_readline+0x8a8>
				i++;
f0101602:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101605:	40                   	inc    %eax
f0101606:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f0101609:	83 ec 0c             	sub    $0xc,%esp
f010160c:	ff 75 a8             	pushl  -0x58(%ebp)
f010160f:	e8 f7 f6 ff ff       	call   f0100d0b <cputchar>
f0101614:	83 c4 10             	add    $0x10,%esp
f0101617:	e9 d3 01 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f010161c:	81 7d a8 e9 00 00 00 	cmpl   $0xe9,-0x58(%ebp)
f0101623:	75 3d                	jne    f0101662 <command_prompt_readline+0x71b>
f0101625:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101628:	85 c0                	test   %eax,%eax
f010162a:	7e 36                	jle    f0101662 <command_prompt_readline+0x71b>
			for (int var = i; var <= lastIndex; ++var) {
f010162c:	8b 45 90             	mov    -0x70(%ebp),%eax
f010162f:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0101632:	eb 1a                	jmp    f010164e <command_prompt_readline+0x707>
				buf[var] = buf[var + 1];
f0101634:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0101637:	8b 45 0c             	mov    0xc(%ebp),%eax
f010163a:	01 c2                	add    %eax,%edx
f010163c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010163f:	8d 48 01             	lea    0x1(%eax),%ecx
f0101642:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101645:	01 c8                	add    %ecx,%eax
f0101647:	8a 00                	mov    (%eax),%al
f0101649:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f010164b:	ff 45 b8             	incl   -0x48(%ebp)
f010164e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101651:	39 45 b8             	cmp    %eax,-0x48(%ebp)
f0101654:	7e de                	jle    f0101634 <command_prompt_readline+0x6ed>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101656:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101659:	48                   	dec    %eax
f010165a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010165d:	e9 8d 01 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101662:	83 7d a8 1f          	cmpl   $0x1f,-0x58(%ebp)
f0101666:	7e 51                	jle    f01016b9 <command_prompt_readline+0x772>
f0101668:	8b 45 90             	mov    -0x70(%ebp),%eax
f010166b:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101670:	7f 47                	jg     f01016b9 <command_prompt_readline+0x772>
f0101672:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f0101679:	74 3e                	je     f01016b9 <command_prompt_readline+0x772>
f010167b:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f0101682:	74 35                	je     f01016b9 <command_prompt_readline+0x772>
			if (echoing)
f0101684:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101688:	74 0e                	je     f0101698 <command_prompt_readline+0x751>
				cputchar(c);
f010168a:	83 ec 0c             	sub    $0xc,%esp
f010168d:	ff 75 a8             	pushl  -0x58(%ebp)
f0101690:	e8 76 f6 ff ff       	call   f0100d0b <cputchar>
f0101695:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0101698:	8b 45 90             	mov    -0x70(%ebp),%eax
f010169b:	8d 50 01             	lea    0x1(%eax),%edx
f010169e:	89 55 90             	mov    %edx,-0x70(%ebp)
f01016a1:	89 c2                	mov    %eax,%edx
f01016a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016a6:	01 d0                	add    %edx,%eax
f01016a8:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01016ab:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01016ad:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01016b0:	40                   	inc    %eax
f01016b1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01016b4:	e9 36 01 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == '\b' && i > 0) {
f01016b9:	83 7d a8 08          	cmpl   $0x8,-0x58(%ebp)
f01016bd:	75 51                	jne    f0101710 <command_prompt_readline+0x7c9>
f01016bf:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016c2:	85 c0                	test   %eax,%eax
f01016c4:	7e 4a                	jle    f0101710 <command_prompt_readline+0x7c9>

			if (echoing)
f01016c6:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01016ca:	74 0e                	je     f01016da <command_prompt_readline+0x793>
				cputchar(c);
f01016cc:	83 ec 0c             	sub    $0xc,%esp
f01016cf:	ff 75 a8             	pushl  -0x58(%ebp)
f01016d2:	e8 34 f6 ff ff       	call   f0100d0b <cputchar>
f01016d7:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f01016da:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016dd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01016e0:	eb 1a                	jmp    f01016fc <command_prompt_readline+0x7b5>
				buf[var - 1] = buf[var];
f01016e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01016e5:	8d 50 ff             	lea    -0x1(%eax),%edx
f01016e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016eb:	01 c2                	add    %eax,%edx
f01016ed:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f01016f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016f3:	01 c8                	add    %ecx,%eax
f01016f5:	8a 00                	mov    (%eax),%al
f01016f7:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f01016f9:	ff 45 b4             	incl   -0x4c(%ebp)
f01016fc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016ff:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f0101702:	7e de                	jle    f01016e2 <command_prompt_readline+0x79b>
				buf[var - 1] = buf[var];
			}
			i--;
f0101704:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101707:	48                   	dec    %eax
f0101708:	89 45 90             	mov    %eax,-0x70(%ebp)
f010170b:	e9 df 00 00 00       	jmp    f01017ef <command_prompt_readline+0x8a8>
		} else if (c == '\n' || c == '\r') {
f0101710:	83 7d a8 0a          	cmpl   $0xa,-0x58(%ebp)
f0101714:	74 0a                	je     f0101720 <command_prompt_readline+0x7d9>
f0101716:	83 7d a8 0d          	cmpl   $0xd,-0x58(%ebp)
f010171a:	0f 85 cf 00 00 00    	jne    f01017ef <command_prompt_readline+0x8a8>

			if (echoing)
f0101720:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101724:	74 0e                	je     f0101734 <command_prompt_readline+0x7ed>
				cputchar(c);
f0101726:	83 ec 0c             	sub    $0xc,%esp
f0101729:	ff 75 a8             	pushl  -0x58(%ebp)
f010172c:	e8 da f5 ff ff       	call   f0100d0b <cputchar>
f0101731:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101734:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101737:	89 c2                	mov    %eax,%edx
f0101739:	8b 45 0c             	mov    0xc(%ebp),%eax
f010173c:	01 d0                	add    %edx,%eax
f010173e:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101741:	a1 d4 47 15 f0       	mov    0xf01547d4,%eax
f0101746:	83 f8 13             	cmp    $0x13,%eax
f0101749:	75 56                	jne    f01017a1 <command_prompt_readline+0x85a>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010174b:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f0101752:	eb 2d                	jmp    f0101781 <command_prompt_readline+0x83a>
					memcpy(command_history[idx], command_history[idx + 1],
f0101754:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101757:	40                   	inc    %eax
f0101758:	c1 e0 0a             	shl    $0xa,%eax
f010175b:	8d 90 00 bd 3a f0    	lea    -0xfc54300(%eax),%edx
f0101761:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101764:	c1 e0 0a             	shl    $0xa,%eax
f0101767:	05 00 bd 3a f0       	add    $0xf03abd00,%eax
f010176c:	83 ec 04             	sub    $0x4,%esp
f010176f:	68 00 04 00 00       	push   $0x400
f0101774:	52                   	push   %edx
f0101775:	50                   	push   %eax
f0101776:	e8 25 83 01 00       	call   f0119aa0 <memcpy>
f010177b:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010177e:	ff 45 b0             	incl   -0x50(%ebp)
f0101781:	83 7d b0 12          	cmpl   $0x12,-0x50(%ebp)
f0101785:	7e cd                	jle    f0101754 <command_prompt_readline+0x80d>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101787:	83 ec 04             	sub    $0x4,%esp
f010178a:	68 00 04 00 00       	push   $0x400
f010178f:	ff 75 0c             	pushl  0xc(%ebp)
f0101792:	68 00 09 3b f0       	push   $0xf03b0900
f0101797:	e8 04 83 01 00       	call   f0119aa0 <memcpy>
f010179c:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f010179f:	eb 68                	jmp    f0101809 <command_prompt_readline+0x8c2>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f01017a1:	a1 d4 47 15 f0       	mov    0xf01547d4,%eax
f01017a6:	c1 e0 0a             	shl    $0xa,%eax
f01017a9:	05 00 bd 3a f0       	add    $0xf03abd00,%eax
f01017ae:	83 ec 08             	sub    $0x8,%esp
f01017b1:	ff 75 0c             	pushl  0xc(%ebp)
f01017b4:	50                   	push   %eax
f01017b5:	e8 d4 81 01 00       	call   f011998e <strcmp>
f01017ba:	83 c4 10             	add    $0x10,%esp
f01017bd:	85 c0                	test   %eax,%eax
f01017bf:	74 48                	je     f0101809 <command_prompt_readline+0x8c2>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f01017c1:	a1 d4 47 15 f0       	mov    0xf01547d4,%eax
f01017c6:	40                   	inc    %eax
f01017c7:	a3 d4 47 15 f0       	mov    %eax,0xf01547d4
f01017cc:	a1 d4 47 15 f0       	mov    0xf01547d4,%eax
f01017d1:	c1 e0 0a             	shl    $0xa,%eax
f01017d4:	05 00 bd 3a f0       	add    $0xf03abd00,%eax
f01017d9:	83 ec 04             	sub    $0x4,%esp
f01017dc:	68 00 04 00 00       	push   $0x400
f01017e1:	ff 75 0c             	pushl  0xc(%ebp)
f01017e4:	50                   	push   %eax
f01017e5:	e8 b6 82 01 00       	call   f0119aa0 <memcpy>
f01017ea:	83 c4 10             	add    $0x10,%esp
			}
			return;
f01017ed:	eb 1a                	jmp    f0101809 <command_prompt_readline+0x8c2>

		}
		last_c = c;
f01017ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01017f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01017f5:	e9 9d f7 ff ff       	jmp    f0100f97 <command_prompt_readline+0x50>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01017fa:	90                   	nop
f01017fb:	e9 97 f7 ff ff       	jmp    f0100f97 <command_prompt_readline+0x50>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101800:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101801:	e9 91 f7 ff ff       	jmp    f0100f97 <command_prompt_readline+0x50>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101806:	90                   	nop
f0101807:	eb 01                	jmp    f010180a <command_prompt_readline+0x8c3>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101809:	90                   	nop

		}
		last_c = c;
	}
}
f010180a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010180d:	5b                   	pop    %ebx
f010180e:	5f                   	pop    %edi
f010180f:	5d                   	pop    %ebp
f0101810:	c3                   	ret    

f0101811 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f0101811:	55                   	push   %ebp
f0101812:	89 e5                	mov    %esp,%ebp
f0101814:	81 ec 08 04 00 00    	sub    $0x408,%esp
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f010181a:	83 ec 04             	sub    $0x4,%esp
f010181d:	68 00 04 00 00       	push   $0x400
f0101822:	6a 00                	push   $0x0
f0101824:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010182a:	50                   	push   %eax
f010182b:	e8 40 82 01 00       	call   f0119a70 <memset>
f0101830:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101833:	83 ec 08             	sub    $0x8,%esp
f0101836:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010183c:	50                   	push   %eax
f010183d:	68 a5 b8 11 f0       	push   $0xf011b8a5
f0101842:	e8 00 f7 ff ff       	call   f0100f47 <command_prompt_readline>
f0101847:	83 c4 10             	add    $0x10,%esp


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f010184a:	83 ec 0c             	sub    $0xc,%esp
f010184d:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101853:	50                   	push   %eax
f0101854:	e8 0d 00 00 00       	call   f0101866 <execute_command>
f0101859:	83 c4 10             	add    $0x10,%esp
f010185c:	85 c0                	test   %eax,%eax
f010185e:	78 02                	js     f0101862 <run_command_prompt+0x51>
				break;
	}
f0101860:	eb b8                	jmp    f010181a <run_command_prompt+0x9>


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101862:	90                   	nop
	}
}
f0101863:	90                   	nop
f0101864:	c9                   	leave  
f0101865:	c3                   	ret    

f0101866 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101866:	55                   	push   %ebp
f0101867:	89 e5                	mov    %esp,%ebp
f0101869:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f010186c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010186f:	50                   	push   %eax
f0101870:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0101873:	50                   	push   %eax
f0101874:	68 a0 b8 11 f0       	push   $0xf011b8a0
f0101879:	ff 75 08             	pushl  0x8(%ebp)
f010187c:	e8 35 86 01 00       	call   f0119eb6 <strsplit>
f0101881:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101884:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101887:	85 c0                	test   %eax,%eax
f0101889:	75 0a                	jne    f0101895 <execute_command+0x2f>
		return 0;
f010188b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101890:	e9 95 00 00 00       	jmp    f010192a <execute_command+0xc4>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0101895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010189c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01018a3:	eb 33                	jmp    f01018d8 <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f01018a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018a8:	89 d0                	mov    %edx,%eax
f01018aa:	01 c0                	add    %eax,%eax
f01018ac:	01 d0                	add    %edx,%eax
f01018ae:	c1 e0 02             	shl    $0x2,%eax
f01018b1:	05 40 45 15 f0       	add    $0xf0154540,%eax
f01018b6:	8b 10                	mov    (%eax),%edx
f01018b8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01018bb:	83 ec 08             	sub    $0x8,%esp
f01018be:	52                   	push   %edx
f01018bf:	50                   	push   %eax
f01018c0:	e8 c9 80 01 00       	call   f011998e <strcmp>
f01018c5:	83 c4 10             	add    $0x10,%esp
f01018c8:	85 c0                	test   %eax,%eax
f01018ca:	75 09                	jne    f01018d5 <execute_command+0x6f>
		{
			command_found = 1;
f01018cc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f01018d3:	eb 0b                	jmp    f01018e0 <execute_command+0x7a>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01018d5:	ff 45 f0             	incl   -0x10(%ebp)
f01018d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018db:	83 f8 36             	cmp    $0x36,%eax
f01018de:	76 c5                	jbe    f01018a5 <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f01018e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01018e4:	74 2b                	je     f0101911 <execute_command+0xab>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f01018e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018e9:	89 d0                	mov    %edx,%eax
f01018eb:	01 c0                	add    %eax,%eax
f01018ed:	01 d0                	add    %edx,%eax
f01018ef:	c1 e0 02             	shl    $0x2,%eax
f01018f2:	05 48 45 15 f0       	add    $0xf0154548,%eax
f01018f7:	8b 00                	mov    (%eax),%eax
f01018f9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01018fc:	83 ec 08             	sub    $0x8,%esp
f01018ff:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f0101902:	51                   	push   %ecx
f0101903:	52                   	push   %edx
f0101904:	ff d0                	call   *%eax
f0101906:	83 c4 10             	add    $0x10,%esp
f0101909:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f010190c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010190f:	eb 19                	jmp    f010192a <execute_command+0xc4>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101911:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0101914:	83 ec 08             	sub    $0x8,%esp
f0101917:	50                   	push   %eax
f0101918:	68 ab b8 11 f0       	push   $0xf011b8ab
f010191d:	e8 81 5c 00 00       	call   f01075a3 <cprintf>
f0101922:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101925:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010192a:	c9                   	leave  
f010192b:	c3                   	ret    

f010192c <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f010192c:	55                   	push   %ebp
f010192d:	89 e5                	mov    %esp,%ebp
f010192f:	53                   	push   %ebx
f0101930:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101933:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010193a:	eb 3b                	jmp    f0101977 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f010193c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010193f:	89 d0                	mov    %edx,%eax
f0101941:	01 c0                	add    %eax,%eax
f0101943:	01 d0                	add    %edx,%eax
f0101945:	c1 e0 02             	shl    $0x2,%eax
f0101948:	05 44 45 15 f0       	add    $0xf0154544,%eax
f010194d:	8b 10                	mov    (%eax),%edx
f010194f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101952:	89 c8                	mov    %ecx,%eax
f0101954:	01 c0                	add    %eax,%eax
f0101956:	01 c8                	add    %ecx,%eax
f0101958:	c1 e0 02             	shl    $0x2,%eax
f010195b:	05 40 45 15 f0       	add    $0xf0154540,%eax
f0101960:	8b 00                	mov    (%eax),%eax
f0101962:	83 ec 04             	sub    $0x4,%esp
f0101965:	52                   	push   %edx
f0101966:	50                   	push   %eax
f0101967:	68 c1 b8 11 f0       	push   $0xf011b8c1
f010196c:	e8 32 5c 00 00       	call   f01075a3 <cprintf>
f0101971:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101974:	ff 45 f4             	incl   -0xc(%ebp)
f0101977:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010197a:	83 f8 36             	cmp    $0x36,%eax
f010197d:	76 bd                	jbe    f010193c <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f010197f:	83 ec 0c             	sub    $0xc,%esp
f0101982:	68 ca b8 11 f0       	push   $0xf011b8ca
f0101987:	e8 17 5c 00 00       	call   f01075a3 <cprintf>
f010198c:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f010198f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101996:	eb 42                	jmp    f01019da <command_help+0xae>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101998:	8b 0d 70 49 15 f0    	mov    0xf0154970,%ecx
f010199e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01019a1:	89 d0                	mov    %edx,%eax
f01019a3:	01 c0                	add    %eax,%eax
f01019a5:	01 d0                	add    %edx,%eax
f01019a7:	c1 e0 02             	shl    $0x2,%eax
f01019aa:	01 c8                	add    %ecx,%eax
f01019ac:	8b 50 04             	mov    0x4(%eax),%edx
f01019af:	8b 1d 70 49 15 f0    	mov    0xf0154970,%ebx
f01019b5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019b8:	89 c8                	mov    %ecx,%eax
f01019ba:	01 c0                	add    %eax,%eax
f01019bc:	01 c8                	add    %ecx,%eax
f01019be:	c1 e0 02             	shl    $0x2,%eax
f01019c1:	01 d8                	add    %ebx,%eax
f01019c3:	8b 00                	mov    (%eax),%eax
f01019c5:	83 ec 04             	sub    $0x4,%esp
f01019c8:	52                   	push   %edx
f01019c9:	50                   	push   %eax
f01019ca:	68 df b8 11 f0       	push   $0xf011b8df
f01019cf:	e8 cf 5b 00 00       	call   f01075a3 <cprintf>
f01019d4:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f01019d7:	ff 45 f4             	incl   -0xc(%ebp)
f01019da:	a1 74 49 15 f0       	mov    0xf0154974,%eax
f01019df:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01019e2:	7c b4                	jl     f0101998 <command_help+0x6c>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f01019e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01019ec:	c9                   	leave  
f01019ed:	c3                   	ret    

f01019ee <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f01019ee:	55                   	push   %ebp
f01019ef:	89 e5                	mov    %esp,%ebp
f01019f1:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f01019f4:	83 ec 0c             	sub    $0xc,%esp
f01019f7:	68 fb b8 11 f0       	push   $0xf011b8fb
f01019fc:	e8 a2 5b 00 00       	call   f01075a3 <cprintf>
f0101a01:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101a04:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0101a09:	83 ec 04             	sub    $0x4,%esp
f0101a0c:	50                   	push   %eax
f0101a0d:	68 0c 00 10 f0       	push   $0xf010000c
f0101a12:	68 14 b9 11 f0       	push   $0xf011b914
f0101a17:	e8 87 5b 00 00       	call   f01075a3 <cprintf>
f0101a1c:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101a1f:	b8 85 ac 11 00       	mov    $0x11ac85,%eax
f0101a24:	83 ec 04             	sub    $0x4,%esp
f0101a27:	50                   	push   %eax
f0101a28:	68 85 ac 11 f0       	push   $0xf011ac85
f0101a2d:	68 50 b9 11 f0       	push   $0xf011b950
f0101a32:	e8 6c 5b 00 00       	call   f01075a3 <cprintf>
f0101a37:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0101a3a:	b8 d3 55 32 00       	mov    $0x3255d3,%eax
f0101a3f:	83 ec 04             	sub    $0x4,%esp
f0101a42:	50                   	push   %eax
f0101a43:	68 d3 55 32 f0       	push   $0xf03255d3
f0101a48:	68 8c b9 11 f0       	push   $0xf011b98c
f0101a4d:	e8 51 5b 00 00       	call   f01075a3 <cprintf>
f0101a52:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101a55:	b8 50 12 3b 00       	mov    $0x3b1250,%eax
f0101a5a:	83 ec 04             	sub    $0x4,%esp
f0101a5d:	50                   	push   %eax
f0101a5e:	68 50 12 3b f0       	push   $0xf03b1250
f0101a63:	68 d4 b9 11 f0       	push   $0xf011b9d4
f0101a68:	e8 36 5b 00 00       	call   f01075a3 <cprintf>
f0101a6d:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101a70:	b8 50 12 3b f0       	mov    $0xf03b1250,%eax
f0101a75:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101a7b:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101a80:	29 c2                	sub    %eax,%edx
f0101a82:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101a84:	85 c0                	test   %eax,%eax
f0101a86:	79 05                	jns    f0101a8d <command_kernel_info+0x9f>
f0101a88:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101a8d:	c1 f8 0a             	sar    $0xa,%eax
f0101a90:	83 ec 08             	sub    $0x8,%esp
f0101a93:	50                   	push   %eax
f0101a94:	68 10 ba 11 f0       	push   $0xf011ba10
f0101a99:	e8 05 5b 00 00       	call   f01075a3 <cprintf>
f0101a9e:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101aa1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101aa6:	c9                   	leave  
f0101aa7:	c3                   	ret    

f0101aa8 <command_writeusermem>:

int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101aa8:	55                   	push   %ebp
f0101aa9:	89 e5                	mov    %esp,%ebp
f0101aab:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101aae:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ab1:	83 c0 04             	add    $0x4,%eax
f0101ab4:	8b 00                	mov    (%eax),%eax
f0101ab6:	83 ec 04             	sub    $0x4,%esp
f0101ab9:	6a 0a                	push   $0xa
f0101abb:	6a 00                	push   $0x0
f0101abd:	50                   	push   %eax
f0101abe:	e8 1f 81 01 00       	call   f0119be2 <strtol>
f0101ac3:	83 c4 10             	add    $0x10,%esp
f0101ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101ac9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101ad0:	83 ec 04             	sub    $0x4,%esp
f0101ad3:	6a 00                	push   $0x0
f0101ad5:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101ad8:	50                   	push   %eax
f0101ad9:	ff 75 f4             	pushl  -0xc(%ebp)
f0101adc:	e8 23 19 00 00       	call   f0103404 <envid2env>
f0101ae1:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[3], NULL, 16);
f0101ae4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ae7:	83 c0 0c             	add    $0xc,%eax
f0101aea:	8b 00                	mov    (%eax),%eax
f0101aec:	83 ec 04             	sub    $0x4,%esp
f0101aef:	6a 10                	push   $0x10
f0101af1:	6a 00                	push   $0x0
f0101af3:	50                   	push   %eax
f0101af4:	e8 e9 80 01 00       	call   f0119be2 <strtol>
f0101af9:	83 c4 10             	add    $0x10,%esp
f0101afc:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101aff:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101b02:	85 c0                	test   %eax,%eax
f0101b04:	75 07                	jne    f0101b0d <command_writeusermem+0x65>
f0101b06:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b0b:	eb 43                	jmp    f0101b50 <command_writeusermem+0xa8>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101b0d:	0f 20 d8             	mov    %cr3,%eax
f0101b10:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101b13:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101b16:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32) (env->env_cr3));
f0101b19:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101b1c:	8b 40 60             	mov    0x60(%eax),%eax
f0101b1f:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101b22:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101b25:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101b28:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101b2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	*ptr = arguments[2][0];
f0101b2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b31:	83 c0 08             	add    $0x8,%eax
f0101b34:	8b 00                	mov    (%eax),%eax
f0101b36:	8a 00                	mov    (%eax),%al
f0101b38:	88 c2                	mov    %al,%dl
f0101b3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101b3d:	88 10                	mov    %dl,(%eax)
f0101b3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101b42:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101b45:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101b48:	0f 22 d8             	mov    %eax,%cr3
	lcr3(oldDir);

	return 0;
f0101b4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b50:	c9                   	leave  
f0101b51:	c3                   	ret    

f0101b52 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101b52:	55                   	push   %ebp
f0101b53:	89 e5                	mov    %esp,%ebp
f0101b55:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101b58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b5b:	83 c0 04             	add    $0x4,%eax
f0101b5e:	8b 00                	mov    (%eax),%eax
f0101b60:	83 ec 04             	sub    $0x4,%esp
f0101b63:	6a 10                	push   $0x10
f0101b65:	6a 00                	push   $0x0
f0101b67:	50                   	push   %eax
f0101b68:	e8 75 80 01 00       	call   f0119be2 <strtol>
f0101b6d:	83 c4 10             	add    $0x10,%esp
f0101b70:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b7b:	83 c0 08             	add    $0x8,%eax
f0101b7e:	8b 00                	mov    (%eax),%eax
f0101b80:	83 ec 04             	sub    $0x4,%esp
f0101b83:	6a 0a                	push   $0xa
f0101b85:	6a 00                	push   $0x0
f0101b87:	50                   	push   %eax
f0101b88:	e8 55 80 01 00       	call   f0119be2 <strtol>
f0101b8d:	83 c4 10             	add    $0x10,%esp
f0101b90:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101b93:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9d:	83 c0 0c             	add    $0xc,%eax
f0101ba0:	8b 00                	mov    (%eax),%eax
f0101ba2:	83 ec 0c             	sub    $0xc,%esp
f0101ba5:	50                   	push   %eax
f0101ba6:	e8 d7 7c 01 00       	call   f0119882 <strlen>
f0101bab:	83 c4 10             	add    $0x10,%esp
f0101bae:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101bb1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101bb8:	eb 30                	jmp    f0101bea <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101bba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101bc1:	eb 1c                	jmp    f0101bdf <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101bc3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc6:	83 c0 0c             	add    $0xc,%eax
f0101bc9:	8b 10                	mov    (%eax),%edx
f0101bcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bce:	01 d0                	add    %edx,%eax
f0101bd0:	8a 00                	mov    (%eax),%al
f0101bd2:	88 c2                	mov    %al,%dl
f0101bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101bd7:	88 10                	mov    %dl,(%eax)
			address++;
f0101bd9:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101bdc:	ff 45 ec             	incl   -0x14(%ebp)
f0101bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101be2:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101be5:	7c dc                	jl     f0101bc3 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101be7:	ff 45 f0             	incl   -0x10(%ebp)
f0101bea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101bed:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101bf0:	7c c8                	jl     f0101bba <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101bf2:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101bf7:	c9                   	leave  
f0101bf8:	c3                   	ret    

f0101bf9 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101bf9:	55                   	push   %ebp
f0101bfa:	89 e5                	mov    %esp,%ebp
f0101bfc:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101bff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c02:	83 c0 04             	add    $0x4,%eax
f0101c05:	8b 00                	mov    (%eax),%eax
f0101c07:	83 ec 04             	sub    $0x4,%esp
f0101c0a:	6a 0a                	push   $0xa
f0101c0c:	6a 00                	push   $0x0
f0101c0e:	50                   	push   %eax
f0101c0f:	e8 ce 7f 01 00       	call   f0119be2 <strtol>
f0101c14:	83 c4 10             	add    $0x10,%esp
f0101c17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101c1a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101c21:	83 ec 04             	sub    $0x4,%esp
f0101c24:	6a 00                	push   $0x0
f0101c26:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101c29:	50                   	push   %eax
f0101c2a:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c2d:	e8 d2 17 00 00       	call   f0103404 <envid2env>
f0101c32:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101c35:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c38:	83 c0 08             	add    $0x8,%eax
f0101c3b:	8b 00                	mov    (%eax),%eax
f0101c3d:	83 ec 04             	sub    $0x4,%esp
f0101c40:	6a 10                	push   $0x10
f0101c42:	6a 00                	push   $0x0
f0101c44:	50                   	push   %eax
f0101c45:	e8 98 7f 01 00       	call   f0119be2 <strtol>
f0101c4a:	83 c4 10             	add    $0x10,%esp
f0101c4d:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101c50:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c53:	85 c0                	test   %eax,%eax
f0101c55:	75 07                	jne    f0101c5e <command_readusermem+0x65>
f0101c57:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c5c:	eb 4e                	jmp    f0101cac <command_readusermem+0xb3>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101c5e:	0f 20 d8             	mov    %cr3,%eax
f0101c61:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101c64:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101c67:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101c6a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c6d:	8b 40 60             	mov    0x60(%eax),%eax
f0101c70:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101c73:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101c76:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101c79:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101c7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);
f0101c7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101c82:	8a 00                	mov    (%eax),%al
f0101c84:	0f b6 c0             	movzbl %al,%eax
f0101c87:	83 ec 04             	sub    $0x4,%esp
f0101c8a:	50                   	push   %eax
f0101c8b:	ff 75 f0             	pushl  -0x10(%ebp)
f0101c8e:	68 3b ba 11 f0       	push   $0xf011ba3b
f0101c93:	e8 0b 59 00 00       	call   f01075a3 <cprintf>
f0101c98:	83 c4 10             	add    $0x10,%esp
f0101c9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101c9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101ca1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101ca4:	0f 22 d8             	mov    %eax,%cr3

	lcr3(oldDir);
	return 0;
f0101ca7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cac:	c9                   	leave  
f0101cad:	c3                   	ret    

f0101cae <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101cae:	55                   	push   %ebp
f0101caf:	89 e5                	mov    %esp,%ebp
f0101cb1:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cb7:	83 c0 04             	add    $0x4,%eax
f0101cba:	8b 00                	mov    (%eax),%eax
f0101cbc:	83 ec 04             	sub    $0x4,%esp
f0101cbf:	6a 10                	push   $0x10
f0101cc1:	6a 00                	push   $0x0
f0101cc3:	50                   	push   %eax
f0101cc4:	e8 19 7f 01 00       	call   f0119be2 <strtol>
f0101cc9:	83 c4 10             	add    $0x10,%esp
f0101ccc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101cd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101cd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cd7:	83 c0 08             	add    $0x8,%eax
f0101cda:	8b 00                	mov    (%eax),%eax
f0101cdc:	83 ec 04             	sub    $0x4,%esp
f0101cdf:	6a 0a                	push   $0xa
f0101ce1:	6a 00                	push   $0x0
f0101ce3:	50                   	push   %eax
f0101ce4:	e8 f9 7e 01 00       	call   f0119be2 <strtol>
f0101ce9:	83 c4 10             	add    $0x10,%esp
f0101cec:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101cef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101cf6:	eb 22                	jmp    f0101d1a <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101cf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cfb:	8d 50 01             	lea    0x1(%eax),%edx
f0101cfe:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101d01:	8a 00                	mov    (%eax),%al
f0101d03:	0f b6 c0             	movzbl %al,%eax
f0101d06:	83 ec 08             	sub    $0x8,%esp
f0101d09:	50                   	push   %eax
f0101d0a:	68 55 ba 11 f0       	push   $0xf011ba55
f0101d0f:	e8 8f 58 00 00       	call   f01075a3 <cprintf>
f0101d14:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101d17:	ff 45 f0             	incl   -0x10(%ebp)
f0101d1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d1d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101d20:	7c d6                	jl     f0101cf8 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101d22:	83 ec 0c             	sub    $0xc,%esp
f0101d25:	68 58 ba 11 f0       	push   $0xf011ba58
f0101d2a:	e8 74 58 00 00       	call   f01075a3 <cprintf>
f0101d2f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d32:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d37:	c9                   	leave  
f0101d38:	c3                   	ret    

f0101d39 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101d39:	55                   	push   %ebp
f0101d3a:	89 e5                	mov    %esp,%ebp
f0101d3c:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d3f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d42:	83 c0 04             	add    $0x4,%eax
f0101d45:	8b 00                	mov    (%eax),%eax
f0101d47:	83 ec 04             	sub    $0x4,%esp
f0101d4a:	6a 0a                	push   $0xa
f0101d4c:	6a 00                	push   $0x0
f0101d4e:	50                   	push   %eax
f0101d4f:	e8 8e 7e 01 00       	call   f0119be2 <strtol>
f0101d54:	83 c4 10             	add    $0x10,%esp
f0101d57:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101d5a:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101d61:	83 ec 04             	sub    $0x4,%esp
f0101d64:	6a 00                	push   $0x0
f0101d66:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101d69:	50                   	push   %eax
f0101d6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0101d6d:	e8 92 16 00 00       	call   f0103404 <envid2env>
f0101d72:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101d75:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d78:	83 c0 08             	add    $0x8,%eax
f0101d7b:	8b 00                	mov    (%eax),%eax
f0101d7d:	83 ec 04             	sub    $0x4,%esp
f0101d80:	6a 10                	push   $0x10
f0101d82:	6a 00                	push   $0x0
f0101d84:	50                   	push   %eax
f0101d85:	e8 58 7e 01 00       	call   f0119be2 <strtol>
f0101d8a:	83 c4 10             	add    $0x10,%esp
f0101d8d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101d90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d93:	83 c0 0c             	add    $0xc,%eax
f0101d96:	8b 00                	mov    (%eax),%eax
f0101d98:	83 ec 04             	sub    $0x4,%esp
f0101d9b:	6a 0a                	push   $0xa
f0101d9d:	6a 00                	push   $0x0
f0101d9f:	50                   	push   %eax
f0101da0:	e8 3d 7e 01 00       	call   f0119be2 <strtol>
f0101da5:	83 c4 10             	add    $0x10,%esp
f0101da8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101dab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dae:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101db1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101db4:	85 c0                	test   %eax,%eax
f0101db6:	75 07                	jne    f0101dbf <command_readuserblock+0x86>
f0101db8:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dbd:	eb 65                	jmp    f0101e24 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101dbf:	0f 20 d8             	mov    %cr3,%eax
f0101dc2:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101dc5:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101dc8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101dcb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101dce:	8b 40 60             	mov    0x60(%eax),%eax
f0101dd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101dd4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101dd7:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101dda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101de1:	eb 28                	jmp    f0101e0b <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101de3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101de6:	8a 00                	mov    (%eax),%al
f0101de8:	0f b6 d0             	movzbl %al,%edx
f0101deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101dee:	8a 00                	mov    (%eax),%al
f0101df0:	0f b6 c0             	movzbl %al,%eax
f0101df3:	52                   	push   %edx
f0101df4:	50                   	push   %eax
f0101df5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101df8:	68 5a ba 11 f0       	push   $0xf011ba5a
f0101dfd:	e8 a1 57 00 00       	call   f01075a3 <cprintf>
f0101e02:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101e05:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101e08:	ff 45 f0             	incl   -0x10(%ebp)
f0101e0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e0e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101e11:	7c d0                	jl     f0101de3 <command_readuserblock+0xaa>
f0101e13:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101e16:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101e19:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101e1c:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101e1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e24:	c9                   	leave  
f0101e25:	c3                   	ret    

f0101e26 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101e26:	55                   	push   %ebp
f0101e27:	89 e5                	mov    %esp,%ebp
f0101e29:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101e2c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e2f:	83 c0 04             	add    $0x4,%eax
f0101e32:	8b 00                	mov    (%eax),%eax
f0101e34:	83 ec 04             	sub    $0x4,%esp
f0101e37:	6a 0a                	push   $0xa
f0101e39:	6a 00                	push   $0x0
f0101e3b:	50                   	push   %eax
f0101e3c:	e8 a1 7d 01 00       	call   f0119be2 <strtol>
f0101e41:	83 c4 10             	add    $0x10,%esp
f0101e44:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101e47:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101e4e:	83 ec 04             	sub    $0x4,%esp
f0101e51:	6a 00                	push   $0x0
f0101e53:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101e56:	50                   	push   %eax
f0101e57:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e5a:	e8 a5 15 00 00       	call   f0103404 <envid2env>
f0101e5f:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101e62:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e65:	85 c0                	test   %eax,%eax
f0101e67:	75 0a                	jne    f0101e73 <command_remove_table+0x4d>
f0101e69:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e6e:	e9 a1 00 00 00       	jmp    f0101f14 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101e73:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e76:	83 c0 08             	add    $0x8,%eax
f0101e79:	8b 00                	mov    (%eax),%eax
f0101e7b:	83 ec 04             	sub    $0x4,%esp
f0101e7e:	6a 10                	push   $0x10
f0101e80:	6a 00                	push   $0x0
f0101e82:	50                   	push   %eax
f0101e83:	e8 5a 7d 01 00       	call   f0119be2 <strtol>
f0101e88:	83 c4 10             	add    $0x10,%esp
f0101e8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101e8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e91:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101e94:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e97:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101e9a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101e9d:	c1 ea 16             	shr    $0x16,%edx
f0101ea0:	c1 e2 02             	shl    $0x2,%edx
f0101ea3:	01 d0                	add    %edx,%eax
f0101ea5:	8b 00                	mov    (%eax),%eax
f0101ea7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101eac:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and Frame_Info of the page table
		struct Frame_Info *table_frame_info = to_frame_info(table_pa);
f0101eaf:	83 ec 0c             	sub    $0xc,%esp
f0101eb2:	ff 75 e8             	pushl  -0x18(%ebp)
f0101eb5:	e8 8b ee ff ff       	call   f0100d45 <to_frame_info>
f0101eba:	83 c4 10             	add    $0x10,%esp
f0101ebd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_frame_info->references = 0;
f0101ec0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101ec3:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_frame_info);
f0101ec9:	83 ec 0c             	sub    $0xc,%esp
f0101ecc:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101ecf:	e8 0d 1f 00 00       	call   f0103de1 <free_frame>
f0101ed4:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101ed7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101eda:	c1 e8 16             	shr    $0x16,%eax
f0101edd:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101ee0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101ee3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101ee6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101ee9:	c1 e2 02             	shl    $0x2,%edx
f0101eec:	01 c2                	add    %eax,%edx
f0101eee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101ef1:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101ef4:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101ef7:	c1 e1 02             	shl    $0x2,%ecx
f0101efa:	01 c8                	add    %ecx,%eax
f0101efc:	8b 00                	mov    (%eax),%eax
f0101efe:	83 e0 fe             	and    $0xfffffffe,%eax
f0101f01:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0101f03:	0f 20 d8             	mov    %cr3,%eax
f0101f06:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101f09:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101f0c:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101f0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f14:	c9                   	leave  
f0101f15:	c3                   	ret    

f0101f16 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101f16:	55                   	push   %ebp
f0101f17:	89 e5                	mov    %esp,%ebp
f0101f19:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101f1c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f1f:	83 c0 04             	add    $0x4,%eax
f0101f22:	8b 00                	mov    (%eax),%eax
f0101f24:	83 ec 04             	sub    $0x4,%esp
f0101f27:	6a 0a                	push   $0xa
f0101f29:	6a 00                	push   $0x0
f0101f2b:	50                   	push   %eax
f0101f2c:	e8 b1 7c 01 00       	call   f0119be2 <strtol>
f0101f31:	83 c4 10             	add    $0x10,%esp
f0101f34:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101f37:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	envid2env(envId, &env, 0 );
f0101f3e:	83 ec 04             	sub    $0x4,%esp
f0101f41:	6a 00                	push   $0x0
f0101f43:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101f46:	50                   	push   %eax
f0101f47:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f4a:	e8 b5 14 00 00       	call   f0103404 <envid2env>
f0101f4f:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101f52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101f55:	85 c0                	test   %eax,%eax
f0101f57:	75 07                	jne    f0101f60 <command_allocuserpage+0x4a>
f0101f59:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f5e:	eb 6d                	jmp    f0101fcd <command_allocuserpage+0xb7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101f60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f63:	83 c0 08             	add    $0x8,%eax
f0101f66:	8b 00                	mov    (%eax),%eax
f0101f68:	83 ec 04             	sub    $0x4,%esp
f0101f6b:	6a 10                	push   $0x10
f0101f6d:	6a 00                	push   $0x0
f0101f6f:	50                   	push   %eax
f0101f70:	e8 6d 7c 01 00       	call   f0119be2 <strtol>
f0101f75:	83 c4 10             	add    $0x10,%esp
f0101f78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct Frame_Info * ptr_frame_info ;
	int ret = allocate_frame(&ptr_frame_info);
f0101f81:	83 ec 0c             	sub    $0xc,%esp
f0101f84:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101f87:	50                   	push   %eax
f0101f88:	e8 62 1d 00 00       	call   f0103cef <allocate_frame>
f0101f8d:	83 c4 10             	add    $0x10,%esp
f0101f90:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101f93:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101f97:	75 17                	jne    f0101fb0 <command_allocuserpage+0x9a>
	{
		cprintf("ERROR: no enough memory\n");
f0101f99:	83 ec 0c             	sub    $0xc,%esp
f0101f9c:	68 6b ba 11 f0       	push   $0xf011ba6b
f0101fa1:	e8 fd 55 00 00       	call   f01075a3 <cprintf>
f0101fa6:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101fa9:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fae:	eb 1d                	jmp    f0101fcd <command_allocuserpage+0xb7>
	}

	// Map this frame to the given user virtual address
	map_frame(env->env_page_directory, ptr_frame_info, va, PERM_WRITEABLE | PERM_USER);
f0101fb0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101fb3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101fb6:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101fb9:	6a 06                	push   $0x6
f0101fbb:	ff 75 ec             	pushl  -0x14(%ebp)
f0101fbe:	52                   	push   %edx
f0101fbf:	50                   	push   %eax
f0101fc0:	e8 7f 20 00 00       	call   f0104044 <map_frame>
f0101fc5:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fc8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fcd:	c9                   	leave  
f0101fce:	c3                   	ret    

f0101fcf <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101fcf:	55                   	push   %ebp
f0101fd0:	89 e5                	mov    %esp,%ebp
f0101fd2:	56                   	push   %esi
f0101fd3:	53                   	push   %ebx
f0101fd4:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101fd7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101fda:	83 ec 0c             	sub    $0xc,%esp
f0101fdd:	50                   	push   %eax
f0101fde:	e8 8e 25 00 00       	call   f0104571 <calculate_available_frames>
f0101fe3:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101fe6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101fe9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101fec:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101fef:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101ff2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101ff5:	01 de                	add    %ebx,%esi
f0101ff7:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101ffa:	01 f3                	add    %esi,%ebx
f0101ffc:	83 ec 0c             	sub    $0xc,%esp
f0101fff:	51                   	push   %ecx
f0102000:	52                   	push   %edx
f0102001:	50                   	push   %eax
f0102002:	53                   	push   %ebx
f0102003:	68 84 ba 11 f0       	push   $0xf011ba84
f0102008:	e8 96 55 00 00       	call   f01075a3 <cprintf>
f010200d:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102010:	a1 00 0d 3b f0       	mov    0xf03b0d00,%eax
f0102015:	83 ec 08             	sub    $0x8,%esp
f0102018:	50                   	push   %eax
f0102019:	68 dc ba 11 f0       	push   $0xf011badc
f010201e:	e8 80 55 00 00       	call   f01075a3 <cprintf>
f0102023:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102026:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010202b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010202e:	5b                   	pop    %ebx
f010202f:	5e                   	pop    %esi
f0102030:	5d                   	pop    %ebp
f0102031:	c3                   	ret    

f0102032 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102032:	55                   	push   %ebp
f0102033:	89 e5                	mov    %esp,%ebp
f0102035:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102038:	c7 45 f4 b8 0b 00 00 	movl   $0xbb8,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f010203f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102046:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
//#if USE_KHEAP
	{
		switch (number_of_arguments)
f010204d:	8b 45 08             	mov    0x8(%ebp),%eax
f0102050:	83 f8 04             	cmp    $0x4,%eax
f0102053:	0f 84 8c 00 00 00    	je     f01020e5 <CreateEnv+0xb3>
f0102059:	83 f8 05             	cmp    $0x5,%eax
f010205c:	74 0e                	je     f010206c <CreateEnv+0x3a>
f010205e:	83 f8 03             	cmp    $0x3,%eax
f0102061:	0f 84 dc 00 00 00    	je     f0102143 <CreateEnv+0x111>
f0102067:	e9 17 01 00 00       	jmp    f0102183 <CreateEnv+0x151>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRULists())
f010206c:	e8 e2 6a 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f0102071:	85 c0                	test   %eax,%eax
f0102073:	75 1a                	jne    f010208f <CreateEnv+0x5d>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102075:	83 ec 0c             	sub    $0xc,%esp
f0102078:	68 18 bb 11 f0       	push   $0xf011bb18
f010207d:	e8 21 55 00 00       	call   f01075a3 <cprintf>
f0102082:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0102085:	b8 00 00 00 00       	mov    $0x0,%eax
f010208a:	e9 bd 01 00 00       	jmp    f010224c <CreateEnv+0x21a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f010208f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102092:	83 c0 10             	add    $0x10,%eax
f0102095:	8b 00                	mov    (%eax),%eax
f0102097:	83 ec 04             	sub    $0x4,%esp
f010209a:	6a 0a                	push   $0xa
f010209c:	6a 00                	push   $0x0
f010209e:	50                   	push   %eax
f010209f:	e8 3e 7b 01 00       	call   f0119be2 <strtol>
f01020a4:	83 c4 10             	add    $0x10,%esp
f01020a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f01020aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020ad:	83 c0 0c             	add    $0xc,%eax
f01020b0:	8b 00                	mov    (%eax),%eax
f01020b2:	83 ec 04             	sub    $0x4,%esp
f01020b5:	6a 0a                	push   $0xa
f01020b7:	6a 00                	push   $0x0
f01020b9:	50                   	push   %eax
f01020ba:	e8 23 7b 01 00       	call   f0119be2 <strtol>
f01020bf:	83 c4 10             	add    $0x10,%esp
f01020c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f01020c5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020c8:	83 c0 08             	add    $0x8,%eax
f01020cb:	8b 00                	mov    (%eax),%eax
f01020cd:	83 ec 04             	sub    $0x4,%esp
f01020d0:	6a 0a                	push   $0xa
f01020d2:	6a 00                	push   $0x0
f01020d4:	50                   	push   %eax
f01020d5:	e8 08 7b 01 00       	call   f0119be2 <strtol>
f01020da:	83 c4 10             	add    $0x10,%esp
f01020dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01020e0:	e9 b8 00 00 00       	jmp    f010219d <CreateEnv+0x16b>
		case 4:
			if(!isPageReplacmentAlgorithmLRULists())
f01020e5:	e8 69 6a 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f01020ea:	85 c0                	test   %eax,%eax
f01020ec:	75 1d                	jne    f010210b <CreateEnv+0xd9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f01020ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020f1:	83 c0 0c             	add    $0xc,%eax
f01020f4:	8b 00                	mov    (%eax),%eax
f01020f6:	83 ec 04             	sub    $0x4,%esp
f01020f9:	6a 0a                	push   $0xa
f01020fb:	6a 00                	push   $0x0
f01020fd:	50                   	push   %eax
f01020fe:	e8 df 7a 01 00       	call   f0119be2 <strtol>
f0102103:	83 c4 10             	add    $0x10,%esp
f0102106:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102109:	eb 1b                	jmp    f0102126 <CreateEnv+0xf4>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f010210b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010210e:	83 c0 0c             	add    $0xc,%eax
f0102111:	8b 00                	mov    (%eax),%eax
f0102113:	83 ec 04             	sub    $0x4,%esp
f0102116:	6a 0a                	push   $0xa
f0102118:	6a 00                	push   $0x0
f010211a:	50                   	push   %eax
f010211b:	e8 c2 7a 01 00       	call   f0119be2 <strtol>
f0102120:	83 c4 10             	add    $0x10,%esp
f0102123:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0102126:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102129:	83 c0 08             	add    $0x8,%eax
f010212c:	8b 00                	mov    (%eax),%eax
f010212e:	83 ec 04             	sub    $0x4,%esp
f0102131:	6a 0a                	push   $0xa
f0102133:	6a 00                	push   $0x0
f0102135:	50                   	push   %eax
f0102136:	e8 a7 7a 01 00       	call   f0119be2 <strtol>
f010213b:	83 c4 10             	add    $0x10,%esp
f010213e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0102141:	eb 5a                	jmp    f010219d <CreateEnv+0x16b>
		case 3:
			if(isPageReplacmentAlgorithmLRULists())
f0102143:	e8 0b 6a 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f0102148:	85 c0                	test   %eax,%eax
f010214a:	74 1a                	je     f0102166 <CreateEnv+0x134>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f010214c:	83 ec 0c             	sub    $0xc,%esp
f010214f:	68 d8 bb 11 f0       	push   $0xf011bbd8
f0102154:	e8 4a 54 00 00       	call   f01075a3 <cprintf>
f0102159:	83 c4 10             	add    $0x10,%esp
				return NULL;
f010215c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102161:	e9 e6 00 00 00       	jmp    f010224c <CreateEnv+0x21a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0102166:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102169:	83 c0 08             	add    $0x8,%eax
f010216c:	8b 00                	mov    (%eax),%eax
f010216e:	83 ec 04             	sub    $0x4,%esp
f0102171:	6a 0a                	push   $0xa
f0102173:	6a 00                	push   $0x0
f0102175:	50                   	push   %eax
f0102176:	e8 67 7a 01 00       	call   f0119be2 <strtol>
f010217b:	83 c4 10             	add    $0x10,%esp
f010217e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0102181:	eb 1a                	jmp    f010219d <CreateEnv+0x16b>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102183:	83 ec 0c             	sub    $0xc,%esp
f0102186:	68 68 bc 11 f0       	push   $0xf011bc68
f010218b:	e8 13 54 00 00       	call   f01075a3 <cprintf>
f0102190:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102193:	b8 00 00 00 00       	mov    $0x0,%eax
f0102198:	e9 af 00 00 00       	jmp    f010224c <CreateEnv+0x21a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f010219d:	81 7d f4 b8 0b 00 00 	cmpl   $0xbb8,-0xc(%ebp)
f01021a4:	76 1f                	jbe    f01021c5 <CreateEnv+0x193>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f01021a6:	83 ec 08             	sub    $0x8,%esp
f01021a9:	68 b8 0b 00 00       	push   $0xbb8
f01021ae:	68 00 bd 11 f0       	push   $0xf011bd00
f01021b3:	e8 eb 53 00 00       	call   f01075a3 <cprintf>
f01021b8:	83 c4 10             	add    $0x10,%esp
			return NULL;
f01021bb:	b8 00 00 00 00       	mov    $0x0,%eax
f01021c0:	e9 87 00 00 00       	jmp    f010224c <CreateEnv+0x21a>
		}
		if(isPageReplacmentAlgorithmLRULists())
f01021c5:	e8 89 69 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f01021ca:	85 c0                	test   %eax,%eax
f01021cc:	74 20                	je     f01021ee <CreateEnv+0x1bc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f01021ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021d1:	48                   	dec    %eax
f01021d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01021d5:	73 17                	jae    f01021ee <CreateEnv+0x1bc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f01021d7:	83 ec 0c             	sub    $0xc,%esp
f01021da:	68 40 bd 11 f0       	push   $0xf011bd40
f01021df:	e8 bf 53 00 00       	call   f01075a3 <cprintf>
f01021e4:	83 c4 10             	add    $0x10,%esp
				return NULL;
f01021e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01021ec:	eb 5e                	jmp    f010224c <CreateEnv+0x21a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f01021ee:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f01021f2:	76 19                	jbe    f010220d <CreateEnv+0x1db>
f01021f4:	68 98 bd 11 f0       	push   $0xf011bd98
f01021f9:	68 dd bd 11 f0       	push   $0xf011bddd
f01021fe:	68 ef 02 00 00       	push   $0x2ef
f0102203:	68 f2 bd 11 f0       	push   $0xf011bdf2
f0102208:	e8 86 df ff ff       	call   f0100193 <_panic>
//		{
//			LRUSecondListSize = __LRU_SNDLST_SIZE;
//		}
//	}
//#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f010220d:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0102211:	76 19                	jbe    f010222c <CreateEnv+0x1fa>
f0102213:	68 98 bd 11 f0       	push   $0xf011bd98
f0102218:	68 dd bd 11 f0       	push   $0xf011bddd
f010221d:	68 06 03 00 00       	push   $0x306
f0102222:	68 f2 bd 11 f0       	push   $0xf011bdf2
f0102227:	e8 67 df ff ff       	call   f0100193 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f010222c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010222f:	83 c0 04             	add    $0x4,%eax
f0102232:	8b 00                	mov    (%eax),%eax
f0102234:	ff 75 ec             	pushl  -0x14(%ebp)
f0102237:	ff 75 f0             	pushl  -0x10(%ebp)
f010223a:	ff 75 f4             	pushl  -0xc(%ebp)
f010223d:	50                   	push   %eax
f010223e:	e8 3f 38 00 00       	call   f0105a82 <env_create>
f0102243:	83 c4 10             	add    $0x10,%esp
f0102246:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0102249:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010224c:	c9                   	leave  
f010224d:	c3                   	ret    

f010224e <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f010224e:	55                   	push   %ebp
f010224f:	89 e5                	mov    %esp,%ebp
f0102251:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102254:	83 ec 08             	sub    $0x8,%esp
f0102257:	ff 75 0c             	pushl  0xc(%ebp)
f010225a:	ff 75 08             	pushl  0x8(%ebp)
f010225d:	e8 d0 fd ff ff       	call   f0102032 <CreateEnv>
f0102262:	83 c4 10             	add    $0x10,%esp
f0102265:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102268:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010226c:	75 07                	jne    f0102275 <command_run_program+0x27>
f010226e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102273:	eb 46                	jmp    f01022bb <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102275:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102278:	8b 40 4c             	mov    0x4c(%eax),%eax
f010227b:	83 ec 08             	sub    $0x8,%esp
f010227e:	50                   	push   %eax
f010227f:	68 08 be 11 f0       	push   $0xf011be08
f0102284:	e8 1a 53 00 00       	call   f01075a3 <cprintf>
f0102289:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f010228c:	c7 05 00 0d 3b f0 00 	movl   $0x0,0xf03b0d00
f0102293:	00 00 00 

	sched_new_env(env);
f0102296:	83 ec 0c             	sub    $0xc,%esp
f0102299:	ff 75 f4             	pushl  -0xc(%ebp)
f010229c:	e8 92 79 00 00       	call   f0109c33 <sched_new_env>
f01022a1:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f01022a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01022a7:	8b 40 4c             	mov    0x4c(%eax),%eax
f01022aa:	83 ec 0c             	sub    $0xc,%esp
f01022ad:	50                   	push   %eax
f01022ae:	e8 97 79 00 00       	call   f0109c4a <sched_run_env>
f01022b3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022bb:	c9                   	leave  
f01022bc:	c3                   	ret    

f01022bd <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f01022bd:	55                   	push   %ebp
f01022be:	89 e5                	mov    %esp,%ebp
f01022c0:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01022c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022c6:	83 c0 04             	add    $0x4,%eax
f01022c9:	8b 00                	mov    (%eax),%eax
f01022cb:	83 ec 04             	sub    $0x4,%esp
f01022ce:	6a 0a                	push   $0xa
f01022d0:	6a 00                	push   $0x0
f01022d2:	50                   	push   %eax
f01022d3:	e8 0a 79 01 00       	call   f0119be2 <strtol>
f01022d8:	83 c4 10             	add    $0x10,%esp
f01022db:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f01022de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01022e1:	83 ec 0c             	sub    $0xc,%esp
f01022e4:	50                   	push   %eax
f01022e5:	e8 98 7d 00 00       	call   f010a082 <sched_kill_env>
f01022ea:	83 c4 10             	add    $0x10,%esp

	return 0;
f01022ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022f2:	c9                   	leave  
f01022f3:	c3                   	ret    

f01022f4 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f01022f4:	55                   	push   %ebp
f01022f5:	89 e5                	mov    %esp,%ebp
f01022f7:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f01022fa:	83 ec 08             	sub    $0x8,%esp
f01022fd:	ff 75 0c             	pushl  0xc(%ebp)
f0102300:	ff 75 08             	pushl  0x8(%ebp)
f0102303:	e8 2a fd ff ff       	call   f0102032 <CreateEnv>
f0102308:	83 c4 10             	add    $0x10,%esp
f010230b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f010230e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102312:	75 07                	jne    f010231b <commnad_load_env+0x27>
		return 0 ;
f0102314:	b8 00 00 00 00       	mov    $0x0,%eax
f0102319:	eb 2a                	jmp    f0102345 <commnad_load_env+0x51>

	sched_new_env(env) ;
f010231b:	83 ec 0c             	sub    $0xc,%esp
f010231e:	ff 75 f4             	pushl  -0xc(%ebp)
f0102321:	e8 0d 79 00 00       	call   f0109c33 <sched_new_env>
f0102326:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102329:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010232c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010232f:	83 ec 08             	sub    $0x8,%esp
f0102332:	50                   	push   %eax
f0102333:	68 08 be 11 f0       	push   $0xf011be08
f0102338:	e8 66 52 00 00       	call   f01075a3 <cprintf>
f010233d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102340:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102345:	c9                   	leave  
f0102346:	c3                   	ret    

f0102347 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102347:	55                   	push   %ebp
f0102348:	89 e5                	mov    %esp,%ebp
f010234a:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f010234d:	c7 05 00 0d 3b f0 00 	movl   $0x0,0xf03b0d00
f0102354:	00 00 00 
	sched_run_all();
f0102357:	e8 ec 74 00 00       	call   f0109848 <sched_run_all>

	return 0 ;
f010235c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102361:	c9                   	leave  
f0102362:	c3                   	ret    

f0102363 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0102363:	55                   	push   %ebp
f0102364:	89 e5                	mov    %esp,%ebp
f0102366:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102369:	e8 cf 72 00 00       	call   f010963d <sched_print_all>

	return 0 ;
f010236e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102373:	c9                   	leave  
f0102374:	c3                   	ret    

f0102375 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102375:	55                   	push   %ebp
f0102376:	89 e5                	mov    %esp,%ebp
f0102378:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f010237b:	e8 84 75 00 00       	call   f0109904 <sched_kill_all>

	return 0 ;
f0102380:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102385:	c9                   	leave  
f0102386:	c3                   	ret    

f0102387 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102387:	55                   	push   %ebp
f0102388:	89 e5                	mov    %esp,%ebp
f010238a:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f010238d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0102391:	7f 1a                	jg     f01023ad <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102393:	83 ec 0c             	sub    $0xc,%esp
f0102396:	68 20 be 11 f0       	push   $0xf011be20
f010239b:	e8 03 52 00 00       	call   f01075a3 <cprintf>
f01023a0:	83 c4 10             	add    $0x10,%esp
		return 0;
f01023a3:	b8 00 00 00 00       	mov    $0x0,%eax
f01023a8:	e9 83 00 00 00       	jmp    f0102430 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f01023ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023b0:	83 c0 04             	add    $0x4,%eax
f01023b3:	8b 00                	mov    (%eax),%eax
f01023b5:	83 ec 04             	sub    $0x4,%esp
f01023b8:	6a 0a                	push   $0xa
f01023ba:	6a 00                	push   $0x0
f01023bc:	50                   	push   %eax
f01023bd:	e8 20 78 01 00       	call   f0119be2 <strtol>
f01023c2:	83 c4 10             	add    $0x10,%esp
f01023c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f01023c8:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01023cc:	75 20                	jne    f01023ee <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f01023ce:	83 ec 0c             	sub    $0xc,%esp
f01023d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01023d4:	e8 f9 66 00 00       	call   f0108ad2 <setPageReplacmentAlgorithmLRU>
f01023d9:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f01023dc:	83 ec 0c             	sub    $0xc,%esp
f01023df:	68 80 be 11 f0       	push   $0xf011be80
f01023e4:	e8 ba 51 00 00       	call   f01075a3 <cprintf>
f01023e9:	83 c4 10             	add    $0x10,%esp
f01023ec:	eb 3d                	jmp    f010242b <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f01023ee:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01023f2:	75 20                	jne    f0102414 <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f01023f4:	83 ec 0c             	sub    $0xc,%esp
f01023f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01023fa:	e8 d3 66 00 00       	call   f0108ad2 <setPageReplacmentAlgorithmLRU>
f01023ff:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0102402:	83 ec 0c             	sub    $0xc,%esp
f0102405:	68 c4 be 11 f0       	push   $0xf011bec4
f010240a:	e8 94 51 00 00       	call   f01075a3 <cprintf>
f010240f:	83 c4 10             	add    $0x10,%esp
f0102412:	eb 17                	jmp    f010242b <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0102414:	83 ec 0c             	sub    $0xc,%esp
f0102417:	68 04 bf 11 f0       	push   $0xf011bf04
f010241c:	e8 82 51 00 00       	call   f01075a3 <cprintf>
f0102421:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102424:	b8 00 00 00 00       	mov    $0x0,%eax
f0102429:	eb 05                	jmp    f0102430 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f010242b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102430:	c9                   	leave  
f0102431:	c3                   	ret    

f0102432 <command_set_page_rep_CLOCK>:

int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0102432:	55                   	push   %ebp
f0102433:	89 e5                	mov    %esp,%ebp
f0102435:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0102438:	e8 cb 66 00 00       	call   f0108b08 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f010243d:	83 ec 0c             	sub    $0xc,%esp
f0102440:	68 58 bf 11 f0       	push   $0xf011bf58
f0102445:	e8 59 51 00 00       	call   f01075a3 <cprintf>
f010244a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010244d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102452:	c9                   	leave  
f0102453:	c3                   	ret    

f0102454 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0102454:	55                   	push   %ebp
f0102455:	89 e5                	mov    %esp,%ebp
f0102457:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f010245a:	e8 b9 66 00 00       	call   f0108b18 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f010245f:	83 ec 0c             	sub    $0xc,%esp
f0102462:	68 84 bf 11 f0       	push   $0xf011bf84
f0102467:	e8 37 51 00 00       	call   f01075a3 <cprintf>
f010246c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010246f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102474:	c9                   	leave  
f0102475:	c3                   	ret    

f0102476 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0102476:	55                   	push   %ebp
f0102477:	89 e5                	mov    %esp,%ebp
f0102479:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f010247c:	e8 a7 66 00 00       	call   f0108b28 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0102481:	83 ec 0c             	sub    $0xc,%esp
f0102484:	68 ac bf 11 f0       	push   $0xf011bfac
f0102489:	e8 15 51 00 00       	call   f01075a3 <cprintf>
f010248e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102491:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102496:	c9                   	leave  
f0102497:	c3                   	ret    

f0102498 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0102498:	55                   	push   %ebp
f0102499:	89 e5                	mov    %esp,%ebp
f010249b:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f010249e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024a1:	83 c0 04             	add    $0x4,%eax
f01024a4:	8b 00                	mov    (%eax),%eax
f01024a6:	83 ec 04             	sub    $0x4,%esp
f01024a9:	6a 0a                	push   $0xa
f01024ab:	6a 00                	push   $0x0
f01024ad:	50                   	push   %eax
f01024ae:	e8 2f 77 01 00       	call   f0119be2 <strtol>
f01024b3:	83 c4 10             	add    $0x10,%esp
f01024b6:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f01024b9:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01024bd:	83 ec 0c             	sub    $0xc,%esp
f01024c0:	50                   	push   %eax
f01024c1:	e8 e0 6e 00 00       	call   f01093a6 <sched_init_RR>
f01024c6:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f01024c9:	a0 b4 2c 39 f0       	mov    0xf0392cb4,%al
f01024ce:	0f b6 c0             	movzbl %al,%eax
f01024d1:	83 ec 08             	sub    $0x8,%esp
f01024d4:	50                   	push   %eax
f01024d5:	68 e0 bf 11 f0       	push   $0xf011bfe0
f01024da:	e8 c4 50 00 00       	call   f01075a3 <cprintf>
f01024df:	83 c4 10             	add    $0x10,%esp
	return 0;
f01024e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024e7:	c9                   	leave  
f01024e8:	c3                   	ret    

f01024e9 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f01024e9:	55                   	push   %ebp
f01024ea:	89 e5                	mov    %esp,%ebp
f01024ec:	53                   	push   %ebx
f01024ed:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01024f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024f3:	83 c0 04             	add    $0x4,%eax
f01024f6:	8b 00                	mov    (%eax),%eax
f01024f8:	83 ec 04             	sub    $0x4,%esp
f01024fb:	6a 0a                	push   $0xa
f01024fd:	6a 00                	push   $0x0
f01024ff:	50                   	push   %eax
f0102500:	e8 dd 76 01 00       	call   f0119be2 <strtol>
f0102505:	83 c4 10             	add    $0x10,%esp
f0102508:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010250b:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102512:	eb 2e                	jmp    f0102542 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102514:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102517:	8d 58 fe             	lea    -0x2(%eax),%ebx
f010251a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010251d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102524:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102527:	01 d0                	add    %edx,%eax
f0102529:	8b 00                	mov    (%eax),%eax
f010252b:	83 ec 04             	sub    $0x4,%esp
f010252e:	6a 0a                	push   $0xa
f0102530:	6a 00                	push   $0x0
f0102532:	50                   	push   %eax
f0102533:	e8 aa 76 01 00       	call   f0119be2 <strtol>
f0102538:	83 c4 10             	add    $0x10,%esp
f010253b:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010253f:	ff 45 f4             	incl   -0xc(%ebp)
f0102542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102545:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102548:	7c ca                	jl     f0102514 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010254a:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010254e:	83 ec 08             	sub    $0x8,%esp
f0102551:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102554:	52                   	push   %edx
f0102555:	50                   	push   %eax
f0102556:	e8 72 6c 00 00       	call   f01091cd <sched_init_MLFQ>
f010255b:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010255e:	83 ec 0c             	sub    $0xc,%esp
f0102561:	68 18 c0 11 f0       	push   $0xf011c018
f0102566:	e8 38 50 00 00       	call   f01075a3 <cprintf>
f010256b:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010256e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102575:	eb 21                	jmp    f0102598 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0102577:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010257a:	05 b4 2c 39 f0       	add    $0xf0392cb4,%eax
f010257f:	8a 00                	mov    (%eax),%al
f0102581:	0f b6 c0             	movzbl %al,%eax
f0102584:	83 ec 08             	sub    $0x8,%esp
f0102587:	50                   	push   %eax
f0102588:	68 45 c0 11 f0       	push   $0xf011c045
f010258d:	e8 11 50 00 00       	call   f01075a3 <cprintf>
f0102592:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102595:	ff 45 f0             	incl   -0x10(%ebp)
f0102598:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010259d:	0f b6 c0             	movzbl %al,%eax
f01025a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01025a3:	7f d2                	jg     f0102577 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f01025a5:	83 ec 0c             	sub    $0xc,%esp
f01025a8:	68 58 ba 11 f0       	push   $0xf011ba58
f01025ad:	e8 f1 4f 00 00       	call   f01075a3 <cprintf>
f01025b2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025b5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01025bd:	c9                   	leave  
f01025be:	c3                   	ret    

f01025bf <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f01025bf:	55                   	push   %ebp
f01025c0:	89 e5                	mov    %esp,%ebp
f01025c2:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f01025c5:	e8 5f 6b 00 00       	call   f0109129 <isSchedMethodMLFQ>
f01025ca:	85 c0                	test   %eax,%eax
f01025cc:	74 59                	je     f0102627 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f01025ce:	83 ec 0c             	sub    $0xc,%esp
f01025d1:	68 4c c0 11 f0       	push   $0xf011c04c
f01025d6:	e8 c8 4f 00 00       	call   f01075a3 <cprintf>
f01025db:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01025de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01025e5:	eb 21                	jmp    f0102608 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f01025e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01025ea:	05 b4 2c 39 f0       	add    $0xf0392cb4,%eax
f01025ef:	8a 00                	mov    (%eax),%al
f01025f1:	0f b6 c0             	movzbl %al,%eax
f01025f4:	83 ec 08             	sub    $0x8,%esp
f01025f7:	50                   	push   %eax
f01025f8:	68 45 c0 11 f0       	push   $0xf011c045
f01025fd:	e8 a1 4f 00 00       	call   f01075a3 <cprintf>
f0102602:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102605:	ff 45 f4             	incl   -0xc(%ebp)
f0102608:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010260d:	0f b6 c0             	movzbl %al,%eax
f0102610:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102613:	7f d2                	jg     f01025e7 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102615:	83 ec 0c             	sub    $0xc,%esp
f0102618:	68 58 ba 11 f0       	push   $0xf011ba58
f010261d:	e8 81 4f 00 00       	call   f01075a3 <cprintf>
f0102622:	83 c4 10             	add    $0x10,%esp
f0102625:	eb 34                	jmp    f010265b <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0102627:	e8 e3 6a 00 00       	call   f010910f <isSchedMethodRR>
f010262c:	85 c0                	test   %eax,%eax
f010262e:	74 1b                	je     f010264b <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102630:	a0 b4 2c 39 f0       	mov    0xf0392cb4,%al
f0102635:	0f b6 c0             	movzbl %al,%eax
f0102638:	83 ec 08             	sub    $0x8,%esp
f010263b:	50                   	push   %eax
f010263c:	68 80 c0 11 f0       	push   $0xf011c080
f0102641:	e8 5d 4f 00 00       	call   f01075a3 <cprintf>
f0102646:	83 c4 10             	add    $0x10,%esp
f0102649:	eb 10                	jmp    f010265b <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f010264b:	83 ec 0c             	sub    $0xc,%esp
f010264e:	68 bc c0 11 f0       	push   $0xf011c0bc
f0102653:	e8 4b 4f 00 00       	call   f01075a3 <cprintf>
f0102658:	83 c4 10             	add    $0x10,%esp

	return 0;
f010265b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102660:	c9                   	leave  
f0102661:	c3                   	ret    

f0102662 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102662:	55                   	push   %ebp
f0102663:	89 e5                	mov    %esp,%ebp
f0102665:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0102668:	8b 45 0c             	mov    0xc(%ebp),%eax
f010266b:	83 c0 04             	add    $0x4,%eax
f010266e:	8b 00                	mov    (%eax),%eax
f0102670:	83 ec 04             	sub    $0x4,%esp
f0102673:	6a 0a                	push   $0xa
f0102675:	6a 00                	push   $0x0
f0102677:	50                   	push   %eax
f0102678:	e8 65 75 01 00       	call   f0119be2 <strtol>
f010267d:	83 c4 10             	add    $0x10,%esp
f0102680:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102683:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102686:	0f b6 c0             	movzbl %al,%eax
f0102689:	83 ec 0c             	sub    $0xc,%esp
f010268c:	50                   	push   %eax
f010268d:	e8 b3 80 01 00       	call   f011a745 <chksch>
f0102692:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102695:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102699:	75 12                	jne    f01026ad <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010269b:	83 ec 0c             	sub    $0xc,%esp
f010269e:	68 e4 c0 11 f0       	push   $0xf011c0e4
f01026a3:	e8 fb 4e 00 00       	call   f01075a3 <cprintf>
f01026a8:	83 c4 10             	add    $0x10,%esp
f01026ab:	eb 16                	jmp    f01026c3 <command_sch_test+0x61>
	else if (status == 1)
f01026ad:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01026b1:	75 10                	jne    f01026c3 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f01026b3:	83 ec 0c             	sub    $0xc,%esp
f01026b6:	68 0c c1 11 f0       	push   $0xf011c10c
f01026bb:	e8 e3 4e 00 00       	call   f01075a3 <cprintf>
f01026c0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026c8:	c9                   	leave  
f01026c9:	c3                   	ret    

f01026ca <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01026ca:	55                   	push   %ebp
f01026cb:	89 e5                	mov    %esp,%ebp
f01026cd:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01026d0:	e8 99 64 00 00       	call   f0108b6e <isPageReplacmentAlgorithmCLOCK>
f01026d5:	85 c0                	test   %eax,%eax
f01026d7:	74 12                	je     f01026eb <command_print_page_rep+0x21>
		cprintf("Page replacement algorithm is CLOCK\n");
f01026d9:	83 ec 0c             	sub    $0xc,%esp
f01026dc:	68 30 c1 11 f0       	push   $0xf011c130
f01026e1:	e8 bd 4e 00 00       	call   f01075a3 <cprintf>
f01026e6:	83 c4 10             	add    $0x10,%esp
f01026e9:	eb 7c                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmLRUTimeStamp())
f01026eb:	e8 48 64 00 00       	call   f0108b38 <isPageReplacmentAlgorithmLRUTimeStamp>
f01026f0:	85 c0                	test   %eax,%eax
f01026f2:	74 12                	je     f0102706 <command_print_page_rep+0x3c>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01026f4:	83 ec 0c             	sub    $0xc,%esp
f01026f7:	68 58 c1 11 f0       	push   $0xf011c158
f01026fc:	e8 a2 4e 00 00       	call   f01075a3 <cprintf>
f0102701:	83 c4 10             	add    $0x10,%esp
f0102704:	eb 61                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmLRULists())
f0102706:	e8 48 64 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f010270b:	85 c0                	test   %eax,%eax
f010270d:	74 12                	je     f0102721 <command_print_page_rep+0x57>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f010270f:	83 ec 0c             	sub    $0xc,%esp
f0102712:	68 98 c1 11 f0       	push   $0xf011c198
f0102717:	e8 87 4e 00 00       	call   f01075a3 <cprintf>
f010271c:	83 c4 10             	add    $0x10,%esp
f010271f:	eb 46                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmFIFO())
f0102721:	e8 63 64 00 00       	call   f0108b89 <isPageReplacmentAlgorithmFIFO>
f0102726:	85 c0                	test   %eax,%eax
f0102728:	74 12                	je     f010273c <command_print_page_rep+0x72>
		cprintf("Page replacement algorithm is FIFO\n");
f010272a:	83 ec 0c             	sub    $0xc,%esp
f010272d:	68 d4 c1 11 f0       	push   $0xf011c1d4
f0102732:	e8 6c 4e 00 00       	call   f01075a3 <cprintf>
f0102737:	83 c4 10             	add    $0x10,%esp
f010273a:	eb 2b                	jmp    f0102767 <command_print_page_rep+0x9d>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010273c:	e8 63 64 00 00       	call   f0108ba4 <isPageReplacmentAlgorithmModifiedCLOCK>
f0102741:	85 c0                	test   %eax,%eax
f0102743:	74 12                	je     f0102757 <command_print_page_rep+0x8d>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0102745:	83 ec 0c             	sub    $0xc,%esp
f0102748:	68 f8 c1 11 f0       	push   $0xf011c1f8
f010274d:	e8 51 4e 00 00       	call   f01075a3 <cprintf>
f0102752:	83 c4 10             	add    $0x10,%esp
f0102755:	eb 10                	jmp    f0102767 <command_print_page_rep+0x9d>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102757:	83 ec 0c             	sub    $0xc,%esp
f010275a:	68 28 c2 11 f0       	push   $0xf011c228
f010275f:	e8 3f 4e 00 00       	call   f01075a3 <cprintf>
f0102764:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102767:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010276c:	c9                   	leave  
f010276d:	c3                   	ret    

f010276e <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010276e:	55                   	push   %ebp
f010276f:	89 e5                	mov    %esp,%ebp
f0102771:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0102774:	e8 04 26 00 00       	call   f0104d7d <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0102779:	83 ec 0c             	sub    $0xc,%esp
f010277c:	68 54 c2 11 f0       	push   $0xf011c254
f0102781:	e8 1d 4e 00 00       	call   f01075a3 <cprintf>
f0102786:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102789:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010278e:	c9                   	leave  
f010278f:	c3                   	ret    

f0102790 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102790:	55                   	push   %ebp
f0102791:	89 e5                	mov    %esp,%ebp
f0102793:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102796:	e8 f2 25 00 00       	call   f0104d8d <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010279b:	83 ec 0c             	sub    $0xc,%esp
f010279e:	68 84 c2 11 f0       	push   $0xf011c284
f01027a3:	e8 fb 4d 00 00       	call   f01075a3 <cprintf>
f01027a8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01027ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027b0:	c9                   	leave  
f01027b1:	c3                   	ret    

f01027b2 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01027b2:	55                   	push   %ebp
f01027b3:	89 e5                	mov    %esp,%ebp
f01027b5:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01027b8:	e8 e0 25 00 00       	call   f0104d9d <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01027bd:	83 ec 0c             	sub    $0xc,%esp
f01027c0:	68 b4 c2 11 f0       	push   $0xf011c2b4
f01027c5:	e8 d9 4d 00 00       	call   f01075a3 <cprintf>
f01027ca:	83 c4 10             	add    $0x10,%esp
	return 0;
f01027cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027d2:	c9                   	leave  
f01027d3:	c3                   	ret    

f01027d4 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01027d4:	55                   	push   %ebp
f01027d5:	89 e5                	mov    %esp,%ebp
f01027d7:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01027da:	e8 ce 25 00 00       	call   f0104dad <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01027df:	83 ec 0c             	sub    $0xc,%esp
f01027e2:	68 e4 c2 11 f0       	push   $0xf011c2e4
f01027e7:	e8 b7 4d 00 00       	call   f01075a3 <cprintf>
f01027ec:	83 c4 10             	add    $0x10,%esp
	return 0;
f01027ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01027f4:	c9                   	leave  
f01027f5:	c3                   	ret    

f01027f6 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01027f6:	55                   	push   %ebp
f01027f7:	89 e5                	mov    %esp,%ebp
f01027f9:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01027fc:	e8 bc 25 00 00       	call   f0104dbd <isUHeapPlacementStrategyFIRSTFIT>
f0102801:	85 c0                	test   %eax,%eax
f0102803:	74 12                	je     f0102817 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102805:	83 ec 0c             	sub    $0xc,%esp
f0102808:	68 14 c3 11 f0       	push   $0xf011c314
f010280d:	e8 91 4d 00 00       	call   f01075a3 <cprintf>
f0102812:	83 c4 10             	add    $0x10,%esp
f0102815:	eb 61                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102817:	e8 bc 25 00 00       	call   f0104dd8 <isUHeapPlacementStrategyBESTFIT>
f010281c:	85 c0                	test   %eax,%eax
f010281e:	74 12                	je     f0102832 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102820:	83 ec 0c             	sub    $0xc,%esp
f0102823:	68 40 c3 11 f0       	push   $0xf011c340
f0102828:	e8 76 4d 00 00       	call   f01075a3 <cprintf>
f010282d:	83 c4 10             	add    $0x10,%esp
f0102830:	eb 46                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102832:	e8 bc 25 00 00       	call   f0104df3 <isUHeapPlacementStrategyNEXTFIT>
f0102837:	85 c0                	test   %eax,%eax
f0102839:	74 12                	je     f010284d <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010283b:	83 ec 0c             	sub    $0xc,%esp
f010283e:	68 6c c3 11 f0       	push   $0xf011c36c
f0102843:	e8 5b 4d 00 00       	call   f01075a3 <cprintf>
f0102848:	83 c4 10             	add    $0x10,%esp
f010284b:	eb 2b                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f010284d:	e8 bc 25 00 00       	call   f0104e0e <isUHeapPlacementStrategyWORSTFIT>
f0102852:	85 c0                	test   %eax,%eax
f0102854:	74 12                	je     f0102868 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f0102856:	83 ec 0c             	sub    $0xc,%esp
f0102859:	68 98 c3 11 f0       	push   $0xf011c398
f010285e:	e8 40 4d 00 00       	call   f01075a3 <cprintf>
f0102863:	83 c4 10             	add    $0x10,%esp
f0102866:	eb 10                	jmp    f0102878 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102868:	83 ec 0c             	sub    $0xc,%esp
f010286b:	68 c4 c3 11 f0       	push   $0xf011c3c4
f0102870:	e8 2e 4d 00 00       	call   f01075a3 <cprintf>
f0102875:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102878:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010287d:	c9                   	leave  
f010287e:	c3                   	ret    

f010287f <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f010287f:	55                   	push   %ebp
f0102880:	89 e5                	mov    %esp,%ebp
f0102882:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0102885:	e8 9f 25 00 00       	call   f0104e29 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010288a:	83 ec 0c             	sub    $0xc,%esp
f010288d:	68 f0 c3 11 f0       	push   $0xf011c3f0
f0102892:	e8 0c 4d 00 00       	call   f01075a3 <cprintf>
f0102897:	83 c4 10             	add    $0x10,%esp
	return 0;
f010289a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010289f:	c9                   	leave  
f01028a0:	c3                   	ret    

f01028a1 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01028a1:	55                   	push   %ebp
f01028a2:	89 e5                	mov    %esp,%ebp
f01028a4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f01028a7:	e8 8d 25 00 00       	call   f0104e39 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01028ac:	83 ec 0c             	sub    $0xc,%esp
f01028af:	68 f0 c3 11 f0       	push   $0xf011c3f0
f01028b4:	e8 ea 4c 00 00       	call   f01075a3 <cprintf>
f01028b9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c1:	c9                   	leave  
f01028c2:	c3                   	ret    

f01028c3 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01028c3:	55                   	push   %ebp
f01028c4:	89 e5                	mov    %esp,%ebp
f01028c6:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01028c9:	e8 7b 25 00 00       	call   f0104e49 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01028ce:	83 ec 0c             	sub    $0xc,%esp
f01028d1:	68 24 c4 11 f0       	push   $0xf011c424
f01028d6:	e8 c8 4c 00 00       	call   f01075a3 <cprintf>
f01028db:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028de:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028e3:	c9                   	leave  
f01028e4:	c3                   	ret    

f01028e5 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01028e5:	55                   	push   %ebp
f01028e6:	89 e5                	mov    %esp,%ebp
f01028e8:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01028eb:	e8 69 25 00 00       	call   f0104e59 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01028f0:	83 ec 0c             	sub    $0xc,%esp
f01028f3:	68 54 c4 11 f0       	push   $0xf011c454
f01028f8:	e8 a6 4c 00 00       	call   f01075a3 <cprintf>
f01028fd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102900:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102905:	c9                   	leave  
f0102906:	c3                   	ret    

f0102907 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102907:	55                   	push   %ebp
f0102908:	89 e5                	mov    %esp,%ebp
f010290a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010290d:	e8 57 25 00 00       	call   f0104e69 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102912:	83 ec 0c             	sub    $0xc,%esp
f0102915:	68 84 c4 11 f0       	push   $0xf011c484
f010291a:	e8 84 4c 00 00       	call   f01075a3 <cprintf>
f010291f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102922:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102927:	c9                   	leave  
f0102928:	c3                   	ret    

f0102929 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102929:	55                   	push   %ebp
f010292a:	89 e5                	mov    %esp,%ebp
f010292c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f010292f:	e8 45 25 00 00       	call   f0104e79 <isKHeapPlacementStrategyCONTALLOC>
f0102934:	85 c0                	test   %eax,%eax
f0102936:	74 12                	je     f010294a <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102938:	83 ec 0c             	sub    $0xc,%esp
f010293b:	68 b8 c4 11 f0       	push   $0xf011c4b8
f0102940:	e8 5e 4c 00 00       	call   f01075a3 <cprintf>
f0102945:	83 c4 10             	add    $0x10,%esp
f0102948:	eb 7c                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f010294a:	e8 44 25 00 00       	call   f0104e93 <isKHeapPlacementStrategyFIRSTFIT>
f010294f:	85 c0                	test   %eax,%eax
f0102951:	74 12                	je     f0102965 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102953:	83 ec 0c             	sub    $0xc,%esp
f0102956:	68 f4 c4 11 f0       	push   $0xf011c4f4
f010295b:	e8 43 4c 00 00       	call   f01075a3 <cprintf>
f0102960:	83 c4 10             	add    $0x10,%esp
f0102963:	eb 61                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102965:	e8 44 25 00 00       	call   f0104eae <isKHeapPlacementStrategyBESTFIT>
f010296a:	85 c0                	test   %eax,%eax
f010296c:	74 12                	je     f0102980 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010296e:	83 ec 0c             	sub    $0xc,%esp
f0102971:	68 24 c5 11 f0       	push   $0xf011c524
f0102976:	e8 28 4c 00 00       	call   f01075a3 <cprintf>
f010297b:	83 c4 10             	add    $0x10,%esp
f010297e:	eb 46                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102980:	e8 44 25 00 00       	call   f0104ec9 <isKHeapPlacementStrategyNEXTFIT>
f0102985:	85 c0                	test   %eax,%eax
f0102987:	74 12                	je     f010299b <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102989:	83 ec 0c             	sub    $0xc,%esp
f010298c:	68 50 c5 11 f0       	push   $0xf011c550
f0102991:	e8 0d 4c 00 00       	call   f01075a3 <cprintf>
f0102996:	83 c4 10             	add    $0x10,%esp
f0102999:	eb 2b                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010299b:	e8 44 25 00 00       	call   f0104ee4 <isKHeapPlacementStrategyWORSTFIT>
f01029a0:	85 c0                	test   %eax,%eax
f01029a2:	74 12                	je     f01029b6 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f01029a4:	83 ec 0c             	sub    $0xc,%esp
f01029a7:	68 7c c5 11 f0       	push   $0xf011c57c
f01029ac:	e8 f2 4b 00 00       	call   f01075a3 <cprintf>
f01029b1:	83 c4 10             	add    $0x10,%esp
f01029b4:	eb 10                	jmp    f01029c6 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f01029b6:	83 ec 0c             	sub    $0xc,%esp
f01029b9:	68 ac c5 11 f0       	push   $0xf011c5ac
f01029be:	e8 e0 4b 00 00       	call   f01075a3 <cprintf>
f01029c3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01029c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029cb:	c9                   	leave  
f01029cc:	c3                   	ret    

f01029cd <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01029cd:	55                   	push   %ebp
f01029ce:	89 e5                	mov    %esp,%ebp
f01029d0:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01029d3:	e8 0d 62 00 00       	call   f0108be5 <isBufferingEnabled>
f01029d8:	85 c0                	test   %eax,%eax
f01029da:	75 12                	jne    f01029ee <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01029dc:	83 ec 0c             	sub    $0xc,%esp
f01029df:	68 dc c5 11 f0       	push   $0xf011c5dc
f01029e4:	e8 ba 4b 00 00       	call   f01075a3 <cprintf>
f01029e9:	83 c4 10             	add    $0x10,%esp
f01029ec:	eb 1d                	jmp    f0102a0b <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01029ee:	83 ec 0c             	sub    $0xc,%esp
f01029f1:	6a 00                	push   $0x0
f01029f3:	e8 c7 61 00 00       	call   f0108bbf <enableModifiedBuffer>
f01029f8:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01029fb:	83 ec 0c             	sub    $0xc,%esp
f01029fe:	68 18 c6 11 f0       	push   $0xf011c618
f0102a03:	e8 9b 4b 00 00       	call   f01075a3 <cprintf>
f0102a08:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102a0b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a10:	c9                   	leave  
f0102a11:	c3                   	ret    

f0102a12 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102a12:	55                   	push   %ebp
f0102a13:	89 e5                	mov    %esp,%ebp
f0102a15:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102a18:	e8 c8 61 00 00       	call   f0108be5 <isBufferingEnabled>
f0102a1d:	85 c0                	test   %eax,%eax
f0102a1f:	75 12                	jne    f0102a33 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102a21:	83 ec 0c             	sub    $0xc,%esp
f0102a24:	68 dc c5 11 f0       	push   $0xf011c5dc
f0102a29:	e8 75 4b 00 00       	call   f01075a3 <cprintf>
f0102a2e:	83 c4 10             	add    $0x10,%esp
f0102a31:	eb 1d                	jmp    f0102a50 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102a33:	83 ec 0c             	sub    $0xc,%esp
f0102a36:	6a 01                	push   $0x1
f0102a38:	e8 82 61 00 00       	call   f0108bbf <enableModifiedBuffer>
f0102a3d:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102a40:	83 ec 0c             	sub    $0xc,%esp
f0102a43:	68 3c c6 11 f0       	push   $0xf011c63c
f0102a48:	e8 56 4b 00 00       	call   f01075a3 <cprintf>
f0102a4d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102a50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a55:	c9                   	leave  
f0102a56:	c3                   	ret    

f0102a57 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102a57:	55                   	push   %ebp
f0102a58:	89 e5                	mov    %esp,%ebp
f0102a5a:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0102a5d:	83 ec 0c             	sub    $0xc,%esp
f0102a60:	6a 00                	push   $0x0
f0102a62:	e8 70 61 00 00       	call   f0108bd7 <enableBuffering>
f0102a67:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102a6a:	83 ec 0c             	sub    $0xc,%esp
f0102a6d:	6a 00                	push   $0x0
f0102a6f:	e8 4b 61 00 00       	call   f0108bbf <enableModifiedBuffer>
f0102a74:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102a77:	83 ec 0c             	sub    $0xc,%esp
f0102a7a:	68 5c c6 11 f0       	push   $0xf011c65c
f0102a7f:	e8 1f 4b 00 00       	call   f01075a3 <cprintf>
f0102a84:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a87:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a8c:	c9                   	leave  
f0102a8d:	c3                   	ret    

f0102a8e <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102a8e:	55                   	push   %ebp
f0102a8f:	89 e5                	mov    %esp,%ebp
f0102a91:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102a94:	83 ec 0c             	sub    $0xc,%esp
f0102a97:	6a 01                	push   $0x1
f0102a99:	e8 39 61 00 00       	call   f0108bd7 <enableBuffering>
f0102a9e:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102aa1:	83 ec 0c             	sub    $0xc,%esp
f0102aa4:	6a 01                	push   $0x1
f0102aa6:	e8 14 61 00 00       	call   f0108bbf <enableModifiedBuffer>
f0102aab:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102aae:	e8 4a 61 00 00       	call   f0108bfd <getModifiedBufferLength>
f0102ab3:	85 c0                	test   %eax,%eax
f0102ab5:	75 59                	jne    f0102b10 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102ab7:	83 ec 0c             	sub    $0xc,%esp
f0102aba:	68 78 c6 11 f0       	push   $0xf011c678
f0102abf:	e8 df 4a 00 00       	call   f01075a3 <cprintf>
f0102ac4:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102ac7:	83 ec 08             	sub    $0x8,%esp
f0102aca:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102acd:	50                   	push   %eax
f0102ace:	68 a8 c6 11 f0       	push   $0xf011c6a8
f0102ad3:	e8 a4 6b 01 00       	call   f011967c <readline>
f0102ad8:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f0102adb:	83 ec 04             	sub    $0x4,%esp
f0102ade:	6a 0a                	push   $0xa
f0102ae0:	6a 00                	push   $0x0
f0102ae2:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102ae5:	50                   	push   %eax
f0102ae6:	e8 f7 70 01 00       	call   f0119be2 <strtol>
f0102aeb:	83 c4 10             	add    $0x10,%esp
f0102aee:	83 ec 0c             	sub    $0xc,%esp
f0102af1:	50                   	push   %eax
f0102af2:	e8 f8 60 00 00       	call   f0108bef <setModifiedBufferLength>
f0102af7:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102afa:	e8 fe 60 00 00       	call   f0108bfd <getModifiedBufferLength>
f0102aff:	83 ec 08             	sub    $0x8,%esp
f0102b02:	50                   	push   %eax
f0102b03:	68 d4 c6 11 f0       	push   $0xf011c6d4
f0102b08:	e8 96 4a 00 00       	call   f01075a3 <cprintf>
f0102b0d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102b10:	83 ec 0c             	sub    $0xc,%esp
f0102b13:	68 f9 c6 11 f0       	push   $0xf011c6f9
f0102b18:	e8 86 4a 00 00       	call   f01075a3 <cprintf>
f0102b1d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b20:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b25:	c9                   	leave  
f0102b26:	c3                   	ret    

f0102b27 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102b27:	55                   	push   %ebp
f0102b28:	89 e5                	mov    %esp,%ebp
f0102b2a:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102b2d:	e8 b3 60 00 00       	call   f0108be5 <isBufferingEnabled>
f0102b32:	85 c0                	test   %eax,%eax
f0102b34:	75 12                	jne    f0102b48 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102b36:	83 ec 0c             	sub    $0xc,%esp
f0102b39:	68 14 c7 11 f0       	push   $0xf011c714
f0102b3e:	e8 60 4a 00 00       	call   f01075a3 <cprintf>
f0102b43:	83 c4 10             	add    $0x10,%esp
f0102b46:	eb 19                	jmp    f0102b61 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102b48:	e8 80 60 00 00       	call   f0108bcd <isModifiedBufferEnabled>
f0102b4d:	85 c0                	test   %eax,%eax
f0102b4f:	75 10                	jne    f0102b61 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102b51:	83 ec 0c             	sub    $0xc,%esp
f0102b54:	68 64 c7 11 f0       	push   $0xf011c764
f0102b59:	e8 45 4a 00 00       	call   f01075a3 <cprintf>
f0102b5e:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f0102b61:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b64:	83 c0 04             	add    $0x4,%eax
f0102b67:	8b 00                	mov    (%eax),%eax
f0102b69:	83 ec 04             	sub    $0x4,%esp
f0102b6c:	6a 0a                	push   $0xa
f0102b6e:	6a 00                	push   $0x0
f0102b70:	50                   	push   %eax
f0102b71:	e8 6c 70 01 00       	call   f0119be2 <strtol>
f0102b76:	83 c4 10             	add    $0x10,%esp
f0102b79:	83 ec 0c             	sub    $0xc,%esp
f0102b7c:	50                   	push   %eax
f0102b7d:	e8 6d 60 00 00       	call   f0108bef <setModifiedBufferLength>
f0102b82:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0102b85:	e8 73 60 00 00       	call   f0108bfd <getModifiedBufferLength>
f0102b8a:	83 ec 08             	sub    $0x8,%esp
f0102b8d:	50                   	push   %eax
f0102b8e:	68 d4 c6 11 f0       	push   $0xf011c6d4
f0102b93:	e8 0b 4a 00 00       	call   f01075a3 <cprintf>
f0102b98:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102b9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ba0:	c9                   	leave  
f0102ba1:	c3                   	ret    

f0102ba2 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102ba2:	55                   	push   %ebp
f0102ba3:	89 e5                	mov    %esp,%ebp
f0102ba5:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102ba8:	e8 38 60 00 00       	call   f0108be5 <isBufferingEnabled>
f0102bad:	85 c0                	test   %eax,%eax
f0102baf:	75 12                	jne    f0102bc3 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102bb1:	83 ec 0c             	sub    $0xc,%esp
f0102bb4:	68 14 c7 11 f0       	push   $0xf011c714
f0102bb9:	e8 e5 49 00 00       	call   f01075a3 <cprintf>
f0102bbe:	83 c4 10             	add    $0x10,%esp
f0102bc1:	eb 19                	jmp    f0102bdc <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102bc3:	e8 05 60 00 00       	call   f0108bcd <isModifiedBufferEnabled>
f0102bc8:	85 c0                	test   %eax,%eax
f0102bca:	75 10                	jne    f0102bdc <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102bcc:	83 ec 0c             	sub    $0xc,%esp
f0102bcf:	68 64 c7 11 f0       	push   $0xf011c764
f0102bd4:	e8 ca 49 00 00       	call   f01075a3 <cprintf>
f0102bd9:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102bdc:	e8 1c 60 00 00       	call   f0108bfd <getModifiedBufferLength>
f0102be1:	83 ec 08             	sub    $0x8,%esp
f0102be4:	50                   	push   %eax
f0102be5:	68 aa c7 11 f0       	push   $0xf011c7aa
f0102bea:	e8 b4 49 00 00       	call   f01075a3 <cprintf>
f0102bef:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102bf2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf7:	c9                   	leave  
f0102bf8:	c3                   	ret    

f0102bf9 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102bf9:	55                   	push   %ebp
f0102bfa:	89 e5                	mov    %esp,%ebp
f0102bfc:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102bff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102c06:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102c0a:	75 1b                	jne    f0102c27 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c0f:	83 c0 04             	add    $0x4,%eax
f0102c12:	8b 00                	mov    (%eax),%eax
f0102c14:	83 ec 04             	sub    $0x4,%esp
f0102c17:	6a 0a                	push   $0xa
f0102c19:	6a 00                	push   $0x0
f0102c1b:	50                   	push   %eax
f0102c1c:	e8 c1 6f 01 00       	call   f0119be2 <strtol>
f0102c21:	83 c4 10             	add    $0x10,%esp
f0102c24:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102c27:	e8 4d 22 00 00       	call   f0104e79 <isKHeapPlacementStrategyCONTALLOC>
f0102c2c:	85 c0                	test   %eax,%eax
f0102c2e:	74 0a                	je     f0102c3a <command_test_kmalloc+0x41>
		test_kmalloc();
f0102c30:	e8 1b a4 00 00       	call   f010d050 <test_kmalloc>
f0102c35:	e9 e8 00 00 00       	jmp    f0102d22 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102c3a:	e8 54 22 00 00       	call   f0104e93 <isKHeapPlacementStrategyFIRSTFIT>
f0102c3f:	85 c0                	test   %eax,%eax
f0102c41:	74 44                	je     f0102c87 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f0102c43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102c47:	75 1a                	jne    f0102c63 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102c49:	83 ec 0c             	sub    $0xc,%esp
f0102c4c:	68 c8 c7 11 f0       	push   $0xf011c7c8
f0102c51:	e8 4d 49 00 00       	call   f01075a3 <cprintf>
f0102c56:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102c59:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c5e:	e9 c4 00 00 00       	jmp    f0102d27 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f0102c63:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102c67:	75 0a                	jne    f0102c73 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f0102c69:	e8 27 e6 00 00       	call   f0111295 <test_kmalloc_firstfit1>
f0102c6e:	e9 af 00 00 00       	jmp    f0102d22 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102c73:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102c77:	0f 85 a5 00 00 00    	jne    f0102d22 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f0102c7d:	e8 c1 f6 00 00       	call   f0112343 <test_kmalloc_firstfit2>
f0102c82:	e9 9b 00 00 00       	jmp    f0102d22 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102c87:	e8 22 22 00 00       	call   f0104eae <isKHeapPlacementStrategyBESTFIT>
f0102c8c:	85 c0                	test   %eax,%eax
f0102c8e:	74 44                	je     f0102cd4 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102c94:	75 17                	jne    f0102cad <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1 or 2) as an argument\n");
f0102c96:	83 ec 0c             	sub    $0xc,%esp
f0102c99:	68 18 c8 11 f0       	push   $0xf011c818
f0102c9e:	e8 00 49 00 00       	call   f01075a3 <cprintf>
f0102ca3:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102ca6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cab:	eb 7a                	jmp    f0102d27 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102cad:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102cb1:	75 07                	jne    f0102cba <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102cb3:	e8 98 a3 00 00       	call   f010d050 <test_kmalloc>
f0102cb8:	eb 68                	jmp    f0102d22 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f0102cba:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102cbe:	75 07                	jne    f0102cc7 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102cc0:	e8 4c c6 00 00       	call   f010f311 <test_kmalloc_bestfit1>
f0102cc5:	eb 5b                	jmp    f0102d22 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f0102cc7:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102ccb:	75 55                	jne    f0102d22 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102ccd:	e8 d7 d5 00 00       	call   f01102a9 <test_kmalloc_bestfit2>
f0102cd2:	eb 4e                	jmp    f0102d22 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102cd4:	e8 f0 21 00 00       	call   f0104ec9 <isKHeapPlacementStrategyNEXTFIT>
f0102cd9:	85 c0                	test   %eax,%eax
f0102cdb:	74 37                	je     f0102d14 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102cdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102ce1:	75 17                	jne    f0102cfa <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102ce3:	83 ec 0c             	sub    $0xc,%esp
f0102ce6:	68 c8 c7 11 f0       	push   $0xf011c7c8
f0102ceb:	e8 b3 48 00 00       	call   f01075a3 <cprintf>
f0102cf0:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102cf3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102cf8:	eb 2d                	jmp    f0102d27 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102cfa:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102cfe:	75 07                	jne    f0102d07 <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102d00:	e8 4b a3 00 00       	call   f010d050 <test_kmalloc>
f0102d05:	eb 1b                	jmp    f0102d22 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f0102d07:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d0b:	75 15                	jne    f0102d22 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102d0d:	e8 42 b3 00 00       	call   f010e054 <test_kmalloc_nextfit>
f0102d12:	eb 0e                	jmp    f0102d22 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102d14:	e8 cb 21 00 00       	call   f0104ee4 <isKHeapPlacementStrategyWORSTFIT>
f0102d19:	85 c0                	test   %eax,%eax
f0102d1b:	74 05                	je     f0102d22 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102d1d:	e8 64 02 01 00       	call   f0112f86 <test_kmalloc_worstfit>
	return 0;
f0102d22:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d27:	c9                   	leave  
f0102d28:	c3                   	ret    

f0102d29 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102d29:	55                   	push   %ebp
f0102d2a:	89 e5                	mov    %esp,%ebp
f0102d2c:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT())
f0102d2f:	e8 7a 21 00 00       	call   f0104eae <isKHeapPlacementStrategyBESTFIT>
f0102d34:	85 c0                	test   %eax,%eax
f0102d36:	74 07                	je     f0102d3f <command_test_kfree+0x16>
	{
		test_kfree_bestfit();
f0102d38:	e8 17 2b 01 00       	call   f0115854 <test_kfree_bestfit>
f0102d3d:	eb 05                	jmp    f0102d44 <command_test_kfree+0x1b>
	}
	else
	{
		test_kfree();
f0102d3f:	e8 c6 14 01 00       	call   f011420a <test_kfree>
	}
	return 0;
f0102d44:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d49:	c9                   	leave  
f0102d4a:	c3                   	ret    

f0102d4b <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102d4b:	55                   	push   %ebp
f0102d4c:	89 e5                	mov    %esp,%ebp
f0102d4e:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102d51:	e8 48 41 01 00       	call   f0116e9e <test_kheap_phys_addr>
	return 0;
f0102d56:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d5b:	c9                   	leave  
f0102d5c:	c3                   	ret    

f0102d5d <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102d5d:	55                   	push   %ebp
f0102d5e:	89 e5                	mov    %esp,%ebp
f0102d60:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102d63:	e8 6a 52 01 00       	call   f0117fd2 <test_kheap_virt_addr>
	return 0;
f0102d68:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d6d:	c9                   	leave  
f0102d6e:	c3                   	ret    

f0102d6f <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102d6f:	55                   	push   %ebp
f0102d70:	89 e5                	mov    %esp,%ebp
f0102d72:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102d75:	e8 d3 62 01 00       	call   f011904d <test_three_creation_functions>
	return 0;
f0102d7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d7f:	c9                   	leave  
f0102d80:	c3                   	ret    

f0102d81 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments)
{
f0102d81:	55                   	push   %ebp
f0102d82:	89 e5                	mov    %esp,%ebp
	return 0;
f0102d84:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d89:	5d                   	pop    %ebp
f0102d8a:	c3                   	ret    

f0102d8b <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102d8b:	55                   	push   %ebp
f0102d8c:	89 e5                	mov    %esp,%ebp
	return 0;
f0102d8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d93:	5d                   	pop    %ebp
f0102d94:	c3                   	ret    

f0102d95 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f0102d95:	55                   	push   %ebp
f0102d96:	89 e5                	mov    %esp,%ebp
	return 0;
f0102d98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102d9d:	5d                   	pop    %ebp
f0102d9e:	c3                   	ret    

f0102d9f <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f0102d9f:	55                   	push   %ebp
f0102da0:	89 e5                	mov    %esp,%ebp
	return 0;
f0102da2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102da7:	5d                   	pop    %ebp
f0102da8:	c3                   	ret    

f0102da9 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f0102da9:	55                   	push   %ebp
f0102daa:	89 e5                	mov    %esp,%ebp
	return 0;
f0102dac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db1:	5d                   	pop    %ebp
f0102db2:	c3                   	ret    

f0102db3 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102db3:	55                   	push   %ebp
f0102db4:	89 e5                	mov    %esp,%ebp
	return 0;
f0102db6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dbb:	5d                   	pop    %ebp
f0102dbc:	c3                   	ret    

f0102dbd <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102dbd:	55                   	push   %ebp
f0102dbe:	89 e5                	mov    %esp,%ebp
	return 0;
f0102dc0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102dc5:	5d                   	pop    %ebp
f0102dc6:	c3                   	ret    

f0102dc7 <command_test_sc_MLFQ>:

//END======================================================

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102dc7:	55                   	push   %ebp
f0102dc8:	89 e5                	mov    %esp,%ebp
f0102dca:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102dcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd0:	83 c0 04             	add    $0x4,%eax
f0102dd3:	8b 00                	mov    (%eax),%eax
f0102dd5:	83 ec 04             	sub    $0x4,%esp
f0102dd8:	6a 0a                	push   $0xa
f0102dda:	6a 00                	push   $0x0
f0102ddc:	50                   	push   %eax
f0102ddd:	e8 00 6e 01 00       	call   f0119be2 <strtol>
f0102de2:	83 c4 10             	add    $0x10,%esp
f0102de5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f0102de8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f0102def:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102df6:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f0102dfb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102dfe:	eb 3d                	jmp    f0102e3d <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f0102e00:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102e03:	05 f0 ee 00 00       	add    $0xeef0,%eax
f0102e08:	83 ec 08             	sub    $0x8,%esp
f0102e0b:	68 66 c8 11 f0       	push   $0xf011c866
f0102e10:	50                   	push   %eax
f0102e11:	e8 78 6b 01 00       	call   f011998e <strcmp>
f0102e16:	83 c4 10             	add    $0x10,%esp
f0102e19:	85 c0                	test   %eax,%eax
f0102e1b:	75 12                	jne    f0102e2f <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102e1d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102e21:	74 07                	je     f0102e2a <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f0102e23:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f0102e2a:	ff 45 f4             	incl   -0xc(%ebp)
f0102e2d:	eb 06                	jmp    f0102e35 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f0102e2f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102e33:	74 31                	je     f0102e66 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102e35:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f0102e3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102e3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102e41:	74 08                	je     f0102e4b <command_test_sc_MLFQ+0x84>
f0102e43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102e46:	8b 40 44             	mov    0x44(%eax),%eax
f0102e49:	eb 05                	jmp    f0102e50 <command_test_sc_MLFQ+0x89>
f0102e4b:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e50:	a3 cc c0 38 f0       	mov    %eax,0xf038c0cc
f0102e55:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f0102e5a:	85 c0                	test   %eax,%eax
f0102e5c:	75 a2                	jne    f0102e00 <command_test_sc_MLFQ+0x39>
f0102e5e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102e62:	75 9c                	jne    f0102e00 <command_test_sc_MLFQ+0x39>
f0102e64:	eb 01                	jmp    f0102e67 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102e66:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102e67:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e6a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0102e6d:	75 12                	jne    f0102e81 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f0102e6f:	83 ec 0c             	sub    $0xc,%esp
f0102e72:	68 70 c8 11 f0       	push   $0xf011c870
f0102e77:	e8 27 47 00 00       	call   f01075a3 <cprintf>
f0102e7c:	83 c4 10             	add    $0x10,%esp
f0102e7f:	eb 17                	jmp    f0102e98 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f0102e81:	83 ec 04             	sub    $0x4,%esp
f0102e84:	68 a9 c8 11 f0       	push   $0xf011c8a9
f0102e89:	68 10 05 00 00       	push   $0x510
f0102e8e:	68 f2 bd 11 f0       	push   $0xf011bdf2
f0102e93:	e8 fb d2 ff ff       	call   f0100193 <_panic>
	}
	return 0;
f0102e98:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e9d:	c9                   	leave  
f0102e9e:	c3                   	ret    

f0102e9f <nvram_read>:
{
		sizeof(gdt) - 1, (unsigned long) gdt
};

int nvram_read(int r)
{
f0102e9f:	55                   	push   %ebp
f0102ea0:	89 e5                	mov    %esp,%ebp
f0102ea2:	53                   	push   %ebx
f0102ea3:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0102ea6:	8b 45 08             	mov    0x8(%ebp),%eax
f0102ea9:	83 ec 0c             	sub    $0xc,%esp
f0102eac:	50                   	push   %eax
f0102ead:	e8 83 41 00 00       	call   f0107035 <mc146818_read>
f0102eb2:	83 c4 10             	add    $0x10,%esp
f0102eb5:	89 c3                	mov    %eax,%ebx
f0102eb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0102eba:	40                   	inc    %eax
f0102ebb:	83 ec 0c             	sub    $0xc,%esp
f0102ebe:	50                   	push   %eax
f0102ebf:	e8 71 41 00 00       	call   f0107035 <mc146818_read>
f0102ec4:	83 c4 10             	add    $0x10,%esp
f0102ec7:	c1 e0 08             	shl    $0x8,%eax
f0102eca:	09 d8                	or     %ebx,%eax
}
f0102ecc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102ecf:	c9                   	leave  
f0102ed0:	c3                   	ret    

f0102ed1 <detect_memory>:

void detect_memory()
{
f0102ed1:	55                   	push   %ebp
f0102ed2:	89 e5                	mov    %esp,%ebp
f0102ed4:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0102ed7:	83 ec 0c             	sub    $0xc,%esp
f0102eda:	6a 15                	push   $0x15
f0102edc:	e8 be ff ff ff       	call   f0102e9f <nvram_read>
f0102ee1:	83 c4 10             	add    $0x10,%esp
f0102ee4:	c1 e0 0a             	shl    $0xa,%eax
f0102ee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102eea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102eed:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102ef2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0102ef5:	83 ec 0c             	sub    $0xc,%esp
f0102ef8:	6a 17                	push   $0x17
f0102efa:	e8 a0 ff ff ff       	call   f0102e9f <nvram_read>
f0102eff:	83 c4 10             	add    $0x10,%esp
f0102f02:	c1 e0 0a             	shl    $0xa,%eax
f0102f05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102f0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102f10:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0102f13:	83 ec 0c             	sub    $0xc,%esp
f0102f16:	6a 34                	push   $0x34
f0102f18:	e8 82 ff ff ff       	call   f0102e9f <nvram_read>
f0102f1d:	83 c4 10             	add    $0x10,%esp
f0102f20:	c1 e0 10             	shl    $0x10,%eax
f0102f23:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102f26:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102f29:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102f2e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0102f31:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0102f35:	74 18                	je     f0102f4f <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0102f37:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102f3a:	05 00 00 00 01       	add    $0x1000000,%eax
f0102f3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0102f42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f45:	2d 00 00 10 00       	sub    $0x100000,%eax
f0102f4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102f4d:	eb 19                	jmp    f0102f68 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0102f4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102f53:	74 0d                	je     f0102f62 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0102f55:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102f58:	05 00 00 10 00       	add    $0x100000,%eax
f0102f5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102f60:	eb 06                	jmp    f0102f68 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0102f62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102f65:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0102f68:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0102f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f72:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0102f75:	76 32                	jbe    f0102fa9 <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0102f77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102f7a:	c1 e8 0a             	shr    $0xa,%eax
f0102f7d:	89 c2                	mov    %eax,%edx
f0102f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f82:	c1 e8 0a             	shr    $0xa,%eax
f0102f85:	83 ec 04             	sub    $0x4,%esp
f0102f88:	52                   	push   %edx
f0102f89:	50                   	push   %eax
f0102f8a:	68 c0 c8 11 f0       	push   $0xf011c8c0
f0102f8f:	e8 0f 46 00 00       	call   f01075a3 <cprintf>
f0102f94:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0102f97:	83 ec 0c             	sub    $0xc,%esp
f0102f9a:	68 08 c9 11 f0       	push   $0xf011c908
f0102f9f:	e8 ff 45 00 00       	call   f01075a3 <cprintf>
f0102fa4:	83 c4 10             	add    $0x10,%esp
		while(1);
f0102fa7:	eb fe                	jmp    f0102fa7 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0102fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102fac:	c1 e8 0c             	shr    $0xc,%eax
f0102faf:	a3 b0 2c 39 f0       	mov    %eax,0xf0392cb0

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0102fb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102fb7:	c1 e8 0a             	shr    $0xa,%eax
f0102fba:	83 ec 08             	sub    $0x8,%esp
f0102fbd:	50                   	push   %eax
f0102fbe:	68 9c c9 11 f0       	push   $0xf011c99c
f0102fc3:	e8 db 45 00 00       	call   f01075a3 <cprintf>
f0102fc8:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0102fcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102fce:	c1 e8 0a             	shr    $0xa,%eax
f0102fd1:	89 c2                	mov    %eax,%edx
f0102fd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102fd6:	c1 e8 0a             	shr    $0xa,%eax
f0102fd9:	83 ec 04             	sub    $0x4,%esp
f0102fdc:	52                   	push   %edx
f0102fdd:	50                   	push   %eax
f0102fde:	68 bd c9 11 f0       	push   $0xf011c9bd
f0102fe3:	e8 bb 45 00 00       	call   f01075a3 <cprintf>
f0102fe8:	83 c4 10             	add    $0x10,%esp
}
f0102feb:	90                   	nop
f0102fec:	c9                   	leave  
f0102fed:	c3                   	ret    

f0102fee <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0102fee:	55                   	push   %ebp
f0102fef:	89 e5                	mov    %esp,%ebp
f0102ff1:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0102ff4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102ffb:	eb 40                	jmp    f010303d <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0102ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103000:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0103006:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010300b:	83 ec 08             	sub    $0x8,%esp
f010300e:	52                   	push   %edx
f010300f:	50                   	push   %eax
f0103010:	e8 92 01 00 00       	call   f01031a7 <check_va2pa>
f0103015:	83 c4 10             	add    $0x10,%esp
f0103018:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010301b:	74 19                	je     f0103036 <check_boot_pgdir+0x48>
f010301d:	68 dc c9 11 f0       	push   $0xf011c9dc
f0103022:	68 12 ca 11 f0       	push   $0xf011ca12
f0103027:	68 8b 00 00 00       	push   $0x8b
f010302c:	68 27 ca 11 f0       	push   $0xf011ca27
f0103031:	e8 5d d1 ff ff       	call   f0100193 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0103036:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010303d:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f0103044:	75 b7                	jne    f0102ffd <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0103046:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010304d:	eb 74                	jmp    f01030c3 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f010304f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103052:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0103058:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010305d:	83 ec 08             	sub    $0x8,%esp
f0103060:	52                   	push   %edx
f0103061:	50                   	push   %eax
f0103062:	e8 40 01 00 00       	call   f01031a7 <check_va2pa>
f0103067:	83 c4 10             	add    $0x10,%esp
f010306a:	c7 45 f0 00 c0 14 f0 	movl   $0xf014c000,-0x10(%ebp)
f0103071:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0103078:	77 17                	ja     f0103091 <check_boot_pgdir+0xa3>
f010307a:	ff 75 f0             	pushl  -0x10(%ebp)
f010307d:	68 38 ca 11 f0       	push   $0xf011ca38
f0103082:	68 90 00 00 00       	push   $0x90
f0103087:	68 27 ca 11 f0       	push   $0xf011ca27
f010308c:	e8 02 d1 ff ff       	call   f0100193 <_panic>
f0103091:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103094:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f010309a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010309d:	01 ca                	add    %ecx,%edx
f010309f:	39 d0                	cmp    %edx,%eax
f01030a1:	74 19                	je     f01030bc <check_boot_pgdir+0xce>
f01030a3:	68 6c ca 11 f0       	push   $0xf011ca6c
f01030a8:	68 12 ca 11 f0       	push   $0xf011ca12
f01030ad:	68 90 00 00 00       	push   $0x90
f01030b2:	68 27 ca 11 f0       	push   $0xf011ca27
f01030b7:	e8 d7 d0 ff ff       	call   f0100193 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01030bc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01030c3:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f01030ca:	76 83                	jbe    f010304f <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01030cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01030d3:	e9 af 00 00 00       	jmp    f0103187 <check_boot_pgdir+0x199>
		switch (i) {
f01030d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01030db:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01030e0:	74 11                	je     f01030f3 <check_boot_pgdir+0x105>
f01030e2:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f01030e7:	72 36                	jb     f010311f <check_boot_pgdir+0x131>
f01030e9:	2d bd 03 00 00       	sub    $0x3bd,%eax
f01030ee:	83 f8 02             	cmp    $0x2,%eax
f01030f1:	77 2c                	ja     f010311f <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f01030f3:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f01030f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030fb:	c1 e2 02             	shl    $0x2,%edx
f01030fe:	01 d0                	add    %edx,%eax
f0103100:	8b 00                	mov    (%eax),%eax
f0103102:	85 c0                	test   %eax,%eax
f0103104:	75 7a                	jne    f0103180 <check_boot_pgdir+0x192>
f0103106:	68 ee ca 11 f0       	push   $0xf011caee
f010310b:	68 12 ca 11 f0       	push   $0xf011ca12
f0103110:	68 9b 00 00 00       	push   $0x9b
f0103115:	68 27 ca 11 f0       	push   $0xf011ca27
f010311a:	e8 74 d0 ff ff       	call   f0100193 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f010311f:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0103126:	76 2c                	jbe    f0103154 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f0103128:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010312d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103130:	c1 e2 02             	shl    $0x2,%edx
f0103133:	01 d0                	add    %edx,%eax
f0103135:	8b 00                	mov    (%eax),%eax
f0103137:	85 c0                	test   %eax,%eax
f0103139:	75 48                	jne    f0103183 <check_boot_pgdir+0x195>
f010313b:	68 ee ca 11 f0       	push   $0xf011caee
f0103140:	68 12 ca 11 f0       	push   $0xf011ca12
f0103145:	68 9f 00 00 00       	push   $0x9f
f010314a:	68 27 ca 11 f0       	push   $0xf011ca27
f010314f:	e8 3f d0 ff ff       	call   f0100193 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0103154:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103159:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010315c:	c1 e2 02             	shl    $0x2,%edx
f010315f:	01 d0                	add    %edx,%eax
f0103161:	8b 00                	mov    (%eax),%eax
f0103163:	85 c0                	test   %eax,%eax
f0103165:	74 1c                	je     f0103183 <check_boot_pgdir+0x195>
f0103167:	68 04 cb 11 f0       	push   $0xf011cb04
f010316c:	68 12 ca 11 f0       	push   $0xf011ca12
f0103171:	68 a1 00 00 00       	push   $0xa1
f0103176:	68 27 ca 11 f0       	push   $0xf011ca27
f010317b:	e8 13 d0 ff ff       	call   f0100193 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0103180:	90                   	nop
f0103181:	eb 01                	jmp    f0103184 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0103183:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0103184:	ff 45 f4             	incl   -0xc(%ebp)
f0103187:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010318e:	0f 86 44 ff ff ff    	jbe    f01030d8 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0103194:	83 ec 0c             	sub    $0xc,%esp
f0103197:	68 20 cb 11 f0       	push   $0xf011cb20
f010319c:	e8 02 44 00 00       	call   f01075a3 <cprintf>
f01031a1:	83 c4 10             	add    $0x10,%esp
}
f01031a4:	90                   	nop
f01031a5:	c9                   	leave  
f01031a6:	c3                   	ret    

f01031a7 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f01031a7:	55                   	push   %ebp
f01031a8:	89 e5                	mov    %esp,%ebp
f01031aa:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f01031ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031b0:	c1 e8 16             	shr    $0x16,%eax
f01031b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01031ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01031bd:	01 d0                	add    %edx,%eax
f01031bf:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f01031c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031c5:	8b 00                	mov    (%eax),%eax
f01031c7:	83 e0 01             	and    $0x1,%eax
f01031ca:	85 c0                	test   %eax,%eax
f01031cc:	75 0a                	jne    f01031d8 <check_va2pa+0x31>
		return ~0;
f01031ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01031d3:	e9 87 00 00 00       	jmp    f010325f <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f01031d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031db:	8b 00                	mov    (%eax),%eax
f01031dd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01031e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01031e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01031e8:	c1 e8 0c             	shr    $0xc,%eax
f01031eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01031ee:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f01031f3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01031f6:	72 17                	jb     f010320f <check_va2pa+0x68>
f01031f8:	ff 75 f0             	pushl  -0x10(%ebp)
f01031fb:	68 40 cb 11 f0       	push   $0xf011cb40
f0103200:	68 b7 00 00 00       	push   $0xb7
f0103205:	68 27 ca 11 f0       	push   $0xf011ca27
f010320a:	e8 84 cf ff ff       	call   f0100193 <_panic>
f010320f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103212:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103217:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f010321a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010321d:	c1 e8 0c             	shr    $0xc,%eax
f0103220:	25 ff 03 00 00       	and    $0x3ff,%eax
f0103225:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010322c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010322f:	01 d0                	add    %edx,%eax
f0103231:	8b 00                	mov    (%eax),%eax
f0103233:	83 e0 01             	and    $0x1,%eax
f0103236:	85 c0                	test   %eax,%eax
f0103238:	75 07                	jne    f0103241 <check_va2pa+0x9a>
		return ~0;
f010323a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010323f:	eb 1e                	jmp    f010325f <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0103241:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103244:	c1 e8 0c             	shr    $0xc,%eax
f0103247:	25 ff 03 00 00       	and    $0x3ff,%eax
f010324c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103253:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103256:	01 d0                	add    %edx,%eax
f0103258:	8b 00                	mov    (%eax),%eax
f010325a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f010325f:	c9                   	leave  
f0103260:	c3                   	ret    

f0103261 <tlb_invalidate>:

void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0103261:	55                   	push   %ebp
f0103262:	89 e5                	mov    %esp,%ebp
f0103264:	83 ec 10             	sub    $0x10,%esp
f0103267:	8b 45 0c             	mov    0xc(%ebp),%eax
f010326a:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f010326d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103270:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0103273:	90                   	nop
f0103274:	c9                   	leave  
f0103275:	c3                   	ret    

f0103276 <turn_on_paging>:
	cprintf("page_check() succeeded!\n");
}
*/

void turn_on_paging()
{
f0103276:	55                   	push   %ebp
f0103277:	89 e5                	mov    %esp,%ebp
f0103279:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f010327c:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0103283:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010328a:	eb 24                	jmp    f01032b0 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f010328c:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103291:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0103294:	c1 e2 02             	shl    $0x2,%edx
f0103297:	01 c2                	add    %eax,%edx
f0103299:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010329e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01032a1:	c1 e1 02             	shl    $0x2,%ecx
f01032a4:	01 c8                	add    %ecx,%eax
f01032a6:	8b 00                	mov    (%eax),%eax
f01032a8:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01032aa:	ff 45 fc             	incl   -0x4(%ebp)
f01032ad:	ff 45 f8             	incl   -0x8(%ebp)
f01032b0:	a1 4c 11 3b f0       	mov    0xf03b114c,%eax
f01032b5:	c1 e8 16             	shr    $0x16,%eax
f01032b8:	89 c2                	mov    %eax,%edx
f01032ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01032bd:	39 c2                	cmp    %eax,%edx
f01032bf:	77 cb                	ja     f010328c <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01032c1:	a1 58 11 3b f0       	mov    0xf03b1158,%eax
f01032c6:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01032c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01032cc:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f01032cf:	0f 20 c0             	mov    %cr0,%eax
f01032d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f01032d5:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f01032d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f01032db:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f01032e2:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f01032e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01032e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f01032ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01032ef:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f01032f2:	0f 01 15 10 48 15 f0 	lgdtl  0xf0154810
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f01032f9:	b8 23 00 00 00       	mov    $0x23,%eax
f01032fe:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0103300:	b8 23 00 00 00       	mov    $0x23,%eax
f0103305:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0103307:	b8 10 00 00 00       	mov    $0x10,%eax
f010330c:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010330e:	b8 10 00 00 00       	mov    $0x10,%eax
f0103313:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0103315:	b8 10 00 00 00       	mov    $0x10,%eax
f010331a:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010331c:	ea 23 33 10 f0 08 00 	ljmp   $0x8,$0xf0103323
	asm volatile("lldt %%ax" :: "a" (0));
f0103323:	b8 00 00 00 00       	mov    $0x0,%eax
f0103328:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010332b:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0103332:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0103339:	eb 19                	jmp    f0103354 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010333b:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103340:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103343:	c1 e2 02             	shl    $0x2,%edx
f0103346:	01 d0                	add    %edx,%eax
f0103348:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010334e:	ff 45 f4             	incl   -0xc(%ebp)
f0103351:	ff 45 f0             	incl   -0x10(%ebp)
f0103354:	a1 4c 11 3b f0       	mov    0xf03b114c,%eax
f0103359:	c1 e8 16             	shr    $0x16,%eax
f010335c:	89 c2                	mov    %eax,%edx
f010335e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103361:	39 c2                	cmp    %eax,%edx
f0103363:	77 d6                	ja     f010333b <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0103365:	a1 58 11 3b f0       	mov    0xf03b1158,%eax
f010336a:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010336d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103370:	0f 22 d8             	mov    %eax,%cr3
}
f0103373:	90                   	nop
f0103374:	c9                   	leave  
f0103375:	c3                   	ret    

f0103376 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0103376:	55                   	push   %ebp
f0103377:	89 e5                	mov    %esp,%ebp
f0103379:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010337c:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103381:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103384:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f010338b:	77 17                	ja     f01033a4 <setup_listing_to_all_page_tables_entries+0x2e>
f010338d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103390:	68 38 ca 11 f0       	push   $0xf011ca38
f0103395:	68 86 01 00 00       	push   $0x186
f010339a:	68 27 ca 11 f0       	push   $0xf011ca27
f010339f:	e8 ef cd ff ff       	call   f0100193 <_panic>
f01033a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01033a7:	05 00 00 00 10       	add    $0x10000000,%eax
f01033ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01033af:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f01033b4:	05 fc 0e 00 00       	add    $0xefc,%eax
f01033b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01033bc:	83 ca 03             	or     $0x3,%edx
f01033bf:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01033c1:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f01033c6:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01033cc:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f01033d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01033d4:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f01033db:	77 17                	ja     f01033f4 <setup_listing_to_all_page_tables_entries+0x7e>
f01033dd:	ff 75 ec             	pushl  -0x14(%ebp)
f01033e0:	68 38 ca 11 f0       	push   $0xf011ca38
f01033e5:	68 8b 01 00 00       	push   $0x18b
f01033ea:	68 27 ca 11 f0       	push   $0xf011ca27
f01033ef:	e8 9f cd ff ff       	call   f0100193 <_panic>
f01033f4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01033f7:	05 00 00 00 10       	add    $0x10000000,%eax
f01033fc:	83 c8 05             	or     $0x5,%eax
f01033ff:	89 02                	mov    %eax,(%edx)

}
f0103401:	90                   	nop
f0103402:	c9                   	leave  
f0103403:	c3                   	ret    

f0103404 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f0103404:	55                   	push   %ebp
f0103405:	89 e5                	mov    %esp,%ebp
f0103407:	53                   	push   %ebx
f0103408:	83 ec 10             	sub    $0x10,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010340b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010340f:	75 15                	jne    f0103426 <envid2env+0x22>
		*env_store = curenv;
f0103411:	8b 15 30 58 32 f0    	mov    0xf0325830,%edx
f0103417:	8b 45 0c             	mov    0xc(%ebp),%eax
f010341a:	89 10                	mov    %edx,(%eax)
		return 0;
f010341c:	b8 00 00 00 00       	mov    $0x0,%eax
f0103421:	e9 96 00 00 00       	jmp    f01034bc <envid2env+0xb8>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0103426:	8b 0d 2c 58 32 f0    	mov    0xf032582c,%ecx
f010342c:	8b 45 08             	mov    0x8(%ebp),%eax
f010342f:	83 e0 10             	and    $0x10,%eax
f0103432:	89 c2                	mov    %eax,%edx
f0103434:	89 d0                	mov    %edx,%eax
f0103436:	01 c0                	add    %eax,%eax
f0103438:	01 d0                	add    %edx,%eax
f010343a:	c1 e0 07             	shl    $0x7,%eax
f010343d:	29 d0                	sub    %edx,%eax
f010343f:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0103446:	01 d8                	add    %ebx,%eax
f0103448:	01 c0                	add    %eax,%eax
f010344a:	01 d0                	add    %edx,%eax
f010344c:	01 c0                	add    %eax,%eax
f010344e:	01 d0                	add    %edx,%eax
f0103450:	c1 e0 03             	shl    $0x3,%eax
f0103453:	01 c8                	add    %ecx,%eax
f0103455:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f0103458:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010345b:	8b 40 54             	mov    0x54(%eax),%eax
f010345e:	85 c0                	test   %eax,%eax
f0103460:	74 0b                	je     f010346d <envid2env+0x69>
f0103462:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103465:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103468:	3b 45 08             	cmp    0x8(%ebp),%eax
f010346b:	74 10                	je     f010347d <envid2env+0x79>
		*env_store = 0;
f010346d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103470:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0103476:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010347b:	eb 3f                	jmp    f01034bc <envid2env+0xb8>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010347d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103481:	74 2c                	je     f01034af <envid2env+0xab>
f0103483:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0103488:	39 45 f8             	cmp    %eax,-0x8(%ebp)
f010348b:	74 22                	je     f01034af <envid2env+0xab>
f010348d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103490:	8b 50 50             	mov    0x50(%eax),%edx
f0103493:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0103498:	8b 40 4c             	mov    0x4c(%eax),%eax
f010349b:	39 c2                	cmp    %eax,%edx
f010349d:	74 10                	je     f01034af <envid2env+0xab>
		*env_store = 0;
f010349f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034a2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01034a8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01034ad:	eb 0d                	jmp    f01034bc <envid2env+0xb8>
	}

	*env_store = e;
f01034af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034b2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01034b5:	89 10                	mov    %edx,(%eax)
	return 0;
f01034b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034bc:	83 c4 10             	add    $0x10,%esp
f01034bf:	5b                   	pop    %ebx
f01034c0:	5d                   	pop    %ebp
f01034c1:	c3                   	ret    

f01034c2 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f01034c2:	55                   	push   %ebp
f01034c3:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01034c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01034c8:	8b 15 44 11 3b f0    	mov    0xf03b1144,%edx
f01034ce:	29 d0                	sub    %edx,%eax
f01034d0:	c1 f8 03             	sar    $0x3,%eax
f01034d3:	89 c2                	mov    %eax,%edx
f01034d5:	89 d0                	mov    %edx,%eax
f01034d7:	c1 e0 02             	shl    $0x2,%eax
f01034da:	01 d0                	add    %edx,%eax
f01034dc:	c1 e0 02             	shl    $0x2,%eax
f01034df:	01 d0                	add    %edx,%eax
f01034e1:	c1 e0 02             	shl    $0x2,%eax
f01034e4:	01 d0                	add    %edx,%eax
f01034e6:	89 c1                	mov    %eax,%ecx
f01034e8:	c1 e1 08             	shl    $0x8,%ecx
f01034eb:	01 c8                	add    %ecx,%eax
f01034ed:	89 c1                	mov    %eax,%ecx
f01034ef:	c1 e1 10             	shl    $0x10,%ecx
f01034f2:	01 c8                	add    %ecx,%eax
f01034f4:	01 c0                	add    %eax,%eax
f01034f6:	01 d0                	add    %edx,%eax
}
f01034f8:	5d                   	pop    %ebp
f01034f9:	c3                   	ret    

f01034fa <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f01034fa:	55                   	push   %ebp
f01034fb:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01034fd:	ff 75 08             	pushl  0x8(%ebp)
f0103500:	e8 bd ff ff ff       	call   f01034c2 <to_frame_number>
f0103505:	83 c4 04             	add    $0x4,%esp
f0103508:	c1 e0 0c             	shl    $0xc,%eax
}
f010350b:	c9                   	leave  
f010350c:	c3                   	ret    

f010350d <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f010350d:	55                   	push   %ebp
f010350e:	89 e5                	mov    %esp,%ebp
f0103510:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103513:	8b 45 08             	mov    0x8(%ebp),%eax
f0103516:	c1 e8 0c             	shr    $0xc,%eax
f0103519:	89 c2                	mov    %eax,%edx
f010351b:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0103520:	39 c2                	cmp    %eax,%edx
f0103522:	72 14                	jb     f0103538 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0103524:	83 ec 04             	sub    $0x4,%esp
f0103527:	68 70 cb 11 f0       	push   $0xf011cb70
f010352c:	6a 78                	push   $0x78
f010352e:	68 95 cb 11 f0       	push   $0xf011cb95
f0103533:	e8 5b cc ff ff       	call   f0100193 <_panic>
	return &frames_info[PPN(physical_address)];
f0103538:	8b 15 44 11 3b f0    	mov    0xf03b1144,%edx
f010353e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103541:	c1 e8 0c             	shr    $0xc,%eax
f0103544:	89 c1                	mov    %eax,%ecx
f0103546:	89 c8                	mov    %ecx,%eax
f0103548:	01 c0                	add    %eax,%eax
f010354a:	01 c8                	add    %ecx,%eax
f010354c:	c1 e0 03             	shl    $0x3,%eax
f010354f:	01 d0                	add    %edx,%eax
}
f0103551:	c9                   	leave  
f0103552:	c3                   	ret    

f0103553 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0103553:	55                   	push   %ebp
f0103554:	89 e5                	mov    %esp,%ebp
f0103556:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0103559:	83 ec 08             	sub    $0x8,%esp
f010355c:	68 00 10 00 00       	push   $0x1000
f0103561:	68 00 10 00 00       	push   $0x1000
f0103566:	e8 4f 02 00 00       	call   f01037ba <boot_allocate_space>
f010356b:	83 c4 10             	add    $0x10,%esp
f010356e:	a3 50 11 3b f0       	mov    %eax,0xf03b1150
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0103573:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103578:	83 ec 04             	sub    $0x4,%esp
f010357b:	68 00 10 00 00       	push   $0x1000
f0103580:	6a 00                	push   $0x0
f0103582:	50                   	push   %eax
f0103583:	e8 e8 64 01 00       	call   f0119a70 <memset>
f0103588:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010358b:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103590:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103593:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f010359a:	77 14                	ja     f01035b0 <initialize_kernel_VM+0x5d>
f010359c:	ff 75 e8             	pushl  -0x18(%ebp)
f010359f:	68 b0 cb 11 f0       	push   $0xf011cbb0
f01035a4:	6a 53                	push   $0x53
f01035a6:	68 e1 cb 11 f0       	push   $0xf011cbe1
f01035ab:	e8 e3 cb ff ff       	call   f0100193 <_panic>
f01035b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01035b3:	05 00 00 00 10       	add    $0x10000000,%eax
f01035b8:	a3 58 11 3b f0       	mov    %eax,0xf03b1158
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f01035bd:	c7 45 e4 00 c0 14 f0 	movl   $0xf014c000,-0x1c(%ebp)
f01035c4:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f01035cb:	77 14                	ja     f01035e1 <initialize_kernel_VM+0x8e>
f01035cd:	ff 75 e4             	pushl  -0x1c(%ebp)
f01035d0:	68 b0 cb 11 f0       	push   $0xf011cbb0
f01035d5:	6a 5b                	push   $0x5b
f01035d7:	68 e1 cb 11 f0       	push   $0xf011cbe1
f01035dc:	e8 b2 cb ff ff       	call   f0100193 <_panic>
f01035e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01035e4:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01035ea:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f01035ef:	83 ec 0c             	sub    $0xc,%esp
f01035f2:	6a 02                	push   $0x2
f01035f4:	52                   	push   %edx
f01035f5:	68 00 80 00 00       	push   $0x8000
f01035fa:	68 00 80 bf ef       	push   $0xefbf8000
f01035ff:	50                   	push   %eax
f0103600:	e8 16 02 00 00       	call   f010381b <boot_map_range>
f0103605:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0103608:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f010360f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0103616:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f010361d:	eb 25                	jmp    f0103644 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f010361f:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0103622:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103625:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010362a:	83 ec 04             	sub    $0x4,%esp
f010362d:	6a 01                	push   $0x1
f010362f:	52                   	push   %edx
f0103630:	50                   	push   %eax
f0103631:	e8 59 02 00 00       	call   f010388f <boot_get_page_table>
f0103636:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0103639:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0103640:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0103644:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103648:	72 d5                	jb     f010361f <initialize_kernel_VM+0xcc>
f010364a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010364e:	77 06                	ja     f0103656 <initialize_kernel_VM+0x103>
f0103650:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0103654:	76 c9                	jbe    f010361f <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct Frame_Info) ;
f0103656:	8b 15 b0 2c 39 f0    	mov    0xf0392cb0,%edx
f010365c:	89 d0                	mov    %edx,%eax
f010365e:	01 c0                	add    %eax,%eax
f0103660:	01 d0                	add    %edx,%eax
f0103662:	c1 e0 03             	shl    $0x3,%eax
f0103665:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0103668:	83 ec 08             	sub    $0x8,%esp
f010366b:	68 00 10 00 00       	push   $0x1000
f0103670:	ff 75 e0             	pushl  -0x20(%ebp)
f0103673:	e8 42 01 00 00       	call   f01037ba <boot_allocate_space>
f0103678:	83 c4 10             	add    $0x10,%esp
f010367b:	a3 44 11 3b f0       	mov    %eax,0xf03b1144
	memset(frames_info, 0, array_size);
f0103680:	a1 44 11 3b f0       	mov    0xf03b1144,%eax
f0103685:	83 ec 04             	sub    $0x4,%esp
f0103688:	ff 75 e0             	pushl  -0x20(%ebp)
f010368b:	6a 00                	push   $0x0
f010368d:	50                   	push   %eax
f010368e:	e8 dd 63 01 00       	call   f0119a70 <memset>
f0103693:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct Frame_Info);
f0103696:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f010369d:	83 ec 08             	sub    $0x8,%esp
f01036a0:	68 00 10 00 00       	push   $0x1000
f01036a5:	ff 75 dc             	pushl  -0x24(%ebp)
f01036a8:	e8 0d 01 00 00       	call   f01037ba <boot_allocate_space>
f01036ad:	83 c4 10             	add    $0x10,%esp
f01036b0:	a3 30 11 3b f0       	mov    %eax,0xf03b1130
	memset(disk_frames_info , 0, disk_array_size);
f01036b5:	a1 30 11 3b f0       	mov    0xf03b1130,%eax
f01036ba:	83 ec 04             	sub    $0x4,%esp
f01036bd:	ff 75 dc             	pushl  -0x24(%ebp)
f01036c0:	6a 00                	push   $0x0
f01036c2:	50                   	push   %eax
f01036c3:	e8 a8 63 01 00       	call   f0119a70 <memset>
f01036c8:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f01036cb:	e8 a6 fc ff ff       	call   f0103376 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d\n",NENV);
f01036d0:	83 ec 08             	sub    $0x8,%esp
f01036d3:	6a 11                	push   $0x11
f01036d5:	68 f7 cb 11 f0       	push   $0xf011cbf7
f01036da:	e8 c4 3e 00 00       	call   f01075a3 <cprintf>
f01036df:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01036e2:	c7 45 d8 f8 e6 0f 00 	movl   $0xfe6f8,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01036e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01036ec:	83 ec 08             	sub    $0x8,%esp
f01036ef:	68 00 10 00 00       	push   $0x1000
f01036f4:	50                   	push   %eax
f01036f5:	e8 c0 00 00 00       	call   f01037ba <boot_allocate_space>
f01036fa:	83 c4 10             	add    $0x10,%esp
f01036fd:	a3 2c 58 32 f0       	mov    %eax,0xf032582c
	memset(envs , 0, envs_size);
f0103702:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0103705:	a1 2c 58 32 f0       	mov    0xf032582c,%eax
f010370a:	83 ec 04             	sub    $0x4,%esp
f010370d:	52                   	push   %edx
f010370e:	6a 00                	push   $0x0
f0103710:	50                   	push   %eax
f0103711:	e8 5a 63 01 00       	call   f0119a70 <memset>
f0103716:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0103719:	a1 2c 58 32 f0       	mov    0xf032582c,%eax
f010371e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0103721:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0103728:	77 17                	ja     f0103741 <initialize_kernel_VM+0x1ee>
f010372a:	ff 75 d4             	pushl  -0x2c(%ebp)
f010372d:	68 b0 cb 11 f0       	push   $0xf011cbb0
f0103732:	68 a4 00 00 00       	push   $0xa4
f0103737:	68 e1 cb 11 f0       	push   $0xf011cbe1
f010373c:	e8 52 ca ff ff       	call   f0100193 <_panic>
f0103741:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103744:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f010374a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010374d:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103752:	83 ec 0c             	sub    $0xc,%esp
f0103755:	6a 04                	push   $0x4
f0103757:	51                   	push   %ecx
f0103758:	52                   	push   %edx
f0103759:	68 00 00 c0 ee       	push   $0xeec00000
f010375e:	50                   	push   %eax
f010375f:	e8 b7 00 00 00       	call   f010381b <boot_map_range>
f0103764:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0103767:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010376c:	05 ec 0e 00 00       	add    $0xeec,%eax
f0103771:	8b 15 50 11 3b f0    	mov    0xf03b1150,%edx
f0103777:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010377d:	8b 12                	mov    (%edx),%edx
f010377f:	83 ca 05             	or     $0x5,%edx
f0103782:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0103784:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0103789:	83 ec 0c             	sub    $0xc,%esp
f010378c:	6a 02                	push   $0x2
f010378e:	6a 00                	push   $0x0
f0103790:	68 ff ff ff 0f       	push   $0xfffffff
f0103795:	68 00 00 00 f0       	push   $0xf0000000
f010379a:	50                   	push   %eax
f010379b:	e8 7b 00 00 00       	call   f010381b <boot_map_range>
f01037a0:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f01037a3:	e8 46 f8 ff ff       	call   f0102fee <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f01037a8:	c7 05 c0 c0 38 f0 19 	movl   $0x19,0xf038c0c0
f01037af:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f01037b2:	e8 bf fa ff ff       	call   f0103276 <turn_on_paging>
}
f01037b7:	90                   	nop
f01037b8:	c9                   	leave  
f01037b9:	c3                   	ret    

f01037ba <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f01037ba:	55                   	push   %ebp
f01037bb:	89 e5                	mov    %esp,%ebp
f01037bd:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f01037c0:	a1 4c 11 3b f0       	mov    0xf03b114c,%eax
f01037c5:	85 c0                	test   %eax,%eax
f01037c7:	75 0a                	jne    f01037d3 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f01037c9:	c7 05 4c 11 3b f0 50 	movl   $0xf03b1250,0xf03b114c
f01037d0:	12 3b f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f01037d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01037d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01037d9:	a1 4c 11 3b f0       	mov    0xf03b114c,%eax
f01037de:	89 c2                	mov    %eax,%edx
f01037e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01037e3:	01 d0                	add    %edx,%eax
f01037e5:	48                   	dec    %eax
f01037e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
f01037e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01037ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01037f1:	f7 75 fc             	divl   -0x4(%ebp)
f01037f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01037f7:	29 d0                	sub    %edx,%eax
f01037f9:	a3 4c 11 3b f0       	mov    %eax,0xf03b114c

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01037fe:	a1 4c 11 3b f0       	mov    0xf03b114c,%eax
f0103803:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0103806:	8b 15 4c 11 3b f0    	mov    0xf03b114c,%edx
f010380c:	8b 45 08             	mov    0x8(%ebp),%eax
f010380f:	01 d0                	add    %edx,%eax
f0103811:	a3 4c 11 3b f0       	mov    %eax,0xf03b114c

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0103816:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0103819:	c9                   	leave  
f010381a:	c3                   	ret    

f010381b <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f010381b:	55                   	push   %ebp
f010381c:	89 e5                	mov    %esp,%ebp
f010381e:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0103821:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0103828:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010382f:	eb 53                	jmp    f0103884 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0103831:	83 ec 04             	sub    $0x4,%esp
f0103834:	6a 01                	push   $0x1
f0103836:	ff 75 0c             	pushl  0xc(%ebp)
f0103839:	ff 75 08             	pushl  0x8(%ebp)
f010383c:	e8 4e 00 00 00       	call   f010388f <boot_get_page_table>
f0103841:	83 c4 10             	add    $0x10,%esp
f0103844:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0103847:	8b 45 0c             	mov    0xc(%ebp),%eax
f010384a:	c1 e8 0c             	shr    $0xc,%eax
f010384d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0103852:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0103855:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103858:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010385f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103862:	01 c2                	add    %eax,%edx
f0103864:	8b 45 18             	mov    0x18(%ebp),%eax
f0103867:	0b 45 14             	or     0x14(%ebp),%eax
f010386a:	83 c8 01             	or     $0x1,%eax
f010386d:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f010386f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0103876:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010387d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0103884:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103887:	3b 45 10             	cmp    0x10(%ebp),%eax
f010388a:	72 a5                	jb     f0103831 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010388c:	90                   	nop
f010388d:	c9                   	leave  
f010388e:	c3                   	ret    

f010388f <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010388f:	55                   	push   %ebp
f0103890:	89 e5                	mov    %esp,%ebp
f0103892:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0103895:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103898:	c1 e8 16             	shr    $0x16,%eax
f010389b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010389e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01038a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01038a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ab:	01 d0                	add    %edx,%eax
f01038ad:	8b 00                	mov    (%eax),%eax
f01038af:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f01038b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01038b5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01038ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f01038bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01038c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01038c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038c6:	c1 e8 0c             	shr    $0xc,%eax
f01038c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01038cc:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f01038d1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01038d4:	72 17                	jb     f01038ed <boot_get_page_table+0x5e>
f01038d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01038d9:	68 08 cc 11 f0       	push   $0xf011cc08
f01038de:	68 23 01 00 00       	push   $0x123
f01038e3:	68 e1 cb 11 f0       	push   $0xf011cbe1
f01038e8:	e8 a6 c8 ff ff       	call   f0100193 <_panic>
f01038ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038f0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01038f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01038f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01038fc:	75 72                	jne    f0103970 <boot_get_page_table+0xe1>
	{
		if (create)
f01038fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103902:	74 65                	je     f0103969 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0103904:	83 ec 08             	sub    $0x8,%esp
f0103907:	68 00 10 00 00       	push   $0x1000
f010390c:	68 00 10 00 00       	push   $0x1000
f0103911:	e8 a4 fe ff ff       	call   f01037ba <boot_allocate_space>
f0103916:	83 c4 10             	add    $0x10,%esp
f0103919:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f010391c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010391f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103922:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0103929:	77 17                	ja     f0103942 <boot_get_page_table+0xb3>
f010392b:	ff 75 dc             	pushl  -0x24(%ebp)
f010392e:	68 b0 cb 11 f0       	push   $0xf011cbb0
f0103933:	68 29 01 00 00       	push   $0x129
f0103938:	68 e1 cb 11 f0       	push   $0xf011cbe1
f010393d:	e8 51 c8 ff ff       	call   f0100193 <_panic>
f0103942:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103945:	05 00 00 00 10       	add    $0x10000000,%eax
f010394a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f010394d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103950:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103957:	8b 45 08             	mov    0x8(%ebp),%eax
f010395a:	01 d0                	add    %edx,%eax
f010395c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010395f:	83 ca 03             	or     $0x3,%edx
f0103962:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0103964:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103967:	eb 0a                	jmp    f0103973 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0103969:	b8 00 00 00 00       	mov    $0x0,%eax
f010396e:	eb 03                	jmp    f0103973 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0103970:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0103973:	c9                   	leave  
f0103974:	c3                   	ret    

f0103975 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0103975:	55                   	push   %ebp
f0103976:	89 e5                	mov    %esp,%ebp
f0103978:	53                   	push   %ebx
f0103979:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f010397c:	c7 05 34 11 3b f0 00 	movl   $0x0,0xf03b1134
f0103983:	00 00 00 
f0103986:	c7 05 38 11 3b f0 00 	movl   $0x0,0xf03b1138
f010398d:	00 00 00 
f0103990:	c7 05 40 11 3b f0 00 	movl   $0x0,0xf03b1140
f0103997:	00 00 00 
	LIST_INIT(&modified_frame_list);
f010399a:	c7 05 20 11 3b f0 00 	movl   $0x0,0xf03b1120
f01039a1:	00 00 00 
f01039a4:	c7 05 24 11 3b f0 00 	movl   $0x0,0xf03b1124
f01039ab:	00 00 00 
f01039ae:	c7 05 2c 11 3b f0 00 	movl   $0x0,0xf03b112c
f01039b5:	00 00 00 

	frames_info[0].references = 1;
f01039b8:	a1 44 11 3b f0       	mov    0xf03b1144,%eax
f01039bd:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f01039c3:	a1 44 11 3b f0       	mov    0xf03b1144,%eax
f01039c8:	83 c0 18             	add    $0x18,%eax
f01039cb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f01039d1:	a1 44 11 3b f0       	mov    0xf03b1144,%eax
f01039d6:	83 c0 30             	add    $0x30,%eax
f01039d9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f01039df:	c7 05 48 11 3b f0 00 	movl   $0xf0001000,0xf03b1148
f01039e6:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f01039e9:	c7 05 54 11 3b f0 00 	movl   $0xf0002000,0xf03b1154
f01039f0:	20 00 f0 
	i =0;
f01039f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f01039fa:	eb 1f                	jmp    f0103a1b <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f01039fc:	8b 15 48 11 3b f0    	mov    0xf03b1148,%edx
f0103a02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a05:	01 d0                	add    %edx,%eax
f0103a07:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0103a0a:	8b 15 54 11 3b f0    	mov    0xf03b1154,%edx
f0103a10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a13:	01 d0                	add    %edx,%eax
f0103a15:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0103a18:	ff 45 f4             	incl   -0xc(%ebp)
f0103a1b:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0103a22:	7e d8                	jle    f01039fc <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0103a24:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103a2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a2e:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0103a33:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103a36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103a39:	ba 00 00 00 00       	mov    $0x0,%edx
f0103a3e:	f7 75 f0             	divl   -0x10(%ebp)
f0103a41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103a44:	29 d0                	sub    %edx,%eax
f0103a46:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0103a49:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0103a50:	e9 bc 00 00 00       	jmp    f0103b11 <initialize_paging+0x19c>
	{

		initialize_frame_info(&(frames_info[i]));
f0103a55:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103a5b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a5e:	89 d0                	mov    %edx,%eax
f0103a60:	01 c0                	add    %eax,%eax
f0103a62:	01 d0                	add    %edx,%eax
f0103a64:	c1 e0 03             	shl    $0x3,%eax
f0103a67:	01 c8                	add    %ecx,%eax
f0103a69:	83 ec 0c             	sub    $0xc,%esp
f0103a6c:	50                   	push   %eax
f0103a6d:	e8 62 02 00 00       	call   f0103cd4 <initialize_frame_info>
f0103a72:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0103a75:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103a7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a7e:	89 d0                	mov    %edx,%eax
f0103a80:	01 c0                	add    %eax,%eax
f0103a82:	01 d0                	add    %edx,%eax
f0103a84:	c1 e0 03             	shl    $0x3,%eax
f0103a87:	01 c8                	add    %ecx,%eax
f0103a89:	8b 15 34 11 3b f0    	mov    0xf03b1134,%edx
f0103a8f:	89 10                	mov    %edx,(%eax)
f0103a91:	8b 00                	mov    (%eax),%eax
f0103a93:	85 c0                	test   %eax,%eax
f0103a95:	74 1f                	je     f0103ab6 <initialize_paging+0x141>
f0103a97:	8b 15 34 11 3b f0    	mov    0xf03b1134,%edx
f0103a9d:	8b 1d 44 11 3b f0    	mov    0xf03b1144,%ebx
f0103aa3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103aa6:	89 c8                	mov    %ecx,%eax
f0103aa8:	01 c0                	add    %eax,%eax
f0103aaa:	01 c8                	add    %ecx,%eax
f0103aac:	c1 e0 03             	shl    $0x3,%eax
f0103aaf:	01 d8                	add    %ebx,%eax
f0103ab1:	89 42 04             	mov    %eax,0x4(%edx)
f0103ab4:	eb 19                	jmp    f0103acf <initialize_paging+0x15a>
f0103ab6:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103abc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103abf:	89 d0                	mov    %edx,%eax
f0103ac1:	01 c0                	add    %eax,%eax
f0103ac3:	01 d0                	add    %edx,%eax
f0103ac5:	c1 e0 03             	shl    $0x3,%eax
f0103ac8:	01 c8                	add    %ecx,%eax
f0103aca:	a3 38 11 3b f0       	mov    %eax,0xf03b1138
f0103acf:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103ad5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103ad8:	89 d0                	mov    %edx,%eax
f0103ada:	01 c0                	add    %eax,%eax
f0103adc:	01 d0                	add    %edx,%eax
f0103ade:	c1 e0 03             	shl    $0x3,%eax
f0103ae1:	01 c8                	add    %ecx,%eax
f0103ae3:	a3 34 11 3b f0       	mov    %eax,0xf03b1134
f0103ae8:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103aee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103af1:	89 d0                	mov    %edx,%eax
f0103af3:	01 c0                	add    %eax,%eax
f0103af5:	01 d0                	add    %edx,%eax
f0103af7:	c1 e0 03             	shl    $0x3,%eax
f0103afa:	01 c8                	add    %ecx,%eax
f0103afc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b03:	a1 40 11 3b f0       	mov    0xf03b1140,%eax
f0103b08:	40                   	inc    %eax
f0103b09:	a3 40 11 3b f0       	mov    %eax,0xf03b1140
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0103b0e:	ff 45 f4             	incl   -0xc(%ebp)
f0103b11:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b14:	85 c0                	test   %eax,%eax
f0103b16:	79 05                	jns    f0103b1d <initialize_paging+0x1a8>
f0103b18:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103b1d:	c1 f8 0c             	sar    $0xc,%eax
f0103b20:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103b23:	0f 8f 2c ff ff ff    	jg     f0103a55 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0103b29:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0103b30:	eb 1d                	jmp    f0103b4f <initialize_paging+0x1da>
	{
		frames_info[i].references = 1;
f0103b32:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b3b:	89 d0                	mov    %edx,%eax
f0103b3d:	01 c0                	add    %eax,%eax
f0103b3f:	01 d0                	add    %edx,%eax
f0103b41:	c1 e0 03             	shl    $0x3,%eax
f0103b44:	01 c8                	add    %ecx,%eax
f0103b46:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0103b4c:	ff 45 f4             	incl   -0xc(%ebp)
f0103b4f:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0103b56:	7e da                	jle    f0103b32 <initialize_paging+0x1bd>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0103b58:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0103b5f:	a1 4c 11 3b f0       	mov    0xf03b114c,%eax
f0103b64:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103b67:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0103b6e:	77 17                	ja     f0103b87 <initialize_paging+0x212>
f0103b70:	ff 75 e0             	pushl  -0x20(%ebp)
f0103b73:	68 b0 cb 11 f0       	push   $0xf011cbb0
f0103b78:	68 76 01 00 00       	push   $0x176
f0103b7d:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0103b82:	e8 0c c6 ff ff       	call   f0100193 <_panic>
f0103b87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103b8a:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0103b90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103b93:	01 d0                	add    %edx,%eax
f0103b95:	48                   	dec    %eax
f0103b96:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103b99:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103b9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0103ba1:	f7 75 e4             	divl   -0x1c(%ebp)
f0103ba4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103ba7:	29 d0                	sub    %edx,%eax
f0103ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103bac:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0103bb3:	eb 1d                	jmp    f0103bd2 <initialize_paging+0x25d>
	{
		frames_info[i].references = 1;
f0103bb5:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103bbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bbe:	89 d0                	mov    %edx,%eax
f0103bc0:	01 c0                	add    %eax,%eax
f0103bc2:	01 d0                	add    %edx,%eax
f0103bc4:	c1 e0 03             	shl    $0x3,%eax
f0103bc7:	01 c8                	add    %ecx,%eax
f0103bc9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0103bcf:	ff 45 f4             	incl   -0xc(%ebp)
f0103bd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bd5:	85 c0                	test   %eax,%eax
f0103bd7:	79 05                	jns    f0103bde <initialize_paging+0x269>
f0103bd9:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103bde:	c1 f8 0c             	sar    $0xc,%eax
f0103be1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103be4:	7f cf                	jg     f0103bb5 <initialize_paging+0x240>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0103be6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103be9:	85 c0                	test   %eax,%eax
f0103beb:	79 05                	jns    f0103bf2 <initialize_paging+0x27d>
f0103bed:	05 ff 0f 00 00       	add    $0xfff,%eax
f0103bf2:	c1 f8 0c             	sar    $0xc,%eax
f0103bf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103bf8:	e9 bc 00 00 00       	jmp    f0103cb9 <initialize_paging+0x344>
	{
		initialize_frame_info(&(frames_info[i]));
f0103bfd:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103c03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c06:	89 d0                	mov    %edx,%eax
f0103c08:	01 c0                	add    %eax,%eax
f0103c0a:	01 d0                	add    %edx,%eax
f0103c0c:	c1 e0 03             	shl    $0x3,%eax
f0103c0f:	01 c8                	add    %ecx,%eax
f0103c11:	83 ec 0c             	sub    $0xc,%esp
f0103c14:	50                   	push   %eax
f0103c15:	e8 ba 00 00 00       	call   f0103cd4 <initialize_frame_info>
f0103c1a:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f0103c1d:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103c23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c26:	89 d0                	mov    %edx,%eax
f0103c28:	01 c0                	add    %eax,%eax
f0103c2a:	01 d0                	add    %edx,%eax
f0103c2c:	c1 e0 03             	shl    $0x3,%eax
f0103c2f:	01 c8                	add    %ecx,%eax
f0103c31:	8b 15 34 11 3b f0    	mov    0xf03b1134,%edx
f0103c37:	89 10                	mov    %edx,(%eax)
f0103c39:	8b 00                	mov    (%eax),%eax
f0103c3b:	85 c0                	test   %eax,%eax
f0103c3d:	74 1f                	je     f0103c5e <initialize_paging+0x2e9>
f0103c3f:	8b 15 34 11 3b f0    	mov    0xf03b1134,%edx
f0103c45:	8b 1d 44 11 3b f0    	mov    0xf03b1144,%ebx
f0103c4b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103c4e:	89 c8                	mov    %ecx,%eax
f0103c50:	01 c0                	add    %eax,%eax
f0103c52:	01 c8                	add    %ecx,%eax
f0103c54:	c1 e0 03             	shl    $0x3,%eax
f0103c57:	01 d8                	add    %ebx,%eax
f0103c59:	89 42 04             	mov    %eax,0x4(%edx)
f0103c5c:	eb 19                	jmp    f0103c77 <initialize_paging+0x302>
f0103c5e:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103c64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c67:	89 d0                	mov    %edx,%eax
f0103c69:	01 c0                	add    %eax,%eax
f0103c6b:	01 d0                	add    %edx,%eax
f0103c6d:	c1 e0 03             	shl    $0x3,%eax
f0103c70:	01 c8                	add    %ecx,%eax
f0103c72:	a3 38 11 3b f0       	mov    %eax,0xf03b1138
f0103c77:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103c7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c80:	89 d0                	mov    %edx,%eax
f0103c82:	01 c0                	add    %eax,%eax
f0103c84:	01 d0                	add    %edx,%eax
f0103c86:	c1 e0 03             	shl    $0x3,%eax
f0103c89:	01 c8                	add    %ecx,%eax
f0103c8b:	a3 34 11 3b f0       	mov    %eax,0xf03b1134
f0103c90:	8b 0d 44 11 3b f0    	mov    0xf03b1144,%ecx
f0103c96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c99:	89 d0                	mov    %edx,%eax
f0103c9b:	01 c0                	add    %eax,%eax
f0103c9d:	01 d0                	add    %edx,%eax
f0103c9f:	c1 e0 03             	shl    $0x3,%eax
f0103ca2:	01 c8                	add    %ecx,%eax
f0103ca4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103cab:	a1 40 11 3b f0       	mov    0xf03b1140,%eax
f0103cb0:	40                   	inc    %eax
f0103cb1:	a3 40 11 3b f0       	mov    %eax,0xf03b1140
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0103cb6:	ff 45 f4             	incl   -0xc(%ebp)
f0103cb9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103cbc:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0103cc1:	39 c2                	cmp    %eax,%edx
f0103cc3:	0f 82 34 ff ff ff    	jb     f0103bfd <initialize_paging+0x288>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f0103cc9:	e8 42 7e 00 00       	call   f010bb10 <initialize_disk_page_file>
}
f0103cce:	90                   	nop
f0103ccf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103cd2:	c9                   	leave  
f0103cd3:	c3                   	ret    

f0103cd4 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct Frame_Info *ptr_frame_info)
{
f0103cd4:	55                   	push   %ebp
f0103cd5:	89 e5                	mov    %esp,%ebp
f0103cd7:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0103cda:	83 ec 04             	sub    $0x4,%esp
f0103cdd:	6a 18                	push   $0x18
f0103cdf:	6a 00                	push   $0x0
f0103ce1:	ff 75 08             	pushl  0x8(%ebp)
f0103ce4:	e8 87 5d 01 00       	call   f0119a70 <memset>
f0103ce9:	83 c4 10             	add    $0x10,%esp
}
f0103cec:	90                   	nop
f0103ced:	c9                   	leave  
f0103cee:	c3                   	ret    

f0103cef <allocate_frame>:
// Hint: references should not be incremented

extern void env_free(struct Env *e);

int allocate_frame(struct Frame_Info **ptr_frame_info)
{
f0103cef:	55                   	push   %ebp
f0103cf0:	89 e5                	mov    %esp,%ebp
f0103cf2:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f0103cf5:	8b 15 34 11 3b f0    	mov    0xf03b1134,%edx
f0103cfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cfe:	89 10                	mov    %edx,(%eax)
	int c = 0;
f0103d00:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f0103d07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d0a:	8b 00                	mov    (%eax),%eax
f0103d0c:	85 c0                	test   %eax,%eax
f0103d0e:	75 17                	jne    f0103d27 <allocate_frame+0x38>
	{
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0103d10:	83 ec 04             	sub    $0x4,%esp
f0103d13:	68 38 cc 11 f0       	push   $0xf011cc38
f0103d18:	68 a9 01 00 00       	push   $0x1a9
f0103d1d:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0103d22:	e8 6c c4 ff ff       	call   f0100193 <_panic>
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the second list of the working set of EACH process

	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0103d27:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d2a:	8b 00                	mov    (%eax),%eax
f0103d2c:	8b 00                	mov    (%eax),%eax
f0103d2e:	85 c0                	test   %eax,%eax
f0103d30:	74 14                	je     f0103d46 <allocate_frame+0x57>
f0103d32:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d35:	8b 00                	mov    (%eax),%eax
f0103d37:	8b 00                	mov    (%eax),%eax
f0103d39:	8b 55 08             	mov    0x8(%ebp),%edx
f0103d3c:	8b 12                	mov    (%edx),%edx
f0103d3e:	8b 52 04             	mov    0x4(%edx),%edx
f0103d41:	89 50 04             	mov    %edx,0x4(%eax)
f0103d44:	eb 0d                	jmp    f0103d53 <allocate_frame+0x64>
f0103d46:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d49:	8b 00                	mov    (%eax),%eax
f0103d4b:	8b 40 04             	mov    0x4(%eax),%eax
f0103d4e:	a3 38 11 3b f0       	mov    %eax,0xf03b1138
f0103d53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d56:	8b 00                	mov    (%eax),%eax
f0103d58:	8b 40 04             	mov    0x4(%eax),%eax
f0103d5b:	85 c0                	test   %eax,%eax
f0103d5d:	74 13                	je     f0103d72 <allocate_frame+0x83>
f0103d5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d62:	8b 00                	mov    (%eax),%eax
f0103d64:	8b 40 04             	mov    0x4(%eax),%eax
f0103d67:	8b 55 08             	mov    0x8(%ebp),%edx
f0103d6a:	8b 12                	mov    (%edx),%edx
f0103d6c:	8b 12                	mov    (%edx),%edx
f0103d6e:	89 10                	mov    %edx,(%eax)
f0103d70:	eb 0c                	jmp    f0103d7e <allocate_frame+0x8f>
f0103d72:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d75:	8b 00                	mov    (%eax),%eax
f0103d77:	8b 00                	mov    (%eax),%eax
f0103d79:	a3 34 11 3b f0       	mov    %eax,0xf03b1134
f0103d7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d81:	8b 00                	mov    (%eax),%eax
f0103d83:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103d89:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d8c:	8b 00                	mov    (%eax),%eax
f0103d8e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103d95:	a1 40 11 3b f0       	mov    0xf03b1140,%eax
f0103d9a:	48                   	dec    %eax
f0103d9b:	a3 40 11 3b f0       	mov    %eax,0xf03b1140

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0103da0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103da3:	8b 00                	mov    (%eax),%eax
f0103da5:	8a 40 14             	mov    0x14(%eax),%al
f0103da8:	84 c0                	test   %al,%al
f0103daa:	74 1d                	je     f0103dc9 <allocate_frame+0xda>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment,(*ptr_frame_info)->va);
f0103dac:	8b 45 08             	mov    0x8(%ebp),%eax
f0103daf:	8b 00                	mov    (%eax),%eax
f0103db1:	8b 50 0c             	mov    0xc(%eax),%edx
f0103db4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103db7:	8b 00                	mov    (%eax),%eax
f0103db9:	8b 40 10             	mov    0x10(%eax),%eax
f0103dbc:	83 ec 08             	sub    $0x8,%esp
f0103dbf:	52                   	push   %edx
f0103dc0:	50                   	push   %eax
f0103dc1:	e8 28 0d 00 00       	call   f0104aee <pt_clear_page_table_entry>
f0103dc6:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f0103dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dcc:	8b 00                	mov    (%eax),%eax
f0103dce:	83 ec 0c             	sub    $0xc,%esp
f0103dd1:	50                   	push   %eax
f0103dd2:	e8 fd fe ff ff       	call   f0103cd4 <initialize_frame_info>
f0103dd7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103dda:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103ddf:	c9                   	leave  
f0103de0:	c3                   	ret    

f0103de1 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct Frame_Info *ptr_frame_info)
{
f0103de1:	55                   	push   %ebp
f0103de2:	89 e5                	mov    %esp,%ebp
f0103de4:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f0103de7:	83 ec 0c             	sub    $0xc,%esp
f0103dea:	ff 75 08             	pushl  0x8(%ebp)
f0103ded:	e8 e2 fe ff ff       	call   f0103cd4 <initialize_frame_info>
f0103df2:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0103df5:	8b 15 34 11 3b f0    	mov    0xf03b1134,%edx
f0103dfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dfe:	89 10                	mov    %edx,(%eax)
f0103e00:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e03:	8b 00                	mov    (%eax),%eax
f0103e05:	85 c0                	test   %eax,%eax
f0103e07:	74 0d                	je     f0103e16 <free_frame+0x35>
f0103e09:	a1 34 11 3b f0       	mov    0xf03b1134,%eax
f0103e0e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e11:	89 50 04             	mov    %edx,0x4(%eax)
f0103e14:	eb 08                	jmp    f0103e1e <free_frame+0x3d>
f0103e16:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e19:	a3 38 11 3b f0       	mov    %eax,0xf03b1138
f0103e1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e21:	a3 34 11 3b f0       	mov    %eax,0xf03b1134
f0103e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e29:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103e30:	a1 40 11 3b f0       	mov    0xf03b1140,%eax
f0103e35:	40                   	inc    %eax
f0103e36:	a3 40 11 3b f0       	mov    %eax,0xf03b1140
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
}
f0103e3b:	90                   	nop
f0103e3c:	c9                   	leave  
f0103e3d:	c3                   	ret    

f0103e3e <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct Frame_Info* ptr_frame_info)
{
f0103e3e:	55                   	push   %ebp
f0103e3f:	89 e5                	mov    %esp,%ebp
f0103e41:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0103e44:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e47:	8b 40 08             	mov    0x8(%eax),%eax
f0103e4a:	48                   	dec    %eax
f0103e4b:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e4e:	66 89 42 08          	mov    %ax,0x8(%edx)
f0103e52:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e55:	8b 40 08             	mov    0x8(%eax),%eax
f0103e58:	66 85 c0             	test   %ax,%ax
f0103e5b:	75 0e                	jne    f0103e6b <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0103e5d:	83 ec 0c             	sub    $0xc,%esp
f0103e60:	ff 75 08             	pushl  0x8(%ebp)
f0103e63:	e8 79 ff ff ff       	call   f0103de1 <free_frame>
f0103e68:	83 c4 10             	add    $0x10,%esp
}
f0103e6b:	90                   	nop
f0103e6c:	c9                   	leave  
f0103e6d:	c3                   	ret    

f0103e6e <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const void *virtual_address, uint32 **ptr_page_table)
{
f0103e6e:	55                   	push   %ebp
f0103e6f:	89 e5                	mov    %esp,%ebp
f0103e71:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103e74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e77:	c1 e8 16             	shr    $0x16,%eax
f0103e7a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103e81:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e84:	01 d0                	add    %edx,%eax
f0103e86:	8b 00                	mov    (%eax),%eax
f0103e88:	89 45 f4             	mov    %eax,-0xc(%ebp)
		*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
	}
	else
	{
		*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103e8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103e8e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e93:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103e96:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e99:	c1 e8 0c             	shr    $0xc,%eax
f0103e9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103e9f:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0103ea4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103ea7:	72 17                	jb     f0103ec0 <get_page_table+0x52>
f0103ea9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103eac:	68 08 cc 11 f0       	push   $0xf011cc08
f0103eb1:	68 f1 01 00 00       	push   $0x1f1
f0103eb6:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0103ebb:	e8 d3 c2 ff ff       	call   f0100193 <_panic>
f0103ec0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ec3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103ec8:	89 c2                	mov    %eax,%edx
f0103eca:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ecd:	89 10                	mov    %edx,(%eax)
	}

	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0103ecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103ed2:	83 e0 01             	and    $0x1,%eax
f0103ed5:	85 c0                	test   %eax,%eax
f0103ed7:	74 0a                	je     f0103ee3 <get_page_table+0x75>
	{
		return TABLE_IN_MEMORY;
f0103ed9:	b8 00 00 00 00       	mov    $0x0,%eax
f0103ede:	e9 8f 00 00 00       	jmp    f0103f72 <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0103ee3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103ee7:	74 7b                	je     f0103f64 <get_page_table+0xf6>
	{
		// Put the faulted address in CR2 and then
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;
f0103ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103eec:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0103eef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103ef2:	0f 22 d0             	mov    %eax,%cr2

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0103ef5:	83 ec 0c             	sub    $0xc,%esp
f0103ef8:	6a 00                	push   $0x0
f0103efa:	e8 b3 4e 00 00       	call   f0108db2 <fault_handler>
f0103eff:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103f02:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103f05:	c1 e8 16             	shr    $0x16,%eax
f0103f08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103f0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f12:	01 d0                	add    %edx,%eax
f0103f14:	8b 00                	mov    (%eax),%eax
f0103f16:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0103f19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f1c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f21:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103f24:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f27:	c1 e8 0c             	shr    $0xc,%eax
f0103f2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f2d:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0103f32:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103f35:	72 17                	jb     f0103f4e <get_page_table+0xe0>
f0103f37:	ff 75 e8             	pushl  -0x18(%ebp)
f0103f3a:	68 08 cc 11 f0       	push   $0xf011cc08
f0103f3f:	68 0c 02 00 00       	push   $0x20c
f0103f44:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0103f49:	e8 45 c2 ff ff       	call   f0100193 <_panic>
f0103f4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f51:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f56:	89 c2                	mov    %eax,%edx
f0103f58:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f5b:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0103f5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103f62:	eb 0e                	jmp    f0103f72 <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0103f64:	8b 45 10             	mov    0x10(%ebp),%eax
f0103f67:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0103f6d:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0103f72:	c9                   	leave  
f0103f73:	c3                   	ret    

f0103f74 <create_page_table>:

void * create_page_table(uint32 *ptr_page_directory, const uint32 virtual_address)
{
f0103f74:	55                   	push   %ebp
f0103f75:	89 e5                	mov    %esp,%ebp
f0103f77:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0103f7a:	83 ec 04             	sub    $0x4,%esp
f0103f7d:	68 88 cc 11 f0       	push   $0xf011cc88
f0103f82:	68 1b 02 00 00       	push   $0x21b
f0103f87:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0103f8c:	e8 02 c2 ff ff       	call   f0100193 <_panic>

f0103f91 <__static_cpt>:
	return NULL;
}

void __static_cpt(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0103f91:	55                   	push   %ebp
f0103f92:	89 e5                	mov    %esp,%ebp
f0103f94:	83 ec 28             	sub    $0x28,%esp
	struct Frame_Info* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0103f97:	83 ec 0c             	sub    $0xc,%esp
f0103f9a:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0103f9d:	50                   	push   %eax
f0103f9e:	e8 4c fd ff ff       	call   f0103cef <allocate_frame>
f0103fa3:	83 c4 10             	add    $0x10,%esp
f0103fa6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0103fa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103fac:	83 ec 0c             	sub    $0xc,%esp
f0103faf:	50                   	push   %eax
f0103fb0:	e8 45 f5 ff ff       	call   f01034fa <to_physical_address>
f0103fb5:	83 c4 10             	add    $0x10,%esp
f0103fb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103fbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103fc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fc4:	c1 e8 0c             	shr    $0xc,%eax
f0103fc7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103fca:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0103fcf:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0103fd2:	72 17                	jb     f0103feb <__static_cpt+0x5a>
f0103fd4:	ff 75 ec             	pushl  -0x14(%ebp)
f0103fd7:	68 08 cc 11 f0       	push   $0xf011cc08
f0103fdc:	68 25 02 00 00       	push   $0x225
f0103fe1:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0103fe6:	e8 a8 c1 ff ff       	call   f0100193 <_panic>
f0103feb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fee:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103ff3:	89 c2                	mov    %eax,%edx
f0103ff5:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ff8:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0103ffa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103ffd:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0104003:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104006:	c1 e8 16             	shr    $0x16,%eax
f0104009:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104010:	8b 45 08             	mov    0x8(%ebp),%eax
f0104013:	01 d0                	add    %edx,%eax
f0104015:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104018:	83 ca 07             	or     $0x7,%edx
f010401b:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f010401d:	8b 45 10             	mov    0x10(%ebp),%eax
f0104020:	8b 00                	mov    (%eax),%eax
f0104022:	83 ec 04             	sub    $0x4,%esp
f0104025:	68 00 10 00 00       	push   $0x1000
f010402a:	6a 00                	push   $0x0
f010402c:	50                   	push   %eax
f010402d:	e8 3e 5a 01 00       	call   f0119a70 <memset>
f0104032:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104035:	0f 20 d8             	mov    %cr3,%eax
f0104038:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010403b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010403e:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0104041:	90                   	nop
f0104042:	c9                   	leave  
f0104043:	c3                   	ret    

f0104044 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f0104044:	55                   	push   %ebp
f0104045:	89 e5                	mov    %esp,%ebp
f0104047:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f010404a:	ff 75 0c             	pushl  0xc(%ebp)
f010404d:	e8 a8 f4 ff ff       	call   f01034fa <to_physical_address>
f0104052:	83 c4 04             	add    $0x4,%esp
f0104055:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0104058:	83 ec 04             	sub    $0x4,%esp
f010405b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010405e:	50                   	push   %eax
f010405f:	ff 75 10             	pushl  0x10(%ebp)
f0104062:	ff 75 08             	pushl  0x8(%ebp)
f0104065:	e8 04 fe ff ff       	call   f0103e6e <get_page_table>
f010406a:	83 c4 10             	add    $0x10,%esp
f010406d:	83 f8 01             	cmp    $0x1,%eax
f0104070:	75 16                	jne    f0104088 <map_frame+0x44>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0104072:	8b 45 10             	mov    0x10(%ebp),%eax
f0104075:	83 ec 04             	sub    $0x4,%esp
f0104078:	8d 55 ec             	lea    -0x14(%ebp),%edx
f010407b:	52                   	push   %edx
f010407c:	50                   	push   %eax
f010407d:	ff 75 08             	pushl  0x8(%ebp)
f0104080:	e8 0c ff ff ff       	call   f0103f91 <__static_cpt>
f0104085:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0104088:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010408b:	8b 55 10             	mov    0x10(%ebp),%edx
f010408e:	c1 ea 0c             	shr    $0xc,%edx
f0104091:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104097:	c1 e2 02             	shl    $0x2,%edx
f010409a:	01 d0                	add    %edx,%eax
f010409c:	8b 00                	mov    (%eax),%eax
f010409e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f01040a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01040a4:	83 e0 01             	and    $0x1,%eax
f01040a7:	85 c0                	test   %eax,%eax
f01040a9:	74 25                	je     f01040d0 <map_frame+0x8c>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f01040ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01040ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01040b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01040b6:	75 07                	jne    f01040bf <map_frame+0x7b>
			return 0;
f01040b8:	b8 00 00 00 00       	mov    $0x0,%eax
f01040bd:	eb 43                	jmp    f0104102 <map_frame+0xbe>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f01040bf:	83 ec 08             	sub    $0x8,%esp
f01040c2:	ff 75 10             	pushl  0x10(%ebp)
f01040c5:	ff 75 08             	pushl  0x8(%ebp)
f01040c8:	e8 a7 00 00 00       	call   f0104174 <unmap_frame>
f01040cd:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f01040d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040d3:	8b 40 08             	mov    0x8(%eax),%eax
f01040d6:	40                   	inc    %eax
f01040d7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01040da:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f01040de:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01040e1:	8b 55 10             	mov    0x10(%ebp),%edx
f01040e4:	c1 ea 0c             	shr    $0xc,%edx
f01040e7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01040ed:	c1 e2 02             	shl    $0x2,%edx
f01040f0:	01 c2                	add    %eax,%edx
f01040f2:	8b 45 14             	mov    0x14(%ebp),%eax
f01040f5:	0b 45 f4             	or     -0xc(%ebp),%eax
f01040f8:	83 c8 01             	or     $0x1,%eax
f01040fb:	89 02                	mov    %eax,(%edx)

	return 0;
f01040fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104102:	c9                   	leave  
f0104103:	c3                   	ret    

f0104104 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct Frame_Info * get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table)
{
f0104104:	55                   	push   %ebp
f0104105:	89 e5                	mov    %esp,%ebp
f0104107:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f010410a:	83 ec 04             	sub    $0x4,%esp
f010410d:	ff 75 10             	pushl  0x10(%ebp)
f0104110:	ff 75 0c             	pushl  0xc(%ebp)
f0104113:	ff 75 08             	pushl  0x8(%ebp)
f0104116:	e8 53 fd ff ff       	call   f0103e6e <get_page_table>
f010411b:	83 c4 10             	add    $0x10,%esp
f010411e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0104121:	8b 45 10             	mov    0x10(%ebp),%eax
f0104124:	8b 00                	mov    (%eax),%eax
f0104126:	85 c0                	test   %eax,%eax
f0104128:	74 43                	je     f010416d <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f010412a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010412d:	c1 e8 0c             	shr    $0xc,%eax
f0104130:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104135:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0104138:	8b 45 10             	mov    0x10(%ebp),%eax
f010413b:	8b 00                	mov    (%eax),%eax
f010413d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104140:	c1 e2 02             	shl    $0x2,%edx
f0104143:	01 d0                	add    %edx,%eax
f0104145:	8b 00                	mov    (%eax),%eax
f0104147:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f010414a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010414e:	74 16                	je     f0104166 <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0104150:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104153:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104158:	83 ec 0c             	sub    $0xc,%esp
f010415b:	50                   	push   %eax
f010415c:	e8 ac f3 ff ff       	call   f010350d <to_frame_info>
f0104161:	83 c4 10             	add    $0x10,%esp
f0104164:	eb 0c                	jmp    f0104172 <get_frame_info+0x6e>
		}
		return 0;
f0104166:	b8 00 00 00 00       	mov    $0x0,%eax
f010416b:	eb 05                	jmp    f0104172 <get_frame_info+0x6e>
	}
	return 0;
f010416d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104172:	c9                   	leave  
f0104173:	c3                   	ret    

f0104174 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, void *virtual_address)
{
f0104174:	55                   	push   %ebp
f0104175:	89 e5                	mov    %esp,%ebp
f0104177:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct Frame_Info* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f010417a:	83 ec 04             	sub    $0x4,%esp
f010417d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0104180:	50                   	push   %eax
f0104181:	ff 75 0c             	pushl  0xc(%ebp)
f0104184:	ff 75 08             	pushl  0x8(%ebp)
f0104187:	e8 78 ff ff ff       	call   f0104104 <get_frame_info>
f010418c:	83 c4 10             	add    $0x10,%esp
f010418f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0104192:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104196:	74 60                	je     f01041f8 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0104198:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010419b:	8a 40 14             	mov    0x14(%eax),%al
f010419e:	84 c0                	test   %al,%al
f01041a0:	74 1d                	je     f01041bf <unmap_frame+0x4b>
f01041a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01041a5:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f01041aa:	77 13                	ja     f01041bf <unmap_frame+0x4b>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f01041ac:	83 ec 08             	sub    $0x8,%esp
f01041af:	ff 75 0c             	pushl  0xc(%ebp)
f01041b2:	68 ac cc 11 f0       	push   $0xf011ccac
f01041b7:	e8 e7 33 00 00       	call   f01075a3 <cprintf>
f01041bc:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f01041bf:	83 ec 0c             	sub    $0xc,%esp
f01041c2:	ff 75 f4             	pushl  -0xc(%ebp)
f01041c5:	e8 74 fc ff ff       	call   f0103e3e <decrement_references>
f01041ca:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f01041cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041d0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041d3:	c1 ea 0c             	shr    $0xc,%edx
f01041d6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041dc:	c1 e2 02             	shl    $0x2,%edx
f01041df:	01 d0                	add    %edx,%eax
f01041e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, virtual_address);
f01041e7:	83 ec 08             	sub    $0x8,%esp
f01041ea:	ff 75 0c             	pushl  0xc(%ebp)
f01041ed:	ff 75 08             	pushl  0x8(%ebp)
f01041f0:	e8 6c f0 ff ff       	call   f0103261 <tlb_invalidate>
f01041f5:	83 c4 10             	add    $0x10,%esp
	}
}
f01041f8:	90                   	nop
f01041f9:	c9                   	leave  
f01041fa:	c3                   	ret    

f01041fb <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct Frame_Info *ptr_frame_info, void *virtual_address, int perm)
{
f01041fb:	55                   	push   %ebp
f01041fc:	89 e5                	mov    %esp,%ebp
f01041fe:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0104201:	ff 75 0c             	pushl  0xc(%ebp)
f0104204:	e8 f1 f2 ff ff       	call   f01034fa <to_physical_address>
f0104209:	83 c4 04             	add    $0x4,%esp
f010420c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f010420f:	8b 45 10             	mov    0x10(%ebp),%eax
f0104212:	c1 e8 16             	shr    $0x16,%eax
f0104215:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010421c:	8b 45 08             	mov    0x8(%ebp),%eax
f010421f:	01 d0                	add    %edx,%eax
f0104221:	8b 00                	mov    (%eax),%eax
f0104223:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104226:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104229:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010422e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104231:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104234:	c1 e8 0c             	shr    $0xc,%eax
f0104237:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010423a:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010423f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0104242:	72 17                	jb     f010425b <loadtime_map_frame+0x60>
f0104244:	ff 75 ec             	pushl  -0x14(%ebp)
f0104247:	68 08 cc 11 f0       	push   $0xf011cc08
f010424c:	68 db 02 00 00       	push   $0x2db
f0104251:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0104256:	e8 38 bf ff ff       	call   f0100193 <_panic>
f010425b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010425e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104263:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0104266:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010426a:	75 16                	jne    f0104282 <loadtime_map_frame+0x87>
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f010426c:	8b 45 10             	mov    0x10(%ebp),%eax
f010426f:	83 ec 04             	sub    $0x4,%esp
f0104272:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f0104275:	52                   	push   %edx
f0104276:	50                   	push   %eax
f0104277:	ff 75 08             	pushl  0x8(%ebp)
f010427a:	e8 12 fd ff ff       	call   f0103f91 <__static_cpt>
f010427f:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0104282:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104285:	8b 40 08             	mov    0x8(%eax),%eax
f0104288:	40                   	inc    %eax
f0104289:	8b 55 0c             	mov    0xc(%ebp),%edx
f010428c:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0104290:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104293:	8b 55 10             	mov    0x10(%ebp),%edx
f0104296:	c1 ea 0c             	shr    $0xc,%edx
f0104299:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010429f:	c1 e2 02             	shl    $0x2,%edx
f01042a2:	01 c2                	add    %eax,%edx
f01042a4:	8b 45 14             	mov    0x14(%ebp),%eax
f01042a7:	0b 45 f4             	or     -0xc(%ebp),%eax
f01042aa:	83 c8 01             	or     $0x1,%eax
f01042ad:	89 02                	mov    %eax,(%edx)

	return 0;
f01042af:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01042b4:	c9                   	leave  
f01042b5:	c3                   	ret    

f01042b6 <allocateMem>:
//======================================================

// [1] allocateMem

void allocateMem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01042b6:	55                   	push   %ebp
f01042b7:	89 e5                	mov    %esp,%ebp
f01042b9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [FINAL_EVAL_2020 - VER_C] - [2] USER HEAP [Kernel Side Allocate]
	// Write your code here, remove the panic and write your code
	int idx = 0;
f01042bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	while(idx < size){
f01042c3:	eb 1d                	jmp    f01042e2 <allocateMem+0x2c>
		pf_add_empty_env_page(e, virtual_address, 0);
f01042c5:	83 ec 04             	sub    $0x4,%esp
f01042c8:	6a 00                	push   $0x0
f01042ca:	ff 75 0c             	pushl  0xc(%ebp)
f01042cd:	ff 75 08             	pushl  0x8(%ebp)
f01042d0:	e8 f6 7b 00 00       	call   f010becb <pf_add_empty_env_page>
f01042d5:	83 c4 10             	add    $0x10,%esp
		virtual_address += PAGE_SIZE;
f01042d8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
		idx++;
f01042df:	ff 45 f4             	incl   -0xc(%ebp)
void allocateMem(struct Env* e, uint32 virtual_address, uint32 size)
{
	//TODO: [FINAL_EVAL_2020 - VER_C] - [2] USER HEAP [Kernel Side Allocate]
	// Write your code here, remove the panic and write your code
	int idx = 0;
	while(idx < size){
f01042e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042e5:	3b 45 10             	cmp    0x10(%ebp),%eax
f01042e8:	72 db                	jb     f01042c5 <allocateMem+0xf>
		idx++;
	}
	//This function should allocate ALL pages of the required range in the PAGE FILE
	//and allocate NOTHING in the main memory

}
f01042ea:	90                   	nop
f01042eb:	c9                   	leave  
f01042ec:	c3                   	ret    

f01042ed <freeMem>:


// [2] freeMem

void freeMem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01042ed:	55                   	push   %ebp
f01042ee:	89 e5                	mov    %esp,%ebp
f01042f0:	83 ec 28             	sub    $0x28,%esp
	//TODO: [FINAL_EVAL_2020 - VER_C] - [2] USER HEAP [Kernel Side Free]
	// Write your code here, remove the panic and write your code
	for(int i=0 ; i<size ; i++){
f01042f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01042fa:	e9 79 01 00 00       	jmp    f0104478 <freeMem+0x18b>
		int j = 0;
f01042ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(j=0 ; j<e->page_WS_max_size ; j++){
f0104306:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010430d:	e9 37 01 00 00       	jmp    f0104449 <freeMem+0x15c>
			if(e->ptr_pageWorkingSet[j].virtual_address == virtual_address &&
f0104312:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104315:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104318:	89 d0                	mov    %edx,%eax
f010431a:	c1 e0 02             	shl    $0x2,%eax
f010431d:	01 d0                	add    %edx,%eax
f010431f:	c1 e0 02             	shl    $0x2,%eax
f0104322:	01 c8                	add    %ecx,%eax
f0104324:	83 c0 78             	add    $0x78,%eax
f0104327:	8b 00                	mov    (%eax),%eax
f0104329:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010432c:	0f 85 14 01 00 00    	jne    f0104446 <freeMem+0x159>
					e->ptr_pageWorkingSet[j].empty == 0){
f0104332:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104335:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104338:	89 d0                	mov    %edx,%eax
f010433a:	c1 e0 02             	shl    $0x2,%eax
f010433d:	01 d0                	add    %edx,%eax
f010433f:	c1 e0 02             	shl    $0x2,%eax
f0104342:	01 c8                	add    %ecx,%eax
f0104344:	83 c0 7c             	add    $0x7c,%eax
f0104347:	8a 00                	mov    (%eax),%al
	//TODO: [FINAL_EVAL_2020 - VER_C] - [2] USER HEAP [Kernel Side Free]
	// Write your code here, remove the panic and write your code
	for(int i=0 ; i<size ; i++){
		int j = 0;
		for(j=0 ; j<e->page_WS_max_size ; j++){
			if(e->ptr_pageWorkingSet[j].virtual_address == virtual_address &&
f0104349:	84 c0                	test   %al,%al
f010434b:	0f 85 f5 00 00 00    	jne    f0104446 <freeMem+0x159>
					e->ptr_pageWorkingSet[j].empty == 0){
				e->ptr_pageWorkingSet[j].virtual_address = 0;
f0104351:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104354:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104357:	89 d0                	mov    %edx,%eax
f0104359:	c1 e0 02             	shl    $0x2,%eax
f010435c:	01 d0                	add    %edx,%eax
f010435e:	c1 e0 02             	shl    $0x2,%eax
f0104361:	01 c8                	add    %ecx,%eax
f0104363:	83 c0 78             	add    $0x78,%eax
f0104366:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				e->ptr_pageWorkingSet[j].empty = 1;
f010436c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010436f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104372:	89 d0                	mov    %edx,%eax
f0104374:	c1 e0 02             	shl    $0x2,%eax
f0104377:	01 d0                	add    %edx,%eax
f0104379:	c1 e0 02             	shl    $0x2,%eax
f010437c:	01 c8                	add    %ecx,%eax
f010437e:	83 c0 7c             	add    $0x7c,%eax
f0104381:	c6 00 01             	movb   $0x1,(%eax)
				uint32 * x = NULL;
f0104384:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				get_page_table(e->env_page_directory , (void * ) virtual_address , &x);
f010438b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010438e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104391:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104394:	83 ec 04             	sub    $0x4,%esp
f0104397:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f010439a:	51                   	push   %ecx
f010439b:	52                   	push   %edx
f010439c:	50                   	push   %eax
f010439d:	e8 cc fa ff ff       	call   f0103e6e <get_page_table>
f01043a2:	83 c4 10             	add    $0x10,%esp
				unmap_frame(e->env_page_directory , (void * ) virtual_address);
f01043a5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01043a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01043ab:	8b 40 5c             	mov    0x5c(%eax),%eax
f01043ae:	83 ec 08             	sub    $0x8,%esp
f01043b1:	52                   	push   %edx
f01043b2:	50                   	push   %eax
f01043b3:	e8 bc fd ff ff       	call   f0104174 <unmap_frame>
f01043b8:	83 c4 10             	add    $0x10,%esp
				int w = 0;
f01043bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
				bool bl = 0;
f01043c2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
				while(w<1024){
f01043c9:	eb 1d                	jmp    f01043e8 <freeMem+0xfb>
					if(x[w] != 0){
f01043cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01043d1:	c1 e2 02             	shl    $0x2,%edx
f01043d4:	01 d0                	add    %edx,%eax
f01043d6:	8b 00                	mov    (%eax),%eax
f01043d8:	85 c0                	test   %eax,%eax
f01043da:	74 09                	je     f01043e5 <freeMem+0xf8>
						bl = 1;
f01043dc:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
						break;
f01043e3:	eb 0c                	jmp    f01043f1 <freeMem+0x104>
					}
					w++;
f01043e5:	ff 45 ec             	incl   -0x14(%ebp)
				uint32 * x = NULL;
				get_page_table(e->env_page_directory , (void * ) virtual_address , &x);
				unmap_frame(e->env_page_directory , (void * ) virtual_address);
				int w = 0;
				bool bl = 0;
				while(w<1024){
f01043e8:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f01043ef:	7e da                	jle    f01043cb <freeMem+0xde>
						bl = 1;
						break;
					}
					w++;
				}
				if(bl == 0){
f01043f1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01043f5:	75 65                	jne    f010445c <freeMem+0x16f>
					struct Frame_Info *frame = to_frame_info(EXTRACT_ADDRESS(e->env_page_directory[PDX(virtual_address)]));
f01043f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01043fa:	8b 40 5c             	mov    0x5c(%eax),%eax
f01043fd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104400:	c1 ea 16             	shr    $0x16,%edx
f0104403:	c1 e2 02             	shl    $0x2,%edx
f0104406:	01 d0                	add    %edx,%eax
f0104408:	8b 00                	mov    (%eax),%eax
f010440a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010440f:	83 ec 0c             	sub    $0xc,%esp
f0104412:	50                   	push   %eax
f0104413:	e8 f5 f0 ff ff       	call   f010350d <to_frame_info>
f0104418:	83 c4 10             	add    $0x10,%esp
f010441b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					decrement_references(frame);
f010441e:	83 ec 0c             	sub    $0xc,%esp
f0104421:	ff 75 e4             	pushl  -0x1c(%ebp)
f0104424:	e8 15 fa ff ff       	call   f0103e3e <decrement_references>
f0104429:	83 c4 10             	add    $0x10,%esp
					e->env_page_directory[PDX(virtual_address)] = 0;
f010442c:	8b 45 08             	mov    0x8(%ebp),%eax
f010442f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104432:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104435:	c1 ea 16             	shr    $0x16,%edx
f0104438:	c1 e2 02             	shl    $0x2,%edx
f010443b:	01 d0                	add    %edx,%eax
f010443d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				}
				break;
f0104443:	90                   	nop
f0104444:	eb 16                	jmp    f010445c <freeMem+0x16f>
{
	//TODO: [FINAL_EVAL_2020 - VER_C] - [2] USER HEAP [Kernel Side Free]
	// Write your code here, remove the panic and write your code
	for(int i=0 ; i<size ; i++){
		int j = 0;
		for(j=0 ; j<e->page_WS_max_size ; j++){
f0104446:	ff 45 f0             	incl   -0x10(%ebp)
f0104449:	8b 45 08             	mov    0x8(%ebp),%eax
f010444c:	8b 50 74             	mov    0x74(%eax),%edx
f010444f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104452:	39 c2                	cmp    %eax,%edx
f0104454:	0f 87 b8 fe ff ff    	ja     f0104312 <freeMem+0x25>
f010445a:	eb 01                	jmp    f010445d <freeMem+0x170>
				if(bl == 0){
					struct Frame_Info *frame = to_frame_info(EXTRACT_ADDRESS(e->env_page_directory[PDX(virtual_address)]));
					decrement_references(frame);
					e->env_page_directory[PDX(virtual_address)] = 0;
				}
				break;
f010445c:	90                   	nop
			}
		}
		pf_remove_env_page(e, virtual_address);
f010445d:	83 ec 08             	sub    $0x8,%esp
f0104460:	ff 75 0c             	pushl  0xc(%ebp)
f0104463:	ff 75 08             	pushl  0x8(%ebp)
f0104466:	e8 4b 7e 00 00       	call   f010c2b6 <pf_remove_env_page>
f010446b:	83 c4 10             	add    $0x10,%esp
		virtual_address += PAGE_SIZE;
f010446e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)

void freeMem(struct Env* e, uint32 virtual_address, uint32 size)
{
	//TODO: [FINAL_EVAL_2020 - VER_C] - [2] USER HEAP [Kernel Side Free]
	// Write your code here, remove the panic and write your code
	for(int i=0 ; i<size ; i++){
f0104475:	ff 45 f4             	incl   -0xc(%ebp)
f0104478:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010447b:	3b 45 10             	cmp    0x10(%ebp),%eax
f010447e:	0f 82 7b fe ff ff    	jb     f01042ff <freeMem+0x12>
	//This function should:
	//1. Free ALL pages of the given range from the Page File
	//2. Free ONLY pages that are resident in the working set from the memory
	//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)

}
f0104484:	90                   	nop
f0104485:	c9                   	leave  
f0104486:	c3                   	ret    

f0104487 <__freeMem_with_buffering>:

void __freeMem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0104487:	55                   	push   %ebp
f0104488:	89 e5                	mov    %esp,%ebp
f010448a:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010448d:	83 ec 04             	sub    $0x4,%esp
f0104490:	68 88 cc 11 f0       	push   $0xf011cc88
f0104495:	68 3b 03 00 00       	push   $0x33b
f010449a:	68 e1 cb 11 f0       	push   $0xf011cbe1
f010449f:	e8 ef bc ff ff       	call   f0100193 <_panic>

f01044a4 <moveMem>:

//================= [BONUS] =====================
// [3] moveMem

void moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01044a4:	55                   	push   %ebp
f01044a5:	89 e5                	mov    %esp,%ebp
f01044a7:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f01044aa:	83 ec 04             	sub    $0x4,%esp
f01044ad:	68 88 cc 11 f0       	push   $0xf011cc88
f01044b2:	68 43 03 00 00       	push   $0x343
f01044b7:	68 e1 cb 11 f0       	push   $0xf011cbe1
f01044bc:	e8 d2 bc ff ff       	call   f0100193 <_panic>

f01044c1 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocatino size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* ptr_page_directory, uint32 start_virtual_address, uint32 size)
{
f01044c1:	55                   	push   %ebp
f01044c2:	89 e5                	mov    %esp,%ebp
f01044c4:	83 ec 28             	sub    $0x28,%esp
	LOG_STATMENT(cprintf("calculate_required_frames: Starting at address %x",start_virtual_address));
	//calculate the required page tables
	uint32 number_of_tables = 0;
f01044c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	long i = 0;
f01044ce:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);
f01044d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01044db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01044de:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01044e3:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f01044e6:	eb 27                	jmp    f010450f <calculate_required_frames+0x4e>
	{
		uint32 *ptr_page_table;
		get_page_table(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table);
f01044e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044eb:	83 ec 04             	sub    $0x4,%esp
f01044ee:	8d 55 dc             	lea    -0x24(%ebp),%edx
f01044f1:	52                   	push   %edx
f01044f2:	50                   	push   %eax
f01044f3:	ff 75 08             	pushl  0x8(%ebp)
f01044f6:	e8 73 f9 ff ff       	call   f0103e6e <get_page_table>
f01044fb:	83 c4 10             	add    $0x10,%esp

		if(ptr_page_table == 0)
f01044fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104501:	85 c0                	test   %eax,%eax
f0104503:	75 03                	jne    f0104508 <calculate_required_frames+0x47>
		{
			(number_of_tables)++;
f0104505:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 number_of_tables = 0;

	long i = 0;
	uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE*1024);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE*1024)
f0104508:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f010450f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104512:	8b 45 10             	mov    0x10(%ebp),%eax
f0104515:	01 d0                	add    %edx,%eax
f0104517:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010451a:	77 cc                	ja     f01044e8 <calculate_required_frames+0x27>
			(number_of_tables)++;
		}
	}

	//calc the required page frames
	uint32 number_of_pages = 0;
f010451c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);
f0104523:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104526:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0104529:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010452c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104531:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f0104534:	eb 24                	jmp    f010455a <calculate_required_frames+0x99>
	{
		uint32 *ptr_page_table;
		if (get_frame_info(ptr_page_directory, (void*) current_virtual_address, &ptr_page_table) == 0)
f0104536:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104539:	83 ec 04             	sub    $0x4,%esp
f010453c:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010453f:	52                   	push   %edx
f0104540:	50                   	push   %eax
f0104541:	ff 75 08             	pushl  0x8(%ebp)
f0104544:	e8 bb fb ff ff       	call   f0104104 <get_frame_info>
f0104549:	83 c4 10             	add    $0x10,%esp
f010454c:	85 c0                	test   %eax,%eax
f010454e:	75 03                	jne    f0104553 <calculate_required_frames+0x92>
		{
			(number_of_pages)++;
f0104550:	ff 45 ec             	incl   -0x14(%ebp)

	//calc the required page frames
	uint32 number_of_pages = 0;
	current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);

	for(; current_virtual_address < (start_virtual_address+size); current_virtual_address+= PAGE_SIZE)
f0104553:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010455a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010455d:	8b 45 10             	mov    0x10(%ebp),%eax
f0104560:	01 d0                	add    %edx,%eax
f0104562:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104565:	77 cf                	ja     f0104536 <calculate_required_frames+0x75>
		}
	}

	//return total number of frames
	LOG_STATMENT(cprintf("calculate_required_frames: Done!"));
	return number_of_tables+number_of_pages;
f0104567:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010456a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010456d:	01 d0                	add    %edx,%eax
}
f010456f:	c9                   	leave  
f0104570:	c3                   	ret    

f0104571 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0104571:	55                   	push   %ebp
f0104572:	89 e5                	mov    %esp,%ebp
f0104574:	57                   	push   %edi
f0104575:	56                   	push   %esi
f0104576:	53                   	push   %ebx
f0104577:	83 ec 20             	sub    $0x20,%esp
	}
	cprintf("finished loop detction\n");
	 */
	//calculate the free frames from the free frame list
	struct Frame_Info *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f010457a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0104581:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0104588:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)


	LIST_FOREACH(ptr, &free_frame_list)
f010458f:	a1 34 11 3b f0       	mov    0xf03b1134,%eax
f0104594:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104597:	eb 1a                	jmp    f01045b3 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0104599:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010459c:	8a 40 14             	mov    0x14(%eax),%al
f010459f:	84 c0                	test   %al,%al
f01045a1:	74 05                	je     f01045a8 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f01045a3:	ff 45 e8             	incl   -0x18(%ebp)
f01045a6:	eb 03                	jmp    f01045ab <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f01045a8:	ff 45 ec             	incl   -0x14(%ebp)
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;


	LIST_FOREACH(ptr, &free_frame_list)
f01045ab:	a1 3c 11 3b f0       	mov    0xf03b113c,%eax
f01045b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01045b3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01045b7:	74 07                	je     f01045c0 <calculate_available_frames+0x4f>
f01045b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01045bc:	8b 00                	mov    (%eax),%eax
f01045be:	eb 05                	jmp    f01045c5 <calculate_available_frames+0x54>
f01045c0:	b8 00 00 00 00       	mov    $0x0,%eax
f01045c5:	a3 3c 11 3b f0       	mov    %eax,0xf03b113c
f01045ca:	a1 3c 11 3b f0       	mov    0xf03b113c,%eax
f01045cf:	85 c0                	test   %eax,%eax
f01045d1:	75 c6                	jne    f0104599 <calculate_available_frames+0x28>
f01045d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01045d7:	75 c0                	jne    f0104599 <calculate_available_frames+0x28>
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f01045d9:	a1 20 11 3b f0       	mov    0xf03b1120,%eax
f01045de:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01045e1:	eb 0b                	jmp    f01045ee <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f01045e3:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeUnBuffered++ ;
	}



	LIST_FOREACH(ptr, &modified_frame_list)
f01045e6:	a1 28 11 3b f0       	mov    0xf03b1128,%eax
f01045eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01045ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01045f2:	74 07                	je     f01045fb <calculate_available_frames+0x8a>
f01045f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01045f7:	8b 00                	mov    (%eax),%eax
f01045f9:	eb 05                	jmp    f0104600 <calculate_available_frames+0x8f>
f01045fb:	b8 00 00 00 00       	mov    $0x0,%eax
f0104600:	a3 28 11 3b f0       	mov    %eax,0xf03b1128
f0104605:	a1 28 11 3b f0       	mov    0xf03b1128,%eax
f010460a:	85 c0                	test   %eax,%eax
f010460c:	75 d5                	jne    f01045e3 <calculate_available_frames+0x72>
f010460e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104612:	75 cf                	jne    f01045e3 <calculate_available_frames+0x72>
		totalModified++ ;
	}


	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0104614:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104617:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f010461a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010461d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0104620:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104623:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0104626:	8b 45 08             	mov    0x8(%ebp),%eax
f0104629:	89 c3                	mov    %eax,%ebx
f010462b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010462e:	ba 03 00 00 00       	mov    $0x3,%edx
f0104633:	89 df                	mov    %ebx,%edi
f0104635:	89 c6                	mov    %eax,%esi
f0104637:	89 d1                	mov    %edx,%ecx
f0104639:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010463b:	8b 45 08             	mov    0x8(%ebp),%eax
f010463e:	83 c4 20             	add    $0x20,%esp
f0104641:	5b                   	pop    %ebx
f0104642:	5e                   	pop    %esi
f0104643:	5f                   	pop    %edi
f0104644:	5d                   	pop    %ebp
f0104645:	c2 04 00             	ret    $0x4

f0104648 <calculate_free_frames>:

//2018
// calculate_free_frames:
uint32 calculate_free_frames()
{
f0104648:	55                   	push   %ebp
f0104649:	89 e5                	mov    %esp,%ebp
	return LIST_SIZE(&free_frame_list);
f010464b:	a1 40 11 3b f0       	mov    0xf03b1140,%eax
}
f0104650:	5d                   	pop    %ebp
f0104651:	c3                   	ret    

f0104652 <env_page_ws_get_time_stamp>:
/// Dealing with environment working set



inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0104652:	55                   	push   %ebp
f0104653:	89 e5                	mov    %esp,%ebp
f0104655:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0104658:	8b 45 08             	mov    0x8(%ebp),%eax
f010465b:	8b 40 74             	mov    0x74(%eax),%eax
f010465e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104661:	77 19                	ja     f010467c <env_page_ws_get_time_stamp+0x2a>
f0104663:	68 d0 cc 11 f0       	push   $0xf011ccd0
f0104668:	68 08 cd 11 f0       	push   $0xf011cd08
f010466d:	68 c3 03 00 00       	push   $0x3c3
f0104672:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0104677:	e8 17 bb ff ff       	call   f0100193 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f010467c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010467f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104682:	89 d0                	mov    %edx,%eax
f0104684:	c1 e0 02             	shl    $0x2,%eax
f0104687:	01 d0                	add    %edx,%eax
f0104689:	c1 e0 02             	shl    $0x2,%eax
f010468c:	01 c8                	add    %ecx,%eax
f010468e:	83 e8 80             	sub    $0xffffff80,%eax
f0104691:	8b 00                	mov    (%eax),%eax
}
f0104693:	c9                   	leave  
f0104694:	c3                   	ret    

f0104695 <env_page_ws_set_time_stamp>:
inline void env_page_ws_set_time_stamp(struct Env* e, uint32 entry_index)
{
f0104695:	55                   	push   %ebp
f0104696:	89 e5                	mov    %esp,%ebp
f0104698:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f010469b:	8b 45 08             	mov    0x8(%ebp),%eax
f010469e:	8b 40 74             	mov    0x74(%eax),%eax
f01046a1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046a4:	77 19                	ja     f01046bf <env_page_ws_set_time_stamp+0x2a>
f01046a6:	68 d0 cc 11 f0       	push   $0xf011ccd0
f01046ab:	68 08 cd 11 f0       	push   $0xf011cd08
f01046b0:	68 c8 03 00 00       	push   $0x3c8
f01046b5:	68 e1 cb 11 f0       	push   $0xf011cbe1
f01046ba:	e8 d4 ba ff ff       	call   f0100193 <_panic>
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f01046bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01046c2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01046c5:	89 d0                	mov    %edx,%eax
f01046c7:	c1 e0 02             	shl    $0x2,%eax
f01046ca:	01 d0                	add    %edx,%eax
f01046cc:	c1 e0 02             	shl    $0x2,%eax
f01046cf:	01 c8                	add    %ecx,%eax
f01046d1:	83 e8 80             	sub    $0xffffff80,%eax
f01046d4:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
}
f01046da:	90                   	nop
f01046db:	c9                   	leave  
f01046dc:	c3                   	ret    

f01046dd <env_page_ws_print>:


void env_page_ws_print(struct Env *curenv)
{
f01046dd:	55                   	push   %ebp
f01046de:	89 e5                	mov    %esp,%ebp
f01046e0:	83 ec 28             	sub    $0x28,%esp
	uint32 i;
	cprintf("PAGE WS:\n");
f01046e3:	83 ec 0c             	sub    $0xc,%esp
f01046e6:	68 1d cd 11 f0       	push   $0xf011cd1d
f01046eb:	e8 b3 2e 00 00       	call   f01075a3 <cprintf>
f01046f0:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f01046f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01046fa:	e9 76 01 00 00       	jmp    f0104875 <env_page_ws_print+0x198>
	{
		if (curenv->ptr_pageWorkingSet[i].empty)
f01046ff:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104702:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104705:	89 d0                	mov    %edx,%eax
f0104707:	c1 e0 02             	shl    $0x2,%eax
f010470a:	01 d0                	add    %edx,%eax
f010470c:	c1 e0 02             	shl    $0x2,%eax
f010470f:	01 c8                	add    %ecx,%eax
f0104711:	83 c0 7c             	add    $0x7c,%eax
f0104714:	8a 00                	mov    (%eax),%al
f0104716:	84 c0                	test   %al,%al
f0104718:	74 43                	je     f010475d <env_page_ws_print+0x80>
		{
			cprintf("EMPTY LOCATION");
f010471a:	83 ec 0c             	sub    $0xc,%esp
f010471d:	68 27 cd 11 f0       	push   $0xf011cd27
f0104722:	e8 7c 2e 00 00       	call   f01075a3 <cprintf>
f0104727:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->page_last_WS_index )
f010472a:	8b 45 08             	mov    0x8(%ebp),%eax
f010472d:	8b 80 c0 ee 00 00    	mov    0xeec0(%eax),%eax
f0104733:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104736:	75 10                	jne    f0104748 <env_page_ws_print+0x6b>
			{
				cprintf("		<--");
f0104738:	83 ec 0c             	sub    $0xc,%esp
f010473b:	68 36 cd 11 f0       	push   $0xf011cd36
f0104740:	e8 5e 2e 00 00       	call   f01075a3 <cprintf>
f0104745:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0104748:	83 ec 0c             	sub    $0xc,%esp
f010474b:	68 3c cd 11 f0       	push   $0xf011cd3c
f0104750:	e8 4e 2e 00 00       	call   f01075a3 <cprintf>
f0104755:	83 c4 10             	add    $0x10,%esp
f0104758:	e9 15 01 00 00       	jmp    f0104872 <env_page_ws_print+0x195>
			continue;
		}
		uint32 virtual_address = curenv->ptr_pageWorkingSet[i].virtual_address;
f010475d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104760:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104763:	89 d0                	mov    %edx,%eax
f0104765:	c1 e0 02             	shl    $0x2,%eax
f0104768:	01 d0                	add    %edx,%eax
f010476a:	c1 e0 02             	shl    $0x2,%eax
f010476d:	01 c8                	add    %ecx,%eax
f010476f:	83 c0 78             	add    $0x78,%eax
f0104772:	8b 00                	mov    (%eax),%eax
f0104774:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 time_stamp = curenv->ptr_pageWorkingSet[i].time_stamp;
f0104777:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010477a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010477d:	89 d0                	mov    %edx,%eax
f010477f:	c1 e0 02             	shl    $0x2,%eax
f0104782:	01 d0                	add    %edx,%eax
f0104784:	c1 e0 02             	shl    $0x2,%eax
f0104787:	01 c8                	add    %ecx,%eax
f0104789:	83 e8 80             	sub    $0xffffff80,%eax
f010478c:	8b 00                	mov    (%eax),%eax
f010478e:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 *ptr_table = NULL;
f0104791:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		get_page_table(curenv->env_page_directory,(void*) virtual_address, &ptr_table);
f0104798:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010479b:	8b 45 08             	mov    0x8(%ebp),%eax
f010479e:	8b 40 5c             	mov    0x5c(%eax),%eax
f01047a1:	83 ec 04             	sub    $0x4,%esp
f01047a4:	8d 4d e0             	lea    -0x20(%ebp),%ecx
f01047a7:	51                   	push   %ecx
f01047a8:	52                   	push   %edx
f01047a9:	50                   	push   %eax
f01047aa:	e8 bf f6 ff ff       	call   f0103e6e <get_page_table>
f01047af:	83 c4 10             	add    $0x10,%esp
		uint32 perm = ptr_table[PTX(virtual_address)];
f01047b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01047b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01047b8:	c1 ea 0c             	shr    $0xc,%edx
f01047bb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01047c1:	c1 e2 02             	shl    $0x2,%edx
f01047c4:	01 d0                	add    %edx,%eax
f01047c6:	8b 00                	mov    (%eax),%eax
f01047c8:	89 45 e8             	mov    %eax,-0x18(%ebp)

		char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01047cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01047ce:	83 e0 40             	and    $0x40,%eax
f01047d1:	85 c0                	test   %eax,%eax
f01047d3:	0f 95 c0             	setne  %al
f01047d6:	88 45 e7             	mov    %al,-0x19(%ebp)
		char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01047d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01047dc:	83 e0 20             	and    $0x20,%eax
f01047df:	85 c0                	test   %eax,%eax
f01047e1:	0f 95 c0             	setne  %al
f01047e4:	88 45 e6             	mov    %al,-0x1a(%ebp)
		char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f01047e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01047ea:	25 00 02 00 00       	and    $0x200,%eax
f01047ef:	85 c0                	test   %eax,%eax
f01047f1:	0f 95 c0             	setne  %al
f01047f4:	88 45 e5             	mov    %al,-0x1b(%ebp)


		cprintf("address @ %d = %x",i, curenv->ptr_pageWorkingSet[i].virtual_address);
f01047f7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01047fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047fd:	89 d0                	mov    %edx,%eax
f01047ff:	c1 e0 02             	shl    $0x2,%eax
f0104802:	01 d0                	add    %edx,%eax
f0104804:	c1 e0 02             	shl    $0x2,%eax
f0104807:	01 c8                	add    %ecx,%eax
f0104809:	83 c0 78             	add    $0x78,%eax
f010480c:	8b 00                	mov    (%eax),%eax
f010480e:	83 ec 04             	sub    $0x4,%esp
f0104811:	50                   	push   %eax
f0104812:	ff 75 f4             	pushl  -0xc(%ebp)
f0104815:	68 3e cd 11 f0       	push   $0xf011cd3e
f010481a:	e8 84 2d 00 00       	call   f01075a3 <cprintf>
f010481f:	83 c4 10             	add    $0x10,%esp

		cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x", isUsed, isModified, isBuffered, time_stamp) ;
f0104822:	0f be 4d e5          	movsbl -0x1b(%ebp),%ecx
f0104826:	0f be 55 e7          	movsbl -0x19(%ebp),%edx
f010482a:	0f be 45 e6          	movsbl -0x1a(%ebp),%eax
f010482e:	83 ec 0c             	sub    $0xc,%esp
f0104831:	ff 75 ec             	pushl  -0x14(%ebp)
f0104834:	51                   	push   %ecx
f0104835:	52                   	push   %edx
f0104836:	50                   	push   %eax
f0104837:	68 50 cd 11 f0       	push   $0xf011cd50
f010483c:	e8 62 2d 00 00       	call   f01075a3 <cprintf>
f0104841:	83 c4 20             	add    $0x20,%esp

		if(i==curenv->page_last_WS_index )
f0104844:	8b 45 08             	mov    0x8(%ebp),%eax
f0104847:	8b 80 c0 ee 00 00    	mov    0xeec0(%eax),%eax
f010484d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104850:	75 10                	jne    f0104862 <env_page_ws_print+0x185>
		{
			cprintf(" <--");
f0104852:	83 ec 0c             	sub    $0xc,%esp
f0104855:	68 87 cd 11 f0       	push   $0xf011cd87
f010485a:	e8 44 2d 00 00       	call   f01075a3 <cprintf>
f010485f:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0104862:	83 ec 0c             	sub    $0xc,%esp
f0104865:	68 3c cd 11 f0       	push   $0xf011cd3c
f010486a:	e8 34 2d 00 00       	call   f01075a3 <cprintf>
f010486f:	83 c4 10             	add    $0x10,%esp

void env_page_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("PAGE WS:\n");
	for(i=0; i< (curenv->page_WS_max_size); i++ )
f0104872:	ff 45 f4             	incl   -0xc(%ebp)
f0104875:	8b 45 08             	mov    0x8(%ebp),%eax
f0104878:	8b 40 74             	mov    0x74(%eax),%eax
f010487b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010487e:	0f 87 7b fe ff ff    	ja     f01046ff <env_page_ws_print+0x22>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0104884:	90                   	nop
f0104885:	c9                   	leave  
f0104886:	c3                   	ret    

f0104887 <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *curenv)
{
f0104887:	55                   	push   %ebp
f0104888:	89 e5                	mov    %esp,%ebp
f010488a:	83 ec 18             	sub    $0x18,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f010488d:	83 ec 0c             	sub    $0xc,%esp
f0104890:	68 8c cd 11 f0       	push   $0xf011cd8c
f0104895:	e8 09 2d 00 00       	call   f01075a3 <cprintf>
f010489a:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f010489d:	83 ec 0c             	sub    $0xc,%esp
f01048a0:	68 c1 cd 11 f0       	push   $0xf011cdc1
f01048a5:	e8 f9 2c 00 00       	call   f01075a3 <cprintf>
f01048aa:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01048ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01048b4:	e9 fc 00 00 00       	jmp    f01049b5 <env_table_ws_print+0x12e>
	{
		if (curenv->__ptr_tws[i].empty)
f01048b9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01048bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048bf:	89 d0                	mov    %edx,%eax
f01048c1:	c1 e0 02             	shl    $0x2,%eax
f01048c4:	01 d0                	add    %edx,%eax
f01048c6:	c1 e0 02             	shl    $0x2,%eax
f01048c9:	01 c8                	add    %ecx,%eax
f01048cb:	05 dc ea 00 00       	add    $0xeadc,%eax
f01048d0:	8a 00                	mov    (%eax),%al
f01048d2:	84 c0                	test   %al,%al
f01048d4:	74 43                	je     f0104919 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f01048d6:	83 ec 0c             	sub    $0xc,%esp
f01048d9:	68 27 cd 11 f0       	push   $0xf011cd27
f01048de:	e8 c0 2c 00 00       	call   f01075a3 <cprintf>
f01048e3:	83 c4 10             	add    $0x10,%esp
			if(i==curenv->table_last_WS_index )
f01048e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e9:	8b 80 c4 ee 00 00    	mov    0xeec4(%eax),%eax
f01048ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048f2:	75 10                	jne    f0104904 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f01048f4:	83 ec 0c             	sub    $0xc,%esp
f01048f7:	68 36 cd 11 f0       	push   $0xf011cd36
f01048fc:	e8 a2 2c 00 00       	call   f01075a3 <cprintf>
f0104901:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0104904:	83 ec 0c             	sub    $0xc,%esp
f0104907:	68 3c cd 11 f0       	push   $0xf011cd3c
f010490c:	e8 92 2c 00 00       	call   f01075a3 <cprintf>
f0104911:	83 c4 10             	add    $0x10,%esp
			continue;
f0104914:	e9 99 00 00 00       	jmp    f01049b2 <env_table_ws_print+0x12b>
		}
		uint32 virtual_address = curenv->__ptr_tws[i].virtual_address;
f0104919:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010491c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010491f:	89 d0                	mov    %edx,%eax
f0104921:	c1 e0 02             	shl    $0x2,%eax
f0104924:	01 d0                	add    %edx,%eax
f0104926:	c1 e0 02             	shl    $0x2,%eax
f0104929:	01 c8                	add    %ecx,%eax
f010492b:	05 d8 ea 00 00       	add    $0xead8,%eax
f0104930:	8b 00                	mov    (%eax),%eax
f0104932:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, curenv->__ptr_tws[i].virtual_address);
f0104935:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104938:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010493b:	89 d0                	mov    %edx,%eax
f010493d:	c1 e0 02             	shl    $0x2,%eax
f0104940:	01 d0                	add    %edx,%eax
f0104942:	c1 e0 02             	shl    $0x2,%eax
f0104945:	01 c8                	add    %ecx,%eax
f0104947:	05 d8 ea 00 00       	add    $0xead8,%eax
f010494c:	8b 00                	mov    (%eax),%eax
f010494e:	83 ec 04             	sub    $0x4,%esp
f0104951:	50                   	push   %eax
f0104952:	ff 75 f4             	pushl  -0xc(%ebp)
f0104955:	68 cc cd 11 f0       	push   $0xf011cdcc
f010495a:	e8 44 2c 00 00       	call   f01075a3 <cprintf>
f010495f:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d", pd_is_table_used(curenv, virtual_address));
f0104962:	83 ec 08             	sub    $0x8,%esp
f0104965:	ff 75 f0             	pushl  -0x10(%ebp)
f0104968:	ff 75 08             	pushl  0x8(%ebp)
f010496b:	e8 e2 00 00 00       	call   f0104a52 <pd_is_table_used>
f0104970:	83 c4 10             	add    $0x10,%esp
f0104973:	83 ec 08             	sub    $0x8,%esp
f0104976:	50                   	push   %eax
f0104977:	68 e3 cd 11 f0       	push   $0xf011cde3
f010497c:	e8 22 2c 00 00       	call   f01075a3 <cprintf>
f0104981:	83 c4 10             	add    $0x10,%esp
		if(i==curenv->table_last_WS_index )
f0104984:	8b 45 08             	mov    0x8(%ebp),%eax
f0104987:	8b 80 c4 ee 00 00    	mov    0xeec4(%eax),%eax
f010498d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104990:	75 10                	jne    f01049a2 <env_table_ws_print+0x11b>
		{
			cprintf(" <--");
f0104992:	83 ec 0c             	sub    $0xc,%esp
f0104995:	68 87 cd 11 f0       	push   $0xf011cd87
f010499a:	e8 04 2c 00 00       	call   f01075a3 <cprintf>
f010499f:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01049a2:	83 ec 0c             	sub    $0xc,%esp
f01049a5:	68 3c cd 11 f0       	push   $0xf011cd3c
f01049aa:	e8 f4 2b 00 00       	call   f01075a3 <cprintf>
f01049af:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *curenv)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01049b2:	ff 45 f4             	incl   -0xc(%ebp)
f01049b5:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01049b9:	0f 86 fa fe ff ff    	jbe    f01048b9 <env_table_ws_print+0x32>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f01049bf:	90                   	nop
f01049c0:	c9                   	leave  
f01049c1:	c3                   	ret    

f01049c2 <addTableToTableWorkingSet>:


void addTableToTableWorkingSet(struct Env *e, uint32 tableAddress)
{
f01049c2:	55                   	push   %ebp
f01049c3:	89 e5                	mov    %esp,%ebp
f01049c5:	83 ec 10             	sub    $0x10,%esp
	tableAddress = ROUNDDOWN(tableAddress, PAGE_SIZE*1024);
f01049c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01049cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01049ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01049d1:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01049d6:	89 45 0c             	mov    %eax,0xc(%ebp)
	e->__ptr_tws[e->table_last_WS_index].virtual_address = tableAddress;
f01049d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01049dc:	8b 90 c4 ee 00 00    	mov    0xeec4(%eax),%edx
f01049e2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01049e5:	89 d0                	mov    %edx,%eax
f01049e7:	c1 e0 02             	shl    $0x2,%eax
f01049ea:	01 d0                	add    %edx,%eax
f01049ec:	c1 e0 02             	shl    $0x2,%eax
f01049ef:	01 c8                	add    %ecx,%eax
f01049f1:	8d 90 d8 ea 00 00    	lea    0xead8(%eax),%edx
f01049f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01049fa:	89 02                	mov    %eax,(%edx)
	e->__ptr_tws[e->table_last_WS_index].empty = 0;
f01049fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01049ff:	8b 90 c4 ee 00 00    	mov    0xeec4(%eax),%edx
f0104a05:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a08:	89 d0                	mov    %edx,%eax
f0104a0a:	c1 e0 02             	shl    $0x2,%eax
f0104a0d:	01 d0                	add    %edx,%eax
f0104a0f:	c1 e0 02             	shl    $0x2,%eax
f0104a12:	01 c8                	add    %ecx,%eax
f0104a14:	05 dc ea 00 00       	add    $0xeadc,%eax
f0104a19:	c6 00 00             	movb   $0x0,(%eax)

	e->table_last_WS_index ++;
f0104a1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a1f:	8b 80 c4 ee 00 00    	mov    0xeec4(%eax),%eax
f0104a25:	8d 50 01             	lea    0x1(%eax),%edx
f0104a28:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a2b:	89 90 c4 ee 00 00    	mov    %edx,0xeec4(%eax)
	e->table_last_WS_index %= __TWS_MAX_SIZE;
f0104a31:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a34:	8b 80 c4 ee 00 00    	mov    0xeec4(%eax),%eax
f0104a3a:	b9 32 00 00 00       	mov    $0x32,%ecx
f0104a3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0104a44:	f7 f1                	div    %ecx
f0104a46:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a49:	89 90 c4 ee 00 00    	mov    %edx,0xeec4(%eax)
}
f0104a4f:	90                   	nop
f0104a50:	c9                   	leave  
f0104a51:	c3                   	ret    

f0104a52 <pd_is_table_used>:

///============================================================================================
/// Dealing with page and page table entry flags

inline uint32 pd_is_table_used(struct Env* ptr_env, uint32 virtual_address)
{
f0104a52:	55                   	push   %ebp
f0104a53:	89 e5                	mov    %esp,%ebp
	return ( (ptr_env->env_page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0104a55:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a58:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104a5b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a5e:	c1 ea 16             	shr    $0x16,%edx
f0104a61:	c1 e2 02             	shl    $0x2,%edx
f0104a64:	01 d0                	add    %edx,%eax
f0104a66:	8b 00                	mov    (%eax),%eax
f0104a68:	83 e0 20             	and    $0x20,%eax
f0104a6b:	85 c0                	test   %eax,%eax
f0104a6d:	0f 95 c0             	setne  %al
f0104a70:	0f b6 c0             	movzbl %al,%eax
}
f0104a73:	5d                   	pop    %ebp
f0104a74:	c3                   	ret    

f0104a75 <pd_set_table_unused>:

inline void pd_set_table_unused(struct Env* ptr_env, uint32 virtual_address)
{
f0104a75:	55                   	push   %ebp
f0104a76:	89 e5                	mov    %esp,%ebp
f0104a78:	83 ec 08             	sub    $0x8,%esp
	ptr_env->env_page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0104a7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a7e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104a81:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a84:	c1 ea 16             	shr    $0x16,%edx
f0104a87:	c1 e2 02             	shl    $0x2,%edx
f0104a8a:	01 c2                	add    %eax,%edx
f0104a8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a8f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104a92:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0104a95:	c1 e9 16             	shr    $0x16,%ecx
f0104a98:	c1 e1 02             	shl    $0x2,%ecx
f0104a9b:	01 c8                	add    %ecx,%eax
f0104a9d:	8b 00                	mov    (%eax),%eax
f0104a9f:	83 e0 df             	and    $0xffffffdf,%eax
f0104aa2:	89 02                	mov    %eax,(%edx)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104aa4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104aa7:	83 ec 08             	sub    $0x8,%esp
f0104aaa:	50                   	push   %eax
f0104aab:	6a 00                	push   $0x0
f0104aad:	e8 af e7 ff ff       	call   f0103261 <tlb_invalidate>
f0104ab2:	83 c4 10             	add    $0x10,%esp
}
f0104ab5:	90                   	nop
f0104ab6:	c9                   	leave  
f0104ab7:	c3                   	ret    

f0104ab8 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104ab8:	55                   	push   %ebp
f0104ab9:	89 e5                	mov    %esp,%ebp
f0104abb:	83 ec 10             	sub    $0x10,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104abe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ac1:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104ac4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	ptr_pgdir[PDX(virtual_address)] = 0 ;
f0104ac7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104aca:	c1 e8 16             	shr    $0x16,%eax
f0104acd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104ad4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104ad7:	01 d0                	add    %edx,%eax
f0104ad9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104adf:	0f 20 d8             	mov    %cr3,%eax
f0104ae2:	89 45 f8             	mov    %eax,-0x8(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0104ae5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ae8:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0104aeb:	90                   	nop
f0104aec:	c9                   	leave  
f0104aed:	c3                   	ret    

f0104aee <pt_clear_page_table_entry>:

extern int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);
extern int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);

inline void pt_clear_page_table_entry(struct Env* ptr_env, uint32 virtual_address)
{
f0104aee:	55                   	push   %ebp
f0104aef:	89 e5                	mov    %esp,%ebp
f0104af1:	83 ec 28             	sub    $0x28,%esp
	uint32 * ptr_pgdir = ptr_env->env_page_directory ;
f0104af4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af7:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104afa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32* ptr_page_table;
	//if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	//	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)] ;
f0104afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b00:	c1 e8 16             	shr    $0x16,%eax
f0104b03:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104b0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b0d:	01 d0                	add    %edx,%eax
f0104b0f:	8b 00                	mov    (%eax),%eax
f0104b11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104b14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b17:	83 e0 01             	and    $0x1,%eax
f0104b1a:	85 c0                	test   %eax,%eax
f0104b1c:	74 62                	je     f0104b80 <pt_clear_page_table_entry+0x92>
		{
			ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0104b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b21:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104b26:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104b29:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104b2c:	c1 e8 0c             	shr    $0xc,%eax
f0104b2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104b32:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0104b37:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0104b3a:	72 17                	jb     f0104b53 <pt_clear_page_table_entry+0x65>
f0104b3c:	ff 75 ec             	pushl  -0x14(%ebp)
f0104b3f:	68 08 cc 11 f0       	push   $0xf011cc08
f0104b44:	68 4f 04 00 00       	push   $0x44f
f0104b49:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0104b4e:	e8 40 b6 ff ff       	call   f0100193 <_panic>
f0104b53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104b56:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104b5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104b5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b61:	c1 e8 0c             	shr    $0xc,%eax
f0104b64:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104b69:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104b70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104b73:	01 d0                	add    %edx,%eax
f0104b75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104b7b:	e9 92 00 00 00       	jmp    f0104c12 <pt_clear_page_table_entry+0x124>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0104b80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104b84:	74 75                	je     f0104bfb <pt_clear_page_table_entry+0x10d>
	{
		//cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		//Temporary read the table from page file into main memory

		int success = __pf_read_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104b86:	a1 54 11 3b f0       	mov    0xf03b1154,%eax
f0104b8b:	83 ec 04             	sub    $0x4,%esp
f0104b8e:	50                   	push   %eax
f0104b8f:	ff 75 0c             	pushl  0xc(%ebp)
f0104b92:	ff 75 08             	pushl  0x8(%ebp)
f0104b95:	e8 84 7c 00 00       	call   f010c81e <__pf_read_env_table>
f0104b9a:	83 c4 10             	add    $0x10,%esp
f0104b9d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_page_table = (uint32*) ptr_temp_page;
f0104ba0:	a1 54 11 3b f0       	mov    0xf03b1154,%eax
f0104ba5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if(success == E_TABLE_NOT_EXIST_IN_PF)
f0104ba8:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0104bac:	75 17                	jne    f0104bc5 <pt_clear_page_table_entry+0xd7>
			panic("pt_clear_page_table_entry: table not found in PF when expected to find one !. please revise your table fault\
f0104bae:	83 ec 04             	sub    $0x4,%esp
f0104bb1:	68 f4 cd 11 f0       	push   $0xf011cdf4
f0104bb6:	68 5d 04 00 00       	push   $0x45d
f0104bbb:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0104bc0:	e8 ce b5 ff ff       	call   f0100193 <_panic>
			handling code");

		ptr_page_table[PTX(virtual_address)] = 0 ;
f0104bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104bc8:	c1 e8 0c             	shr    $0xc,%eax
f0104bcb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0104bd0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104bd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104bda:	01 d0                	add    %edx,%eax
f0104bdc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		__pf_write_env_table(ptr_env, virtual_address, (void*) ptr_temp_page);
f0104be2:	a1 54 11 3b f0       	mov    0xf03b1154,%eax
f0104be7:	83 ec 04             	sub    $0x4,%esp
f0104bea:	50                   	push   %eax
f0104beb:	ff 75 0c             	pushl  0xc(%ebp)
f0104bee:	ff 75 08             	pushl  0x8(%ebp)
f0104bf1:	e8 83 7b 00 00       	call   f010c779 <__pf_write_env_table>
f0104bf6:	83 c4 10             	add    $0x10,%esp
f0104bf9:	eb 17                	jmp    f0104c12 <pt_clear_page_table_entry+0x124>
	}
	else
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0104bfb:	83 ec 04             	sub    $0x4,%esp
f0104bfe:	68 74 ce 11 f0       	push   $0xf011ce74
f0104c03:	68 64 04 00 00       	push   $0x464
f0104c08:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0104c0d:	e8 81 b5 ff ff       	call   f0100193 <_panic>


	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0104c12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104c15:	83 ec 08             	sub    $0x8,%esp
f0104c18:	50                   	push   %eax
f0104c19:	6a 00                	push   $0x0
f0104c1b:	e8 41 e6 ff ff       	call   f0103261 <tlb_invalidate>
f0104c20:	83 c4 10             	add    $0x10,%esp
}
f0104c23:	90                   	nop
f0104c24:	c9                   	leave  
f0104c25:	c3                   	ret    

f0104c26 <create_frames_storage>:
//=============================================================
// 2014 - edited in 2017
//=============================================================
// [1] if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f0104c26:	55                   	push   %ebp
f0104c27:	89 e5                	mov    %esp,%ebp
f0104c29:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = (void *)kmalloc(PAGE_SIZE);
f0104c2c:	83 ec 0c             	sub    $0xc,%esp
f0104c2f:	68 00 10 00 00       	push   $0x1000
f0104c34:	e8 af 83 00 00       	call   f010cfe8 <kmalloc>
f0104c39:	83 c4 10             	add    $0x10,%esp
f0104c3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0104c3f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c43:	75 17                	jne    f0104c5c <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0104c45:	83 ec 04             	sub    $0x4,%esp
f0104c48:	68 ea ce 11 f0       	push   $0xf011ceea
f0104c4d:	68 74 04 00 00       	push   $0x474
f0104c52:	68 e1 cb 11 f0       	push   $0xf011cbe1
f0104c57:	e8 37 b5 ff ff       	call   f0100193 <_panic>
	}
	return frames_storage;
f0104c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104c5f:	c9                   	leave  
f0104c60:	c3                   	ret    

f0104c61 <add_frame_to_storage>:
// [2] Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct Frame_Info* ptr_frame_info, uint32 index)
{
f0104c61:	55                   	push   %ebp
f0104c62:	89 e5                	mov    %esp,%ebp
f0104c64:	53                   	push   %ebx
f0104c65:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0104c68:	8b 45 10             	mov    0x10(%ebp),%eax
f0104c6b:	c1 e0 0c             	shl    $0xc,%eax
f0104c6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage, (void*) va, &ptr_page_table);
f0104c71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c74:	83 ec 04             	sub    $0x4,%esp
f0104c77:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0104c7a:	52                   	push   %edx
f0104c7b:	50                   	push   %eax
f0104c7c:	ff 75 08             	pushl  0x8(%ebp)
f0104c7f:	e8 ea f1 ff ff       	call   f0103e6e <get_page_table>
f0104c84:	83 c4 10             	add    $0x10,%esp
f0104c87:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0104c8a:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0104c8e:	75 15                	jne    f0104ca5 <add_frame_to_storage+0x44>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f0104c90:	83 ec 04             	sub    $0x4,%esp
f0104c93:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0104c96:	50                   	push   %eax
f0104c97:	ff 75 f4             	pushl  -0xc(%ebp)
f0104c9a:	ff 75 08             	pushl  0x8(%ebp)
f0104c9d:	e8 ef f2 ff ff       	call   f0103f91 <__static_cpt>
f0104ca2:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0104ca5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ca8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104cab:	c1 ea 0c             	shr    $0xc,%edx
f0104cae:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104cb4:	c1 e2 02             	shl    $0x2,%edx
f0104cb7:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0104cba:	83 ec 0c             	sub    $0xc,%esp
f0104cbd:	ff 75 0c             	pushl  0xc(%ebp)
f0104cc0:	e8 35 e8 ff ff       	call   f01034fa <to_physical_address>
f0104cc5:	83 c4 10             	add    $0x10,%esp
f0104cc8:	83 c8 01             	or     $0x1,%eax
f0104ccb:	89 03                	mov    %eax,(%ebx)
}
f0104ccd:	90                   	nop
f0104cce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104cd1:	c9                   	leave  
f0104cd2:	c3                   	ret    

f0104cd3 <get_frame_from_storage>:

// [3] Get a frame info from the storage of frames at the given index
inline struct Frame_Info* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0104cd3:	55                   	push   %ebp
f0104cd4:	89 e5                	mov    %esp,%ebp
f0104cd6:	83 ec 18             	sub    $0x18,%esp
	struct Frame_Info* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f0104cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104cdc:	c1 e0 0c             	shl    $0xc,%eax
f0104cdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage, (void*) va, &ptr_page_table);
f0104ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ce5:	83 ec 04             	sub    $0x4,%esp
f0104ce8:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0104ceb:	52                   	push   %edx
f0104cec:	50                   	push   %eax
f0104ced:	ff 75 08             	pushl  0x8(%ebp)
f0104cf0:	e8 0f f4 ff ff       	call   f0104104 <get_frame_info>
f0104cf5:	83 c4 10             	add    $0x10,%esp
f0104cf8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f0104cfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104cfe:	c9                   	leave  
f0104cff:	c3                   	ret    

f0104d00 <clear_frames_storage>:

// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
f0104d00:	55                   	push   %ebp
f0104d01:	89 e5                	mov    %esp,%ebp
f0104d03:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f0104d06:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0104d0d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104d14:	eb 5b                	jmp    f0104d71 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f0104d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d19:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d20:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d23:	01 d0                	add    %edx,%eax
f0104d25:	8b 00                	mov    (%eax),%eax
f0104d27:	85 c0                	test   %eax,%eax
f0104d29:	74 43                	je     f0104d6e <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f0104d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d35:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d38:	01 d0                	add    %edx,%eax
f0104d3a:	8b 00                	mov    (%eax),%eax
f0104d3c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104d41:	83 ec 0c             	sub    $0xc,%esp
f0104d44:	50                   	push   %eax
f0104d45:	e8 c3 e7 ff ff       	call   f010350d <to_frame_info>
f0104d4a:	83 c4 10             	add    $0x10,%esp
f0104d4d:	83 ec 0c             	sub    $0xc,%esp
f0104d50:	50                   	push   %eax
f0104d51:	e8 8b f0 ff ff       	call   f0103de1 <free_frame>
f0104d56:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0104d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104d63:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d66:	01 d0                	add    %edx,%eax
f0104d68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
// [4] Clear the storage of frames
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0104d6e:	ff 45 f4             	incl   -0xc(%ebp)
f0104d71:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0104d78:	7e 9c                	jle    f0104d16 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0104d7a:	90                   	nop
f0104d7b:	c9                   	leave  
f0104d7c:	c3                   	ret    

f0104d7d <setUHeapPlacementStrategyFIRSTFIT>:
//********************************************************************************//
/*2015*/
void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0104d7d:	55                   	push   %ebp
f0104d7e:	89 e5                	mov    %esp,%ebp
f0104d80:	c7 05 bc 2c 39 f0 01 	movl   $0x1,0xf0392cbc
f0104d87:	00 00 00 
f0104d8a:	90                   	nop
f0104d8b:	5d                   	pop    %ebp
f0104d8c:	c3                   	ret    

f0104d8d <setUHeapPlacementStrategyBESTFIT>:
void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0104d8d:	55                   	push   %ebp
f0104d8e:	89 e5                	mov    %esp,%ebp
f0104d90:	c7 05 bc 2c 39 f0 02 	movl   $0x2,0xf0392cbc
f0104d97:	00 00 00 
f0104d9a:	90                   	nop
f0104d9b:	5d                   	pop    %ebp
f0104d9c:	c3                   	ret    

f0104d9d <setUHeapPlacementStrategyNEXTFIT>:
void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0104d9d:	55                   	push   %ebp
f0104d9e:	89 e5                	mov    %esp,%ebp
f0104da0:	c7 05 bc 2c 39 f0 03 	movl   $0x3,0xf0392cbc
f0104da7:	00 00 00 
f0104daa:	90                   	nop
f0104dab:	5d                   	pop    %ebp
f0104dac:	c3                   	ret    

f0104dad <setUHeapPlacementStrategyWORSTFIT>:
void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0104dad:	55                   	push   %ebp
f0104dae:	89 e5                	mov    %esp,%ebp
f0104db0:	c7 05 bc 2c 39 f0 04 	movl   $0x4,0xf0392cbc
f0104db7:	00 00 00 
f0104dba:	90                   	nop
f0104dbb:	5d                   	pop    %ebp
f0104dbc:	c3                   	ret    

f0104dbd <isUHeapPlacementStrategyFIRSTFIT>:

uint32 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0104dbd:	55                   	push   %ebp
f0104dbe:	89 e5                	mov    %esp,%ebp
f0104dc0:	a1 bc 2c 39 f0       	mov    0xf0392cbc,%eax
f0104dc5:	83 f8 01             	cmp    $0x1,%eax
f0104dc8:	75 07                	jne    f0104dd1 <isUHeapPlacementStrategyFIRSTFIT+0x14>
f0104dca:	b8 01 00 00 00       	mov    $0x1,%eax
f0104dcf:	eb 05                	jmp    f0104dd6 <isUHeapPlacementStrategyFIRSTFIT+0x19>
f0104dd1:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dd6:	5d                   	pop    %ebp
f0104dd7:	c3                   	ret    

f0104dd8 <isUHeapPlacementStrategyBESTFIT>:
uint32 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0104dd8:	55                   	push   %ebp
f0104dd9:	89 e5                	mov    %esp,%ebp
f0104ddb:	a1 bc 2c 39 f0       	mov    0xf0392cbc,%eax
f0104de0:	83 f8 02             	cmp    $0x2,%eax
f0104de3:	75 07                	jne    f0104dec <isUHeapPlacementStrategyBESTFIT+0x14>
f0104de5:	b8 01 00 00 00       	mov    $0x1,%eax
f0104dea:	eb 05                	jmp    f0104df1 <isUHeapPlacementStrategyBESTFIT+0x19>
f0104dec:	b8 00 00 00 00       	mov    $0x0,%eax
f0104df1:	5d                   	pop    %ebp
f0104df2:	c3                   	ret    

f0104df3 <isUHeapPlacementStrategyNEXTFIT>:
uint32 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0104df3:	55                   	push   %ebp
f0104df4:	89 e5                	mov    %esp,%ebp
f0104df6:	a1 bc 2c 39 f0       	mov    0xf0392cbc,%eax
f0104dfb:	83 f8 03             	cmp    $0x3,%eax
f0104dfe:	75 07                	jne    f0104e07 <isUHeapPlacementStrategyNEXTFIT+0x14>
f0104e00:	b8 01 00 00 00       	mov    $0x1,%eax
f0104e05:	eb 05                	jmp    f0104e0c <isUHeapPlacementStrategyNEXTFIT+0x19>
f0104e07:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e0c:	5d                   	pop    %ebp
f0104e0d:	c3                   	ret    

f0104e0e <isUHeapPlacementStrategyWORSTFIT>:
uint32 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0104e0e:	55                   	push   %ebp
f0104e0f:	89 e5                	mov    %esp,%ebp
f0104e11:	a1 bc 2c 39 f0       	mov    0xf0392cbc,%eax
f0104e16:	83 f8 04             	cmp    $0x4,%eax
f0104e19:	75 07                	jne    f0104e22 <isUHeapPlacementStrategyWORSTFIT+0x14>
f0104e1b:	b8 01 00 00 00       	mov    $0x1,%eax
f0104e20:	eb 05                	jmp    f0104e27 <isUHeapPlacementStrategyWORSTFIT+0x19>
f0104e22:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e27:	5d                   	pop    %ebp
f0104e28:	c3                   	ret    

f0104e29 <setKHeapPlacementStrategyCONTALLOC>:

//********************************************************************************//
/*2017*/
void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0104e29:	55                   	push   %ebp
f0104e2a:	89 e5                	mov    %esp,%ebp
f0104e2c:	c7 05 e4 2c 39 f0 00 	movl   $0x0,0xf0392ce4
f0104e33:	00 00 00 
f0104e36:	90                   	nop
f0104e37:	5d                   	pop    %ebp
f0104e38:	c3                   	ret    

f0104e39 <setKHeapPlacementStrategyFIRSTFIT>:
void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0104e39:	55                   	push   %ebp
f0104e3a:	89 e5                	mov    %esp,%ebp
f0104e3c:	c7 05 e4 2c 39 f0 01 	movl   $0x1,0xf0392ce4
f0104e43:	00 00 00 
f0104e46:	90                   	nop
f0104e47:	5d                   	pop    %ebp
f0104e48:	c3                   	ret    

f0104e49 <setKHeapPlacementStrategyBESTFIT>:
void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0104e49:	55                   	push   %ebp
f0104e4a:	89 e5                	mov    %esp,%ebp
f0104e4c:	c7 05 e4 2c 39 f0 02 	movl   $0x2,0xf0392ce4
f0104e53:	00 00 00 
f0104e56:	90                   	nop
f0104e57:	5d                   	pop    %ebp
f0104e58:	c3                   	ret    

f0104e59 <setKHeapPlacementStrategyNEXTFIT>:
void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0104e59:	55                   	push   %ebp
f0104e5a:	89 e5                	mov    %esp,%ebp
f0104e5c:	c7 05 e4 2c 39 f0 03 	movl   $0x3,0xf0392ce4
f0104e63:	00 00 00 
f0104e66:	90                   	nop
f0104e67:	5d                   	pop    %ebp
f0104e68:	c3                   	ret    

f0104e69 <setKHeapPlacementStrategyWORSTFIT>:
void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0104e69:	55                   	push   %ebp
f0104e6a:	89 e5                	mov    %esp,%ebp
f0104e6c:	c7 05 e4 2c 39 f0 04 	movl   $0x4,0xf0392ce4
f0104e73:	00 00 00 
f0104e76:	90                   	nop
f0104e77:	5d                   	pop    %ebp
f0104e78:	c3                   	ret    

f0104e79 <isKHeapPlacementStrategyCONTALLOC>:

uint32 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0104e79:	55                   	push   %ebp
f0104e7a:	89 e5                	mov    %esp,%ebp
f0104e7c:	a1 e4 2c 39 f0       	mov    0xf0392ce4,%eax
f0104e81:	85 c0                	test   %eax,%eax
f0104e83:	75 07                	jne    f0104e8c <isKHeapPlacementStrategyCONTALLOC+0x13>
f0104e85:	b8 01 00 00 00       	mov    $0x1,%eax
f0104e8a:	eb 05                	jmp    f0104e91 <isKHeapPlacementStrategyCONTALLOC+0x18>
f0104e8c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e91:	5d                   	pop    %ebp
f0104e92:	c3                   	ret    

f0104e93 <isKHeapPlacementStrategyFIRSTFIT>:
uint32 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0104e93:	55                   	push   %ebp
f0104e94:	89 e5                	mov    %esp,%ebp
f0104e96:	a1 e4 2c 39 f0       	mov    0xf0392ce4,%eax
f0104e9b:	83 f8 01             	cmp    $0x1,%eax
f0104e9e:	75 07                	jne    f0104ea7 <isKHeapPlacementStrategyFIRSTFIT+0x14>
f0104ea0:	b8 01 00 00 00       	mov    $0x1,%eax
f0104ea5:	eb 05                	jmp    f0104eac <isKHeapPlacementStrategyFIRSTFIT+0x19>
f0104ea7:	b8 00 00 00 00       	mov    $0x0,%eax
f0104eac:	5d                   	pop    %ebp
f0104ead:	c3                   	ret    

f0104eae <isKHeapPlacementStrategyBESTFIT>:
uint32 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0104eae:	55                   	push   %ebp
f0104eaf:	89 e5                	mov    %esp,%ebp
f0104eb1:	a1 e4 2c 39 f0       	mov    0xf0392ce4,%eax
f0104eb6:	83 f8 02             	cmp    $0x2,%eax
f0104eb9:	75 07                	jne    f0104ec2 <isKHeapPlacementStrategyBESTFIT+0x14>
f0104ebb:	b8 01 00 00 00       	mov    $0x1,%eax
f0104ec0:	eb 05                	jmp    f0104ec7 <isKHeapPlacementStrategyBESTFIT+0x19>
f0104ec2:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ec7:	5d                   	pop    %ebp
f0104ec8:	c3                   	ret    

f0104ec9 <isKHeapPlacementStrategyNEXTFIT>:
uint32 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0104ec9:	55                   	push   %ebp
f0104eca:	89 e5                	mov    %esp,%ebp
f0104ecc:	a1 e4 2c 39 f0       	mov    0xf0392ce4,%eax
f0104ed1:	83 f8 03             	cmp    $0x3,%eax
f0104ed4:	75 07                	jne    f0104edd <isKHeapPlacementStrategyNEXTFIT+0x14>
f0104ed6:	b8 01 00 00 00       	mov    $0x1,%eax
f0104edb:	eb 05                	jmp    f0104ee2 <isKHeapPlacementStrategyNEXTFIT+0x19>
f0104edd:	b8 00 00 00 00       	mov    $0x0,%eax
f0104ee2:	5d                   	pop    %ebp
f0104ee3:	c3                   	ret    

f0104ee4 <isKHeapPlacementStrategyWORSTFIT>:
uint32 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0104ee4:	55                   	push   %ebp
f0104ee5:	89 e5                	mov    %esp,%ebp
f0104ee7:	a1 e4 2c 39 f0       	mov    0xf0392ce4,%eax
f0104eec:	83 f8 04             	cmp    $0x4,%eax
f0104eef:	75 07                	jne    f0104ef8 <isKHeapPlacementStrategyWORSTFIT+0x14>
f0104ef1:	b8 01 00 00 00       	mov    $0x1,%eax
f0104ef6:	eb 05                	jmp    f0104efd <isKHeapPlacementStrategyWORSTFIT+0x19>
f0104ef8:	b8 00 00 00 00       	mov    $0x0,%eax
f0104efd:	5d                   	pop    %ebp
f0104efe:	c3                   	ret    

f0104eff <__new>:



void __new(struct Env* e, uint32 virtual_address, uint32 size)
{
f0104eff:	55                   	push   %ebp
f0104f00:	89 e5                	mov    %esp,%ebp

}
f0104f02:	90                   	nop
f0104f03:	5d                   	pop    %ebp
f0104f04:	c3                   	ret    

f0104f05 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f0104f05:	55                   	push   %ebp
f0104f06:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0104f08:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f0b:	8b 15 44 11 3b f0    	mov    0xf03b1144,%edx
f0104f11:	29 d0                	sub    %edx,%eax
f0104f13:	c1 f8 03             	sar    $0x3,%eax
f0104f16:	89 c2                	mov    %eax,%edx
f0104f18:	89 d0                	mov    %edx,%eax
f0104f1a:	c1 e0 02             	shl    $0x2,%eax
f0104f1d:	01 d0                	add    %edx,%eax
f0104f1f:	c1 e0 02             	shl    $0x2,%eax
f0104f22:	01 d0                	add    %edx,%eax
f0104f24:	c1 e0 02             	shl    $0x2,%eax
f0104f27:	01 d0                	add    %edx,%eax
f0104f29:	89 c1                	mov    %eax,%ecx
f0104f2b:	c1 e1 08             	shl    $0x8,%ecx
f0104f2e:	01 c8                	add    %ecx,%eax
f0104f30:	89 c1                	mov    %eax,%ecx
f0104f32:	c1 e1 10             	shl    $0x10,%ecx
f0104f35:	01 c8                	add    %ecx,%eax
f0104f37:	01 c0                	add    %eax,%eax
f0104f39:	01 d0                	add    %edx,%eax
}
f0104f3b:	5d                   	pop    %ebp
f0104f3c:	c3                   	ret    

f0104f3d <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f0104f3d:	55                   	push   %ebp
f0104f3e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0104f40:	ff 75 08             	pushl  0x8(%ebp)
f0104f43:	e8 bd ff ff ff       	call   f0104f05 <to_frame_number>
f0104f48:	83 c4 04             	add    $0x4,%esp
f0104f4b:	c1 e0 0c             	shl    $0xc,%eax
}
f0104f4e:	c9                   	leave  
f0104f4f:	c3                   	ret    

f0104f50 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f0104f50:	55                   	push   %ebp
f0104f51:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f0104f53:	8b 15 34 58 32 f0    	mov    0xf0325834,%edx
f0104f59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f5c:	89 10                	mov    %edx,(%eax)
f0104f5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f61:	8b 00                	mov    (%eax),%eax
f0104f63:	85 c0                	test   %eax,%eax
f0104f65:	75 07                	jne    f0104f6e <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0104f67:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0104f6c:	eb 11                	jmp    f0104f7f <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f0104f6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f71:	8b 00                	mov    (%eax),%eax
f0104f73:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0104f7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104f7f:	5d                   	pop    %ebp
f0104f80:	c3                   	ret    

f0104f81 <free_environment>:

// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f0104f81:	55                   	push   %ebp
f0104f82:	89 e5                	mov    %esp,%ebp
f0104f84:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0104f87:	83 ec 04             	sub    $0x4,%esp
f0104f8a:	68 78 ef 00 00       	push   $0xef78
f0104f8f:	6a 00                	push   $0x0
f0104f91:	ff 75 08             	pushl  0x8(%ebp)
f0104f94:	e8 d7 4a 01 00       	call   f0119a70 <memset>
f0104f99:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0104f9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f9f:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0104fa6:	8b 15 34 58 32 f0    	mov    0xf0325834,%edx
f0104fac:	8b 45 08             	mov    0x8(%ebp),%eax
f0104faf:	89 50 44             	mov    %edx,0x44(%eax)
f0104fb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fb5:	8b 40 44             	mov    0x44(%eax),%eax
f0104fb8:	85 c0                	test   %eax,%eax
f0104fba:	74 0d                	je     f0104fc9 <free_environment+0x48>
f0104fbc:	a1 34 58 32 f0       	mov    0xf0325834,%eax
f0104fc1:	8b 55 08             	mov    0x8(%ebp),%edx
f0104fc4:	89 50 48             	mov    %edx,0x48(%eax)
f0104fc7:	eb 08                	jmp    f0104fd1 <free_environment+0x50>
f0104fc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fcc:	a3 38 58 32 f0       	mov    %eax,0xf0325838
f0104fd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fd4:	a3 34 58 32 f0       	mov    %eax,0xf0325834
f0104fd9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fdc:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104fe3:	a1 40 58 32 f0       	mov    0xf0325840,%eax
f0104fe8:	40                   	inc    %eax
f0104fe9:	a3 40 58 32 f0       	mov    %eax,0xf0325840
}
f0104fee:	90                   	nop
f0104fef:	c9                   	leave  
f0104ff0:	c3                   	ret    

f0104ff1 <create_user_page_WS>:


void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f0104ff1:	55                   	push   %ebp
f0104ff2:	89 e5                	mov    %esp,%ebp
f0104ff4:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0104ff7:	83 ec 04             	sub    $0x4,%esp
f0104ffa:	68 2c d3 11 f0       	push   $0xf011d32c
f0104fff:	68 d2 00 00 00       	push   $0xd2
f0105004:	68 4f d3 11 f0       	push   $0xf011d34f
f0105009:	e8 85 b1 ff ff       	call   f0100193 <_panic>

f010500e <create_user_directory>:
	return NULL;
}


void * create_user_directory()
{
f010500e:	55                   	push   %ebp
f010500f:	89 e5                	mov    %esp,%ebp
f0105011:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f0105014:	83 ec 04             	sub    $0x4,%esp
f0105017:	68 2c d3 11 f0       	push   $0xf011d32c
f010501c:	68 d9 00 00 00       	push   $0xd9
f0105021:	68 4f d3 11 f0       	push   $0xf011d34f
f0105026:	e8 68 b1 ff ff       	call   f0100193 <_panic>

f010502b <ShareWSAtUserSpace>:
	return NULL;
}

void ShareWSAtUserSpace(struct Env* e)
{
f010502b:	55                   	push   %ebp
f010502c:	89 e5                	mov    %esp,%ebp
f010502e:	83 ec 28             	sub    $0x28,%esp
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f0105031:	8b 45 08             	mov    0x8(%ebp),%eax
f0105034:	c7 80 30 ef 00 00 00 	movl   $0xa0000000,0xef30(%eax)
f010503b:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010503e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105041:	83 c0 78             	add    $0x78,%eax
f0105044:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f0105047:	8b 45 08             	mov    0x8(%ebp),%eax
f010504a:	8b 50 74             	mov    0x74(%eax),%edx
f010504d:	89 d0                	mov    %edx,%eax
f010504f:	c1 e0 02             	shl    $0x2,%eax
f0105052:	01 d0                	add    %edx,%eax
f0105054:	c1 e0 02             	shl    $0x2,%eax
f0105057:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010505a:	8b 45 08             	mov    0x8(%ebp),%eax
f010505d:	8b 80 30 ef 00 00    	mov    0xef30(%eax),%eax
f0105063:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f0105066:	8b 45 08             	mov    0x8(%ebp),%eax
f0105069:	83 c0 78             	add    $0x78,%eax
f010506c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010506f:	eb 72                	jmp    f01050e3 <ShareWSAtUserSpace+0xb8>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), (void*)dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f0105071:	83 ec 0c             	sub    $0xc,%esp
f0105074:	ff 75 f4             	pushl  -0xc(%ebp)
f0105077:	e8 ba 7f 00 00       	call   f010d036 <kheap_physical_address>
f010507c:	83 c4 10             	add    $0x10,%esp
f010507f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory, (void*) dva, &ptr_page_table) == TABLE_NOT_EXIST)
f0105082:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105085:	8b 45 08             	mov    0x8(%ebp),%eax
f0105088:	8b 40 5c             	mov    0x5c(%eax),%eax
f010508b:	83 ec 04             	sub    $0x4,%esp
f010508e:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f0105091:	51                   	push   %ecx
f0105092:	52                   	push   %edx
f0105093:	50                   	push   %eax
f0105094:	e8 d5 ed ff ff       	call   f0103e6e <get_page_table>
f0105099:	83 c4 10             	add    $0x10,%esp
f010509c:	83 f8 01             	cmp    $0x1,%eax
f010509f:	75 18                	jne    f01050b9 <ShareWSAtUserSpace+0x8e>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f01050a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01050a4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01050a7:	83 ec 08             	sub    $0x8,%esp
f01050aa:	ff 75 f0             	pushl  -0x10(%ebp)
f01050ad:	50                   	push   %eax
f01050ae:	e8 c1 ee ff ff       	call   f0103f74 <create_page_table>
f01050b3:	83 c4 10             	add    $0x10,%esp
f01050b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f01050b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01050bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050bf:	c1 ea 0c             	shr    $0xc,%edx
f01050c2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01050c8:	c1 e2 02             	shl    $0x2,%edx
f01050cb:	01 d0                	add    %edx,%eax
f01050cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01050d0:	83 ca 05             	or     $0x5,%edx
f01050d3:	89 10                	mov    %edx,(%eax)
{
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f01050d5:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01050dc:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01050e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01050e6:	83 c0 78             	add    $0x78,%eax
f01050e9:	89 c2                	mov    %eax,%edx
f01050eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01050ee:	01 d0                	add    %edx,%eax
f01050f0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01050f3:	0f 87 78 ff ff ff    	ja     f0105071 <ShareWSAtUserSpace+0x46>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
}
f01050f9:	90                   	nop
f01050fa:	c9                   	leave  
f01050fb:	c3                   	ret    

f01050fc <initialize_environment>:
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory
		, unsigned int phys_user_page_directory)
{
f01050fc:	55                   	push   %ebp
f01050fd:	89 e5                	mov    %esp,%ebp
f01050ff:	53                   	push   %ebx
f0105100:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f0105103:	8b 45 08             	mov    0x8(%ebp),%eax
f0105106:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105109:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010510c:	8b 45 08             	mov    0x8(%ebp),%eax
f010510f:	8b 55 10             	mov    0x10(%ebp),%edx
f0105112:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0105115:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010511c:	eb 17                	jmp    f0105135 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010511e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105121:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105124:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105127:	c1 e2 02             	shl    $0x2,%edx
f010512a:	01 d0                	add    %edx,%eax
f010512c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0105132:	ff 45 f4             	incl   -0xc(%ebp)
f0105135:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105138:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010513d:	76 df                	jbe    f010511e <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010513f:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0105146:	eb 22                	jmp    f010516a <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0105148:	8b 45 08             	mov    0x8(%ebp),%eax
f010514b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010514e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105151:	c1 e2 02             	shl    $0x2,%edx
f0105154:	01 c2                	add    %eax,%edx
f0105156:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010515b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010515e:	c1 e1 02             	shl    $0x2,%ecx
f0105161:	01 c8                	add    %ecx,%eax
f0105163:	8b 00                	mov    (%eax),%eax
f0105165:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0105167:	ff 45 f4             	incl   -0xc(%ebp)
f010516a:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105171:	7e d5                	jle    f0105148 <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		ShareWSAtUserSpace(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f0105173:	8b 45 08             	mov    0x8(%ebp),%eax
f0105176:	8b 15 2c 58 32 f0    	mov    0xf032582c,%edx
f010517c:	29 d0                	sub    %edx,%eax
f010517e:	c1 f8 03             	sar    $0x3,%eax
f0105181:	89 c2                	mov    %eax,%edx
f0105183:	89 d0                	mov    %edx,%eax
f0105185:	01 c0                	add    %eax,%eax
f0105187:	01 d0                	add    %edx,%eax
f0105189:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0105190:	01 c8                	add    %ecx,%eax
f0105192:	c1 e0 07             	shl    $0x7,%eax
f0105195:	01 d0                	add    %edx,%eax
f0105197:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010519e:	01 c8                	add    %ecx,%eax
f01051a0:	c1 e0 02             	shl    $0x2,%eax
f01051a3:	01 d0                	add    %edx,%eax
f01051a5:	c1 e0 03             	shl    $0x3,%eax
f01051a8:	01 d0                	add    %edx,%eax
f01051aa:	c1 e0 03             	shl    $0x3,%eax
f01051ad:	01 d0                	add    %edx,%eax
f01051af:	01 c0                	add    %eax,%eax
f01051b1:	01 d0                	add    %edx,%eax
f01051b3:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01051ba:	01 c8                	add    %ecx,%eax
f01051bc:	01 c0                	add    %eax,%eax
f01051be:	01 d0                	add    %edx,%eax
f01051c0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01051c7:	01 d0                	add    %edx,%eax
f01051c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*)
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f01051cc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01051cf:	89 d0                	mov    %edx,%eax
f01051d1:	01 c0                	add    %eax,%eax
f01051d3:	01 d0                	add    %edx,%eax
f01051d5:	c1 e0 07             	shl    $0x7,%eax
f01051d8:	29 d0                	sub    %edx,%eax
f01051da:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01051e1:	01 c8                	add    %ecx,%eax
f01051e3:	01 c0                	add    %eax,%eax
f01051e5:	01 d0                	add    %edx,%eax
f01051e7:	01 c0                	add    %eax,%eax
f01051e9:	01 d0                	add    %edx,%eax
f01051eb:	c1 e0 03             	shl    $0x3,%eax
f01051ee:	2d 00 00 40 11       	sub    $0x11400000,%eax
f01051f3:	8d 50 78             	lea    0x78(%eax),%edx
		ShareWSAtUserSpace(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
		e->__uptr_pws = (struct WorkingSetElement*)
f01051f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01051f9:	89 90 30 ef 00 00    	mov    %edx,0xef30(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRULists())
f01051ff:	e8 4f 39 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f0105204:	85 c0                	test   %eax,%eax
f0105206:	0f 84 f9 00 00 00    	je     f0105305 <initialize_environment+0x209>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010520c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105213:	e9 dc 00 00 00       	jmp    f01052f4 <initialize_environment+0x1f8>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f0105218:	8b 45 08             	mov    0x8(%ebp),%eax
f010521b:	8b 90 40 ef 00 00    	mov    0xef40(%eax),%edx
f0105221:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0105224:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0105227:	89 c8                	mov    %ecx,%eax
f0105229:	c1 e0 02             	shl    $0x2,%eax
f010522c:	01 c8                	add    %ecx,%eax
f010522e:	c1 e0 02             	shl    $0x2,%eax
f0105231:	01 d8                	add    %ebx,%eax
f0105233:	05 84 00 00 00       	add    $0x84,%eax
f0105238:	89 10                	mov    %edx,(%eax)
f010523a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010523d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105240:	89 d0                	mov    %edx,%eax
f0105242:	c1 e0 02             	shl    $0x2,%eax
f0105245:	01 d0                	add    %edx,%eax
f0105247:	c1 e0 02             	shl    $0x2,%eax
f010524a:	01 c8                	add    %ecx,%eax
f010524c:	05 84 00 00 00       	add    $0x84,%eax
f0105251:	8b 00                	mov    (%eax),%eax
f0105253:	85 c0                	test   %eax,%eax
f0105255:	74 26                	je     f010527d <initialize_environment+0x181>
f0105257:	8b 45 08             	mov    0x8(%ebp),%eax
f010525a:	8b 90 40 ef 00 00    	mov    0xef40(%eax),%edx
f0105260:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0105263:	89 c8                	mov    %ecx,%eax
f0105265:	c1 e0 02             	shl    $0x2,%eax
f0105268:	01 c8                	add    %ecx,%eax
f010526a:	c1 e0 02             	shl    $0x2,%eax
f010526d:	8d 48 70             	lea    0x70(%eax),%ecx
f0105270:	8b 45 08             	mov    0x8(%ebp),%eax
f0105273:	01 c8                	add    %ecx,%eax
f0105275:	83 c0 08             	add    $0x8,%eax
f0105278:	89 42 10             	mov    %eax,0x10(%edx)
f010527b:	eb 21                	jmp    f010529e <initialize_environment+0x1a2>
f010527d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105280:	89 d0                	mov    %edx,%eax
f0105282:	c1 e0 02             	shl    $0x2,%eax
f0105285:	01 d0                	add    %edx,%eax
f0105287:	c1 e0 02             	shl    $0x2,%eax
f010528a:	8d 50 70             	lea    0x70(%eax),%edx
f010528d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105290:	01 d0                	add    %edx,%eax
f0105292:	8d 50 08             	lea    0x8(%eax),%edx
f0105295:	8b 45 08             	mov    0x8(%ebp),%eax
f0105298:	89 90 44 ef 00 00    	mov    %edx,0xef44(%eax)
f010529e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01052a1:	89 d0                	mov    %edx,%eax
f01052a3:	c1 e0 02             	shl    $0x2,%eax
f01052a6:	01 d0                	add    %edx,%eax
f01052a8:	c1 e0 02             	shl    $0x2,%eax
f01052ab:	8d 50 70             	lea    0x70(%eax),%edx
f01052ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01052b1:	01 d0                	add    %edx,%eax
f01052b3:	8d 50 08             	lea    0x8(%eax),%edx
f01052b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01052b9:	89 90 40 ef 00 00    	mov    %edx,0xef40(%eax)
f01052bf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01052c2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01052c5:	89 d0                	mov    %edx,%eax
f01052c7:	c1 e0 02             	shl    $0x2,%eax
f01052ca:	01 d0                	add    %edx,%eax
f01052cc:	c1 e0 02             	shl    $0x2,%eax
f01052cf:	01 c8                	add    %ecx,%eax
f01052d1:	05 88 00 00 00       	add    $0x88,%eax
f01052d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01052dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01052df:	8b 80 4c ef 00 00    	mov    0xef4c(%eax),%eax
f01052e5:	8d 50 01             	lea    0x1(%eax),%edx
f01052e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01052eb:	89 90 4c ef 00 00    	mov    %edx,0xef4c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRULists())
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f01052f1:	ff 45 f0             	incl   -0x10(%ebp)
f01052f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01052f7:	8b 50 74             	mov    0x74(%eax),%edx
f01052fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01052fd:	39 c2                	cmp    %eax,%edx
f01052ff:	0f 87 13 ff ff ff    	ja     f0105218 <initialize_environment+0x11c>
		e->ptr_sharing_variables[i].owner_flag = -1;
		e->ptr_sharing_variables[i].id_in_shares_array = -1;
	}*/

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0105305:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010530c:	eb 51                	jmp    f010535f <initialize_environment+0x263>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010530e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105311:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105314:	89 d0                	mov    %edx,%eax
f0105316:	c1 e0 02             	shl    $0x2,%eax
f0105319:	01 d0                	add    %edx,%eax
f010531b:	c1 e0 02             	shl    $0x2,%eax
f010531e:	01 c8                	add    %ecx,%eax
f0105320:	83 c0 78             	add    $0x78,%eax
f0105323:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f0105329:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010532c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010532f:	89 d0                	mov    %edx,%eax
f0105331:	c1 e0 02             	shl    $0x2,%eax
f0105334:	01 d0                	add    %edx,%eax
f0105336:	c1 e0 02             	shl    $0x2,%eax
f0105339:	01 c8                	add    %ecx,%eax
f010533b:	83 c0 7c             	add    $0x7c,%eax
f010533e:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0105341:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105344:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105347:	89 d0                	mov    %edx,%eax
f0105349:	c1 e0 02             	shl    $0x2,%eax
f010534c:	01 d0                	add    %edx,%eax
f010534e:	c1 e0 02             	shl    $0x2,%eax
f0105351:	01 c8                	add    %ecx,%eax
f0105353:	83 e8 80             	sub    $0xffffff80,%eax
f0105356:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_sharing_variables[i].owner_flag = -1;
		e->ptr_sharing_variables[i].id_in_shares_array = -1;
	}*/

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010535c:	ff 45 f4             	incl   -0xc(%ebp)
f010535f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105362:	8b 50 74             	mov    0x74(%eax),%edx
f0105365:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105368:	39 c2                	cmp    %eax,%edx
f010536a:	77 a2                	ja     f010530e <initialize_environment+0x212>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010536c:	8b 45 08             	mov    0x8(%ebp),%eax
f010536f:	c7 80 c0 ee 00 00 00 	movl   $0x0,0xeec0(%eax)
f0105376:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0105379:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105380:	eb 3a                	jmp    f01053bc <initialize_environment+0x2c0>
	{
		e->__ptr_tws[i].virtual_address = 0;
f0105382:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105385:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105388:	89 d0                	mov    %edx,%eax
f010538a:	c1 e0 02             	shl    $0x2,%eax
f010538d:	01 d0                	add    %edx,%eax
f010538f:	c1 e0 02             	shl    $0x2,%eax
f0105392:	01 c8                	add    %ecx,%eax
f0105394:	05 d8 ea 00 00       	add    $0xead8,%eax
f0105399:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010539f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01053a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053a5:	89 d0                	mov    %edx,%eax
f01053a7:	c1 e0 02             	shl    $0x2,%eax
f01053aa:	01 d0                	add    %edx,%eax
f01053ac:	c1 e0 02             	shl    $0x2,%eax
f01053af:	01 c8                	add    %ecx,%eax
f01053b1:	05 dc ea 00 00       	add    $0xeadc,%eax
f01053b6:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f01053b9:	ff 45 f4             	incl   -0xc(%ebp)
f01053bc:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01053c0:	7e c0                	jle    f0105382 <initialize_environment+0x286>
	{
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
	}

	e->table_last_WS_index = 0;
f01053c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01053c5:	c7 80 c4 ee 00 00 00 	movl   $0x0,0xeec4(%eax)
f01053cc:	00 00 00 

	e->pageFaultsCounter=0;
f01053cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01053d2:	c7 80 c8 ee 00 00 00 	movl   $0x0,0xeec8(%eax)
f01053d9:	00 00 00 
	e->tableFaultsCounter=0;
f01053dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01053df:	c7 80 cc ee 00 00 00 	movl   $0x0,0xeecc(%eax)
f01053e6:	00 00 00 

	e->freeingFullWSCounter = 0;
f01053e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01053ec:	c7 80 d0 ee 00 00 00 	movl   $0x0,0xeed0(%eax)
f01053f3:	00 00 00 
	e->freeingScarceMemCounter = 0;
f01053f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01053f9:	c7 80 d4 ee 00 00 00 	movl   $0x0,0xeed4(%eax)
f0105400:	00 00 00 

	e->nModifiedPages=0;
f0105403:	8b 45 08             	mov    0x8(%ebp),%eax
f0105406:	c7 80 d8 ee 00 00 00 	movl   $0x0,0xeed8(%eax)
f010540d:	00 00 00 
	e->nNotModifiedPages=0;
f0105410:	8b 45 08             	mov    0x8(%ebp),%eax
f0105413:	c7 80 dc ee 00 00 00 	movl   $0x0,0xeedc(%eax)
f010541a:	00 00 00 
	e->nClocks = 0;
f010541d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105420:	c7 80 38 ef 00 00 00 	movl   $0x0,0xef38(%eax)
f0105427:	00 00 00 

	//2020
	e->nPageIn = 0;
f010542a:	8b 45 08             	mov    0x8(%ebp),%eax
f010542d:	c7 80 e0 ee 00 00 00 	movl   $0x0,0xeee0(%eax)
f0105434:	00 00 00 
	e->nPageOut = 0;
f0105437:	8b 45 08             	mov    0x8(%ebp),%eax
f010543a:	c7 80 e4 ee 00 00 00 	movl   $0x0,0xeee4(%eax)
f0105441:	00 00 00 
	e->nNewPageAdded = 0;
f0105444:	8b 45 08             	mov    0x8(%ebp),%eax
f0105447:	c7 80 e8 ee 00 00 00 	movl   $0x0,0xeee8(%eax)
f010544e:	00 00 00 
	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0105451:	83 ec 0c             	sub    $0xc,%esp
f0105454:	ff 75 08             	pushl  0x8(%ebp)
f0105457:	e8 73 15 00 00       	call   f01069cf <complete_environment_initialization>
f010545c:	83 c4 10             	add    $0x10,%esp
}
f010545f:	90                   	nop
f0105460:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105463:	c9                   	leave  
f0105464:	c3                   	ret    

f0105465 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0105465:	55                   	push   %ebp
f0105466:	89 e5                	mov    %esp,%ebp
f0105468:	53                   	push   %ebx
f0105469:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010546c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010546f:	8b 40 0c             	mov    0xc(%eax),%eax
f0105472:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0105475:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105478:	8b 40 08             	mov    0x8(%eax),%eax
f010547b:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010547e:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0105485:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105488:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010548b:	01 c2                	add    %eax,%edx
f010548d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105490:	01 d0                	add    %edx,%eax
f0105492:	48                   	dec    %eax
f0105493:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105496:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105499:	ba 00 00 00 00       	mov    $0x0,%edx
f010549e:	f7 75 dc             	divl   -0x24(%ebp)
f01054a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01054a4:	29 d0                	sub    %edx,%eax
f01054a6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f01054a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01054ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01054af:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01054b2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01054b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f01054ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info *p = NULL;
f01054c1:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f01054c8:	8b 45 10             	mov    0x10(%ebp),%eax
f01054cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000)
f01054d1:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f01054d8:	0f 85 04 05 00 00    	jne    f01059e2 <program_segment_alloc_map_copy_workingset+0x57d>
	{
		if (strcmp(e->prog_name, "tpp")!=0)
f01054de:	8b 45 08             	mov    0x8(%ebp),%eax
f01054e1:	05 f0 ee 00 00       	add    $0xeef0,%eax
f01054e6:	83 ec 08             	sub    $0x8,%esp
f01054e9:	68 8c cf 11 f0       	push   $0xf011cf8c
f01054ee:	50                   	push   %eax
f01054ef:	e8 9a 44 01 00       	call   f011998e <strcmp>
f01054f4:	83 c4 10             	add    $0x10,%esp
f01054f7:	85 c0                	test   %eax,%eax
f01054f9:	74 15                	je     f0105510 <program_segment_alloc_map_copy_workingset+0xab>
			remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f01054fb:	8b 45 14             	mov    0x14(%ebp),%eax
f01054fe:	83 f8 06             	cmp    $0x6,%eax
f0105501:	76 05                	jbe    f0105508 <program_segment_alloc_map_copy_workingset+0xa3>
f0105503:	b8 06 00 00 00       	mov    $0x6,%eax
f0105508:	89 45 14             	mov    %eax,0x14(%ebp)
f010550b:	e9 d2 04 00 00       	jmp    f01059e2 <program_segment_alloc_map_copy_workingset+0x57d>
		else
			remaining_ws_pages = remaining_ws_pages < 7 ? remaining_ws_pages:7 ;
f0105510:	8b 45 14             	mov    0x14(%ebp),%eax
f0105513:	83 f8 07             	cmp    $0x7,%eax
f0105516:	76 05                	jbe    f010551d <program_segment_alloc_map_copy_workingset+0xb8>
f0105518:	b8 07 00 00 00       	mov    $0x7,%eax
f010551d:	89 45 14             	mov    %eax,0x14(%ebp)
	}
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0105520:	e9 bd 04 00 00       	jmp    f01059e2 <program_segment_alloc_map_copy_workingset+0x57d>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0105525:	83 ec 0c             	sub    $0xc,%esp
f0105528:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010552b:	50                   	push   %eax
f010552c:	e8 be e7 ff ff       	call   f0103cef <allocate_frame>
f0105531:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, (void *)iVA, PERM_USER | PERM_WRITEABLE);
f0105534:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105537:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010553a:	8b 45 08             	mov    0x8(%ebp),%eax
f010553d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105540:	6a 06                	push   $0x6
f0105542:	51                   	push   %ecx
f0105543:	52                   	push   %edx
f0105544:	50                   	push   %eax
f0105545:	e8 b1 ec ff ff       	call   f01041fb <loadtime_map_frame>
f010554a:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010554d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105550:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105556:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105559:	89 d0                	mov    %edx,%eax
f010555b:	c1 e0 02             	shl    $0x2,%eax
f010555e:	01 d0                	add    %edx,%eax
f0105560:	c1 e0 02             	shl    $0x2,%eax
f0105563:	01 c8                	add    %ecx,%eax
f0105565:	8d 50 78             	lea    0x78(%eax),%edx
f0105568:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010556b:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010556d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105570:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105576:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105579:	89 d0                	mov    %edx,%eax
f010557b:	c1 e0 02             	shl    $0x2,%eax
f010557e:	01 d0                	add    %edx,%eax
f0105580:	c1 e0 02             	shl    $0x2,%eax
f0105583:	01 c8                	add    %ecx,%eax
f0105585:	83 c0 7c             	add    $0x7c,%eax
f0105588:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010558b:	8b 45 08             	mov    0x8(%ebp),%eax
f010558e:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105594:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105597:	89 d0                	mov    %edx,%eax
f0105599:	c1 e0 02             	shl    $0x2,%eax
f010559c:	01 d0                	add    %edx,%eax
f010559e:	c1 e0 02             	shl    $0x2,%eax
f01055a1:	01 c8                	add    %ecx,%eax
f01055a3:	83 e8 80             	sub    $0xffffff80,%eax
f01055a6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)


		//2020
		if (isPageReplacmentAlgorithmLRULists())
f01055ac:	e8 a2 35 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f01055b1:	85 c0                	test   %eax,%eax
f01055b3:	0f 84 7f 03 00 00    	je     f0105938 <program_segment_alloc_map_copy_workingset+0x4d3>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01055b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01055bc:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01055c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01055c5:	89 d0                	mov    %edx,%eax
f01055c7:	c1 e0 02             	shl    $0x2,%eax
f01055ca:	01 d0                	add    %edx,%eax
f01055cc:	c1 e0 02             	shl    $0x2,%eax
f01055cf:	01 c8                	add    %ecx,%eax
f01055d1:	05 84 00 00 00       	add    $0x84,%eax
f01055d6:	8b 00                	mov    (%eax),%eax
f01055d8:	85 c0                	test   %eax,%eax
f01055da:	74 43                	je     f010561f <program_segment_alloc_map_copy_workingset+0x1ba>
f01055dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01055df:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01055e5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01055e8:	89 d0                	mov    %edx,%eax
f01055ea:	c1 e0 02             	shl    $0x2,%eax
f01055ed:	01 d0                	add    %edx,%eax
f01055ef:	c1 e0 02             	shl    $0x2,%eax
f01055f2:	01 c8                	add    %ecx,%eax
f01055f4:	05 84 00 00 00       	add    $0x84,%eax
f01055f9:	8b 10                	mov    (%eax),%edx
f01055fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01055fe:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0105604:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0105607:	89 c8                	mov    %ecx,%eax
f0105609:	c1 e0 02             	shl    $0x2,%eax
f010560c:	01 c8                	add    %ecx,%eax
f010560e:	c1 e0 02             	shl    $0x2,%eax
f0105611:	01 d8                	add    %ebx,%eax
f0105613:	05 88 00 00 00       	add    $0x88,%eax
f0105618:	8b 00                	mov    (%eax),%eax
f010561a:	89 42 10             	mov    %eax,0x10(%edx)
f010561d:	eb 28                	jmp    f0105647 <program_segment_alloc_map_copy_workingset+0x1e2>
f010561f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105622:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105628:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010562b:	89 d0                	mov    %edx,%eax
f010562d:	c1 e0 02             	shl    $0x2,%eax
f0105630:	01 d0                	add    %edx,%eax
f0105632:	c1 e0 02             	shl    $0x2,%eax
f0105635:	01 c8                	add    %ecx,%eax
f0105637:	05 88 00 00 00       	add    $0x88,%eax
f010563c:	8b 10                	mov    (%eax),%edx
f010563e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105641:	89 90 44 ef 00 00    	mov    %edx,0xef44(%eax)
f0105647:	8b 45 08             	mov    0x8(%ebp),%eax
f010564a:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105650:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105653:	89 d0                	mov    %edx,%eax
f0105655:	c1 e0 02             	shl    $0x2,%eax
f0105658:	01 d0                	add    %edx,%eax
f010565a:	c1 e0 02             	shl    $0x2,%eax
f010565d:	01 c8                	add    %ecx,%eax
f010565f:	05 88 00 00 00       	add    $0x88,%eax
f0105664:	8b 00                	mov    (%eax),%eax
f0105666:	85 c0                	test   %eax,%eax
f0105668:	74 43                	je     f01056ad <program_segment_alloc_map_copy_workingset+0x248>
f010566a:	8b 45 08             	mov    0x8(%ebp),%eax
f010566d:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105673:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105676:	89 d0                	mov    %edx,%eax
f0105678:	c1 e0 02             	shl    $0x2,%eax
f010567b:	01 d0                	add    %edx,%eax
f010567d:	c1 e0 02             	shl    $0x2,%eax
f0105680:	01 c8                	add    %ecx,%eax
f0105682:	05 88 00 00 00       	add    $0x88,%eax
f0105687:	8b 10                	mov    (%eax),%edx
f0105689:	8b 45 08             	mov    0x8(%ebp),%eax
f010568c:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0105692:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0105695:	89 c8                	mov    %ecx,%eax
f0105697:	c1 e0 02             	shl    $0x2,%eax
f010569a:	01 c8                	add    %ecx,%eax
f010569c:	c1 e0 02             	shl    $0x2,%eax
f010569f:	01 d8                	add    %ebx,%eax
f01056a1:	05 84 00 00 00       	add    $0x84,%eax
f01056a6:	8b 00                	mov    (%eax),%eax
f01056a8:	89 42 0c             	mov    %eax,0xc(%edx)
f01056ab:	eb 28                	jmp    f01056d5 <program_segment_alloc_map_copy_workingset+0x270>
f01056ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01056b0:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01056b6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01056b9:	89 d0                	mov    %edx,%eax
f01056bb:	c1 e0 02             	shl    $0x2,%eax
f01056be:	01 d0                	add    %edx,%eax
f01056c0:	c1 e0 02             	shl    $0x2,%eax
f01056c3:	01 c8                	add    %ecx,%eax
f01056c5:	05 84 00 00 00       	add    $0x84,%eax
f01056ca:	8b 10                	mov    (%eax),%edx
f01056cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01056cf:	89 90 40 ef 00 00    	mov    %edx,0xef40(%eax)
f01056d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01056d8:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01056de:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01056e1:	89 d0                	mov    %edx,%eax
f01056e3:	c1 e0 02             	shl    $0x2,%eax
f01056e6:	01 d0                	add    %edx,%eax
f01056e8:	c1 e0 02             	shl    $0x2,%eax
f01056eb:	01 c8                	add    %ecx,%eax
f01056ed:	05 84 00 00 00       	add    $0x84,%eax
f01056f2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01056f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01056fb:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105701:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105704:	89 d0                	mov    %edx,%eax
f0105706:	c1 e0 02             	shl    $0x2,%eax
f0105709:	01 d0                	add    %edx,%eax
f010570b:	c1 e0 02             	shl    $0x2,%eax
f010570e:	01 c8                	add    %ecx,%eax
f0105710:	05 88 00 00 00       	add    $0x88,%eax
f0105715:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010571b:	8b 45 08             	mov    0x8(%ebp),%eax
f010571e:	8b 80 4c ef 00 00    	mov    0xef4c(%eax),%eax
f0105724:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105727:	8b 45 08             	mov    0x8(%ebp),%eax
f010572a:	89 90 4c ef 00 00    	mov    %edx,0xef4c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f0105730:	8b 45 08             	mov    0x8(%ebp),%eax
f0105733:	8b 90 5c ef 00 00    	mov    0xef5c(%eax),%edx
f0105739:	8b 45 08             	mov    0x8(%ebp),%eax
f010573c:	8b 80 70 ef 00 00    	mov    0xef70(%eax),%eax
f0105742:	48                   	dec    %eax
f0105743:	39 c2                	cmp    %eax,%edx
f0105745:	0f 83 f9 00 00 00    	jae    f0105844 <program_segment_alloc_map_copy_workingset+0x3df>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010574b:	8b 45 08             	mov    0x8(%ebp),%eax
f010574e:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105754:	8b 45 08             	mov    0x8(%ebp),%eax
f0105757:	8b 88 50 ef 00 00    	mov    0xef50(%eax),%ecx
f010575d:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0105760:	89 d0                	mov    %edx,%eax
f0105762:	c1 e0 02             	shl    $0x2,%eax
f0105765:	01 d0                	add    %edx,%eax
f0105767:	c1 e0 02             	shl    $0x2,%eax
f010576a:	01 d8                	add    %ebx,%eax
f010576c:	05 84 00 00 00       	add    $0x84,%eax
f0105771:	89 08                	mov    %ecx,(%eax)
f0105773:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105776:	89 d0                	mov    %edx,%eax
f0105778:	c1 e0 02             	shl    $0x2,%eax
f010577b:	01 d0                	add    %edx,%eax
f010577d:	c1 e0 02             	shl    $0x2,%eax
f0105780:	01 c8                	add    %ecx,%eax
f0105782:	05 84 00 00 00       	add    $0x84,%eax
f0105787:	8b 00                	mov    (%eax),%eax
f0105789:	85 c0                	test   %eax,%eax
f010578b:	74 2c                	je     f01057b9 <program_segment_alloc_map_copy_workingset+0x354>
f010578d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105790:	8b 90 50 ef 00 00    	mov    0xef50(%eax),%edx
f0105796:	8b 45 08             	mov    0x8(%ebp),%eax
f0105799:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f010579f:	89 c8                	mov    %ecx,%eax
f01057a1:	c1 e0 02             	shl    $0x2,%eax
f01057a4:	01 c8                	add    %ecx,%eax
f01057a6:	c1 e0 02             	shl    $0x2,%eax
f01057a9:	8d 48 70             	lea    0x70(%eax),%ecx
f01057ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01057af:	01 c8                	add    %ecx,%eax
f01057b1:	83 c0 08             	add    $0x8,%eax
f01057b4:	89 42 10             	mov    %eax,0x10(%edx)
f01057b7:	eb 27                	jmp    f01057e0 <program_segment_alloc_map_copy_workingset+0x37b>
f01057b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01057bc:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01057c2:	89 d0                	mov    %edx,%eax
f01057c4:	c1 e0 02             	shl    $0x2,%eax
f01057c7:	01 d0                	add    %edx,%eax
f01057c9:	c1 e0 02             	shl    $0x2,%eax
f01057cc:	8d 50 70             	lea    0x70(%eax),%edx
f01057cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01057d2:	01 d0                	add    %edx,%eax
f01057d4:	8d 50 08             	lea    0x8(%eax),%edx
f01057d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01057da:	89 90 54 ef 00 00    	mov    %edx,0xef54(%eax)
f01057e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01057e3:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01057e9:	89 d0                	mov    %edx,%eax
f01057eb:	c1 e0 02             	shl    $0x2,%eax
f01057ee:	01 d0                	add    %edx,%eax
f01057f0:	c1 e0 02             	shl    $0x2,%eax
f01057f3:	8d 50 70             	lea    0x70(%eax),%edx
f01057f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01057f9:	01 d0                	add    %edx,%eax
f01057fb:	8d 50 08             	lea    0x8(%eax),%edx
f01057fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0105801:	89 90 50 ef 00 00    	mov    %edx,0xef50(%eax)
f0105807:	8b 45 08             	mov    0x8(%ebp),%eax
f010580a:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105810:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0105813:	89 d0                	mov    %edx,%eax
f0105815:	c1 e0 02             	shl    $0x2,%eax
f0105818:	01 d0                	add    %edx,%eax
f010581a:	c1 e0 02             	shl    $0x2,%eax
f010581d:	01 c8                	add    %ecx,%eax
f010581f:	05 88 00 00 00       	add    $0x88,%eax
f0105824:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010582a:	8b 45 08             	mov    0x8(%ebp),%eax
f010582d:	8b 80 5c ef 00 00    	mov    0xef5c(%eax),%eax
f0105833:	8d 50 01             	lea    0x1(%eax),%edx
f0105836:	8b 45 08             	mov    0x8(%ebp),%eax
f0105839:	89 90 5c ef 00 00    	mov    %edx,0xef5c(%eax)
f010583f:	e9 f4 00 00 00       	jmp    f0105938 <program_segment_alloc_map_copy_workingset+0x4d3>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0105844:	8b 45 08             	mov    0x8(%ebp),%eax
f0105847:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f010584d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105850:	8b 88 60 ef 00 00    	mov    0xef60(%eax),%ecx
f0105856:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0105859:	89 d0                	mov    %edx,%eax
f010585b:	c1 e0 02             	shl    $0x2,%eax
f010585e:	01 d0                	add    %edx,%eax
f0105860:	c1 e0 02             	shl    $0x2,%eax
f0105863:	01 d8                	add    %ebx,%eax
f0105865:	05 84 00 00 00       	add    $0x84,%eax
f010586a:	89 08                	mov    %ecx,(%eax)
f010586c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010586f:	89 d0                	mov    %edx,%eax
f0105871:	c1 e0 02             	shl    $0x2,%eax
f0105874:	01 d0                	add    %edx,%eax
f0105876:	c1 e0 02             	shl    $0x2,%eax
f0105879:	01 c8                	add    %ecx,%eax
f010587b:	05 84 00 00 00       	add    $0x84,%eax
f0105880:	8b 00                	mov    (%eax),%eax
f0105882:	85 c0                	test   %eax,%eax
f0105884:	74 2c                	je     f01058b2 <program_segment_alloc_map_copy_workingset+0x44d>
f0105886:	8b 45 08             	mov    0x8(%ebp),%eax
f0105889:	8b 90 60 ef 00 00    	mov    0xef60(%eax),%edx
f010588f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105892:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0105898:	89 c8                	mov    %ecx,%eax
f010589a:	c1 e0 02             	shl    $0x2,%eax
f010589d:	01 c8                	add    %ecx,%eax
f010589f:	c1 e0 02             	shl    $0x2,%eax
f01058a2:	8d 48 70             	lea    0x70(%eax),%ecx
f01058a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01058a8:	01 c8                	add    %ecx,%eax
f01058aa:	83 c0 08             	add    $0x8,%eax
f01058ad:	89 42 10             	mov    %eax,0x10(%edx)
f01058b0:	eb 27                	jmp    f01058d9 <program_segment_alloc_map_copy_workingset+0x474>
f01058b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01058b5:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01058bb:	89 d0                	mov    %edx,%eax
f01058bd:	c1 e0 02             	shl    $0x2,%eax
f01058c0:	01 d0                	add    %edx,%eax
f01058c2:	c1 e0 02             	shl    $0x2,%eax
f01058c5:	8d 50 70             	lea    0x70(%eax),%edx
f01058c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01058cb:	01 d0                	add    %edx,%eax
f01058cd:	8d 50 08             	lea    0x8(%eax),%edx
f01058d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01058d3:	89 90 64 ef 00 00    	mov    %edx,0xef64(%eax)
f01058d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01058dc:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01058e2:	89 d0                	mov    %edx,%eax
f01058e4:	c1 e0 02             	shl    $0x2,%eax
f01058e7:	01 d0                	add    %edx,%eax
f01058e9:	c1 e0 02             	shl    $0x2,%eax
f01058ec:	8d 50 70             	lea    0x70(%eax),%edx
f01058ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01058f2:	01 d0                	add    %edx,%eax
f01058f4:	8d 50 08             	lea    0x8(%eax),%edx
f01058f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01058fa:	89 90 60 ef 00 00    	mov    %edx,0xef60(%eax)
f0105900:	8b 45 08             	mov    0x8(%ebp),%eax
f0105903:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0105909:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010590c:	89 d0                	mov    %edx,%eax
f010590e:	c1 e0 02             	shl    $0x2,%eax
f0105911:	01 d0                	add    %edx,%eax
f0105913:	c1 e0 02             	shl    $0x2,%eax
f0105916:	01 c8                	add    %ecx,%eax
f0105918:	05 88 00 00 00       	add    $0x88,%eax
f010591d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0105923:	8b 45 08             	mov    0x8(%ebp),%eax
f0105926:	8b 80 6c ef 00 00    	mov    0xef6c(%eax),%eax
f010592c:	8d 50 01             	lea    0x1(%eax),%edx
f010592f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105932:	89 90 6c ef 00 00    	mov    %edx,0xef6c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0105938:	8b 45 08             	mov    0x8(%ebp),%eax
f010593b:	8b 80 c0 ee 00 00    	mov    0xeec0(%eax),%eax
f0105941:	8d 50 01             	lea    0x1(%eax),%edx
f0105944:	8b 45 08             	mov    0x8(%ebp),%eax
f0105947:	89 90 c0 ee 00 00    	mov    %edx,0xeec0(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010594d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105950:	8b 80 c0 ee 00 00    	mov    0xeec0(%eax),%eax
f0105956:	8b 55 08             	mov    0x8(%ebp),%edx
f0105959:	8b 4a 74             	mov    0x74(%edx),%ecx
f010595c:	ba 00 00 00 00       	mov    $0x0,%edx
f0105961:	f7 f1                	div    %ecx
f0105963:	8b 45 08             	mov    0x8(%ebp),%eax
f0105966:	89 90 c0 ee 00 00    	mov    %edx,0xeec0(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010596c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010596f:	c1 e8 16             	shr    $0x16,%eax
f0105972:	89 c2                	mov    %eax,%edx
f0105974:	8b 45 18             	mov    0x18(%ebp),%eax
f0105977:	8b 00                	mov    (%eax),%eax
f0105979:	39 c2                	cmp    %eax,%edx
f010597b:	74 4e                	je     f01059cb <program_segment_alloc_map_copy_workingset+0x566>
		{
			addTableToTableWorkingSet(e, ROUNDDOWN(iVA, PAGE_SIZE*1024));
f010597d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105980:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105983:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105986:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010598b:	83 ec 08             	sub    $0x8,%esp
f010598e:	50                   	push   %eax
f010598f:	ff 75 08             	pushl  0x8(%ebp)
f0105992:	e8 2b f0 ff ff       	call   f01049c2 <addTableToTableWorkingSet>
f0105997:	83 c4 10             	add    $0x10,%esp
			if (e->table_last_WS_index == 0)
f010599a:	8b 45 08             	mov    0x8(%ebp),%eax
f010599d:	8b 80 c4 ee 00 00    	mov    0xeec4(%eax),%eax
f01059a3:	85 c0                	test   %eax,%eax
f01059a5:	75 17                	jne    f01059be <program_segment_alloc_map_copy_workingset+0x559>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f01059a7:	83 ec 04             	sub    $0x4,%esp
f01059aa:	68 68 d3 11 f0       	push   $0xf011d368
f01059af:	68 9c 01 00 00       	push   $0x19c
f01059b4:	68 4f d3 11 f0       	push   $0xf011d34f
f01059b9:	e8 d5 a7 ff ff       	call   f0100193 <_panic>
			(*lastTableNumber) = PDX(iVA);
f01059be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059c1:	c1 e8 16             	shr    $0x16,%eax
f01059c4:	89 c2                	mov    %eax,%edx
f01059c6:	8b 45 18             	mov    0x18(%ebp),%eax
f01059c9:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f01059cb:	8b 45 10             	mov    0x10(%ebp),%eax
f01059ce:	8b 00                	mov    (%eax),%eax
f01059d0:	8d 50 01             	lea    0x1(%eax),%edx
f01059d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01059d6:	89 10                	mov    %edx,(%eax)
			remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
		else
			remaining_ws_pages = remaining_ws_pages < 7 ? remaining_ws_pages:7 ;
	}
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f01059d8:	ff 45 f0             	incl   -0x10(%ebp)
f01059db:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01059e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059e5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01059e8:	73 0c                	jae    f01059f6 <program_segment_alloc_map_copy_workingset+0x591>
f01059ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01059ed:	3b 45 14             	cmp    0x14(%ebp),%eax
f01059f0:	0f 82 2f fb ff ff    	jb     f0105525 <program_segment_alloc_map_copy_workingset+0xc0>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f01059f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01059f9:	8b 00                	mov    (%eax),%eax
f01059fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f01059fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105a01:	8b 40 0c             	mov    0xc(%eax),%eax
f0105a04:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0105a07:	eb 10                	jmp    f0105a19 <program_segment_alloc_map_copy_workingset+0x5b4>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f0105a09:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a0c:	8a 10                	mov    (%eax),%dl
f0105a0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a11:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f0105a13:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f0105a16:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0105a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a1c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0105a1f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0105a22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105a27:	89 c2                	mov    %eax,%edx
f0105a29:	8b 45 10             	mov    0x10(%ebp),%eax
f0105a2c:	8b 00                	mov    (%eax),%eax
f0105a2e:	c1 e0 0c             	shl    $0xc,%eax
f0105a31:	01 c2                	add    %eax,%edx
f0105a33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a36:	39 c2                	cmp    %eax,%edx
f0105a38:	76 1d                	jbe    f0105a57 <program_segment_alloc_map_copy_workingset+0x5f2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f0105a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105a3d:	8b 50 04             	mov    0x4(%eax),%edx
f0105a40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a43:	01 c2                	add    %eax,%edx
f0105a45:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0105a48:	39 c2                	cmp    %eax,%edx
f0105a4a:	77 bd                	ja     f0105a09 <program_segment_alloc_map_copy_workingset+0x5a4>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0105a4c:	eb 09                	jmp    f0105a57 <program_segment_alloc_map_copy_workingset+0x5f2>
	{
		*dst_ptr = 0;
f0105a4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a51:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f0105a54:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0105a57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a5a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0105a5d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105a60:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105a65:	89 c2                	mov    %eax,%edx
f0105a67:	8b 45 10             	mov    0x10(%ebp),%eax
f0105a6a:	8b 00                	mov    (%eax),%eax
f0105a6c:	c1 e0 0c             	shl    $0xc,%eax
f0105a6f:	01 c2                	add    %eax,%edx
f0105a71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105a74:	39 c2                	cmp    %eax,%edx
f0105a76:	77 d6                	ja     f0105a4e <program_segment_alloc_map_copy_workingset+0x5e9>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, (void *)iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0105a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105a7d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105a80:	c9                   	leave  
f0105a81:	c3                   	ret    

f0105a82 <env_create>:

// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0105a82:	55                   	push   %ebp
f0105a83:	89 e5                	mov    %esp,%ebp
f0105a85:	57                   	push   %edi
f0105a86:	56                   	push   %esi
f0105a87:	53                   	push   %ebx
f0105a88:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0105a8e:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0105a95:	83 ec 0c             	sub    $0xc,%esp
f0105a98:	ff 75 08             	pushl  0x8(%ebp)
f0105a9b:	e8 25 13 00 00       	call   f0106dc5 <get_user_program_info>
f0105aa0:	83 c4 10             	add    $0x10,%esp
f0105aa3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0105aa6:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0105aaa:	75 0a                	jne    f0105ab6 <env_create+0x34>
f0105aac:	b8 00 00 00 00       	mov    $0x0,%eax
f0105ab1:	e9 86 0c 00 00       	jmp    f010673c <env_create+0xcba>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0105ab6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105ab9:	8b 40 08             	mov    0x8(%eax),%eax
f0105abc:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0105abf:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0105ac6:	00 00 00 
	if(allocate_environment(&e) < 0)
f0105ac9:	83 ec 0c             	sub    $0xc,%esp
f0105acc:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0105ad2:	50                   	push   %eax
f0105ad3:	e8 78 f4 ff ff       	call   f0104f50 <allocate_environment>
f0105ad8:	83 c4 10             	add    $0x10,%esp
f0105adb:	85 c0                	test   %eax,%eax
f0105add:	79 0a                	jns    f0105ae9 <env_create+0x67>
	{
		return 0;
f0105adf:	b8 00 00 00 00       	mov    $0x0,%eax
f0105ae4:	e9 53 0c 00 00       	jmp    f010673c <env_create+0xcba>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0105ae9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105aec:	8b 00                	mov    (%eax),%eax
f0105aee:	83 ec 0c             	sub    $0xc,%esp
f0105af1:	50                   	push   %eax
f0105af2:	e8 8b 3d 01 00       	call   f0119882 <strlen>
f0105af7:	83 c4 10             	add    $0x10,%esp
f0105afa:	83 f8 3f             	cmp    $0x3f,%eax
f0105afd:	7f 20                	jg     f0105b1f <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0105aff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105b02:	8b 00                	mov    (%eax),%eax
f0105b04:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0105b0a:	81 c2 f0 ee 00 00    	add    $0xeef0,%edx
f0105b10:	83 ec 08             	sub    $0x8,%esp
f0105b13:	50                   	push   %eax
f0105b14:	52                   	push   %edx
f0105b15:	e8 b7 3d 01 00       	call   f01198d1 <strcpy>
f0105b1a:	83 c4 10             	add    $0x10,%esp
f0105b1d:	eb 20                	jmp    f0105b3f <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0105b1f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105b22:	8b 00                	mov    (%eax),%eax
f0105b24:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0105b2a:	81 c2 f0 ee 00 00    	add    $0xeef0,%edx
f0105b30:	83 ec 04             	sub    $0x4,%esp
f0105b33:	6a 3f                	push   $0x3f
f0105b35:	50                   	push   %eax
f0105b36:	52                   	push   %edx
f0105b37:	e8 c3 3d 01 00       	call   f01198ff <strncpy>
f0105b3c:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct Frame_Info *p = NULL;
f0105b3f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0105b46:	00 00 00 

		allocate_frame(&p) ;
f0105b49:	83 ec 0c             	sub    $0xc,%esp
f0105b4c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0105b52:	50                   	push   %eax
f0105b53:	e8 97 e1 ff ff       	call   f0103cef <allocate_frame>
f0105b58:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0105b5b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0105b61:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0105b67:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0105b6d:	83 ec 0c             	sub    $0xc,%esp
f0105b70:	50                   	push   %eax
f0105b71:	e8 c7 f3 ff ff       	call   f0104f3d <to_physical_address>
f0105b76:	83 c4 10             	add    $0x10,%esp
f0105b79:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0105b7c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0105b7f:	c1 e8 0c             	shr    $0xc,%eax
f0105b82:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0105b85:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f0105b8a:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0105b8d:	72 17                	jb     f0105ba6 <env_create+0x124>
f0105b8f:	ff 75 b0             	pushl  -0x50(%ebp)
f0105b92:	68 0c d4 11 f0       	push   $0xf011d40c
f0105b97:	68 fe 01 00 00       	push   $0x1fe
f0105b9c:	68 4f d3 11 f0       	push   $0xf011d34f
f0105ba1:	e8 ed a5 ff ff       	call   f0100193 <_panic>
f0105ba6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0105ba9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105bae:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0105bb1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0105bb7:	83 ec 0c             	sub    $0xc,%esp
f0105bba:	50                   	push   %eax
f0105bbb:	e8 7d f3 ff ff       	call   f0104f3d <to_physical_address>
f0105bc0:	83 c4 10             	add    $0x10,%esp
f0105bc3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0105bc6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105bcc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105bcf:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRULists())
f0105bd2:	e8 7c 2f 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f0105bd7:	85 c0                	test   %eax,%eax
f0105bd9:	74 21                	je     f0105bfc <env_create+0x17a>
	{
		e->SecondListSize = LRU_second_list_size;
f0105bdb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105be1:	8b 55 10             	mov    0x10(%ebp),%edx
f0105be4:	89 90 74 ef 00 00    	mov    %edx,0xef74(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0105bea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105bf0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105bf3:	2b 55 10             	sub    0x10(%ebp),%edx
f0105bf6:	89 90 70 ef 00 00    	mov    %edx,0xef70(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0105bfc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0105c00:	75 12                	jne    f0105c14 <env_create+0x192>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0105c02:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105c08:	c7 80 34 ef 00 00 0a 	movl   $0xa,0xef34(%eax)
f0105c0f:	00 00 00 
f0105c12:	eb 0f                	jmp    f0105c23 <env_create+0x1a1>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0105c14:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105c1a:	8b 55 14             	mov    0x14(%ebp),%edx
f0105c1d:	89 90 34 ef 00 00    	mov    %edx,0xef34(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0105c23:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105c29:	83 ec 04             	sub    $0x4,%esp
f0105c2c:	ff 75 a4             	pushl  -0x5c(%ebp)
f0105c2f:	ff 75 a8             	pushl  -0x58(%ebp)
f0105c32:	50                   	push   %eax
f0105c33:	e8 c4 f4 ff ff       	call   f01050fc <initialize_environment>
f0105c38:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0105c3b:	0f 20 d8             	mov    %cr3,%eax
f0105c3e:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0105c41:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0105c44:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0105c47:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105c4d:	8b 40 60             	mov    0x60(%eax),%eax
f0105c50:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105c56:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0105c5c:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0105c5f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0105c66:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0105c6d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105c73:	8b 40 74             	mov    0x74(%eax),%eax
f0105c76:	48                   	dec    %eax
f0105c77:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0105c7a:	c7 85 3c ff ff ff ff 	movl   $0xffffffff,-0xc4(%ebp)
f0105c81:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105c84:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0105c8a:	83 ec 08             	sub    $0x8,%esp
f0105c8d:	ff 75 b8             	pushl  -0x48(%ebp)
f0105c90:	50                   	push   %eax
f0105c91:	e8 16 10 00 00       	call   f0106cac <PROGRAM_SEGMENT_FIRST>
f0105c96:	83 c4 0c             	add    $0xc,%esp
f0105c99:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0105c9f:	8d 95 e8 fe ff ff    	lea    -0x118(%ebp),%edx
f0105ca5:	b9 05 00 00 00       	mov    $0x5,%ecx
f0105caa:	89 c7                	mov    %eax,%edi
f0105cac:	89 d6                	mov    %edx,%esi
f0105cae:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0105cb0:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0105cb6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105cb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105cbc:	8b 40 10             	mov    0x10(%eax),%eax
f0105cbf:	83 f8 ff             	cmp    $0xffffffff,%eax
f0105cc2:	75 07                	jne    f0105ccb <env_create+0x249>
f0105cc4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0105ccb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105cce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105cd1:	e9 24 03 00 00       	jmp    f0105ffa <env_create+0x578>
	{
		segment_counter++;
f0105cd6:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0105cd9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0105ce0:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0105ce3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105ce9:	83 ec 0c             	sub    $0xc,%esp
f0105cec:	8d 95 3c ff ff ff    	lea    -0xc4(%ebp),%edx
f0105cf2:	52                   	push   %edx
f0105cf3:	ff 75 dc             	pushl  -0x24(%ebp)
f0105cf6:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0105cfc:	52                   	push   %edx
f0105cfd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105d00:	50                   	push   %eax
f0105d01:	e8 5f f7 ff ff       	call   f0105465 <program_segment_alloc_map_copy_workingset>
f0105d06:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0105d09:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0105d0f:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0105d12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d15:	8b 00                	mov    (%eax),%eax
f0105d17:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0105d1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105d1d:	8b 40 0c             	mov    0xc(%eax),%eax
f0105d20:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0105d23:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105d26:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0105d29:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105d2c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105d31:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0105d34:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0105d3b:	8b 55 90             	mov    -0x70(%ebp),%edx
f0105d3e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0105d41:	01 d0                	add    %edx,%eax
f0105d43:	48                   	dec    %eax
f0105d44:	89 45 80             	mov    %eax,-0x80(%ebp)
f0105d47:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105d4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0105d4f:	f7 75 84             	divl   -0x7c(%ebp)
f0105d52:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105d55:	29 d0                	sub    %edx,%eax
f0105d57:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0105d5d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105d60:	2b 45 88             	sub    -0x78(%ebp),%eax
f0105d63:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0105d69:	a1 54 11 3b f0       	mov    0xf03b1154,%eax
f0105d6e:	83 ec 04             	sub    $0x4,%esp
f0105d71:	68 00 10 00 00       	push   $0x1000
f0105d76:	6a 00                	push   $0x0
f0105d78:	50                   	push   %eax
f0105d79:	e8 f2 3c 01 00       	call   f0119a70 <memset>
f0105d7e:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0105d81:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0105d84:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0105d87:	8b 15 54 11 3b f0    	mov    0xf03b1154,%edx
f0105d8d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0105d93:	01 d0                	add    %edx,%eax
f0105d95:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105d98:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105d9b:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105d9e:	eb 13                	jmp    f0105db3 <env_create+0x331>
		{
			*dst_ptr = *src_ptr ;
f0105da0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105da3:	8a 10                	mov    (%eax),%dl
f0105da5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105da8:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105daa:	ff 45 cc             	incl   -0x34(%ebp)
f0105dad:	ff 45 d4             	incl   -0x2c(%ebp)
f0105db0:	ff 45 d0             	incl   -0x30(%ebp)
f0105db3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105db6:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0105dbc:	72 e2                	jb     f0105da0 <env_create+0x31e>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105dbe:	8b 15 54 11 3b f0    	mov    0xf03b1154,%edx
f0105dc4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105dca:	83 ec 04             	sub    $0x4,%esp
f0105dcd:	52                   	push   %edx
f0105dce:	ff 75 88             	pushl  -0x78(%ebp)
f0105dd1:	50                   	push   %eax
f0105dd2:	e8 26 62 00 00       	call   f010bffd <pf_add_env_page>
f0105dd7:	83 c4 10             	add    $0x10,%esp
f0105dda:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105ddd:	75 17                	jne    f0105df6 <env_create+0x374>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105ddf:	83 ec 04             	sub    $0x4,%esp
f0105de2:	68 3c d4 11 f0       	push   $0xf011d43c
f0105de7:	68 52 02 00 00       	push   $0x252
f0105dec:	68 4f d3 11 f0       	push   $0xf011d34f
f0105df1:	e8 9d a3 ff ff       	call   f0100193 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0105df6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105df9:	8b 50 04             	mov    0x4(%eax),%edx
f0105dfc:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105dff:	01 d0                	add    %edx,%eax
f0105e01:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0105e07:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0105e0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105e12:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0105e18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e1b:	8b 50 04             	mov    0x4(%eax),%edx
f0105e1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105e21:	01 d0                	add    %edx,%eax
f0105e23:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105e29:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0105e2f:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105e32:	eb 43                	jmp    f0105e77 <env_create+0x3f5>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0105e34:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105e37:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105e3d:	83 ec 04             	sub    $0x4,%esp
f0105e40:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105e43:	52                   	push   %edx
f0105e44:	50                   	push   %eax
f0105e45:	e8 b3 61 00 00       	call   f010bffd <pf_add_env_page>
f0105e4a:	83 c4 10             	add    $0x10,%esp
f0105e4d:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105e50:	75 17                	jne    f0105e69 <env_create+0x3e7>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105e52:	83 ec 04             	sub    $0x4,%esp
f0105e55:	68 3c d4 11 f0       	push   $0xf011d43c
f0105e5a:	68 5f 02 00 00       	push   $0x25f
f0105e5f:	68 4f d3 11 f0       	push   $0xf011d34f
f0105e64:	e8 2a a3 ff ff       	call   f0100193 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105e69:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105e70:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0105e77:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105e7a:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0105e80:	72 b2                	jb     f0105e34 <env_create+0x3b2>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0105e82:	a1 54 11 3b f0       	mov    0xf03b1154,%eax
f0105e87:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0105e8a:	83 ec 04             	sub    $0x4,%esp
f0105e8d:	68 00 10 00 00       	push   $0x1000
f0105e92:	6a 00                	push   $0x0
f0105e94:	ff 75 d0             	pushl  -0x30(%ebp)
f0105e97:	e8 d4 3b 01 00       	call   f0119a70 <memset>
f0105e9c:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105e9f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0105ea5:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105ea8:	eb 13                	jmp    f0105ebd <env_create+0x43b>
		{
			*dst_ptr = *src_ptr;
f0105eaa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105ead:	8a 10                	mov    (%eax),%dl
f0105eaf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105eb2:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0105eb4:	ff 45 cc             	incl   -0x34(%ebp)
f0105eb7:	ff 45 d4             	incl   -0x2c(%ebp)
f0105eba:	ff 45 d0             	incl   -0x30(%ebp)
f0105ebd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105ec0:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0105ec6:	72 e2                	jb     f0105eaa <env_create+0x428>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105ec8:	8b 15 54 11 3b f0    	mov    0xf03b1154,%edx
f0105ece:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105ed4:	83 ec 04             	sub    $0x4,%esp
f0105ed7:	52                   	push   %edx
f0105ed8:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0105ede:	50                   	push   %eax
f0105edf:	e8 19 61 00 00       	call   f010bffd <pf_add_env_page>
f0105ee4:	83 c4 10             	add    $0x10,%esp
f0105ee7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105eea:	75 17                	jne    f0105f03 <env_create+0x481>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105eec:	83 ec 04             	sub    $0x4,%esp
f0105eef:	68 3c d4 11 f0       	push   $0xf011d43c
f0105ef4:	68 6e 02 00 00       	push   $0x26e
f0105ef9:	68 4f d3 11 f0       	push   $0xf011d34f
f0105efe:	e8 90 a2 ff ff       	call   f0100193 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0105f03:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0105f0a:	10 00 00 
f0105f0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105f10:	8b 50 04             	mov    0x4(%eax),%edx
f0105f13:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105f16:	01 c2                	add    %eax,%edx
f0105f18:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0105f1e:	01 d0                	add    %edx,%eax
f0105f20:	48                   	dec    %eax
f0105f21:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0105f27:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105f2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0105f32:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0105f38:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0105f3e:	29 d0                	sub    %edx,%eax
f0105f40:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0105f43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105f46:	8b 50 08             	mov    0x8(%eax),%edx
f0105f49:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105f4c:	01 d0                	add    %edx,%eax
f0105f4e:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0105f51:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105f57:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0105f5e:	eb 41                	jmp    f0105fa1 <env_create+0x51f>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0105f60:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0105f66:	83 ec 04             	sub    $0x4,%esp
f0105f69:	6a 01                	push   $0x1
f0105f6b:	ff 75 c8             	pushl  -0x38(%ebp)
f0105f6e:	50                   	push   %eax
f0105f6f:	e8 57 5f 00 00       	call   f010becb <pf_add_empty_env_page>
f0105f74:	83 c4 10             	add    $0x10,%esp
f0105f77:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105f7a:	75 17                	jne    f0105f93 <env_create+0x511>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105f7c:	83 ec 04             	sub    $0x4,%esp
f0105f7f:	68 3c d4 11 f0       	push   $0xf011d43c
f0105f84:	68 7b 02 00 00       	push   $0x27b
f0105f89:	68 4f d3 11 f0       	push   $0xf011d34f
f0105f8e:	e8 00 a2 ff ff       	call   f0100193 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0105f93:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0105f9a:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0105fa1:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0105fa8:	10 00 00 
f0105fab:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0105fb1:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0105fb7:	01 d0                	add    %edx,%eax
f0105fb9:	48                   	dec    %eax
f0105fba:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0105fc0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0105fc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0105fcb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0105fd1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0105fd7:	29 d0                	sub    %edx,%eax
f0105fd9:	89 c2                	mov    %eax,%edx
f0105fdb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105fde:	39 c2                	cmp    %eax,%edx
f0105fe0:	0f 87 7a ff ff ff    	ja     f0105f60 <env_create+0x4de>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105fe6:	83 ec 08             	sub    $0x8,%esp
f0105fe9:	ff 75 b8             	pushl  -0x48(%ebp)
f0105fec:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105fef:	e8 ad 0b 00 00       	call   f0106ba1 <PROGRAM_SEGMENT_NEXT>
f0105ff4:	83 c4 10             	add    $0x10,%esp
f0105ff7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105ffa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0105ffe:	0f 85 d2 fc ff ff    	jne    f0105cd6 <env_create+0x254>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0106004:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010600b:	e9 9f 00 00 00       	jmp    f01060af <env_create+0x62d>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0106010:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106016:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106019:	89 d0                	mov    %edx,%eax
f010601b:	c1 e0 02             	shl    $0x2,%eax
f010601e:	01 d0                	add    %edx,%eax
f0106020:	c1 e0 02             	shl    $0x2,%eax
f0106023:	01 c8                	add    %ecx,%eax
f0106025:	83 c0 7c             	add    $0x7c,%eax
f0106028:	8a 00                	mov    (%eax),%al
f010602a:	84 c0                	test   %al,%al
f010602c:	75 7e                	jne    f01060ac <env_create+0x62a>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010602e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106034:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106037:	89 d0                	mov    %edx,%eax
f0106039:	c1 e0 02             	shl    $0x2,%eax
f010603c:	01 d0                	add    %edx,%eax
f010603e:	c1 e0 02             	shl    $0x2,%eax
f0106041:	01 c8                	add    %ecx,%eax
f0106043:	83 c0 78             	add    $0x78,%eax
f0106046:	8b 00                	mov    (%eax),%eax
f0106048:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, (void *)virtual_address, &ptr_page_table);
f010604e:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0106054:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010605a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010605d:	83 ec 04             	sub    $0x4,%esp
f0106060:	8d 8d 1c ff ff ff    	lea    -0xe4(%ebp),%ecx
f0106066:	51                   	push   %ecx
f0106067:	52                   	push   %edx
f0106068:	50                   	push   %eax
f0106069:	e8 00 de ff ff       	call   f0103e6e <get_page_table>
f010606e:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0106071:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0106077:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010607d:	c1 ea 0c             	shr    $0xc,%edx
f0106080:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106086:	c1 e2 02             	shl    $0x2,%edx
f0106089:	01 d0                	add    %edx,%eax
f010608b:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0106091:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f0106097:	c1 e9 0c             	shr    $0xc,%ecx
f010609a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01060a0:	c1 e1 02             	shl    $0x2,%ecx
f01060a3:	01 ca                	add    %ecx,%edx
f01060a5:	8b 12                	mov    (%edx),%edx
f01060a7:	83 e2 bf             	and    $0xffffffbf,%edx
f01060aa:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01060ac:	ff 45 c4             	incl   -0x3c(%ebp)
f01060af:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01060b5:	8b 50 74             	mov    0x74(%eax),%edx
f01060b8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01060bb:	39 c2                	cmp    %eax,%edx
f01060bd:	0f 87 4d ff ff ff    	ja     f0106010 <env_create+0x58e>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01060c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01060c6:	8b 50 08             	mov    0x8(%eax),%edx
f01060c9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01060cf:	83 ec 08             	sub    $0x8,%esp
f01060d2:	52                   	push   %edx
f01060d3:	50                   	push   %eax
f01060d4:	e8 e8 0d 00 00       	call   f0106ec1 <set_environment_entry_point>
f01060d9:	83 c4 10             	add    $0x10,%esp
	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	//2020
	e->initNumStackPages = 1 ;
f01060dc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01060e2:	c7 80 ec ee 00 00 01 	movl   $0x1,0xeeec(%eax)
f01060e9:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01060ec:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01060f3:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01060f6:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01060fd:	e9 49 05 00 00       	jmp    f010664b <env_create+0xbc9>
	{
		struct Frame_Info *pp = NULL;
f0106102:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f0106109:	00 00 00 
		allocate_frame(&pp);
f010610c:	83 ec 0c             	sub    $0xc,%esp
f010610f:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f0106115:	50                   	push   %eax
f0106116:	e8 d4 db ff ff       	call   f0103cef <allocate_frame>
f010611b:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, (void*)stackVa, PERM_USER | PERM_WRITEABLE);
f010611e:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f0106121:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f0106127:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010612d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106130:	6a 06                	push   $0x6
f0106132:	51                   	push   %ecx
f0106133:	52                   	push   %edx
f0106134:	50                   	push   %eax
f0106135:	e8 c1 e0 ff ff       	call   f01041fb <loadtime_map_frame>
f010613a:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f010613d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0106140:	83 ec 04             	sub    $0x4,%esp
f0106143:	68 00 10 00 00       	push   $0x1000
f0106148:	6a 00                	push   $0x0
f010614a:	50                   	push   %eax
f010614b:	e8 20 39 01 00       	call   f0119a70 <memset>
f0106150:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			//env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
			e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = ROUNDDOWN(stackVa,PAGE_SIZE);
f0106153:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0106159:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010615f:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0106165:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0106168:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010616e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0106174:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106179:	89 c1                	mov    %eax,%ecx
f010617b:	89 d0                	mov    %edx,%eax
f010617d:	c1 e0 02             	shl    $0x2,%eax
f0106180:	01 d0                	add    %edx,%eax
f0106182:	c1 e0 02             	shl    $0x2,%eax
f0106185:	01 d8                	add    %ebx,%eax
f0106187:	83 c0 78             	add    $0x78,%eax
f010618a:	89 08                	mov    %ecx,(%eax)
			e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010618c:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106192:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106198:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f010619e:	89 d0                	mov    %edx,%eax
f01061a0:	c1 e0 02             	shl    $0x2,%eax
f01061a3:	01 d0                	add    %edx,%eax
f01061a5:	c1 e0 02             	shl    $0x2,%eax
f01061a8:	01 c8                	add    %ecx,%eax
f01061aa:	83 c0 7c             	add    $0x7c,%eax
f01061ad:	c6 00 00             	movb   $0x0,(%eax)
			env_page_ws_set_time_stamp(e, e->page_last_WS_index);
f01061b0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01061b6:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01061bc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01061c2:	83 ec 08             	sub    $0x8,%esp
f01061c5:	52                   	push   %edx
f01061c6:	50                   	push   %eax
f01061c7:	e8 c9 e4 ff ff       	call   f0104695 <env_page_ws_set_time_stamp>
f01061cc:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRULists())
f01061cf:	e8 7f 29 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f01061d4:	85 c0                	test   %eax,%eax
f01061d6:	0f 84 0e 04 00 00    	je     f01065ea <env_create+0xb68>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01061dc:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01061e2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01061e8:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01061ee:	89 d0                	mov    %edx,%eax
f01061f0:	c1 e0 02             	shl    $0x2,%eax
f01061f3:	01 d0                	add    %edx,%eax
f01061f5:	c1 e0 02             	shl    $0x2,%eax
f01061f8:	01 c8                	add    %ecx,%eax
f01061fa:	05 84 00 00 00       	add    $0x84,%eax
f01061ff:	8b 00                	mov    (%eax),%eax
f0106201:	85 c0                	test   %eax,%eax
f0106203:	74 4f                	je     f0106254 <env_create+0x7d2>
f0106205:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010620b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106211:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0106217:	89 d0                	mov    %edx,%eax
f0106219:	c1 e0 02             	shl    $0x2,%eax
f010621c:	01 d0                	add    %edx,%eax
f010621e:	c1 e0 02             	shl    $0x2,%eax
f0106221:	01 c8                	add    %ecx,%eax
f0106223:	05 84 00 00 00       	add    $0x84,%eax
f0106228:	8b 10                	mov    (%eax),%edx
f010622a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0106230:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106236:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f010623c:	89 c8                	mov    %ecx,%eax
f010623e:	c1 e0 02             	shl    $0x2,%eax
f0106241:	01 c8                	add    %ecx,%eax
f0106243:	c1 e0 02             	shl    $0x2,%eax
f0106246:	01 d8                	add    %ebx,%eax
f0106248:	05 88 00 00 00       	add    $0x88,%eax
f010624d:	8b 00                	mov    (%eax),%eax
f010624f:	89 42 10             	mov    %eax,0x10(%edx)
f0106252:	eb 31                	jmp    f0106285 <env_create+0x803>
f0106254:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010625a:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0106260:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106266:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f010626c:	89 c8                	mov    %ecx,%eax
f010626e:	c1 e0 02             	shl    $0x2,%eax
f0106271:	01 c8                	add    %ecx,%eax
f0106273:	c1 e0 02             	shl    $0x2,%eax
f0106276:	01 d8                	add    %ebx,%eax
f0106278:	05 88 00 00 00       	add    $0x88,%eax
f010627d:	8b 00                	mov    (%eax),%eax
f010627f:	89 82 44 ef 00 00    	mov    %eax,0xef44(%edx)
f0106285:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010628b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106291:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0106297:	89 d0                	mov    %edx,%eax
f0106299:	c1 e0 02             	shl    $0x2,%eax
f010629c:	01 d0                	add    %edx,%eax
f010629e:	c1 e0 02             	shl    $0x2,%eax
f01062a1:	01 c8                	add    %ecx,%eax
f01062a3:	05 88 00 00 00       	add    $0x88,%eax
f01062a8:	8b 00                	mov    (%eax),%eax
f01062aa:	85 c0                	test   %eax,%eax
f01062ac:	74 4f                	je     f01062fd <env_create+0x87b>
f01062ae:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01062b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01062ba:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01062c0:	89 d0                	mov    %edx,%eax
f01062c2:	c1 e0 02             	shl    $0x2,%eax
f01062c5:	01 d0                	add    %edx,%eax
f01062c7:	c1 e0 02             	shl    $0x2,%eax
f01062ca:	01 c8                	add    %ecx,%eax
f01062cc:	05 88 00 00 00       	add    $0x88,%eax
f01062d1:	8b 10                	mov    (%eax),%edx
f01062d3:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01062d9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01062df:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f01062e5:	89 c8                	mov    %ecx,%eax
f01062e7:	c1 e0 02             	shl    $0x2,%eax
f01062ea:	01 c8                	add    %ecx,%eax
f01062ec:	c1 e0 02             	shl    $0x2,%eax
f01062ef:	01 d8                	add    %ebx,%eax
f01062f1:	05 84 00 00 00       	add    $0x84,%eax
f01062f6:	8b 00                	mov    (%eax),%eax
f01062f8:	89 42 0c             	mov    %eax,0xc(%edx)
f01062fb:	eb 31                	jmp    f010632e <env_create+0x8ac>
f01062fd:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106303:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f0106309:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010630f:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0106315:	89 c8                	mov    %ecx,%eax
f0106317:	c1 e0 02             	shl    $0x2,%eax
f010631a:	01 c8                	add    %ecx,%eax
f010631c:	c1 e0 02             	shl    $0x2,%eax
f010631f:	01 d8                	add    %ebx,%eax
f0106321:	05 84 00 00 00       	add    $0x84,%eax
f0106326:	8b 00                	mov    (%eax),%eax
f0106328:	89 82 40 ef 00 00    	mov    %eax,0xef40(%edx)
f010632e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106334:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010633a:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0106340:	89 d0                	mov    %edx,%eax
f0106342:	c1 e0 02             	shl    $0x2,%eax
f0106345:	01 d0                	add    %edx,%eax
f0106347:	c1 e0 02             	shl    $0x2,%eax
f010634a:	01 c8                	add    %ecx,%eax
f010634c:	05 84 00 00 00       	add    $0x84,%eax
f0106351:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106357:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010635d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106363:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0106369:	89 d0                	mov    %edx,%eax
f010636b:	c1 e0 02             	shl    $0x2,%eax
f010636e:	01 d0                	add    %edx,%eax
f0106370:	c1 e0 02             	shl    $0x2,%eax
f0106373:	01 c8                	add    %ecx,%eax
f0106375:	05 88 00 00 00       	add    $0x88,%eax
f010637a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106380:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106386:	8b 90 4c ef 00 00    	mov    0xef4c(%eax),%edx
f010638c:	4a                   	dec    %edx
f010638d:	89 90 4c ef 00 00    	mov    %edx,0xef4c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0106393:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106399:	8b 90 5c ef 00 00    	mov    0xef5c(%eax),%edx
f010639f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01063a5:	8b 80 70 ef 00 00    	mov    0xef70(%eax),%eax
f01063ab:	39 c2                	cmp    %eax,%edx
f01063ad:	0f 83 1e 01 00 00    	jae    f01064d1 <env_create+0xa4f>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01063b3:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01063b9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01063bf:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01063c5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01063cb:	8b 98 50 ef 00 00    	mov    0xef50(%eax),%ebx
f01063d1:	89 d0                	mov    %edx,%eax
f01063d3:	c1 e0 02             	shl    $0x2,%eax
f01063d6:	01 d0                	add    %edx,%eax
f01063d8:	c1 e0 02             	shl    $0x2,%eax
f01063db:	01 c8                	add    %ecx,%eax
f01063dd:	05 84 00 00 00       	add    $0x84,%eax
f01063e2:	89 18                	mov    %ebx,(%eax)
f01063e4:	89 d0                	mov    %edx,%eax
f01063e6:	c1 e0 02             	shl    $0x2,%eax
f01063e9:	01 d0                	add    %edx,%eax
f01063eb:	c1 e0 02             	shl    $0x2,%eax
f01063ee:	01 c8                	add    %ecx,%eax
f01063f0:	05 84 00 00 00       	add    $0x84,%eax
f01063f5:	8b 00                	mov    (%eax),%eax
f01063f7:	85 c0                	test   %eax,%eax
f01063f9:	74 35                	je     f0106430 <env_create+0x9ae>
f01063fb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106401:	8b 90 50 ef 00 00    	mov    0xef50(%eax),%edx
f0106407:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010640d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106413:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0106419:	89 c8                	mov    %ecx,%eax
f010641b:	c1 e0 02             	shl    $0x2,%eax
f010641e:	01 c8                	add    %ecx,%eax
f0106420:	c1 e0 02             	shl    $0x2,%eax
f0106423:	83 c0 70             	add    $0x70,%eax
f0106426:	01 d8                	add    %ebx,%eax
f0106428:	83 c0 08             	add    $0x8,%eax
f010642b:	89 42 10             	mov    %eax,0x10(%edx)
f010642e:	eb 30                	jmp    f0106460 <env_create+0x9de>
f0106430:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106436:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010643c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106442:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0106448:	89 c8                	mov    %ecx,%eax
f010644a:	c1 e0 02             	shl    $0x2,%eax
f010644d:	01 c8                	add    %ecx,%eax
f010644f:	c1 e0 02             	shl    $0x2,%eax
f0106452:	83 c0 70             	add    $0x70,%eax
f0106455:	01 d8                	add    %ebx,%eax
f0106457:	83 c0 08             	add    $0x8,%eax
f010645a:	89 82 54 ef 00 00    	mov    %eax,0xef54(%edx)
f0106460:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106466:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010646c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106472:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0106478:	89 c8                	mov    %ecx,%eax
f010647a:	c1 e0 02             	shl    $0x2,%eax
f010647d:	01 c8                	add    %ecx,%eax
f010647f:	c1 e0 02             	shl    $0x2,%eax
f0106482:	83 c0 70             	add    $0x70,%eax
f0106485:	01 d8                	add    %ebx,%eax
f0106487:	83 c0 08             	add    $0x8,%eax
f010648a:	89 82 50 ef 00 00    	mov    %eax,0xef50(%edx)
f0106490:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106496:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010649c:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01064a2:	89 d0                	mov    %edx,%eax
f01064a4:	c1 e0 02             	shl    $0x2,%eax
f01064a7:	01 d0                	add    %edx,%eax
f01064a9:	c1 e0 02             	shl    $0x2,%eax
f01064ac:	01 c8                	add    %ecx,%eax
f01064ae:	05 88 00 00 00       	add    $0x88,%eax
f01064b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01064b9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01064bf:	8b 90 5c ef 00 00    	mov    0xef5c(%eax),%edx
f01064c5:	42                   	inc    %edx
f01064c6:	89 90 5c ef 00 00    	mov    %edx,0xef5c(%eax)
f01064cc:	e9 19 01 00 00       	jmp    f01065ea <env_create+0xb68>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f01064d1:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01064d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01064dd:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01064e3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01064e9:	8b 98 60 ef 00 00    	mov    0xef60(%eax),%ebx
f01064ef:	89 d0                	mov    %edx,%eax
f01064f1:	c1 e0 02             	shl    $0x2,%eax
f01064f4:	01 d0                	add    %edx,%eax
f01064f6:	c1 e0 02             	shl    $0x2,%eax
f01064f9:	01 c8                	add    %ecx,%eax
f01064fb:	05 84 00 00 00       	add    $0x84,%eax
f0106500:	89 18                	mov    %ebx,(%eax)
f0106502:	89 d0                	mov    %edx,%eax
f0106504:	c1 e0 02             	shl    $0x2,%eax
f0106507:	01 d0                	add    %edx,%eax
f0106509:	c1 e0 02             	shl    $0x2,%eax
f010650c:	01 c8                	add    %ecx,%eax
f010650e:	05 84 00 00 00       	add    $0x84,%eax
f0106513:	8b 00                	mov    (%eax),%eax
f0106515:	85 c0                	test   %eax,%eax
f0106517:	74 35                	je     f010654e <env_create+0xacc>
f0106519:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010651f:	8b 90 60 ef 00 00    	mov    0xef60(%eax),%edx
f0106525:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010652b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106531:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0106537:	89 c8                	mov    %ecx,%eax
f0106539:	c1 e0 02             	shl    $0x2,%eax
f010653c:	01 c8                	add    %ecx,%eax
f010653e:	c1 e0 02             	shl    $0x2,%eax
f0106541:	83 c0 70             	add    $0x70,%eax
f0106544:	01 d8                	add    %ebx,%eax
f0106546:	83 c0 08             	add    $0x8,%eax
f0106549:	89 42 10             	mov    %eax,0x10(%edx)
f010654c:	eb 30                	jmp    f010657e <env_create+0xafc>
f010654e:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106554:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010655a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106560:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0106566:	89 c8                	mov    %ecx,%eax
f0106568:	c1 e0 02             	shl    $0x2,%eax
f010656b:	01 c8                	add    %ecx,%eax
f010656d:	c1 e0 02             	shl    $0x2,%eax
f0106570:	83 c0 70             	add    $0x70,%eax
f0106573:	01 d8                	add    %ebx,%eax
f0106575:	83 c0 08             	add    $0x8,%eax
f0106578:	89 82 64 ef 00 00    	mov    %eax,0xef64(%edx)
f010657e:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106584:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010658a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106590:	8b 88 c0 ee 00 00    	mov    0xeec0(%eax),%ecx
f0106596:	89 c8                	mov    %ecx,%eax
f0106598:	c1 e0 02             	shl    $0x2,%eax
f010659b:	01 c8                	add    %ecx,%eax
f010659d:	c1 e0 02             	shl    $0x2,%eax
f01065a0:	83 c0 70             	add    $0x70,%eax
f01065a3:	01 d8                	add    %ebx,%eax
f01065a5:	83 c0 08             	add    $0x8,%eax
f01065a8:	89 82 60 ef 00 00    	mov    %eax,0xef60(%edx)
f01065ae:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f01065b4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01065ba:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01065c0:	89 d0                	mov    %edx,%eax
f01065c2:	c1 e0 02             	shl    $0x2,%eax
f01065c5:	01 d0                	add    %edx,%eax
f01065c7:	c1 e0 02             	shl    $0x2,%eax
f01065ca:	01 c8                	add    %ecx,%eax
f01065cc:	05 88 00 00 00       	add    $0x88,%eax
f01065d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01065d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01065dd:	8b 90 6c ef 00 00    	mov    0xef6c(%eax),%edx
f01065e3:	42                   	inc    %edx
f01065e4:	89 90 6c ef 00 00    	mov    %edx,0xef6c(%eax)
				}
			}
			e->page_last_WS_index ++;
f01065ea:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01065f0:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f01065f6:	42                   	inc    %edx
f01065f7:	89 90 c0 ee 00 00    	mov    %edx,0xeec0(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f01065fd:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f0106603:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106609:	8b 80 c0 ee 00 00    	mov    0xeec0(%eax),%eax
f010660f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0106615:	8b 5a 74             	mov    0x74(%edx),%ebx
f0106618:	ba 00 00 00 00       	mov    $0x0,%edx
f010661d:	f7 f3                	div    %ebx
f010661f:	89 d0                	mov    %edx,%eax
f0106621:	89 81 c0 ee 00 00    	mov    %eax,0xeec0(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0106627:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010662d:	83 ec 04             	sub    $0x4,%esp
f0106630:	6a 01                	push   $0x1
f0106632:	ff 75 c0             	pushl  -0x40(%ebp)
f0106635:	50                   	push   %eax
f0106636:	e8 90 58 00 00       	call   f010becb <pf_add_empty_env_page>
f010663b:	83 c4 10             	add    $0x10,%esp
f010663e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0106644:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010664b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010664e:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0106654:	0f 83 a8 fa ff ff    	jae    f0106102 <env_create+0x680>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRULists())
f010665a:	e8 f4 24 00 00       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f010665f:	85 c0                	test   %eax,%eax
f0106661:	0f 84 c3 00 00 00    	je     f010672a <env_create+0xca8>
	{
		struct WorkingSetElement * elm = NULL;
f0106667:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f010666e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106674:	8b 80 60 ef 00 00    	mov    0xef60(%eax),%eax
f010667a:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010667d:	eb 74                	jmp    f01066f3 <env_create+0xc71>
		{
			//set it's PRESENT bit to 0
			//pt_set_page_permissions(e, elm->virtual_address, 0, PERM_PRESENT);
			uint32 *ptr_table = NULL;
f010667f:	c7 85 14 ff ff ff 00 	movl   $0x0,-0xec(%ebp)
f0106686:	00 00 00 
			get_page_table(e->env_page_directory,(void*) elm->virtual_address, &ptr_table);
f0106689:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010668c:	8b 00                	mov    (%eax),%eax
f010668e:	89 c1                	mov    %eax,%ecx
f0106690:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0106696:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106699:	83 ec 04             	sub    $0x4,%esp
f010669c:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f01066a2:	52                   	push   %edx
f01066a3:	51                   	push   %ecx
f01066a4:	50                   	push   %eax
f01066a5:	e8 c4 d7 ff ff       	call   f0103e6e <get_page_table>
f01066aa:	83 c4 10             	add    $0x10,%esp
			ptr_table[PTX(elm->virtual_address)] &= ~PERM_PRESENT;
f01066ad:	8b 95 14 ff ff ff    	mov    -0xec(%ebp),%edx
f01066b3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01066b6:	8b 00                	mov    (%eax),%eax
f01066b8:	c1 e8 0c             	shr    $0xc,%eax
f01066bb:	25 ff 03 00 00       	and    $0x3ff,%eax
f01066c0:	c1 e0 02             	shl    $0x2,%eax
f01066c3:	01 c2                	add    %eax,%edx
f01066c5:	8b 8d 14 ff ff ff    	mov    -0xec(%ebp),%ecx
f01066cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01066ce:	8b 00                	mov    (%eax),%eax
f01066d0:	c1 e8 0c             	shr    $0xc,%eax
f01066d3:	25 ff 03 00 00       	and    $0x3ff,%eax
f01066d8:	c1 e0 02             	shl    $0x2,%eax
f01066db:	01 c8                	add    %ecx,%eax
f01066dd:	8b 00                	mov    (%eax),%eax
f01066df:	83 e0 fe             	and    $0xfffffffe,%eax
f01066e2:	89 02                	mov    %eax,(%edx)
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRULists())
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f01066e4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01066ea:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f01066f0:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01066f3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01066f9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f01066fd:	74 08                	je     f0106707 <env_create+0xc85>
f01066ff:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0106702:	8b 52 0c             	mov    0xc(%edx),%edx
f0106705:	eb 05                	jmp    f010670c <env_create+0xc8a>
f0106707:	ba 00 00 00 00       	mov    $0x0,%edx
f010670c:	89 90 68 ef 00 00    	mov    %edx,0xef68(%eax)
f0106712:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f0106718:	85 c0                	test   %eax,%eax
f010671a:	0f 85 5f ff ff ff    	jne    f010667f <env_create+0xbfd>
f0106720:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0106724:	0f 85 55 ff ff ff    	jne    f010667f <env_create+0xbfd>
f010672a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010672d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0106730:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0106733:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0106736:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f010673c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010673f:	5b                   	pop    %ebx
f0106740:	5e                   	pop    %esi
f0106741:	5f                   	pop    %edi
f0106742:	5d                   	pop    %ebp
f0106743:	c3                   	ret    

f0106744 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f0106744:	55                   	push   %ebp
f0106745:	89 e5                	mov    %esp,%ebp
f0106747:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010674a:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010674f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0106752:	74 25                	je     f0106779 <env_run+0x35>
	{
		curenv = e ;
f0106754:	8b 45 08             	mov    0x8(%ebp),%eax
f0106757:	a3 30 58 32 f0       	mov    %eax,0xf0325830
		curenv->env_runs++ ;
f010675c:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0106761:	8b 50 58             	mov    0x58(%eax),%edx
f0106764:	42                   	inc    %edx
f0106765:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0106768:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010676d:	8b 40 60             	mov    0x60(%eax),%eax
f0106770:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106773:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106776:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0106779:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010677e:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0106785:	e8 e2 09 00 00       	call   f010716c <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010678a:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010678f:	83 ec 0c             	sub    $0xc,%esp
f0106792:	50                   	push   %eax
f0106793:	e8 76 08 00 00       	call   f010700e <env_pop_tf>

f0106798 <__remove_pws_user_pages>:
}

void __remove_pws_user_pages(struct Env *e)
{
f0106798:	55                   	push   %ebp
f0106799:	89 e5                	mov    %esp,%ebp
f010679b:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("kernel heap is disabled.");
f010679e:	83 ec 04             	sub    $0x4,%esp
f01067a1:	68 81 d4 11 f0       	push   $0xf011d481
f01067a6:	68 1c 03 00 00       	push   $0x31c
f01067ab:	68 4f d3 11 f0       	push   $0xf011d34f
f01067b0:	e8 de 99 ff ff       	call   f0100193 <_panic>

f01067b5 <start_env_free>:
extern uint32 isBufferingEnabled();
void __env_free_with_buffering(struct Env *e);
void env_free(struct Env *e);

void start_env_free(struct Env *e)
{
f01067b5:	55                   	push   %ebp
f01067b6:	89 e5                	mov    %esp,%ebp
f01067b8:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f01067bb:	e8 25 24 00 00       	call   f0108be5 <isBufferingEnabled>
f01067c0:	85 c0                	test   %eax,%eax
f01067c2:	74 10                	je     f01067d4 <start_env_free+0x1f>
	{
		__env_free_with_buffering(e);
f01067c4:	83 ec 0c             	sub    $0xc,%esp
f01067c7:	ff 75 08             	pushl  0x8(%ebp)
f01067ca:	e8 41 00 00 00       	call   f0106810 <__env_free_with_buffering>
f01067cf:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		env_free(e);
	}
}
f01067d2:	eb 0e                	jmp    f01067e2 <start_env_free+0x2d>
	{
		__env_free_with_buffering(e);
	}
	else
	{
		env_free(e);
f01067d4:	83 ec 0c             	sub    $0xc,%esp
f01067d7:	ff 75 08             	pushl  0x8(%ebp)
f01067da:	e8 06 00 00 00       	call   f01067e5 <env_free>
f01067df:	83 c4 10             	add    $0x10,%esp
	}
}
f01067e2:	90                   	nop
f01067e3:	c9                   	leave  
f01067e4:	c3                   	ret    

f01067e5 <env_free>:

void env_free(struct Env *e)
{
f01067e5:	55                   	push   %ebp
f01067e6:	89 e5                	mov    %esp,%ebp
f01067e8:	83 ec 08             	sub    $0x8,%esp
	__remove_pws_user_pages(e);
f01067eb:	83 ec 0c             	sub    $0xc,%esp
f01067ee:	ff 75 08             	pushl  0x8(%ebp)
f01067f1:	e8 a2 ff ff ff       	call   f0106798 <__remove_pws_user_pages>
f01067f6:	83 c4 10             	add    $0x10,%esp

	//YOUR CODE STARTS HERE, remove the panic and write your code ----
	panic("this function is not required...!!");
f01067f9:	83 ec 04             	sub    $0x4,%esp
f01067fc:	68 2c d3 11 f0       	push   $0xf011d32c
f0106801:	68 37 03 00 00       	push   $0x337
f0106806:	68 4f d3 11 f0       	push   $0xf011d34f
f010680b:	e8 83 99 ff ff       	call   f0100193 <_panic>

f0106810 <__env_free_with_buffering>:
	pf_free_env(e); /*(ALREADY DONE for you)*/ // (removes all of the program pages from the page file)
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
}

void __env_free_with_buffering(struct Env *e)
{
f0106810:	55                   	push   %ebp
f0106811:	89 e5                	mov    %esp,%ebp
f0106813:	83 ec 08             	sub    $0x8,%esp
	__remove_pws_user_pages(e);
f0106816:	83 ec 0c             	sub    $0xc,%esp
f0106819:	ff 75 08             	pushl  0x8(%ebp)
f010681c:	e8 77 ff ff ff       	call   f0106798 <__remove_pws_user_pages>
f0106821:	83 c4 10             	add    $0x10,%esp

	panic("this function is not required...!!");
f0106824:	83 ec 04             	sub    $0x4,%esp
f0106827:	68 2c d3 11 f0       	push   $0xf011d32c
f010682c:	68 49 03 00 00       	push   $0x349
f0106831:	68 4f d3 11 f0       	push   $0xf011d34f
f0106836:	e8 58 99 ff ff       	call   f0100193 <_panic>

f010683b <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010683b:	55                   	push   %ebp
f010683c:	89 e5                	mov    %esp,%ebp
f010683e:	56                   	push   %esi
f010683f:	53                   	push   %ebx
f0106840:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f0106843:	c7 45 f4 10 00 00 00 	movl   $0x10,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010684a:	e9 6e 01 00 00       	jmp    f01069bd <env_init+0x182>
	{
		envs[iEnv].env_status = ENV_FREE;
f010684f:	8b 0d 2c 58 32 f0    	mov    0xf032582c,%ecx
f0106855:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106858:	89 d0                	mov    %edx,%eax
f010685a:	01 c0                	add    %eax,%eax
f010685c:	01 d0                	add    %edx,%eax
f010685e:	c1 e0 07             	shl    $0x7,%eax
f0106861:	29 d0                	sub    %edx,%eax
f0106863:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010686a:	01 d8                	add    %ebx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	01 c0                	add    %eax,%eax
f0106872:	01 d0                	add    %edx,%eax
f0106874:	c1 e0 03             	shl    $0x3,%eax
f0106877:	01 c8                	add    %ecx,%eax
f0106879:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0106880:	8b 0d 2c 58 32 f0    	mov    0xf032582c,%ecx
f0106886:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106889:	89 d0                	mov    %edx,%eax
f010688b:	01 c0                	add    %eax,%eax
f010688d:	01 d0                	add    %edx,%eax
f010688f:	c1 e0 07             	shl    $0x7,%eax
f0106892:	29 d0                	sub    %edx,%eax
f0106894:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010689b:	01 d8                	add    %ebx,%eax
f010689d:	01 c0                	add    %eax,%eax
f010689f:	01 d0                	add    %edx,%eax
f01068a1:	01 c0                	add    %eax,%eax
f01068a3:	01 d0                	add    %edx,%eax
f01068a5:	c1 e0 03             	shl    $0x3,%eax
f01068a8:	01 c8                	add    %ecx,%eax
f01068aa:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01068b1:	8b 0d 2c 58 32 f0    	mov    0xf032582c,%ecx
f01068b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068ba:	89 d0                	mov    %edx,%eax
f01068bc:	01 c0                	add    %eax,%eax
f01068be:	01 d0                	add    %edx,%eax
f01068c0:	c1 e0 07             	shl    $0x7,%eax
f01068c3:	29 d0                	sub    %edx,%eax
f01068c5:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01068cc:	01 d8                	add    %ebx,%eax
f01068ce:	01 c0                	add    %eax,%eax
f01068d0:	01 d0                	add    %edx,%eax
f01068d2:	01 c0                	add    %eax,%eax
f01068d4:	01 d0                	add    %edx,%eax
f01068d6:	c1 e0 03             	shl    $0x3,%eax
f01068d9:	01 c8                	add    %ecx,%eax
f01068db:	8b 15 34 58 32 f0    	mov    0xf0325834,%edx
f01068e1:	89 50 44             	mov    %edx,0x44(%eax)
f01068e4:	8b 40 44             	mov    0x44(%eax),%eax
f01068e7:	85 c0                	test   %eax,%eax
f01068e9:	74 35                	je     f0106920 <env_init+0xe5>
f01068eb:	8b 0d 34 58 32 f0    	mov    0xf0325834,%ecx
f01068f1:	8b 1d 2c 58 32 f0    	mov    0xf032582c,%ebx
f01068f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068fa:	89 d0                	mov    %edx,%eax
f01068fc:	01 c0                	add    %eax,%eax
f01068fe:	01 d0                	add    %edx,%eax
f0106900:	c1 e0 07             	shl    $0x7,%eax
f0106903:	29 d0                	sub    %edx,%eax
f0106905:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
f010690c:	01 f0                	add    %esi,%eax
f010690e:	01 c0                	add    %eax,%eax
f0106910:	01 d0                	add    %edx,%eax
f0106912:	01 c0                	add    %eax,%eax
f0106914:	01 d0                	add    %edx,%eax
f0106916:	c1 e0 03             	shl    $0x3,%eax
f0106919:	01 d8                	add    %ebx,%eax
f010691b:	89 41 48             	mov    %eax,0x48(%ecx)
f010691e:	eb 2f                	jmp    f010694f <env_init+0x114>
f0106920:	8b 0d 2c 58 32 f0    	mov    0xf032582c,%ecx
f0106926:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106929:	89 d0                	mov    %edx,%eax
f010692b:	01 c0                	add    %eax,%eax
f010692d:	01 d0                	add    %edx,%eax
f010692f:	c1 e0 07             	shl    $0x7,%eax
f0106932:	29 d0                	sub    %edx,%eax
f0106934:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010693b:	01 d8                	add    %ebx,%eax
f010693d:	01 c0                	add    %eax,%eax
f010693f:	01 d0                	add    %edx,%eax
f0106941:	01 c0                	add    %eax,%eax
f0106943:	01 d0                	add    %edx,%eax
f0106945:	c1 e0 03             	shl    $0x3,%eax
f0106948:	01 c8                	add    %ecx,%eax
f010694a:	a3 38 58 32 f0       	mov    %eax,0xf0325838
f010694f:	8b 0d 2c 58 32 f0    	mov    0xf032582c,%ecx
f0106955:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106958:	89 d0                	mov    %edx,%eax
f010695a:	01 c0                	add    %eax,%eax
f010695c:	01 d0                	add    %edx,%eax
f010695e:	c1 e0 07             	shl    $0x7,%eax
f0106961:	29 d0                	sub    %edx,%eax
f0106963:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010696a:	01 d8                	add    %ebx,%eax
f010696c:	01 c0                	add    %eax,%eax
f010696e:	01 d0                	add    %edx,%eax
f0106970:	01 c0                	add    %eax,%eax
f0106972:	01 d0                	add    %edx,%eax
f0106974:	c1 e0 03             	shl    $0x3,%eax
f0106977:	01 c8                	add    %ecx,%eax
f0106979:	a3 34 58 32 f0       	mov    %eax,0xf0325834
f010697e:	8b 0d 2c 58 32 f0    	mov    0xf032582c,%ecx
f0106984:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106987:	89 d0                	mov    %edx,%eax
f0106989:	01 c0                	add    %eax,%eax
f010698b:	01 d0                	add    %edx,%eax
f010698d:	c1 e0 07             	shl    $0x7,%eax
f0106990:	29 d0                	sub    %edx,%eax
f0106992:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0106999:	01 d8                	add    %ebx,%eax
f010699b:	01 c0                	add    %eax,%eax
f010699d:	01 d0                	add    %edx,%eax
f010699f:	01 c0                	add    %eax,%eax
f01069a1:	01 d0                	add    %edx,%eax
f01069a3:	c1 e0 03             	shl    $0x3,%eax
f01069a6:	01 c8                	add    %ecx,%eax
f01069a8:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01069af:	a1 40 58 32 f0       	mov    0xf0325840,%eax
f01069b4:	40                   	inc    %eax
f01069b5:	a3 40 58 32 f0       	mov    %eax,0xf0325840
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01069ba:	ff 4d f4             	decl   -0xc(%ebp)
f01069bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069c1:	0f 89 88 fe ff ff    	jns    f010684f <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f01069c7:	90                   	nop
f01069c8:	83 c4 10             	add    $0x10,%esp
f01069cb:	5b                   	pop    %ebx
f01069cc:	5e                   	pop    %esi
f01069cd:	5d                   	pop    %ebp
f01069ce:	c3                   	ret    

f01069cf <complete_environment_initialization>:

void complete_environment_initialization(struct Env* e)
{
f01069cf:	55                   	push   %ebp
f01069d0:	89 e5                	mov    %esp,%ebp
f01069d2:	83 ec 18             	sub    $0x18,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f01069d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069db:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f01069e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01069e4:	8b 40 60             	mov    0x60(%eax),%eax
f01069e7:	83 c8 03             	or     $0x3,%eax
f01069ea:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f01069ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ef:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069f2:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f01069f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01069fb:	8b 40 60             	mov    0x60(%eax),%eax
f01069fe:	83 c8 05             	or     $0x5,%eax
f0106a01:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f0106a03:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a06:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f0106a0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a10:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f0106a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a1a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f0106a21:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a24:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
f0106a2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a2e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106a31:	05 00 10 00 00       	add    $0x1000,%eax
f0106a36:	83 e0 ef             	and    $0xffffffef,%eax
f0106a39:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f0106a3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106a40:	7f 07                	jg     f0106a49 <complete_environment_initialization+0x7a>
		generation = 1 << ENVGENSHIFT;
f0106a42:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f0106a49:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a4c:	8b 15 2c 58 32 f0    	mov    0xf032582c,%edx
f0106a52:	29 d0                	sub    %edx,%eax
f0106a54:	c1 f8 03             	sar    $0x3,%eax
f0106a57:	89 c2                	mov    %eax,%edx
f0106a59:	89 d0                	mov    %edx,%eax
f0106a5b:	01 c0                	add    %eax,%eax
f0106a5d:	01 d0                	add    %edx,%eax
f0106a5f:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106a66:	01 c8                	add    %ecx,%eax
f0106a68:	c1 e0 07             	shl    $0x7,%eax
f0106a6b:	01 d0                	add    %edx,%eax
f0106a6d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0106a74:	01 c8                	add    %ecx,%eax
f0106a76:	c1 e0 02             	shl    $0x2,%eax
f0106a79:	01 d0                	add    %edx,%eax
f0106a7b:	c1 e0 03             	shl    $0x3,%eax
f0106a7e:	01 d0                	add    %edx,%eax
f0106a80:	c1 e0 03             	shl    $0x3,%eax
f0106a83:	01 d0                	add    %edx,%eax
f0106a85:	01 c0                	add    %eax,%eax
f0106a87:	01 d0                	add    %edx,%eax
f0106a89:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0106a90:	01 c8                	add    %ecx,%eax
f0106a92:	01 c0                	add    %eax,%eax
f0106a94:	01 d0                	add    %edx,%eax
f0106a96:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106a9d:	01 d0                	add    %edx,%eax
f0106a9f:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106aa2:	89 c2                	mov    %eax,%edx
f0106aa4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aa7:	89 50 4c             	mov    %edx,0x4c(%eax)

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f0106aaa:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0106aaf:	85 c0                	test   %eax,%eax
f0106ab1:	75 0c                	jne    f0106abf <complete_environment_initialization+0xf0>
		e->env_parent_id = 0;//no parent;
f0106ab3:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ab6:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f0106abd:	eb 0e                	jmp    f0106acd <complete_environment_initialization+0xfe>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f0106abf:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0106ac4:	8b 50 4c             	mov    0x4c(%eax),%edx
f0106ac7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aca:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f0106acd:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ad0:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f0106ad7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ada:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0106ae1:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ae4:	83 ec 04             	sub    $0x4,%esp
f0106ae7:	6a 44                	push   $0x44
f0106ae9:	6a 00                	push   $0x0
f0106aeb:	50                   	push   %eax
f0106aec:	e8 7f 2f 01 00       	call   f0119a70 <memset>
f0106af1:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f0106af4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106af7:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f0106afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b00:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f0106b06:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b09:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f0106b0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b12:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f0106b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b1c:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f0106b22:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b25:	8b 40 38             	mov    0x38(%eax),%eax
f0106b28:	80 cc 02             	or     $0x2,%ah
f0106b2b:	89 c2                	mov    %eax,%edx
f0106b2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b30:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f0106b33:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b36:	8b 40 44             	mov    0x44(%eax),%eax
f0106b39:	85 c0                	test   %eax,%eax
f0106b3b:	74 11                	je     f0106b4e <complete_environment_initialization+0x17f>
f0106b3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b40:	8b 40 44             	mov    0x44(%eax),%eax
f0106b43:	8b 55 08             	mov    0x8(%ebp),%edx
f0106b46:	8b 52 48             	mov    0x48(%edx),%edx
f0106b49:	89 50 48             	mov    %edx,0x48(%eax)
f0106b4c:	eb 0b                	jmp    f0106b59 <complete_environment_initialization+0x18a>
f0106b4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b51:	8b 40 48             	mov    0x48(%eax),%eax
f0106b54:	a3 38 58 32 f0       	mov    %eax,0xf0325838
f0106b59:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b5c:	8b 40 48             	mov    0x48(%eax),%eax
f0106b5f:	85 c0                	test   %eax,%eax
f0106b61:	74 11                	je     f0106b74 <complete_environment_initialization+0x1a5>
f0106b63:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b66:	8b 40 48             	mov    0x48(%eax),%eax
f0106b69:	8b 55 08             	mov    0x8(%ebp),%edx
f0106b6c:	8b 52 44             	mov    0x44(%edx),%edx
f0106b6f:	89 50 44             	mov    %edx,0x44(%eax)
f0106b72:	eb 0b                	jmp    f0106b7f <complete_environment_initialization+0x1b0>
f0106b74:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b77:	8b 40 44             	mov    0x44(%eax),%eax
f0106b7a:	a3 34 58 32 f0       	mov    %eax,0xf0325834
f0106b7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b82:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0106b89:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b8c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0106b93:	a1 40 58 32 f0       	mov    0xf0325840,%eax
f0106b98:	48                   	dec    %eax
f0106b99:	a3 40 58 32 f0       	mov    %eax,0xf0325840
	return ;
f0106b9e:	90                   	nop
}
f0106b9f:	c9                   	leave  
f0106ba0:	c3                   	ret    

f0106ba1 <PROGRAM_SEGMENT_NEXT>:

struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f0106ba1:	55                   	push   %ebp
f0106ba2:	89 e5                	mov    %esp,%ebp
f0106ba4:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f0106ba7:	8b 45 08             	mov    0x8(%ebp),%eax
f0106baa:	8b 40 10             	mov    0x10(%eax),%eax
f0106bad:	8d 48 01             	lea    0x1(%eax),%ecx
f0106bb0:	8b 55 08             	mov    0x8(%ebp),%edx
f0106bb3:	89 4a 10             	mov    %ecx,0x10(%edx)
f0106bb6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106bb9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106bbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bc2:	8b 00                	mov    (%eax),%eax
f0106bc4:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106bc9:	74 17                	je     f0106be2 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f0106bcb:	83 ec 04             	sub    $0x4,%esp
f0106bce:	68 9a d4 11 f0       	push   $0xf011d49a
f0106bd3:	68 9f 03 00 00       	push   $0x39f
f0106bd8:	68 4f d3 11 f0       	push   $0xf011d34f
f0106bdd:	e8 b1 95 ff ff       	call   f0100193 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106be5:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106be8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106beb:	01 d0                	add    %edx,%eax
f0106bed:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f0106bf0:	eb 0f                	jmp    f0106c01 <PROGRAM_SEGMENT_NEXT+0x60>
f0106bf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0106bf5:	8b 40 10             	mov    0x10(%eax),%eax
f0106bf8:	8d 50 01             	lea    0x1(%eax),%edx
f0106bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0106bfe:	89 50 10             	mov    %edx,0x10(%eax)
f0106c01:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c04:	8b 40 10             	mov    0x10(%eax),%eax
f0106c07:	c1 e0 05             	shl    $0x5,%eax
f0106c0a:	89 c2                	mov    %eax,%edx
f0106c0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c0f:	01 d0                	add    %edx,%eax
f0106c11:	8b 00                	mov    (%eax),%eax
f0106c13:	83 f8 01             	cmp    $0x1,%eax
f0106c16:	74 13                	je     f0106c2b <PROGRAM_SEGMENT_NEXT+0x8a>
f0106c18:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c1b:	8b 50 10             	mov    0x10(%eax),%edx
f0106c1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c21:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106c24:	0f b7 c0             	movzwl %ax,%eax
f0106c27:	39 c2                	cmp    %eax,%edx
f0106c29:	72 c7                	jb     f0106bf2 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f0106c2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c2e:	8b 40 10             	mov    0x10(%eax),%eax
f0106c31:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f0106c34:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c37:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106c3a:	0f b7 c0             	movzwl %ax,%eax
f0106c3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106c40:	7e 63                	jle    f0106ca5 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c45:	c1 e0 05             	shl    $0x5,%eax
f0106c48:	89 c2                	mov    %eax,%edx
f0106c4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c4d:	01 d0                	add    %edx,%eax
f0106c4f:	8b 50 04             	mov    0x4(%eax),%edx
f0106c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c55:	01 c2                	add    %eax,%edx
f0106c57:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c5a:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f0106c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c5f:	c1 e0 05             	shl    $0x5,%eax
f0106c62:	89 c2                	mov    %eax,%edx
f0106c64:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c67:	01 d0                	add    %edx,%eax
f0106c69:	8b 50 14             	mov    0x14(%eax),%edx
f0106c6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c6f:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f0106c72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c75:	c1 e0 05             	shl    $0x5,%eax
f0106c78:	89 c2                	mov    %eax,%edx
f0106c7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c7d:	01 d0                	add    %edx,%eax
f0106c7f:	8b 50 10             	mov    0x10(%eax),%edx
f0106c82:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c85:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f0106c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c8b:	c1 e0 05             	shl    $0x5,%eax
f0106c8e:	89 c2                	mov    %eax,%edx
f0106c90:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c93:	01 d0                	add    %edx,%eax
f0106c95:	8b 40 08             	mov    0x8(%eax),%eax
f0106c98:	89 c2                	mov    %eax,%edx
f0106c9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c9d:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f0106ca0:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ca3:	eb 05                	jmp    f0106caa <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f0106ca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106caa:	c9                   	leave  
f0106cab:	c3                   	ret    

f0106cac <PROGRAM_SEGMENT_FIRST>:

struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f0106cac:	55                   	push   %ebp
f0106cad:	89 e5                	mov    %esp,%ebp
f0106caf:	57                   	push   %edi
f0106cb0:	56                   	push   %esi
f0106cb1:	53                   	push   %ebx
f0106cb2:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f0106cb5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106cbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cbf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106cc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106cc5:	8b 00                	mov    (%eax),%eax
f0106cc7:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106ccc:	74 17                	je     f0106ce5 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f0106cce:	83 ec 04             	sub    $0x4,%esp
f0106cd1:	68 9a d4 11 f0       	push   $0xf011d49a
f0106cd6:	68 b8 03 00 00       	push   $0x3b8
f0106cdb:	68 4f d3 11 f0       	push   $0xf011d34f
f0106ce0:	e8 ae 94 ff ff       	call   f0100193 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f0106ce5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106ce8:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cee:	01 d0                	add    %edx,%eax
f0106cf0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f0106cf3:	eb 07                	jmp    f0106cfc <PROGRAM_SEGMENT_FIRST+0x50>
f0106cf5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106cf8:	40                   	inc    %eax
f0106cf9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0106cfc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106cff:	c1 e0 05             	shl    $0x5,%eax
f0106d02:	89 c2                	mov    %eax,%edx
f0106d04:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d07:	01 d0                	add    %edx,%eax
f0106d09:	8b 00                	mov    (%eax),%eax
f0106d0b:	83 f8 01             	cmp    $0x1,%eax
f0106d0e:	74 10                	je     f0106d20 <PROGRAM_SEGMENT_FIRST+0x74>
f0106d10:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106d13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d16:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106d19:	0f b7 c0             	movzwl %ax,%eax
f0106d1c:	39 c2                	cmp    %eax,%edx
f0106d1e:	72 d5                	jb     f0106cf5 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f0106d20:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106d23:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f0106d26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d29:	8b 40 2c             	mov    0x2c(%eax),%eax
f0106d2c:	0f b7 c0             	movzwl %ax,%eax
f0106d2f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0106d32:	7e 68                	jle    f0106d9c <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f0106d34:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d37:	c1 e0 05             	shl    $0x5,%eax
f0106d3a:	89 c2                	mov    %eax,%edx
f0106d3c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d3f:	01 d0                	add    %edx,%eax
f0106d41:	8b 50 04             	mov    0x4(%eax),%edx
f0106d44:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d47:	01 d0                	add    %edx,%eax
f0106d49:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f0106d4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d4f:	c1 e0 05             	shl    $0x5,%eax
f0106d52:	89 c2                	mov    %eax,%edx
f0106d54:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d57:	01 d0                	add    %edx,%eax
f0106d59:	8b 40 14             	mov    0x14(%eax),%eax
f0106d5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f0106d5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d62:	c1 e0 05             	shl    $0x5,%eax
f0106d65:	89 c2                	mov    %eax,%edx
f0106d67:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d6a:	01 d0                	add    %edx,%eax
f0106d6c:	8b 40 10             	mov    0x10(%eax),%eax
f0106d6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f0106d72:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106d75:	c1 e0 05             	shl    $0x5,%eax
f0106d78:	89 c2                	mov    %eax,%edx
f0106d7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106d7d:	01 d0                	add    %edx,%eax
f0106d7f:	8b 40 08             	mov    0x8(%eax),%eax
f0106d82:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f0106d85:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d88:	89 c3                	mov    %eax,%ebx
f0106d8a:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0106d8d:	ba 05 00 00 00       	mov    $0x5,%edx
f0106d92:	89 df                	mov    %ebx,%edi
f0106d94:	89 c6                	mov    %eax,%esi
f0106d96:	89 d1                	mov    %edx,%ecx
f0106d98:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0106d9a:	eb 1c                	jmp    f0106db8 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f0106d9c:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f0106da3:	8b 45 08             	mov    0x8(%ebp),%eax
f0106da6:	89 c3                	mov    %eax,%ebx
f0106da8:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0106dab:	ba 05 00 00 00       	mov    $0x5,%edx
f0106db0:	89 df                	mov    %ebx,%edi
f0106db2:	89 c6                	mov    %eax,%esi
f0106db4:	89 d1                	mov    %edx,%ecx
f0106db6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106db8:	8b 45 08             	mov    0x8(%ebp),%eax
f0106dbb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0106dbe:	5b                   	pop    %ebx
f0106dbf:	5e                   	pop    %esi
f0106dc0:	5f                   	pop    %edi
f0106dc1:	5d                   	pop    %ebp
f0106dc2:	c2 04 00             	ret    $0x4

f0106dc5 <get_user_program_info>:

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f0106dc5:	55                   	push   %ebp
f0106dc6:	89 e5                	mov    %esp,%ebp
f0106dc8:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106dcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106dd2:	eb 29                	jmp    f0106dfd <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f0106dd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106dd7:	89 d0                	mov    %edx,%eax
f0106dd9:	01 c0                	add    %eax,%eax
f0106ddb:	01 d0                	add    %edx,%eax
f0106ddd:	c1 e0 02             	shl    $0x2,%eax
f0106de0:	05 20 48 15 f0       	add    $0xf0154820,%eax
f0106de5:	8b 00                	mov    (%eax),%eax
f0106de7:	83 ec 08             	sub    $0x8,%esp
f0106dea:	50                   	push   %eax
f0106deb:	ff 75 08             	pushl  0x8(%ebp)
f0106dee:	e8 9b 2b 01 00       	call   f011998e <strcmp>
f0106df3:	83 c4 10             	add    $0x10,%esp
f0106df6:	85 c0                	test   %eax,%eax
f0106df8:	74 0f                	je     f0106e09 <get_user_program_info+0x44>
}

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106dfa:	ff 45 f4             	incl   -0xc(%ebp)
f0106dfd:	a1 74 49 15 f0       	mov    0xf0154974,%eax
f0106e02:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106e05:	7c cd                	jl     f0106dd4 <get_user_program_info+0xf>
f0106e07:	eb 01                	jmp    f0106e0a <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f0106e09:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0106e0a:	a1 74 49 15 f0       	mov    0xf0154974,%eax
f0106e0f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106e12:	75 1a                	jne    f0106e2e <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f0106e14:	83 ec 08             	sub    $0x8,%esp
f0106e17:	ff 75 08             	pushl  0x8(%ebp)
f0106e1a:	68 b0 d4 11 f0       	push   $0xf011d4b0
f0106e1f:	e8 7f 07 00 00       	call   f01075a3 <cprintf>
f0106e24:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106e27:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e2c:	eb 11                	jmp    f0106e3f <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f0106e2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e31:	89 d0                	mov    %edx,%eax
f0106e33:	01 c0                	add    %eax,%eax
f0106e35:	01 d0                	add    %edx,%eax
f0106e37:	c1 e0 02             	shl    $0x2,%eax
f0106e3a:	05 20 48 15 f0       	add    $0xf0154820,%eax
}
f0106e3f:	c9                   	leave  
f0106e40:	c3                   	ret    

f0106e41 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f0106e41:	55                   	push   %ebp
f0106e42:	89 e5                	mov    %esp,%ebp
f0106e44:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106e47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106e4e:	eb 30                	jmp    f0106e80 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f0106e50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e53:	89 d0                	mov    %edx,%eax
f0106e55:	01 c0                	add    %eax,%eax
f0106e57:	01 d0                	add    %edx,%eax
f0106e59:	c1 e0 02             	shl    $0x2,%eax
f0106e5c:	05 20 48 15 f0       	add    $0xf0154820,%eax
f0106e61:	8b 00                	mov    (%eax),%eax
f0106e63:	8b 55 08             	mov    0x8(%ebp),%edx
f0106e66:	81 c2 f0 ee 00 00    	add    $0xeef0,%edx
f0106e6c:	83 ec 08             	sub    $0x8,%esp
f0106e6f:	50                   	push   %eax
f0106e70:	52                   	push   %edx
f0106e71:	e8 18 2b 01 00       	call   f011998e <strcmp>
f0106e76:	83 c4 10             	add    $0x10,%esp
f0106e79:	85 c0                	test   %eax,%eax
f0106e7b:	74 0f                	je     f0106e8c <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106e7d:	ff 45 f4             	incl   -0xc(%ebp)
f0106e80:	a1 74 49 15 f0       	mov    0xf0154974,%eax
f0106e85:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106e88:	7c c6                	jl     f0106e50 <get_user_program_info_by_env+0xf>
f0106e8a:	eb 01                	jmp    f0106e8d <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f0106e8c:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0106e8d:	a1 74 49 15 f0       	mov    0xf0154974,%eax
f0106e92:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106e95:	75 17                	jne    f0106eae <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f0106e97:	83 ec 0c             	sub    $0xc,%esp
f0106e9a:	68 cb d4 11 f0       	push   $0xf011d4cb
f0106e9f:	e8 ff 06 00 00       	call   f01075a3 <cprintf>
f0106ea4:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106ea7:	b8 00 00 00 00       	mov    $0x0,%eax
f0106eac:	eb 11                	jmp    f0106ebf <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f0106eae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106eb1:	89 d0                	mov    %edx,%eax
f0106eb3:	01 c0                	add    %eax,%eax
f0106eb5:	01 d0                	add    %edx,%eax
f0106eb7:	c1 e0 02             	shl    $0x2,%eax
f0106eba:	05 20 48 15 f0       	add    $0xf0154820,%eax
}
f0106ebf:	c9                   	leave  
f0106ec0:	c3                   	ret    

f0106ec1 <set_environment_entry_point>:

void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f0106ec1:	55                   	push   %ebp
f0106ec2:	89 e5                	mov    %esp,%ebp
f0106ec4:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106ec7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106eca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ed0:	8b 00                	mov    (%eax),%eax
f0106ed2:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106ed7:	74 17                	je     f0106ef0 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f0106ed9:	83 ec 04             	sub    $0x4,%esp
f0106edc:	68 9a d4 11 f0       	push   $0xf011d49a
f0106ee1:	68 ed 03 00 00       	push   $0x3ed
f0106ee6:	68 4f d3 11 f0       	push   $0xf011d34f
f0106eeb:	e8 a3 92 ff ff       	call   f0100193 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0106ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ef3:	8b 40 18             	mov    0x18(%eax),%eax
f0106ef6:	89 c2                	mov    %eax,%edx
f0106ef8:	8b 45 08             	mov    0x8(%ebp),%eax
f0106efb:	89 50 30             	mov    %edx,0x30(%eax)
}
f0106efe:	90                   	nop
f0106eff:	c9                   	leave  
f0106f00:	c3                   	ret    

f0106f01 <env_exit>:



/*2015*///it add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0106f01:	55                   	push   %ebp
f0106f02:	89 e5                	mov    %esp,%ebp
f0106f04:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0106f07:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0106f0c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106f0f:	83 ec 0c             	sub    $0xc,%esp
f0106f12:	50                   	push   %eax
f0106f13:	e8 fc 2d 00 00       	call   f0109d14 <sched_exit_env>
f0106f18:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0106f1b:	e8 fb 22 00 00       	call   f010921b <fos_scheduler>

f0106f20 <cleanup_buffers>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//

void cleanup_buffers(struct Env* e)
{
f0106f20:	55                   	push   %ebp
f0106f21:	89 e5                	mov    %esp,%ebp
f0106f23:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct Frame_Info *ptr_fi=NULL ;
f0106f26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f0106f2d:	a1 20 11 3b f0       	mov    0xf03b1120,%eax
f0106f32:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f35:	e9 a3 00 00 00       	jmp    f0106fdd <cleanup_buffers+0xbd>
	{
		if(ptr_fi->environment == e)
f0106f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f3d:	8b 40 10             	mov    0x10(%eax),%eax
f0106f40:	3b 45 08             	cmp    0x8(%ebp),%eax
f0106f43:	0f 85 8c 00 00 00    	jne    f0106fd5 <cleanup_buffers+0xb5>
		{
			pt_clear_page_table_entry(ptr_fi->environment,ptr_fi->va);
f0106f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f4c:	8b 50 0c             	mov    0xc(%eax),%edx
f0106f4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f52:	8b 40 10             	mov    0x10(%eax),%eax
f0106f55:	83 ec 08             	sub    $0x8,%esp
f0106f58:	52                   	push   %edx
f0106f59:	50                   	push   %eax
f0106f5a:	e8 8f db ff ff       	call   f0104aee <pt_clear_page_table_entry>
f0106f5f:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			//bufferlist_remove_page(&modified_frame_list, ptr_fi);
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f0106f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f65:	8b 00                	mov    (%eax),%eax
f0106f67:	85 c0                	test   %eax,%eax
f0106f69:	74 10                	je     f0106f7b <cleanup_buffers+0x5b>
f0106f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f6e:	8b 00                	mov    (%eax),%eax
f0106f70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f73:	8b 52 04             	mov    0x4(%edx),%edx
f0106f76:	89 50 04             	mov    %edx,0x4(%eax)
f0106f79:	eb 0b                	jmp    f0106f86 <cleanup_buffers+0x66>
f0106f7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f7e:	8b 40 04             	mov    0x4(%eax),%eax
f0106f81:	a3 24 11 3b f0       	mov    %eax,0xf03b1124
f0106f86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f89:	8b 40 04             	mov    0x4(%eax),%eax
f0106f8c:	85 c0                	test   %eax,%eax
f0106f8e:	74 0f                	je     f0106f9f <cleanup_buffers+0x7f>
f0106f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106f93:	8b 40 04             	mov    0x4(%eax),%eax
f0106f96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f99:	8b 12                	mov    (%edx),%edx
f0106f9b:	89 10                	mov    %edx,(%eax)
f0106f9d:	eb 0a                	jmp    f0106fa9 <cleanup_buffers+0x89>
f0106f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fa2:	8b 00                	mov    (%eax),%eax
f0106fa4:	a3 20 11 3b f0       	mov    %eax,0xf03b1120
f0106fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fb5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106fbc:	a1 2c 11 3b f0       	mov    0xf03b112c,%eax
f0106fc1:	48                   	dec    %eax
f0106fc2:	a3 2c 11 3b f0       	mov    %eax,0xf03b112c
			free_frame(ptr_fi);
f0106fc7:	83 ec 0c             	sub    $0xc,%esp
f0106fca:	ff 75 f4             	pushl  -0xc(%ebp)
f0106fcd:	e8 0f ce ff ff       	call   f0103de1 <free_frame>
f0106fd2:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f0106fd5:	a1 28 11 3b f0       	mov    0xf03b1128,%eax
f0106fda:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106fdd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106fe1:	74 07                	je     f0106fea <cleanup_buffers+0xca>
f0106fe3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fe6:	8b 00                	mov    (%eax),%eax
f0106fe8:	eb 05                	jmp    f0106fef <cleanup_buffers+0xcf>
f0106fea:	b8 00 00 00 00       	mov    $0x0,%eax
f0106fef:	a3 28 11 3b f0       	mov    %eax,0xf03b1128
f0106ff4:	a1 28 11 3b f0       	mov    0xf03b1128,%eax
f0106ff9:	85 c0                	test   %eax,%eax
f0106ffb:	0f 85 39 ff ff ff    	jne    f0106f3a <cleanup_buffers+0x1a>
f0107001:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107005:	0f 85 2f ff ff ff    	jne    f0106f3a <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010700b:	90                   	nop
f010700c:	c9                   	leave  
f010700d:	c3                   	ret    

f010700e <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f010700e:	55                   	push   %ebp
f010700f:	89 e5                	mov    %esp,%ebp
f0107011:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0107014:	8b 65 08             	mov    0x8(%ebp),%esp
f0107017:	61                   	popa   
f0107018:	07                   	pop    %es
f0107019:	1f                   	pop    %ds
f010701a:	83 c4 08             	add    $0x8,%esp
f010701d:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f010701e:	83 ec 04             	sub    $0x4,%esp
f0107021:	68 e2 d4 11 f0       	push   $0xf011d4e2
f0107026:	68 30 04 00 00       	push   $0x430
f010702b:	68 4f d3 11 f0       	push   $0xf011d34f
f0107030:	e8 5e 91 ff ff       	call   f0100193 <_panic>

f0107035 <mc146818_read>:
#include <inc/assert.h>
#include <inc/lib.h>

unsigned
mc146818_read(unsigned reg)
{
f0107035:	55                   	push   %ebp
f0107036:	89 e5                	mov    %esp,%ebp
f0107038:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f010703b:	8b 45 08             	mov    0x8(%ebp),%eax
f010703e:	0f b6 c0             	movzbl %al,%eax
f0107041:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0107048:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010704b:	8a 45 f6             	mov    -0xa(%ebp),%al
f010704e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107051:	ee                   	out    %al,(%dx)
f0107052:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107059:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010705c:	89 c2                	mov    %eax,%edx
f010705e:	ec                   	in     (%dx),%al
f010705f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0107062:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0107065:	0f b6 c0             	movzbl %al,%eax
}
f0107068:	c9                   	leave  
f0107069:	c3                   	ret    

f010706a <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f010706a:	55                   	push   %ebp
f010706b:	89 e5                	mov    %esp,%ebp
f010706d:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0107070:	8b 45 08             	mov    0x8(%ebp),%eax
f0107073:	0f b6 c0             	movzbl %al,%eax
f0107076:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f010707d:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0107080:	8a 45 f6             	mov    -0xa(%ebp),%al
f0107083:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107086:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0107087:	8b 45 0c             	mov    0xc(%ebp),%eax
f010708a:	0f b6 c0             	movzbl %al,%eax
f010708d:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0107094:	88 45 f7             	mov    %al,-0x9(%ebp)
f0107097:	8a 45 f7             	mov    -0x9(%ebp),%al
f010709a:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010709d:	ee                   	out    %al,(%dx)
}
f010709e:	90                   	nop
f010709f:	c9                   	leave  
f01070a0:	c3                   	ret    

f01070a1 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01070a1:	55                   	push   %ebp
f01070a2:	89 e5                	mov    %esp,%ebp
f01070a4:	53                   	push   %ebx
f01070a5:	83 ec 24             	sub    $0x24,%esp
f01070a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01070ab:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01070ae:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01070b5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01070b9:	8a 45 ef             	mov    -0x11(%ebp),%al
f01070bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01070bf:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01070c0:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01070c4:	77 48                	ja     f010710e <kclock_start+0x6d>
f01070c6:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01070cd:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f01070d1:	8a 45 ee             	mov    -0x12(%ebp),%al
f01070d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070d7:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f01070d8:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01070dc:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01070e1:	99                   	cltd   
f01070e2:	f7 fb                	idiv   %ebx
f01070e4:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01070ea:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01070ee:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01070f3:	99                   	cltd   
f01070f4:	f7 fb                	idiv   %ebx
f01070f6:	89 c3                	mov    %eax,%ebx
f01070f8:	89 c8                	mov    %ecx,%eax
f01070fa:	99                   	cltd   
f01070fb:	f7 fb                	idiv   %ebx
f01070fd:	0f b7 c0             	movzwl %ax,%eax
f0107100:	83 ec 0c             	sub    $0xc,%esp
f0107103:	50                   	push   %eax
f0107104:	e8 b8 01 00 00       	call   f01072c1 <kclock_write_cnt0_LSB_first>
f0107109:	83 c4 10             	add    $0x10,%esp
f010710c:	eb 13                	jmp    f0107121 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010710e:	6a 35                	push   $0x35
f0107110:	68 f0 d4 11 f0       	push   $0xf011d4f0
f0107115:	6a 32                	push   $0x32
f0107117:	68 4c d5 11 f0       	push   $0xf011d54c
f010711c:	e8 72 90 ff ff       	call   f0100193 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0107121:	66 a1 78 49 15 f0    	mov    0xf0154978,%ax
f0107127:	0f b7 c0             	movzwl %ax,%eax
f010712a:	25 fe ff 00 00       	and    $0xfffe,%eax
f010712f:	83 ec 0c             	sub    $0xc,%esp
f0107132:	50                   	push   %eax
f0107133:	e8 cc 03 00 00       	call   f0107504 <irq_setmask_8259A>
f0107138:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f010713b:	90                   	nop
f010713c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010713f:	c9                   	leave  
f0107140:	c3                   	ret    

f0107141 <kclock_stop>:

void
kclock_stop(void)
{
f0107141:	55                   	push   %ebp
f0107142:	89 e5                	mov    %esp,%ebp
f0107144:	83 ec 18             	sub    $0x18,%esp
f0107147:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f010714e:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0107152:	8a 45 f3             	mov    -0xd(%ebp),%al
f0107155:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107158:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0107159:	83 ec 0c             	sub    $0xc,%esp
f010715c:	68 ff ff 00 00       	push   $0xffff
f0107161:	e8 9e 03 00 00       	call   f0107504 <irq_setmask_8259A>
f0107166:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0107169:	90                   	nop
f010716a:	c9                   	leave  
f010716b:	c3                   	ret    

f010716c <kclock_resume>:

void
kclock_resume(void)
{
f010716c:	55                   	push   %ebp
f010716d:	89 e5                	mov    %esp,%ebp
f010716f:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0107172:	e8 8c 01 00 00       	call   f0107303 <kclock_read_cnt0>
f0107177:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f010717b:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0107180:	77 06                	ja     f0107188 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0107182:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0107188:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010718c:	83 e0 01             	and    $0x1,%eax
f010718f:	66 85 c0             	test   %ax,%ax
f0107192:	74 09                	je     f010719d <kclock_resume+0x31>
		cnt0++;
f0107194:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0107198:	40                   	inc    %eax
f0107199:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f010719d:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01071a4:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01071a8:	8a 45 ef             	mov    -0x11(%ebp),%al
f01071ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071ae:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01071af:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f01071b3:	83 ec 0c             	sub    $0xc,%esp
f01071b6:	50                   	push   %eax
f01071b7:	e8 05 01 00 00       	call   f01072c1 <kclock_write_cnt0_LSB_first>
f01071bc:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01071bf:	66 a1 78 49 15 f0    	mov    0xf0154978,%ax
f01071c5:	0f b7 c0             	movzwl %ax,%eax
f01071c8:	25 fe ff 00 00       	and    $0xfffe,%eax
f01071cd:	83 ec 0c             	sub    $0xc,%esp
f01071d0:	50                   	push   %eax
f01071d1:	e8 2e 03 00 00       	call   f0107504 <irq_setmask_8259A>
f01071d6:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f01071d9:	90                   	nop
f01071da:	c9                   	leave  
f01071db:	c3                   	ret    

f01071dc <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f01071dc:	55                   	push   %ebp
f01071dd:	89 e5                	mov    %esp,%ebp
f01071df:	83 ec 28             	sub    $0x28,%esp
f01071e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01071e5:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01071e8:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01071ef:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01071f3:	8a 45 f3             	mov    -0xd(%ebp),%al
f01071f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071f9:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01071fa:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f01071fe:	83 ec 0c             	sub    $0xc,%esp
f0107201:	50                   	push   %eax
f0107202:	e8 ba 00 00 00       	call   f01072c1 <kclock_write_cnt0_LSB_first>
f0107207:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010720a:	66 a1 78 49 15 f0    	mov    0xf0154978,%ax
f0107210:	0f b7 c0             	movzwl %ax,%eax
f0107213:	25 fe ff 00 00       	and    $0xfffe,%eax
f0107218:	83 ec 0c             	sub    $0xc,%esp
f010721b:	50                   	push   %eax
f010721c:	e8 e3 02 00 00       	call   f0107504 <irq_setmask_8259A>
f0107221:	83 c4 10             	add    $0x10,%esp

}
f0107224:	90                   	nop
f0107225:	c9                   	leave  
f0107226:	c3                   	ret    

f0107227 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0107227:	55                   	push   %ebp
f0107228:	89 e5                	mov    %esp,%ebp
f010722a:	53                   	push   %ebx
f010722b:	83 ec 24             	sub    $0x24,%esp
f010722e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107231:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0107234:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0107238:	77 6c                	ja     f01072a6 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f010723a:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010723e:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0107243:	99                   	cltd   
f0107244:	f7 fb                	idiv   %ebx
f0107246:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010724c:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0107250:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0107255:	99                   	cltd   
f0107256:	f7 fb                	idiv   %ebx
f0107258:	89 c3                	mov    %eax,%ebx
f010725a:	89 c8                	mov    %ecx,%eax
f010725c:	99                   	cltd   
f010725d:	f7 fb                	idiv   %ebx
f010725f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0107262:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107265:	25 01 00 00 80       	and    $0x80000001,%eax
f010726a:	85 c0                	test   %eax,%eax
f010726c:	79 05                	jns    f0107273 <kclock_set_quantum+0x4c>
f010726e:	48                   	dec    %eax
f010726f:	83 c8 fe             	or     $0xfffffffe,%eax
f0107272:	40                   	inc    %eax
f0107273:	83 f8 01             	cmp    $0x1,%eax
f0107276:	75 03                	jne    f010727b <kclock_set_quantum+0x54>
			cnt++;
f0107278:	ff 45 f4             	incl   -0xc(%ebp)
f010727b:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0107282:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0107286:	8a 45 ef             	mov    -0x11(%ebp),%al
f0107289:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010728c:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f010728d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107290:	0f b7 c0             	movzwl %ax,%eax
f0107293:	83 ec 0c             	sub    $0xc,%esp
f0107296:	50                   	push   %eax
f0107297:	e8 25 00 00 00       	call   f01072c1 <kclock_write_cnt0_LSB_first>
f010729c:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f010729f:	e8 9d fe ff ff       	call   f0107141 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01072a4:	eb 16                	jmp    f01072bc <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01072a6:	6a 35                	push   $0x35
f01072a8:	68 f0 d4 11 f0       	push   $0xf011d4f0
f01072ad:	68 c8 00 00 00       	push   $0xc8
f01072b2:	68 4c d5 11 f0       	push   $0xf011d54c
f01072b7:	e8 d7 8e ff ff       	call   f0100193 <_panic>
	}
}
f01072bc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01072bf:	c9                   	leave  
f01072c0:	c3                   	ret    

f01072c1 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f01072c1:	55                   	push   %ebp
f01072c2:	89 e5                	mov    %esp,%ebp
f01072c4:	83 ec 14             	sub    $0x14,%esp
f01072c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01072ca:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f01072ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01072d1:	0f b6 c0             	movzbl %al,%eax
f01072d4:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f01072db:	88 45 f6             	mov    %al,-0xa(%ebp)
f01072de:	8a 45 f6             	mov    -0xa(%ebp),%al
f01072e1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01072e4:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f01072e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01072e8:	66 c1 e8 08          	shr    $0x8,%ax
f01072ec:	0f b6 c0             	movzbl %al,%eax
f01072ef:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f01072f6:	88 45 f7             	mov    %al,-0x9(%ebp)
f01072f9:	8a 45 f7             	mov    -0x9(%ebp),%al
f01072fc:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01072ff:	ee                   	out    %al,(%dx)
}
f0107300:	90                   	nop
f0107301:	c9                   	leave  
f0107302:	c3                   	ret    

f0107303 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0107303:	55                   	push   %ebp
f0107304:	89 e5                	mov    %esp,%ebp
f0107306:	83 ec 20             	sub    $0x20,%esp
f0107309:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107310:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0107313:	89 c2                	mov    %eax,%edx
f0107315:	ec                   	in     (%dx),%al
f0107316:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0107319:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010731c:	88 45 ff             	mov    %al,-0x1(%ebp)
f010731f:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107326:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107329:	89 c2                	mov    %eax,%edx
f010732b:	ec                   	in     (%dx),%al
f010732c:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f010732f:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0107332:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0107335:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0107339:	c1 e0 08             	shl    $0x8,%eax
f010733c:	89 c2                	mov    %eax,%edx
f010733e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0107342:	09 d0                	or     %edx,%eax
f0107344:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010734b:	c9                   	leave  
f010734c:	c3                   	ret    

f010734d <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f010734d:	55                   	push   %ebp
f010734e:	89 e5                	mov    %esp,%ebp
f0107350:	83 ec 30             	sub    $0x30,%esp
f0107353:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010735a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010735d:	89 c2                	mov    %eax,%edx
f010735f:	ec                   	in     (%dx),%al
f0107360:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0107363:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0107366:	88 45 ff             	mov    %al,-0x1(%ebp)
f0107369:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0107370:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0107374:	8a 45 dc             	mov    -0x24(%ebp),%al
f0107377:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010737a:	ee                   	out    %al,(%dx)
f010737b:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107382:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107385:	89 c2                	mov    %eax,%edx
f0107387:	ec                   	in     (%dx),%al
f0107388:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f010738b:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f010738e:	88 45 f3             	mov    %al,-0xd(%ebp)
f0107391:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107398:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010739b:	89 c2                	mov    %eax,%edx
f010739d:	ec                   	in     (%dx),%al
f010739e:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01073a1:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01073a4:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01073a7:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01073ab:	c1 e0 08             	shl    $0x8,%eax
f01073ae:	89 c2                	mov    %eax,%edx
f01073b0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01073b4:	09 d0                	or     %edx,%eax
f01073b6:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f01073ba:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01073be:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f01073c5:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01073c8:	8a 45 df             	mov    -0x21(%ebp),%al
f01073cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01073ce:	ee                   	out    %al,(%dx)

	return cnt0 ;
f01073cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01073d2:	c9                   	leave  
f01073d3:	c3                   	ret    

f01073d4 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f01073d4:	55                   	push   %ebp
f01073d5:	89 e5                	mov    %esp,%ebp
f01073d7:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f01073da:	c7 05 44 58 32 f0 01 	movl   $0x1,0xf0325844
f01073e1:	00 00 00 
f01073e4:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f01073eb:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
f01073ef:	8a 45 b2             	mov    -0x4e(%ebp),%al
f01073f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01073f5:	ee                   	out    %al,(%dx)
f01073f6:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f01073fd:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0107401:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0107404:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107407:	ee                   	out    %al,(%dx)
f0107408:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f010740f:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0107413:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0107416:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107419:	ee                   	out    %al,(%dx)
f010741a:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0107421:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0107425:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0107428:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010742b:	ee                   	out    %al,(%dx)
f010742c:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0107433:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0107437:	8a 45 b6             	mov    -0x4a(%ebp),%al
f010743a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010743d:	ee                   	out    %al,(%dx)
f010743e:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0107445:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0107449:	8a 45 b7             	mov    -0x49(%ebp),%al
f010744c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010744f:	ee                   	out    %al,(%dx)
f0107450:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0107457:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f010745b:	8a 45 b8             	mov    -0x48(%ebp),%al
f010745e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0107461:	ee                   	out    %al,(%dx)
f0107462:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0107469:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f010746d:	8a 45 b9             	mov    -0x47(%ebp),%al
f0107470:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0107473:	ee                   	out    %al,(%dx)
f0107474:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f010747b:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f010747f:	8a 45 ba             	mov    -0x46(%ebp),%al
f0107482:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0107485:	ee                   	out    %al,(%dx)
f0107486:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f010748d:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0107491:	8a 45 bb             	mov    -0x45(%ebp),%al
f0107494:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0107497:	ee                   	out    %al,(%dx)
f0107498:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f010749f:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f01074a3:	8a 45 bc             	mov    -0x44(%ebp),%al
f01074a6:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01074a9:	ee                   	out    %al,(%dx)
f01074aa:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f01074b1:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f01074b5:	8a 45 bd             	mov    -0x43(%ebp),%al
f01074b8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01074bb:	ee                   	out    %al,(%dx)
f01074bc:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f01074c3:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f01074c7:	8a 45 be             	mov    -0x42(%ebp),%al
f01074ca:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01074cd:	ee                   	out    %al,(%dx)
f01074ce:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f01074d5:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f01074d9:	8a 45 bf             	mov    -0x41(%ebp),%al
f01074dc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01074df:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f01074e0:	66 a1 78 49 15 f0    	mov    0xf0154978,%ax
f01074e6:	66 83 f8 ff          	cmp    $0xffff,%ax
f01074ea:	74 15                	je     f0107501 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f01074ec:	66 a1 78 49 15 f0    	mov    0xf0154978,%ax
f01074f2:	0f b7 c0             	movzwl %ax,%eax
f01074f5:	83 ec 0c             	sub    $0xc,%esp
f01074f8:	50                   	push   %eax
f01074f9:	e8 06 00 00 00       	call   f0107504 <irq_setmask_8259A>
f01074fe:	83 c4 10             	add    $0x10,%esp
}
f0107501:	90                   	nop
f0107502:	c9                   	leave  
f0107503:	c3                   	ret    

f0107504 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0107504:	55                   	push   %ebp
f0107505:	89 e5                	mov    %esp,%ebp
f0107507:	83 ec 14             	sub    $0x14,%esp
f010750a:	8b 45 08             	mov    0x8(%ebp),%eax
f010750d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0107511:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107514:	66 a3 78 49 15 f0    	mov    %ax,0xf0154978
	if (!didinit)
f010751a:	a1 44 58 32 f0       	mov    0xf0325844,%eax
f010751f:	85 c0                	test   %eax,%eax
f0107521:	74 34                	je     f0107557 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0107523:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107526:	0f b6 c0             	movzbl %al,%eax
f0107529:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0107530:	88 45 f6             	mov    %al,-0xa(%ebp)
f0107533:	8a 45 f6             	mov    -0xa(%ebp),%al
f0107536:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107539:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f010753a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010753d:	66 c1 e8 08          	shr    $0x8,%ax
f0107541:	0f b6 c0             	movzbl %al,%eax
f0107544:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f010754b:	88 45 f7             	mov    %al,-0x9(%ebp)
f010754e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0107551:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0107554:	ee                   	out    %al,(%dx)
f0107555:	eb 01                	jmp    f0107558 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0107557:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0107558:	c9                   	leave  
f0107559:	c3                   	ret    

f010755a <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f010755a:	55                   	push   %ebp
f010755b:	89 e5                	mov    %esp,%ebp
f010755d:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0107560:	83 ec 0c             	sub    $0xc,%esp
f0107563:	ff 75 08             	pushl  0x8(%ebp)
f0107566:	e8 a0 97 ff ff       	call   f0100d0b <cputchar>
f010756b:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f010756e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107571:	83 c0 04             	add    $0x4,%eax
f0107574:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0107577:	90                   	nop
f0107578:	c9                   	leave  
f0107579:	c3                   	ret    

f010757a <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f010757a:	55                   	push   %ebp
f010757b:	89 e5                	mov    %esp,%ebp
f010757d:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0107580:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0107587:	ff 75 0c             	pushl  0xc(%ebp)
f010758a:	ff 75 08             	pushl  0x8(%ebp)
f010758d:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107590:	50                   	push   %eax
f0107591:	68 5a 75 10 f0       	push   $0xf010755a
f0107596:	e8 39 1c 01 00       	call   f01191d4 <vprintfmt>
f010759b:	83 c4 10             	add    $0x10,%esp
	return cnt;
f010759e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01075a1:	c9                   	leave  
f01075a2:	c3                   	ret    

f01075a3 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f01075a3:	55                   	push   %ebp
f01075a4:	89 e5                	mov    %esp,%ebp
f01075a6:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f01075a9:	8d 45 0c             	lea    0xc(%ebp),%eax
f01075ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f01075af:	8b 45 08             	mov    0x8(%ebp),%eax
f01075b2:	83 ec 08             	sub    $0x8,%esp
f01075b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01075b8:	50                   	push   %eax
f01075b9:	e8 bc ff ff ff       	call   f010757a <vcprintf>
f01075be:	83 c4 10             	add    $0x10,%esp
f01075c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f01075c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01075c7:	c9                   	leave  
f01075c8:	c3                   	ret    

f01075c9 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f01075c9:	55                   	push   %ebp
f01075ca:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f01075cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01075cf:	83 f8 13             	cmp    $0x13,%eax
f01075d2:	77 0c                	ja     f01075e0 <trapname+0x17>
		return excnames[trapno];
f01075d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01075d7:	8b 04 85 e0 d9 11 f0 	mov    -0xfee2620(,%eax,4),%eax
f01075de:	eb 12                	jmp    f01075f2 <trapname+0x29>
	if (trapno == T_SYSCALL)
f01075e0:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f01075e4:	75 07                	jne    f01075ed <trapname+0x24>
		return "System call";
f01075e6:	b8 60 d5 11 f0       	mov    $0xf011d560,%eax
f01075eb:	eb 05                	jmp    f01075f2 <trapname+0x29>
	return "(unknown trap)";
f01075ed:	b8 6c d5 11 f0       	mov    $0xf011d56c,%eax
}
f01075f2:	5d                   	pop    %ebp
f01075f3:	c3                   	ret    

f01075f4 <idt_init>:


void
idt_init(void)
{
f01075f4:	55                   	push   %ebp
f01075f5:	89 e5                	mov    %esp,%ebp
f01075f7:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f01075fa:	b8 02 90 10 f0       	mov    $0xf0109002,%eax
f01075ff:	66 a3 f0 58 32 f0    	mov    %ax,0xf03258f0
f0107605:	66 c7 05 f2 58 32 f0 	movw   $0x8,0xf03258f2
f010760c:	08 00 
f010760e:	a0 f4 58 32 f0       	mov    0xf03258f4,%al
f0107613:	83 e0 e0             	and    $0xffffffe0,%eax
f0107616:	a2 f4 58 32 f0       	mov    %al,0xf03258f4
f010761b:	a0 f4 58 32 f0       	mov    0xf03258f4,%al
f0107620:	83 e0 1f             	and    $0x1f,%eax
f0107623:	a2 f4 58 32 f0       	mov    %al,0xf03258f4
f0107628:	a0 f5 58 32 f0       	mov    0xf03258f5,%al
f010762d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107630:	83 c8 0e             	or     $0xe,%eax
f0107633:	a2 f5 58 32 f0       	mov    %al,0xf03258f5
f0107638:	a0 f5 58 32 f0       	mov    0xf03258f5,%al
f010763d:	83 e0 ef             	and    $0xffffffef,%eax
f0107640:	a2 f5 58 32 f0       	mov    %al,0xf03258f5
f0107645:	a0 f5 58 32 f0       	mov    0xf03258f5,%al
f010764a:	83 e0 9f             	and    $0xffffff9f,%eax
f010764d:	a2 f5 58 32 f0       	mov    %al,0xf03258f5
f0107652:	a0 f5 58 32 f0       	mov    0xf03258f5,%al
f0107657:	83 c8 80             	or     $0xffffff80,%eax
f010765a:	a2 f5 58 32 f0       	mov    %al,0xf03258f5
f010765f:	b8 02 90 10 f0       	mov    $0xf0109002,%eax
f0107664:	c1 e8 10             	shr    $0x10,%eax
f0107667:	66 a3 f6 58 32 f0    	mov    %ax,0xf03258f6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010766d:	b8 0a 90 10 f0       	mov    $0xf010900a,%eax
f0107672:	66 a3 00 5a 32 f0    	mov    %ax,0xf0325a00
f0107678:	66 c7 05 02 5a 32 f0 	movw   $0x8,0xf0325a02
f010767f:	08 00 
f0107681:	a0 04 5a 32 f0       	mov    0xf0325a04,%al
f0107686:	83 e0 e0             	and    $0xffffffe0,%eax
f0107689:	a2 04 5a 32 f0       	mov    %al,0xf0325a04
f010768e:	a0 04 5a 32 f0       	mov    0xf0325a04,%al
f0107693:	83 e0 1f             	and    $0x1f,%eax
f0107696:	a2 04 5a 32 f0       	mov    %al,0xf0325a04
f010769b:	a0 05 5a 32 f0       	mov    0xf0325a05,%al
f01076a0:	83 e0 f0             	and    $0xfffffff0,%eax
f01076a3:	83 c8 0e             	or     $0xe,%eax
f01076a6:	a2 05 5a 32 f0       	mov    %al,0xf0325a05
f01076ab:	a0 05 5a 32 f0       	mov    0xf0325a05,%al
f01076b0:	83 e0 ef             	and    $0xffffffef,%eax
f01076b3:	a2 05 5a 32 f0       	mov    %al,0xf0325a05
f01076b8:	a0 05 5a 32 f0       	mov    0xf0325a05,%al
f01076bd:	83 c8 60             	or     $0x60,%eax
f01076c0:	a2 05 5a 32 f0       	mov    %al,0xf0325a05
f01076c5:	a0 05 5a 32 f0       	mov    0xf0325a05,%al
f01076ca:	83 c8 80             	or     $0xffffff80,%eax
f01076cd:	a2 05 5a 32 f0       	mov    %al,0xf0325a05
f01076d2:	b8 0a 90 10 f0       	mov    $0xf010900a,%eax
f01076d7:	c1 e8 10             	shr    $0x10,%eax
f01076da:	66 a3 06 5a 32 f0    	mov    %ax,0xf0325a06
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f01076e0:	b8 14 90 10 f0       	mov    $0xf0109014,%eax
f01076e5:	66 a3 c0 58 32 f0    	mov    %ax,0xf03258c0
f01076eb:	66 c7 05 c2 58 32 f0 	movw   $0x8,0xf03258c2
f01076f2:	08 00 
f01076f4:	a0 c4 58 32 f0       	mov    0xf03258c4,%al
f01076f9:	83 e0 e0             	and    $0xffffffe0,%eax
f01076fc:	a2 c4 58 32 f0       	mov    %al,0xf03258c4
f0107701:	a0 c4 58 32 f0       	mov    0xf03258c4,%al
f0107706:	83 e0 1f             	and    $0x1f,%eax
f0107709:	a2 c4 58 32 f0       	mov    %al,0xf03258c4
f010770e:	a0 c5 58 32 f0       	mov    0xf03258c5,%al
f0107713:	83 e0 f0             	and    $0xfffffff0,%eax
f0107716:	83 c8 0e             	or     $0xe,%eax
f0107719:	a2 c5 58 32 f0       	mov    %al,0xf03258c5
f010771e:	a0 c5 58 32 f0       	mov    0xf03258c5,%al
f0107723:	83 e0 ef             	and    $0xffffffef,%eax
f0107726:	a2 c5 58 32 f0       	mov    %al,0xf03258c5
f010772b:	a0 c5 58 32 f0       	mov    0xf03258c5,%al
f0107730:	83 e0 9f             	and    $0xffffff9f,%eax
f0107733:	a2 c5 58 32 f0       	mov    %al,0xf03258c5
f0107738:	a0 c5 58 32 f0       	mov    0xf03258c5,%al
f010773d:	83 c8 80             	or     $0xffffff80,%eax
f0107740:	a2 c5 58 32 f0       	mov    %al,0xf03258c5
f0107745:	b8 14 90 10 f0       	mov    $0xf0109014,%eax
f010774a:	c1 e8 10             	shr    $0x10,%eax
f010774d:	66 a3 c6 58 32 f0    	mov    %ax,0xf03258c6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f0107753:	b8 1c 90 10 f0       	mov    $0xf010901c,%eax
f0107758:	66 a3 80 58 32 f0    	mov    %ax,0xf0325880
f010775e:	66 c7 05 82 58 32 f0 	movw   $0x8,0xf0325882
f0107765:	08 00 
f0107767:	a0 84 58 32 f0       	mov    0xf0325884,%al
f010776c:	83 e0 e0             	and    $0xffffffe0,%eax
f010776f:	a2 84 58 32 f0       	mov    %al,0xf0325884
f0107774:	a0 84 58 32 f0       	mov    0xf0325884,%al
f0107779:	83 e0 1f             	and    $0x1f,%eax
f010777c:	a2 84 58 32 f0       	mov    %al,0xf0325884
f0107781:	a0 85 58 32 f0       	mov    0xf0325885,%al
f0107786:	83 e0 f0             	and    $0xfffffff0,%eax
f0107789:	83 c8 0e             	or     $0xe,%eax
f010778c:	a2 85 58 32 f0       	mov    %al,0xf0325885
f0107791:	a0 85 58 32 f0       	mov    0xf0325885,%al
f0107796:	83 e0 ef             	and    $0xffffffef,%eax
f0107799:	a2 85 58 32 f0       	mov    %al,0xf0325885
f010779e:	a0 85 58 32 f0       	mov    0xf0325885,%al
f01077a3:	83 c8 60             	or     $0x60,%eax
f01077a6:	a2 85 58 32 f0       	mov    %al,0xf0325885
f01077ab:	a0 85 58 32 f0       	mov    0xf0325885,%al
f01077b0:	83 c8 80             	or     $0xffffff80,%eax
f01077b3:	a2 85 58 32 f0       	mov    %al,0xf0325885
f01077b8:	b8 1c 90 10 f0       	mov    $0xf010901c,%eax
f01077bd:	c1 e8 10             	shr    $0x10,%eax
f01077c0:	66 a3 86 58 32 f0    	mov    %ax,0xf0325886
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f01077c6:	b8 26 90 10 f0       	mov    $0xf0109026,%eax
f01077cb:	66 a3 88 58 32 f0    	mov    %ax,0xf0325888
f01077d1:	66 c7 05 8a 58 32 f0 	movw   $0x8,0xf032588a
f01077d8:	08 00 
f01077da:	a0 8c 58 32 f0       	mov    0xf032588c,%al
f01077df:	83 e0 e0             	and    $0xffffffe0,%eax
f01077e2:	a2 8c 58 32 f0       	mov    %al,0xf032588c
f01077e7:	a0 8c 58 32 f0       	mov    0xf032588c,%al
f01077ec:	83 e0 1f             	and    $0x1f,%eax
f01077ef:	a2 8c 58 32 f0       	mov    %al,0xf032588c
f01077f4:	a0 8d 58 32 f0       	mov    0xf032588d,%al
f01077f9:	83 c8 0f             	or     $0xf,%eax
f01077fc:	a2 8d 58 32 f0       	mov    %al,0xf032588d
f0107801:	a0 8d 58 32 f0       	mov    0xf032588d,%al
f0107806:	83 e0 ef             	and    $0xffffffef,%eax
f0107809:	a2 8d 58 32 f0       	mov    %al,0xf032588d
f010780e:	a0 8d 58 32 f0       	mov    0xf032588d,%al
f0107813:	83 c8 60             	or     $0x60,%eax
f0107816:	a2 8d 58 32 f0       	mov    %al,0xf032588d
f010781b:	a0 8d 58 32 f0       	mov    0xf032588d,%al
f0107820:	83 c8 80             	or     $0xffffff80,%eax
f0107823:	a2 8d 58 32 f0       	mov    %al,0xf032588d
f0107828:	b8 26 90 10 f0       	mov    $0xf0109026,%eax
f010782d:	c1 e8 10             	shr    $0x10,%eax
f0107830:	66 a3 8e 58 32 f0    	mov    %ax,0xf032588e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f0107836:	b8 30 90 10 f0       	mov    $0xf0109030,%eax
f010783b:	66 a3 90 58 32 f0    	mov    %ax,0xf0325890
f0107841:	66 c7 05 92 58 32 f0 	movw   $0x8,0xf0325892
f0107848:	08 00 
f010784a:	a0 94 58 32 f0       	mov    0xf0325894,%al
f010784f:	83 e0 e0             	and    $0xffffffe0,%eax
f0107852:	a2 94 58 32 f0       	mov    %al,0xf0325894
f0107857:	a0 94 58 32 f0       	mov    0xf0325894,%al
f010785c:	83 e0 1f             	and    $0x1f,%eax
f010785f:	a2 94 58 32 f0       	mov    %al,0xf0325894
f0107864:	a0 95 58 32 f0       	mov    0xf0325895,%al
f0107869:	83 e0 f0             	and    $0xfffffff0,%eax
f010786c:	83 c8 0e             	or     $0xe,%eax
f010786f:	a2 95 58 32 f0       	mov    %al,0xf0325895
f0107874:	a0 95 58 32 f0       	mov    0xf0325895,%al
f0107879:	83 e0 ef             	and    $0xffffffef,%eax
f010787c:	a2 95 58 32 f0       	mov    %al,0xf0325895
f0107881:	a0 95 58 32 f0       	mov    0xf0325895,%al
f0107886:	83 c8 60             	or     $0x60,%eax
f0107889:	a2 95 58 32 f0       	mov    %al,0xf0325895
f010788e:	a0 95 58 32 f0       	mov    0xf0325895,%al
f0107893:	83 c8 80             	or     $0xffffff80,%eax
f0107896:	a2 95 58 32 f0       	mov    %al,0xf0325895
f010789b:	b8 30 90 10 f0       	mov    $0xf0109030,%eax
f01078a0:	c1 e8 10             	shr    $0x10,%eax
f01078a3:	66 a3 96 58 32 f0    	mov    %ax,0xf0325896
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f01078a9:	b8 3a 90 10 f0       	mov    $0xf010903a,%eax
f01078ae:	66 a3 98 58 32 f0    	mov    %ax,0xf0325898
f01078b4:	66 c7 05 9a 58 32 f0 	movw   $0x8,0xf032589a
f01078bb:	08 00 
f01078bd:	a0 9c 58 32 f0       	mov    0xf032589c,%al
f01078c2:	83 e0 e0             	and    $0xffffffe0,%eax
f01078c5:	a2 9c 58 32 f0       	mov    %al,0xf032589c
f01078ca:	a0 9c 58 32 f0       	mov    0xf032589c,%al
f01078cf:	83 e0 1f             	and    $0x1f,%eax
f01078d2:	a2 9c 58 32 f0       	mov    %al,0xf032589c
f01078d7:	a0 9d 58 32 f0       	mov    0xf032589d,%al
f01078dc:	83 c8 0f             	or     $0xf,%eax
f01078df:	a2 9d 58 32 f0       	mov    %al,0xf032589d
f01078e4:	a0 9d 58 32 f0       	mov    0xf032589d,%al
f01078e9:	83 e0 ef             	and    $0xffffffef,%eax
f01078ec:	a2 9d 58 32 f0       	mov    %al,0xf032589d
f01078f1:	a0 9d 58 32 f0       	mov    0xf032589d,%al
f01078f6:	83 c8 60             	or     $0x60,%eax
f01078f9:	a2 9d 58 32 f0       	mov    %al,0xf032589d
f01078fe:	a0 9d 58 32 f0       	mov    0xf032589d,%al
f0107903:	83 c8 80             	or     $0xffffff80,%eax
f0107906:	a2 9d 58 32 f0       	mov    %al,0xf032589d
f010790b:	b8 3a 90 10 f0       	mov    $0xf010903a,%eax
f0107910:	c1 e8 10             	shr    $0x10,%eax
f0107913:	66 a3 9e 58 32 f0    	mov    %ax,0xf032589e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f0107919:	b8 44 90 10 f0       	mov    $0xf0109044,%eax
f010791e:	66 a3 a0 58 32 f0    	mov    %ax,0xf03258a0
f0107924:	66 c7 05 a2 58 32 f0 	movw   $0x8,0xf03258a2
f010792b:	08 00 
f010792d:	a0 a4 58 32 f0       	mov    0xf03258a4,%al
f0107932:	83 e0 e0             	and    $0xffffffe0,%eax
f0107935:	a2 a4 58 32 f0       	mov    %al,0xf03258a4
f010793a:	a0 a4 58 32 f0       	mov    0xf03258a4,%al
f010793f:	83 e0 1f             	and    $0x1f,%eax
f0107942:	a2 a4 58 32 f0       	mov    %al,0xf03258a4
f0107947:	a0 a5 58 32 f0       	mov    0xf03258a5,%al
f010794c:	83 c8 0f             	or     $0xf,%eax
f010794f:	a2 a5 58 32 f0       	mov    %al,0xf03258a5
f0107954:	a0 a5 58 32 f0       	mov    0xf03258a5,%al
f0107959:	83 e0 ef             	and    $0xffffffef,%eax
f010795c:	a2 a5 58 32 f0       	mov    %al,0xf03258a5
f0107961:	a0 a5 58 32 f0       	mov    0xf03258a5,%al
f0107966:	83 c8 60             	or     $0x60,%eax
f0107969:	a2 a5 58 32 f0       	mov    %al,0xf03258a5
f010796e:	a0 a5 58 32 f0       	mov    0xf03258a5,%al
f0107973:	83 c8 80             	or     $0xffffff80,%eax
f0107976:	a2 a5 58 32 f0       	mov    %al,0xf03258a5
f010797b:	b8 44 90 10 f0       	mov    $0xf0109044,%eax
f0107980:	c1 e8 10             	shr    $0x10,%eax
f0107983:	66 a3 a6 58 32 f0    	mov    %ax,0xf03258a6
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f0107989:	b8 4e 90 10 f0       	mov    $0xf010904e,%eax
f010798e:	66 a3 a8 58 32 f0    	mov    %ax,0xf03258a8
f0107994:	66 c7 05 aa 58 32 f0 	movw   $0x8,0xf03258aa
f010799b:	08 00 
f010799d:	a0 ac 58 32 f0       	mov    0xf03258ac,%al
f01079a2:	83 e0 e0             	and    $0xffffffe0,%eax
f01079a5:	a2 ac 58 32 f0       	mov    %al,0xf03258ac
f01079aa:	a0 ac 58 32 f0       	mov    0xf03258ac,%al
f01079af:	83 e0 1f             	and    $0x1f,%eax
f01079b2:	a2 ac 58 32 f0       	mov    %al,0xf03258ac
f01079b7:	a0 ad 58 32 f0       	mov    0xf03258ad,%al
f01079bc:	83 e0 f0             	and    $0xfffffff0,%eax
f01079bf:	83 c8 0e             	or     $0xe,%eax
f01079c2:	a2 ad 58 32 f0       	mov    %al,0xf03258ad
f01079c7:	a0 ad 58 32 f0       	mov    0xf03258ad,%al
f01079cc:	83 e0 ef             	and    $0xffffffef,%eax
f01079cf:	a2 ad 58 32 f0       	mov    %al,0xf03258ad
f01079d4:	a0 ad 58 32 f0       	mov    0xf03258ad,%al
f01079d9:	83 c8 60             	or     $0x60,%eax
f01079dc:	a2 ad 58 32 f0       	mov    %al,0xf03258ad
f01079e1:	a0 ad 58 32 f0       	mov    0xf03258ad,%al
f01079e6:	83 c8 80             	or     $0xffffff80,%eax
f01079e9:	a2 ad 58 32 f0       	mov    %al,0xf03258ad
f01079ee:	b8 4e 90 10 f0       	mov    $0xf010904e,%eax
f01079f3:	c1 e8 10             	shr    $0x10,%eax
f01079f6:	66 a3 ae 58 32 f0    	mov    %ax,0xf03258ae
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f01079fc:	b8 58 90 10 f0       	mov    $0xf0109058,%eax
f0107a01:	66 a3 b0 58 32 f0    	mov    %ax,0xf03258b0
f0107a07:	66 c7 05 b2 58 32 f0 	movw   $0x8,0xf03258b2
f0107a0e:	08 00 
f0107a10:	a0 b4 58 32 f0       	mov    0xf03258b4,%al
f0107a15:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a18:	a2 b4 58 32 f0       	mov    %al,0xf03258b4
f0107a1d:	a0 b4 58 32 f0       	mov    0xf03258b4,%al
f0107a22:	83 e0 1f             	and    $0x1f,%eax
f0107a25:	a2 b4 58 32 f0       	mov    %al,0xf03258b4
f0107a2a:	a0 b5 58 32 f0       	mov    0xf03258b5,%al
f0107a2f:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a32:	83 c8 0e             	or     $0xe,%eax
f0107a35:	a2 b5 58 32 f0       	mov    %al,0xf03258b5
f0107a3a:	a0 b5 58 32 f0       	mov    0xf03258b5,%al
f0107a3f:	83 e0 ef             	and    $0xffffffef,%eax
f0107a42:	a2 b5 58 32 f0       	mov    %al,0xf03258b5
f0107a47:	a0 b5 58 32 f0       	mov    0xf03258b5,%al
f0107a4c:	83 c8 60             	or     $0x60,%eax
f0107a4f:	a2 b5 58 32 f0       	mov    %al,0xf03258b5
f0107a54:	a0 b5 58 32 f0       	mov    0xf03258b5,%al
f0107a59:	83 c8 80             	or     $0xffffff80,%eax
f0107a5c:	a2 b5 58 32 f0       	mov    %al,0xf03258b5
f0107a61:	b8 58 90 10 f0       	mov    $0xf0109058,%eax
f0107a66:	c1 e8 10             	shr    $0x10,%eax
f0107a69:	66 a3 b6 58 32 f0    	mov    %ax,0xf03258b6
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f0107a6f:	b8 62 90 10 f0       	mov    $0xf0109062,%eax
f0107a74:	66 a3 b8 58 32 f0    	mov    %ax,0xf03258b8
f0107a7a:	66 c7 05 ba 58 32 f0 	movw   $0x8,0xf03258ba
f0107a81:	08 00 
f0107a83:	a0 bc 58 32 f0       	mov    0xf03258bc,%al
f0107a88:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a8b:	a2 bc 58 32 f0       	mov    %al,0xf03258bc
f0107a90:	a0 bc 58 32 f0       	mov    0xf03258bc,%al
f0107a95:	83 e0 1f             	and    $0x1f,%eax
f0107a98:	a2 bc 58 32 f0       	mov    %al,0xf03258bc
f0107a9d:	a0 bd 58 32 f0       	mov    0xf03258bd,%al
f0107aa2:	83 e0 f0             	and    $0xfffffff0,%eax
f0107aa5:	83 c8 0e             	or     $0xe,%eax
f0107aa8:	a2 bd 58 32 f0       	mov    %al,0xf03258bd
f0107aad:	a0 bd 58 32 f0       	mov    0xf03258bd,%al
f0107ab2:	83 e0 ef             	and    $0xffffffef,%eax
f0107ab5:	a2 bd 58 32 f0       	mov    %al,0xf03258bd
f0107aba:	a0 bd 58 32 f0       	mov    0xf03258bd,%al
f0107abf:	83 c8 60             	or     $0x60,%eax
f0107ac2:	a2 bd 58 32 f0       	mov    %al,0xf03258bd
f0107ac7:	a0 bd 58 32 f0       	mov    0xf03258bd,%al
f0107acc:	83 c8 80             	or     $0xffffff80,%eax
f0107acf:	a2 bd 58 32 f0       	mov    %al,0xf03258bd
f0107ad4:	b8 62 90 10 f0       	mov    $0xf0109062,%eax
f0107ad9:	c1 e8 10             	shr    $0x10,%eax
f0107adc:	66 a3 be 58 32 f0    	mov    %ax,0xf03258be
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f0107ae2:	b8 6c 90 10 f0       	mov    $0xf010906c,%eax
f0107ae7:	66 a3 d0 58 32 f0    	mov    %ax,0xf03258d0
f0107aed:	66 c7 05 d2 58 32 f0 	movw   $0x8,0xf03258d2
f0107af4:	08 00 
f0107af6:	a0 d4 58 32 f0       	mov    0xf03258d4,%al
f0107afb:	83 e0 e0             	and    $0xffffffe0,%eax
f0107afe:	a2 d4 58 32 f0       	mov    %al,0xf03258d4
f0107b03:	a0 d4 58 32 f0       	mov    0xf03258d4,%al
f0107b08:	83 e0 1f             	and    $0x1f,%eax
f0107b0b:	a2 d4 58 32 f0       	mov    %al,0xf03258d4
f0107b10:	a0 d5 58 32 f0       	mov    0xf03258d5,%al
f0107b15:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b18:	83 c8 0e             	or     $0xe,%eax
f0107b1b:	a2 d5 58 32 f0       	mov    %al,0xf03258d5
f0107b20:	a0 d5 58 32 f0       	mov    0xf03258d5,%al
f0107b25:	83 e0 ef             	and    $0xffffffef,%eax
f0107b28:	a2 d5 58 32 f0       	mov    %al,0xf03258d5
f0107b2d:	a0 d5 58 32 f0       	mov    0xf03258d5,%al
f0107b32:	83 c8 60             	or     $0x60,%eax
f0107b35:	a2 d5 58 32 f0       	mov    %al,0xf03258d5
f0107b3a:	a0 d5 58 32 f0       	mov    0xf03258d5,%al
f0107b3f:	83 c8 80             	or     $0xffffff80,%eax
f0107b42:	a2 d5 58 32 f0       	mov    %al,0xf03258d5
f0107b47:	b8 6c 90 10 f0       	mov    $0xf010906c,%eax
f0107b4c:	c1 e8 10             	shr    $0x10,%eax
f0107b4f:	66 a3 d6 58 32 f0    	mov    %ax,0xf03258d6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f0107b55:	b8 74 90 10 f0       	mov    $0xf0109074,%eax
f0107b5a:	66 a3 d8 58 32 f0    	mov    %ax,0xf03258d8
f0107b60:	66 c7 05 da 58 32 f0 	movw   $0x8,0xf03258da
f0107b67:	08 00 
f0107b69:	a0 dc 58 32 f0       	mov    0xf03258dc,%al
f0107b6e:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b71:	a2 dc 58 32 f0       	mov    %al,0xf03258dc
f0107b76:	a0 dc 58 32 f0       	mov    0xf03258dc,%al
f0107b7b:	83 e0 1f             	and    $0x1f,%eax
f0107b7e:	a2 dc 58 32 f0       	mov    %al,0xf03258dc
f0107b83:	a0 dd 58 32 f0       	mov    0xf03258dd,%al
f0107b88:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b8b:	83 c8 0e             	or     $0xe,%eax
f0107b8e:	a2 dd 58 32 f0       	mov    %al,0xf03258dd
f0107b93:	a0 dd 58 32 f0       	mov    0xf03258dd,%al
f0107b98:	83 e0 ef             	and    $0xffffffef,%eax
f0107b9b:	a2 dd 58 32 f0       	mov    %al,0xf03258dd
f0107ba0:	a0 dd 58 32 f0       	mov    0xf03258dd,%al
f0107ba5:	83 c8 60             	or     $0x60,%eax
f0107ba8:	a2 dd 58 32 f0       	mov    %al,0xf03258dd
f0107bad:	a0 dd 58 32 f0       	mov    0xf03258dd,%al
f0107bb2:	83 c8 80             	or     $0xffffff80,%eax
f0107bb5:	a2 dd 58 32 f0       	mov    %al,0xf03258dd
f0107bba:	b8 74 90 10 f0       	mov    $0xf0109074,%eax
f0107bbf:	c1 e8 10             	shr    $0x10,%eax
f0107bc2:	66 a3 de 58 32 f0    	mov    %ax,0xf03258de
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f0107bc8:	b8 78 90 10 f0       	mov    $0xf0109078,%eax
f0107bcd:	66 a3 e0 58 32 f0    	mov    %ax,0xf03258e0
f0107bd3:	66 c7 05 e2 58 32 f0 	movw   $0x8,0xf03258e2
f0107bda:	08 00 
f0107bdc:	a0 e4 58 32 f0       	mov    0xf03258e4,%al
f0107be1:	83 e0 e0             	and    $0xffffffe0,%eax
f0107be4:	a2 e4 58 32 f0       	mov    %al,0xf03258e4
f0107be9:	a0 e4 58 32 f0       	mov    0xf03258e4,%al
f0107bee:	83 e0 1f             	and    $0x1f,%eax
f0107bf1:	a2 e4 58 32 f0       	mov    %al,0xf03258e4
f0107bf6:	a0 e5 58 32 f0       	mov    0xf03258e5,%al
f0107bfb:	83 e0 f0             	and    $0xfffffff0,%eax
f0107bfe:	83 c8 0e             	or     $0xe,%eax
f0107c01:	a2 e5 58 32 f0       	mov    %al,0xf03258e5
f0107c06:	a0 e5 58 32 f0       	mov    0xf03258e5,%al
f0107c0b:	83 e0 ef             	and    $0xffffffef,%eax
f0107c0e:	a2 e5 58 32 f0       	mov    %al,0xf03258e5
f0107c13:	a0 e5 58 32 f0       	mov    0xf03258e5,%al
f0107c18:	83 c8 60             	or     $0x60,%eax
f0107c1b:	a2 e5 58 32 f0       	mov    %al,0xf03258e5
f0107c20:	a0 e5 58 32 f0       	mov    0xf03258e5,%al
f0107c25:	83 c8 80             	or     $0xffffff80,%eax
f0107c28:	a2 e5 58 32 f0       	mov    %al,0xf03258e5
f0107c2d:	b8 78 90 10 f0       	mov    $0xf0109078,%eax
f0107c32:	c1 e8 10             	shr    $0x10,%eax
f0107c35:	66 a3 e6 58 32 f0    	mov    %ax,0xf03258e6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f0107c3b:	b8 7c 90 10 f0       	mov    $0xf010907c,%eax
f0107c40:	66 a3 e8 58 32 f0    	mov    %ax,0xf03258e8
f0107c46:	66 c7 05 ea 58 32 f0 	movw   $0x8,0xf03258ea
f0107c4d:	08 00 
f0107c4f:	a0 ec 58 32 f0       	mov    0xf03258ec,%al
f0107c54:	83 e0 e0             	and    $0xffffffe0,%eax
f0107c57:	a2 ec 58 32 f0       	mov    %al,0xf03258ec
f0107c5c:	a0 ec 58 32 f0       	mov    0xf03258ec,%al
f0107c61:	83 e0 1f             	and    $0x1f,%eax
f0107c64:	a2 ec 58 32 f0       	mov    %al,0xf03258ec
f0107c69:	a0 ed 58 32 f0       	mov    0xf03258ed,%al
f0107c6e:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c71:	83 c8 0e             	or     $0xe,%eax
f0107c74:	a2 ed 58 32 f0       	mov    %al,0xf03258ed
f0107c79:	a0 ed 58 32 f0       	mov    0xf03258ed,%al
f0107c7e:	83 e0 ef             	and    $0xffffffef,%eax
f0107c81:	a2 ed 58 32 f0       	mov    %al,0xf03258ed
f0107c86:	a0 ed 58 32 f0       	mov    0xf03258ed,%al
f0107c8b:	83 c8 60             	or     $0x60,%eax
f0107c8e:	a2 ed 58 32 f0       	mov    %al,0xf03258ed
f0107c93:	a0 ed 58 32 f0       	mov    0xf03258ed,%al
f0107c98:	83 c8 80             	or     $0xffffff80,%eax
f0107c9b:	a2 ed 58 32 f0       	mov    %al,0xf03258ed
f0107ca0:	b8 7c 90 10 f0       	mov    $0xf010907c,%eax
f0107ca5:	c1 e8 10             	shr    $0x10,%eax
f0107ca8:	66 a3 ee 58 32 f0    	mov    %ax,0xf03258ee
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f0107cae:	b8 80 90 10 f0       	mov    $0xf0109080,%eax
f0107cb3:	66 a3 00 59 32 f0    	mov    %ax,0xf0325900
f0107cb9:	66 c7 05 02 59 32 f0 	movw   $0x8,0xf0325902
f0107cc0:	08 00 
f0107cc2:	a0 04 59 32 f0       	mov    0xf0325904,%al
f0107cc7:	83 e0 e0             	and    $0xffffffe0,%eax
f0107cca:	a2 04 59 32 f0       	mov    %al,0xf0325904
f0107ccf:	a0 04 59 32 f0       	mov    0xf0325904,%al
f0107cd4:	83 e0 1f             	and    $0x1f,%eax
f0107cd7:	a2 04 59 32 f0       	mov    %al,0xf0325904
f0107cdc:	a0 05 59 32 f0       	mov    0xf0325905,%al
f0107ce1:	83 e0 f0             	and    $0xfffffff0,%eax
f0107ce4:	83 c8 0e             	or     $0xe,%eax
f0107ce7:	a2 05 59 32 f0       	mov    %al,0xf0325905
f0107cec:	a0 05 59 32 f0       	mov    0xf0325905,%al
f0107cf1:	83 e0 ef             	and    $0xffffffef,%eax
f0107cf4:	a2 05 59 32 f0       	mov    %al,0xf0325905
f0107cf9:	a0 05 59 32 f0       	mov    0xf0325905,%al
f0107cfe:	83 c8 60             	or     $0x60,%eax
f0107d01:	a2 05 59 32 f0       	mov    %al,0xf0325905
f0107d06:	a0 05 59 32 f0       	mov    0xf0325905,%al
f0107d0b:	83 c8 80             	or     $0xffffff80,%eax
f0107d0e:	a2 05 59 32 f0       	mov    %al,0xf0325905
f0107d13:	b8 80 90 10 f0       	mov    $0xf0109080,%eax
f0107d18:	c1 e8 10             	shr    $0x10,%eax
f0107d1b:	66 a3 06 59 32 f0    	mov    %ax,0xf0325906
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f0107d21:	b8 86 90 10 f0       	mov    $0xf0109086,%eax
f0107d26:	66 a3 08 59 32 f0    	mov    %ax,0xf0325908
f0107d2c:	66 c7 05 0a 59 32 f0 	movw   $0x8,0xf032590a
f0107d33:	08 00 
f0107d35:	a0 0c 59 32 f0       	mov    0xf032590c,%al
f0107d3a:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d3d:	a2 0c 59 32 f0       	mov    %al,0xf032590c
f0107d42:	a0 0c 59 32 f0       	mov    0xf032590c,%al
f0107d47:	83 e0 1f             	and    $0x1f,%eax
f0107d4a:	a2 0c 59 32 f0       	mov    %al,0xf032590c
f0107d4f:	a0 0d 59 32 f0       	mov    0xf032590d,%al
f0107d54:	83 e0 f0             	and    $0xfffffff0,%eax
f0107d57:	83 c8 0e             	or     $0xe,%eax
f0107d5a:	a2 0d 59 32 f0       	mov    %al,0xf032590d
f0107d5f:	a0 0d 59 32 f0       	mov    0xf032590d,%al
f0107d64:	83 e0 ef             	and    $0xffffffef,%eax
f0107d67:	a2 0d 59 32 f0       	mov    %al,0xf032590d
f0107d6c:	a0 0d 59 32 f0       	mov    0xf032590d,%al
f0107d71:	83 c8 60             	or     $0x60,%eax
f0107d74:	a2 0d 59 32 f0       	mov    %al,0xf032590d
f0107d79:	a0 0d 59 32 f0       	mov    0xf032590d,%al
f0107d7e:	83 c8 80             	or     $0xffffff80,%eax
f0107d81:	a2 0d 59 32 f0       	mov    %al,0xf032590d
f0107d86:	b8 86 90 10 f0       	mov    $0xf0109086,%eax
f0107d8b:	c1 e8 10             	shr    $0x10,%eax
f0107d8e:	66 a3 0e 59 32 f0    	mov    %ax,0xf032590e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f0107d94:	b8 8a 90 10 f0       	mov    $0xf010908a,%eax
f0107d99:	66 a3 10 59 32 f0    	mov    %ax,0xf0325910
f0107d9f:	66 c7 05 12 59 32 f0 	movw   $0x8,0xf0325912
f0107da6:	08 00 
f0107da8:	a0 14 59 32 f0       	mov    0xf0325914,%al
f0107dad:	83 e0 e0             	and    $0xffffffe0,%eax
f0107db0:	a2 14 59 32 f0       	mov    %al,0xf0325914
f0107db5:	a0 14 59 32 f0       	mov    0xf0325914,%al
f0107dba:	83 e0 1f             	and    $0x1f,%eax
f0107dbd:	a2 14 59 32 f0       	mov    %al,0xf0325914
f0107dc2:	a0 15 59 32 f0       	mov    0xf0325915,%al
f0107dc7:	83 e0 f0             	and    $0xfffffff0,%eax
f0107dca:	83 c8 0e             	or     $0xe,%eax
f0107dcd:	a2 15 59 32 f0       	mov    %al,0xf0325915
f0107dd2:	a0 15 59 32 f0       	mov    0xf0325915,%al
f0107dd7:	83 e0 ef             	and    $0xffffffef,%eax
f0107dda:	a2 15 59 32 f0       	mov    %al,0xf0325915
f0107ddf:	a0 15 59 32 f0       	mov    0xf0325915,%al
f0107de4:	83 c8 60             	or     $0x60,%eax
f0107de7:	a2 15 59 32 f0       	mov    %al,0xf0325915
f0107dec:	a0 15 59 32 f0       	mov    0xf0325915,%al
f0107df1:	83 c8 80             	or     $0xffffff80,%eax
f0107df4:	a2 15 59 32 f0       	mov    %al,0xf0325915
f0107df9:	b8 8a 90 10 f0       	mov    $0xf010908a,%eax
f0107dfe:	c1 e8 10             	shr    $0x10,%eax
f0107e01:	66 a3 16 59 32 f0    	mov    %ax,0xf0325916
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f0107e07:	b8 90 90 10 f0       	mov    $0xf0109090,%eax
f0107e0c:	66 a3 18 59 32 f0    	mov    %ax,0xf0325918
f0107e12:	66 c7 05 1a 59 32 f0 	movw   $0x8,0xf032591a
f0107e19:	08 00 
f0107e1b:	a0 1c 59 32 f0       	mov    0xf032591c,%al
f0107e20:	83 e0 e0             	and    $0xffffffe0,%eax
f0107e23:	a2 1c 59 32 f0       	mov    %al,0xf032591c
f0107e28:	a0 1c 59 32 f0       	mov    0xf032591c,%al
f0107e2d:	83 e0 1f             	and    $0x1f,%eax
f0107e30:	a2 1c 59 32 f0       	mov    %al,0xf032591c
f0107e35:	a0 1d 59 32 f0       	mov    0xf032591d,%al
f0107e3a:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e3d:	83 c8 0e             	or     $0xe,%eax
f0107e40:	a2 1d 59 32 f0       	mov    %al,0xf032591d
f0107e45:	a0 1d 59 32 f0       	mov    0xf032591d,%al
f0107e4a:	83 e0 ef             	and    $0xffffffef,%eax
f0107e4d:	a2 1d 59 32 f0       	mov    %al,0xf032591d
f0107e52:	a0 1d 59 32 f0       	mov    0xf032591d,%al
f0107e57:	83 c8 60             	or     $0x60,%eax
f0107e5a:	a2 1d 59 32 f0       	mov    %al,0xf032591d
f0107e5f:	a0 1d 59 32 f0       	mov    0xf032591d,%al
f0107e64:	83 c8 80             	or     $0xffffff80,%eax
f0107e67:	a2 1d 59 32 f0       	mov    %al,0xf032591d
f0107e6c:	b8 90 90 10 f0       	mov    $0xf0109090,%eax
f0107e71:	c1 e8 10             	shr    $0x10,%eax
f0107e74:	66 a3 1e 59 32 f0    	mov    %ax,0xf032591e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f0107e7a:	b8 96 90 10 f0       	mov    $0xf0109096,%eax
f0107e7f:	66 a3 80 59 32 f0    	mov    %ax,0xf0325980
f0107e85:	66 c7 05 82 59 32 f0 	movw   $0x8,0xf0325982
f0107e8c:	08 00 
f0107e8e:	a0 84 59 32 f0       	mov    0xf0325984,%al
f0107e93:	83 e0 e0             	and    $0xffffffe0,%eax
f0107e96:	a2 84 59 32 f0       	mov    %al,0xf0325984
f0107e9b:	a0 84 59 32 f0       	mov    0xf0325984,%al
f0107ea0:	83 e0 1f             	and    $0x1f,%eax
f0107ea3:	a2 84 59 32 f0       	mov    %al,0xf0325984
f0107ea8:	a0 85 59 32 f0       	mov    0xf0325985,%al
f0107ead:	83 e0 f0             	and    $0xfffffff0,%eax
f0107eb0:	83 c8 0e             	or     $0xe,%eax
f0107eb3:	a2 85 59 32 f0       	mov    %al,0xf0325985
f0107eb8:	a0 85 59 32 f0       	mov    0xf0325985,%al
f0107ebd:	83 e0 ef             	and    $0xffffffef,%eax
f0107ec0:	a2 85 59 32 f0       	mov    %al,0xf0325985
f0107ec5:	a0 85 59 32 f0       	mov    0xf0325985,%al
f0107eca:	83 c8 60             	or     $0x60,%eax
f0107ecd:	a2 85 59 32 f0       	mov    %al,0xf0325985
f0107ed2:	a0 85 59 32 f0       	mov    0xf0325985,%al
f0107ed7:	83 c8 80             	or     $0xffffff80,%eax
f0107eda:	a2 85 59 32 f0       	mov    %al,0xf0325985
f0107edf:	b8 96 90 10 f0       	mov    $0xf0109096,%eax
f0107ee4:	c1 e8 10             	shr    $0x10,%eax
f0107ee7:	66 a3 86 59 32 f0    	mov    %ax,0xf0325986
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f0107eed:	b8 9c 90 10 f0       	mov    $0xf010909c,%eax
f0107ef2:	66 a3 88 59 32 f0    	mov    %ax,0xf0325988
f0107ef8:	66 c7 05 8a 59 32 f0 	movw   $0x8,0xf032598a
f0107eff:	08 00 
f0107f01:	a0 8c 59 32 f0       	mov    0xf032598c,%al
f0107f06:	83 e0 e0             	and    $0xffffffe0,%eax
f0107f09:	a2 8c 59 32 f0       	mov    %al,0xf032598c
f0107f0e:	a0 8c 59 32 f0       	mov    0xf032598c,%al
f0107f13:	83 e0 1f             	and    $0x1f,%eax
f0107f16:	a2 8c 59 32 f0       	mov    %al,0xf032598c
f0107f1b:	a0 8d 59 32 f0       	mov    0xf032598d,%al
f0107f20:	83 e0 f0             	and    $0xfffffff0,%eax
f0107f23:	83 c8 0e             	or     $0xe,%eax
f0107f26:	a2 8d 59 32 f0       	mov    %al,0xf032598d
f0107f2b:	a0 8d 59 32 f0       	mov    0xf032598d,%al
f0107f30:	83 e0 ef             	and    $0xffffffef,%eax
f0107f33:	a2 8d 59 32 f0       	mov    %al,0xf032598d
f0107f38:	a0 8d 59 32 f0       	mov    0xf032598d,%al
f0107f3d:	83 c8 60             	or     $0x60,%eax
f0107f40:	a2 8d 59 32 f0       	mov    %al,0xf032598d
f0107f45:	a0 8d 59 32 f0       	mov    0xf032598d,%al
f0107f4a:	83 c8 80             	or     $0xffffff80,%eax
f0107f4d:	a2 8d 59 32 f0       	mov    %al,0xf032598d
f0107f52:	b8 9c 90 10 f0       	mov    $0xf010909c,%eax
f0107f57:	c1 e8 10             	shr    $0x10,%eax
f0107f5a:	66 a3 8e 59 32 f0    	mov    %ax,0xf032598e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f0107f60:	b8 a2 90 10 f0       	mov    $0xf01090a2,%eax
f0107f65:	66 a3 90 59 32 f0    	mov    %ax,0xf0325990
f0107f6b:	66 c7 05 92 59 32 f0 	movw   $0x8,0xf0325992
f0107f72:	08 00 
f0107f74:	a0 94 59 32 f0       	mov    0xf0325994,%al
f0107f79:	83 e0 e0             	and    $0xffffffe0,%eax
f0107f7c:	a2 94 59 32 f0       	mov    %al,0xf0325994
f0107f81:	a0 94 59 32 f0       	mov    0xf0325994,%al
f0107f86:	83 e0 1f             	and    $0x1f,%eax
f0107f89:	a2 94 59 32 f0       	mov    %al,0xf0325994
f0107f8e:	a0 95 59 32 f0       	mov    0xf0325995,%al
f0107f93:	83 e0 f0             	and    $0xfffffff0,%eax
f0107f96:	83 c8 0e             	or     $0xe,%eax
f0107f99:	a2 95 59 32 f0       	mov    %al,0xf0325995
f0107f9e:	a0 95 59 32 f0       	mov    0xf0325995,%al
f0107fa3:	83 e0 ef             	and    $0xffffffef,%eax
f0107fa6:	a2 95 59 32 f0       	mov    %al,0xf0325995
f0107fab:	a0 95 59 32 f0       	mov    0xf0325995,%al
f0107fb0:	83 c8 60             	or     $0x60,%eax
f0107fb3:	a2 95 59 32 f0       	mov    %al,0xf0325995
f0107fb8:	a0 95 59 32 f0       	mov    0xf0325995,%al
f0107fbd:	83 c8 80             	or     $0xffffff80,%eax
f0107fc0:	a2 95 59 32 f0       	mov    %al,0xf0325995
f0107fc5:	b8 a2 90 10 f0       	mov    $0xf01090a2,%eax
f0107fca:	c1 e8 10             	shr    $0x10,%eax
f0107fcd:	66 a3 96 59 32 f0    	mov    %ax,0xf0325996
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f0107fd3:	b8 a8 90 10 f0       	mov    $0xf01090a8,%eax
f0107fd8:	66 a3 98 59 32 f0    	mov    %ax,0xf0325998
f0107fde:	66 c7 05 9a 59 32 f0 	movw   $0x8,0xf032599a
f0107fe5:	08 00 
f0107fe7:	a0 9c 59 32 f0       	mov    0xf032599c,%al
f0107fec:	83 e0 e0             	and    $0xffffffe0,%eax
f0107fef:	a2 9c 59 32 f0       	mov    %al,0xf032599c
f0107ff4:	a0 9c 59 32 f0       	mov    0xf032599c,%al
f0107ff9:	83 e0 1f             	and    $0x1f,%eax
f0107ffc:	a2 9c 59 32 f0       	mov    %al,0xf032599c
f0108001:	a0 9d 59 32 f0       	mov    0xf032599d,%al
f0108006:	83 e0 f0             	and    $0xfffffff0,%eax
f0108009:	83 c8 0e             	or     $0xe,%eax
f010800c:	a2 9d 59 32 f0       	mov    %al,0xf032599d
f0108011:	a0 9d 59 32 f0       	mov    0xf032599d,%al
f0108016:	83 e0 ef             	and    $0xffffffef,%eax
f0108019:	a2 9d 59 32 f0       	mov    %al,0xf032599d
f010801e:	a0 9d 59 32 f0       	mov    0xf032599d,%al
f0108023:	83 c8 60             	or     $0x60,%eax
f0108026:	a2 9d 59 32 f0       	mov    %al,0xf032599d
f010802b:	a0 9d 59 32 f0       	mov    0xf032599d,%al
f0108030:	83 c8 80             	or     $0xffffff80,%eax
f0108033:	a2 9d 59 32 f0       	mov    %al,0xf032599d
f0108038:	b8 a8 90 10 f0       	mov    $0xf01090a8,%eax
f010803d:	c1 e8 10             	shr    $0x10,%eax
f0108040:	66 a3 9e 59 32 f0    	mov    %ax,0xf032599e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f0108046:	b8 ae 90 10 f0       	mov    $0xf01090ae,%eax
f010804b:	66 a3 a0 59 32 f0    	mov    %ax,0xf03259a0
f0108051:	66 c7 05 a2 59 32 f0 	movw   $0x8,0xf03259a2
f0108058:	08 00 
f010805a:	a0 a4 59 32 f0       	mov    0xf03259a4,%al
f010805f:	83 e0 e0             	and    $0xffffffe0,%eax
f0108062:	a2 a4 59 32 f0       	mov    %al,0xf03259a4
f0108067:	a0 a4 59 32 f0       	mov    0xf03259a4,%al
f010806c:	83 e0 1f             	and    $0x1f,%eax
f010806f:	a2 a4 59 32 f0       	mov    %al,0xf03259a4
f0108074:	a0 a5 59 32 f0       	mov    0xf03259a5,%al
f0108079:	83 e0 f0             	and    $0xfffffff0,%eax
f010807c:	83 c8 0e             	or     $0xe,%eax
f010807f:	a2 a5 59 32 f0       	mov    %al,0xf03259a5
f0108084:	a0 a5 59 32 f0       	mov    0xf03259a5,%al
f0108089:	83 e0 ef             	and    $0xffffffef,%eax
f010808c:	a2 a5 59 32 f0       	mov    %al,0xf03259a5
f0108091:	a0 a5 59 32 f0       	mov    0xf03259a5,%al
f0108096:	83 c8 60             	or     $0x60,%eax
f0108099:	a2 a5 59 32 f0       	mov    %al,0xf03259a5
f010809e:	a0 a5 59 32 f0       	mov    0xf03259a5,%al
f01080a3:	83 c8 80             	or     $0xffffff80,%eax
f01080a6:	a2 a5 59 32 f0       	mov    %al,0xf03259a5
f01080ab:	b8 ae 90 10 f0       	mov    $0xf01090ae,%eax
f01080b0:	c1 e8 10             	shr    $0x10,%eax
f01080b3:	66 a3 a6 59 32 f0    	mov    %ax,0xf03259a6
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f01080b9:	b8 b4 90 10 f0       	mov    $0xf01090b4,%eax
f01080be:	66 a3 a8 59 32 f0    	mov    %ax,0xf03259a8
f01080c4:	66 c7 05 aa 59 32 f0 	movw   $0x8,0xf03259aa
f01080cb:	08 00 
f01080cd:	a0 ac 59 32 f0       	mov    0xf03259ac,%al
f01080d2:	83 e0 e0             	and    $0xffffffe0,%eax
f01080d5:	a2 ac 59 32 f0       	mov    %al,0xf03259ac
f01080da:	a0 ac 59 32 f0       	mov    0xf03259ac,%al
f01080df:	83 e0 1f             	and    $0x1f,%eax
f01080e2:	a2 ac 59 32 f0       	mov    %al,0xf03259ac
f01080e7:	a0 ad 59 32 f0       	mov    0xf03259ad,%al
f01080ec:	83 e0 f0             	and    $0xfffffff0,%eax
f01080ef:	83 c8 0e             	or     $0xe,%eax
f01080f2:	a2 ad 59 32 f0       	mov    %al,0xf03259ad
f01080f7:	a0 ad 59 32 f0       	mov    0xf03259ad,%al
f01080fc:	83 e0 ef             	and    $0xffffffef,%eax
f01080ff:	a2 ad 59 32 f0       	mov    %al,0xf03259ad
f0108104:	a0 ad 59 32 f0       	mov    0xf03259ad,%al
f0108109:	83 c8 60             	or     $0x60,%eax
f010810c:	a2 ad 59 32 f0       	mov    %al,0xf03259ad
f0108111:	a0 ad 59 32 f0       	mov    0xf03259ad,%al
f0108116:	83 c8 80             	or     $0xffffff80,%eax
f0108119:	a2 ad 59 32 f0       	mov    %al,0xf03259ad
f010811e:	b8 b4 90 10 f0       	mov    $0xf01090b4,%eax
f0108123:	c1 e8 10             	shr    $0x10,%eax
f0108126:	66 a3 ae 59 32 f0    	mov    %ax,0xf03259ae
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010812c:	b8 ba 90 10 f0       	mov    $0xf01090ba,%eax
f0108131:	66 a3 b0 59 32 f0    	mov    %ax,0xf03259b0
f0108137:	66 c7 05 b2 59 32 f0 	movw   $0x8,0xf03259b2
f010813e:	08 00 
f0108140:	a0 b4 59 32 f0       	mov    0xf03259b4,%al
f0108145:	83 e0 e0             	and    $0xffffffe0,%eax
f0108148:	a2 b4 59 32 f0       	mov    %al,0xf03259b4
f010814d:	a0 b4 59 32 f0       	mov    0xf03259b4,%al
f0108152:	83 e0 1f             	and    $0x1f,%eax
f0108155:	a2 b4 59 32 f0       	mov    %al,0xf03259b4
f010815a:	a0 b5 59 32 f0       	mov    0xf03259b5,%al
f010815f:	83 e0 f0             	and    $0xfffffff0,%eax
f0108162:	83 c8 0e             	or     $0xe,%eax
f0108165:	a2 b5 59 32 f0       	mov    %al,0xf03259b5
f010816a:	a0 b5 59 32 f0       	mov    0xf03259b5,%al
f010816f:	83 e0 ef             	and    $0xffffffef,%eax
f0108172:	a2 b5 59 32 f0       	mov    %al,0xf03259b5
f0108177:	a0 b5 59 32 f0       	mov    0xf03259b5,%al
f010817c:	83 c8 60             	or     $0x60,%eax
f010817f:	a2 b5 59 32 f0       	mov    %al,0xf03259b5
f0108184:	a0 b5 59 32 f0       	mov    0xf03259b5,%al
f0108189:	83 c8 80             	or     $0xffffff80,%eax
f010818c:	a2 b5 59 32 f0       	mov    %al,0xf03259b5
f0108191:	b8 ba 90 10 f0       	mov    $0xf01090ba,%eax
f0108196:	c1 e8 10             	shr    $0x10,%eax
f0108199:	66 a3 b6 59 32 f0    	mov    %ax,0xf03259b6
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010819f:	b8 c0 90 10 f0       	mov    $0xf01090c0,%eax
f01081a4:	66 a3 b8 59 32 f0    	mov    %ax,0xf03259b8
f01081aa:	66 c7 05 ba 59 32 f0 	movw   $0x8,0xf03259ba
f01081b1:	08 00 
f01081b3:	a0 bc 59 32 f0       	mov    0xf03259bc,%al
f01081b8:	83 e0 e0             	and    $0xffffffe0,%eax
f01081bb:	a2 bc 59 32 f0       	mov    %al,0xf03259bc
f01081c0:	a0 bc 59 32 f0       	mov    0xf03259bc,%al
f01081c5:	83 e0 1f             	and    $0x1f,%eax
f01081c8:	a2 bc 59 32 f0       	mov    %al,0xf03259bc
f01081cd:	a0 bd 59 32 f0       	mov    0xf03259bd,%al
f01081d2:	83 e0 f0             	and    $0xfffffff0,%eax
f01081d5:	83 c8 0e             	or     $0xe,%eax
f01081d8:	a2 bd 59 32 f0       	mov    %al,0xf03259bd
f01081dd:	a0 bd 59 32 f0       	mov    0xf03259bd,%al
f01081e2:	83 e0 ef             	and    $0xffffffef,%eax
f01081e5:	a2 bd 59 32 f0       	mov    %al,0xf03259bd
f01081ea:	a0 bd 59 32 f0       	mov    0xf03259bd,%al
f01081ef:	83 c8 60             	or     $0x60,%eax
f01081f2:	a2 bd 59 32 f0       	mov    %al,0xf03259bd
f01081f7:	a0 bd 59 32 f0       	mov    0xf03259bd,%al
f01081fc:	83 c8 80             	or     $0xffffff80,%eax
f01081ff:	a2 bd 59 32 f0       	mov    %al,0xf03259bd
f0108204:	b8 c0 90 10 f0       	mov    $0xf01090c0,%eax
f0108209:	c1 e8 10             	shr    $0x10,%eax
f010820c:	66 a3 be 59 32 f0    	mov    %ax,0xf03259be
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f0108212:	b8 c6 90 10 f0       	mov    $0xf01090c6,%eax
f0108217:	66 a3 c0 59 32 f0    	mov    %ax,0xf03259c0
f010821d:	66 c7 05 c2 59 32 f0 	movw   $0x8,0xf03259c2
f0108224:	08 00 
f0108226:	a0 c4 59 32 f0       	mov    0xf03259c4,%al
f010822b:	83 e0 e0             	and    $0xffffffe0,%eax
f010822e:	a2 c4 59 32 f0       	mov    %al,0xf03259c4
f0108233:	a0 c4 59 32 f0       	mov    0xf03259c4,%al
f0108238:	83 e0 1f             	and    $0x1f,%eax
f010823b:	a2 c4 59 32 f0       	mov    %al,0xf03259c4
f0108240:	a0 c5 59 32 f0       	mov    0xf03259c5,%al
f0108245:	83 e0 f0             	and    $0xfffffff0,%eax
f0108248:	83 c8 0e             	or     $0xe,%eax
f010824b:	a2 c5 59 32 f0       	mov    %al,0xf03259c5
f0108250:	a0 c5 59 32 f0       	mov    0xf03259c5,%al
f0108255:	83 e0 ef             	and    $0xffffffef,%eax
f0108258:	a2 c5 59 32 f0       	mov    %al,0xf03259c5
f010825d:	a0 c5 59 32 f0       	mov    0xf03259c5,%al
f0108262:	83 c8 60             	or     $0x60,%eax
f0108265:	a2 c5 59 32 f0       	mov    %al,0xf03259c5
f010826a:	a0 c5 59 32 f0       	mov    0xf03259c5,%al
f010826f:	83 c8 80             	or     $0xffffff80,%eax
f0108272:	a2 c5 59 32 f0       	mov    %al,0xf03259c5
f0108277:	b8 c6 90 10 f0       	mov    $0xf01090c6,%eax
f010827c:	c1 e8 10             	shr    $0x10,%eax
f010827f:	66 a3 c6 59 32 f0    	mov    %ax,0xf03259c6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f0108285:	b8 cc 90 10 f0       	mov    $0xf01090cc,%eax
f010828a:	66 a3 c8 59 32 f0    	mov    %ax,0xf03259c8
f0108290:	66 c7 05 ca 59 32 f0 	movw   $0x8,0xf03259ca
f0108297:	08 00 
f0108299:	a0 cc 59 32 f0       	mov    0xf03259cc,%al
f010829e:	83 e0 e0             	and    $0xffffffe0,%eax
f01082a1:	a2 cc 59 32 f0       	mov    %al,0xf03259cc
f01082a6:	a0 cc 59 32 f0       	mov    0xf03259cc,%al
f01082ab:	83 e0 1f             	and    $0x1f,%eax
f01082ae:	a2 cc 59 32 f0       	mov    %al,0xf03259cc
f01082b3:	a0 cd 59 32 f0       	mov    0xf03259cd,%al
f01082b8:	83 e0 f0             	and    $0xfffffff0,%eax
f01082bb:	83 c8 0e             	or     $0xe,%eax
f01082be:	a2 cd 59 32 f0       	mov    %al,0xf03259cd
f01082c3:	a0 cd 59 32 f0       	mov    0xf03259cd,%al
f01082c8:	83 e0 ef             	and    $0xffffffef,%eax
f01082cb:	a2 cd 59 32 f0       	mov    %al,0xf03259cd
f01082d0:	a0 cd 59 32 f0       	mov    0xf03259cd,%al
f01082d5:	83 c8 60             	or     $0x60,%eax
f01082d8:	a2 cd 59 32 f0       	mov    %al,0xf03259cd
f01082dd:	a0 cd 59 32 f0       	mov    0xf03259cd,%al
f01082e2:	83 c8 80             	or     $0xffffff80,%eax
f01082e5:	a2 cd 59 32 f0       	mov    %al,0xf03259cd
f01082ea:	b8 cc 90 10 f0       	mov    $0xf01090cc,%eax
f01082ef:	c1 e8 10             	shr    $0x10,%eax
f01082f2:	66 a3 ce 59 32 f0    	mov    %ax,0xf03259ce
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f01082f8:	b8 d2 90 10 f0       	mov    $0xf01090d2,%eax
f01082fd:	66 a3 d0 59 32 f0    	mov    %ax,0xf03259d0
f0108303:	66 c7 05 d2 59 32 f0 	movw   $0x8,0xf03259d2
f010830a:	08 00 
f010830c:	a0 d4 59 32 f0       	mov    0xf03259d4,%al
f0108311:	83 e0 e0             	and    $0xffffffe0,%eax
f0108314:	a2 d4 59 32 f0       	mov    %al,0xf03259d4
f0108319:	a0 d4 59 32 f0       	mov    0xf03259d4,%al
f010831e:	83 e0 1f             	and    $0x1f,%eax
f0108321:	a2 d4 59 32 f0       	mov    %al,0xf03259d4
f0108326:	a0 d5 59 32 f0       	mov    0xf03259d5,%al
f010832b:	83 e0 f0             	and    $0xfffffff0,%eax
f010832e:	83 c8 0e             	or     $0xe,%eax
f0108331:	a2 d5 59 32 f0       	mov    %al,0xf03259d5
f0108336:	a0 d5 59 32 f0       	mov    0xf03259d5,%al
f010833b:	83 e0 ef             	and    $0xffffffef,%eax
f010833e:	a2 d5 59 32 f0       	mov    %al,0xf03259d5
f0108343:	a0 d5 59 32 f0       	mov    0xf03259d5,%al
f0108348:	83 c8 60             	or     $0x60,%eax
f010834b:	a2 d5 59 32 f0       	mov    %al,0xf03259d5
f0108350:	a0 d5 59 32 f0       	mov    0xf03259d5,%al
f0108355:	83 c8 80             	or     $0xffffff80,%eax
f0108358:	a2 d5 59 32 f0       	mov    %al,0xf03259d5
f010835d:	b8 d2 90 10 f0       	mov    $0xf01090d2,%eax
f0108362:	c1 e8 10             	shr    $0x10,%eax
f0108365:	66 a3 d6 59 32 f0    	mov    %ax,0xf03259d6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010836b:	b8 d8 90 10 f0       	mov    $0xf01090d8,%eax
f0108370:	66 a3 d8 59 32 f0    	mov    %ax,0xf03259d8
f0108376:	66 c7 05 da 59 32 f0 	movw   $0x8,0xf03259da
f010837d:	08 00 
f010837f:	a0 dc 59 32 f0       	mov    0xf03259dc,%al
f0108384:	83 e0 e0             	and    $0xffffffe0,%eax
f0108387:	a2 dc 59 32 f0       	mov    %al,0xf03259dc
f010838c:	a0 dc 59 32 f0       	mov    0xf03259dc,%al
f0108391:	83 e0 1f             	and    $0x1f,%eax
f0108394:	a2 dc 59 32 f0       	mov    %al,0xf03259dc
f0108399:	a0 dd 59 32 f0       	mov    0xf03259dd,%al
f010839e:	83 e0 f0             	and    $0xfffffff0,%eax
f01083a1:	83 c8 0e             	or     $0xe,%eax
f01083a4:	a2 dd 59 32 f0       	mov    %al,0xf03259dd
f01083a9:	a0 dd 59 32 f0       	mov    0xf03259dd,%al
f01083ae:	83 e0 ef             	and    $0xffffffef,%eax
f01083b1:	a2 dd 59 32 f0       	mov    %al,0xf03259dd
f01083b6:	a0 dd 59 32 f0       	mov    0xf03259dd,%al
f01083bb:	83 c8 60             	or     $0x60,%eax
f01083be:	a2 dd 59 32 f0       	mov    %al,0xf03259dd
f01083c3:	a0 dd 59 32 f0       	mov    0xf03259dd,%al
f01083c8:	83 c8 80             	or     $0xffffff80,%eax
f01083cb:	a2 dd 59 32 f0       	mov    %al,0xf03259dd
f01083d0:	b8 d8 90 10 f0       	mov    $0xf01090d8,%eax
f01083d5:	c1 e8 10             	shr    $0x10,%eax
f01083d8:	66 a3 de 59 32 f0    	mov    %ax,0xf03259de
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f01083de:	b8 de 90 10 f0       	mov    $0xf01090de,%eax
f01083e3:	66 a3 e0 59 32 f0    	mov    %ax,0xf03259e0
f01083e9:	66 c7 05 e2 59 32 f0 	movw   $0x8,0xf03259e2
f01083f0:	08 00 
f01083f2:	a0 e4 59 32 f0       	mov    0xf03259e4,%al
f01083f7:	83 e0 e0             	and    $0xffffffe0,%eax
f01083fa:	a2 e4 59 32 f0       	mov    %al,0xf03259e4
f01083ff:	a0 e4 59 32 f0       	mov    0xf03259e4,%al
f0108404:	83 e0 1f             	and    $0x1f,%eax
f0108407:	a2 e4 59 32 f0       	mov    %al,0xf03259e4
f010840c:	a0 e5 59 32 f0       	mov    0xf03259e5,%al
f0108411:	83 e0 f0             	and    $0xfffffff0,%eax
f0108414:	83 c8 0e             	or     $0xe,%eax
f0108417:	a2 e5 59 32 f0       	mov    %al,0xf03259e5
f010841c:	a0 e5 59 32 f0       	mov    0xf03259e5,%al
f0108421:	83 e0 ef             	and    $0xffffffef,%eax
f0108424:	a2 e5 59 32 f0       	mov    %al,0xf03259e5
f0108429:	a0 e5 59 32 f0       	mov    0xf03259e5,%al
f010842e:	83 c8 60             	or     $0x60,%eax
f0108431:	a2 e5 59 32 f0       	mov    %al,0xf03259e5
f0108436:	a0 e5 59 32 f0       	mov    0xf03259e5,%al
f010843b:	83 c8 80             	or     $0xffffff80,%eax
f010843e:	a2 e5 59 32 f0       	mov    %al,0xf03259e5
f0108443:	b8 de 90 10 f0       	mov    $0xf01090de,%eax
f0108448:	c1 e8 10             	shr    $0x10,%eax
f010844b:	66 a3 e6 59 32 f0    	mov    %ax,0xf03259e6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f0108451:	b8 e4 90 10 f0       	mov    $0xf01090e4,%eax
f0108456:	66 a3 e8 59 32 f0    	mov    %ax,0xf03259e8
f010845c:	66 c7 05 ea 59 32 f0 	movw   $0x8,0xf03259ea
f0108463:	08 00 
f0108465:	a0 ec 59 32 f0       	mov    0xf03259ec,%al
f010846a:	83 e0 e0             	and    $0xffffffe0,%eax
f010846d:	a2 ec 59 32 f0       	mov    %al,0xf03259ec
f0108472:	a0 ec 59 32 f0       	mov    0xf03259ec,%al
f0108477:	83 e0 1f             	and    $0x1f,%eax
f010847a:	a2 ec 59 32 f0       	mov    %al,0xf03259ec
f010847f:	a0 ed 59 32 f0       	mov    0xf03259ed,%al
f0108484:	83 e0 f0             	and    $0xfffffff0,%eax
f0108487:	83 c8 0e             	or     $0xe,%eax
f010848a:	a2 ed 59 32 f0       	mov    %al,0xf03259ed
f010848f:	a0 ed 59 32 f0       	mov    0xf03259ed,%al
f0108494:	83 e0 ef             	and    $0xffffffef,%eax
f0108497:	a2 ed 59 32 f0       	mov    %al,0xf03259ed
f010849c:	a0 ed 59 32 f0       	mov    0xf03259ed,%al
f01084a1:	83 c8 60             	or     $0x60,%eax
f01084a4:	a2 ed 59 32 f0       	mov    %al,0xf03259ed
f01084a9:	a0 ed 59 32 f0       	mov    0xf03259ed,%al
f01084ae:	83 c8 80             	or     $0xffffff80,%eax
f01084b1:	a2 ed 59 32 f0       	mov    %al,0xf03259ed
f01084b6:	b8 e4 90 10 f0       	mov    $0xf01090e4,%eax
f01084bb:	c1 e8 10             	shr    $0x10,%eax
f01084be:	66 a3 ee 59 32 f0    	mov    %ax,0xf03259ee
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f01084c4:	b8 ea 90 10 f0       	mov    $0xf01090ea,%eax
f01084c9:	66 a3 f0 59 32 f0    	mov    %ax,0xf03259f0
f01084cf:	66 c7 05 f2 59 32 f0 	movw   $0x8,0xf03259f2
f01084d6:	08 00 
f01084d8:	a0 f4 59 32 f0       	mov    0xf03259f4,%al
f01084dd:	83 e0 e0             	and    $0xffffffe0,%eax
f01084e0:	a2 f4 59 32 f0       	mov    %al,0xf03259f4
f01084e5:	a0 f4 59 32 f0       	mov    0xf03259f4,%al
f01084ea:	83 e0 1f             	and    $0x1f,%eax
f01084ed:	a2 f4 59 32 f0       	mov    %al,0xf03259f4
f01084f2:	a0 f5 59 32 f0       	mov    0xf03259f5,%al
f01084f7:	83 e0 f0             	and    $0xfffffff0,%eax
f01084fa:	83 c8 0e             	or     $0xe,%eax
f01084fd:	a2 f5 59 32 f0       	mov    %al,0xf03259f5
f0108502:	a0 f5 59 32 f0       	mov    0xf03259f5,%al
f0108507:	83 e0 ef             	and    $0xffffffef,%eax
f010850a:	a2 f5 59 32 f0       	mov    %al,0xf03259f5
f010850f:	a0 f5 59 32 f0       	mov    0xf03259f5,%al
f0108514:	83 c8 60             	or     $0x60,%eax
f0108517:	a2 f5 59 32 f0       	mov    %al,0xf03259f5
f010851c:	a0 f5 59 32 f0       	mov    0xf03259f5,%al
f0108521:	83 c8 80             	or     $0xffffff80,%eax
f0108524:	a2 f5 59 32 f0       	mov    %al,0xf03259f5
f0108529:	b8 ea 90 10 f0       	mov    $0xf01090ea,%eax
f010852e:	c1 e8 10             	shr    $0x10,%eax
f0108531:	66 a3 f6 59 32 f0    	mov    %ax,0xf03259f6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f0108537:	b8 f0 90 10 f0       	mov    $0xf01090f0,%eax
f010853c:	66 a3 f8 59 32 f0    	mov    %ax,0xf03259f8
f0108542:	66 c7 05 fa 59 32 f0 	movw   $0x8,0xf03259fa
f0108549:	08 00 
f010854b:	a0 fc 59 32 f0       	mov    0xf03259fc,%al
f0108550:	83 e0 e0             	and    $0xffffffe0,%eax
f0108553:	a2 fc 59 32 f0       	mov    %al,0xf03259fc
f0108558:	a0 fc 59 32 f0       	mov    0xf03259fc,%al
f010855d:	83 e0 1f             	and    $0x1f,%eax
f0108560:	a2 fc 59 32 f0       	mov    %al,0xf03259fc
f0108565:	a0 fd 59 32 f0       	mov    0xf03259fd,%al
f010856a:	83 e0 f0             	and    $0xfffffff0,%eax
f010856d:	83 c8 0e             	or     $0xe,%eax
f0108570:	a2 fd 59 32 f0       	mov    %al,0xf03259fd
f0108575:	a0 fd 59 32 f0       	mov    0xf03259fd,%al
f010857a:	83 e0 ef             	and    $0xffffffef,%eax
f010857d:	a2 fd 59 32 f0       	mov    %al,0xf03259fd
f0108582:	a0 fd 59 32 f0       	mov    0xf03259fd,%al
f0108587:	83 c8 60             	or     $0x60,%eax
f010858a:	a2 fd 59 32 f0       	mov    %al,0xf03259fd
f010858f:	a0 fd 59 32 f0       	mov    0xf03259fd,%al
f0108594:	83 c8 80             	or     $0xffffff80,%eax
f0108597:	a2 fd 59 32 f0       	mov    %al,0xf03259fd
f010859c:	b8 f0 90 10 f0       	mov    $0xf01090f0,%eax
f01085a1:	c1 e8 10             	shr    $0x10,%eax
f01085a4:	66 a3 fe 59 32 f0    	mov    %ax,0xf03259fe



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f01085aa:	c7 05 84 60 32 f0 00 	movl   $0xefc00000,0xf0326084
f01085b1:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f01085b4:	66 c7 05 88 60 32 f0 	movw   $0x10,0xf0326088
f01085bb:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f01085bd:	66 c7 05 08 48 15 f0 	movw   $0x68,0xf0154808
f01085c4:	68 00 
f01085c6:	b8 80 60 32 f0       	mov    $0xf0326080,%eax
f01085cb:	66 a3 0a 48 15 f0    	mov    %ax,0xf015480a
f01085d1:	b8 80 60 32 f0       	mov    $0xf0326080,%eax
f01085d6:	c1 e8 10             	shr    $0x10,%eax
f01085d9:	a2 0c 48 15 f0       	mov    %al,0xf015480c
f01085de:	a0 0d 48 15 f0       	mov    0xf015480d,%al
f01085e3:	83 e0 f0             	and    $0xfffffff0,%eax
f01085e6:	83 c8 09             	or     $0x9,%eax
f01085e9:	a2 0d 48 15 f0       	mov    %al,0xf015480d
f01085ee:	a0 0d 48 15 f0       	mov    0xf015480d,%al
f01085f3:	83 c8 10             	or     $0x10,%eax
f01085f6:	a2 0d 48 15 f0       	mov    %al,0xf015480d
f01085fb:	a0 0d 48 15 f0       	mov    0xf015480d,%al
f0108600:	83 e0 9f             	and    $0xffffff9f,%eax
f0108603:	a2 0d 48 15 f0       	mov    %al,0xf015480d
f0108608:	a0 0d 48 15 f0       	mov    0xf015480d,%al
f010860d:	83 c8 80             	or     $0xffffff80,%eax
f0108610:	a2 0d 48 15 f0       	mov    %al,0xf015480d
f0108615:	a0 0e 48 15 f0       	mov    0xf015480e,%al
f010861a:	83 e0 f0             	and    $0xfffffff0,%eax
f010861d:	a2 0e 48 15 f0       	mov    %al,0xf015480e
f0108622:	a0 0e 48 15 f0       	mov    0xf015480e,%al
f0108627:	83 e0 ef             	and    $0xffffffef,%eax
f010862a:	a2 0e 48 15 f0       	mov    %al,0xf015480e
f010862f:	a0 0e 48 15 f0       	mov    0xf015480e,%al
f0108634:	83 e0 df             	and    $0xffffffdf,%eax
f0108637:	a2 0e 48 15 f0       	mov    %al,0xf015480e
f010863c:	a0 0e 48 15 f0       	mov    0xf015480e,%al
f0108641:	83 c8 40             	or     $0x40,%eax
f0108644:	a2 0e 48 15 f0       	mov    %al,0xf015480e
f0108649:	a0 0e 48 15 f0       	mov    0xf015480e,%al
f010864e:	83 e0 7f             	and    $0x7f,%eax
f0108651:	a2 0e 48 15 f0       	mov    %al,0xf015480e
f0108656:	b8 80 60 32 f0       	mov    $0xf0326080,%eax
f010865b:	c1 e8 18             	shr    $0x18,%eax
f010865e:	a2 0f 48 15 f0       	mov    %al,0xf015480f
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f0108663:	a0 0d 48 15 f0       	mov    0xf015480d,%al
f0108668:	83 e0 ef             	and    $0xffffffef,%eax
f010866b:	a2 0d 48 15 f0       	mov    %al,0xf015480d
f0108670:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f0108676:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010867a:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010867d:	0f 01 1d 7c 49 15 f0 	lidtl  0xf015497c
}
f0108684:	90                   	nop
f0108685:	c9                   	leave  
f0108686:	c3                   	ret    

f0108687 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f0108687:	55                   	push   %ebp
f0108688:	89 e5                	mov    %esp,%ebp
f010868a:	53                   	push   %ebx
f010868b:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010868e:	83 ec 08             	sub    $0x8,%esp
f0108691:	ff 75 08             	pushl  0x8(%ebp)
f0108694:	68 7b d5 11 f0       	push   $0xf011d57b
f0108699:	e8 05 ef ff ff       	call   f01075a3 <cprintf>
f010869e:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f01086a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a4:	83 ec 0c             	sub    $0xc,%esp
f01086a7:	50                   	push   %eax
f01086a8:	e8 fd 00 00 00       	call   f01087aa <print_regs>
f01086ad:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f01086b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01086b3:	8b 40 20             	mov    0x20(%eax),%eax
f01086b6:	0f b7 c0             	movzwl %ax,%eax
f01086b9:	83 ec 08             	sub    $0x8,%esp
f01086bc:	50                   	push   %eax
f01086bd:	68 8d d5 11 f0       	push   $0xf011d58d
f01086c2:	e8 dc ee ff ff       	call   f01075a3 <cprintf>
f01086c7:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f01086ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01086cd:	8b 40 24             	mov    0x24(%eax),%eax
f01086d0:	0f b7 c0             	movzwl %ax,%eax
f01086d3:	83 ec 08             	sub    $0x8,%esp
f01086d6:	50                   	push   %eax
f01086d7:	68 a0 d5 11 f0       	push   $0xf011d5a0
f01086dc:	e8 c2 ee ff ff       	call   f01075a3 <cprintf>
f01086e1:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f01086e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01086e7:	8b 58 28             	mov    0x28(%eax),%ebx
f01086ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01086ed:	8b 40 28             	mov    0x28(%eax),%eax
f01086f0:	83 ec 0c             	sub    $0xc,%esp
f01086f3:	50                   	push   %eax
f01086f4:	e8 d0 ee ff ff       	call   f01075c9 <trapname>
f01086f9:	83 c4 10             	add    $0x10,%esp
f01086fc:	89 c2                	mov    %eax,%edx
f01086fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0108701:	8b 40 28             	mov    0x28(%eax),%eax
f0108704:	53                   	push   %ebx
f0108705:	52                   	push   %edx
f0108706:	50                   	push   %eax
f0108707:	68 b3 d5 11 f0       	push   $0xf011d5b3
f010870c:	e8 92 ee ff ff       	call   f01075a3 <cprintf>
f0108711:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f0108714:	8b 45 08             	mov    0x8(%ebp),%eax
f0108717:	8b 40 2c             	mov    0x2c(%eax),%eax
f010871a:	83 ec 08             	sub    $0x8,%esp
f010871d:	50                   	push   %eax
f010871e:	68 ca d5 11 f0       	push   $0xf011d5ca
f0108723:	e8 7b ee ff ff       	call   f01075a3 <cprintf>
f0108728:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010872b:	8b 45 08             	mov    0x8(%ebp),%eax
f010872e:	8b 40 30             	mov    0x30(%eax),%eax
f0108731:	83 ec 08             	sub    $0x8,%esp
f0108734:	50                   	push   %eax
f0108735:	68 d9 d5 11 f0       	push   $0xf011d5d9
f010873a:	e8 64 ee ff ff       	call   f01075a3 <cprintf>
f010873f:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f0108742:	8b 45 08             	mov    0x8(%ebp),%eax
f0108745:	8b 40 34             	mov    0x34(%eax),%eax
f0108748:	0f b7 c0             	movzwl %ax,%eax
f010874b:	83 ec 08             	sub    $0x8,%esp
f010874e:	50                   	push   %eax
f010874f:	68 e8 d5 11 f0       	push   $0xf011d5e8
f0108754:	e8 4a ee ff ff       	call   f01075a3 <cprintf>
f0108759:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010875c:	8b 45 08             	mov    0x8(%ebp),%eax
f010875f:	8b 40 38             	mov    0x38(%eax),%eax
f0108762:	83 ec 08             	sub    $0x8,%esp
f0108765:	50                   	push   %eax
f0108766:	68 fb d5 11 f0       	push   $0xf011d5fb
f010876b:	e8 33 ee ff ff       	call   f01075a3 <cprintf>
f0108770:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f0108773:	8b 45 08             	mov    0x8(%ebp),%eax
f0108776:	8b 40 3c             	mov    0x3c(%eax),%eax
f0108779:	83 ec 08             	sub    $0x8,%esp
f010877c:	50                   	push   %eax
f010877d:	68 0a d6 11 f0       	push   $0xf011d60a
f0108782:	e8 1c ee ff ff       	call   f01075a3 <cprintf>
f0108787:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010878a:	8b 45 08             	mov    0x8(%ebp),%eax
f010878d:	8b 40 40             	mov    0x40(%eax),%eax
f0108790:	0f b7 c0             	movzwl %ax,%eax
f0108793:	83 ec 08             	sub    $0x8,%esp
f0108796:	50                   	push   %eax
f0108797:	68 19 d6 11 f0       	push   $0xf011d619
f010879c:	e8 02 ee ff ff       	call   f01075a3 <cprintf>
f01087a1:	83 c4 10             	add    $0x10,%esp
}
f01087a4:	90                   	nop
f01087a5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01087a8:	c9                   	leave  
f01087a9:	c3                   	ret    

f01087aa <print_regs>:

void print_regs(struct PushRegs *regs)
{
f01087aa:	55                   	push   %ebp
f01087ab:	89 e5                	mov    %esp,%ebp
f01087ad:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f01087b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01087b3:	8b 00                	mov    (%eax),%eax
f01087b5:	83 ec 08             	sub    $0x8,%esp
f01087b8:	50                   	push   %eax
f01087b9:	68 2c d6 11 f0       	push   $0xf011d62c
f01087be:	e8 e0 ed ff ff       	call   f01075a3 <cprintf>
f01087c3:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f01087c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01087c9:	8b 40 04             	mov    0x4(%eax),%eax
f01087cc:	83 ec 08             	sub    $0x8,%esp
f01087cf:	50                   	push   %eax
f01087d0:	68 3b d6 11 f0       	push   $0xf011d63b
f01087d5:	e8 c9 ed ff ff       	call   f01075a3 <cprintf>
f01087da:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f01087dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01087e0:	8b 40 08             	mov    0x8(%eax),%eax
f01087e3:	83 ec 08             	sub    $0x8,%esp
f01087e6:	50                   	push   %eax
f01087e7:	68 4a d6 11 f0       	push   $0xf011d64a
f01087ec:	e8 b2 ed ff ff       	call   f01075a3 <cprintf>
f01087f1:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f01087f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01087f7:	8b 40 0c             	mov    0xc(%eax),%eax
f01087fa:	83 ec 08             	sub    $0x8,%esp
f01087fd:	50                   	push   %eax
f01087fe:	68 59 d6 11 f0       	push   $0xf011d659
f0108803:	e8 9b ed ff ff       	call   f01075a3 <cprintf>
f0108808:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010880b:	8b 45 08             	mov    0x8(%ebp),%eax
f010880e:	8b 40 10             	mov    0x10(%eax),%eax
f0108811:	83 ec 08             	sub    $0x8,%esp
f0108814:	50                   	push   %eax
f0108815:	68 68 d6 11 f0       	push   $0xf011d668
f010881a:	e8 84 ed ff ff       	call   f01075a3 <cprintf>
f010881f:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f0108822:	8b 45 08             	mov    0x8(%ebp),%eax
f0108825:	8b 40 14             	mov    0x14(%eax),%eax
f0108828:	83 ec 08             	sub    $0x8,%esp
f010882b:	50                   	push   %eax
f010882c:	68 77 d6 11 f0       	push   $0xf011d677
f0108831:	e8 6d ed ff ff       	call   f01075a3 <cprintf>
f0108836:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f0108839:	8b 45 08             	mov    0x8(%ebp),%eax
f010883c:	8b 40 18             	mov    0x18(%eax),%eax
f010883f:	83 ec 08             	sub    $0x8,%esp
f0108842:	50                   	push   %eax
f0108843:	68 86 d6 11 f0       	push   $0xf011d686
f0108848:	e8 56 ed ff ff       	call   f01075a3 <cprintf>
f010884d:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f0108850:	8b 45 08             	mov    0x8(%ebp),%eax
f0108853:	8b 40 1c             	mov    0x1c(%eax),%eax
f0108856:	83 ec 08             	sub    $0x8,%esp
f0108859:	50                   	push   %eax
f010885a:	68 95 d6 11 f0       	push   $0xf011d695
f010885f:	e8 3f ed ff ff       	call   f01075a3 <cprintf>
f0108864:	83 c4 10             	add    $0x10,%esp
}
f0108867:	90                   	nop
f0108868:	c9                   	leave  
f0108869:	c3                   	ret    

f010886a <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010886a:	55                   	push   %ebp
f010886b:	89 e5                	mov    %esp,%ebp
f010886d:	57                   	push   %edi
f010886e:	56                   	push   %esi
f010886f:	53                   	push   %ebx
f0108870:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.


	if(tf->tf_trapno == T_PGFLT)
f0108873:	8b 45 08             	mov    0x8(%ebp),%eax
f0108876:	8b 40 28             	mov    0x28(%eax),%eax
f0108879:	83 f8 0e             	cmp    $0xe,%eax
f010887c:	75 21                	jne    f010889f <trap_dispatch+0x35>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRUTimeStamp())
f010887e:	e8 b5 02 00 00       	call   f0108b38 <isPageReplacmentAlgorithmLRUTimeStamp>
f0108883:	85 c0                	test   %eax,%eax
f0108885:	74 05                	je     f010888c <trap_dispatch+0x22>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f0108887:	e8 c5 1b 00 00       	call   f010a451 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010888c:	83 ec 0c             	sub    $0xc,%esp
f010888f:	ff 75 08             	pushl  0x8(%ebp)
f0108892:	e8 1b 05 00 00       	call   f0108db2 <fault_handler>
f0108897:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010889a:	e9 a5 00 00 00       	jmp    f0108944 <trap_dispatch+0xda>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010889f:	8b 45 08             	mov    0x8(%ebp),%eax
f01088a2:	8b 40 28             	mov    0x28(%eax),%eax
f01088a5:	83 f8 30             	cmp    $0x30,%eax
f01088a8:	75 42                	jne    f01088ec <trap_dispatch+0x82>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f01088aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01088ad:	8b 78 04             	mov    0x4(%eax),%edi
f01088b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01088b3:	8b 30                	mov    (%eax),%esi
f01088b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01088b8:	8b 58 10             	mov    0x10(%eax),%ebx
f01088bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01088be:	8b 48 18             	mov    0x18(%eax),%ecx
f01088c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01088c4:	8b 50 14             	mov    0x14(%eax),%edx
f01088c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01088ca:	8b 40 1c             	mov    0x1c(%eax),%eax
f01088cd:	83 ec 08             	sub    $0x8,%esp
f01088d0:	57                   	push   %edi
f01088d1:	56                   	push   %esi
f01088d2:	53                   	push   %ebx
f01088d3:	51                   	push   %ecx
f01088d4:	52                   	push   %edx
f01088d5:	50                   	push   %eax
f01088d6:	e8 d1 28 00 00       	call   f010b1ac <syscall>
f01088db:	83 c4 20             	add    $0x20,%esp
f01088de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f01088e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01088e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01088e7:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f01088ea:	eb 58                	jmp    f0108944 <trap_dispatch+0xda>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f01088ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01088ef:	8b 40 28             	mov    0x28(%eax),%eax
f01088f2:	83 f8 08             	cmp    $0x8,%eax
f01088f5:	75 17                	jne    f010890e <trap_dispatch+0xa4>
	{
		panic("double fault!!");
f01088f7:	83 ec 04             	sub    $0x4,%esp
f01088fa:	68 a4 d6 11 f0       	push   $0xf011d6a4
f01088ff:	68 f2 00 00 00       	push   $0xf2
f0108904:	68 b3 d6 11 f0       	push   $0xf011d6b3
f0108909:	e8 85 78 ff ff       	call   f0100193 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010890e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108911:	8b 40 28             	mov    0x28(%eax),%eax
f0108914:	83 f8 20             	cmp    $0x20,%eax
f0108917:	75 07                	jne    f0108920 <trap_dispatch+0xb6>
	{
		clock_interrupt_handler() ;
f0108919:	e8 1a 1b 00 00       	call   f010a438 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010891e:	eb 24                	jmp    f0108944 <trap_dispatch+0xda>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f0108920:	8b 45 08             	mov    0x8(%ebp),%eax
f0108923:	8b 40 34             	mov    0x34(%eax),%eax
f0108926:	66 83 f8 08          	cmp    $0x8,%ax
f010892a:	75 17                	jne    f0108943 <trap_dispatch+0xd9>
		{
			panic("unhandled trap in kernel");
f010892c:	83 ec 04             	sub    $0x4,%esp
f010892f:	68 bf d6 11 f0       	push   $0xf011d6bf
f0108934:	68 ff 00 00 00       	push   $0xff
f0108939:	68 b3 d6 11 f0       	push   $0xf011d6b3
f010893e:	e8 50 78 ff ff       	call   f0100193 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f0108943:	90                   	nop
		}
	}
	return;
}
f0108944:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0108947:	5b                   	pop    %ebx
f0108948:	5e                   	pop    %esi
f0108949:	5f                   	pop    %edi
f010894a:	5d                   	pop    %ebp
f010894b:	c3                   	ret    

f010894c <trap>:

void trap(struct Trapframe *tf)
{
f010894c:	55                   	push   %ebp
f010894d:	89 e5                	mov    %esp,%ebp
f010894f:	57                   	push   %edi
f0108950:	56                   	push   %esi
f0108951:	53                   	push   %ebx
f0108952:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f0108955:	e8 e7 e7 ff ff       	call   f0107141 <kclock_stop>

	int userTrap = 0;
f010895a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f0108961:	8b 45 08             	mov    0x8(%ebp),%eax
f0108964:	8b 40 34             	mov    0x34(%eax),%eax
f0108967:	0f b7 c0             	movzwl %ax,%eax
f010896a:	83 e0 03             	and    $0x3,%eax
f010896d:	83 f8 03             	cmp    $0x3,%eax
f0108970:	75 49                	jne    f01089bb <trap+0x6f>
		assert(curenv);
f0108972:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108977:	85 c0                	test   %eax,%eax
f0108979:	75 19                	jne    f0108994 <trap+0x48>
f010897b:	68 d8 d6 11 f0       	push   $0xf011d6d8
f0108980:	68 df d6 11 f0       	push   $0xf011d6df
f0108985:	68 0f 01 00 00       	push   $0x10f
f010898a:	68 b3 d6 11 f0       	push   $0xf011d6b3
f010898f:	e8 ff 77 ff ff       	call   f0100193 <_panic>
		curenv->env_tf = *tf;
f0108994:	8b 15 30 58 32 f0    	mov    0xf0325830,%edx
f010899a:	8b 45 08             	mov    0x8(%ebp),%eax
f010899d:	89 c3                	mov    %eax,%ebx
f010899f:	b8 11 00 00 00       	mov    $0x11,%eax
f01089a4:	89 d7                	mov    %edx,%edi
f01089a6:	89 de                	mov    %ebx,%esi
f01089a8:	89 c1                	mov    %eax,%ecx
f01089aa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f01089ac:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01089b1:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f01089b4:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f01089bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01089be:	8b 40 28             	mov    0x28(%eax),%eax
f01089c1:	83 f8 20             	cmp    $0x20,%eax
f01089c4:	75 40                	jne    f0108a06 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f01089c6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01089ca:	0f 84 a6 00 00 00    	je     f0108a76 <trap+0x12a>
		{
			assert(curenv);
f01089d0:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01089d5:	85 c0                	test   %eax,%eax
f01089d7:	75 19                	jne    f01089f2 <trap+0xa6>
f01089d9:	68 d8 d6 11 f0       	push   $0xf011d6d8
f01089de:	68 df d6 11 f0       	push   $0xf011d6df
f01089e3:	68 1b 01 00 00       	push   $0x11b
f01089e8:	68 b3 d6 11 f0       	push   $0xf011d6b3
f01089ed:	e8 a1 77 ff ff       	call   f0100193 <_panic>
			curenv->nClocks++ ;
f01089f2:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f01089f7:	8b 90 38 ef 00 00    	mov    0xef38(%eax),%edx
f01089fd:	42                   	inc    %edx
f01089fe:	89 90 38 ef 00 00    	mov    %edx,0xef38(%eax)
f0108a04:	eb 70                	jmp    f0108a76 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f0108a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a09:	8b 40 28             	mov    0x28(%eax),%eax
f0108a0c:	83 f8 0e             	cmp    $0xe,%eax
f0108a0f:	75 65                	jne    f0108a76 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f0108a11:	a0 60 58 32 f0       	mov    0xf0325860,%al
f0108a16:	84 c0                	test   %al,%al
f0108a18:	74 5c                	je     f0108a76 <trap+0x12a>
			if (userTrap){
f0108a1a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108a1e:	74 2c                	je     f0108a4c <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f0108a20:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108a25:	8b 15 30 58 32 f0    	mov    0xf0325830,%edx
f0108a2b:	8b 52 30             	mov    0x30(%edx),%edx
f0108a2e:	89 d1                	mov    %edx,%ecx
f0108a30:	8a 15 60 58 32 f0    	mov    0xf0325860,%dl
f0108a36:	0f b6 d2             	movzbl %dl,%edx
f0108a39:	01 ca                	add    %ecx,%edx
f0108a3b:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f0108a3e:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108a43:	83 ec 0c             	sub    $0xc,%esp
f0108a46:	50                   	push   %eax
f0108a47:	e8 f8 dc ff ff       	call   f0106744 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f0108a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a4f:	8b 40 30             	mov    0x30(%eax),%eax
f0108a52:	89 c2                	mov    %eax,%edx
f0108a54:	a0 60 58 32 f0       	mov    0xf0325860,%al
f0108a59:	0f b6 c0             	movzbl %al,%eax
f0108a5c:	01 d0                	add    %edx,%eax
f0108a5e:	89 c2                	mov    %eax,%edx
f0108a60:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a63:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f0108a66:	e8 01 e7 ff ff       	call   f010716c <kclock_resume>
				env_pop_tf(tf);
f0108a6b:	83 ec 0c             	sub    $0xc,%esp
f0108a6e:	ff 75 08             	pushl  0x8(%ebp)
f0108a71:	e8 98 e5 ff ff       	call   f010700e <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f0108a76:	83 ec 0c             	sub    $0xc,%esp
f0108a79:	ff 75 08             	pushl  0x8(%ebp)
f0108a7c:	e8 e9 fd ff ff       	call   f010886a <trap_dispatch>
f0108a81:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f0108a84:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108a88:	74 3d                	je     f0108ac7 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f0108a8a:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108a8f:	85 c0                	test   %eax,%eax
f0108a91:	74 0d                	je     f0108aa0 <trap+0x154>
f0108a93:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108a98:	8b 40 54             	mov    0x54(%eax),%eax
f0108a9b:	83 f8 02             	cmp    $0x2,%eax
f0108a9e:	74 19                	je     f0108ab9 <trap+0x16d>
f0108aa0:	68 f4 d6 11 f0       	push   $0xf011d6f4
f0108aa5:	68 df d6 11 f0       	push   $0xf011d6df
f0108aaa:	68 30 01 00 00       	push   $0x130
f0108aaf:	68 b3 d6 11 f0       	push   $0xf011d6b3
f0108ab4:	e8 da 76 ff ff       	call   f0100193 <_panic>
		env_run(curenv);
f0108ab9:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108abe:	83 ec 0c             	sub    $0xc,%esp
f0108ac1:	50                   	push   %eax
f0108ac2:	e8 7d dc ff ff       	call   f0106744 <env_run>
	 * If trap from kernel, then return to the called kernel function using the passed param "tf"
	 * not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f0108ac7:	83 ec 0c             	sub    $0xc,%esp
f0108aca:	ff 75 08             	pushl  0x8(%ebp)
f0108acd:	e8 3c e5 ff ff       	call   f010700e <env_pop_tf>

f0108ad2 <setPageReplacmentAlgorithmLRU>:
	}
}

//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f0108ad2:	55                   	push   %ebp
f0108ad3:	89 e5                	mov    %esp,%ebp
f0108ad5:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f0108ad8:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0108adc:	74 1f                	je     f0108afd <setPageReplacmentAlgorithmLRU+0x2b>
f0108ade:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0108ae2:	74 19                	je     f0108afd <setPageReplacmentAlgorithmLRU+0x2b>
f0108ae4:	68 24 d7 11 f0       	push   $0xf011d724
f0108ae9:	68 df d6 11 f0       	push   $0xf011d6df
f0108aee:	68 40 01 00 00       	push   $0x140
f0108af3:	68 b3 d6 11 f0       	push   $0xf011d6b3
f0108af8:	e8 96 76 ff ff       	call   f0100193 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f0108afd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b00:	a3 ec 2c 39 f0       	mov    %eax,0xf0392cec
}
f0108b05:	90                   	nop
f0108b06:	c9                   	leave  
f0108b07:	c3                   	ret    

f0108b08 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f0108b08:	55                   	push   %ebp
f0108b09:	89 e5                	mov    %esp,%ebp
f0108b0b:	c7 05 ec 2c 39 f0 03 	movl   $0x3,0xf0392cec
f0108b12:	00 00 00 
f0108b15:	90                   	nop
f0108b16:	5d                   	pop    %ebp
f0108b17:	c3                   	ret    

f0108b18 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f0108b18:	55                   	push   %ebp
f0108b19:	89 e5                	mov    %esp,%ebp
f0108b1b:	c7 05 ec 2c 39 f0 04 	movl   $0x4,0xf0392cec
f0108b22:	00 00 00 
f0108b25:	90                   	nop
f0108b26:	5d                   	pop    %ebp
f0108b27:	c3                   	ret    

f0108b28 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f0108b28:	55                   	push   %ebp
f0108b29:	89 e5                	mov    %esp,%ebp
f0108b2b:	c7 05 ec 2c 39 f0 05 	movl   $0x5,0xf0392cec
f0108b32:	00 00 00 
f0108b35:	90                   	nop
f0108b36:	5d                   	pop    %ebp
f0108b37:	c3                   	ret    

f0108b38 <isPageReplacmentAlgorithmLRUTimeStamp>:

//2020
uint32 isPageReplacmentAlgorithmLRUTimeStamp(){if(_PageRepAlgoType == PG_REP_LRU_TIME_APPROX) return 1; return 0;}
f0108b38:	55                   	push   %ebp
f0108b39:	89 e5                	mov    %esp,%ebp
f0108b3b:	a1 ec 2c 39 f0       	mov    0xf0392cec,%eax
f0108b40:	83 f8 01             	cmp    $0x1,%eax
f0108b43:	75 07                	jne    f0108b4c <isPageReplacmentAlgorithmLRUTimeStamp+0x14>
f0108b45:	b8 01 00 00 00       	mov    $0x1,%eax
f0108b4a:	eb 05                	jmp    f0108b51 <isPageReplacmentAlgorithmLRUTimeStamp+0x19>
f0108b4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0108b51:	5d                   	pop    %ebp
f0108b52:	c3                   	ret    

f0108b53 <isPageReplacmentAlgorithmLRULists>:
uint32 isPageReplacmentAlgorithmLRULists(){if(_PageRepAlgoType == PG_REP_LRU_LISTS_APPROX) return 1; return 0;}
f0108b53:	55                   	push   %ebp
f0108b54:	89 e5                	mov    %esp,%ebp
f0108b56:	a1 ec 2c 39 f0       	mov    0xf0392cec,%eax
f0108b5b:	83 f8 02             	cmp    $0x2,%eax
f0108b5e:	75 07                	jne    f0108b67 <isPageReplacmentAlgorithmLRULists+0x14>
f0108b60:	b8 01 00 00 00       	mov    $0x1,%eax
f0108b65:	eb 05                	jmp    f0108b6c <isPageReplacmentAlgorithmLRULists+0x19>
f0108b67:	b8 00 00 00 00       	mov    $0x0,%eax
f0108b6c:	5d                   	pop    %ebp
f0108b6d:	c3                   	ret    

f0108b6e <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f0108b6e:	55                   	push   %ebp
f0108b6f:	89 e5                	mov    %esp,%ebp
f0108b71:	a1 ec 2c 39 f0       	mov    0xf0392cec,%eax
f0108b76:	83 f8 03             	cmp    $0x3,%eax
f0108b79:	75 07                	jne    f0108b82 <isPageReplacmentAlgorithmCLOCK+0x14>
f0108b7b:	b8 01 00 00 00       	mov    $0x1,%eax
f0108b80:	eb 05                	jmp    f0108b87 <isPageReplacmentAlgorithmCLOCK+0x19>
f0108b82:	b8 00 00 00 00       	mov    $0x0,%eax
f0108b87:	5d                   	pop    %ebp
f0108b88:	c3                   	ret    

f0108b89 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f0108b89:	55                   	push   %ebp
f0108b8a:	89 e5                	mov    %esp,%ebp
f0108b8c:	a1 ec 2c 39 f0       	mov    0xf0392cec,%eax
f0108b91:	83 f8 04             	cmp    $0x4,%eax
f0108b94:	75 07                	jne    f0108b9d <isPageReplacmentAlgorithmFIFO+0x14>
f0108b96:	b8 01 00 00 00       	mov    $0x1,%eax
f0108b9b:	eb 05                	jmp    f0108ba2 <isPageReplacmentAlgorithmFIFO+0x19>
f0108b9d:	b8 00 00 00 00       	mov    $0x0,%eax
f0108ba2:	5d                   	pop    %ebp
f0108ba3:	c3                   	ret    

f0108ba4 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f0108ba4:	55                   	push   %ebp
f0108ba5:	89 e5                	mov    %esp,%ebp
f0108ba7:	a1 ec 2c 39 f0       	mov    0xf0392cec,%eax
f0108bac:	83 f8 05             	cmp    $0x5,%eax
f0108baf:	75 07                	jne    f0108bb8 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f0108bb1:	b8 01 00 00 00       	mov    $0x1,%eax
f0108bb6:	eb 05                	jmp    f0108bbd <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f0108bb8:	b8 00 00 00 00       	mov    $0x0,%eax
f0108bbd:	5d                   	pop    %ebp
f0108bbe:	c3                   	ret    

f0108bbf <enableModifiedBuffer>:

void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f0108bbf:	55                   	push   %ebp
f0108bc0:	89 e5                	mov    %esp,%ebp
f0108bc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bc5:	a3 dc 2c 39 f0       	mov    %eax,0xf0392cdc
f0108bca:	90                   	nop
f0108bcb:	5d                   	pop    %ebp
f0108bcc:	c3                   	ret    

f0108bcd <isModifiedBufferEnabled>:
uint32 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f0108bcd:	55                   	push   %ebp
f0108bce:	89 e5                	mov    %esp,%ebp
f0108bd0:	a1 dc 2c 39 f0       	mov    0xf0392cdc,%eax
f0108bd5:	5d                   	pop    %ebp
f0108bd6:	c3                   	ret    

f0108bd7 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f0108bd7:	55                   	push   %ebp
f0108bd8:	89 e5                	mov    %esp,%ebp
f0108bda:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bdd:	a3 f0 2c 39 f0       	mov    %eax,0xf0392cf0
f0108be2:	90                   	nop
f0108be3:	5d                   	pop    %ebp
f0108be4:	c3                   	ret    

f0108be5 <isBufferingEnabled>:
uint32 isBufferingEnabled(){  return _EnableBuffering ; }
f0108be5:	55                   	push   %ebp
f0108be6:	89 e5                	mov    %esp,%ebp
f0108be8:	a1 f0 2c 39 f0       	mov    0xf0392cf0,%eax
f0108bed:	5d                   	pop    %ebp
f0108bee:	c3                   	ret    

f0108bef <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f0108bef:	55                   	push   %ebp
f0108bf0:	89 e5                	mov    %esp,%ebp
f0108bf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bf5:	a3 fc 2c 39 f0       	mov    %eax,0xf0392cfc
f0108bfa:	90                   	nop
f0108bfb:	5d                   	pop    %ebp
f0108bfc:	c3                   	ret    

f0108bfd <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f0108bfd:	55                   	push   %ebp
f0108bfe:	89 e5                	mov    %esp,%ebp
f0108c00:	a1 fc 2c 39 f0       	mov    0xf0392cfc,%eax
f0108c05:	5d                   	pop    %ebp
f0108c06:	c3                   	ret    

f0108c07 <detect_modified_loop>:


void detect_modified_loop()
{
f0108c07:	55                   	push   %ebp
f0108c08:	89 e5                	mov    %esp,%ebp
f0108c0a:	83 ec 18             	sub    $0x18,%esp
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
f0108c0d:	a1 20 11 3b f0       	mov    0xf03b1120,%eax
f0108c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);
f0108c15:	a1 20 11 3b f0       	mov    0xf03b1120,%eax
f0108c1a:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0108c1d:	eb 52                	jmp    f0108c71 <detect_modified_loop+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0108c1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c22:	8b 00                	mov    (%eax),%eax
f0108c24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0108c27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c2a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108c2d:	75 12                	jne    f0108c41 <detect_modified_loop+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0108c2f:	83 ec 0c             	sub    $0xc,%esp
f0108c32:	68 6e d7 11 f0       	push   $0xf011d76e
f0108c37:	e8 67 e9 ff ff       	call   f01075a3 <cprintf>
f0108c3c:	83 c4 10             	add    $0x10,%esp
			break;
f0108c3f:	eb 3f                	jmp    f0108c80 <detect_modified_loop+0x79>
		}

		if (fastPtr == NULL) {
f0108c41:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108c45:	74 38                	je     f0108c7f <detect_modified_loop+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0108c47:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c4a:	8b 00                	mov    (%eax),%eax
f0108c4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0108c4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108c55:	75 12                	jne    f0108c69 <detect_modified_loop+0x62>
			cprintf("loop detected in modiflist\n");
f0108c57:	83 ec 0c             	sub    $0xc,%esp
f0108c5a:	68 6e d7 11 f0       	push   $0xf011d76e
f0108c5f:	e8 3f e9 ff ff       	call   f01075a3 <cprintf>
f0108c64:	83 c4 10             	add    $0x10,%esp
			break;
f0108c67:	eb 17                	jmp    f0108c80 <detect_modified_loop+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f0108c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c6c:	8b 00                	mov    (%eax),%eax
f0108c6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);


	while (slowPtr && fastPtr) {
f0108c71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108c75:	74 09                	je     f0108c80 <detect_modified_loop+0x79>
f0108c77:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108c7b:	75 a2                	jne    f0108c1f <detect_modified_loop+0x18>
f0108c7d:	eb 01                	jmp    f0108c80 <detect_modified_loop+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0108c7f:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished modi loop detection\n");
f0108c80:	83 ec 0c             	sub    $0xc,%esp
f0108c83:	68 8a d7 11 f0       	push   $0xf011d78a
f0108c88:	e8 16 e9 ff ff       	call   f01075a3 <cprintf>
f0108c8d:	83 c4 10             	add    $0x10,%esp
}
f0108c90:	90                   	nop
f0108c91:	c9                   	leave  
f0108c92:	c3                   	ret    

f0108c93 <print_page_working_set_or_LRUlists>:


void print_page_working_set_or_LRUlists(struct Env *e)
{
f0108c93:	55                   	push   %ebp
f0108c94:	89 e5                	mov    %esp,%ebp
f0108c96:	83 ec 18             	sub    $0x18,%esp
	if (isPageReplacmentAlgorithmLRULists())
f0108c99:	e8 b5 fe ff ff       	call   f0108b53 <isPageReplacmentAlgorithmLRULists>
f0108c9e:	85 c0                	test   %eax,%eax
f0108ca0:	0f 84 fb 00 00 00    	je     f0108da1 <print_page_working_set_or_LRUlists+0x10e>
	{
		int i = 0;
f0108ca6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0108cad:	83 ec 0c             	sub    $0xc,%esp
f0108cb0:	68 a8 d7 11 f0       	push   $0xf011d7a8
f0108cb5:	e8 e9 e8 ff ff       	call   f01075a3 <cprintf>
f0108cba:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108cbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cc0:	8b 80 50 ef 00 00    	mov    0xef50(%eax),%eax
f0108cc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108cc9:	eb 2c                	jmp    f0108cf7 <print_page_working_set_or_LRUlists+0x64>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108ccb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108cce:	8b 10                	mov    (%eax),%edx
f0108cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108cd3:	8d 48 01             	lea    0x1(%eax),%ecx
f0108cd6:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108cd9:	83 ec 04             	sub    $0x4,%esp
f0108cdc:	52                   	push   %edx
f0108cdd:	50                   	push   %eax
f0108cde:	68 c2 d7 11 f0       	push   $0xf011d7c2
f0108ce3:	e8 bb e8 ff ff       	call   f01075a3 <cprintf>
f0108ce8:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRULists())
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108ceb:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cee:	8b 80 58 ef 00 00    	mov    0xef58(%eax),%eax
f0108cf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108cf7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108cfb:	74 08                	je     f0108d05 <print_page_working_set_or_LRUlists+0x72>
f0108cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d00:	8b 40 0c             	mov    0xc(%eax),%eax
f0108d03:	eb 05                	jmp    f0108d0a <print_page_working_set_or_LRUlists+0x77>
f0108d05:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d0a:	8b 55 08             	mov    0x8(%ebp),%edx
f0108d0d:	89 82 58 ef 00 00    	mov    %eax,0xef58(%edx)
f0108d13:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d16:	8b 80 58 ef 00 00    	mov    0xef58(%eax),%eax
f0108d1c:	85 c0                	test   %eax,%eax
f0108d1e:	75 ab                	jne    f0108ccb <print_page_working_set_or_LRUlists+0x38>
f0108d20:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108d24:	75 a5                	jne    f0108ccb <print_page_working_set_or_LRUlists+0x38>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0108d26:	83 ec 0c             	sub    $0xc,%esp
f0108d29:	68 ca d7 11 f0       	push   $0xf011d7ca
f0108d2e:	e8 70 e8 ff ff       	call   f01075a3 <cprintf>
f0108d33:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108d36:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d39:	8b 80 60 ef 00 00    	mov    0xef60(%eax),%eax
f0108d3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108d42:	eb 2c                	jmp    f0108d70 <print_page_working_set_or_LRUlists+0xdd>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108d44:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d47:	8b 10                	mov    (%eax),%edx
f0108d49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d4c:	8d 48 01             	lea    0x1(%eax),%ecx
f0108d4f:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108d52:	83 ec 04             	sub    $0x4,%esp
f0108d55:	52                   	push   %edx
f0108d56:	50                   	push   %eax
f0108d57:	68 c2 d7 11 f0       	push   $0xf011d7c2
f0108d5c:	e8 42 e8 ff ff       	call   f01075a3 <cprintf>
f0108d61:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0108d64:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d67:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f0108d6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108d70:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108d74:	74 08                	je     f0108d7e <print_page_working_set_or_LRUlists+0xeb>
f0108d76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108d79:	8b 40 0c             	mov    0xc(%eax),%eax
f0108d7c:	eb 05                	jmp    f0108d83 <print_page_working_set_or_LRUlists+0xf0>
f0108d7e:	b8 00 00 00 00       	mov    $0x0,%eax
f0108d83:	8b 55 08             	mov    0x8(%ebp),%edx
f0108d86:	89 82 68 ef 00 00    	mov    %eax,0xef68(%edx)
f0108d8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d8f:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f0108d95:	85 c0                	test   %eax,%eax
f0108d97:	75 ab                	jne    f0108d44 <print_page_working_set_or_LRUlists+0xb1>
f0108d99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108d9d:	75 a5                	jne    f0108d44 <print_page_working_set_or_LRUlists+0xb1>
	}
	else
	{
		env_page_ws_print(e);
	}
}
f0108d9f:	eb 0e                	jmp    f0108daf <print_page_working_set_or_LRUlists+0x11c>
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
	}
	else
	{
		env_page_ws_print(e);
f0108da1:	83 ec 0c             	sub    $0xc,%esp
f0108da4:	ff 75 08             	pushl  0x8(%ebp)
f0108da7:	e8 31 b9 ff ff       	call   f01046dd <env_page_ws_print>
f0108dac:	83 c4 10             	add    $0x10,%esp
	}
}
f0108daf:	90                   	nop
f0108db0:	c9                   	leave  
f0108db1:	c3                   	ret    

f0108db2 <fault_handler>:

void fault_handler(struct Trapframe *tf)
{
f0108db2:	55                   	push   %ebp
f0108db3:	89 e5                	mov    %esp,%ebp
f0108db5:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f0108db8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f0108dbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dc2:	8b 40 34             	mov    0x34(%eax),%eax
f0108dc5:	0f b7 c0             	movzwl %ax,%eax
f0108dc8:	83 e0 03             	and    $0x3,%eax
f0108dcb:	83 f8 03             	cmp    $0x3,%eax
f0108dce:	75 07                	jne    f0108dd7 <fault_handler+0x25>
		userTrap = 1;
f0108dd0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f0108dd7:	0f 20 d0             	mov    %cr2,%eax
f0108dda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f0108ddd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f0108de0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f0108de3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108de7:	75 29                	jne    f0108e12 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f0108de9:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f0108df0:	77 40                	ja     f0108e32 <fault_handler+0x80>
f0108df2:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f0108df9:	76 37                	jbe    f0108e32 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f0108dfb:	83 ec 04             	sub    $0x4,%esp
f0108dfe:	68 e8 d7 11 f0       	push   $0xf011d7e8
f0108e03:	68 9d 01 00 00       	push   $0x19d
f0108e08:	68 b3 d6 11 f0       	push   $0xf011d6b3
f0108e0d:	e8 81 73 ff ff       	call   f0100193 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f0108e12:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f0108e19:	76 17                	jbe    f0108e32 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f0108e1b:	83 ec 04             	sub    $0x4,%esp
f0108e1e:	68 0c d8 11 f0       	push   $0xf011d80c
f0108e23:	68 a3 01 00 00       	push   $0x1a3
f0108e28:	68 b3 d6 11 f0       	push   $0xf011d6b3
f0108e2d:	e8 61 73 ff ff       	call   f0100193 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f0108e32:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108e37:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f0108e3a:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0108e3f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108e42:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108e45:	c1 ea 16             	shr    $0x16,%edx
f0108e48:	c1 e2 02             	shl    $0x2,%edx
f0108e4b:	01 d0                	add    %edx,%eax
f0108e4d:	8b 00                	mov    (%eax),%eax
f0108e4f:	83 e0 01             	and    $0x1,%eax
f0108e52:	85 c0                	test   %eax,%eax
f0108e54:	75 28                	jne    f0108e7e <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f0108e56:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e59:	8b 80 cc ee 00 00    	mov    0xeecc(%eax),%eax
f0108e5f:	8d 50 01             	lea    0x1(%eax),%edx
f0108e62:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e65:	89 90 cc ee 00 00    	mov    %edx,0xeecc(%eax)

		table_fault_handler(faulted_env, fault_va);
f0108e6b:	83 ec 08             	sub    $0x8,%esp
f0108e6e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108e71:	ff 75 e8             	pushl  -0x18(%ebp)
f0108e74:	e8 56 00 00 00       	call   f0108ecf <table_fault_handler>
f0108e79:	83 c4 10             	add    $0x10,%esp
f0108e7c:	eb 42                	jmp    f0108ec0 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f0108e7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e81:	8b 80 c8 ee 00 00    	mov    0xeec8(%eax),%eax
f0108e87:	8d 50 01             	lea    0x1(%eax),%edx
f0108e8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e8d:	89 90 c8 ee 00 00    	mov    %edx,0xeec8(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//print_page_working_set_or_LRUlists(curenv);

		if(isBufferingEnabled())
f0108e93:	e8 4d fd ff ff       	call   f0108be5 <isBufferingEnabled>
f0108e98:	85 c0                	test   %eax,%eax
f0108e9a:	74 13                	je     f0108eaf <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f0108e9c:	83 ec 08             	sub    $0x8,%esp
f0108e9f:	ff 75 ec             	pushl  -0x14(%ebp)
f0108ea2:	ff 75 e8             	pushl  -0x18(%ebp)
f0108ea5:	e8 3a 01 00 00       	call   f0108fe4 <__page_fault_handler_with_buffering>
f0108eaa:	83 c4 10             	add    $0x10,%esp
f0108ead:	eb 11                	jmp    f0108ec0 <fault_handler+0x10e>
		}
		else
		{
			page_fault_handler(faulted_env, fault_va);
f0108eaf:	83 ec 08             	sub    $0x8,%esp
f0108eb2:	ff 75 ec             	pushl  -0x14(%ebp)
f0108eb5:	ff 75 e8             	pushl  -0x18(%ebp)
f0108eb8:	e8 34 00 00 00       	call   f0108ef1 <page_fault_handler>
f0108ebd:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108ec0:	0f 20 d8             	mov    %cr3,%eax
f0108ec3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108ec6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108ec9:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f0108ecc:	90                   	nop
f0108ecd:	c9                   	leave  
f0108ece:	c3                   	ret    

f0108ecf <table_fault_handler>:


//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f0108ecf:	55                   	push   %ebp
f0108ed0:	89 e5                	mov    %esp,%ebp
f0108ed2:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f0108ed5:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ed8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108edb:	83 ec 04             	sub    $0x4,%esp
f0108ede:	8d 55 f4             	lea    -0xc(%ebp),%edx
f0108ee1:	52                   	push   %edx
f0108ee2:	ff 75 0c             	pushl  0xc(%ebp)
f0108ee5:	50                   	push   %eax
f0108ee6:	e8 a6 b0 ff ff       	call   f0103f91 <__static_cpt>
f0108eeb:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0108eee:	90                   	nop
f0108eef:	c9                   	leave  
f0108ef0:	c3                   	ret    

f0108ef1 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f0108ef1:	55                   	push   %ebp
f0108ef2:	89 e5                	mov    %esp,%ebp
f0108ef4:	83 ec 18             	sub    $0x18,%esp
	fault_va = ROUNDDOWN(fault_va, PAGE_SIZE);
f0108ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108efa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108efd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f00:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f05:	89 45 0c             	mov    %eax,0xc(%ebp)
	//TODO: [FINAL_EVAL_2020 - VER_C] - [1] PAGE FAULT HANDLER [PLACEMENT ONLY]
	// Write your code here, remove the panic and write your code
	uint32 * ptr = NULL;
f0108f08:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info * ptr1 = NULL;
f0108f0f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	curenv->ptr_pageWorkingSet[curenv->page_last_WS_index].virtual_address = fault_va;
f0108f16:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f19:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0108f1f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f22:	89 d0                	mov    %edx,%eax
f0108f24:	c1 e0 02             	shl    $0x2,%eax
f0108f27:	01 d0                	add    %edx,%eax
f0108f29:	c1 e0 02             	shl    $0x2,%eax
f0108f2c:	01 c8                	add    %ecx,%eax
f0108f2e:	8d 50 78             	lea    0x78(%eax),%edx
f0108f31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f34:	89 02                	mov    %eax,(%edx)
	curenv->ptr_pageWorkingSet[curenv->page_last_WS_index++].empty = 0;
f0108f36:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f39:	8b 90 c0 ee 00 00    	mov    0xeec0(%eax),%edx
f0108f3f:	8d 4a 01             	lea    0x1(%edx),%ecx
f0108f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f45:	89 88 c0 ee 00 00    	mov    %ecx,0xeec0(%eax)
f0108f4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f4e:	89 d0                	mov    %edx,%eax
f0108f50:	c1 e0 02             	shl    $0x2,%eax
f0108f53:	01 d0                	add    %edx,%eax
f0108f55:	c1 e0 02             	shl    $0x2,%eax
f0108f58:	01 c8                	add    %ecx,%eax
f0108f5a:	83 c0 7c             	add    $0x7c,%eax
f0108f5d:	c6 00 00             	movb   $0x0,(%eax)
	allocate_frame(&ptr1);
f0108f60:	83 ec 0c             	sub    $0xc,%esp
f0108f63:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0108f66:	50                   	push   %eax
f0108f67:	e8 83 ad ff ff       	call   f0103cef <allocate_frame>
f0108f6c:	83 c4 10             	add    $0x10,%esp
	map_frame(curenv->env_page_directory , ptr1 , (void * )fault_va ,PERM_USER | PERM_WRITEABLE);
f0108f6f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108f72:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0108f75:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f78:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108f7b:	6a 06                	push   $0x6
f0108f7d:	51                   	push   %ecx
f0108f7e:	52                   	push   %edx
f0108f7f:	50                   	push   %eax
f0108f80:	e8 bf b0 ff ff       	call   f0104044 <map_frame>
f0108f85:	83 c4 10             	add    $0x10,%esp
	int a = pf_read_env_page(curenv , (void *)fault_va);
f0108f88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f8b:	83 ec 08             	sub    $0x8,%esp
f0108f8e:	50                   	push   %eax
f0108f8f:	ff 75 08             	pushl  0x8(%ebp)
f0108f92:	e8 26 32 00 00       	call   f010c1bd <pf_read_env_page>
f0108f97:	83 c4 10             	add    $0x10,%esp
f0108f9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(a == E_PAGE_NOT_EXIST_IN_PF){
f0108f9d:	83 7d ec f7          	cmpl   $0xfffffff7,-0x14(%ebp)
f0108fa1:	75 3e                	jne    f0108fe1 <page_fault_handler+0xf0>
		if(fault_va > USER_HEAP_MAX && fault_va <= USTACKTOP){
f0108fa3:	81 7d 0c 00 00 00 a0 	cmpl   $0xa0000000,0xc(%ebp)
f0108faa:	76 1e                	jbe    f0108fca <page_fault_handler+0xd9>
f0108fac:	81 7d 0c 00 e0 bf ee 	cmpl   $0xeebfe000,0xc(%ebp)
f0108fb3:	77 15                	ja     f0108fca <page_fault_handler+0xd9>
			pf_add_empty_env_page(curenv, fault_va, 0);
f0108fb5:	83 ec 04             	sub    $0x4,%esp
f0108fb8:	6a 00                	push   $0x0
f0108fba:	ff 75 0c             	pushl  0xc(%ebp)
f0108fbd:	ff 75 08             	pushl  0x8(%ebp)
f0108fc0:	e8 06 2f 00 00       	call   f010becb <pf_add_empty_env_page>
f0108fc5:	83 c4 10             	add    $0x10,%esp
		else{
			panic("it is not found");
		}
	}

}
f0108fc8:	eb 17                	jmp    f0108fe1 <page_fault_handler+0xf0>
	if(a == E_PAGE_NOT_EXIST_IN_PF){
		if(fault_va > USER_HEAP_MAX && fault_va <= USTACKTOP){
			pf_add_empty_env_page(curenv, fault_va, 0);
		}
		else{
			panic("it is not found");
f0108fca:	83 ec 04             	sub    $0x4,%esp
f0108fcd:	68 2d d8 11 f0       	push   $0xf011d82d
f0108fd2:	68 f7 01 00 00       	push   $0x1f7
f0108fd7:	68 b3 d6 11 f0       	push   $0xf011d6b3
f0108fdc:	e8 b2 71 ff ff       	call   f0100193 <_panic>
		}
	}

}
f0108fe1:	90                   	nop
f0108fe2:	c9                   	leave  
f0108fe3:	c3                   	ret    

f0108fe4 <__page_fault_handler_with_buffering>:


void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f0108fe4:	55                   	push   %ebp
f0108fe5:	89 e5                	mov    %esp,%ebp
f0108fe7:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f0108fea:	83 ec 04             	sub    $0x4,%esp
f0108fed:	68 40 d8 11 f0       	push   $0xf011d840
f0108ff2:	68 01 02 00 00       	push   $0x201
f0108ff7:	68 b3 d6 11 f0       	push   $0xf011d6b3
f0108ffc:	e8 92 71 ff ff       	call   f0100193 <_panic>
f0109001:	90                   	nop

f0109002 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f0109002:	6a 0e                	push   $0xe
f0109004:	e9 ed 00 00 00       	jmp    f01090f6 <_alltraps>
f0109009:	90                   	nop

f010900a <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010900a:	6a 00                	push   $0x0
f010900c:	6a 30                	push   $0x30
f010900e:	e9 e3 00 00 00       	jmp    f01090f6 <_alltraps>
f0109013:	90                   	nop

f0109014 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f0109014:	6a 08                	push   $0x8
f0109016:	e9 db 00 00 00       	jmp    f01090f6 <_alltraps>
f010901b:	90                   	nop

f010901c <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010901c:	6a 00                	push   $0x0
f010901e:	6a 00                	push   $0x0
f0109020:	e9 d1 00 00 00       	jmp    f01090f6 <_alltraps>
f0109025:	90                   	nop

f0109026 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f0109026:	6a 00                	push   $0x0
f0109028:	6a 01                	push   $0x1
f010902a:	e9 c7 00 00 00       	jmp    f01090f6 <_alltraps>
f010902f:	90                   	nop

f0109030 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f0109030:	6a 00                	push   $0x0
f0109032:	6a 02                	push   $0x2
f0109034:	e9 bd 00 00 00       	jmp    f01090f6 <_alltraps>
f0109039:	90                   	nop

f010903a <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010903a:	6a 00                	push   $0x0
f010903c:	6a 03                	push   $0x3
f010903e:	e9 b3 00 00 00       	jmp    f01090f6 <_alltraps>
f0109043:	90                   	nop

f0109044 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f0109044:	6a 00                	push   $0x0
f0109046:	6a 04                	push   $0x4
f0109048:	e9 a9 00 00 00       	jmp    f01090f6 <_alltraps>
f010904d:	90                   	nop

f010904e <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010904e:	6a 00                	push   $0x0
f0109050:	6a 05                	push   $0x5
f0109052:	e9 9f 00 00 00       	jmp    f01090f6 <_alltraps>
f0109057:	90                   	nop

f0109058 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f0109058:	6a 00                	push   $0x0
f010905a:	6a 06                	push   $0x6
f010905c:	e9 95 00 00 00       	jmp    f01090f6 <_alltraps>
f0109061:	90                   	nop

f0109062 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f0109062:	6a 00                	push   $0x0
f0109064:	6a 07                	push   $0x7
f0109066:	e9 8b 00 00 00       	jmp    f01090f6 <_alltraps>
f010906b:	90                   	nop

f010906c <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010906c:	6a 0a                	push   $0xa
f010906e:	e9 83 00 00 00       	jmp    f01090f6 <_alltraps>
f0109073:	90                   	nop

f0109074 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f0109074:	6a 0b                	push   $0xb
f0109076:	eb 7e                	jmp    f01090f6 <_alltraps>

f0109078 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f0109078:	6a 0c                	push   $0xc
f010907a:	eb 7a                	jmp    f01090f6 <_alltraps>

f010907c <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010907c:	6a 0d                	push   $0xd
f010907e:	eb 76                	jmp    f01090f6 <_alltraps>

f0109080 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f0109080:	6a 00                	push   $0x0
f0109082:	6a 10                	push   $0x10
f0109084:	eb 70                	jmp    f01090f6 <_alltraps>

f0109086 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f0109086:	6a 11                	push   $0x11
f0109088:	eb 6c                	jmp    f01090f6 <_alltraps>

f010908a <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010908a:	6a 00                	push   $0x0
f010908c:	6a 12                	push   $0x12
f010908e:	eb 66                	jmp    f01090f6 <_alltraps>

f0109090 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f0109090:	6a 00                	push   $0x0
f0109092:	6a 13                	push   $0x13
f0109094:	eb 60                	jmp    f01090f6 <_alltraps>

f0109096 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f0109096:	6a 00                	push   $0x0
f0109098:	6a 20                	push   $0x20
f010909a:	eb 5a                	jmp    f01090f6 <_alltraps>

f010909c <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010909c:	6a 00                	push   $0x0
f010909e:	6a 21                	push   $0x21
f01090a0:	eb 54                	jmp    f01090f6 <_alltraps>

f01090a2 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f01090a2:	6a 00                	push   $0x0
f01090a4:	6a 22                	push   $0x22
f01090a6:	eb 4e                	jmp    f01090f6 <_alltraps>

f01090a8 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f01090a8:	6a 00                	push   $0x0
f01090aa:	6a 23                	push   $0x23
f01090ac:	eb 48                	jmp    f01090f6 <_alltraps>

f01090ae <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f01090ae:	6a 00                	push   $0x0
f01090b0:	6a 24                	push   $0x24
f01090b2:	eb 42                	jmp    f01090f6 <_alltraps>

f01090b4 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f01090b4:	6a 00                	push   $0x0
f01090b6:	6a 25                	push   $0x25
f01090b8:	eb 3c                	jmp    f01090f6 <_alltraps>

f01090ba <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f01090ba:	6a 00                	push   $0x0
f01090bc:	6a 26                	push   $0x26
f01090be:	eb 36                	jmp    f01090f6 <_alltraps>

f01090c0 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f01090c0:	6a 00                	push   $0x0
f01090c2:	6a 27                	push   $0x27
f01090c4:	eb 30                	jmp    f01090f6 <_alltraps>

f01090c6 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f01090c6:	6a 00                	push   $0x0
f01090c8:	6a 28                	push   $0x28
f01090ca:	eb 2a                	jmp    f01090f6 <_alltraps>

f01090cc <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f01090cc:	6a 00                	push   $0x0
f01090ce:	6a 29                	push   $0x29
f01090d0:	eb 24                	jmp    f01090f6 <_alltraps>

f01090d2 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f01090d2:	6a 00                	push   $0x0
f01090d4:	6a 2a                	push   $0x2a
f01090d6:	eb 1e                	jmp    f01090f6 <_alltraps>

f01090d8 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f01090d8:	6a 00                	push   $0x0
f01090da:	6a 2b                	push   $0x2b
f01090dc:	eb 18                	jmp    f01090f6 <_alltraps>

f01090de <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f01090de:	6a 00                	push   $0x0
f01090e0:	6a 2c                	push   $0x2c
f01090e2:	eb 12                	jmp    f01090f6 <_alltraps>

f01090e4 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f01090e4:	6a 00                	push   $0x0
f01090e6:	6a 2d                	push   $0x2d
f01090e8:	eb 0c                	jmp    f01090f6 <_alltraps>

f01090ea <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f01090ea:	6a 00                	push   $0x0
f01090ec:	6a 2e                	push   $0x2e
f01090ee:	eb 06                	jmp    f01090f6 <_alltraps>

f01090f0 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f01090f0:	6a 00                	push   $0x0
f01090f2:	6a 2f                	push   $0x2f
f01090f4:	eb 00                	jmp    f01090f6 <_alltraps>

f01090f6 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f01090f6:	1e                   	push   %ds
push %es
f01090f7:	06                   	push   %es
pushal
f01090f8:	60                   	pusha  

mov $(GD_KD), %ax
f01090f9:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f01090fd:	8e d8                	mov    %eax,%ds
mov %ax,%es
f01090ff:	8e c0                	mov    %eax,%es

push %esp
f0109101:	54                   	push   %esp

call trap
f0109102:	e8 45 f8 ff ff       	call   f010894c <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f0109107:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f0109108:	61                   	popa   
pop %es
f0109109:	07                   	pop    %es
pop %ds
f010910a:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010910b:	83 c4 08             	add    $0x8,%esp

iret
f010910e:	cf                   	iret   

f010910f <isSchedMethodRR>:
extern inline void pd_set_table_unused(struct Env *e, uint32 virtual_address);
extern inline void pd_clear_page_dir_entry(struct Env *e, uint32 virtual_address);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010910f:	55                   	push   %ebp
f0109110:	89 e5                	mov    %esp,%ebp
f0109112:	a1 d8 2c 39 f0       	mov    0xf0392cd8,%eax
f0109117:	85 c0                	test   %eax,%eax
f0109119:	75 07                	jne    f0109122 <isSchedMethodRR+0x13>
f010911b:	b8 01 00 00 00       	mov    $0x1,%eax
f0109120:	eb 05                	jmp    f0109127 <isSchedMethodRR+0x18>
f0109122:	b8 00 00 00 00       	mov    $0x0,%eax
f0109127:	5d                   	pop    %ebp
f0109128:	c3                   	ret    

f0109129 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0109129:	55                   	push   %ebp
f010912a:	89 e5                	mov    %esp,%ebp
f010912c:	a1 d8 2c 39 f0       	mov    0xf0392cd8,%eax
f0109131:	83 f8 01             	cmp    $0x1,%eax
f0109134:	75 07                	jne    f010913d <isSchedMethodMLFQ+0x14>
f0109136:	b8 01 00 00 00       	mov    $0x1,%eax
f010913b:	eb 05                	jmp    f0109142 <isSchedMethodMLFQ+0x19>
f010913d:	b8 00 00 00 00       	mov    $0x0,%eax
f0109142:	5d                   	pop    %ebp
f0109143:	c3                   	ret    

f0109144 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0109144:	55                   	push   %ebp
f0109145:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0109147:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010914b:	74 1d                	je     f010916a <init_queue+0x26>
	{
		LIST_INIT(queue);
f010914d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109150:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109156:	8b 45 08             	mov    0x8(%ebp),%eax
f0109159:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0109160:	8b 45 08             	mov    0x8(%ebp),%eax
f0109163:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010916a:	90                   	nop
f010916b:	5d                   	pop    %ebp
f010916c:	c3                   	ret    

f010916d <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010916d:	55                   	push   %ebp
f010916e:	89 e5                	mov    %esp,%ebp
f0109170:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f0109173:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f010917a:	8b 45 08             	mov    0x8(%ebp),%eax
f010917d:	8b 00                	mov    (%eax),%eax
f010917f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0109182:	eb 19                	jmp    f010919d <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0109184:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0109187:	8b 40 4c             	mov    0x4c(%eax),%eax
f010918a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010918d:	75 05                	jne    f0109194 <find_env_in_queue+0x27>
		{
			return ptr_env;
f010918f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0109192:	eb 37                	jmp    f01091cb <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f0109194:	8b 45 08             	mov    0x8(%ebp),%eax
f0109197:	8b 40 08             	mov    0x8(%eax),%eax
f010919a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010919d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01091a1:	74 08                	je     f01091ab <find_env_in_queue+0x3e>
f01091a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01091a6:	8b 40 44             	mov    0x44(%eax),%eax
f01091a9:	eb 05                	jmp    f01091b0 <find_env_in_queue+0x43>
f01091ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01091b0:	8b 55 08             	mov    0x8(%ebp),%edx
f01091b3:	89 42 08             	mov    %eax,0x8(%edx)
f01091b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01091b9:	8b 40 08             	mov    0x8(%eax),%eax
f01091bc:	85 c0                	test   %eax,%eax
f01091be:	75 c4                	jne    f0109184 <find_env_in_queue+0x17>
f01091c0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01091c4:	75 be                	jne    f0109184 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01091c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01091cb:	c9                   	leave  
f01091cc:	c3                   	ret    

f01091cd <sched_init_MLFQ>:
//==================================================================================//

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f01091cd:	55                   	push   %ebp
f01091ce:	89 e5                	mov    %esp,%ebp
f01091d0:	83 ec 18             	sub    $0x18,%esp
f01091d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01091d6:	88 45 f4             	mov    %al,-0xc(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	//sched_delete_ready_queues();
	scheduler_status = SCH_STOPPED;
f01091d9:	c7 05 e0 2c 39 f0 00 	movl   $0x0,0xf0392ce0
f01091e0:	00 00 00 
	scheduler_method = SCH_MLFQ;
f01091e3:	c7 05 d8 2c 39 f0 01 	movl   $0x1,0xf0392cd8
f01091ea:	00 00 00 
	//=========================================
	//=========================================

	// Write your code here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f01091ed:	83 ec 04             	sub    $0x4,%esp
f01091f0:	68 30 da 11 f0       	push   $0xf011da30
f01091f5:	6a 3b                	push   $0x3b
f01091f7:	68 5e da 11 f0       	push   $0xf011da5e
f01091fc:	e8 92 6f ff ff       	call   f0100193 <_panic>

f0109201 <fos_scheduler_MLFQ>:
	//[2] Initialize the "quantums" array by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
}

struct Env* fos_scheduler_MLFQ()
{
f0109201:	55                   	push   %ebp
f0109202:	89 e5                	mov    %esp,%ebp
f0109204:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f0109207:	83 ec 04             	sub    $0x4,%esp
f010920a:	68 6c da 11 f0       	push   $0xf011da6c
f010920f:	6a 49                	push   $0x49
f0109211:	68 5e da 11 f0       	push   $0xf011da5e
f0109216:	e8 78 6f ff ff       	call   f0100193 <_panic>

f010921b <fos_scheduler>:
}


void
fos_scheduler(void)
{
f010921b:	55                   	push   %ebp
f010921c:	89 e5                	mov    %esp,%ebp
f010921e:	83 ec 18             	sub    $0x18,%esp
	chk1();
f0109221:	e8 58 15 01 00       	call   f011a77e <chk1>
	scheduler_status = SCH_STARTED;
f0109226:	c7 05 e0 2c 39 f0 01 	movl   $0x1,0xf0392ce0
f010922d:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0109230:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0109237:	a1 d8 2c 39 f0       	mov    0xf0392cd8,%eax
f010923c:	85 c0                	test   %eax,%eax
f010923e:	0f 85 e8 00 00 00    	jne    f010932c <fos_scheduler+0x111>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0109244:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109249:	85 c0                	test   %eax,%eax
f010924b:	74 50                	je     f010929d <fos_scheduler+0x82>
		{
			LIST_INSERT_HEAD(&(env_ready_queues[0]), curenv);
f010924d:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109252:	8b 15 20 61 32 f0    	mov    0xf0326120,%edx
f0109258:	89 50 44             	mov    %edx,0x44(%eax)
f010925b:	8b 40 44             	mov    0x44(%eax),%eax
f010925e:	85 c0                	test   %eax,%eax
f0109260:	74 10                	je     f0109272 <fos_scheduler+0x57>
f0109262:	a1 20 61 32 f0       	mov    0xf0326120,%eax
f0109267:	8b 15 30 58 32 f0    	mov    0xf0325830,%edx
f010926d:	89 50 48             	mov    %edx,0x48(%eax)
f0109270:	eb 0a                	jmp    f010927c <fos_scheduler+0x61>
f0109272:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109277:	a3 24 61 32 f0       	mov    %eax,0xf0326124
f010927c:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109281:	a3 20 61 32 f0       	mov    %eax,0xf0326120
f0109286:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010928b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109292:	a1 2c 61 32 f0       	mov    0xf032612c,%eax
f0109297:	40                   	inc    %eax
f0109298:	a3 2c 61 32 f0       	mov    %eax,0xf032612c
		}

		//Pick the next environment from the ready queue
		next_env = LIST_LAST(&(env_ready_queues[0]));
f010929d:	a1 24 61 32 f0       	mov    0xf0326124,%eax
f01092a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (next_env != NULL)
f01092a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01092a9:	74 6b                	je     f0109316 <fos_scheduler+0xfb>
			LIST_REMOVE(&(env_ready_queues[0]), next_env);
f01092ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092ae:	8b 40 44             	mov    0x44(%eax),%eax
f01092b1:	85 c0                	test   %eax,%eax
f01092b3:	74 11                	je     f01092c6 <fos_scheduler+0xab>
f01092b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092b8:	8b 40 44             	mov    0x44(%eax),%eax
f01092bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01092be:	8b 52 48             	mov    0x48(%edx),%edx
f01092c1:	89 50 48             	mov    %edx,0x48(%eax)
f01092c4:	eb 0b                	jmp    f01092d1 <fos_scheduler+0xb6>
f01092c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092c9:	8b 40 48             	mov    0x48(%eax),%eax
f01092cc:	a3 24 61 32 f0       	mov    %eax,0xf0326124
f01092d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092d4:	8b 40 48             	mov    0x48(%eax),%eax
f01092d7:	85 c0                	test   %eax,%eax
f01092d9:	74 11                	je     f01092ec <fos_scheduler+0xd1>
f01092db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092de:	8b 40 48             	mov    0x48(%eax),%eax
f01092e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01092e4:	8b 52 44             	mov    0x44(%edx),%edx
f01092e7:	89 50 44             	mov    %edx,0x44(%eax)
f01092ea:	eb 0b                	jmp    f01092f7 <fos_scheduler+0xdc>
f01092ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092ef:	8b 40 44             	mov    0x44(%eax),%eax
f01092f2:	a3 20 61 32 f0       	mov    %eax,0xf0326120
f01092f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092fa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109301:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109304:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010930b:	a1 2c 61 32 f0       	mov    0xf032612c,%eax
f0109310:	48                   	dec    %eax
f0109311:	a3 2c 61 32 f0       	mov    %eax,0xf032612c

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0109316:	a0 b4 2c 39 f0       	mov    0xf0392cb4,%al
f010931b:	0f b6 c0             	movzbl %al,%eax
f010931e:	83 ec 0c             	sub    $0xc,%esp
f0109321:	50                   	push   %eax
f0109322:	e8 00 df ff ff       	call   f0107227 <kclock_set_quantum>
f0109327:	83 c4 10             	add    $0x10,%esp
f010932a:	eb 12                	jmp    f010933e <fos_scheduler+0x123>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f010932c:	a1 d8 2c 39 f0       	mov    0xf0392cd8,%eax
f0109331:	83 f8 01             	cmp    $0x1,%eax
f0109334:	75 08                	jne    f010933e <fos_scheduler+0x123>
	{
		next_env = fos_scheduler_MLFQ();
f0109336:	e8 c6 fe ff ff       	call   f0109201 <fos_scheduler_MLFQ>
f010933b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f010933e:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109343:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0109346:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109349:	a3 30 58 32 f0       	mov    %eax,0xf0325830
	chk2(next_env) ;
f010934e:	83 ec 0c             	sub    $0xc,%esp
f0109351:	ff 75 f4             	pushl  -0xc(%ebp)
f0109354:	e8 5f 14 01 00       	call   f011a7b8 <chk2>
f0109359:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f010935c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010935f:	a3 30 58 32 f0       	mov    %eax,0xf0325830

	//sched_print_all();

	if(next_env != NULL)
f0109364:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109368:	74 0b                	je     f0109375 <fos_scheduler+0x15a>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f010936a:	83 ec 0c             	sub    $0xc,%esp
f010936d:	ff 75 f4             	pushl  -0xc(%ebp)
f0109370:	e8 cf d3 ff ff       	call   f0106744 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0109375:	c7 05 30 58 32 f0 00 	movl   $0x0,0xf0325830
f010937c:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010937f:	a1 58 11 3b f0       	mov    0xf03b1158,%eax
f0109384:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109387:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010938a:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f010938d:	c7 05 e0 2c 39 f0 00 	movl   $0x0,0xf0392ce0
f0109394:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0109397:	83 ec 0c             	sub    $0xc,%esp
f010939a:	6a 00                	push   $0x0
f010939c:	e8 70 84 ff ff       	call   f0101811 <run_command_prompt>
f01093a1:	83 c4 10             	add    $0x10,%esp
f01093a4:	eb f1                	jmp    f0109397 <fos_scheduler+0x17c>

f01093a6 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01093a6:	55                   	push   %ebp
f01093a7:	89 e5                	mov    %esp,%ebp
f01093a9:	83 ec 18             	sub    $0x18,%esp
f01093ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01093af:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f01093b2:	c7 05 e0 2c 39 f0 00 	movl   $0x0,0xf0392ce0
f01093b9:	00 00 00 
	scheduler_method = SCH_RR;
f01093bc:	c7 05 d8 2c 39 f0 00 	movl   $0x0,0xf0392cd8
f01093c3:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01093c6:	c6 05 e8 2c 39 f0 01 	movb   $0x1,0xf0392ce8
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f01093cd:	8a 45 f4             	mov    -0xc(%ebp),%al
f01093d0:	a2 b4 2c 39 f0       	mov    %al,0xf0392cb4
	kclock_set_quantum(quantums[0]);
f01093d5:	a0 b4 2c 39 f0       	mov    0xf0392cb4,%al
f01093da:	0f b6 c0             	movzbl %al,%eax
f01093dd:	83 ec 0c             	sub    $0xc,%esp
f01093e0:	50                   	push   %eax
f01093e1:	e8 41 de ff ff       	call   f0107227 <kclock_set_quantum>
f01093e6:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01093e9:	83 ec 0c             	sub    $0xc,%esp
f01093ec:	68 20 61 32 f0       	push   $0xf0326120
f01093f1:	e8 4e fd ff ff       	call   f0109144 <init_queue>
f01093f6:	83 c4 10             	add    $0x10,%esp
}
f01093f9:	90                   	nop
f01093fa:	c9                   	leave  
f01093fb:	c3                   	ret    

f01093fc <sched_init>:



void sched_init()
{
f01093fc:	55                   	push   %ebp
f01093fd:	89 e5                	mov    %esp,%ebp
f01093ff:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0109402:	c7 05 d4 c0 38 f0 00 	movl   $0x0,0xf038c0d4
f0109409:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f010940c:	83 ec 0c             	sub    $0xc,%esp
f010940f:	6a 0a                	push   $0xa
f0109411:	e8 90 ff ff ff       	call   f01093a6 <sched_init_RR>
f0109416:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0109419:	83 ec 0c             	sub    $0xc,%esp
f010941c:	68 c8 2c 39 f0       	push   $0xf0392cc8
f0109421:	e8 1e fd ff ff       	call   f0109144 <init_queue>
f0109426:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0109429:	83 ec 0c             	sub    $0xc,%esp
f010942c:	68 c4 c0 38 f0       	push   $0xf038c0c4
f0109431:	e8 0e fd ff ff       	call   f0109144 <init_queue>
f0109436:	83 c4 10             	add    $0x10,%esp
}
f0109439:	90                   	nop
f010943a:	c9                   	leave  
f010943b:	c3                   	ret    

f010943c <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f010943c:	55                   	push   %ebp
f010943d:	89 e5                	mov    %esp,%ebp
f010943f:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0109442:	83 ec 0c             	sub    $0xc,%esp
f0109445:	68 20 61 32 f0       	push   $0xf0326120
f010944a:	e8 b3 3b 00 00       	call   f010d002 <kfree>
f010944f:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f0109452:	83 ec 0c             	sub    $0xc,%esp
f0109455:	68 b4 2c 39 f0       	push   $0xf0392cb4
f010945a:	e8 a3 3b 00 00       	call   f010d002 <kfree>
f010945f:	83 c4 10             	add    $0x10,%esp
}
f0109462:	90                   	nop
f0109463:	c9                   	leave  
f0109464:	c3                   	ret    

f0109465 <sched_insert_new>:



void sched_insert_new(struct Env* env)
{
f0109465:	55                   	push   %ebp
f0109466:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0109468:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010946c:	74 52                	je     f01094c0 <sched_insert_new+0x5b>
	{
		env->env_status = ENV_NEW ;
f010946e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109471:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		LIST_INSERT_HEAD(&env_new_queue, env);
f0109478:	8b 15 c8 2c 39 f0    	mov    0xf0392cc8,%edx
f010947e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109481:	89 50 44             	mov    %edx,0x44(%eax)
f0109484:	8b 45 08             	mov    0x8(%ebp),%eax
f0109487:	8b 40 44             	mov    0x44(%eax),%eax
f010948a:	85 c0                	test   %eax,%eax
f010948c:	74 0d                	je     f010949b <sched_insert_new+0x36>
f010948e:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f0109493:	8b 55 08             	mov    0x8(%ebp),%edx
f0109496:	89 50 48             	mov    %edx,0x48(%eax)
f0109499:	eb 08                	jmp    f01094a3 <sched_insert_new+0x3e>
f010949b:	8b 45 08             	mov    0x8(%ebp),%eax
f010949e:	a3 cc 2c 39 f0       	mov    %eax,0xf0392ccc
f01094a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01094a6:	a3 c8 2c 39 f0       	mov    %eax,0xf0392cc8
f01094ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01094ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01094b5:	a1 d4 2c 39 f0       	mov    0xf0392cd4,%eax
f01094ba:	40                   	inc    %eax
f01094bb:	a3 d4 2c 39 f0       	mov    %eax,0xf0392cd4
	}
}
f01094c0:	90                   	nop
f01094c1:	5d                   	pop    %ebp
f01094c2:	c3                   	ret    

f01094c3 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f01094c3:	55                   	push   %ebp
f01094c4:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f01094c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01094ca:	74 75                	je     f0109541 <sched_remove_new+0x7e>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f01094cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01094cf:	8b 40 44             	mov    0x44(%eax),%eax
f01094d2:	85 c0                	test   %eax,%eax
f01094d4:	74 11                	je     f01094e7 <sched_remove_new+0x24>
f01094d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01094d9:	8b 40 44             	mov    0x44(%eax),%eax
f01094dc:	8b 55 08             	mov    0x8(%ebp),%edx
f01094df:	8b 52 48             	mov    0x48(%edx),%edx
f01094e2:	89 50 48             	mov    %edx,0x48(%eax)
f01094e5:	eb 0b                	jmp    f01094f2 <sched_remove_new+0x2f>
f01094e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01094ea:	8b 40 48             	mov    0x48(%eax),%eax
f01094ed:	a3 cc 2c 39 f0       	mov    %eax,0xf0392ccc
f01094f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01094f5:	8b 40 48             	mov    0x48(%eax),%eax
f01094f8:	85 c0                	test   %eax,%eax
f01094fa:	74 11                	je     f010950d <sched_remove_new+0x4a>
f01094fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01094ff:	8b 40 48             	mov    0x48(%eax),%eax
f0109502:	8b 55 08             	mov    0x8(%ebp),%edx
f0109505:	8b 52 44             	mov    0x44(%edx),%edx
f0109508:	89 50 44             	mov    %edx,0x44(%eax)
f010950b:	eb 0b                	jmp    f0109518 <sched_remove_new+0x55>
f010950d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109510:	8b 40 44             	mov    0x44(%eax),%eax
f0109513:	a3 c8 2c 39 f0       	mov    %eax,0xf0392cc8
f0109518:	8b 45 08             	mov    0x8(%ebp),%eax
f010951b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109522:	8b 45 08             	mov    0x8(%ebp),%eax
f0109525:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010952c:	a1 d4 2c 39 f0       	mov    0xf0392cd4,%eax
f0109531:	48                   	dec    %eax
f0109532:	a3 d4 2c 39 f0       	mov    %eax,0xf0392cd4
		env->env_status = ENV_UNKNOWN;
f0109537:	8b 45 08             	mov    0x8(%ebp),%eax
f010953a:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0109541:	90                   	nop
f0109542:	5d                   	pop    %ebp
f0109543:	c3                   	ret    

f0109544 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0109544:	55                   	push   %ebp
f0109545:	89 e5                	mov    %esp,%ebp
f0109547:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010954a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010954e:	74 69                	je     f01095b9 <sched_insert_exit+0x75>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0109550:	e8 90 f6 ff ff       	call   f0108be5 <isBufferingEnabled>
f0109555:	85 c0                	test   %eax,%eax
f0109557:	74 0e                	je     f0109567 <sched_insert_exit+0x23>
f0109559:	83 ec 0c             	sub    $0xc,%esp
f010955c:	ff 75 08             	pushl  0x8(%ebp)
f010955f:	e8 bc d9 ff ff       	call   f0106f20 <cleanup_buffers>
f0109564:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0109567:	8b 45 08             	mov    0x8(%ebp),%eax
f010956a:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		LIST_INSERT_HEAD(&env_exit_queue, env);
f0109571:	8b 15 c4 c0 38 f0    	mov    0xf038c0c4,%edx
f0109577:	8b 45 08             	mov    0x8(%ebp),%eax
f010957a:	89 50 44             	mov    %edx,0x44(%eax)
f010957d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109580:	8b 40 44             	mov    0x44(%eax),%eax
f0109583:	85 c0                	test   %eax,%eax
f0109585:	74 0d                	je     f0109594 <sched_insert_exit+0x50>
f0109587:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f010958c:	8b 55 08             	mov    0x8(%ebp),%edx
f010958f:	89 50 48             	mov    %edx,0x48(%eax)
f0109592:	eb 08                	jmp    f010959c <sched_insert_exit+0x58>
f0109594:	8b 45 08             	mov    0x8(%ebp),%eax
f0109597:	a3 c8 c0 38 f0       	mov    %eax,0xf038c0c8
f010959c:	8b 45 08             	mov    0x8(%ebp),%eax
f010959f:	a3 c4 c0 38 f0       	mov    %eax,0xf038c0c4
f01095a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01095a7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01095ae:	a1 d0 c0 38 f0       	mov    0xf038c0d0,%eax
f01095b3:	40                   	inc    %eax
f01095b4:	a3 d0 c0 38 f0       	mov    %eax,0xf038c0d0
	}
}
f01095b9:	90                   	nop
f01095ba:	c9                   	leave  
f01095bb:	c3                   	ret    

f01095bc <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f01095bc:	55                   	push   %ebp
f01095bd:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f01095bf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01095c3:	74 75                	je     f010963a <sched_remove_exit+0x7e>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f01095c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01095c8:	8b 40 44             	mov    0x44(%eax),%eax
f01095cb:	85 c0                	test   %eax,%eax
f01095cd:	74 11                	je     f01095e0 <sched_remove_exit+0x24>
f01095cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01095d2:	8b 40 44             	mov    0x44(%eax),%eax
f01095d5:	8b 55 08             	mov    0x8(%ebp),%edx
f01095d8:	8b 52 48             	mov    0x48(%edx),%edx
f01095db:	89 50 48             	mov    %edx,0x48(%eax)
f01095de:	eb 0b                	jmp    f01095eb <sched_remove_exit+0x2f>
f01095e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01095e3:	8b 40 48             	mov    0x48(%eax),%eax
f01095e6:	a3 c8 c0 38 f0       	mov    %eax,0xf038c0c8
f01095eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01095ee:	8b 40 48             	mov    0x48(%eax),%eax
f01095f1:	85 c0                	test   %eax,%eax
f01095f3:	74 11                	je     f0109606 <sched_remove_exit+0x4a>
f01095f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01095f8:	8b 40 48             	mov    0x48(%eax),%eax
f01095fb:	8b 55 08             	mov    0x8(%ebp),%edx
f01095fe:	8b 52 44             	mov    0x44(%edx),%edx
f0109601:	89 50 44             	mov    %edx,0x44(%eax)
f0109604:	eb 0b                	jmp    f0109611 <sched_remove_exit+0x55>
f0109606:	8b 45 08             	mov    0x8(%ebp),%eax
f0109609:	8b 40 44             	mov    0x44(%eax),%eax
f010960c:	a3 c4 c0 38 f0       	mov    %eax,0xf038c0c4
f0109611:	8b 45 08             	mov    0x8(%ebp),%eax
f0109614:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010961b:	8b 45 08             	mov    0x8(%ebp),%eax
f010961e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109625:	a1 d0 c0 38 f0       	mov    0xf038c0d0,%eax
f010962a:	48                   	dec    %eax
f010962b:	a3 d0 c0 38 f0       	mov    %eax,0xf038c0d0
		env->env_status = ENV_UNKNOWN;
f0109630:	8b 45 08             	mov    0x8(%ebp),%eax
f0109633:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f010963a:	90                   	nop
f010963b:	5d                   	pop    %ebp
f010963c:	c3                   	ret    

f010963d <sched_print_all>:

void sched_print_all()
{
f010963d:	55                   	push   %ebp
f010963e:	89 e5                	mov    %esp,%ebp
f0109640:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0109643:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f0109648:	85 c0                	test   %eax,%eax
f010964a:	74 6c                	je     f01096b8 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f010964c:	83 ec 0c             	sub    $0xc,%esp
f010964f:	68 a0 da 11 f0       	push   $0xf011daa0
f0109654:	e8 4a df ff ff       	call   f01075a3 <cprintf>
f0109659:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f010965c:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f0109661:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109664:	eb 29                	jmp    f010968f <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109666:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109669:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f010966f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109672:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109675:	83 ec 04             	sub    $0x4,%esp
f0109678:	52                   	push   %edx
f0109679:	50                   	push   %eax
f010967a:	68 c2 da 11 f0       	push   $0xf011dac2
f010967f:	e8 1f df ff ff       	call   f01075a3 <cprintf>
f0109684:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109687:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f010968c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010968f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109693:	74 08                	je     f010969d <sched_print_all+0x60>
f0109695:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109698:	8b 40 44             	mov    0x44(%eax),%eax
f010969b:	eb 05                	jmp    f01096a2 <sched_print_all+0x65>
f010969d:	b8 00 00 00 00       	mov    $0x0,%eax
f01096a2:	a3 d0 2c 39 f0       	mov    %eax,0xf0392cd0
f01096a7:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f01096ac:	85 c0                	test   %eax,%eax
f01096ae:	75 b6                	jne    f0109666 <sched_print_all+0x29>
f01096b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01096b4:	75 b0                	jne    f0109666 <sched_print_all+0x29>
f01096b6:	eb 10                	jmp    f01096c8 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f01096b8:	83 ec 0c             	sub    $0xc,%esp
f01096bb:	68 cc da 11 f0       	push   $0xf011dacc
f01096c0:	e8 de de ff ff       	call   f01075a3 <cprintf>
f01096c5:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01096c8:	83 ec 0c             	sub    $0xc,%esp
f01096cb:	68 e8 da 11 f0       	push   $0xf011dae8
f01096d0:	e8 ce de ff ff       	call   f01075a3 <cprintf>
f01096d5:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01096d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01096df:	e9 cb 00 00 00       	jmp    f01097af <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01096e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01096e7:	c1 e0 04             	shl    $0x4,%eax
f01096ea:	05 20 61 32 f0       	add    $0xf0326120,%eax
f01096ef:	8b 00                	mov    (%eax),%eax
f01096f1:	85 c0                	test   %eax,%eax
f01096f3:	0f 84 90 00 00 00    	je     f0109789 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f01096f9:	83 ec 08             	sub    $0x8,%esp
f01096fc:	ff 75 f0             	pushl  -0x10(%ebp)
f01096ff:	68 1c db 11 f0       	push   $0xf011db1c
f0109704:	e8 9a de ff ff       	call   f01075a3 <cprintf>
f0109709:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010970c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010970f:	c1 e0 04             	shl    $0x4,%eax
f0109712:	05 20 61 32 f0       	add    $0xf0326120,%eax
f0109717:	8b 00                	mov    (%eax),%eax
f0109719:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010971c:	eb 31                	jmp    f010974f <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f010971e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109721:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f0109727:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010972a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010972d:	83 ec 04             	sub    $0x4,%esp
f0109730:	52                   	push   %edx
f0109731:	50                   	push   %eax
f0109732:	68 c2 da 11 f0       	push   $0xf011dac2
f0109737:	e8 67 de ff ff       	call   f01075a3 <cprintf>
f010973c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010973f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109742:	c1 e0 04             	shl    $0x4,%eax
f0109745:	05 28 61 32 f0       	add    $0xf0326128,%eax
f010974a:	8b 00                	mov    (%eax),%eax
f010974c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010974f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109753:	74 08                	je     f010975d <sched_print_all+0x120>
f0109755:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109758:	8b 40 44             	mov    0x44(%eax),%eax
f010975b:	eb 05                	jmp    f0109762 <sched_print_all+0x125>
f010975d:	b8 00 00 00 00       	mov    $0x0,%eax
f0109762:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109765:	c1 e2 04             	shl    $0x4,%edx
f0109768:	81 c2 28 61 32 f0    	add    $0xf0326128,%edx
f010976e:	89 02                	mov    %eax,(%edx)
f0109770:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109773:	c1 e0 04             	shl    $0x4,%eax
f0109776:	05 28 61 32 f0       	add    $0xf0326128,%eax
f010977b:	8b 00                	mov    (%eax),%eax
f010977d:	85 c0                	test   %eax,%eax
f010977f:	75 9d                	jne    f010971e <sched_print_all+0xe1>
f0109781:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109785:	75 97                	jne    f010971e <sched_print_all+0xe1>
f0109787:	eb 13                	jmp    f010979c <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0109789:	83 ec 08             	sub    $0x8,%esp
f010978c:	ff 75 f0             	pushl  -0x10(%ebp)
f010978f:	68 44 db 11 f0       	push   $0xf011db44
f0109794:	e8 0a de ff ff       	call   f01075a3 <cprintf>
f0109799:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f010979c:	83 ec 0c             	sub    $0xc,%esp
f010979f:	68 e8 da 11 f0       	push   $0xf011dae8
f01097a4:	e8 fa dd ff ff       	call   f01075a3 <cprintf>
f01097a9:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01097ac:	ff 45 f0             	incl   -0x10(%ebp)
f01097af:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01097b4:	0f b6 c0             	movzbl %al,%eax
f01097b7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01097ba:	0f 8f 24 ff ff ff    	jg     f01096e4 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f01097c0:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f01097c5:	85 c0                	test   %eax,%eax
f01097c7:	74 6c                	je     f0109835 <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f01097c9:	83 ec 0c             	sub    $0xc,%esp
f01097cc:	68 68 db 11 f0       	push   $0xf011db68
f01097d1:	e8 cd dd ff ff       	call   f01075a3 <cprintf>
f01097d6:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01097d9:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f01097de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01097e1:	eb 29                	jmp    f010980c <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01097e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01097e6:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f01097ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01097ef:	8b 40 4c             	mov    0x4c(%eax),%eax
f01097f2:	83 ec 04             	sub    $0x4,%esp
f01097f5:	52                   	push   %edx
f01097f6:	50                   	push   %eax
f01097f7:	68 c2 da 11 f0       	push   $0xf011dac2
f01097fc:	e8 a2 dd ff ff       	call   f01075a3 <cprintf>
f0109801:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109804:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f0109809:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010980c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109810:	74 08                	je     f010981a <sched_print_all+0x1dd>
f0109812:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109815:	8b 40 44             	mov    0x44(%eax),%eax
f0109818:	eb 05                	jmp    f010981f <sched_print_all+0x1e2>
f010981a:	b8 00 00 00 00       	mov    $0x0,%eax
f010981f:	a3 cc c0 38 f0       	mov    %eax,0xf038c0cc
f0109824:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f0109829:	85 c0                	test   %eax,%eax
f010982b:	75 b6                	jne    f01097e3 <sched_print_all+0x1a6>
f010982d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109831:	75 b0                	jne    f01097e3 <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0109833:	eb 10                	jmp    f0109845 <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0109835:	83 ec 0c             	sub    $0xc,%esp
f0109838:	68 8a db 11 f0       	push   $0xf011db8a
f010983d:	e8 61 dd ff ff       	call   f01075a3 <cprintf>
f0109842:	83 c4 10             	add    $0x10,%esp
	}
}
f0109845:	90                   	nop
f0109846:	c9                   	leave  
f0109847:	c3                   	ret    

f0109848 <sched_run_all>:

void sched_run_all()
{
f0109848:	55                   	push   %ebp
f0109849:	89 e5                	mov    %esp,%ebp
f010984b:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010984e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109855:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f010985a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010985d:	eb 65                	jmp    f01098c4 <sched_run_all+0x7c>
	{
		sched_remove_new(ptr_env);
f010985f:	ff 75 f4             	pushl  -0xc(%ebp)
f0109862:	e8 5c fc ff ff       	call   f01094c3 <sched_remove_new>
f0109867:	83 c4 04             	add    $0x4,%esp
		ptr_env->env_status = ENV_READY ;
f010986a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010986d:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		LIST_INSERT_HEAD(&(env_ready_queues[0]), ptr_env);
f0109874:	8b 15 20 61 32 f0    	mov    0xf0326120,%edx
f010987a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010987d:	89 50 44             	mov    %edx,0x44(%eax)
f0109880:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109883:	8b 40 44             	mov    0x44(%eax),%eax
f0109886:	85 c0                	test   %eax,%eax
f0109888:	74 0d                	je     f0109897 <sched_run_all+0x4f>
f010988a:	a1 20 61 32 f0       	mov    0xf0326120,%eax
f010988f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109892:	89 50 48             	mov    %edx,0x48(%eax)
f0109895:	eb 08                	jmp    f010989f <sched_run_all+0x57>
f0109897:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010989a:	a3 24 61 32 f0       	mov    %eax,0xf0326124
f010989f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098a2:	a3 20 61 32 f0       	mov    %eax,0xf0326120
f01098a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098aa:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01098b1:	a1 2c 61 32 f0       	mov    0xf032612c,%eax
f01098b6:	40                   	inc    %eax
f01098b7:	a3 2c 61 32 f0       	mov    %eax,0xf032612c
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01098bc:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f01098c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01098c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098c8:	74 08                	je     f01098d2 <sched_run_all+0x8a>
f01098ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098cd:	8b 40 44             	mov    0x44(%eax),%eax
f01098d0:	eb 05                	jmp    f01098d7 <sched_run_all+0x8f>
f01098d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01098d7:	a3 d0 2c 39 f0       	mov    %eax,0xf0392cd0
f01098dc:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f01098e1:	85 c0                	test   %eax,%eax
f01098e3:	0f 85 76 ff ff ff    	jne    f010985f <sched_run_all+0x17>
f01098e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098ed:	0f 85 6c ff ff ff    	jne    f010985f <sched_run_all+0x17>
		sched_remove_new(ptr_env);
		ptr_env->env_status = ENV_READY ;
		LIST_INSERT_HEAD(&(env_ready_queues[0]), ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f01098f3:	a1 e0 2c 39 f0       	mov    0xf0392ce0,%eax
f01098f8:	85 c0                	test   %eax,%eax
f01098fa:	75 05                	jne    f0109901 <sched_run_all+0xb9>
		fos_scheduler();
f01098fc:	e8 1a f9 ff ff       	call   f010921b <fos_scheduler>
}
f0109901:	90                   	nop
f0109902:	c9                   	leave  
f0109903:	c3                   	ret    

f0109904 <sched_kill_all>:

void sched_kill_all()
{
f0109904:	55                   	push   %ebp
f0109905:	89 e5                	mov    %esp,%ebp
f0109907:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f010990a:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f010990f:	85 c0                	test   %eax,%eax
f0109911:	0f 84 98 00 00 00    	je     f01099af <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0109917:	83 ec 0c             	sub    $0xc,%esp
f010991a:	68 a8 db 11 f0       	push   $0xf011dba8
f010991f:	e8 7f dc ff ff       	call   f01075a3 <cprintf>
f0109924:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109927:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f010992c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010992f:	eb 55                	jmp    f0109986 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109931:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109934:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f010993a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010993d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109940:	83 ec 04             	sub    $0x4,%esp
f0109943:	52                   	push   %edx
f0109944:	50                   	push   %eax
f0109945:	68 d4 db 11 f0       	push   $0xf011dbd4
f010994a:	e8 54 dc ff ff       	call   f01075a3 <cprintf>
f010994f:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0109952:	83 ec 0c             	sub    $0xc,%esp
f0109955:	ff 75 f4             	pushl  -0xc(%ebp)
f0109958:	e8 66 fb ff ff       	call   f01094c3 <sched_remove_new>
f010995d:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109960:	83 ec 0c             	sub    $0xc,%esp
f0109963:	ff 75 f4             	pushl  -0xc(%ebp)
f0109966:	e8 4a ce ff ff       	call   f01067b5 <start_env_free>
f010996b:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010996e:	83 ec 0c             	sub    $0xc,%esp
f0109971:	68 e7 db 11 f0       	push   $0xf011dbe7
f0109976:	e8 28 dc ff ff       	call   f01075a3 <cprintf>
f010997b:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f010997e:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f0109983:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109986:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010998a:	74 08                	je     f0109994 <sched_kill_all+0x90>
f010998c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010998f:	8b 40 44             	mov    0x44(%eax),%eax
f0109992:	eb 05                	jmp    f0109999 <sched_kill_all+0x95>
f0109994:	b8 00 00 00 00       	mov    $0x0,%eax
f0109999:	a3 d0 2c 39 f0       	mov    %eax,0xf0392cd0
f010999e:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f01099a3:	85 c0                	test   %eax,%eax
f01099a5:	75 8a                	jne    f0109931 <sched_kill_all+0x2d>
f01099a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099ab:	75 84                	jne    f0109931 <sched_kill_all+0x2d>
f01099ad:	eb 10                	jmp    f01099bf <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f01099af:	83 ec 0c             	sub    $0xc,%esp
f01099b2:	68 ed db 11 f0       	push   $0xf011dbed
f01099b7:	e8 e7 db ff ff       	call   f01075a3 <cprintf>
f01099bc:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01099bf:	83 ec 0c             	sub    $0xc,%esp
f01099c2:	68 e8 da 11 f0       	push   $0xf011dae8
f01099c7:	e8 d7 db ff ff       	call   f01075a3 <cprintf>
f01099cc:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01099cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01099d6:	e9 83 01 00 00       	jmp    f0109b5e <sched_kill_all+0x25a>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01099db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01099de:	c1 e0 04             	shl    $0x4,%eax
f01099e1:	05 20 61 32 f0       	add    $0xf0326120,%eax
f01099e6:	8b 00                	mov    (%eax),%eax
f01099e8:	85 c0                	test   %eax,%eax
f01099ea:	0f 84 48 01 00 00    	je     f0109b38 <sched_kill_all+0x234>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f01099f0:	83 ec 08             	sub    $0x8,%esp
f01099f3:	ff 75 f0             	pushl  -0x10(%ebp)
f01099f6:	68 08 dc 11 f0       	push   $0xf011dc08
f01099fb:	e8 a3 db ff ff       	call   f01075a3 <cprintf>
f0109a00:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109a03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109a06:	c1 e0 04             	shl    $0x4,%eax
f0109a09:	05 20 61 32 f0       	add    $0xf0326120,%eax
f0109a0e:	8b 00                	mov    (%eax),%eax
f0109a10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a13:	e9 de 00 00 00       	jmp    f0109af6 <sched_kill_all+0x1f2>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a1b:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f0109a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a24:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a27:	83 ec 04             	sub    $0x4,%esp
f0109a2a:	52                   	push   %edx
f0109a2b:	50                   	push   %eax
f0109a2c:	68 d4 db 11 f0       	push   $0xf011dbd4
f0109a31:	e8 6d db ff ff       	call   f01075a3 <cprintf>
f0109a36:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109a39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a3c:	8b 40 44             	mov    0x44(%eax),%eax
f0109a3f:	85 c0                	test   %eax,%eax
f0109a41:	74 11                	je     f0109a54 <sched_kill_all+0x150>
f0109a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a46:	8b 40 44             	mov    0x44(%eax),%eax
f0109a49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a4c:	8b 52 48             	mov    0x48(%edx),%edx
f0109a4f:	89 50 48             	mov    %edx,0x48(%eax)
f0109a52:	eb 14                	jmp    f0109a68 <sched_kill_all+0x164>
f0109a54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a57:	8b 40 48             	mov    0x48(%eax),%eax
f0109a5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a5d:	c1 e2 04             	shl    $0x4,%edx
f0109a60:	81 c2 24 61 32 f0    	add    $0xf0326124,%edx
f0109a66:	89 02                	mov    %eax,(%edx)
f0109a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a6b:	8b 40 48             	mov    0x48(%eax),%eax
f0109a6e:	85 c0                	test   %eax,%eax
f0109a70:	74 11                	je     f0109a83 <sched_kill_all+0x17f>
f0109a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a75:	8b 40 48             	mov    0x48(%eax),%eax
f0109a78:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a7b:	8b 52 44             	mov    0x44(%edx),%edx
f0109a7e:	89 50 44             	mov    %edx,0x44(%eax)
f0109a81:	eb 14                	jmp    f0109a97 <sched_kill_all+0x193>
f0109a83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a86:	8b 40 44             	mov    0x44(%eax),%eax
f0109a89:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109a8c:	c1 e2 04             	shl    $0x4,%edx
f0109a8f:	81 c2 20 61 32 f0    	add    $0xf0326120,%edx
f0109a95:	89 02                	mov    %eax,(%edx)
f0109a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a9a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109aa4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109aae:	c1 e0 04             	shl    $0x4,%eax
f0109ab1:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f0109ab6:	8b 00                	mov    (%eax),%eax
f0109ab8:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109abe:	c1 e0 04             	shl    $0x4,%eax
f0109ac1:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f0109ac6:	89 10                	mov    %edx,(%eax)
				start_env_free(ptr_env);
f0109ac8:	83 ec 0c             	sub    $0xc,%esp
f0109acb:	ff 75 f4             	pushl  -0xc(%ebp)
f0109ace:	e8 e2 cc ff ff       	call   f01067b5 <start_env_free>
f0109ad3:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0109ad6:	83 ec 0c             	sub    $0xc,%esp
f0109ad9:	68 e7 db 11 f0       	push   $0xf011dbe7
f0109ade:	e8 c0 da ff ff       	call   f01075a3 <cprintf>
f0109ae3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109ae9:	c1 e0 04             	shl    $0x4,%eax
f0109aec:	05 28 61 32 f0       	add    $0xf0326128,%eax
f0109af1:	8b 00                	mov    (%eax),%eax
f0109af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109af6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109afa:	74 08                	je     f0109b04 <sched_kill_all+0x200>
f0109afc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109aff:	8b 40 44             	mov    0x44(%eax),%eax
f0109b02:	eb 05                	jmp    f0109b09 <sched_kill_all+0x205>
f0109b04:	b8 00 00 00 00       	mov    $0x0,%eax
f0109b09:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b0c:	c1 e2 04             	shl    $0x4,%edx
f0109b0f:	81 c2 28 61 32 f0    	add    $0xf0326128,%edx
f0109b15:	89 02                	mov    %eax,(%edx)
f0109b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109b1a:	c1 e0 04             	shl    $0x4,%eax
f0109b1d:	05 28 61 32 f0       	add    $0xf0326128,%eax
f0109b22:	8b 00                	mov    (%eax),%eax
f0109b24:	85 c0                	test   %eax,%eax
f0109b26:	0f 85 ec fe ff ff    	jne    f0109a18 <sched_kill_all+0x114>
f0109b2c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109b30:	0f 85 e2 fe ff ff    	jne    f0109a18 <sched_kill_all+0x114>
f0109b36:	eb 13                	jmp    f0109b4b <sched_kill_all+0x247>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0109b38:	83 ec 08             	sub    $0x8,%esp
f0109b3b:	ff 75 f0             	pushl  -0x10(%ebp)
f0109b3e:	68 44 db 11 f0       	push   $0xf011db44
f0109b43:	e8 5b da ff ff       	call   f01075a3 <cprintf>
f0109b48:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0109b4b:	83 ec 0c             	sub    $0xc,%esp
f0109b4e:	68 e8 da 11 f0       	push   $0xf011dae8
f0109b53:	e8 4b da ff ff       	call   f01075a3 <cprintf>
f0109b58:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109b5b:	ff 45 f0             	incl   -0x10(%ebp)
f0109b5e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0109b63:	0f b6 c0             	movzbl %al,%eax
f0109b66:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109b69:	0f 8f 6c fe ff ff    	jg     f01099db <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0109b6f:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f0109b74:	85 c0                	test   %eax,%eax
f0109b76:	0f 84 98 00 00 00    	je     f0109c14 <sched_kill_all+0x310>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0109b7c:	83 ec 0c             	sub    $0xc,%esp
f0109b7f:	68 3c dc 11 f0       	push   $0xf011dc3c
f0109b84:	e8 1a da ff ff       	call   f01075a3 <cprintf>
f0109b89:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109b8c:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f0109b91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109b94:	eb 55                	jmp    f0109beb <sched_kill_all+0x2e7>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b99:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f0109b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ba2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ba5:	83 ec 04             	sub    $0x4,%esp
f0109ba8:	52                   	push   %edx
f0109ba9:	50                   	push   %eax
f0109baa:	68 d4 db 11 f0       	push   $0xf011dbd4
f0109baf:	e8 ef d9 ff ff       	call   f01075a3 <cprintf>
f0109bb4:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0109bb7:	83 ec 0c             	sub    $0xc,%esp
f0109bba:	ff 75 f4             	pushl  -0xc(%ebp)
f0109bbd:	e8 fa f9 ff ff       	call   f01095bc <sched_remove_exit>
f0109bc2:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109bc5:	83 ec 0c             	sub    $0xc,%esp
f0109bc8:	ff 75 f4             	pushl  -0xc(%ebp)
f0109bcb:	e8 e5 cb ff ff       	call   f01067b5 <start_env_free>
f0109bd0:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109bd3:	83 ec 0c             	sub    $0xc,%esp
f0109bd6:	68 e7 db 11 f0       	push   $0xf011dbe7
f0109bdb:	e8 c3 d9 ff ff       	call   f01075a3 <cprintf>
f0109be0:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109be3:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f0109be8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109beb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109bef:	74 08                	je     f0109bf9 <sched_kill_all+0x2f5>
f0109bf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bf4:	8b 40 44             	mov    0x44(%eax),%eax
f0109bf7:	eb 05                	jmp    f0109bfe <sched_kill_all+0x2fa>
f0109bf9:	b8 00 00 00 00       	mov    $0x0,%eax
f0109bfe:	a3 cc c0 38 f0       	mov    %eax,0xf038c0cc
f0109c03:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f0109c08:	85 c0                	test   %eax,%eax
f0109c0a:	75 8a                	jne    f0109b96 <sched_kill_all+0x292>
f0109c0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109c10:	75 84                	jne    f0109b96 <sched_kill_all+0x292>
f0109c12:	eb 10                	jmp    f0109c24 <sched_kill_all+0x320>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0109c14:	83 ec 0c             	sub    $0xc,%esp
f0109c17:	68 8a db 11 f0       	push   $0xf011db8a
f0109c1c:	e8 82 d9 ff ff       	call   f01075a3 <cprintf>
f0109c21:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0109c24:	c7 05 30 58 32 f0 00 	movl   $0x0,0xf0325830
f0109c2b:	00 00 00 
	fos_scheduler();
f0109c2e:	e8 e8 f5 ff ff       	call   f010921b <fos_scheduler>

f0109c33 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0109c33:	55                   	push   %ebp
f0109c34:	89 e5                	mov    %esp,%ebp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0109c36:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109c3a:	74 0b                	je     f0109c47 <sched_new_env+0x14>
	{
		sched_insert_new(e);
f0109c3c:	ff 75 08             	pushl  0x8(%ebp)
f0109c3f:	e8 21 f8 ff ff       	call   f0109465 <sched_insert_new>
f0109c44:	83 c4 04             	add    $0x4,%esp
	}
}
f0109c47:	90                   	nop
f0109c48:	c9                   	leave  
f0109c49:	c3                   	ret    

f0109c4a <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0109c4a:	55                   	push   %ebp
f0109c4b:	89 e5                	mov    %esp,%ebp
f0109c4d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109c57:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f0109c5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109c5f:	eb 7e                	jmp    f0109cdf <sched_run_env+0x95>
	{
		if(ptr_env->env_id == envId)
f0109c61:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c64:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109c67:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109c6a:	75 6b                	jne    f0109cd7 <sched_run_env+0x8d>
		{
			sched_remove_new(ptr_env);
f0109c6c:	ff 75 f4             	pushl  -0xc(%ebp)
f0109c6f:	e8 4f f8 ff ff       	call   f01094c3 <sched_remove_new>
f0109c74:	83 c4 04             	add    $0x4,%esp
			ptr_env->env_status = ENV_READY ;
f0109c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c7a:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
			LIST_INSERT_HEAD(&(env_ready_queues[0]), ptr_env);
f0109c81:	8b 15 20 61 32 f0    	mov    0xf0326120,%edx
f0109c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c8a:	89 50 44             	mov    %edx,0x44(%eax)
f0109c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c90:	8b 40 44             	mov    0x44(%eax),%eax
f0109c93:	85 c0                	test   %eax,%eax
f0109c95:	74 0d                	je     f0109ca4 <sched_run_env+0x5a>
f0109c97:	a1 20 61 32 f0       	mov    0xf0326120,%eax
f0109c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c9f:	89 50 48             	mov    %edx,0x48(%eax)
f0109ca2:	eb 08                	jmp    f0109cac <sched_run_env+0x62>
f0109ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ca7:	a3 24 61 32 f0       	mov    %eax,0xf0326124
f0109cac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109caf:	a3 20 61 32 f0       	mov    %eax,0xf0326120
f0109cb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109cb7:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109cbe:	a1 2c 61 32 f0       	mov    0xf032612c,%eax
f0109cc3:	40                   	inc    %eax
f0109cc4:	a3 2c 61 32 f0       	mov    %eax,0xf032612c
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0109cc9:	a1 e0 2c 39 f0       	mov    0xf0392ce0,%eax
f0109cce:	85 c0                	test   %eax,%eax
f0109cd0:	75 3e                	jne    f0109d10 <sched_run_env+0xc6>
			{
				fos_scheduler();
f0109cd2:	e8 44 f5 ff ff       	call   f010921b <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109cd7:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f0109cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109cdf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109ce3:	74 08                	je     f0109ced <sched_run_env+0xa3>
f0109ce5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ce8:	8b 40 44             	mov    0x44(%eax),%eax
f0109ceb:	eb 05                	jmp    f0109cf2 <sched_run_env+0xa8>
f0109ced:	b8 00 00 00 00       	mov    $0x0,%eax
f0109cf2:	a3 d0 2c 39 f0       	mov    %eax,0xf0392cd0
f0109cf7:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f0109cfc:	85 c0                	test   %eax,%eax
f0109cfe:	0f 85 5d ff ff ff    	jne    f0109c61 <sched_run_env+0x17>
f0109d04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d08:	0f 85 53 ff ff ff    	jne    f0109c61 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0109d0e:	eb 01                	jmp    f0109d11 <sched_run_env+0xc7>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0109d10:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0109d11:	90                   	nop
f0109d12:	c9                   	leave  
f0109d13:	c3                   	ret    

f0109d14 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0109d14:	55                   	push   %ebp
f0109d15:	89 e5                	mov    %esp,%ebp
f0109d17:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109d1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0109d21:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0109d28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109d2c:	75 56                	jne    f0109d84 <sched_exit_env+0x70>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109d2e:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f0109d33:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109d36:	eb 25                	jmp    f0109d5d <sched_exit_env+0x49>
				{
			if(ptr_env->env_id == envId)
f0109d38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d3b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109d3e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109d41:	75 12                	jne    f0109d55 <sched_exit_env+0x41>
			{
				sched_remove_new(ptr_env);
f0109d43:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d46:	e8 78 f7 ff ff       	call   f01094c3 <sched_remove_new>
f0109d4b:	83 c4 04             	add    $0x4,%esp
				found = 1;
f0109d4e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109d55:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f0109d5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109d5d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d61:	74 08                	je     f0109d6b <sched_exit_env+0x57>
f0109d63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d66:	8b 40 44             	mov    0x44(%eax),%eax
f0109d69:	eb 05                	jmp    f0109d70 <sched_exit_env+0x5c>
f0109d6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0109d70:	a3 d0 2c 39 f0       	mov    %eax,0xf0392cd0
f0109d75:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f0109d7a:	85 c0                	test   %eax,%eax
f0109d7c:	75 ba                	jne    f0109d38 <sched_exit_env+0x24>
f0109d7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d82:	75 b4                	jne    f0109d38 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0109d84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109d88:	0f 85 51 01 00 00    	jne    f0109edf <sched_exit_env+0x1cb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109d8e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109d95:	e9 31 01 00 00       	jmp    f0109ecb <sched_exit_env+0x1b7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109d9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109d9d:	c1 e0 04             	shl    $0x4,%eax
f0109da0:	05 20 61 32 f0       	add    $0xf0326120,%eax
f0109da5:	8b 00                	mov    (%eax),%eax
f0109da7:	85 c0                	test   %eax,%eax
f0109da9:	0f 84 13 01 00 00    	je     f0109ec2 <sched_exit_env+0x1ae>
			{
				ptr_env=NULL;
f0109daf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109db6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109db9:	c1 e0 04             	shl    $0x4,%eax
f0109dbc:	05 20 61 32 f0       	add    $0xf0326120,%eax
f0109dc1:	8b 00                	mov    (%eax),%eax
f0109dc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109dc6:	e9 b7 00 00 00       	jmp    f0109e82 <sched_exit_env+0x16e>
				{
					if(ptr_env->env_id == envId)
f0109dcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109dce:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109dd1:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109dd4:	0f 85 98 00 00 00    	jne    f0109e72 <sched_exit_env+0x15e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ddd:	8b 40 44             	mov    0x44(%eax),%eax
f0109de0:	85 c0                	test   %eax,%eax
f0109de2:	74 11                	je     f0109df5 <sched_exit_env+0xe1>
f0109de4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109de7:	8b 40 44             	mov    0x44(%eax),%eax
f0109dea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ded:	8b 52 48             	mov    0x48(%edx),%edx
f0109df0:	89 50 48             	mov    %edx,0x48(%eax)
f0109df3:	eb 14                	jmp    f0109e09 <sched_exit_env+0xf5>
f0109df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109df8:	8b 40 48             	mov    0x48(%eax),%eax
f0109dfb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109dfe:	c1 e2 04             	shl    $0x4,%edx
f0109e01:	81 c2 24 61 32 f0    	add    $0xf0326124,%edx
f0109e07:	89 02                	mov    %eax,(%edx)
f0109e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e0c:	8b 40 48             	mov    0x48(%eax),%eax
f0109e0f:	85 c0                	test   %eax,%eax
f0109e11:	74 11                	je     f0109e24 <sched_exit_env+0x110>
f0109e13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e16:	8b 40 48             	mov    0x48(%eax),%eax
f0109e19:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e1c:	8b 52 44             	mov    0x44(%edx),%edx
f0109e1f:	89 50 44             	mov    %edx,0x44(%eax)
f0109e22:	eb 14                	jmp    f0109e38 <sched_exit_env+0x124>
f0109e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e27:	8b 40 44             	mov    0x44(%eax),%eax
f0109e2a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109e2d:	c1 e2 04             	shl    $0x4,%edx
f0109e30:	81 c2 20 61 32 f0    	add    $0xf0326120,%edx
f0109e36:	89 02                	mov    %eax,(%edx)
f0109e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e3b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e45:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109e4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109e4f:	c1 e0 04             	shl    $0x4,%eax
f0109e52:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f0109e57:	8b 00                	mov    (%eax),%eax
f0109e59:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109e5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109e5f:	c1 e0 04             	shl    $0x4,%eax
f0109e62:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f0109e67:	89 10                	mov    %edx,(%eax)
						found = 1;
f0109e69:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0109e70:	eb 50                	jmp    f0109ec2 <sched_exit_env+0x1ae>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109e72:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109e75:	c1 e0 04             	shl    $0x4,%eax
f0109e78:	05 28 61 32 f0       	add    $0xf0326128,%eax
f0109e7d:	8b 00                	mov    (%eax),%eax
f0109e7f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109e82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109e86:	74 08                	je     f0109e90 <sched_exit_env+0x17c>
f0109e88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e8b:	8b 40 44             	mov    0x44(%eax),%eax
f0109e8e:	eb 05                	jmp    f0109e95 <sched_exit_env+0x181>
f0109e90:	b8 00 00 00 00       	mov    $0x0,%eax
f0109e95:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109e98:	c1 e2 04             	shl    $0x4,%edx
f0109e9b:	81 c2 28 61 32 f0    	add    $0xf0326128,%edx
f0109ea1:	89 02                	mov    %eax,(%edx)
f0109ea3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109ea6:	c1 e0 04             	shl    $0x4,%eax
f0109ea9:	05 28 61 32 f0       	add    $0xf0326128,%eax
f0109eae:	8b 00                	mov    (%eax),%eax
f0109eb0:	85 c0                	test   %eax,%eax
f0109eb2:	0f 85 13 ff ff ff    	jne    f0109dcb <sched_exit_env+0xb7>
f0109eb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109ebc:	0f 85 09 ff ff ff    	jne    f0109dcb <sched_exit_env+0xb7>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0109ec2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109ec6:	75 16                	jne    f0109ede <sched_exit_env+0x1ca>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109ec8:	ff 45 ec             	incl   -0x14(%ebp)
f0109ecb:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0109ed0:	0f b6 c0             	movzbl %al,%eax
f0109ed3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109ed6:	0f 8f be fe ff ff    	jg     f0109d9a <sched_exit_env+0x86>
f0109edc:	eb 01                	jmp    f0109edf <sched_exit_env+0x1cb>
						break;
					}
				}
			}
			if (found)
				break;
f0109ede:	90                   	nop
		}
	}
	if (!found)
f0109edf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109ee3:	75 1c                	jne    f0109f01 <sched_exit_env+0x1ed>
	{
		if (curenv->env_id == envId)
f0109ee5:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109eea:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109eed:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109ef0:	75 0f                	jne    f0109f01 <sched_exit_env+0x1ed>
		{
			ptr_env = curenv;
f0109ef2:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109ef7:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0109efa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0109f01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109f05:	74 2a                	je     f0109f31 <sched_exit_env+0x21d>
	{
		sched_insert_exit(ptr_env);
f0109f07:	83 ec 0c             	sub    $0xc,%esp
f0109f0a:	ff 75 f4             	pushl  -0xc(%ebp)
f0109f0d:	e8 32 f6 ff ff       	call   f0109544 <sched_insert_exit>
f0109f12:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0109f15:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f0109f1a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109f1d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109f20:	75 0f                	jne    f0109f31 <sched_exit_env+0x21d>
		{
			curenv = NULL;
f0109f22:	c7 05 30 58 32 f0 00 	movl   $0x0,0xf0325830
f0109f29:	00 00 00 
			fos_scheduler();
f0109f2c:	e8 ea f2 ff ff       	call   f010921b <fos_scheduler>
		}
	}
}
f0109f31:	90                   	nop
f0109f32:	c9                   	leave  
f0109f33:	c3                   	ret    

f0109f34 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f0109f34:	55                   	push   %ebp
f0109f35:	89 e5                	mov    %esp,%ebp
f0109f37:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109f3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109f41:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109f48:	e9 21 01 00 00       	jmp    f010a06e <sched_exit_all_ready_envs+0x13a>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109f4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109f50:	c1 e0 04             	shl    $0x4,%eax
f0109f53:	05 20 61 32 f0       	add    $0xf0326120,%eax
f0109f58:	8b 00                	mov    (%eax),%eax
f0109f5a:	85 c0                	test   %eax,%eax
f0109f5c:	0f 84 09 01 00 00    	je     f010a06b <sched_exit_all_ready_envs+0x137>
		{
			ptr_env=NULL;
f0109f62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109f69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109f6c:	c1 e0 04             	shl    $0x4,%eax
f0109f6f:	05 20 61 32 f0       	add    $0xf0326120,%eax
f0109f74:	8b 00                	mov    (%eax),%eax
f0109f76:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109f79:	e9 ad 00 00 00       	jmp    f010a02b <sched_exit_all_ready_envs+0xf7>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109f7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f81:	8b 40 44             	mov    0x44(%eax),%eax
f0109f84:	85 c0                	test   %eax,%eax
f0109f86:	74 11                	je     f0109f99 <sched_exit_all_ready_envs+0x65>
f0109f88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f8b:	8b 40 44             	mov    0x44(%eax),%eax
f0109f8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f91:	8b 52 48             	mov    0x48(%edx),%edx
f0109f94:	89 50 48             	mov    %edx,0x48(%eax)
f0109f97:	eb 14                	jmp    f0109fad <sched_exit_all_ready_envs+0x79>
f0109f99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f9c:	8b 40 48             	mov    0x48(%eax),%eax
f0109f9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109fa2:	c1 e2 04             	shl    $0x4,%edx
f0109fa5:	81 c2 24 61 32 f0    	add    $0xf0326124,%edx
f0109fab:	89 02                	mov    %eax,(%edx)
f0109fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fb0:	8b 40 48             	mov    0x48(%eax),%eax
f0109fb3:	85 c0                	test   %eax,%eax
f0109fb5:	74 11                	je     f0109fc8 <sched_exit_all_ready_envs+0x94>
f0109fb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fba:	8b 40 48             	mov    0x48(%eax),%eax
f0109fbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109fc0:	8b 52 44             	mov    0x44(%edx),%edx
f0109fc3:	89 50 44             	mov    %edx,0x44(%eax)
f0109fc6:	eb 14                	jmp    f0109fdc <sched_exit_all_ready_envs+0xa8>
f0109fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fcb:	8b 40 44             	mov    0x44(%eax),%eax
f0109fce:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109fd1:	c1 e2 04             	shl    $0x4,%edx
f0109fd4:	81 c2 20 61 32 f0    	add    $0xf0326120,%edx
f0109fda:	89 02                	mov    %eax,(%edx)
f0109fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fdf:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109fe9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109ff0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109ff3:	c1 e0 04             	shl    $0x4,%eax
f0109ff6:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f0109ffb:	8b 00                	mov    (%eax),%eax
f0109ffd:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a000:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a003:	c1 e0 04             	shl    $0x4,%eax
f010a006:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f010a00b:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f010a00d:	83 ec 0c             	sub    $0xc,%esp
f010a010:	ff 75 f4             	pushl  -0xc(%ebp)
f010a013:	e8 2c f5 ff ff       	call   f0109544 <sched_insert_exit>
f010a018:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a01b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a01e:	c1 e0 04             	shl    $0x4,%eax
f010a021:	05 28 61 32 f0       	add    $0xf0326128,%eax
f010a026:	8b 00                	mov    (%eax),%eax
f010a028:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a02b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a02f:	74 08                	je     f010a039 <sched_exit_all_ready_envs+0x105>
f010a031:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a034:	8b 40 44             	mov    0x44(%eax),%eax
f010a037:	eb 05                	jmp    f010a03e <sched_exit_all_ready_envs+0x10a>
f010a039:	b8 00 00 00 00       	mov    $0x0,%eax
f010a03e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a041:	c1 e2 04             	shl    $0x4,%edx
f010a044:	81 c2 28 61 32 f0    	add    $0xf0326128,%edx
f010a04a:	89 02                	mov    %eax,(%edx)
f010a04c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a04f:	c1 e0 04             	shl    $0x4,%eax
f010a052:	05 28 61 32 f0       	add    $0xf0326128,%eax
f010a057:	8b 00                	mov    (%eax),%eax
f010a059:	85 c0                	test   %eax,%eax
f010a05b:	0f 85 1d ff ff ff    	jne    f0109f7e <sched_exit_all_ready_envs+0x4a>
f010a061:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a065:	0f 85 13 ff ff ff    	jne    f0109f7e <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a06b:	ff 45 f0             	incl   -0x10(%ebp)
f010a06e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010a073:	0f b6 c0             	movzbl %al,%eax
f010a076:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a079:	0f 8f ce fe ff ff    	jg     f0109f4d <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010a07f:	90                   	nop
f010a080:	c9                   	leave  
f010a081:	c3                   	ret    

f010a082 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010a082:	55                   	push   %ebp
f010a083:	89 e5                	mov    %esp,%ebp
f010a085:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010a088:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010a08f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010a096:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a09a:	0f 85 a0 00 00 00    	jne    f010a140 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010a0a0:	a1 c8 2c 39 f0       	mov    0xf0392cc8,%eax
f010a0a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a0a8:	eb 67                	jmp    f010a111 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f010a0aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a0b0:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a0b3:	75 54                	jne    f010a109 <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010a0b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0b8:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f010a0be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a0c4:	83 ec 04             	sub    $0x4,%esp
f010a0c7:	52                   	push   %edx
f010a0c8:	50                   	push   %eax
f010a0c9:	68 68 dc 11 f0       	push   $0xf011dc68
f010a0ce:	e8 d0 d4 ff ff       	call   f01075a3 <cprintf>
f010a0d3:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f010a0d6:	83 ec 0c             	sub    $0xc,%esp
f010a0d9:	ff 75 f4             	pushl  -0xc(%ebp)
f010a0dc:	e8 e2 f3 ff ff       	call   f01094c3 <sched_remove_new>
f010a0e1:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010a0e4:	83 ec 0c             	sub    $0xc,%esp
f010a0e7:	ff 75 f4             	pushl  -0xc(%ebp)
f010a0ea:	e8 c6 c6 ff ff       	call   f01067b5 <start_env_free>
f010a0ef:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010a0f2:	83 ec 0c             	sub    $0xc,%esp
f010a0f5:	68 e7 db 11 f0       	push   $0xf011dbe7
f010a0fa:	e8 a4 d4 ff ff       	call   f01075a3 <cprintf>
f010a0ff:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010a102:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010a109:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f010a10e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a111:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a115:	74 08                	je     f010a11f <sched_kill_env+0x9d>
f010a117:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a11a:	8b 40 44             	mov    0x44(%eax),%eax
f010a11d:	eb 05                	jmp    f010a124 <sched_kill_env+0xa2>
f010a11f:	b8 00 00 00 00       	mov    $0x0,%eax
f010a124:	a3 d0 2c 39 f0       	mov    %eax,0xf0392cd0
f010a129:	a1 d0 2c 39 f0       	mov    0xf0392cd0,%eax
f010a12e:	85 c0                	test   %eax,%eax
f010a130:	0f 85 74 ff ff ff    	jne    f010a0aa <sched_kill_env+0x28>
f010a136:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a13a:	0f 85 6a ff ff ff    	jne    f010a0aa <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010a140:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a144:	0f 85 90 01 00 00    	jne    f010a2da <sched_kill_env+0x258>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a14a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010a151:	e9 70 01 00 00       	jmp    f010a2c6 <sched_kill_env+0x244>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010a156:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a159:	c1 e0 04             	shl    $0x4,%eax
f010a15c:	05 20 61 32 f0       	add    $0xf0326120,%eax
f010a161:	8b 00                	mov    (%eax),%eax
f010a163:	85 c0                	test   %eax,%eax
f010a165:	0f 84 52 01 00 00    	je     f010a2bd <sched_kill_env+0x23b>
			{
				ptr_env=NULL;
f010a16b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a172:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a175:	c1 e0 04             	shl    $0x4,%eax
f010a178:	05 20 61 32 f0       	add    $0xf0326120,%eax
f010a17d:	8b 00                	mov    (%eax),%eax
f010a17f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a182:	e9 f6 00 00 00       	jmp    f010a27d <sched_kill_env+0x1fb>
				{
					if(ptr_env->env_id == envId)
f010a187:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a18a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a18d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a190:	0f 85 d7 00 00 00    	jne    f010a26d <sched_kill_env+0x1eb>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f010a196:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a199:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f010a19f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1a2:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a1a5:	ff 75 ec             	pushl  -0x14(%ebp)
f010a1a8:	52                   	push   %edx
f010a1a9:	50                   	push   %eax
f010a1aa:	68 90 dc 11 f0       	push   $0xf011dc90
f010a1af:	e8 ef d3 ff ff       	call   f01075a3 <cprintf>
f010a1b4:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010a1b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1ba:	8b 40 44             	mov    0x44(%eax),%eax
f010a1bd:	85 c0                	test   %eax,%eax
f010a1bf:	74 11                	je     f010a1d2 <sched_kill_env+0x150>
f010a1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1c4:	8b 40 44             	mov    0x44(%eax),%eax
f010a1c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1ca:	8b 52 48             	mov    0x48(%edx),%edx
f010a1cd:	89 50 48             	mov    %edx,0x48(%eax)
f010a1d0:	eb 14                	jmp    f010a1e6 <sched_kill_env+0x164>
f010a1d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1d5:	8b 40 48             	mov    0x48(%eax),%eax
f010a1d8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a1db:	c1 e2 04             	shl    $0x4,%edx
f010a1de:	81 c2 24 61 32 f0    	add    $0xf0326124,%edx
f010a1e4:	89 02                	mov    %eax,(%edx)
f010a1e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1e9:	8b 40 48             	mov    0x48(%eax),%eax
f010a1ec:	85 c0                	test   %eax,%eax
f010a1ee:	74 11                	je     f010a201 <sched_kill_env+0x17f>
f010a1f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1f3:	8b 40 48             	mov    0x48(%eax),%eax
f010a1f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1f9:	8b 52 44             	mov    0x44(%edx),%edx
f010a1fc:	89 50 44             	mov    %edx,0x44(%eax)
f010a1ff:	eb 14                	jmp    f010a215 <sched_kill_env+0x193>
f010a201:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a204:	8b 40 44             	mov    0x44(%eax),%eax
f010a207:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a20a:	c1 e2 04             	shl    $0x4,%edx
f010a20d:	81 c2 20 61 32 f0    	add    $0xf0326120,%edx
f010a213:	89 02                	mov    %eax,(%edx)
f010a215:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a218:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a21f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a222:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a229:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a22c:	c1 e0 04             	shl    $0x4,%eax
f010a22f:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f010a234:	8b 00                	mov    (%eax),%eax
f010a236:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a239:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a23c:	c1 e0 04             	shl    $0x4,%eax
f010a23f:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f010a244:	89 10                	mov    %edx,(%eax)
						start_env_free(ptr_env);
f010a246:	83 ec 0c             	sub    $0xc,%esp
f010a249:	ff 75 f4             	pushl  -0xc(%ebp)
f010a24c:	e8 64 c5 ff ff       	call   f01067b5 <start_env_free>
f010a251:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010a254:	83 ec 0c             	sub    $0xc,%esp
f010a257:	68 e7 db 11 f0       	push   $0xf011dbe7
f010a25c:	e8 42 d3 ff ff       	call   f01075a3 <cprintf>
f010a261:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010a264:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010a26b:	eb 50                	jmp    f010a2bd <sched_kill_env+0x23b>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a26d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a270:	c1 e0 04             	shl    $0x4,%eax
f010a273:	05 28 61 32 f0       	add    $0xf0326128,%eax
f010a278:	8b 00                	mov    (%eax),%eax
f010a27a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a27d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a281:	74 08                	je     f010a28b <sched_kill_env+0x209>
f010a283:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a286:	8b 40 44             	mov    0x44(%eax),%eax
f010a289:	eb 05                	jmp    f010a290 <sched_kill_env+0x20e>
f010a28b:	b8 00 00 00 00       	mov    $0x0,%eax
f010a290:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a293:	c1 e2 04             	shl    $0x4,%edx
f010a296:	81 c2 28 61 32 f0    	add    $0xf0326128,%edx
f010a29c:	89 02                	mov    %eax,(%edx)
f010a29e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a2a1:	c1 e0 04             	shl    $0x4,%eax
f010a2a4:	05 28 61 32 f0       	add    $0xf0326128,%eax
f010a2a9:	8b 00                	mov    (%eax),%eax
f010a2ab:	85 c0                	test   %eax,%eax
f010a2ad:	0f 85 d4 fe ff ff    	jne    f010a187 <sched_kill_env+0x105>
f010a2b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a2b7:	0f 85 ca fe ff ff    	jne    f010a187 <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f010a2bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a2c1:	75 16                	jne    f010a2d9 <sched_kill_env+0x257>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a2c3:	ff 45 ec             	incl   -0x14(%ebp)
f010a2c6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010a2cb:	0f b6 c0             	movzbl %al,%eax
f010a2ce:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010a2d1:	0f 8f 7f fe ff ff    	jg     f010a156 <sched_kill_env+0xd4>
f010a2d7:	eb 01                	jmp    f010a2da <sched_kill_env+0x258>
						//return;
					}
				}
			}
			if (found)
				break;
f010a2d9:	90                   	nop
		}
	}
	if (!found)
f010a2da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a2de:	0f 85 a7 00 00 00    	jne    f010a38b <sched_kill_env+0x309>
	{
		ptr_env=NULL;
f010a2e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010a2eb:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f010a2f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a2f3:	eb 67                	jmp    f010a35c <sched_kill_env+0x2da>
		{
			if(ptr_env->env_id == envId)
f010a2f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2f8:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a2fb:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a2fe:	75 54                	jne    f010a354 <sched_kill_env+0x2d2>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010a300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a303:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f010a309:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a30c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a30f:	83 ec 04             	sub    $0x4,%esp
f010a312:	52                   	push   %edx
f010a313:	50                   	push   %eax
f010a314:	68 bc dc 11 f0       	push   $0xf011dcbc
f010a319:	e8 85 d2 ff ff       	call   f01075a3 <cprintf>
f010a31e:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010a321:	83 ec 0c             	sub    $0xc,%esp
f010a324:	ff 75 f4             	pushl  -0xc(%ebp)
f010a327:	e8 90 f2 ff ff       	call   f01095bc <sched_remove_exit>
f010a32c:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010a32f:	83 ec 0c             	sub    $0xc,%esp
f010a332:	ff 75 f4             	pushl  -0xc(%ebp)
f010a335:	e8 7b c4 ff ff       	call   f01067b5 <start_env_free>
f010a33a:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010a33d:	83 ec 0c             	sub    $0xc,%esp
f010a340:	68 e7 db 11 f0       	push   $0xf011dbe7
f010a345:	e8 59 d2 ff ff       	call   f01075a3 <cprintf>
f010a34a:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010a34d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010a354:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f010a359:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a35c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a360:	74 08                	je     f010a36a <sched_kill_env+0x2e8>
f010a362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a365:	8b 40 44             	mov    0x44(%eax),%eax
f010a368:	eb 05                	jmp    f010a36f <sched_kill_env+0x2ed>
f010a36a:	b8 00 00 00 00       	mov    $0x0,%eax
f010a36f:	a3 cc c0 38 f0       	mov    %eax,0xf038c0cc
f010a374:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f010a379:	85 c0                	test   %eax,%eax
f010a37b:	0f 85 74 ff ff ff    	jne    f010a2f5 <sched_kill_env+0x273>
f010a381:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a385:	0f 85 6a ff ff ff    	jne    f010a2f5 <sched_kill_env+0x273>
				//return;
			}
		}
	}

	if (!found)
f010a38b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a38f:	0f 85 a0 00 00 00    	jne    f010a435 <sched_kill_env+0x3b3>
	{
		if (curenv->env_id == envId)
f010a395:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a39a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a39d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a3a0:	0f 85 8f 00 00 00    	jne    f010a435 <sched_kill_env+0x3b3>
		{
			ptr_env = curenv;
f010a3a6:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a3ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f010a3ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a3b4:	83 f8 02             	cmp    $0x2,%eax
f010a3b7:	74 19                	je     f010a3d2 <sched_kill_env+0x350>
f010a3b9:	68 e4 dc 11 f0       	push   $0xf011dce4
f010a3be:	68 04 dd 11 f0       	push   $0xf011dd04
f010a3c3:	68 24 02 00 00       	push   $0x224
f010a3c8:	68 5e da 11 f0       	push   $0xf011da5e
f010a3cd:	e8 c1 5d ff ff       	call   f0100193 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010a3d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3d5:	8d 90 f0 ee 00 00    	lea    0xeef0(%eax),%edx
f010a3db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3de:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a3e1:	83 ec 04             	sub    $0x4,%esp
f010a3e4:	52                   	push   %edx
f010a3e5:	50                   	push   %eax
f010a3e6:	68 1c dd 11 f0       	push   $0xf011dd1c
f010a3eb:	e8 b3 d1 ff ff       	call   f01075a3 <cprintf>
f010a3f0:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f010a3f3:	83 ec 0c             	sub    $0xc,%esp
f010a3f6:	ff 75 f4             	pushl  -0xc(%ebp)
f010a3f9:	e8 b7 c3 ff ff       	call   f01067b5 <start_env_free>
f010a3fe:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010a401:	83 ec 0c             	sub    $0xc,%esp
f010a404:	68 e7 db 11 f0       	push   $0xf011dbe7
f010a409:	e8 95 d1 ff ff       	call   f01075a3 <cprintf>
f010a40e:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010a411:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f010a418:	a1 58 11 3b f0       	mov    0xf03b1158,%eax
f010a41d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010a420:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a423:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f010a426:	c7 05 30 58 32 f0 00 	movl   $0x0,0xf0325830
f010a42d:	00 00 00 
			fos_scheduler();
f010a430:	e8 e6 ed ff ff       	call   f010921b <fos_scheduler>
		}
	}
}
f010a435:	90                   	nop
f010a436:	c9                   	leave  
f010a437:	c3                   	ret    

f010a438 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f010a438:	55                   	push   %ebp
f010a439:	89 e5                	mov    %esp,%ebp
f010a43b:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRUTimeStamp())
f010a43e:	e8 f5 e6 ff ff       	call   f0108b38 <isPageReplacmentAlgorithmLRUTimeStamp>
f010a443:	85 c0                	test   %eax,%eax
f010a445:	74 05                	je     f010a44c <clock_interrupt_handler+0x14>
	{
		update_WS_time_stamps();
f010a447:	e8 05 00 00 00       	call   f010a451 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f010a44c:	e8 ca ed ff ff       	call   f010921b <fos_scheduler>

f010a451 <update_WS_time_stamps>:
}



void update_WS_time_stamps()
{
f010a451:	55                   	push   %ebp
f010a452:	89 e5                	mov    %esp,%ebp
f010a454:	53                   	push   %ebx
f010a455:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = curenv;
f010a458:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a45d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f010a460:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010a464:	0f 84 0c 02 00 00    	je     f010a676 <update_WS_time_stamps+0x225>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010a46a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a471:	e9 0e 01 00 00       	jmp    f010a584 <update_WS_time_stamps+0x133>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010a476:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a479:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a47c:	89 d0                	mov    %edx,%eax
f010a47e:	c1 e0 02             	shl    $0x2,%eax
f010a481:	01 d0                	add    %edx,%eax
f010a483:	c1 e0 02             	shl    $0x2,%eax
f010a486:	01 c8                	add    %ecx,%eax
f010a488:	83 c0 7c             	add    $0x7c,%eax
f010a48b:	8a 00                	mov    (%eax),%al
f010a48d:	3c 01                	cmp    $0x1,%al
f010a48f:	0f 84 ec 00 00 00    	je     f010a581 <update_WS_time_stamps+0x130>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f010a495:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a498:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a49b:	89 d0                	mov    %edx,%eax
f010a49d:	c1 e0 02             	shl    $0x2,%eax
f010a4a0:	01 d0                	add    %edx,%eax
f010a4a2:	c1 e0 02             	shl    $0x2,%eax
f010a4a5:	01 c8                	add    %ecx,%eax
f010a4a7:	83 c0 78             	add    $0x78,%eax
f010a4aa:	8b 00                	mov    (%eax),%eax
f010a4ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
					//uint32 perm = pt_get_page_permissions(curr_env_ptr, page_va) ;
					uint32 *ptr_table = NULL;
f010a4af:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
					get_page_table(curr_env_ptr->env_page_directory,(void*) page_va, &ptr_table);
f010a4b6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a4b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a4bc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a4bf:	83 ec 04             	sub    $0x4,%esp
f010a4c2:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
f010a4c5:	51                   	push   %ecx
f010a4c6:	52                   	push   %edx
f010a4c7:	50                   	push   %eax
f010a4c8:	e8 a1 99 ff ff       	call   f0103e6e <get_page_table>
f010a4cd:	83 c4 10             	add    $0x10,%esp
					uint32 perm = ptr_table[PTX(page_va)];
f010a4d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a4d3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a4d6:	c1 ea 0c             	shr    $0xc,%edx
f010a4d9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a4df:	c1 e2 02             	shl    $0x2,%edx
f010a4e2:	01 d0                	add    %edx,%eax
f010a4e4:	8b 00                	mov    (%eax),%eax
f010a4e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f010a4e9:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a4ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a4ef:	89 d0                	mov    %edx,%eax
f010a4f1:	c1 e0 02             	shl    $0x2,%eax
f010a4f4:	01 d0                	add    %edx,%eax
f010a4f6:	c1 e0 02             	shl    $0x2,%eax
f010a4f9:	01 c8                	add    %ecx,%eax
f010a4fb:	83 e8 80             	sub    $0xffffff80,%eax
f010a4fe:	8b 00                	mov    (%eax),%eax
f010a500:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f010a503:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a506:	83 e0 20             	and    $0x20,%eax
f010a509:	85 c0                	test   %eax,%eax
f010a50b:	74 55                	je     f010a562 <update_WS_time_stamps+0x111>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010a50d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a510:	c1 e8 02             	shr    $0x2,%eax
f010a513:	0d 00 00 00 80       	or     $0x80000000,%eax
f010a518:	89 c1                	mov    %eax,%ecx
f010a51a:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a51d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a520:	89 d0                	mov    %edx,%eax
f010a522:	c1 e0 02             	shl    $0x2,%eax
f010a525:	01 d0                	add    %edx,%eax
f010a527:	c1 e0 02             	shl    $0x2,%eax
f010a52a:	01 d8                	add    %ebx,%eax
f010a52c:	83 e8 80             	sub    $0xffffff80,%eax
f010a52f:	89 08                	mov    %ecx,(%eax)
						//pt_set_page_permissions(curr_env_ptr, page_va, 0 , PERM_USED) ;
						ptr_table[PTX(page_va)] &= ~PERM_USED;
f010a531:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010a534:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a537:	c1 ea 0c             	shr    $0xc,%edx
f010a53a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a540:	c1 e2 02             	shl    $0x2,%edx
f010a543:	01 d0                	add    %edx,%eax
f010a545:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010a548:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010a54b:	c1 e9 0c             	shr    $0xc,%ecx
f010a54e:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010a554:	c1 e1 02             	shl    $0x2,%ecx
f010a557:	01 ca                	add    %ecx,%edx
f010a559:	8b 12                	mov    (%edx),%edx
f010a55b:	83 e2 df             	and    $0xffffffdf,%edx
f010a55e:	89 10                	mov    %edx,(%eax)
f010a560:	eb 1f                	jmp    f010a581 <update_WS_time_stamps+0x130>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f010a562:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a565:	c1 e8 02             	shr    $0x2,%eax
f010a568:	89 c1                	mov    %eax,%ecx
f010a56a:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a56d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a570:	89 d0                	mov    %edx,%eax
f010a572:	c1 e0 02             	shl    $0x2,%eax
f010a575:	01 d0                	add    %edx,%eax
f010a577:	c1 e0 02             	shl    $0x2,%eax
f010a57a:	01 d8                	add    %ebx,%eax
f010a57c:	83 e8 80             	sub    $0xffffff80,%eax
f010a57f:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010a581:	ff 45 f4             	incl   -0xc(%ebp)
f010a584:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a587:	8b 50 74             	mov    0x74(%eax),%edx
f010a58a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a58d:	39 c2                	cmp    %eax,%edx
f010a58f:	0f 87 e1 fe ff ff    	ja     f010a476 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010a595:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a59c:	e9 cb 00 00 00       	jmp    f010a66c <update_WS_time_stamps+0x21b>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f010a5a1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a5a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5a7:	89 d0                	mov    %edx,%eax
f010a5a9:	c1 e0 02             	shl    $0x2,%eax
f010a5ac:	01 d0                	add    %edx,%eax
f010a5ae:	c1 e0 02             	shl    $0x2,%eax
f010a5b1:	01 c8                	add    %ecx,%eax
f010a5b3:	05 dc ea 00 00       	add    $0xeadc,%eax
f010a5b8:	8a 00                	mov    (%eax),%al
f010a5ba:	3c 01                	cmp    $0x1,%al
f010a5bc:	0f 84 a7 00 00 00    	je     f010a669 <update_WS_time_stamps+0x218>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f010a5c2:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a5c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5c8:	89 d0                	mov    %edx,%eax
f010a5ca:	c1 e0 02             	shl    $0x2,%eax
f010a5cd:	01 d0                	add    %edx,%eax
f010a5cf:	c1 e0 02             	shl    $0x2,%eax
f010a5d2:	01 c8                	add    %ecx,%eax
f010a5d4:	05 d8 ea 00 00       	add    $0xead8,%eax
f010a5d9:	8b 00                	mov    (%eax),%eax
f010a5db:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f010a5de:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a5e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a5e4:	89 d0                	mov    %edx,%eax
f010a5e6:	c1 e0 02             	shl    $0x2,%eax
f010a5e9:	01 d0                	add    %edx,%eax
f010a5eb:	c1 e0 02             	shl    $0x2,%eax
f010a5ee:	01 c8                	add    %ecx,%eax
f010a5f0:	05 e0 ea 00 00       	add    $0xeae0,%eax
f010a5f5:	8b 00                	mov    (%eax),%eax
f010a5f7:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr, table_va))
f010a5fa:	83 ec 08             	sub    $0x8,%esp
f010a5fd:	ff 75 dc             	pushl  -0x24(%ebp)
f010a600:	ff 75 ec             	pushl  -0x14(%ebp)
f010a603:	e8 4a a4 ff ff       	call   f0104a52 <pd_is_table_used>
f010a608:	83 c4 10             	add    $0x10,%esp
f010a60b:	85 c0                	test   %eax,%eax
f010a60d:	74 39                	je     f010a648 <update_WS_time_stamps+0x1f7>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010a60f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a612:	c1 e8 02             	shr    $0x2,%eax
f010a615:	0d 00 00 00 80       	or     $0x80000000,%eax
f010a61a:	89 c1                	mov    %eax,%ecx
f010a61c:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a61f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a622:	89 d0                	mov    %edx,%eax
f010a624:	c1 e0 02             	shl    $0x2,%eax
f010a627:	01 d0                	add    %edx,%eax
f010a629:	c1 e0 02             	shl    $0x2,%eax
f010a62c:	01 d8                	add    %ebx,%eax
f010a62e:	05 e0 ea 00 00       	add    $0xeae0,%eax
f010a633:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr, table_va);
f010a635:	83 ec 08             	sub    $0x8,%esp
f010a638:	ff 75 dc             	pushl  -0x24(%ebp)
f010a63b:	ff 75 ec             	pushl  -0x14(%ebp)
f010a63e:	e8 32 a4 ff ff       	call   f0104a75 <pd_set_table_unused>
f010a643:	83 c4 10             	add    $0x10,%esp
f010a646:	eb 21                	jmp    f010a669 <update_WS_time_stamps+0x218>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010a648:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a64b:	c1 e8 02             	shr    $0x2,%eax
f010a64e:	89 c1                	mov    %eax,%ecx
f010a650:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a653:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a656:	89 d0                	mov    %edx,%eax
f010a658:	c1 e0 02             	shl    $0x2,%eax
f010a65b:	01 d0                	add    %edx,%eax
f010a65d:	c1 e0 02             	shl    $0x2,%eax
f010a660:	01 d8                	add    %ebx,%eax
f010a662:	05 e0 ea 00 00       	add    $0xeae0,%eax
f010a667:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010a669:	ff 45 f0             	incl   -0x10(%ebp)
f010a66c:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f010a670:	0f 8e 2b ff ff ff    	jle    f010a5a1 <update_WS_time_stamps+0x150>
					}
				}
			}
		}
	}
}
f010a676:	90                   	nop
f010a677:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a67a:	c9                   	leave  
f010a67b:	c3                   	ret    

f010a67c <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010a67c:	55                   	push   %ebp
f010a67d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010a67f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a682:	8b 15 44 11 3b f0    	mov    0xf03b1144,%edx
f010a688:	29 d0                	sub    %edx,%eax
f010a68a:	c1 f8 03             	sar    $0x3,%eax
f010a68d:	89 c2                	mov    %eax,%edx
f010a68f:	89 d0                	mov    %edx,%eax
f010a691:	c1 e0 02             	shl    $0x2,%eax
f010a694:	01 d0                	add    %edx,%eax
f010a696:	c1 e0 02             	shl    $0x2,%eax
f010a699:	01 d0                	add    %edx,%eax
f010a69b:	c1 e0 02             	shl    $0x2,%eax
f010a69e:	01 d0                	add    %edx,%eax
f010a6a0:	89 c1                	mov    %eax,%ecx
f010a6a2:	c1 e1 08             	shl    $0x8,%ecx
f010a6a5:	01 c8                	add    %ecx,%eax
f010a6a7:	89 c1                	mov    %eax,%ecx
f010a6a9:	c1 e1 10             	shl    $0x10,%ecx
f010a6ac:	01 c8                	add    %ecx,%eax
f010a6ae:	01 c0                	add    %eax,%eax
f010a6b0:	01 d0                	add    %edx,%eax
}
f010a6b2:	5d                   	pop    %ebp
f010a6b3:	c3                   	ret    

f010a6b4 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010a6b4:	55                   	push   %ebp
f010a6b5:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010a6b7:	ff 75 08             	pushl  0x8(%ebp)
f010a6ba:	e8 bd ff ff ff       	call   f010a67c <to_frame_number>
f010a6bf:	83 c4 04             	add    $0x4,%esp
f010a6c2:	c1 e0 0c             	shl    $0xc,%eax
}
f010a6c5:	c9                   	leave  
f010a6c6:	c3                   	ret    

f010a6c7 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010a6c7:	55                   	push   %ebp
f010a6c8:	89 e5                	mov    %esp,%ebp
f010a6ca:	83 ec 18             	sub    $0x18,%esp
f010a6cd:	8b 45 10             	mov    0x10(%ebp),%eax
f010a6d0:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010a6d3:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010a6d7:	74 26                	je     f010a6ff <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010a6d9:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a6de:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a6e1:	8b 15 30 58 32 f0    	mov    0xf0325830,%edx
f010a6e7:	81 c2 f0 ee 00 00    	add    $0xeef0,%edx
f010a6ed:	83 ec 04             	sub    $0x4,%esp
f010a6f0:	50                   	push   %eax
f010a6f1:	52                   	push   %edx
f010a6f2:	68 48 dd 11 f0       	push   $0xf011dd48
f010a6f7:	e8 a7 ce ff ff       	call   f01075a3 <cprintf>
f010a6fc:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010a6ff:	83 ec 04             	sub    $0x4,%esp
f010a702:	ff 75 08             	pushl  0x8(%ebp)
f010a705:	ff 75 0c             	pushl  0xc(%ebp)
f010a708:	68 51 dd 11 f0       	push   $0xf011dd51
f010a70d:	e8 91 ce ff ff       	call   f01075a3 <cprintf>
f010a712:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010a715:	90                   	nop
f010a716:	c9                   	leave  
f010a717:	c3                   	ret    

f010a718 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010a718:	55                   	push   %ebp
f010a719:	89 e5                	mov    %esp,%ebp
f010a71b:	83 ec 18             	sub    $0x18,%esp
f010a71e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a721:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010a724:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010a728:	83 ec 08             	sub    $0x8,%esp
f010a72b:	50                   	push   %eax
f010a72c:	68 56 dd 11 f0       	push   $0xf011dd56
f010a731:	e8 6d ce ff ff       	call   f01075a3 <cprintf>
f010a736:	83 c4 10             	add    $0x10,%esp
}
f010a739:	90                   	nop
f010a73a:	c9                   	leave  
f010a73b:	c3                   	ret    

f010a73c <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010a73c:	55                   	push   %ebp
f010a73d:	89 e5                	mov    %esp,%ebp
f010a73f:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010a742:	e8 81 64 ff ff       	call   f0100bc8 <cons_getc2>
f010a747:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010a74a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a74d:	c9                   	leave  
f010a74e:	c3                   	ret    

f010a74f <sys_getenvid>:

// Returns the current environment's envid.

//2017
static int32 sys_getenvid(void)
{
f010a74f:	55                   	push   %ebp
f010a750:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010a752:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a757:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010a75a:	5d                   	pop    %ebp
f010a75b:	c3                   	ret    

f010a75c <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010a75c:	55                   	push   %ebp
f010a75d:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010a75f:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a764:	89 c2                	mov    %eax,%edx
f010a766:	a1 2c 58 32 f0       	mov    0xf032582c,%eax
f010a76b:	29 c2                	sub    %eax,%edx
f010a76d:	89 d0                	mov    %edx,%eax
f010a76f:	c1 f8 03             	sar    $0x3,%eax
f010a772:	89 c2                	mov    %eax,%edx
f010a774:	89 d0                	mov    %edx,%eax
f010a776:	01 c0                	add    %eax,%eax
f010a778:	01 d0                	add    %edx,%eax
f010a77a:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010a781:	01 c8                	add    %ecx,%eax
f010a783:	c1 e0 07             	shl    $0x7,%eax
f010a786:	01 d0                	add    %edx,%eax
f010a788:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a78f:	01 c8                	add    %ecx,%eax
f010a791:	c1 e0 02             	shl    $0x2,%eax
f010a794:	01 d0                	add    %edx,%eax
f010a796:	c1 e0 03             	shl    $0x3,%eax
f010a799:	01 d0                	add    %edx,%eax
f010a79b:	c1 e0 03             	shl    $0x3,%eax
f010a79e:	01 d0                	add    %edx,%eax
f010a7a0:	01 c0                	add    %eax,%eax
f010a7a2:	01 d0                	add    %edx,%eax
f010a7a4:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f010a7ab:	01 c8                	add    %ecx,%eax
f010a7ad:	01 c0                	add    %eax,%eax
f010a7af:	01 d0                	add    %edx,%eax
f010a7b1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010a7b8:	01 d0                	add    %edx,%eax
}
f010a7ba:	5d                   	pop    %ebp
f010a7bb:	c3                   	ret    

f010a7bc <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010a7bc:	55                   	push   %ebp
f010a7bd:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010a7bf:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a7c4:	8b 40 50             	mov    0x50(%eax),%eax
}
f010a7c7:	5d                   	pop    %ebp
f010a7c8:	c3                   	ret    

f010a7c9 <sys_env_destroy>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_env_destroy(int32 envid)
{
f010a7c9:	55                   	push   %ebp
f010a7ca:	89 e5                	mov    %esp,%ebp
f010a7cc:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 0)) < 0)
f010a7cf:	83 ec 04             	sub    $0x4,%esp
f010a7d2:	6a 00                	push   $0x0
f010a7d4:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010a7d7:	50                   	push   %eax
f010a7d8:	ff 75 08             	pushl  0x8(%ebp)
f010a7db:	e8 24 8c ff ff       	call   f0103404 <envid2env>
f010a7e0:	83 c4 10             	add    $0x10,%esp
f010a7e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a7e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a7ea:	79 05                	jns    f010a7f1 <sys_env_destroy+0x28>
		return r;
f010a7ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7ef:	eb 5e                	jmp    f010a84f <sys_env_destroy+0x86>

	if (e == curenv)
f010a7f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a7f4:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a7f9:	39 c2                	cmp    %eax,%edx
f010a7fb:	75 1b                	jne    f010a818 <sys_env_destroy+0x4f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010a7fd:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a802:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a805:	83 ec 08             	sub    $0x8,%esp
f010a808:	50                   	push   %eax
f010a809:	68 59 dd 11 f0       	push   $0xf011dd59
f010a80e:	e8 90 cd ff ff       	call   f01075a3 <cprintf>
f010a813:	83 c4 10             	add    $0x10,%esp
f010a816:	eb 20                	jmp    f010a838 <sys_env_destroy+0x6f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010a818:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a81b:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a81e:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a823:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a826:	83 ec 04             	sub    $0x4,%esp
f010a829:	52                   	push   %edx
f010a82a:	50                   	push   %eax
f010a82b:	68 74 dd 11 f0       	push   $0xf011dd74
f010a830:	e8 6e cd ff ff       	call   f01075a3 <cprintf>
f010a835:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010a838:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a83b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a83e:	83 ec 0c             	sub    $0xc,%esp
f010a841:	50                   	push   %eax
f010a842:	e8 3b f8 ff ff       	call   f010a082 <sched_kill_env>
f010a847:	83 c4 10             	add    $0x10,%esp

	return 0;
f010a84a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a84f:	c9                   	leave  
f010a850:	c3                   	ret    

f010a851 <sys_env_exit>:

static void sys_env_exit()
{
f010a851:	55                   	push   %ebp
f010a852:	89 e5                	mov    %esp,%ebp
f010a854:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010a857:	e8 a5 c6 ff ff       	call   f0106f01 <env_exit>
	//env_run_cmd_prmpt();
}
f010a85c:	90                   	nop
f010a85d:	c9                   	leave  
f010a85e:	c3                   	ret    

f010a85f <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010a85f:	55                   	push   %ebp
f010a860:	89 e5                	mov    %esp,%ebp
f010a862:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010a865:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a86a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct Frame_Info *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010a86d:	83 ec 0c             	sub    $0xc,%esp
f010a870:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010a873:	50                   	push   %eax
f010a874:	e8 76 94 ff ff       	call   f0103cef <allocate_frame>
f010a879:	83 c4 10             	add    $0x10,%esp
f010a87c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a87f:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a883:	75 08                	jne    f010a88d <__sys_allocate_page+0x2e>
		return r ;
f010a885:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a888:	e9 cf 00 00 00       	jmp    f010a95c <__sys_allocate_page+0xfd>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010a88d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a890:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010a895:	77 0c                	ja     f010a8a3 <__sys_allocate_page+0x44>
f010a897:	8b 45 08             	mov    0x8(%ebp),%eax
f010a89a:	25 ff 0f 00 00       	and    $0xfff,%eax
f010a89f:	85 c0                	test   %eax,%eax
f010a8a1:	74 0a                	je     f010a8ad <__sys_allocate_page+0x4e>
		return E_INVAL;
f010a8a3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a8a8:	e9 af 00 00 00       	jmp    f010a95c <__sys_allocate_page+0xfd>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010a8ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a8b0:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010a8b5:	83 f8 04             	cmp    $0x4,%eax
f010a8b8:	74 0a                	je     f010a8c4 <__sys_allocate_page+0x65>
		return E_INVAL;
f010a8ba:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a8bf:	e9 98 00 00 00       	jmp    f010a95c <__sys_allocate_page+0xfd>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010a8c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a8c7:	83 ec 0c             	sub    $0xc,%esp
f010a8ca:	50                   	push   %eax
f010a8cb:	e8 e4 fd ff ff       	call   f010a6b4 <to_physical_address>
f010a8d0:	83 c4 10             	add    $0x10,%esp
f010a8d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
	#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010a8d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a8d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010a8dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a8df:	c1 e8 0c             	shr    $0xc,%eax
f010a8e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010a8e5:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010a8ea:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010a8ed:	72 17                	jb     f010a906 <__sys_allocate_page+0xa7>
f010a8ef:	ff 75 e8             	pushl  -0x18(%ebp)
f010a8f2:	68 8c dd 11 f0       	push   $0xf011dd8c
f010a8f7:	68 be 00 00 00       	push   $0xbe
f010a8fc:	68 bb dd 11 f0       	push   $0xf011ddbb
f010a901:	e8 8d 58 ff ff       	call   f0100193 <_panic>
f010a906:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a909:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010a90e:	83 ec 04             	sub    $0x4,%esp
f010a911:	68 00 10 00 00       	push   $0x1000
f010a916:	6a 00                	push   $0x0
f010a918:	50                   	push   %eax
f010a919:	e8 52 f1 00 00       	call   f0119a70 <memset>
f010a91e:	83 c4 10             	add    $0x10,%esp
	}
	#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, va, perm) ;
f010a921:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010a924:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a927:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a92a:	ff 75 0c             	pushl  0xc(%ebp)
f010a92d:	ff 75 08             	pushl  0x8(%ebp)
f010a930:	52                   	push   %edx
f010a931:	50                   	push   %eax
f010a932:	e8 0d 97 ff ff       	call   f0104044 <map_frame>
f010a937:	83 c4 10             	add    $0x10,%esp
f010a93a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a93d:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a941:	75 14                	jne    f010a957 <__sys_allocate_page+0xf8>
	{
		decrement_references(ptr_frame_info);
f010a943:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a946:	83 ec 0c             	sub    $0xc,%esp
f010a949:	50                   	push   %eax
f010a94a:	e8 ef 94 ff ff       	call   f0103e3e <decrement_references>
f010a94f:	83 c4 10             	add    $0x10,%esp
		return r;
f010a952:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a955:	eb 05                	jmp    f010a95c <__sys_allocate_page+0xfd>
	}
	return 0 ;
f010a957:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a95c:	c9                   	leave  
f010a95d:	c3                   	ret    

f010a95e <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010a95e:	55                   	push   %ebp
f010a95f:	89 e5                	mov    %esp,%ebp
f010a961:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010a964:	83 ec 04             	sub    $0x4,%esp
f010a967:	68 ca dd 11 f0       	push   $0xf011ddca
f010a96c:	68 e5 00 00 00       	push   $0xe5
f010a971:	68 bb dd 11 f0       	push   $0xf011ddbb
f010a976:	e8 18 58 ff ff       	call   f0100193 <_panic>

f010a97b <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010a97b:	55                   	push   %ebp
f010a97c:	89 e5                	mov    %esp,%ebp
f010a97e:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010a981:	83 ec 04             	sub    $0x4,%esp
f010a984:	68 e8 dd 11 f0       	push   $0xf011dde8
f010a989:	68 f4 00 00 00       	push   $0xf4
f010a98e:	68 bb dd 11 f0       	push   $0xf011ddbb
f010a993:	e8 fb 57 ff ff       	call   f0100193 <_panic>

f010a998 <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010a998:	55                   	push   %ebp
f010a999:	89 e5                	mov    %esp,%ebp
f010a99b:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010a99e:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010a9a3:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a9a6:	83 ec 04             	sub    $0x4,%esp
f010a9a9:	ff 75 0c             	pushl  0xc(%ebp)
f010a9ac:	ff 75 08             	pushl  0x8(%ebp)
f010a9af:	50                   	push   %eax
f010a9b0:	e8 0c 9b ff ff       	call   f01044c1 <calculate_required_frames>
f010a9b5:	83 c4 10             	add    $0x10,%esp
}
f010a9b8:	c9                   	leave  
f010a9b9:	c3                   	ret    

f010a9ba <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010a9ba:	55                   	push   %ebp
f010a9bb:	89 e5                	mov    %esp,%ebp
f010a9bd:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a9c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a9c3:	83 ec 0c             	sub    $0xc,%esp
f010a9c6:	50                   	push   %eax
f010a9c7:	e8 a5 9b ff ff       	call   f0104571 <calculate_available_frames>
f010a9cc:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010a9cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a9d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a9d5:	01 d0                	add    %edx,%eax
}
f010a9d7:	c9                   	leave  
f010a9d8:	c3                   	ret    

f010a9d9 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010a9d9:	55                   	push   %ebp
f010a9da:	89 e5                	mov    %esp,%ebp
f010a9dc:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a9df:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a9e2:	83 ec 0c             	sub    $0xc,%esp
f010a9e5:	50                   	push   %eax
f010a9e6:	e8 86 9b ff ff       	call   f0104571 <calculate_available_frames>
f010a9eb:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010a9ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a9f1:	c9                   	leave  
f010a9f2:	c3                   	ret    

f010a9f3 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010a9f3:	55                   	push   %ebp
f010a9f4:	89 e5                	mov    %esp,%ebp
f010a9f6:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010a9f9:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010a9fc:	83 ec 0c             	sub    $0xc,%esp
f010a9ff:	50                   	push   %eax
f010aa00:	e8 6c 9b ff ff       	call   f0104571 <calculate_available_frames>
f010aa05:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010aa08:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010aa0b:	c9                   	leave  
f010aa0c:	c3                   	ret    

f010aa0d <sys_pf_calculate_allocated_pages>:

int sys_pf_calculate_allocated_pages(void)
{
f010aa0d:	55                   	push   %ebp
f010aa0e:	89 e5                	mov    %esp,%ebp
f010aa10:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010aa13:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aa18:	83 ec 0c             	sub    $0xc,%esp
f010aa1b:	50                   	push   %eax
f010aa1c:	e8 6b 1b 00 00       	call   f010c58c <pf_calculate_allocated_pages>
f010aa21:	83 c4 10             	add    $0x10,%esp
}
f010aa24:	c9                   	leave  
f010aa25:	c3                   	ret    

f010aa26 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010aa26:	55                   	push   %ebp
f010aa27:	89 e5                	mov    %esp,%ebp
f010aa29:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010aa2c:	83 ec 0c             	sub    $0xc,%esp
f010aa2f:	ff 75 08             	pushl  0x8(%ebp)
f010aa32:	e8 c6 f8 00 00       	call   f011a2fd <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010aa37:	83 c4 10             	add    $0x10,%esp
}
f010aa3a:	c9                   	leave  
f010aa3b:	c3                   	ret    

f010aa3c <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010aa3c:	55                   	push   %ebp
f010aa3d:	89 e5                	mov    %esp,%ebp
f010aa3f:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010aa42:	e8 0e f8 00 00       	call   f011a255 <scarce_memory>
}
f010aa47:	90                   	nop
f010aa48:	c9                   	leave  
f010aa49:	c3                   	ret    

f010aa4a <sys_freeMem>:

void sys_freeMem(uint32 virtual_address, uint32 size)
{
f010aa4a:	55                   	push   %ebp
f010aa4b:	89 e5                	mov    %esp,%ebp
f010aa4d:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010aa50:	e8 90 e1 ff ff       	call   f0108be5 <isBufferingEnabled>
f010aa55:	85 c0                	test   %eax,%eax
f010aa57:	74 19                	je     f010aa72 <sys_freeMem+0x28>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
f010aa59:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aa5e:	83 ec 04             	sub    $0x4,%esp
f010aa61:	ff 75 0c             	pushl  0xc(%ebp)
f010aa64:	ff 75 08             	pushl  0x8(%ebp)
f010aa67:	50                   	push   %eax
f010aa68:	e8 1a 9a ff ff       	call   f0104487 <__freeMem_with_buffering>
f010aa6d:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		freeMem(curenv, virtual_address, size);
	}
	return;
f010aa70:	eb 18                	jmp    f010aa8a <sys_freeMem+0x40>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		freeMem(curenv, virtual_address, size);
f010aa72:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aa77:	83 ec 04             	sub    $0x4,%esp
f010aa7a:	ff 75 0c             	pushl  0xc(%ebp)
f010aa7d:	ff 75 08             	pushl  0x8(%ebp)
f010aa80:	50                   	push   %eax
f010aa81:	e8 67 98 ff ff       	call   f01042ed <freeMem>
f010aa86:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010aa89:	90                   	nop
}
f010aa8a:	c9                   	leave  
f010aa8b:	c3                   	ret    

f010aa8c <sys_allocateMem>:

void sys_allocateMem(uint32 virtual_address, uint32 size)
{
f010aa8c:	55                   	push   %ebp
f010aa8d:	89 e5                	mov    %esp,%ebp
f010aa8f:	83 ec 08             	sub    $0x8,%esp
	allocateMem(curenv, virtual_address, size);
f010aa92:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aa97:	83 ec 04             	sub    $0x4,%esp
f010aa9a:	ff 75 0c             	pushl  0xc(%ebp)
f010aa9d:	ff 75 08             	pushl  0x8(%ebp)
f010aaa0:	50                   	push   %eax
f010aaa1:	e8 10 98 ff ff       	call   f01042b6 <allocateMem>
f010aaa6:	83 c4 10             	add    $0x10,%esp
	return;
f010aaa9:	90                   	nop
}
f010aaaa:	c9                   	leave  
f010aaab:	c3                   	ret    

f010aaac <sys_new>:

void sys_new(uint32 virtual_address, uint32 size)
{
f010aaac:	55                   	push   %ebp
f010aaad:	89 e5                	mov    %esp,%ebp
f010aaaf:	83 ec 08             	sub    $0x8,%esp
	__new(curenv, virtual_address, size);
f010aab2:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aab7:	83 ec 04             	sub    $0x4,%esp
f010aaba:	ff 75 0c             	pushl  0xc(%ebp)
f010aabd:	ff 75 08             	pushl  0x8(%ebp)
f010aac0:	50                   	push   %eax
f010aac1:	e8 39 a4 ff ff       	call   f0104eff <__new>
f010aac6:	83 c4 10             	add    $0x10,%esp
	return;
f010aac9:	90                   	nop
}
f010aaca:	c9                   	leave  
f010aacb:	c3                   	ret    

f010aacc <sys_disable_interrupt>:

//NEW!! 2012...
void sys_disable_interrupt()
{
f010aacc:	55                   	push   %ebp
f010aacd:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010aacf:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aad4:	8b 15 30 58 32 f0    	mov    0xf0325830,%edx
f010aada:	8b 52 38             	mov    0x38(%edx),%edx
f010aadd:	80 e6 fd             	and    $0xfd,%dh
f010aae0:	89 50 38             	mov    %edx,0x38(%eax)
}
f010aae3:	90                   	nop
f010aae4:	5d                   	pop    %ebp
f010aae5:	c3                   	ret    

f010aae6 <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010aae6:	55                   	push   %ebp
f010aae7:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010aae9:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aaee:	8b 15 30 58 32 f0    	mov    0xf0325830,%edx
f010aaf4:	8b 52 38             	mov    0x38(%edx),%edx
f010aaf7:	80 ce 02             	or     $0x2,%dh
f010aafa:	89 50 38             	mov    %edx,0x38(%eax)
}
f010aafd:	90                   	nop
f010aafe:	5d                   	pop    %ebp
f010aaff:	c3                   	ret    

f010ab00 <sys_clearFFL>:

void sys_clearFFL()
{
f010ab00:	55                   	push   %ebp
f010ab01:	89 e5                	mov    %esp,%ebp
f010ab03:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ab06:	a1 40 11 3b f0       	mov    0xf03b1140,%eax
f010ab0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ab0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ab15:	eb 12                	jmp    f010ab29 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ab17:	83 ec 0c             	sub    $0xc,%esp
f010ab1a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ab1d:	50                   	push   %eax
f010ab1e:	e8 cc 91 ff ff       	call   f0103cef <allocate_frame>
f010ab23:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ab26:	ff 45 f4             	incl   -0xc(%ebp)
f010ab29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab2c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ab2f:	7c e6                	jl     f010ab17 <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010ab31:	90                   	nop
f010ab32:	c9                   	leave  
f010ab33:	c3                   	ret    

f010ab34 <sys_createSemaphore>:

int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010ab34:	55                   	push   %ebp
f010ab35:	89 e5                	mov    %esp,%ebp
f010ab37:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010ab3a:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010ab3f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ab42:	83 ec 04             	sub    $0x4,%esp
f010ab45:	ff 75 0c             	pushl  0xc(%ebp)
f010ab48:	ff 75 08             	pushl  0x8(%ebp)
f010ab4b:	50                   	push   %eax
f010ab4c:	e8 f5 20 00 00       	call   f010cc46 <createSemaphore>
f010ab51:	83 c4 10             	add    $0x10,%esp
}
f010ab54:	c9                   	leave  
f010ab55:	c3                   	ret    

f010ab56 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010ab56:	55                   	push   %ebp
f010ab57:	89 e5                	mov    %esp,%ebp
f010ab59:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010ab5c:	83 ec 08             	sub    $0x8,%esp
f010ab5f:	ff 75 0c             	pushl  0xc(%ebp)
f010ab62:	ff 75 08             	pushl  0x8(%ebp)
f010ab65:	e8 f9 20 00 00       	call   f010cc63 <waitSemaphore>
f010ab6a:	83 c4 10             	add    $0x10,%esp
}
f010ab6d:	90                   	nop
f010ab6e:	c9                   	leave  
f010ab6f:	c3                   	ret    

f010ab70 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010ab70:	55                   	push   %ebp
f010ab71:	89 e5                	mov    %esp,%ebp
f010ab73:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010ab76:	83 ec 08             	sub    $0x8,%esp
f010ab79:	ff 75 0c             	pushl  0xc(%ebp)
f010ab7c:	ff 75 08             	pushl  0x8(%ebp)
f010ab7f:	e8 fc 20 00 00       	call   f010cc80 <signalSemaphore>
f010ab84:	83 c4 10             	add    $0x10,%esp
}
f010ab87:	90                   	nop
f010ab88:	c9                   	leave  
f010ab89:	c3                   	ret    

f010ab8a <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010ab8a:	55                   	push   %ebp
f010ab8b:	89 e5                	mov    %esp,%ebp
f010ab8d:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010ab90:	83 ec 08             	sub    $0x8,%esp
f010ab93:	ff 75 0c             	pushl  0xc(%ebp)
f010ab96:	ff 75 08             	pushl  0x8(%ebp)
f010ab99:	e8 44 1f 00 00       	call   f010cae2 <get_semaphore_object_ID>
f010ab9e:	83 c4 10             	add    $0x10,%esp
f010aba1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010aba4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aba8:	78 09                	js     f010abb3 <sys_getSemaphoreValue+0x29>
f010abaa:	81 7d f4 2b 01 00 00 	cmpl   $0x12b,-0xc(%ebp)
f010abb1:	7e 19                	jle    f010abcc <sys_getSemaphoreValue+0x42>
f010abb3:	68 08 de 11 f0       	push   $0xf011de08
f010abb8:	68 2d de 11 f0       	push   $0xf011de2d
f010abbd:	68 5f 01 00 00       	push   $0x15f
f010abc2:	68 bb dd 11 f0       	push   $0xf011ddbb
f010abc7:	e8 c7 55 ff ff       	call   f0100193 <_panic>

	return semaphores[semID].value ;
f010abcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abcf:	89 d0                	mov    %edx,%eax
f010abd1:	c1 e0 02             	shl    $0x2,%eax
f010abd4:	01 d0                	add    %edx,%eax
f010abd6:	01 c0                	add    %eax,%eax
f010abd8:	01 d0                	add    %edx,%eax
f010abda:	01 c0                	add    %eax,%eax
f010abdc:	01 d0                	add    %edx,%eax
f010abde:	c1 e0 02             	shl    $0x2,%eax
f010abe1:	05 34 c1 38 f0       	add    $0xf038c134,%eax
f010abe6:	8b 00                	mov    (%eax),%eax
}
f010abe8:	c9                   	leave  
f010abe9:	c3                   	ret    

f010abea <sys_createSharedObject>:

int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010abea:	55                   	push   %ebp
f010abeb:	89 e5                	mov    %esp,%ebp
f010abed:	83 ec 18             	sub    $0x18,%esp
f010abf0:	8b 45 10             	mov    0x10(%ebp),%eax
f010abf3:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010abf6:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010abfa:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010abff:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ac02:	83 ec 0c             	sub    $0xc,%esp
f010ac05:	ff 75 14             	pushl  0x14(%ebp)
f010ac08:	52                   	push   %edx
f010ac09:	ff 75 0c             	pushl  0xc(%ebp)
f010ac0c:	ff 75 08             	pushl  0x8(%ebp)
f010ac0f:	50                   	push   %eax
f010ac10:	e8 59 23 00 00       	call   f010cf6e <createSharedObject>
f010ac15:	83 c4 20             	add    $0x20,%esp
}
f010ac18:	c9                   	leave  
f010ac19:	c3                   	ret    

f010ac1a <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ac1a:	55                   	push   %ebp
f010ac1b:	89 e5                	mov    %esp,%ebp
f010ac1d:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010ac20:	83 ec 08             	sub    $0x8,%esp
f010ac23:	ff 75 0c             	pushl  0xc(%ebp)
f010ac26:	ff 75 08             	pushl  0x8(%ebp)
f010ac29:	e8 63 23 00 00       	call   f010cf91 <getSizeOfSharedObject>
f010ac2e:	83 c4 10             	add    $0x10,%esp
}
f010ac31:	c9                   	leave  
f010ac32:	c3                   	ret    

f010ac33 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010ac33:	55                   	push   %ebp
f010ac34:	89 e5                	mov    %esp,%ebp
f010ac36:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010ac39:	83 ec 04             	sub    $0x4,%esp
f010ac3c:	ff 75 10             	pushl  0x10(%ebp)
f010ac3f:	ff 75 0c             	pushl  0xc(%ebp)
f010ac42:	ff 75 08             	pushl  0x8(%ebp)
f010ac45:	e8 64 23 00 00       	call   f010cfae <getSharedObject>
f010ac4a:	83 c4 10             	add    $0x10,%esp
}
f010ac4d:	c9                   	leave  
f010ac4e:	c3                   	ret    

f010ac4f <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010ac4f:	55                   	push   %ebp
f010ac50:	89 e5                	mov    %esp,%ebp
f010ac52:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010ac55:	83 ec 08             	sub    $0x8,%esp
f010ac58:	ff 75 0c             	pushl  0xc(%ebp)
f010ac5b:	ff 75 08             	pushl  0x8(%ebp)
f010ac5e:	e8 68 23 00 00       	call   f010cfcb <freeSharedObject>
f010ac63:	83 c4 10             	add    $0x10,%esp
}
f010ac66:	c9                   	leave  
f010ac67:	c3                   	ret    

f010ac68 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ac68:	55                   	push   %ebp
f010ac69:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ac6b:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010ac70:	5d                   	pop    %ebp
f010ac71:	c3                   	ret    

f010ac72 <sys_create_env>:

//=========
//New update in 2020
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010ac72:	55                   	push   %ebp
f010ac73:	89 e5                	mov    %esp,%ebp
f010ac75:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010ac78:	ff 75 14             	pushl  0x14(%ebp)
f010ac7b:	ff 75 10             	pushl  0x10(%ebp)
f010ac7e:	ff 75 0c             	pushl  0xc(%ebp)
f010ac81:	ff 75 08             	pushl  0x8(%ebp)
f010ac84:	e8 f9 ad ff ff       	call   f0105a82 <env_create>
f010ac89:	83 c4 10             	add    $0x10,%esp
f010ac8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010ac8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ac93:	75 07                	jne    f010ac9c <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ac95:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ac9a:	eb 14                	jmp    f010acb0 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ac9c:	83 ec 0c             	sub    $0xc,%esp
f010ac9f:	ff 75 f4             	pushl  -0xc(%ebp)
f010aca2:	e8 8c ef ff ff       	call   f0109c33 <sched_new_env>
f010aca7:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010acaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010acad:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010acb0:	c9                   	leave  
f010acb1:	c3                   	ret    

f010acb2 <sys_run_env>:

void sys_run_env(int32 envId)
{
f010acb2:	55                   	push   %ebp
f010acb3:	89 e5                	mov    %esp,%ebp
f010acb5:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010acb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010acbb:	83 ec 0c             	sub    $0xc,%esp
f010acbe:	50                   	push   %eax
f010acbf:	e8 86 ef ff ff       	call   f0109c4a <sched_run_env>
f010acc4:	83 c4 10             	add    $0x10,%esp
}
f010acc7:	90                   	nop
f010acc8:	c9                   	leave  
f010acc9:	c3                   	ret    

f010acca <sys_free_env>:

void sys_free_env(int32 envId)
{
f010acca:	55                   	push   %ebp
f010accb:	89 e5                	mov    %esp,%ebp
f010accd:	83 ec 08             	sub    $0x8,%esp
	//2015
	sched_kill_env(envId);
f010acd0:	8b 45 08             	mov    0x8(%ebp),%eax
f010acd3:	83 ec 0c             	sub    $0xc,%esp
f010acd6:	50                   	push   %eax
f010acd7:	e8 a6 f3 ff ff       	call   f010a082 <sched_kill_env>
f010acdc:	83 c4 10             	add    $0x10,%esp
}
f010acdf:	90                   	nop
f010ace0:	c9                   	leave  
f010ace1:	c3                   	ret    

f010ace2 <sys_get_virtual_time>:

struct uint64 sys_get_virtual_time()
{
f010ace2:	55                   	push   %ebp
f010ace3:	89 e5                	mov    %esp,%ebp
f010ace5:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ace8:	0f 31                	rdtsc  
f010acea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010aced:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010acf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010acf3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010acf6:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010acf9:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010acfc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010acff:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ad02:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ad05:	89 01                	mov    %eax,(%ecx)
f010ad07:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ad0a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad0d:	c9                   	leave  
f010ad0e:	c2 04 00             	ret    $0x4

f010ad11 <sys_moveMem>:

//2014
void sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010ad11:	55                   	push   %ebp
f010ad12:	89 e5                	mov    %esp,%ebp
f010ad14:	83 ec 08             	sub    $0x8,%esp
	moveMem(curenv, src_virtual_address, dst_virtual_address, size);
f010ad17:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010ad1c:	ff 75 10             	pushl  0x10(%ebp)
f010ad1f:	ff 75 0c             	pushl  0xc(%ebp)
f010ad22:	ff 75 08             	pushl  0x8(%ebp)
f010ad25:	50                   	push   %eax
f010ad26:	e8 79 97 ff ff       	call   f01044a4 <moveMem>
f010ad2b:	83 c4 10             	add    $0x10,%esp
	return;
f010ad2e:	90                   	nop
}
f010ad2f:	c9                   	leave  
f010ad30:	c3                   	ret    

f010ad31 <sys_rcr2>:
uint32 sys_rcr2()
{
f010ad31:	55                   	push   %ebp
f010ad32:	89 e5                	mov    %esp,%ebp
f010ad34:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010ad37:	0f 20 d0             	mov    %cr2,%eax
f010ad3a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010ad3d:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010ad40:	90                   	nop
}
f010ad41:	c9                   	leave  
f010ad42:	c3                   	ret    

f010ad43 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010ad43:	55                   	push   %ebp
f010ad44:	89 e5                	mov    %esp,%ebp
f010ad46:	83 ec 04             	sub    $0x4,%esp
f010ad49:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad4c:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010ad4f:	8a 45 fc             	mov    -0x4(%ebp),%al
f010ad52:	a2 60 58 32 f0       	mov    %al,0xf0325860
}
f010ad57:	90                   	nop
f010ad58:	c9                   	leave  
f010ad59:	c3                   	ret    

f010ad5a <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010ad5a:	55                   	push   %ebp
f010ad5b:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010ad5d:	c7 05 30 12 3b f0 00 	movl   $0x0,0xf03b1230
f010ad64:	00 00 00 
}
f010ad67:	90                   	nop
f010ad68:	5d                   	pop    %ebp
f010ad69:	c3                   	ret    

f010ad6a <inctst>:
void inctst()
{
f010ad6a:	55                   	push   %ebp
f010ad6b:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010ad6d:	a1 30 12 3b f0       	mov    0xf03b1230,%eax
f010ad72:	40                   	inc    %eax
f010ad73:	a3 30 12 3b f0       	mov    %eax,0xf03b1230
}
f010ad78:	90                   	nop
f010ad79:	5d                   	pop    %ebp
f010ad7a:	c3                   	ret    

f010ad7b <gettst>:
uint32 gettst()
{
f010ad7b:	55                   	push   %ebp
f010ad7c:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010ad7e:	a1 30 12 3b f0       	mov    0xf03b1230,%eax
}
f010ad83:	5d                   	pop    %ebp
f010ad84:	c3                   	ret    

f010ad85 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010ad85:	55                   	push   %ebp
f010ad86:	89 e5                	mov    %esp,%ebp
f010ad88:	83 ec 28             	sub    $0x28,%esp
f010ad8b:	8b 45 14             	mov    0x14(%ebp),%eax
f010ad8e:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010ad91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010ad98:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010ad9c:	83 f8 65             	cmp    $0x65,%eax
f010ad9f:	74 5d                	je     f010adfe <tst+0x79>
f010ada1:	83 f8 65             	cmp    $0x65,%eax
f010ada4:	7f 0a                	jg     f010adb0 <tst+0x2b>
f010ada6:	83 f8 62             	cmp    $0x62,%eax
f010ada9:	74 73                	je     f010ae1e <tst+0x99>
f010adab:	e9 91 00 00 00       	jmp    f010ae41 <tst+0xbc>
f010adb0:	83 f8 67             	cmp    $0x67,%eax
f010adb3:	74 29                	je     f010adde <tst+0x59>
f010adb5:	83 f8 6c             	cmp    $0x6c,%eax
f010adb8:	0f 85 83 00 00 00    	jne    f010ae41 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010adbe:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010adc4:	73 09                	jae    f010adcf <tst+0x4a>
			chk = 1;
f010adc6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010adcd:	eb 68                	jmp    f010ae37 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010adcf:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010add3:	74 62                	je     f010ae37 <tst+0xb2>
			chk = 1;
f010add5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010addc:	eb 59                	jmp    f010ae37 <tst+0xb2>
	case 'g':
		if (n > v1)
f010adde:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ade4:	76 09                	jbe    f010adef <tst+0x6a>
			chk = 1;
f010ade6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010aded:	eb 4b                	jmp    f010ae3a <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010adef:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010adf3:	74 45                	je     f010ae3a <tst+0xb5>
			chk = 1;
f010adf5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010adfc:	eb 3c                	jmp    f010ae3a <tst+0xb5>
	case 'e':
		if (n == v1)
f010adfe:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae01:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ae04:	75 09                	jne    f010ae0f <tst+0x8a>
			chk = 1;
f010ae06:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ae0d:	eb 2e                	jmp    f010ae3d <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010ae0f:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ae13:	74 28                	je     f010ae3d <tst+0xb8>
			chk = 1;
f010ae15:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ae1c:	eb 1f                	jmp    f010ae3d <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010ae1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae21:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ae24:	72 1a                	jb     f010ae40 <tst+0xbb>
f010ae26:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae29:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ae2c:	77 12                	ja     f010ae40 <tst+0xbb>
			chk = 1;
f010ae2e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ae35:	eb 09                	jmp    f010ae40 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ae37:	90                   	nop
f010ae38:	eb 07                	jmp    f010ae41 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ae3a:	90                   	nop
f010ae3b:	eb 04                	jmp    f010ae41 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010ae3d:	90                   	nop
f010ae3e:	eb 01                	jmp    f010ae41 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010ae40:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010ae41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ae45:	75 17                	jne    f010ae5e <tst+0xd9>
f010ae47:	83 ec 04             	sub    $0x4,%esp
f010ae4a:	68 42 de 11 f0       	push   $0xf011de42
f010ae4f:	68 d8 01 00 00       	push   $0x1d8
f010ae54:	68 bb dd 11 f0       	push   $0xf011ddbb
f010ae59:	e8 35 53 ff ff       	call   f0100193 <_panic>
	tstcnt++ ;
f010ae5e:	a1 30 12 3b f0       	mov    0xf03b1230,%eax
f010ae63:	40                   	inc    %eax
f010ae64:	a3 30 12 3b f0       	mov    %eax,0xf03b1230
	return;
f010ae69:	90                   	nop
}
f010ae6a:	c9                   	leave  
f010ae6b:	c3                   	ret    

f010ae6c <chktst>:

void chktst(uint32 n)
{
f010ae6c:	55                   	push   %ebp
f010ae6d:	89 e5                	mov    %esp,%ebp
f010ae6f:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010ae72:	a1 30 12 3b f0       	mov    0xf03b1230,%eax
f010ae77:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ae7a:	75 12                	jne    f010ae8e <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010ae7c:	83 ec 0c             	sub    $0xc,%esp
f010ae7f:	68 58 de 11 f0       	push   $0xf011de58
f010ae84:	e8 1a c7 ff ff       	call   f01075a3 <cprintf>
f010ae89:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010ae8c:	eb 17                	jmp    f010aea5 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010ae8e:	83 ec 04             	sub    $0x4,%esp
f010ae91:	68 84 de 11 f0       	push   $0xf011de84
f010ae96:	68 e2 01 00 00       	push   $0x1e2
f010ae9b:	68 bb dd 11 f0       	push   $0xf011ddbb
f010aea0:	e8 ee 52 ff ff       	call   f0100193 <_panic>
}
f010aea5:	c9                   	leave  
f010aea6:	c3                   	ret    

f010aea7 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010aea7:	55                   	push   %ebp
f010aea8:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010aeaa:	a1 bc 2c 39 f0       	mov    0xf0392cbc,%eax
}
f010aeaf:	5d                   	pop    %ebp
f010aeb0:	c3                   	ret    

f010aeb1 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010aeb1:	55                   	push   %ebp
f010aeb2:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010aeb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb7:	a3 bc 2c 39 f0       	mov    %eax,0xf0392cbc
}
f010aebc:	90                   	nop
f010aebd:	5d                   	pop    %ebp
f010aebe:	c3                   	ret    

f010aebf <sys_check_LRU_lists>:

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010aebf:	55                   	push   %ebp
f010aec0:	89 e5                	mov    %esp,%ebp
f010aec2:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010aec5:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010aeca:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010aecd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010aed4:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010aedb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aedf:	0f 84 a5 00 00 00    	je     f010af8a <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010aee5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010aeec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010aeef:	8b 80 50 ef 00 00    	mov    0xef50(%eax),%eax
f010aef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aef8:	eb 4a                	jmp    f010af44 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010aefa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aefd:	8b 00                	mov    (%eax),%eax
f010aeff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010af02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010af05:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010af0a:	89 c2                	mov    %eax,%edx
f010af0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010af0f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010af16:	8b 45 08             	mov    0x8(%ebp),%eax
f010af19:	01 c8                	add    %ecx,%eax
f010af1b:	8b 00                	mov    (%eax),%eax
f010af1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010af20:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010af23:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010af28:	39 c2                	cmp    %eax,%edx
f010af2a:	74 09                	je     f010af35 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010af2c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010af33:	eb 3e                	jmp    f010af73 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010af35:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010af38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010af3b:	8b 80 58 ef 00 00    	mov    0xef58(%eax),%eax
f010af41:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010af44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af48:	74 08                	je     f010af52 <sys_check_LRU_lists+0x93>
f010af4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010af4d:	8b 40 0c             	mov    0xc(%eax),%eax
f010af50:	eb 05                	jmp    f010af57 <sys_check_LRU_lists+0x98>
f010af52:	b8 00 00 00 00       	mov    $0x0,%eax
f010af57:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010af5a:	89 82 58 ef 00 00    	mov    %eax,0xef58(%edx)
f010af60:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010af63:	8b 80 58 ef 00 00    	mov    0xef58(%eax),%eax
f010af69:	85 c0                	test   %eax,%eax
f010af6b:	75 8d                	jne    f010aefa <sys_check_LRU_lists+0x3b>
f010af6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af71:	75 87                	jne    f010aefa <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010af73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010af76:	8b 90 5c ef 00 00    	mov    0xef5c(%eax),%edx
f010af7c:	8b 45 10             	mov    0x10(%ebp),%eax
f010af7f:	39 c2                	cmp    %eax,%edx
f010af81:	74 07                	je     f010af8a <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010af83:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010af8a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010af8e:	0f 84 a5 00 00 00    	je     f010b039 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010af94:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010af9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010af9e:	8b 80 60 ef 00 00    	mov    0xef60(%eax),%eax
f010afa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010afa7:	eb 4a                	jmp    f010aff3 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010afa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010afac:	8b 00                	mov    (%eax),%eax
f010afae:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010afb1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010afb4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010afb9:	89 c2                	mov    %eax,%edx
f010afbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010afbe:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010afc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afc8:	01 c8                	add    %ecx,%eax
f010afca:	8b 00                	mov    (%eax),%eax
f010afcc:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010afcf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010afd2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010afd7:	39 c2                	cmp    %eax,%edx
f010afd9:	74 09                	je     f010afe4 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010afdb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010afe2:	eb 3e                	jmp    f010b022 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010afe4:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010afe7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010afea:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f010aff0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010aff3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aff7:	74 08                	je     f010b001 <sys_check_LRU_lists+0x142>
f010aff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010affc:	8b 40 0c             	mov    0xc(%eax),%eax
f010afff:	eb 05                	jmp    f010b006 <sys_check_LRU_lists+0x147>
f010b001:	b8 00 00 00 00       	mov    $0x0,%eax
f010b006:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b009:	89 82 68 ef 00 00    	mov    %eax,0xef68(%edx)
f010b00f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b012:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f010b018:	85 c0                	test   %eax,%eax
f010b01a:	75 8d                	jne    f010afa9 <sys_check_LRU_lists+0xea>
f010b01c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b020:	75 87                	jne    f010afa9 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010b022:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b025:	8b 90 6c ef 00 00    	mov    0xef6c(%eax),%edx
f010b02b:	8b 45 14             	mov    0x14(%ebp),%eax
f010b02e:	39 c2                	cmp    %eax,%edx
f010b030:	74 07                	je     f010b039 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010b032:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010b039:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b03c:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010b03f:	c9                   	leave  
f010b040:	c3                   	ret    

f010b041 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010b041:	55                   	push   %ebp
f010b042:	89 e5                	mov    %esp,%ebp
f010b044:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010b047:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010b04c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010b04f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010b056:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b059:	8b 80 50 ef 00 00    	mov    0xef50(%eax),%eax
f010b05f:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b062:	eb 65                	jmp    f010b0c9 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010b064:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b06b:	eb 3a                	jmp    f010b0a7 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010b06d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010b070:	8b 00                	mov    (%eax),%eax
f010b072:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010b075:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b078:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b07d:	89 c2                	mov    %eax,%edx
f010b07f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b082:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b089:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08c:	01 c8                	add    %ecx,%eax
f010b08e:	8b 00                	mov    (%eax),%eax
f010b090:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010b093:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b096:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b09b:	39 c2                	cmp    %eax,%edx
f010b09d:	75 05                	jne    f010b0a4 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010b09f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010b0a2:	eb 0b                	jmp    f010b0af <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010b0a4:	ff 45 f4             	incl   -0xc(%ebp)
f010b0a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b0aa:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010b0ad:	7c be                	jl     f010b06d <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010b0af:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010b0b3:	7e 08                	jle    f010b0bd <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010b0b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b0b8:	e9 ed 00 00 00       	jmp    f010b1aa <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010b0bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0c0:	8b 80 58 ef 00 00    	mov    0xef58(%eax),%eax
f010b0c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b0c9:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010b0cd:	74 08                	je     f010b0d7 <sys_check_LRU_lists_free+0x96>
f010b0cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010b0d2:	8b 40 0c             	mov    0xc(%eax),%eax
f010b0d5:	eb 05                	jmp    f010b0dc <sys_check_LRU_lists_free+0x9b>
f010b0d7:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b0df:	89 82 58 ef 00 00    	mov    %eax,0xef58(%edx)
f010b0e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b0e8:	8b 80 58 ef 00 00    	mov    0xef58(%eax),%eax
f010b0ee:	85 c0                	test   %eax,%eax
f010b0f0:	0f 85 6e ff ff ff    	jne    f010b064 <sys_check_LRU_lists_free+0x23>
f010b0f6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010b0fa:	0f 85 64 ff ff ff    	jne    f010b064 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010b100:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b103:	8b 80 60 ef 00 00    	mov    0xef60(%eax),%eax
f010b109:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b10c:	eb 62                	jmp    f010b170 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010b10e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b115:	eb 3a                	jmp    f010b151 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010b117:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010b11a:	8b 00                	mov    (%eax),%eax
f010b11c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b11f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b122:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b127:	89 c2                	mov    %eax,%edx
f010b129:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b12c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b133:	8b 45 08             	mov    0x8(%ebp),%eax
f010b136:	01 c8                	add    %ecx,%eax
f010b138:	8b 00                	mov    (%eax),%eax
f010b13a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010b13d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b140:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b145:	39 c2                	cmp    %eax,%edx
f010b147:	75 05                	jne    f010b14e <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010b149:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010b14c:	eb 0b                	jmp    f010b159 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010b14e:	ff 45 f0             	incl   -0x10(%ebp)
f010b151:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b154:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010b157:	7c be                	jl     f010b117 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010b159:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010b15d:	7e 05                	jle    f010b164 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010b15f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b162:	eb 46                	jmp    f010b1aa <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010b164:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b167:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f010b16d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b170:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010b174:	74 08                	je     f010b17e <sys_check_LRU_lists_free+0x13d>
f010b176:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010b179:	8b 40 0c             	mov    0xc(%eax),%eax
f010b17c:	eb 05                	jmp    f010b183 <sys_check_LRU_lists_free+0x142>
f010b17e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b183:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b186:	89 82 68 ef 00 00    	mov    %eax,0xef68(%edx)
f010b18c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b18f:	8b 80 68 ef 00 00    	mov    0xef68(%eax),%eax
f010b195:	85 c0                	test   %eax,%eax
f010b197:	0f 85 71 ff ff ff    	jne    f010b10e <sys_check_LRU_lists_free+0xcd>
f010b19d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010b1a1:	0f 85 67 ff ff ff    	jne    f010b10e <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010b1a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010b1aa:	c9                   	leave  
f010b1ab:	c3                   	ret    

f010b1ac <syscall>:


// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010b1ac:	55                   	push   %ebp
f010b1ad:	89 e5                	mov    %esp,%ebp
f010b1af:	56                   	push   %esi
f010b1b0:	53                   	push   %ebx
f010b1b1:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010b1b4:	83 7d 08 31          	cmpl   $0x31,0x8(%ebp)
f010b1b8:	0f 87 3f 04 00 00    	ja     f010b5fd <syscall+0x451>
f010b1be:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c1:	c1 e0 02             	shl    $0x2,%eax
f010b1c4:	05 a0 de 11 f0       	add    $0xf011dea0,%eax
f010b1c9:	8b 00                	mov    (%eax),%eax
f010b1cb:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010b1cd:	8b 45 14             	mov    0x14(%ebp),%eax
f010b1d0:	0f b6 d0             	movzbl %al,%edx
f010b1d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1d6:	83 ec 04             	sub    $0x4,%esp
f010b1d9:	52                   	push   %edx
f010b1da:	ff 75 10             	pushl  0x10(%ebp)
f010b1dd:	50                   	push   %eax
f010b1de:	e8 e4 f4 ff ff       	call   f010a6c7 <sys_cputs>
f010b1e3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b1e6:	b8 00 00 00 00       	mov    $0x0,%eax
f010b1eb:	e9 12 04 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010b1f0:	e8 47 f5 ff ff       	call   f010a73c <sys_cgetc>
f010b1f5:	e9 08 04 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010b1fa:	e8 5d f5 ff ff       	call   f010a75c <sys_getenvindex>
f010b1ff:	e9 fe 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010b204:	e8 46 f5 ff ff       	call   f010a74f <sys_getenvid>
f010b209:	e9 f4 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010b20e:	e8 a9 f5 ff ff       	call   f010a7bc <sys_getparentenvid>
f010b213:	e9 ea 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_env_destroy:
		return sys_env_destroy(a1);
f010b218:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b21b:	83 ec 0c             	sub    $0xc,%esp
f010b21e:	50                   	push   %eax
f010b21f:	e8 a5 f5 ff ff       	call   f010a7c9 <sys_env_destroy>
f010b224:	83 c4 10             	add    $0x10,%esp
f010b227:	e9 d6 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_env_exit:
		sys_env_exit();
f010b22c:	e8 20 f6 ff ff       	call   f010a851 <sys_env_exit>
		return 0;
f010b231:	b8 00 00 00 00       	mov    $0x0,%eax
f010b236:	e9 c7 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010b23b:	83 ec 08             	sub    $0x8,%esp
f010b23e:	ff 75 10             	pushl  0x10(%ebp)
f010b241:	ff 75 0c             	pushl  0xc(%ebp)
f010b244:	e8 4f f7 ff ff       	call   f010a998 <sys_calculate_required_frames>
f010b249:	83 c4 10             	add    $0x10,%esp
f010b24c:	e9 b1 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010b251:	e8 64 f7 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010b256:	e9 a7 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010b25b:	e8 79 f7 ff ff       	call   f010a9d9 <sys_calculate_modified_frames>
f010b260:	e9 9d 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010b265:	e8 89 f7 ff ff       	call   f010a9f3 <sys_calculate_notmod_frames>
f010b26a:	e9 93 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010b26f:	e8 99 f7 ff ff       	call   f010aa0d <sys_pf_calculate_allocated_pages>
f010b274:	e9 89 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010b279:	83 ec 0c             	sub    $0xc,%esp
f010b27c:	ff 75 0c             	pushl  0xc(%ebp)
f010b27f:	e8 a2 f7 ff ff       	call   f010aa26 <sys_calculate_pages_tobe_removed_ready_exit>
f010b284:	83 c4 10             	add    $0x10,%esp
f010b287:	e9 76 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010b28c:	e8 ab f7 ff ff       	call   f010aa3c <sys_scarce_memory>
		return 0;
f010b291:	b8 00 00 00 00       	mov    $0x0,%eax
f010b296:	e9 67 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_freeMem:
		sys_freeMem(a1, a2);
f010b29b:	83 ec 08             	sub    $0x8,%esp
f010b29e:	ff 75 10             	pushl  0x10(%ebp)
f010b2a1:	ff 75 0c             	pushl  0xc(%ebp)
f010b2a4:	e8 a1 f7 ff ff       	call   f010aa4a <sys_freeMem>
f010b2a9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b2ac:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2b1:	e9 4c 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010b2b6:	8b 55 10             	mov    0x10(%ebp),%edx
f010b2b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2bc:	83 ec 08             	sub    $0x8,%esp
f010b2bf:	52                   	push   %edx
f010b2c0:	50                   	push   %eax
f010b2c1:	e8 99 f5 ff ff       	call   f010a85f <__sys_allocate_page>
f010b2c6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b2c9:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2ce:	e9 2f 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010b2d3:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010b2d6:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010b2d9:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010b2dc:	8b 55 10             	mov    0x10(%ebp),%edx
f010b2df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2e2:	83 ec 0c             	sub    $0xc,%esp
f010b2e5:	56                   	push   %esi
f010b2e6:	53                   	push   %ebx
f010b2e7:	51                   	push   %ecx
f010b2e8:	52                   	push   %edx
f010b2e9:	50                   	push   %eax
f010b2ea:	e8 6f f6 ff ff       	call   f010a95e <__sys_map_frame>
f010b2ef:	83 c4 20             	add    $0x20,%esp
		return 0;
f010b2f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2f7:	e9 06 03 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010b2fc:	8b 55 10             	mov    0x10(%ebp),%edx
f010b2ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b302:	83 ec 08             	sub    $0x8,%esp
f010b305:	52                   	push   %edx
f010b306:	50                   	push   %eax
f010b307:	e8 6f f6 ff ff       	call   f010a97b <__sys_unmap_frame>
f010b30c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b30f:	b8 00 00 00 00       	mov    $0x0,%eax
f010b314:	e9 e9 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_allocateMem:
		//LOG_STATMENT(cprintf("KERNEL syscall: a2 %x\n", a2));
		sys_allocateMem(a1, (uint32)a2);
f010b319:	83 ec 08             	sub    $0x8,%esp
f010b31c:	ff 75 10             	pushl  0x10(%ebp)
f010b31f:	ff 75 0c             	pushl  0xc(%ebp)
f010b322:	e8 65 f7 ff ff       	call   f010aa8c <sys_allocateMem>
f010b327:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b32a:	b8 00 00 00 00       	mov    $0x0,%eax
f010b32f:	e9 ce 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010b334:	e8 93 f7 ff ff       	call   f010aacc <sys_disable_interrupt>
		return 0;
f010b339:	b8 00 00 00 00       	mov    $0x0,%eax
f010b33e:	e9 bf 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010b343:	e8 9e f7 ff ff       	call   f010aae6 <sys_enable_interrupt>
		return 0;
f010b348:	b8 00 00 00 00       	mov    $0x0,%eax
f010b34d:	e9 b0 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010b352:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b355:	0f be c0             	movsbl %al,%eax
f010b358:	83 ec 0c             	sub    $0xc,%esp
f010b35b:	50                   	push   %eax
f010b35c:	e8 b7 f3 ff ff       	call   f010a718 <sys_cputc>
f010b361:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b364:	b8 00 00 00 00       	mov    $0x0,%eax
f010b369:	e9 94 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010b36e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b371:	0f be c0             	movsbl %al,%eax
f010b374:	83 ec 0c             	sub    $0xc,%esp
f010b377:	50                   	push   %eax
f010b378:	e8 83 f7 ff ff       	call   f010ab00 <sys_clearFFL>
f010b37d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b380:	b8 00 00 00 00       	mov    $0x0,%eax
f010b385:	e9 78 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010b38a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b38d:	83 ec 08             	sub    $0x8,%esp
f010b390:	ff 75 10             	pushl  0x10(%ebp)
f010b393:	50                   	push   %eax
f010b394:	e8 9b f7 ff ff       	call   f010ab34 <sys_createSemaphore>
f010b399:	83 c4 10             	add    $0x10,%esp
f010b39c:	e9 61 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010b3a1:	8b 55 10             	mov    0x10(%ebp),%edx
f010b3a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3a7:	83 ec 08             	sub    $0x8,%esp
f010b3aa:	52                   	push   %edx
f010b3ab:	50                   	push   %eax
f010b3ac:	e8 a5 f7 ff ff       	call   f010ab56 <sys_waitSemaphore>
f010b3b1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b3b4:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3b9:	e9 44 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010b3be:	8b 55 10             	mov    0x10(%ebp),%edx
f010b3c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3c4:	83 ec 08             	sub    $0x8,%esp
f010b3c7:	52                   	push   %edx
f010b3c8:	50                   	push   %eax
f010b3c9:	e8 a2 f7 ff ff       	call   f010ab70 <sys_signalSemaphore>
f010b3ce:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b3d1:	b8 00 00 00 00       	mov    $0x0,%eax
f010b3d6:	e9 27 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010b3db:	8b 55 10             	mov    0x10(%ebp),%edx
f010b3de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3e1:	83 ec 08             	sub    $0x8,%esp
f010b3e4:	52                   	push   %edx
f010b3e5:	50                   	push   %eax
f010b3e6:	e8 9f f7 ff ff       	call   f010ab8a <sys_getSemaphoreValue>
f010b3eb:	83 c4 10             	add    $0x10,%esp
f010b3ee:	e9 0f 02 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010b3f3:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010b3f6:	8b 45 14             	mov    0x14(%ebp),%eax
f010b3f9:	0f b6 d0             	movzbl %al,%edx
f010b3fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3ff:	51                   	push   %ecx
f010b400:	52                   	push   %edx
f010b401:	ff 75 10             	pushl  0x10(%ebp)
f010b404:	50                   	push   %eax
f010b405:	e8 e0 f7 ff ff       	call   f010abea <sys_createSharedObject>
f010b40a:	83 c4 10             	add    $0x10,%esp
f010b40d:	e9 f0 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010b412:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010b415:	8b 55 10             	mov    0x10(%ebp),%edx
f010b418:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b41b:	83 ec 04             	sub    $0x4,%esp
f010b41e:	51                   	push   %ecx
f010b41f:	52                   	push   %edx
f010b420:	50                   	push   %eax
f010b421:	e8 0d f8 ff ff       	call   f010ac33 <sys_getSharedObject>
f010b426:	83 c4 10             	add    $0x10,%esp
f010b429:	e9 d4 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010b42e:	8b 55 10             	mov    0x10(%ebp),%edx
f010b431:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b434:	83 ec 08             	sub    $0x8,%esp
f010b437:	52                   	push   %edx
f010b438:	50                   	push   %eax
f010b439:	e8 11 f8 ff ff       	call   f010ac4f <sys_freeSharedObject>
f010b43e:	83 c4 10             	add    $0x10,%esp
f010b441:	e9 bc 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010b446:	8b 55 10             	mov    0x10(%ebp),%edx
f010b449:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b44c:	83 ec 08             	sub    $0x8,%esp
f010b44f:	52                   	push   %edx
f010b450:	50                   	push   %eax
f010b451:	e8 c4 f7 ff ff       	call   f010ac1a <sys_getSizeOfSharedObject>
f010b456:	83 c4 10             	add    $0x10,%esp
f010b459:	e9 a4 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010b45e:	e8 05 f8 ff ff       	call   f010ac68 <sys_getMaxShares>
f010b463:	e9 9a 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010b468:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b46b:	ff 75 18             	pushl  0x18(%ebp)
f010b46e:	ff 75 14             	pushl  0x14(%ebp)
f010b471:	ff 75 10             	pushl  0x10(%ebp)
f010b474:	50                   	push   %eax
f010b475:	e8 f8 f7 ff ff       	call   f010ac72 <sys_create_env>
f010b47a:	83 c4 10             	add    $0x10,%esp
f010b47d:	e9 80 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_free_env:
		sys_free_env((int32)a1);
f010b482:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b485:	83 ec 0c             	sub    $0xc,%esp
f010b488:	50                   	push   %eax
f010b489:	e8 3c f8 ff ff       	call   f010acca <sys_free_env>
f010b48e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b491:	b8 00 00 00 00       	mov    $0x0,%eax
f010b496:	e9 67 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010b49b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b49e:	83 ec 0c             	sub    $0xc,%esp
f010b4a1:	50                   	push   %eax
f010b4a2:	e8 0b f8 ff ff       	call   f010acb2 <sys_run_env>
f010b4a7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b4aa:	b8 00 00 00 00       	mov    $0x0,%eax
f010b4af:	e9 4e 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;

	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010b4b4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010b4b7:	83 ec 0c             	sub    $0xc,%esp
f010b4ba:	50                   	push   %eax
f010b4bb:	e8 22 f8 ff ff       	call   f010ace2 <sys_get_virtual_time>
f010b4c0:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010b4c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010b4c9:	8b 45 10             	mov    0x10(%ebp),%eax
f010b4cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010b4cf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b4d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4d5:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010b4d7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b4da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b4dd:	89 10                	mov    %edx,(%eax)
		return 0;
f010b4df:	b8 00 00 00 00       	mov    $0x0,%eax
f010b4e4:	e9 19 01 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	}
	case SYS_moveMem:
		sys_moveMem(a1, a2, a3);
f010b4e9:	83 ec 04             	sub    $0x4,%esp
f010b4ec:	ff 75 14             	pushl  0x14(%ebp)
f010b4ef:	ff 75 10             	pushl  0x10(%ebp)
f010b4f2:	ff 75 0c             	pushl  0xc(%ebp)
f010b4f5:	e8 17 f8 ff ff       	call   f010ad11 <sys_moveMem>
f010b4fa:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b4fd:	b8 00 00 00 00       	mov    $0x0,%eax
f010b502:	e9 fb 00 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010b507:	e8 25 f8 ff ff       	call   f010ad31 <sys_rcr2>
f010b50c:	e9 f1 00 00 00       	jmp    f010b602 <syscall+0x456>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010b511:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b514:	0f b6 c0             	movzbl %al,%eax
f010b517:	83 ec 0c             	sub    $0xc,%esp
f010b51a:	50                   	push   %eax
f010b51b:	e8 23 f8 ff ff       	call   f010ad43 <sys_bypassPageFault>
f010b520:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b523:	b8 00 00 00 00       	mov    $0x0,%eax
f010b528:	e9 d5 00 00 00       	jmp    f010b602 <syscall+0x456>

	case SYS_rsttst:
		rsttst();
f010b52d:	e8 28 f8 ff ff       	call   f010ad5a <rsttst>
		return 0;
f010b532:	b8 00 00 00 00       	mov    $0x0,%eax
f010b537:	e9 c6 00 00 00       	jmp    f010b602 <syscall+0x456>
	case SYS_inctst:
		inctst();
f010b53c:	e8 29 f8 ff ff       	call   f010ad6a <inctst>
		return 0;
f010b541:	b8 00 00 00 00       	mov    $0x0,%eax
f010b546:	e9 b7 00 00 00       	jmp    f010b602 <syscall+0x456>
	case SYS_chktst:
		chktst(a1);
f010b54b:	83 ec 0c             	sub    $0xc,%esp
f010b54e:	ff 75 0c             	pushl  0xc(%ebp)
f010b551:	e8 16 f9 ff ff       	call   f010ae6c <chktst>
f010b556:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b559:	b8 00 00 00 00       	mov    $0x0,%eax
f010b55e:	e9 9f 00 00 00       	jmp    f010b602 <syscall+0x456>
	case SYS_gettst:
		return gettst();
f010b563:	e8 13 f8 ff ff       	call   f010ad7b <gettst>
f010b568:	e9 95 00 00 00       	jmp    f010b602 <syscall+0x456>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010b56d:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010b570:	8b 45 18             	mov    0x18(%ebp),%eax
f010b573:	0f be c0             	movsbl %al,%eax
f010b576:	83 ec 0c             	sub    $0xc,%esp
f010b579:	52                   	push   %edx
f010b57a:	50                   	push   %eax
f010b57b:	ff 75 14             	pushl  0x14(%ebp)
f010b57e:	ff 75 10             	pushl  0x10(%ebp)
f010b581:	ff 75 0c             	pushl  0xc(%ebp)
f010b584:	e8 fc f7 ff ff       	call   f010ad85 <tst>
f010b589:	83 c4 20             	add    $0x20,%esp
		return 0;
f010b58c:	b8 00 00 00 00       	mov    $0x0,%eax
f010b591:	eb 6f                	jmp    f010b602 <syscall+0x456>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010b593:	e8 0f f9 ff ff       	call   f010aea7 <sys_get_heap_strategy>
f010b598:	eb 68                	jmp    f010b602 <syscall+0x456>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010b59a:	83 ec 0c             	sub    $0xc,%esp
f010b59d:	ff 75 0c             	pushl  0xc(%ebp)
f010b5a0:	e8 0c f9 ff ff       	call   f010aeb1 <sys_set_uheap_strategy>
f010b5a5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b5a8:	b8 00 00 00 00       	mov    $0x0,%eax
f010b5ad:	eb 53                	jmp    f010b602 <syscall+0x456>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010b5af:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010b5b2:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010b5b5:	8b 55 10             	mov    0x10(%ebp),%edx
f010b5b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b5bb:	53                   	push   %ebx
f010b5bc:	51                   	push   %ecx
f010b5bd:	52                   	push   %edx
f010b5be:	50                   	push   %eax
f010b5bf:	e8 fb f8 ff ff       	call   f010aebf <sys_check_LRU_lists>
f010b5c4:	83 c4 10             	add    $0x10,%esp
f010b5c7:	eb 39                	jmp    f010b602 <syscall+0x456>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010b5c9:	8b 55 10             	mov    0x10(%ebp),%edx
f010b5cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b5cf:	83 ec 08             	sub    $0x8,%esp
f010b5d2:	52                   	push   %edx
f010b5d3:	50                   	push   %eax
f010b5d4:	e8 68 fa ff ff       	call   f010b041 <sys_check_LRU_lists_free>
f010b5d9:	83 c4 10             	add    $0x10,%esp
f010b5dc:	eb 24                	jmp    f010b602 <syscall+0x456>

	case SYS_new:
		sys_new(a1, (uint32)a2);
f010b5de:	83 ec 08             	sub    $0x8,%esp
f010b5e1:	ff 75 10             	pushl  0x10(%ebp)
f010b5e4:	ff 75 0c             	pushl  0xc(%ebp)
f010b5e7:	e8 c0 f4 ff ff       	call   f010aaac <sys_new>
f010b5ec:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b5ef:	b8 00 00 00 00       	mov    $0x0,%eax
f010b5f4:	eb 0c                	jmp    f010b602 <syscall+0x456>
		break;

	case NSYSCALLS:
		return 	-E_INVAL;
f010b5f6:	b8 03 00 00 00       	mov    $0x3,%eax
f010b5fb:	eb 05                	jmp    f010b602 <syscall+0x456>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010b5fd:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010b602:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010b605:	5b                   	pop    %ebx
f010b606:	5e                   	pop    %esi
f010b607:	5d                   	pop    %ebp
f010b608:	c3                   	ret    

f010b609 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010b609:	55                   	push   %ebp
f010b60a:	89 e5                	mov    %esp,%ebp
f010b60c:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010b60f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b612:	8b 00                	mov    (%eax),%eax
f010b614:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b617:	8b 45 10             	mov    0x10(%ebp),%eax
f010b61a:	8b 00                	mov    (%eax),%eax
f010b61c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b61f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	while (l <= r) {
f010b626:	e9 ca 00 00 00       	jmp    f010b6f5 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010b62b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b62e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010b631:	01 d0                	add    %edx,%eax
f010b633:	89 c2                	mov    %eax,%edx
f010b635:	c1 ea 1f             	shr    $0x1f,%edx
f010b638:	01 d0                	add    %edx,%eax
f010b63a:	d1 f8                	sar    %eax
f010b63c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010b63f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b642:	89 45 f0             	mov    %eax,-0x10(%ebp)
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010b645:	eb 03                	jmp    f010b64a <stab_binsearch+0x41>
			m--;
f010b647:	ff 4d f0             	decl   -0x10(%ebp)
	
	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010b64a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b64d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b650:	7c 1e                	jl     f010b670 <stab_binsearch+0x67>
f010b652:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b655:	89 d0                	mov    %edx,%eax
f010b657:	01 c0                	add    %eax,%eax
f010b659:	01 d0                	add    %edx,%eax
f010b65b:	c1 e0 02             	shl    $0x2,%eax
f010b65e:	89 c2                	mov    %eax,%edx
f010b660:	8b 45 08             	mov    0x8(%ebp),%eax
f010b663:	01 d0                	add    %edx,%eax
f010b665:	8a 40 04             	mov    0x4(%eax),%al
f010b668:	0f b6 c0             	movzbl %al,%eax
f010b66b:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b66e:	75 d7                	jne    f010b647 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010b670:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b673:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b676:	7d 09                	jge    f010b681 <stab_binsearch+0x78>
			l = true_m + 1;
f010b678:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b67b:	40                   	inc    %eax
f010b67c:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010b67f:	eb 74                	jmp    f010b6f5 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010b681:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010b688:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b68b:	89 d0                	mov    %edx,%eax
f010b68d:	01 c0                	add    %eax,%eax
f010b68f:	01 d0                	add    %edx,%eax
f010b691:	c1 e0 02             	shl    $0x2,%eax
f010b694:	89 c2                	mov    %eax,%edx
f010b696:	8b 45 08             	mov    0x8(%ebp),%eax
f010b699:	01 d0                	add    %edx,%eax
f010b69b:	8b 40 08             	mov    0x8(%eax),%eax
f010b69e:	3b 45 18             	cmp    0x18(%ebp),%eax
f010b6a1:	73 11                	jae    f010b6b4 <stab_binsearch+0xab>
			*region_left = m;
f010b6a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b6a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6a9:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010b6ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b6ae:	40                   	inc    %eax
f010b6af:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b6b2:	eb 41                	jmp    f010b6f5 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010b6b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6b7:	89 d0                	mov    %edx,%eax
f010b6b9:	01 c0                	add    %eax,%eax
f010b6bb:	01 d0                	add    %edx,%eax
f010b6bd:	c1 e0 02             	shl    $0x2,%eax
f010b6c0:	89 c2                	mov    %eax,%edx
f010b6c2:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6c5:	01 d0                	add    %edx,%eax
f010b6c7:	8b 40 08             	mov    0x8(%eax),%eax
f010b6ca:	3b 45 18             	cmp    0x18(%ebp),%eax
f010b6cd:	76 14                	jbe    f010b6e3 <stab_binsearch+0xda>
			*region_right = m - 1;
f010b6cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b6d2:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b6d5:	8b 45 10             	mov    0x10(%ebp),%eax
f010b6d8:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010b6da:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b6dd:	48                   	dec    %eax
f010b6de:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b6e1:	eb 12                	jmp    f010b6f5 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010b6e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b6e6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6e9:	89 10                	mov    %edx,(%eax)
			l = m;
f010b6eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b6ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010b6f1:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;
	
	while (l <= r) {
f010b6f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b6f8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010b6fb:	0f 8e 2a ff ff ff    	jle    f010b62b <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010b701:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b705:	75 0f                	jne    f010b716 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010b707:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b70a:	8b 00                	mov    (%eax),%eax
f010b70c:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b70f:	8b 45 10             	mov    0x10(%ebp),%eax
f010b712:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010b714:	eb 3d                	jmp    f010b753 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010b716:	8b 45 10             	mov    0x10(%ebp),%eax
f010b719:	8b 00                	mov    (%eax),%eax
f010b71b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b71e:	eb 03                	jmp    f010b723 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010b720:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010b723:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b726:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010b728:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b72b:	7d 1e                	jge    f010b74b <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010b72d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b730:	89 d0                	mov    %edx,%eax
f010b732:	01 c0                	add    %eax,%eax
f010b734:	01 d0                	add    %edx,%eax
f010b736:	c1 e0 02             	shl    $0x2,%eax
f010b739:	89 c2                	mov    %eax,%edx
f010b73b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b73e:	01 d0                	add    %edx,%eax
f010b740:	8a 40 04             	mov    0x4(%eax),%al
f010b743:	0f b6 c0             	movzbl %al,%eax
f010b746:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b749:	75 d5                	jne    f010b720 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010b74b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b74e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b751:	89 10                	mov    %edx,(%eax)
	}
}
f010b753:	90                   	nop
f010b754:	c9                   	leave  
f010b755:	c3                   	ret    

f010b756 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010b756:	55                   	push   %ebp
f010b757:	89 e5                	mov    %esp,%ebp
f010b759:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010b75c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b75f:	c7 00 68 df 11 f0    	movl   $0xf011df68,(%eax)
	info->eip_line = 0;
f010b765:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b768:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010b76f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b772:	c7 40 08 68 df 11 f0 	movl   $0xf011df68,0x8(%eax)
	info->eip_fn_namelen = 9;
f010b779:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b77c:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010b783:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b786:	8b 55 08             	mov    0x8(%ebp),%edx
f010b789:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010b78c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b78f:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010b796:	8b 45 08             	mov    0x8(%ebp),%eax
f010b799:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010b79e:	76 1e                	jbe    f010b7be <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010b7a0:	c7 45 f4 38 f3 11 f0 	movl   $0xf011f338,-0xc(%ebp)
		stab_end = __STAB_END__;
f010b7a7:	c7 45 f0 78 29 14 f0 	movl   $0xf0142978,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010b7ae:	c7 45 ec 79 29 14 f0 	movl   $0xf0142979,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010b7b5:	c7 45 e8 d1 bf 14 f0 	movl   $0xf014bfd1,-0x18(%ebp)
f010b7bc:	eb 2a                	jmp    f010b7e8 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010b7be:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.
		
		stabs = usd->stabs;
f010b7c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b7c8:	8b 00                	mov    (%eax),%eax
f010b7ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010b7cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b7d0:	8b 40 04             	mov    0x4(%eax),%eax
f010b7d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010b7d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b7d9:	8b 40 08             	mov    0x8(%eax),%eax
f010b7dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010b7df:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b7e2:	8b 40 0c             	mov    0xc(%eax),%eax
f010b7e5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010b7e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b7eb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010b7ee:	76 0a                	jbe    f010b7fa <debuginfo_eip+0xa4>
f010b7f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b7f3:	48                   	dec    %eax
f010b7f4:	8a 00                	mov    (%eax),%al
f010b7f6:	84 c0                	test   %al,%al
f010b7f8:	74 0a                	je     f010b804 <debuginfo_eip+0xae>
		return -1;
f010b7fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010b7ff:	e9 01 02 00 00       	jmp    f010ba05 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.
	
	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010b804:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010b80b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b80e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b811:	29 c2                	sub    %eax,%edx
f010b813:	89 d0                	mov    %edx,%eax
f010b815:	c1 f8 02             	sar    $0x2,%eax
f010b818:	89 c2                	mov    %eax,%edx
f010b81a:	89 d0                	mov    %edx,%eax
f010b81c:	c1 e0 02             	shl    $0x2,%eax
f010b81f:	01 d0                	add    %edx,%eax
f010b821:	c1 e0 02             	shl    $0x2,%eax
f010b824:	01 d0                	add    %edx,%eax
f010b826:	c1 e0 02             	shl    $0x2,%eax
f010b829:	01 d0                	add    %edx,%eax
f010b82b:	89 c1                	mov    %eax,%ecx
f010b82d:	c1 e1 08             	shl    $0x8,%ecx
f010b830:	01 c8                	add    %ecx,%eax
f010b832:	89 c1                	mov    %eax,%ecx
f010b834:	c1 e1 10             	shl    $0x10,%ecx
f010b837:	01 c8                	add    %ecx,%eax
f010b839:	01 c0                	add    %eax,%eax
f010b83b:	01 d0                	add    %edx,%eax
f010b83d:	48                   	dec    %eax
f010b83e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010b841:	ff 75 08             	pushl  0x8(%ebp)
f010b844:	6a 64                	push   $0x64
f010b846:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010b849:	50                   	push   %eax
f010b84a:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010b84d:	50                   	push   %eax
f010b84e:	ff 75 f4             	pushl  -0xc(%ebp)
f010b851:	e8 b3 fd ff ff       	call   f010b609 <stab_binsearch>
f010b856:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010b859:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b85c:	85 c0                	test   %eax,%eax
f010b85e:	75 0a                	jne    f010b86a <debuginfo_eip+0x114>
		return -1;
f010b860:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010b865:	e9 9b 01 00 00       	jmp    f010ba05 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010b86a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b86d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010b870:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010b873:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010b876:	ff 75 08             	pushl  0x8(%ebp)
f010b879:	6a 24                	push   $0x24
f010b87b:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010b87e:	50                   	push   %eax
f010b87f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010b882:	50                   	push   %eax
f010b883:	ff 75 f4             	pushl  -0xc(%ebp)
f010b886:	e8 7e fd ff ff       	call   f010b609 <stab_binsearch>
f010b88b:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010b88e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010b891:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b894:	39 c2                	cmp    %eax,%edx
f010b896:	0f 8f 86 00 00 00    	jg     f010b922 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010b89c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b89f:	89 c2                	mov    %eax,%edx
f010b8a1:	89 d0                	mov    %edx,%eax
f010b8a3:	01 c0                	add    %eax,%eax
f010b8a5:	01 d0                	add    %edx,%eax
f010b8a7:	c1 e0 02             	shl    $0x2,%eax
f010b8aa:	89 c2                	mov    %eax,%edx
f010b8ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b8af:	01 d0                	add    %edx,%eax
f010b8b1:	8b 00                	mov    (%eax),%eax
f010b8b3:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010b8b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b8b9:	29 d1                	sub    %edx,%ecx
f010b8bb:	89 ca                	mov    %ecx,%edx
f010b8bd:	39 d0                	cmp    %edx,%eax
f010b8bf:	73 22                	jae    f010b8e3 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010b8c1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b8c4:	89 c2                	mov    %eax,%edx
f010b8c6:	89 d0                	mov    %edx,%eax
f010b8c8:	01 c0                	add    %eax,%eax
f010b8ca:	01 d0                	add    %edx,%eax
f010b8cc:	c1 e0 02             	shl    $0x2,%eax
f010b8cf:	89 c2                	mov    %eax,%edx
f010b8d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b8d4:	01 d0                	add    %edx,%eax
f010b8d6:	8b 10                	mov    (%eax),%edx
f010b8d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b8db:	01 c2                	add    %eax,%edx
f010b8dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b8e0:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010b8e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b8e6:	89 c2                	mov    %eax,%edx
f010b8e8:	89 d0                	mov    %edx,%eax
f010b8ea:	01 c0                	add    %eax,%eax
f010b8ec:	01 d0                	add    %edx,%eax
f010b8ee:	c1 e0 02             	shl    $0x2,%eax
f010b8f1:	89 c2                	mov    %eax,%edx
f010b8f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b8f6:	01 d0                	add    %edx,%eax
f010b8f8:	8b 50 08             	mov    0x8(%eax),%edx
f010b8fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b8fe:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010b901:	8b 55 08             	mov    0x8(%ebp),%edx
f010b904:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b907:	8b 40 10             	mov    0x10(%eax),%eax
f010b90a:	29 c2                	sub    %eax,%edx
f010b90c:	89 d0                	mov    %edx,%eax
f010b90e:	c1 f8 02             	sar    $0x2,%eax
f010b911:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010b914:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b917:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010b91a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b91d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010b920:	eb 15                	jmp    f010b937 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010b922:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b925:	8b 55 08             	mov    0x8(%ebp),%edx
f010b928:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010b92b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b92e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010b931:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010b934:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010b937:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b93a:	8b 40 08             	mov    0x8(%eax),%eax
f010b93d:	83 ec 08             	sub    $0x8,%esp
f010b940:	6a 3a                	push   $0x3a
f010b942:	50                   	push   %eax
f010b943:	e8 fc e0 00 00       	call   f0119a44 <strfind>
f010b948:	83 c4 10             	add    $0x10,%esp
f010b94b:	89 c2                	mov    %eax,%edx
f010b94d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b950:	8b 40 08             	mov    0x8(%eax),%eax
f010b953:	29 c2                	sub    %eax,%edx
f010b955:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b958:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010b95b:	eb 03                	jmp    f010b960 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010b95d:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010b960:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b963:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010b966:	7c 4e                	jl     f010b9b6 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010b968:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b96b:	89 d0                	mov    %edx,%eax
f010b96d:	01 c0                	add    %eax,%eax
f010b96f:	01 d0                	add    %edx,%eax
f010b971:	c1 e0 02             	shl    $0x2,%eax
f010b974:	89 c2                	mov    %eax,%edx
f010b976:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b979:	01 d0                	add    %edx,%eax
f010b97b:	8a 40 04             	mov    0x4(%eax),%al
f010b97e:	3c 84                	cmp    $0x84,%al
f010b980:	74 34                	je     f010b9b6 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010b982:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b985:	89 d0                	mov    %edx,%eax
f010b987:	01 c0                	add    %eax,%eax
f010b989:	01 d0                	add    %edx,%eax
f010b98b:	c1 e0 02             	shl    $0x2,%eax
f010b98e:	89 c2                	mov    %eax,%edx
f010b990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b993:	01 d0                	add    %edx,%eax
f010b995:	8a 40 04             	mov    0x4(%eax),%al
f010b998:	3c 64                	cmp    $0x64,%al
f010b99a:	75 c1                	jne    f010b95d <debuginfo_eip+0x207>
f010b99c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b99f:	89 d0                	mov    %edx,%eax
f010b9a1:	01 c0                	add    %eax,%eax
f010b9a3:	01 d0                	add    %edx,%eax
f010b9a5:	c1 e0 02             	shl    $0x2,%eax
f010b9a8:	89 c2                	mov    %eax,%edx
f010b9aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9ad:	01 d0                	add    %edx,%eax
f010b9af:	8b 40 08             	mov    0x8(%eax),%eax
f010b9b2:	85 c0                	test   %eax,%eax
f010b9b4:	74 a7                	je     f010b95d <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010b9b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b9b9:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010b9bc:	7c 42                	jl     f010ba00 <debuginfo_eip+0x2aa>
f010b9be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b9c1:	89 d0                	mov    %edx,%eax
f010b9c3:	01 c0                	add    %eax,%eax
f010b9c5:	01 d0                	add    %edx,%eax
f010b9c7:	c1 e0 02             	shl    $0x2,%eax
f010b9ca:	89 c2                	mov    %eax,%edx
f010b9cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9cf:	01 d0                	add    %edx,%eax
f010b9d1:	8b 00                	mov    (%eax),%eax
f010b9d3:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010b9d6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b9d9:	29 d1                	sub    %edx,%ecx
f010b9db:	89 ca                	mov    %ecx,%edx
f010b9dd:	39 d0                	cmp    %edx,%eax
f010b9df:	73 1f                	jae    f010ba00 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010b9e1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b9e4:	89 d0                	mov    %edx,%eax
f010b9e6:	01 c0                	add    %eax,%eax
f010b9e8:	01 d0                	add    %edx,%eax
f010b9ea:	c1 e0 02             	shl    $0x2,%eax
f010b9ed:	89 c2                	mov    %eax,%edx
f010b9ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b9f2:	01 d0                	add    %edx,%eax
f010b9f4:	8b 10                	mov    (%eax),%edx
f010b9f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b9f9:	01 c2                	add    %eax,%edx
f010b9fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b9fe:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.

	
	return 0;
f010ba00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ba05:	c9                   	leave  
f010ba06:	c3                   	ret    

f010ba07 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010ba07:	55                   	push   %ebp
f010ba08:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010ba0a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba0d:	8b 15 44 11 3b f0    	mov    0xf03b1144,%edx
f010ba13:	29 d0                	sub    %edx,%eax
f010ba15:	c1 f8 03             	sar    $0x3,%eax
f010ba18:	89 c2                	mov    %eax,%edx
f010ba1a:	89 d0                	mov    %edx,%eax
f010ba1c:	c1 e0 02             	shl    $0x2,%eax
f010ba1f:	01 d0                	add    %edx,%eax
f010ba21:	c1 e0 02             	shl    $0x2,%eax
f010ba24:	01 d0                	add    %edx,%eax
f010ba26:	c1 e0 02             	shl    $0x2,%eax
f010ba29:	01 d0                	add    %edx,%eax
f010ba2b:	89 c1                	mov    %eax,%ecx
f010ba2d:	c1 e1 08             	shl    $0x8,%ecx
f010ba30:	01 c8                	add    %ecx,%eax
f010ba32:	89 c1                	mov    %eax,%ecx
f010ba34:	c1 e1 10             	shl    $0x10,%ecx
f010ba37:	01 c8                	add    %ecx,%eax
f010ba39:	01 c0                	add    %eax,%eax
f010ba3b:	01 d0                	add    %edx,%eax
}
f010ba3d:	5d                   	pop    %ebp
f010ba3e:	c3                   	ret    

f010ba3f <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010ba3f:	55                   	push   %ebp
f010ba40:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010ba42:	ff 75 08             	pushl  0x8(%ebp)
f010ba45:	e8 bd ff ff ff       	call   f010ba07 <to_frame_number>
f010ba4a:	83 c4 04             	add    $0x4,%esp
f010ba4d:	c1 e0 0c             	shl    $0xc,%eax
}
f010ba50:	c9                   	leave  
f010ba51:	c3                   	ret    

f010ba52 <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f010ba52:	55                   	push   %ebp
f010ba53:	89 e5                	mov    %esp,%ebp
f010ba55:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010ba58:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba5b:	c1 e8 0c             	shr    $0xc,%eax
f010ba5e:	89 c2                	mov    %eax,%edx
f010ba60:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010ba65:	39 c2                	cmp    %eax,%edx
f010ba67:	72 14                	jb     f010ba7d <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010ba69:	83 ec 04             	sub    $0x4,%esp
f010ba6c:	68 74 df 11 f0       	push   $0xf011df74
f010ba71:	6a 78                	push   $0x78
f010ba73:	68 99 df 11 f0       	push   $0xf011df99
f010ba78:	e8 16 47 ff ff       	call   f0100193 <_panic>
	return &frames_info[PPN(physical_address)];
f010ba7d:	8b 15 44 11 3b f0    	mov    0xf03b1144,%edx
f010ba83:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba86:	c1 e8 0c             	shr    $0xc,%eax
f010ba89:	89 c1                	mov    %eax,%ecx
f010ba8b:	89 c8                	mov    %ecx,%eax
f010ba8d:	01 c0                	add    %eax,%eax
f010ba8f:	01 c8                	add    %ecx,%eax
f010ba91:	c1 e0 03             	shl    $0x3,%eax
f010ba94:	01 d0                	add    %edx,%eax
}
f010ba96:	c9                   	leave  
f010ba97:	c3                   	ret    

f010ba98 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010ba98:	55                   	push   %ebp
f010ba99:	89 e5                	mov    %esp,%ebp
f010ba9b:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010ba9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010baa1:	05 00 14 00 00       	add    $0x1400,%eax
f010baa6:	c1 e0 03             	shl    $0x3,%eax
f010baa9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010baac:	83 ec 04             	sub    $0x4,%esp
f010baaf:	6a 08                	push   $0x8
f010bab1:	ff 75 0c             	pushl  0xc(%ebp)
f010bab4:	ff 75 f4             	pushl  -0xc(%ebp)
f010bab7:	e8 19 e5 00 00       	call   f0119fd5 <ide_read>
f010babc:	83 c4 10             	add    $0x10,%esp
f010babf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010bac2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010bac5:	c9                   	leave  
f010bac6:	c3                   	ret    

f010bac7 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010bac7:	55                   	push   %ebp
f010bac8:	89 e5                	mov    %esp,%ebp
f010baca:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010bacd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bad0:	05 00 14 00 00       	add    $0x1400,%eax
f010bad5:	c1 e0 03             	shl    $0x3,%eax
f010bad8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010badb:	83 ec 04             	sub    $0x4,%esp
f010bade:	6a 08                	push   $0x8
f010bae0:	ff 75 0c             	pushl  0xc(%ebp)
f010bae3:	ff 75 f4             	pushl  -0xc(%ebp)
f010bae6:	e8 2a e6 00 00       	call   f011a115 <ide_write>
f010baeb:	83 c4 10             	add    $0x10,%esp
f010baee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010baf1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010baf5:	74 14                	je     f010bb0b <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010baf7:	83 ec 04             	sub    $0x4,%esp
f010bafa:	68 b1 df 11 f0       	push   $0xf011dfb1
f010baff:	6a 37                	push   $0x37
f010bb01:	68 c8 df 11 f0       	push   $0xf011dfc8
f010bb06:	e8 88 46 ff ff       	call   f0100193 <_panic>
	return success;
f010bb0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010bb0e:	c9                   	leave  
f010bb0f:	c3                   	ret    

f010bb10 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010bb10:	55                   	push   %ebp
f010bb11:	89 e5                	mov    %esp,%ebp
f010bb13:	53                   	push   %ebx
f010bb14:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f010bb17:	c7 05 38 12 3b f0 00 	movl   $0x0,0xf03b1238
f010bb1e:	00 00 00 
f010bb21:	c7 05 3c 12 3b f0 00 	movl   $0x0,0xf03b123c
f010bb28:	00 00 00 
f010bb2b:	c7 05 44 12 3b f0 00 	movl   $0x0,0xf03b1244
f010bb32:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010bb35:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010bb3c:	e9 bc 00 00 00       	jmp    f010bbfd <initialize_disk_page_file+0xed>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010bb41:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bb47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bb4a:	89 d0                	mov    %edx,%eax
f010bb4c:	01 c0                	add    %eax,%eax
f010bb4e:	01 d0                	add    %edx,%eax
f010bb50:	c1 e0 03             	shl    $0x3,%eax
f010bb53:	01 c8                	add    %ecx,%eax
f010bb55:	83 ec 0c             	sub    $0xc,%esp
f010bb58:	50                   	push   %eax
f010bb59:	e8 76 81 ff ff       	call   f0103cd4 <initialize_frame_info>
f010bb5e:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010bb61:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bb67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bb6a:	89 d0                	mov    %edx,%eax
f010bb6c:	01 c0                	add    %eax,%eax
f010bb6e:	01 d0                	add    %edx,%eax
f010bb70:	c1 e0 03             	shl    $0x3,%eax
f010bb73:	01 c8                	add    %ecx,%eax
f010bb75:	8b 15 38 12 3b f0    	mov    0xf03b1238,%edx
f010bb7b:	89 10                	mov    %edx,(%eax)
f010bb7d:	8b 00                	mov    (%eax),%eax
f010bb7f:	85 c0                	test   %eax,%eax
f010bb81:	74 1f                	je     f010bba2 <initialize_disk_page_file+0x92>
f010bb83:	8b 15 38 12 3b f0    	mov    0xf03b1238,%edx
f010bb89:	8b 1d 30 11 3b f0    	mov    0xf03b1130,%ebx
f010bb8f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010bb92:	89 c8                	mov    %ecx,%eax
f010bb94:	01 c0                	add    %eax,%eax
f010bb96:	01 c8                	add    %ecx,%eax
f010bb98:	c1 e0 03             	shl    $0x3,%eax
f010bb9b:	01 d8                	add    %ebx,%eax
f010bb9d:	89 42 04             	mov    %eax,0x4(%edx)
f010bba0:	eb 19                	jmp    f010bbbb <initialize_disk_page_file+0xab>
f010bba2:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bba8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bbab:	89 d0                	mov    %edx,%eax
f010bbad:	01 c0                	add    %eax,%eax
f010bbaf:	01 d0                	add    %edx,%eax
f010bbb1:	c1 e0 03             	shl    $0x3,%eax
f010bbb4:	01 c8                	add    %ecx,%eax
f010bbb6:	a3 3c 12 3b f0       	mov    %eax,0xf03b123c
f010bbbb:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bbc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bbc4:	89 d0                	mov    %edx,%eax
f010bbc6:	01 c0                	add    %eax,%eax
f010bbc8:	01 d0                	add    %edx,%eax
f010bbca:	c1 e0 03             	shl    $0x3,%eax
f010bbcd:	01 c8                	add    %ecx,%eax
f010bbcf:	a3 38 12 3b f0       	mov    %eax,0xf03b1238
f010bbd4:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bbda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bbdd:	89 d0                	mov    %edx,%eax
f010bbdf:	01 c0                	add    %eax,%eax
f010bbe1:	01 d0                	add    %edx,%eax
f010bbe3:	c1 e0 03             	shl    $0x3,%eax
f010bbe6:	01 c8                	add    %ecx,%eax
f010bbe8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010bbef:	a1 44 12 3b f0       	mov    0xf03b1244,%eax
f010bbf4:	40                   	inc    %eax
f010bbf5:	a3 44 12 3b f0       	mov    %eax,0xf03b1244
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010bbfa:	ff 45 f4             	incl   -0xc(%ebp)
f010bbfd:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f010bc04:	0f 8e 37 ff ff ff    	jle    f010bb41 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f010bc0a:	90                   	nop
f010bc0b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bc0e:	c9                   	leave  
f010bc0f:	c3                   	ret    

f010bc10 <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct Frame_Info *ptr_frame_info)
{
f010bc10:	55                   	push   %ebp
f010bc11:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010bc13:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc16:	8b 15 30 11 3b f0    	mov    0xf03b1130,%edx
f010bc1c:	29 d0                	sub    %edx,%eax
f010bc1e:	c1 f8 03             	sar    $0x3,%eax
f010bc21:	89 c2                	mov    %eax,%edx
f010bc23:	89 d0                	mov    %edx,%eax
f010bc25:	c1 e0 02             	shl    $0x2,%eax
f010bc28:	01 d0                	add    %edx,%eax
f010bc2a:	c1 e0 02             	shl    $0x2,%eax
f010bc2d:	01 d0                	add    %edx,%eax
f010bc2f:	c1 e0 02             	shl    $0x2,%eax
f010bc32:	01 d0                	add    %edx,%eax
f010bc34:	89 c1                	mov    %eax,%ecx
f010bc36:	c1 e1 08             	shl    $0x8,%ecx
f010bc39:	01 c8                	add    %ecx,%eax
f010bc3b:	89 c1                	mov    %eax,%ecx
f010bc3d:	c1 e1 10             	shl    $0x10,%ecx
f010bc40:	01 c8                	add    %ecx,%eax
f010bc42:	01 c0                	add    %eax,%eax
f010bc44:	01 d0                	add    %edx,%eax
}
f010bc46:	5d                   	pop    %ebp
f010bc47:	c3                   	ret    

f010bc48 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010bc48:	55                   	push   %ebp
f010bc49:	89 e5                	mov    %esp,%ebp
f010bc4b:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct Frame_Info *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010bc4e:	a1 38 12 3b f0       	mov    0xf03b1238,%eax
f010bc53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010bc56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bc5a:	75 0a                	jne    f010bc66 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010bc5c:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010bc61:	e9 8d 00 00 00       	jmp    f010bcf3 <allocate_disk_frame+0xab>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010bc66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc69:	8b 00                	mov    (%eax),%eax
f010bc6b:	85 c0                	test   %eax,%eax
f010bc6d:	74 10                	je     f010bc7f <allocate_disk_frame+0x37>
f010bc6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc72:	8b 00                	mov    (%eax),%eax
f010bc74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc77:	8b 52 04             	mov    0x4(%edx),%edx
f010bc7a:	89 50 04             	mov    %edx,0x4(%eax)
f010bc7d:	eb 0b                	jmp    f010bc8a <allocate_disk_frame+0x42>
f010bc7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc82:	8b 40 04             	mov    0x4(%eax),%eax
f010bc85:	a3 3c 12 3b f0       	mov    %eax,0xf03b123c
f010bc8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc8d:	8b 40 04             	mov    0x4(%eax),%eax
f010bc90:	85 c0                	test   %eax,%eax
f010bc92:	74 0f                	je     f010bca3 <allocate_disk_frame+0x5b>
f010bc94:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc97:	8b 40 04             	mov    0x4(%eax),%eax
f010bc9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bc9d:	8b 12                	mov    (%edx),%edx
f010bc9f:	89 10                	mov    %edx,(%eax)
f010bca1:	eb 0a                	jmp    f010bcad <allocate_disk_frame+0x65>
f010bca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bca6:	8b 00                	mov    (%eax),%eax
f010bca8:	a3 38 12 3b f0       	mov    %eax,0xf03b1238
f010bcad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bcb0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010bcb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bcb9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010bcc0:	a1 44 12 3b f0       	mov    0xf03b1244,%eax
f010bcc5:	48                   	dec    %eax
f010bcc6:	a3 44 12 3b f0       	mov    %eax,0xf03b1244
	initialize_frame_info(ptr_frame_info);
f010bccb:	83 ec 0c             	sub    $0xc,%esp
f010bcce:	ff 75 f4             	pushl  -0xc(%ebp)
f010bcd1:	e8 fe 7f ff ff       	call   f0103cd4 <initialize_frame_info>
f010bcd6:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010bcd9:	83 ec 0c             	sub    $0xc,%esp
f010bcdc:	ff 75 f4             	pushl  -0xc(%ebp)
f010bcdf:	e8 2c ff ff ff       	call   f010bc10 <to_disk_frame_number>
f010bce4:	83 c4 10             	add    $0x10,%esp
f010bce7:	89 c2                	mov    %eax,%edx
f010bce9:	8b 45 08             	mov    0x8(%ebp),%eax
f010bcec:	89 10                	mov    %edx,(%eax)
	return 0;
f010bcee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bcf3:	c9                   	leave  
f010bcf4:	c3                   	ret    

f010bcf5 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010bcf5:	55                   	push   %ebp
f010bcf6:	89 e5                	mov    %esp,%ebp
f010bcf8:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f010bcf9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010bcfd:	0f 84 9b 00 00 00    	je     f010bd9e <free_disk_frame+0xa9>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010bd03:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bd09:	8b 55 08             	mov    0x8(%ebp),%edx
f010bd0c:	89 d0                	mov    %edx,%eax
f010bd0e:	01 c0                	add    %eax,%eax
f010bd10:	01 d0                	add    %edx,%eax
f010bd12:	c1 e0 03             	shl    $0x3,%eax
f010bd15:	01 c8                	add    %ecx,%eax
f010bd17:	8b 15 38 12 3b f0    	mov    0xf03b1238,%edx
f010bd1d:	89 10                	mov    %edx,(%eax)
f010bd1f:	8b 00                	mov    (%eax),%eax
f010bd21:	85 c0                	test   %eax,%eax
f010bd23:	74 1f                	je     f010bd44 <free_disk_frame+0x4f>
f010bd25:	8b 15 38 12 3b f0    	mov    0xf03b1238,%edx
f010bd2b:	8b 1d 30 11 3b f0    	mov    0xf03b1130,%ebx
f010bd31:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010bd34:	89 c8                	mov    %ecx,%eax
f010bd36:	01 c0                	add    %eax,%eax
f010bd38:	01 c8                	add    %ecx,%eax
f010bd3a:	c1 e0 03             	shl    $0x3,%eax
f010bd3d:	01 d8                	add    %ebx,%eax
f010bd3f:	89 42 04             	mov    %eax,0x4(%edx)
f010bd42:	eb 19                	jmp    f010bd5d <free_disk_frame+0x68>
f010bd44:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bd4a:	8b 55 08             	mov    0x8(%ebp),%edx
f010bd4d:	89 d0                	mov    %edx,%eax
f010bd4f:	01 c0                	add    %eax,%eax
f010bd51:	01 d0                	add    %edx,%eax
f010bd53:	c1 e0 03             	shl    $0x3,%eax
f010bd56:	01 c8                	add    %ecx,%eax
f010bd58:	a3 3c 12 3b f0       	mov    %eax,0xf03b123c
f010bd5d:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bd63:	8b 55 08             	mov    0x8(%ebp),%edx
f010bd66:	89 d0                	mov    %edx,%eax
f010bd68:	01 c0                	add    %eax,%eax
f010bd6a:	01 d0                	add    %edx,%eax
f010bd6c:	c1 e0 03             	shl    $0x3,%eax
f010bd6f:	01 c8                	add    %ecx,%eax
f010bd71:	a3 38 12 3b f0       	mov    %eax,0xf03b1238
f010bd76:	8b 0d 30 11 3b f0    	mov    0xf03b1130,%ecx
f010bd7c:	8b 55 08             	mov    0x8(%ebp),%edx
f010bd7f:	89 d0                	mov    %edx,%eax
f010bd81:	01 c0                	add    %eax,%eax
f010bd83:	01 d0                	add    %edx,%eax
f010bd85:	c1 e0 03             	shl    $0x3,%eax
f010bd88:	01 c8                	add    %ecx,%eax
f010bd8a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010bd91:	a1 44 12 3b f0       	mov    0xf03b1244,%eax
f010bd96:	40                   	inc    %eax
f010bd97:	a3 44 12 3b f0       	mov    %eax,0xf03b1244
f010bd9c:	eb 01                	jmp    f010bd9f <free_disk_frame+0xaa>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f010bd9e:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f010bd9f:	5b                   	pop    %ebx
f010bda0:	5d                   	pop    %ebp
f010bda1:	c3                   	ret    

f010bda2 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const void *virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010bda2:	55                   	push   %ebp
f010bda3:	89 e5                	mov    %esp,%ebp
f010bda5:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f010bda8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bdab:	c1 e8 16             	shr    $0x16,%eax
f010bdae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010bdb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdb8:	01 d0                	add    %edx,%eax
f010bdba:	8b 00                	mov    (%eax),%eax
f010bdbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010bdbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdc2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bdc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010bdca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bdcd:	c1 e8 0c             	shr    $0xc,%eax
f010bdd0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010bdd3:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010bdd8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010bddb:	72 17                	jb     f010bdf4 <get_disk_page_table+0x52>
f010bddd:	ff 75 f0             	pushl  -0x10(%ebp)
f010bde0:	68 dc df 11 f0       	push   $0xf011dfdc
f010bde5:	68 9b 00 00 00       	push   $0x9b
f010bdea:	68 c8 df 11 f0       	push   $0xf011dfc8
f010bdef:	e8 9f 43 ff ff       	call   f0100193 <_panic>
f010bdf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bdf7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010bdfc:	89 c2                	mov    %eax,%edx
f010bdfe:	8b 45 14             	mov    0x14(%ebp),%eax
f010be01:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010be03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be07:	0f 85 b7 00 00 00    	jne    f010bec4 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010be0d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010be11:	0f 84 9d 00 00 00    	je     f010beb4 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
			#else
			{
				struct Frame_Info* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f010be17:	83 ec 0c             	sub    $0xc,%esp
f010be1a:	8d 45 dc             	lea    -0x24(%ebp),%eax
f010be1d:	50                   	push   %eax
f010be1e:	e8 cc 7e ff ff       	call   f0103cef <allocate_frame>
f010be23:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f010be26:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010be29:	83 ec 0c             	sub    $0xc,%esp
f010be2c:	50                   	push   %eax
f010be2d:	e8 0d fc ff ff       	call   f010ba3f <to_physical_address>
f010be32:	83 c4 10             	add    $0x10,%esp
f010be35:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010be38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010be3b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010be3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010be41:	c1 e8 0c             	shr    $0xc,%eax
f010be44:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010be47:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010be4c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010be4f:	72 17                	jb     f010be68 <get_disk_page_table+0xc6>
f010be51:	ff 75 e4             	pushl  -0x1c(%ebp)
f010be54:	68 dc df 11 f0       	push   $0xf011dfdc
f010be59:	68 b7 00 00 00       	push   $0xb7
f010be5e:	68 c8 df 11 f0       	push   $0xf011dfc8
f010be63:	e8 2b 43 ff ff       	call   f0100193 <_panic>
f010be68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010be6b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010be70:	89 c2                	mov    %eax,%edx
f010be72:	8b 45 14             	mov    0x14(%ebp),%eax
f010be75:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f010be77:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010be7a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f010be80:	8b 45 0c             	mov    0xc(%ebp),%eax
f010be83:	c1 e8 16             	shr    $0x16,%eax
f010be86:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010be8d:	8b 45 08             	mov    0x8(%ebp),%eax
f010be90:	01 d0                	add    %edx,%eax
f010be92:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010be95:	83 ca 01             	or     $0x1,%edx
f010be98:	89 10                	mov    %edx,(%eax)
			}
			#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010be9a:	8b 45 14             	mov    0x14(%ebp),%eax
f010be9d:	8b 00                	mov    (%eax),%eax
f010be9f:	83 ec 04             	sub    $0x4,%esp
f010bea2:	68 00 10 00 00       	push   $0x1000
f010bea7:	6a 00                	push   $0x0
f010bea9:	50                   	push   %eax
f010beaa:	e8 c1 db 00 00       	call   f0119a70 <memset>
f010beaf:	83 c4 10             	add    $0x10,%esp
f010beb2:	eb 10                	jmp    f010bec4 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010beb4:	8b 45 14             	mov    0x14(%ebp),%eax
f010beb7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010bebd:	b8 00 00 00 00       	mov    $0x0,%eax
f010bec2:	eb 05                	jmp    f010bec9 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010bec4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bec9:	c9                   	leave  
f010beca:	c3                   	ret    

f010becb <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010becb:	55                   	push   %ebp
f010becc:	89 e5                	mov    %esp,%ebp
f010bece:	83 ec 28             	sub    $0x28,%esp
f010bed1:	8b 45 10             	mov    0x10(%ebp),%eax
f010bed4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010bed7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010bedb:	74 75                	je     f010bf52 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010bedd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010bee4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bee7:	2d 01 90 f5 5f       	sub    $0x5ff59001,%eax
f010beec:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010beef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bef2:	ba 00 00 00 00       	mov    $0x0,%edx
f010bef7:	f7 75 f4             	divl   -0xc(%ebp)
f010befa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010befd:	29 d0                	sub    %edx,%eax
f010beff:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bf02:	73 32                	jae    f010bf36 <pf_add_empty_env_page+0x6b>
f010bf04:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf07:	8b 90 ec ee 00 00    	mov    0xeeec(%eax),%edx
f010bf0d:	b8 00 00 00 00       	mov    $0x0,%eax
f010bf12:	29 d0                	sub    %edx,%eax
f010bf14:	c1 e0 0c             	shl    $0xc,%eax
f010bf17:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010bf1c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010bf1f:	76 15                	jbe    f010bf36 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f010bf21:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf24:	8b 80 e8 ee 00 00    	mov    0xeee8(%eax),%eax
f010bf2a:	8d 50 01             	lea    0x1(%eax),%edx
f010bf2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf30:	89 90 e8 ee 00 00    	mov    %edx,0xeee8(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010bf36:	a1 48 11 3b f0       	mov    0xf03b1148,%eax
f010bf3b:	83 ec 04             	sub    $0x4,%esp
f010bf3e:	50                   	push   %eax
f010bf3f:	ff 75 0c             	pushl  0xc(%ebp)
f010bf42:	ff 75 08             	pushl  0x8(%ebp)
f010bf45:	e8 b3 00 00 00       	call   f010bffd <pf_add_env_page>
f010bf4a:	83 c4 10             	add    $0x10,%esp
f010bf4d:	e9 a9 00 00 00       	jmp    f010bffb <pf_add_empty_env_page+0x130>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010bf52:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010bf59:	76 19                	jbe    f010bf74 <pf_add_empty_env_page+0xa9>
f010bf5b:	68 0c e0 11 f0       	push   $0xf011e00c
f010bf60:	68 32 e0 11 f0       	push   $0xf011e032
f010bf65:	68 da 00 00 00       	push   $0xda
f010bf6a:	68 c8 df 11 f0       	push   $0xf011dfc8
f010bf6f:	e8 1f 42 ff ff       	call   f0100193 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010bf74:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf77:	83 c0 64             	add    $0x64,%eax
f010bf7a:	83 ec 08             	sub    $0x8,%esp
f010bf7d:	50                   	push   %eax
f010bf7e:	ff 75 08             	pushl  0x8(%ebp)
f010bf81:	e8 37 05 00 00       	call   f010c4bd <get_disk_page_directory>
f010bf86:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010bf89:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bf8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf8f:	8b 40 64             	mov    0x64(%eax),%eax
f010bf92:	8d 4d ec             	lea    -0x14(%ebp),%ecx
f010bf95:	51                   	push   %ecx
f010bf96:	6a 01                	push   $0x1
f010bf98:	52                   	push   %edx
f010bf99:	50                   	push   %eax
f010bf9a:	e8 03 fe ff ff       	call   f010bda2 <get_disk_page_table>
f010bf9f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010bfa2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bfa5:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bfa8:	c1 ea 0c             	shr    $0xc,%edx
f010bfab:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bfb1:	c1 e2 02             	shl    $0x2,%edx
f010bfb4:	01 d0                	add    %edx,%eax
f010bfb6:	8b 00                	mov    (%eax),%eax
f010bfb8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f010bfbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bfbe:	85 c0                	test   %eax,%eax
f010bfc0:	75 34                	jne    f010bff6 <pf_add_empty_env_page+0x12b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010bfc2:	83 ec 0c             	sub    $0xc,%esp
f010bfc5:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010bfc8:	50                   	push   %eax
f010bfc9:	e8 7a fc ff ff       	call   f010bc48 <allocate_disk_frame>
f010bfce:	83 c4 10             	add    $0x10,%esp
f010bfd1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010bfd4:	75 07                	jne    f010bfdd <pf_add_empty_env_page+0x112>
f010bfd6:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010bfdb:	eb 1e                	jmp    f010bffb <pf_add_empty_env_page+0x130>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010bfdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bfe0:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bfe3:	c1 ea 0c             	shr    $0xc,%edx
f010bfe6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bfec:	c1 e2 02             	shl    $0x2,%edx
f010bfef:	01 c2                	add    %eax,%edx
f010bff1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bff4:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010bff6:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010bffb:	c9                   	leave  
f010bffc:	c3                   	ret    

f010bffd <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010bffd:	55                   	push   %ebp
f010bffe:	89 e5                	mov    %esp,%ebp
f010c000:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010c003:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010c00a:	76 19                	jbe    f010c025 <pf_add_env_page+0x28>
f010c00c:	68 0c e0 11 f0       	push   $0xf011e00c
f010c011:	68 32 e0 11 f0       	push   $0xf011e032
f010c016:	68 ef 00 00 00       	push   $0xef
f010c01b:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c020:	e8 6e 41 ff ff       	call   f0100193 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010c025:	8b 45 08             	mov    0x8(%ebp),%eax
f010c028:	83 c0 64             	add    $0x64,%eax
f010c02b:	83 ec 08             	sub    $0x8,%esp
f010c02e:	50                   	push   %eax
f010c02f:	ff 75 08             	pushl  0x8(%ebp)
f010c032:	e8 86 04 00 00       	call   f010c4bd <get_disk_page_directory>
f010c037:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010c03a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c03d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c040:	8b 40 64             	mov    0x64(%eax),%eax
f010c043:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010c046:	51                   	push   %ecx
f010c047:	6a 01                	push   $0x1
f010c049:	52                   	push   %edx
f010c04a:	50                   	push   %eax
f010c04b:	e8 52 fd ff ff       	call   f010bda2 <get_disk_page_table>
f010c050:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010c053:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c056:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c059:	c1 ea 0c             	shr    $0xc,%edx
f010c05c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c062:	c1 e2 02             	shl    $0x2,%edx
f010c065:	01 d0                	add    %edx,%eax
f010c067:	8b 00                	mov    (%eax),%eax
f010c069:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010c06c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c06f:	85 c0                	test   %eax,%eax
f010c071:	75 34                	jne    f010c0a7 <pf_add_env_page+0xaa>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010c073:	83 ec 0c             	sub    $0xc,%esp
f010c076:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c079:	50                   	push   %eax
f010c07a:	e8 c9 fb ff ff       	call   f010bc48 <allocate_disk_frame>
f010c07f:	83 c4 10             	add    $0x10,%esp
f010c082:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010c085:	75 07                	jne    f010c08e <pf_add_env_page+0x91>
f010c087:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010c08c:	eb 31                	jmp    f010c0bf <pf_add_env_page+0xc2>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010c08e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c091:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c094:	c1 ea 0c             	shr    $0xc,%edx
f010c097:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c09d:	c1 e2 02             	shl    $0x2,%edx
f010c0a0:	01 c2                	add    %eax,%edx
f010c0a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c0a5:	89 02                	mov    %eax,(%edx)
//	uint32 oldDir = rcr3();
//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
//	int ret = write_disk_page(dfn, (void*)dataSrc);
//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010c0a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c0aa:	83 ec 08             	sub    $0x8,%esp
f010c0ad:	ff 75 10             	pushl  0x10(%ebp)
f010c0b0:	50                   	push   %eax
f010c0b1:	e8 11 fa ff ff       	call   f010bac7 <write_disk_page>
f010c0b6:	83 c4 10             	add    $0x10,%esp
f010c0b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f010c0bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c0bf:	c9                   	leave  
f010c0c0:	c3                   	ret    

f010c0c1 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, void *virtual_address, struct Frame_Info* modified_page_frame_info)
{
f010c0c1:	55                   	push   %ebp
f010c0c2:	89 e5                	mov    %esp,%ebp
f010c0c4:	83 ec 28             	sub    $0x28,%esp
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010c0c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c0ca:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f010c0cf:	76 19                	jbe    f010c0ea <pf_update_env_page+0x29>
f010c0d1:	68 0c e0 11 f0       	push   $0xf011e00c
f010c0d6:	68 32 e0 11 f0       	push   $0xf011e032
f010c0db:	68 10 01 00 00       	push   $0x110
f010c0e0:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c0e5:	e8 a9 40 ff ff       	call   f0100193 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010c0ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0ed:	83 c0 64             	add    $0x64,%eax
f010c0f0:	83 ec 08             	sub    $0x8,%esp
f010c0f3:	50                   	push   %eax
f010c0f4:	ff 75 08             	pushl  0x8(%ebp)
f010c0f7:	e8 c1 03 00 00       	call   f010c4bd <get_disk_page_directory>
f010c0fc:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010c0ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010c102:	8b 40 64             	mov    0x64(%eax),%eax
f010c105:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010c108:	52                   	push   %edx
f010c109:	6a 00                	push   $0x0
f010c10b:	ff 75 0c             	pushl  0xc(%ebp)
f010c10e:	50                   	push   %eax
f010c10f:	e8 8e fc ff ff       	call   f010bda2 <get_disk_page_table>
f010c114:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010c117:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c11a:	85 c0                	test   %eax,%eax
f010c11c:	75 0a                	jne    f010c128 <pf_update_env_page+0x67>
f010c11e:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010c123:	e9 93 00 00 00       	jmp    f010c1bb <pf_update_env_page+0xfa>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010c128:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c12b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c12e:	c1 ea 0c             	shr    $0xc,%edx
f010c131:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c137:	c1 e2 02             	shl    $0x2,%edx
f010c13a:	01 d0                	add    %edx,%eax
f010c13c:	8b 00                	mov    (%eax),%eax
f010c13e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010c141:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c145:	75 07                	jne    f010c14e <pf_update_env_page+0x8d>
f010c147:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010c14c:	eb 6d                	jmp    f010c1bb <pf_update_env_page+0xfa>

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f010c14e:	83 ec 0c             	sub    $0xc,%esp
f010c151:	ff 75 10             	pushl  0x10(%ebp)
f010c154:	e8 e6 f8 ff ff       	call   f010ba3f <to_physical_address>
f010c159:	83 c4 10             	add    $0x10,%esp
f010c15c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c15f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c162:	c1 e8 0c             	shr    $0xc,%eax
f010c165:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010c168:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010c16d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010c170:	72 17                	jb     f010c189 <pf_update_env_page+0xc8>
f010c172:	ff 75 f0             	pushl  -0x10(%ebp)
f010c175:	68 dc df 11 f0       	push   $0xf011dfdc
f010c17a:	68 2d 01 00 00       	push   $0x12d
f010c17f:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c184:	e8 0a 40 ff ff       	call   f0100193 <_panic>
f010c189:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c18c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c191:	83 ec 08             	sub    $0x8,%esp
f010c194:	50                   	push   %eax
f010c195:	ff 75 f4             	pushl  -0xc(%ebp)
f010c198:	e8 2a f9 ff ff       	call   f010bac7 <write_disk_page>
f010c19d:	83 c4 10             	add    $0x10,%esp
f010c1a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f010c1a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1a6:	8b 80 e4 ee 00 00    	mov    0xeee4(%eax),%eax
f010c1ac:	8d 50 01             	lea    0x1(%eax),%edx
f010c1af:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1b2:	89 90 e4 ee 00 00    	mov    %edx,0xeee4(%eax)
	//======================

	return ret;
f010c1b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010c1bb:	c9                   	leave  
f010c1bc:	c3                   	ret    

f010c1bd <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
*/
int pf_read_env_page(struct Env* ptr_env, void *virtual_address)
{
f010c1bd:	55                   	push   %ebp
f010c1be:	89 e5                	mov    %esp,%ebp
f010c1c0:	83 ec 28             	sub    $0x28,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = (void*) ROUNDDOWN((uint32)virtual_address, PAGE_SIZE);
f010c1c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c1c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c1c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c1cc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c1d1:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010c1d4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d7:	8b 40 64             	mov    0x64(%eax),%eax
f010c1da:	85 c0                	test   %eax,%eax
f010c1dc:	75 0a                	jne    f010c1e8 <pf_read_env_page+0x2b>
f010c1de:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010c1e3:	e9 cc 00 00 00       	jmp    f010c2b4 <pf_read_env_page+0xf7>

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010c1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1eb:	8b 40 64             	mov    0x64(%eax),%eax
f010c1ee:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010c1f1:	52                   	push   %edx
f010c1f2:	6a 00                	push   $0x0
f010c1f4:	ff 75 0c             	pushl  0xc(%ebp)
f010c1f7:	50                   	push   %eax
f010c1f8:	e8 a5 fb ff ff       	call   f010bda2 <get_disk_page_table>
f010c1fd:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010c200:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c203:	85 c0                	test   %eax,%eax
f010c205:	75 0a                	jne    f010c211 <pf_read_env_page+0x54>
f010c207:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010c20c:	e9 a3 00 00 00       	jmp    f010c2b4 <pf_read_env_page+0xf7>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010c211:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c214:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c217:	c1 ea 0c             	shr    $0xc,%edx
f010c21a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c220:	c1 e2 02             	shl    $0x2,%edx
f010c223:	01 d0                	add    %edx,%eax
f010c225:	8b 00                	mov    (%eax),%eax
f010c227:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010c22a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010c22e:	75 07                	jne    f010c237 <pf_read_env_page+0x7a>
f010c230:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010c235:	eb 7d                	jmp    f010c2b4 <pf_read_env_page+0xf7>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010c237:	83 ec 08             	sub    $0x8,%esp
f010c23a:	ff 75 0c             	pushl  0xc(%ebp)
f010c23d:	ff 75 f0             	pushl  -0x10(%ebp)
f010c240:	e8 53 f8 ff ff       	call   f010ba98 <read_disk_page>
f010c245:	83 c4 10             	add    $0x10,%esp
f010c248:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	//pt_set_page_permissions(curenv, (uint32)virtual_address, 0, PERM_MODIFIED);
	uint32 *ptr_table = NULL;
f010c24b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	get_page_table(curenv->env_page_directory,(void*) virtual_address, &ptr_table);
f010c252:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f010c257:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c25a:	83 ec 04             	sub    $0x4,%esp
f010c25d:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010c260:	52                   	push   %edx
f010c261:	ff 75 0c             	pushl  0xc(%ebp)
f010c264:	50                   	push   %eax
f010c265:	e8 04 7c ff ff       	call   f0103e6e <get_page_table>
f010c26a:	83 c4 10             	add    $0x10,%esp
	ptr_table[PTX(virtual_address)] &= ~PERM_MODIFIED;
f010c26d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c270:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c273:	c1 ea 0c             	shr    $0xc,%edx
f010c276:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c27c:	c1 e2 02             	shl    $0x2,%edx
f010c27f:	01 d0                	add    %edx,%eax
f010c281:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010c284:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f010c287:	c1 e9 0c             	shr    $0xc,%ecx
f010c28a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010c290:	c1 e1 02             	shl    $0x2,%ecx
f010c293:	01 ca                	add    %ecx,%edx
f010c295:	8b 12                	mov    (%edx),%edx
f010c297:	83 e2 bf             	and    $0xffffffbf,%edx
f010c29a:	89 10                	mov    %edx,(%eax)

	//2020
	ptr_env->nPageIn++ ;
f010c29c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c29f:	8b 80 e0 ee 00 00    	mov    0xeee0(%eax),%eax
f010c2a5:	8d 50 01             	lea    0x1(%eax),%edx
f010c2a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ab:	89 90 e0 ee 00 00    	mov    %edx,0xeee0(%eax)
	//======================

	return disk_read_error;
f010c2b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c2b4:	c9                   	leave  
f010c2b5:	c3                   	ret    

f010c2b6 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f010c2b6:	55                   	push   %ebp
f010c2b7:	89 e5                	mov    %esp,%ebp
f010c2b9:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010c2bc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2bf:	8b 40 64             	mov    0x64(%eax),%eax
f010c2c2:	85 c0                	test   %eax,%eax
f010c2c4:	74 63                	je     f010c329 <pf_remove_env_page+0x73>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
f010c2c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c2c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2cc:	8b 40 64             	mov    0x64(%eax),%eax
f010c2cf:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010c2d2:	51                   	push   %ecx
f010c2d3:	6a 00                	push   $0x0
f010c2d5:	52                   	push   %edx
f010c2d6:	50                   	push   %eax
f010c2d7:	e8 c6 fa ff ff       	call   f010bda2 <get_disk_page_table>
f010c2dc:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010c2df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c2e2:	85 c0                	test   %eax,%eax
f010c2e4:	74 46                	je     f010c32c <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010c2e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c2e9:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c2ec:	c1 ea 0c             	shr    $0xc,%edx
f010c2ef:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c2f5:	c1 e2 02             	shl    $0x2,%edx
f010c2f8:	01 d0                	add    %edx,%eax
f010c2fa:	8b 00                	mov    (%eax),%eax
f010c2fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010c2ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c302:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c305:	c1 ea 0c             	shr    $0xc,%edx
f010c308:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010c30e:	c1 e2 02             	shl    $0x2,%edx
f010c311:	01 d0                	add    %edx,%eax
f010c313:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010c319:	83 ec 0c             	sub    $0xc,%esp
f010c31c:	ff 75 f4             	pushl  -0xc(%ebp)
f010c31f:	e8 d1 f9 ff ff       	call   f010bcf5 <free_disk_frame>
f010c324:	83 c4 10             	add    $0x10,%esp
f010c327:	eb 04                	jmp    f010c32d <pf_remove_env_page+0x77>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010c329:	90                   	nop
f010c32a:	eb 01                	jmp    f010c32d <pf_remove_env_page+0x77>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010c32c:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010c32d:	c9                   	leave  
f010c32e:	c3                   	ret    

f010c32f <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010c32f:	55                   	push   %ebp
f010c330:	89 e5                	mov    %esp,%ebp
f010c332:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c335:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c33c:	e9 ee 00 00 00       	jmp    f010c42f <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010c341:	8b 45 08             	mov    0x8(%ebp),%eax
f010c344:	8b 40 64             	mov    0x64(%eax),%eax
f010c347:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c34a:	c1 e2 02             	shl    $0x2,%edx
f010c34d:	01 d0                	add    %edx,%eax
f010c34f:	8b 00                	mov    (%eax),%eax
f010c351:	83 e0 01             	and    $0x1,%eax
f010c354:	85 c0                	test   %eax,%eax
f010c356:	0f 84 cf 00 00 00    	je     f010c42b <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010c35c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c35f:	8b 40 64             	mov    0x64(%eax),%eax
f010c362:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c365:	c1 e2 02             	shl    $0x2,%edx
f010c368:	01 d0                	add    %edx,%eax
f010c36a:	8b 00                	mov    (%eax),%eax
f010c36c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c371:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
		#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f010c374:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c377:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c37a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c37d:	c1 e8 0c             	shr    $0xc,%eax
f010c380:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c383:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010c388:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c38b:	72 17                	jb     f010c3a4 <pf_free_env+0x75>
f010c38d:	ff 75 e8             	pushl  -0x18(%ebp)
f010c390:	68 dc df 11 f0       	push   $0xf011dfdc
f010c395:	68 90 01 00 00       	push   $0x190
f010c39a:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c39f:	e8 ef 3d ff ff       	call   f0100193 <_panic>
f010c3a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c3a7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c3ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
		#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010c3af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c3b6:	eb 3a                	jmp    f010c3f2 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010c3b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c3bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c3c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c3c5:	01 d0                	add    %edx,%eax
f010c3c7:	8b 00                	mov    (%eax),%eax
f010c3c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f010c3cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c3cf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c3d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c3d9:	01 d0                	add    %edx,%eax
f010c3db:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f010c3e1:	83 ec 0c             	sub    $0xc,%esp
f010c3e4:	ff 75 dc             	pushl  -0x24(%ebp)
f010c3e7:	e8 09 f9 ff ff       	call   f010bcf5 <free_disk_frame>
f010c3ec:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010c3ef:	ff 45 f0             	incl   -0x10(%ebp)
f010c3f2:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010c3f9:	76 bd                	jbe    f010c3b8 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f010c3fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3fe:	8b 40 64             	mov    0x64(%eax),%eax
f010c401:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c404:	c1 e2 02             	shl    $0x2,%edx
f010c407:	01 d0                	add    %edx,%eax
f010c409:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
		#else
		{
			decrement_references(to_frame_info(pa));
f010c40f:	83 ec 0c             	sub    $0xc,%esp
f010c412:	ff 75 ec             	pushl  -0x14(%ebp)
f010c415:	e8 38 f6 ff ff       	call   f010ba52 <to_frame_info>
f010c41a:	83 c4 10             	add    $0x10,%esp
f010c41d:	83 ec 0c             	sub    $0xc,%esp
f010c420:	50                   	push   %eax
f010c421:	e8 18 7a ff ff       	call   f0103e3e <decrement_references>
f010c426:	83 c4 10             	add    $0x10,%esp
f010c429:	eb 01                	jmp    f010c42c <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f010c42b:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c42c:	ff 45 f4             	incl   -0xc(%ebp)
f010c42f:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010c436:	0f 86 05 ff ff ff    	jbe    f010c341 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
	#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f010c43c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c43f:	8b 40 68             	mov    0x68(%eax),%eax
f010c442:	83 ec 0c             	sub    $0xc,%esp
f010c445:	50                   	push   %eax
f010c446:	e8 07 f6 ff ff       	call   f010ba52 <to_frame_info>
f010c44b:	83 c4 10             	add    $0x10,%esp
f010c44e:	83 ec 0c             	sub    $0xc,%esp
f010c451:	50                   	push   %eax
f010c452:	e8 e7 79 ff ff       	call   f0103e3e <decrement_references>
f010c457:	83 c4 10             	add    $0x10,%esp
	}
	#endif
	ptr_env->disk_env_pgdir = 0;
f010c45a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c45d:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f010c464:	8b 45 08             	mov    0x8(%ebp),%eax
f010c467:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010c46e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c471:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c474:	85 c0                	test   %eax,%eax
f010c476:	74 42                	je     f010c4ba <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010c478:	83 ec 0c             	sub    $0xc,%esp
f010c47b:	ff 75 08             	pushl  0x8(%ebp)
f010c47e:	e8 ee 03 00 00       	call   f010c871 <__pf_remove_env_all_tables>
f010c483:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
	#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f010c486:	8b 45 08             	mov    0x8(%ebp),%eax
f010c489:	8b 40 70             	mov    0x70(%eax),%eax
f010c48c:	83 ec 0c             	sub    $0xc,%esp
f010c48f:	50                   	push   %eax
f010c490:	e8 bd f5 ff ff       	call   f010ba52 <to_frame_info>
f010c495:	83 c4 10             	add    $0x10,%esp
f010c498:	83 ec 0c             	sub    $0xc,%esp
f010c49b:	50                   	push   %eax
f010c49c:	e8 9d 79 ff ff       	call   f0103e3e <decrement_references>
f010c4a1:	83 c4 10             	add    $0x10,%esp
	}
	#endif
	ptr_env->disk_env_tabledir = 0;
f010c4a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4a7:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010c4ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4b1:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f010c4b8:	eb 01                	jmp    f010c4bb <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010c4ba:	90                   	nop
	}
	#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010c4bb:	c9                   	leave  
f010c4bc:	c3                   	ret    

f010c4bd <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010c4bd:	55                   	push   %ebp
f010c4be:	89 e5                	mov    %esp,%ebp
f010c4c0:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010c4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c4c6:	8b 50 64             	mov    0x64(%eax),%edx
f010c4c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c4cc:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f010c4ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c4d1:	8b 00                	mov    (%eax),%eax
f010c4d3:	85 c0                	test   %eax,%eax
f010c4d5:	0f 85 aa 00 00 00    	jne    f010c585 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
		#else
		{
			int r;
			struct Frame_Info *p = NULL;
f010c4db:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f010c4e2:	83 ec 0c             	sub    $0xc,%esp
f010c4e5:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c4e8:	50                   	push   %eax
f010c4e9:	e8 01 78 ff ff       	call   f0103cef <allocate_frame>
f010c4ee:	83 c4 10             	add    $0x10,%esp
f010c4f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c4f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c4f8:	79 08                	jns    f010c502 <get_disk_page_directory+0x45>
				return r;
f010c4fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c4fd:	e9 88 00 00 00       	jmp    f010c58a <get_disk_page_directory+0xcd>
			p->references = 1;
f010c502:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c505:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010c50b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c50e:	83 ec 0c             	sub    $0xc,%esp
f010c511:	50                   	push   %eax
f010c512:	e8 28 f5 ff ff       	call   f010ba3f <to_physical_address>
f010c517:	83 c4 10             	add    $0x10,%esp
f010c51a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c51d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c520:	c1 e8 0c             	shr    $0xc,%eax
f010c523:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010c526:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010c52b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010c52e:	72 17                	jb     f010c547 <get_disk_page_directory+0x8a>
f010c530:	ff 75 f0             	pushl  -0x10(%ebp)
f010c533:	68 dc df 11 f0       	push   $0xf011dfdc
f010c538:	68 e8 01 00 00       	push   $0x1e8
f010c53d:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c542:	e8 4c 3c ff ff       	call   f0100193 <_panic>
f010c547:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c54a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c54f:	89 c2                	mov    %eax,%edx
f010c551:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c554:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f010c556:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c559:	83 ec 0c             	sub    $0xc,%esp
f010c55c:	50                   	push   %eax
f010c55d:	e8 dd f4 ff ff       	call   f010ba3f <to_physical_address>
f010c562:	83 c4 10             	add    $0x10,%esp
f010c565:	89 c2                	mov    %eax,%edx
f010c567:	8b 45 08             	mov    0x8(%ebp),%eax
f010c56a:	89 50 68             	mov    %edx,0x68(%eax)
		}
		#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010c56d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c570:	8b 00                	mov    (%eax),%eax
f010c572:	83 ec 04             	sub    $0x4,%esp
f010c575:	68 00 10 00 00       	push   $0x1000
f010c57a:	6a 00                	push   $0x0
f010c57c:	50                   	push   %eax
f010c57d:	e8 ee d4 00 00       	call   f0119a70 <memset>
f010c582:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010c585:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c58a:	c9                   	leave  
f010c58b:	c3                   	ret    

f010c58c <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010c58c:	55                   	push   %ebp
f010c58d:	89 e5                	mov    %esp,%ebp
f010c58f:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f010c592:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010c599:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c5a0:	e9 a6 00 00 00       	jmp    f010c64b <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f010c5a5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5a8:	8b 40 64             	mov    0x64(%eax),%eax
f010c5ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c5ae:	c1 e2 02             	shl    $0x2,%edx
f010c5b1:	01 d0                	add    %edx,%eax
f010c5b3:	8b 00                	mov    (%eax),%eax
f010c5b5:	83 e0 01             	and    $0x1,%eax
f010c5b8:	85 c0                	test   %eax,%eax
f010c5ba:	0f 84 87 00 00 00    	je     f010c647 <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f010c5c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5c3:	8b 40 64             	mov    0x64(%eax),%eax
f010c5c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c5c9:	c1 e2 02             	shl    $0x2,%edx
f010c5cc:	01 d0                	add    %edx,%eax
f010c5ce:	8b 00                	mov    (%eax),%eax
f010c5d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c5d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
		#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f010c5d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c5db:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c5de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c5e1:	c1 e8 0c             	shr    $0xc,%eax
f010c5e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c5e7:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010c5ec:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f010c5ef:	72 17                	jb     f010c608 <pf_calculate_allocated_pages+0x7c>
f010c5f1:	ff 75 e4             	pushl  -0x1c(%ebp)
f010c5f4:	68 dc df 11 f0       	push   $0xf011dfdc
f010c5f9:	68 08 02 00 00       	push   $0x208
f010c5fe:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c603:	e8 8b 3b ff ff       	call   f0100193 <_panic>
f010c608:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c60b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c610:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
		#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010c613:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010c61a:	eb 20                	jmp    f010c63c <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f010c61c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c61f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c626:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c629:	01 d0                	add    %edx,%eax
f010c62b:	8b 00                	mov    (%eax),%eax
f010c62d:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f010c630:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010c634:	74 03                	je     f010c639 <pf_calculate_allocated_pages+0xad>
				counter ++;
f010c636:	ff 45 f0             	incl   -0x10(%ebp)
		}
		#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010c639:	ff 45 ec             	incl   -0x14(%ebp)
f010c63c:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010c643:	76 d7                	jbe    f010c61c <pf_calculate_allocated_pages+0x90>
f010c645:	eb 01                	jmp    f010c648 <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010c647:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010c648:	ff 45 f4             	incl   -0xc(%ebp)
f010c64b:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010c652:	0f 86 4d ff ff ff    	jbe    f010c5a5 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010c658:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010c65b:	c9                   	leave  
f010c65c:	c3                   	ret    

f010c65d <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f010c65d:	55                   	push   %ebp
f010c65e:	89 e5                	mov    %esp,%ebp
f010c660:	83 ec 10             	sub    $0x10,%esp
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010c663:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010c66a:	a1 38 12 3b f0       	mov    0xf03b1238,%eax
f010c66f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010c672:	eb 0b                	jmp    f010c67f <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010c674:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010c677:	a1 40 12 3b f0       	mov    0xf03b1240,%eax
f010c67c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010c67f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c683:	74 07                	je     f010c68c <pf_calculate_free_frames+0x2f>
f010c685:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c688:	8b 00                	mov    (%eax),%eax
f010c68a:	eb 05                	jmp    f010c691 <pf_calculate_free_frames+0x34>
f010c68c:	b8 00 00 00 00       	mov    $0x0,%eax
f010c691:	a3 40 12 3b f0       	mov    %eax,0xf03b1240
f010c696:	a1 40 12 3b f0       	mov    0xf03b1240,%eax
f010c69b:	85 c0                	test   %eax,%eax
f010c69d:	75 d5                	jne    f010c674 <pf_calculate_free_frames+0x17>
f010c69f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c6a3:	75 cf                	jne    f010c674 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f010c6a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010c6a8:	c9                   	leave  
f010c6a9:	c3                   	ret    

f010c6aa <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f010c6aa:	55                   	push   %ebp
f010c6ab:	89 e5                	mov    %esp,%ebp
f010c6ad:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010c6b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c6b3:	8b 50 6c             	mov    0x6c(%eax),%edx
f010c6b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c6b9:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f010c6bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c6be:	8b 00                	mov    (%eax),%eax
f010c6c0:	85 c0                	test   %eax,%eax
f010c6c2:	0f 85 aa 00 00 00    	jne    f010c772 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
		#else
		{
			int r;
			struct Frame_Info *p = NULL;
f010c6c8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f010c6cf:	83 ec 0c             	sub    $0xc,%esp
f010c6d2:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010c6d5:	50                   	push   %eax
f010c6d6:	e8 14 76 ff ff       	call   f0103cef <allocate_frame>
f010c6db:	83 c4 10             	add    $0x10,%esp
f010c6de:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c6e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c6e5:	79 08                	jns    f010c6ef <get_disk_table_directory+0x45>
				return r;
f010c6e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c6ea:	e9 88 00 00 00       	jmp    f010c777 <get_disk_table_directory+0xcd>
			p->references = 1;
f010c6ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c6f2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f010c6f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c6fb:	83 ec 0c             	sub    $0xc,%esp
f010c6fe:	50                   	push   %eax
f010c6ff:	e8 3b f3 ff ff       	call   f010ba3f <to_physical_address>
f010c704:	83 c4 10             	add    $0x10,%esp
f010c707:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c70a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c70d:	c1 e8 0c             	shr    $0xc,%eax
f010c710:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010c713:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f010c718:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010c71b:	72 17                	jb     f010c734 <get_disk_table_directory+0x8a>
f010c71d:	ff 75 f0             	pushl  -0x10(%ebp)
f010c720:	68 dc df 11 f0       	push   $0xf011dfdc
f010c725:	68 46 02 00 00       	push   $0x246
f010c72a:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c72f:	e8 5f 3a ff ff       	call   f0100193 <_panic>
f010c734:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c737:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c73c:	89 c2                	mov    %eax,%edx
f010c73e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c741:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010c743:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c746:	83 ec 0c             	sub    $0xc,%esp
f010c749:	50                   	push   %eax
f010c74a:	e8 f0 f2 ff ff       	call   f010ba3f <to_physical_address>
f010c74f:	83 c4 10             	add    $0x10,%esp
f010c752:	89 c2                	mov    %eax,%edx
f010c754:	8b 45 08             	mov    0x8(%ebp),%eax
f010c757:	89 50 70             	mov    %edx,0x70(%eax)
		}
		#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f010c75a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c75d:	8b 00                	mov    (%eax),%eax
f010c75f:	83 ec 04             	sub    $0x4,%esp
f010c762:	68 00 10 00 00       	push   $0x1000
f010c767:	6a 00                	push   $0x0
f010c769:	50                   	push   %eax
f010c76a:	e8 01 d3 00 00       	call   f0119a70 <memset>
f010c76f:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010c772:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c777:	c9                   	leave  
f010c778:	c3                   	ret    

f010c779 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010c779:	55                   	push   %ebp
f010c77a:	89 e5                	mov    %esp,%ebp
f010c77c:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010c77f:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010c786:	76 19                	jbe    f010c7a1 <__pf_write_env_table+0x28>
f010c788:	68 0c e0 11 f0       	push   $0xf011e00c
f010c78d:	68 32 e0 11 f0       	push   $0xf011e032
f010c792:	68 54 02 00 00       	push   $0x254
f010c797:	68 c8 df 11 f0       	push   $0xf011dfc8
f010c79c:	e8 f2 39 ff ff       	call   f0100193 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010c7a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7a4:	83 c0 6c             	add    $0x6c,%eax
f010c7a7:	83 ec 08             	sub    $0x8,%esp
f010c7aa:	50                   	push   %eax
f010c7ab:	ff 75 08             	pushl  0x8(%ebp)
f010c7ae:	e8 f7 fe ff ff       	call   f010c6aa <get_disk_table_directory>
f010c7b3:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c7b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7b9:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c7bc:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c7bf:	c1 ea 16             	shr    $0x16,%edx
f010c7c2:	c1 e2 02             	shl    $0x2,%edx
f010c7c5:	01 d0                	add    %edx,%eax
f010c7c7:	8b 00                	mov    (%eax),%eax
f010c7c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010c7cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c7cf:	85 c0                	test   %eax,%eax
f010c7d1:	75 31                	jne    f010c804 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010c7d3:	83 ec 0c             	sub    $0xc,%esp
f010c7d6:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c7d9:	50                   	push   %eax
f010c7da:	e8 69 f4 ff ff       	call   f010bc48 <allocate_disk_frame>
f010c7df:	83 c4 10             	add    $0x10,%esp
f010c7e2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010c7e5:	75 07                	jne    f010c7ee <__pf_write_env_table+0x75>
f010c7e7:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010c7ec:	eb 2e                	jmp    f010c81c <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f010c7ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010c7f1:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c7f4:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c7f7:	c1 ea 16             	shr    $0x16,%edx
f010c7fa:	c1 e2 02             	shl    $0x2,%edx
f010c7fd:	01 c2                	add    %eax,%edx
f010c7ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c802:	89 02                	mov    %eax,(%edx)
//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010c804:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c807:	83 ec 08             	sub    $0x8,%esp
f010c80a:	ff 75 10             	pushl  0x10(%ebp)
f010c80d:	50                   	push   %eax
f010c80e:	e8 b4 f2 ff ff       	call   f010bac7 <write_disk_page>
f010c813:	83 c4 10             	add    $0x10,%esp
f010c816:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010c819:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c81c:	c9                   	leave  
f010c81d:	c3                   	ret    

f010c81e <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010c81e:	55                   	push   %ebp
f010c81f:	89 e5                	mov    %esp,%ebp
f010c821:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010c824:	8b 45 08             	mov    0x8(%ebp),%eax
f010c827:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c82a:	85 c0                	test   %eax,%eax
f010c82c:	75 07                	jne    f010c835 <__pf_read_env_table+0x17>
f010c82e:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010c833:	eb 3a                	jmp    f010c86f <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c835:	8b 45 08             	mov    0x8(%ebp),%eax
f010c838:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c83b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c83e:	c1 ea 16             	shr    $0x16,%edx
f010c841:	c1 e2 02             	shl    $0x2,%edx
f010c844:	01 d0                	add    %edx,%eax
f010c846:	8b 00                	mov    (%eax),%eax
f010c848:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010c84b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c84f:	75 07                	jne    f010c858 <__pf_read_env_table+0x3a>
f010c851:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010c856:	eb 17                	jmp    f010c86f <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f010c858:	83 ec 08             	sub    $0x8,%esp
f010c85b:	ff 75 10             	pushl  0x10(%ebp)
f010c85e:	ff 75 f4             	pushl  -0xc(%ebp)
f010c861:	e8 32 f2 ff ff       	call   f010ba98 <read_disk_page>
f010c866:	83 c4 10             	add    $0x10,%esp
f010c869:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f010c86c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010c86f:	c9                   	leave  
f010c870:	c3                   	ret    

f010c871 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010c871:	55                   	push   %ebp
f010c872:	89 e5                	mov    %esp,%ebp
f010c874:	83 ec 10             	sub    $0x10,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010c877:	8b 45 08             	mov    0x8(%ebp),%eax
f010c87a:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c87d:	85 c0                	test   %eax,%eax
f010c87f:	74 49                	je     f010c8ca <__pf_remove_env_all_tables+0x59>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c881:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010c888:	eb 35                	jmp    f010c8bf <__pf_remove_env_all_tables+0x4e>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f010c88a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c88d:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c890:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c893:	c1 e2 02             	shl    $0x2,%edx
f010c896:	01 d0                	add    %edx,%eax
f010c898:	8b 00                	mov    (%eax),%eax
f010c89a:	89 45 f8             	mov    %eax,-0x8(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f010c89d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a0:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c8a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c8a6:	c1 e2 02             	shl    $0x2,%edx
f010c8a9:	01 d0                	add    %edx,%eax
f010c8ab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f010c8b1:	ff 75 f8             	pushl  -0x8(%ebp)
f010c8b4:	e8 3c f4 ff ff       	call   f010bcf5 <free_disk_frame>
f010c8b9:	83 c4 04             	add    $0x4,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c8bc:	ff 45 fc             	incl   -0x4(%ebp)
f010c8bf:	81 7d fc ba 03 00 00 	cmpl   $0x3ba,-0x4(%ebp)
f010c8c6:	76 c2                	jbe    f010c88a <__pf_remove_env_all_tables+0x19>
f010c8c8:	eb 01                	jmp    f010c8cb <__pf_remove_env_all_tables+0x5a>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010c8ca:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f010c8cb:	c9                   	leave  
f010c8cc:	c3                   	ret    

f010c8cd <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f010c8cd:	55                   	push   %ebp
f010c8ce:	89 e5                	mov    %esp,%ebp
f010c8d0:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010c8d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c8d7:	75 10                	jne    f010c8e9 <__pf_remove_env_table+0x1c>
			cprintf("REMOVING table 0 from page file\n");
f010c8d9:	83 ec 0c             	sub    $0xc,%esp
f010c8dc:	68 48 e0 11 f0       	push   $0xf011e048
f010c8e1:	e8 bd ac ff ff       	call   f01075a3 <cprintf>
f010c8e6:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010c8e9:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ec:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c8ef:	85 c0                	test   %eax,%eax
f010c8f1:	74 3d                	je     f010c930 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c8f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8f6:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c8f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c8fc:	c1 ea 16             	shr    $0x16,%edx
f010c8ff:	c1 e2 02             	shl    $0x2,%edx
f010c902:	01 d0                	add    %edx,%eax
f010c904:	8b 00                	mov    (%eax),%eax
f010c906:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010c909:	8b 45 08             	mov    0x8(%ebp),%eax
f010c90c:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c90f:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c912:	c1 ea 16             	shr    $0x16,%edx
f010c915:	c1 e2 02             	shl    $0x2,%edx
f010c918:	01 d0                	add    %edx,%eax
f010c91a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010c920:	83 ec 0c             	sub    $0xc,%esp
f010c923:	ff 75 f4             	pushl  -0xc(%ebp)
f010c926:	e8 ca f3 ff ff       	call   f010bcf5 <free_disk_frame>
f010c92b:	83 c4 10             	add    $0x10,%esp
f010c92e:	eb 01                	jmp    f010c931 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
			cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010c930:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f010c931:	c9                   	leave  
f010c932:	c3                   	ret    

f010c933 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010c933:	55                   	push   %ebp
f010c934:	89 e5                	mov    %esp,%ebp
f010c936:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010c939:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010c940:	eb 1f                	jmp    f010c961 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010c942:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c945:	83 ec 04             	sub    $0x4,%esp
f010c948:	6a 08                	push   $0x8
f010c94a:	ff 75 08             	pushl  0x8(%ebp)
f010c94d:	50                   	push   %eax
f010c94e:	e8 c2 d7 00 00       	call   f011a115 <ide_write>
f010c953:	83 c4 10             	add    $0x10,%esp
f010c956:	85 c0                	test   %eax,%eax
f010c958:	75 12                	jne    f010c96c <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010c95a:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f010c961:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010c968:	7e d8                	jle    f010c942 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010c96a:	eb 01                	jmp    f010c96d <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010c96c:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010c96d:	90                   	nop
f010c96e:	c9                   	leave  
f010c96f:	c3                   	ret    

f010c970 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010c970:	55                   	push   %ebp
f010c971:	89 e5                	mov    %esp,%ebp
f010c973:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c976:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c97d:	e9 aa 00 00 00       	jmp    f010ca2c <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010c982:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c985:	89 d0                	mov    %edx,%eax
f010c987:	c1 e0 02             	shl    $0x2,%eax
f010c98a:	01 d0                	add    %edx,%eax
f010c98c:	01 c0                	add    %eax,%eax
f010c98e:	01 d0                	add    %edx,%eax
f010c990:	01 c0                	add    %eax,%eax
f010c992:	01 d0                	add    %edx,%eax
f010c994:	c1 e0 02             	shl    $0x2,%eax
f010c997:	05 e0 c0 38 f0       	add    $0xf038c0e0,%eax
f010c99c:	83 ec 04             	sub    $0x4,%esp
f010c99f:	6a 5c                	push   $0x5c
f010c9a1:	6a 00                	push   $0x0
f010c9a3:	50                   	push   %eax
f010c9a4:	e8 c7 d0 00 00       	call   f0119a70 <memset>
f010c9a9:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010c9ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c9af:	89 d0                	mov    %edx,%eax
f010c9b1:	c1 e0 02             	shl    $0x2,%eax
f010c9b4:	01 d0                	add    %edx,%eax
f010c9b6:	01 c0                	add    %eax,%eax
f010c9b8:	01 d0                	add    %edx,%eax
f010c9ba:	01 c0                	add    %eax,%eax
f010c9bc:	01 d0                	add    %edx,%eax
f010c9be:	c1 e0 02             	shl    $0x2,%eax
f010c9c1:	05 38 c1 38 f0       	add    $0xf038c138,%eax
f010c9c6:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010c9c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c9cc:	89 d0                	mov    %edx,%eax
f010c9ce:	c1 e0 02             	shl    $0x2,%eax
f010c9d1:	01 d0                	add    %edx,%eax
f010c9d3:	01 c0                	add    %eax,%eax
f010c9d5:	01 d0                	add    %edx,%eax
f010c9d7:	01 c0                	add    %eax,%eax
f010c9d9:	01 d0                	add    %edx,%eax
f010c9db:	c1 e0 02             	shl    $0x2,%eax
f010c9de:	05 24 c1 38 f0       	add    $0xf038c124,%eax
f010c9e3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010c9e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c9ec:	89 d0                	mov    %edx,%eax
f010c9ee:	c1 e0 02             	shl    $0x2,%eax
f010c9f1:	01 d0                	add    %edx,%eax
f010c9f3:	01 c0                	add    %eax,%eax
f010c9f5:	01 d0                	add    %edx,%eax
f010c9f7:	01 c0                	add    %eax,%eax
f010c9f9:	01 d0                	add    %edx,%eax
f010c9fb:	c1 e0 02             	shl    $0x2,%eax
f010c9fe:	05 28 c1 38 f0       	add    $0xf038c128,%eax
f010ca03:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ca09:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca0c:	89 d0                	mov    %edx,%eax
f010ca0e:	c1 e0 02             	shl    $0x2,%eax
f010ca11:	01 d0                	add    %edx,%eax
f010ca13:	01 c0                	add    %eax,%eax
f010ca15:	01 d0                	add    %edx,%eax
f010ca17:	01 c0                	add    %eax,%eax
f010ca19:	01 d0                	add    %edx,%eax
f010ca1b:	c1 e0 02             	shl    $0x2,%eax
f010ca1e:	05 30 c1 38 f0       	add    $0xf038c130,%eax
f010ca23:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010ca29:	ff 45 f4             	incl   -0xc(%ebp)
f010ca2c:	81 7d f4 2b 01 00 00 	cmpl   $0x12b,-0xc(%ebp)
f010ca33:	0f 8e 49 ff ff ff    	jle    f010c982 <create_semaphores_array+0x12>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}
}
f010ca39:	90                   	nop
f010ca3a:	c9                   	leave  
f010ca3b:	c3                   	ret    

f010ca3c <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010ca3c:	55                   	push   %ebp
f010ca3d:	89 e5                	mov    %esp,%ebp
f010ca3f:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010ca42:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010ca49:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ca50:	eb 2b                	jmp    f010ca7d <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010ca52:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ca55:	89 d0                	mov    %edx,%eax
f010ca57:	c1 e0 02             	shl    $0x2,%eax
f010ca5a:	01 d0                	add    %edx,%eax
f010ca5c:	01 c0                	add    %eax,%eax
f010ca5e:	01 d0                	add    %edx,%eax
f010ca60:	01 c0                	add    %eax,%eax
f010ca62:	01 d0                	add    %edx,%eax
f010ca64:	c1 e0 02             	shl    $0x2,%eax
f010ca67:	05 38 c1 38 f0       	add    $0xf038c138,%eax
f010ca6c:	8a 00                	mov    (%eax),%al
f010ca6e:	84 c0                	test   %al,%al
f010ca70:	74 08                	je     f010ca7a <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010ca72:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ca75:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010ca78:	eb 0c                	jmp    f010ca86 <allocate_semaphore_object+0x4a>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010ca7a:	ff 45 f0             	incl   -0x10(%ebp)
f010ca7d:	81 7d f0 2b 01 00 00 	cmpl   $0x12b,-0x10(%ebp)
f010ca84:	7e cc                	jle    f010ca52 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010ca86:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010ca8a:	75 14                	jne    f010caa0 <allocate_semaphore_object+0x64>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010ca8c:	83 ec 04             	sub    $0x4,%esp
f010ca8f:	68 6c e0 11 f0       	push   $0xf011e06c
f010ca94:	6a 51                	push   $0x51
f010ca96:	68 bc e0 11 f0       	push   $0xf011e0bc
f010ca9b:	e8 f3 36 ff ff       	call   f0100193 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010caa0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010caa3:	89 d0                	mov    %edx,%eax
f010caa5:	c1 e0 02             	shl    $0x2,%eax
f010caa8:	01 d0                	add    %edx,%eax
f010caaa:	01 c0                	add    %eax,%eax
f010caac:	01 d0                	add    %edx,%eax
f010caae:	01 c0                	add    %eax,%eax
f010cab0:	01 d0                	add    %edx,%eax
f010cab2:	c1 e0 02             	shl    $0x2,%eax
f010cab5:	8d 90 e0 c0 38 f0    	lea    -0xfc73f20(%eax),%edx
f010cabb:	8b 45 08             	mov    0x8(%ebp),%eax
f010cabe:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010cac0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cac3:	89 d0                	mov    %edx,%eax
f010cac5:	c1 e0 02             	shl    $0x2,%eax
f010cac8:	01 d0                	add    %edx,%eax
f010caca:	01 c0                	add    %eax,%eax
f010cacc:	01 d0                	add    %edx,%eax
f010cace:	01 c0                	add    %eax,%eax
f010cad0:	01 d0                	add    %edx,%eax
f010cad2:	c1 e0 02             	shl    $0x2,%eax
f010cad5:	05 38 c1 38 f0       	add    $0xf038c138,%eax
f010cada:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010cadd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cae0:	c9                   	leave  
f010cae1:	c3                   	ret    

f010cae2 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010cae2:	55                   	push   %ebp
f010cae3:	89 e5                	mov    %esp,%ebp
f010cae5:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010cae8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010caef:	eb 7a                	jmp    f010cb6b <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010caf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010caf4:	89 d0                	mov    %edx,%eax
f010caf6:	c1 e0 02             	shl    $0x2,%eax
f010caf9:	01 d0                	add    %edx,%eax
f010cafb:	01 c0                	add    %eax,%eax
f010cafd:	01 d0                	add    %edx,%eax
f010caff:	01 c0                	add    %eax,%eax
f010cb01:	01 d0                	add    %edx,%eax
f010cb03:	c1 e0 02             	shl    $0x2,%eax
f010cb06:	05 38 c1 38 f0       	add    $0xf038c138,%eax
f010cb0b:	8a 00                	mov    (%eax),%al
f010cb0d:	84 c0                	test   %al,%al
f010cb0f:	75 56                	jne    f010cb67 <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010cb11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cb14:	89 d0                	mov    %edx,%eax
f010cb16:	c1 e0 02             	shl    $0x2,%eax
f010cb19:	01 d0                	add    %edx,%eax
f010cb1b:	01 c0                	add    %eax,%eax
f010cb1d:	01 d0                	add    %edx,%eax
f010cb1f:	01 c0                	add    %eax,%eax
f010cb21:	01 d0                	add    %edx,%eax
f010cb23:	c1 e0 02             	shl    $0x2,%eax
f010cb26:	05 e0 c0 38 f0       	add    $0xf038c0e0,%eax
f010cb2b:	8b 00                	mov    (%eax),%eax
f010cb2d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010cb30:	75 36                	jne    f010cb68 <get_semaphore_object_ID+0x86>
f010cb32:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cb35:	89 d0                	mov    %edx,%eax
f010cb37:	c1 e0 02             	shl    $0x2,%eax
f010cb3a:	01 d0                	add    %edx,%eax
f010cb3c:	01 c0                	add    %eax,%eax
f010cb3e:	01 d0                	add    %edx,%eax
f010cb40:	01 c0                	add    %eax,%eax
f010cb42:	01 d0                	add    %edx,%eax
f010cb44:	c1 e0 02             	shl    $0x2,%eax
f010cb47:	05 e0 c0 38 f0       	add    $0xf038c0e0,%eax
f010cb4c:	83 c0 04             	add    $0x4,%eax
f010cb4f:	83 ec 08             	sub    $0x8,%esp
f010cb52:	50                   	push   %eax
f010cb53:	ff 75 0c             	pushl  0xc(%ebp)
f010cb56:	e8 33 ce 00 00       	call   f011998e <strcmp>
f010cb5b:	83 c4 10             	add    $0x10,%esp
f010cb5e:	85 c0                	test   %eax,%eax
f010cb60:	75 06                	jne    f010cb68 <get_semaphore_object_ID+0x86>
		{
			return i;
f010cb62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cb65:	eb 16                	jmp    f010cb7d <get_semaphore_object_ID+0x9b>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010cb67:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010cb68:	ff 45 f4             	incl   -0xc(%ebp)
f010cb6b:	81 7d f4 2b 01 00 00 	cmpl   $0x12b,-0xc(%ebp)
f010cb72:	0f 8e 79 ff ff ff    	jle    f010caf1 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010cb78:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010cb7d:	c9                   	leave  
f010cb7e:	c3                   	ret    

f010cb7f <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010cb7f:	55                   	push   %ebp
f010cb80:	89 e5                	mov    %esp,%ebp
f010cb82:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010cb85:	81 7d 08 2b 01 00 00 	cmpl   $0x12b,0x8(%ebp)
f010cb8c:	76 0a                	jbe    f010cb98 <free_semaphore_object+0x19>
		return E_SEMAPHORE_NOT_EXISTS;
f010cb8e:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010cb93:	e9 ac 00 00 00       	jmp    f010cc44 <free_semaphore_object+0xc5>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010cb98:	8b 55 08             	mov    0x8(%ebp),%edx
f010cb9b:	89 d0                	mov    %edx,%eax
f010cb9d:	c1 e0 02             	shl    $0x2,%eax
f010cba0:	01 d0                	add    %edx,%eax
f010cba2:	01 c0                	add    %eax,%eax
f010cba4:	01 d0                	add    %edx,%eax
f010cba6:	01 c0                	add    %eax,%eax
f010cba8:	01 d0                	add    %edx,%eax
f010cbaa:	c1 e0 02             	shl    $0x2,%eax
f010cbad:	05 e0 c0 38 f0       	add    $0xf038c0e0,%eax
f010cbb2:	83 ec 04             	sub    $0x4,%esp
f010cbb5:	6a 5c                	push   $0x5c
f010cbb7:	6a 00                	push   $0x0
f010cbb9:	50                   	push   %eax
f010cbba:	e8 b1 ce 00 00       	call   f0119a70 <memset>
f010cbbf:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010cbc2:	8b 55 08             	mov    0x8(%ebp),%edx
f010cbc5:	89 d0                	mov    %edx,%eax
f010cbc7:	c1 e0 02             	shl    $0x2,%eax
f010cbca:	01 d0                	add    %edx,%eax
f010cbcc:	01 c0                	add    %eax,%eax
f010cbce:	01 d0                	add    %edx,%eax
f010cbd0:	01 c0                	add    %eax,%eax
f010cbd2:	01 d0                	add    %edx,%eax
f010cbd4:	c1 e0 02             	shl    $0x2,%eax
f010cbd7:	05 38 c1 38 f0       	add    $0xf038c138,%eax
f010cbdc:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010cbdf:	8b 55 08             	mov    0x8(%ebp),%edx
f010cbe2:	89 d0                	mov    %edx,%eax
f010cbe4:	c1 e0 02             	shl    $0x2,%eax
f010cbe7:	01 d0                	add    %edx,%eax
f010cbe9:	01 c0                	add    %eax,%eax
f010cbeb:	01 d0                	add    %edx,%eax
f010cbed:	01 c0                	add    %eax,%eax
f010cbef:	01 d0                	add    %edx,%eax
f010cbf1:	c1 e0 02             	shl    $0x2,%eax
f010cbf4:	05 24 c1 38 f0       	add    $0xf038c124,%eax
f010cbf9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010cbff:	8b 55 08             	mov    0x8(%ebp),%edx
f010cc02:	89 d0                	mov    %edx,%eax
f010cc04:	c1 e0 02             	shl    $0x2,%eax
f010cc07:	01 d0                	add    %edx,%eax
f010cc09:	01 c0                	add    %eax,%eax
f010cc0b:	01 d0                	add    %edx,%eax
f010cc0d:	01 c0                	add    %eax,%eax
f010cc0f:	01 d0                	add    %edx,%eax
f010cc11:	c1 e0 02             	shl    $0x2,%eax
f010cc14:	05 28 c1 38 f0       	add    $0xf038c128,%eax
f010cc19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010cc1f:	8b 55 08             	mov    0x8(%ebp),%edx
f010cc22:	89 d0                	mov    %edx,%eax
f010cc24:	c1 e0 02             	shl    $0x2,%eax
f010cc27:	01 d0                	add    %edx,%eax
f010cc29:	01 c0                	add    %eax,%eax
f010cc2b:	01 d0                	add    %edx,%eax
f010cc2d:	01 c0                	add    %eax,%eax
f010cc2f:	01 d0                	add    %edx,%eax
f010cc31:	c1 e0 02             	shl    $0x2,%eax
f010cc34:	05 30 c1 38 f0       	add    $0xf038c130,%eax
f010cc39:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010cc3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cc44:	c9                   	leave  
f010cc45:	c3                   	ret    

f010cc46 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010cc46:	55                   	push   %ebp
f010cc47:	89 e5                	mov    %esp,%ebp
f010cc49:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010cc4c:	83 ec 04             	sub    $0x4,%esp
f010cc4f:	68 d8 e0 11 f0       	push   $0xf011e0d8
f010cc54:	68 92 00 00 00       	push   $0x92
f010cc59:	68 bc e0 11 f0       	push   $0xf011e0bc
f010cc5e:	e8 30 35 ff ff       	call   f0100193 <_panic>

f010cc63 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010cc63:	55                   	push   %ebp
f010cc64:	89 e5                	mov    %esp,%ebp
f010cc66:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010cc69:	83 ec 04             	sub    $0x4,%esp
f010cc6c:	68 08 e1 11 f0       	push   $0xf011e108
f010cc71:	68 a6 00 00 00       	push   $0xa6
f010cc76:	68 bc e0 11 f0       	push   $0xf011e0bc
f010cc7b:	e8 13 35 ff ff       	call   f0100193 <_panic>

f010cc80 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010cc80:	55                   	push   %ebp
f010cc81:	89 e5                	mov    %esp,%ebp
f010cc83:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010cc86:	83 ec 04             	sub    $0x4,%esp
f010cc89:	68 34 e1 11 f0       	push   $0xf011e134
f010cc8e:	68 bc 00 00 00       	push   $0xbc
f010cc93:	68 bc e0 11 f0       	push   $0xf011e0bc
f010cc98:	e8 f6 34 ff ff       	call   f0100193 <_panic>

f010cc9d <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f010cc9d:	55                   	push   %ebp
f010cc9e:	89 e5                	mov    %esp,%ebp
f010cca0:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010cca3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ccaa:	eb 5f                	jmp    f010cd0b <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010ccac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ccaf:	89 d0                	mov    %edx,%eax
f010ccb1:	01 c0                	add    %eax,%eax
f010ccb3:	01 d0                	add    %edx,%eax
f010ccb5:	01 c0                	add    %eax,%eax
f010ccb7:	01 d0                	add    %edx,%eax
f010ccb9:	c1 e0 02             	shl    $0x2,%eax
f010ccbc:	01 d0                	add    %edx,%eax
f010ccbe:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ccc5:	01 d0                	add    %edx,%eax
f010ccc7:	c1 e0 04             	shl    $0x4,%eax
f010ccca:	05 80 61 32 f0       	add    $0xf0326180,%eax
f010cccf:	83 ec 04             	sub    $0x4,%esp
f010ccd2:	68 50 10 00 00       	push   $0x1050
f010ccd7:	6a 00                	push   $0x0
f010ccd9:	50                   	push   %eax
f010ccda:	e8 91 cd 00 00       	call   f0119a70 <memset>
f010ccdf:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010cce2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cce5:	89 d0                	mov    %edx,%eax
f010cce7:	01 c0                	add    %eax,%eax
f010cce9:	01 d0                	add    %edx,%eax
f010cceb:	01 c0                	add    %eax,%eax
f010cced:	01 d0                	add    %edx,%eax
f010ccef:	c1 e0 02             	shl    $0x2,%eax
f010ccf2:	01 d0                	add    %edx,%eax
f010ccf4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ccfb:	01 d0                	add    %edx,%eax
f010ccfd:	c1 e0 04             	shl    $0x4,%eax
f010cd00:	05 cd 61 32 f0       	add    $0xf03261cd,%eax
f010cd05:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f010cd08:	ff 45 f4             	incl   -0xc(%ebp)
f010cd0b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010cd0f:	7e 9b                	jle    f010ccac <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f010cd11:	90                   	nop
f010cd12:	c9                   	leave  
f010cd13:	c3                   	ret    

f010cd14 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f010cd14:	55                   	push   %ebp
f010cd15:	89 e5                	mov    %esp,%ebp
f010cd17:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f010cd1a:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f010cd21:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010cd28:	eb 34                	jmp    f010cd5e <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f010cd2a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cd2d:	89 d0                	mov    %edx,%eax
f010cd2f:	01 c0                	add    %eax,%eax
f010cd31:	01 d0                	add    %edx,%eax
f010cd33:	01 c0                	add    %eax,%eax
f010cd35:	01 d0                	add    %edx,%eax
f010cd37:	c1 e0 02             	shl    $0x2,%eax
f010cd3a:	01 d0                	add    %edx,%eax
f010cd3c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cd43:	01 d0                	add    %edx,%eax
f010cd45:	c1 e0 04             	shl    $0x4,%eax
f010cd48:	05 cd 61 32 f0       	add    $0xf03261cd,%eax
f010cd4d:	8a 00                	mov    (%eax),%al
f010cd4f:	84 c0                	test   %al,%al
f010cd51:	74 08                	je     f010cd5b <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f010cd53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd56:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010cd59:	eb 09                	jmp    f010cd64 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f010cd5b:	ff 45 f0             	incl   -0x10(%ebp)
f010cd5e:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010cd62:	7e c6                	jle    f010cd2a <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f010cd64:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010cd68:	75 14                	jne    f010cd7e <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010cd6a:	83 ec 04             	sub    $0x4,%esp
f010cd6d:	68 64 e1 11 f0       	push   $0xf011e164
f010cd72:	6a 51                	push   $0x51
f010cd74:	68 b4 e1 11 f0       	push   $0xf011e1b4
f010cd79:	e8 15 34 ff ff       	call   f0100193 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010cd7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cd81:	89 d0                	mov    %edx,%eax
f010cd83:	01 c0                	add    %eax,%eax
f010cd85:	01 d0                	add    %edx,%eax
f010cd87:	01 c0                	add    %eax,%eax
f010cd89:	01 d0                	add    %edx,%eax
f010cd8b:	c1 e0 02             	shl    $0x2,%eax
f010cd8e:	01 d0                	add    %edx,%eax
f010cd90:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cd97:	01 d0                	add    %edx,%eax
f010cd99:	c1 e0 04             	shl    $0x4,%eax
f010cd9c:	8d 90 80 61 32 f0    	lea    -0xfcd9e80(%eax),%edx
f010cda2:	8b 45 08             	mov    0x8(%ebp),%eax
f010cda5:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010cda7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdaa:	89 d0                	mov    %edx,%eax
f010cdac:	01 c0                	add    %eax,%eax
f010cdae:	01 d0                	add    %edx,%eax
f010cdb0:	01 c0                	add    %eax,%eax
f010cdb2:	01 d0                	add    %edx,%eax
f010cdb4:	c1 e0 02             	shl    $0x2,%eax
f010cdb7:	01 d0                	add    %edx,%eax
f010cdb9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cdc0:	01 d0                	add    %edx,%eax
f010cdc2:	c1 e0 04             	shl    $0x4,%eax
f010cdc5:	05 cd 61 32 f0       	add    $0xf03261cd,%eax
f010cdca:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010cdcd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cdd0:	89 d0                	mov    %edx,%eax
f010cdd2:	01 c0                	add    %eax,%eax
f010cdd4:	01 d0                	add    %edx,%eax
f010cdd6:	01 c0                	add    %eax,%eax
f010cdd8:	01 d0                	add    %edx,%eax
f010cdda:	c1 e0 02             	shl    $0x2,%eax
f010cddd:	01 d0                	add    %edx,%eax
f010cddf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cde6:	01 d0                	add    %edx,%eax
f010cde8:	c1 e0 04             	shl    $0x4,%eax
f010cdeb:	83 c0 50             	add    $0x50,%eax
f010cdee:	05 80 61 32 f0       	add    $0xf0326180,%eax
f010cdf3:	83 ec 04             	sub    $0x4,%esp
f010cdf6:	68 00 10 00 00       	push   $0x1000
f010cdfb:	6a 00                	push   $0x0
f010cdfd:	50                   	push   %eax
f010cdfe:	e8 6d cc 00 00       	call   f0119a70 <memset>
f010ce03:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010ce06:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ce09:	c9                   	leave  
f010ce0a:	c3                   	ret    

f010ce0b <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f010ce0b:	55                   	push   %ebp
f010ce0c:	89 e5                	mov    %esp,%ebp
f010ce0e:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010ce11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f010ce18:	e9 95 00 00 00       	jmp    f010ceb2 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f010ce1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce20:	89 d0                	mov    %edx,%eax
f010ce22:	01 c0                	add    %eax,%eax
f010ce24:	01 d0                	add    %edx,%eax
f010ce26:	01 c0                	add    %eax,%eax
f010ce28:	01 d0                	add    %edx,%eax
f010ce2a:	c1 e0 02             	shl    $0x2,%eax
f010ce2d:	01 d0                	add    %edx,%eax
f010ce2f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ce36:	01 d0                	add    %edx,%eax
f010ce38:	c1 e0 04             	shl    $0x4,%eax
f010ce3b:	05 cd 61 32 f0       	add    $0xf03261cd,%eax
f010ce40:	8a 00                	mov    (%eax),%al
f010ce42:	84 c0                	test   %al,%al
f010ce44:	75 68                	jne    f010ceae <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f010ce46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce49:	89 d0                	mov    %edx,%eax
f010ce4b:	01 c0                	add    %eax,%eax
f010ce4d:	01 d0                	add    %edx,%eax
f010ce4f:	01 c0                	add    %eax,%eax
f010ce51:	01 d0                	add    %edx,%eax
f010ce53:	c1 e0 02             	shl    $0x2,%eax
f010ce56:	01 d0                	add    %edx,%eax
f010ce58:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ce5f:	01 d0                	add    %edx,%eax
f010ce61:	c1 e0 04             	shl    $0x4,%eax
f010ce64:	05 80 61 32 f0       	add    $0xf0326180,%eax
f010ce69:	8b 00                	mov    (%eax),%eax
f010ce6b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ce6e:	75 3f                	jne    f010ceaf <get_share_object_ID+0xa4>
f010ce70:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce73:	89 d0                	mov    %edx,%eax
f010ce75:	01 c0                	add    %eax,%eax
f010ce77:	01 d0                	add    %edx,%eax
f010ce79:	01 c0                	add    %eax,%eax
f010ce7b:	01 d0                	add    %edx,%eax
f010ce7d:	c1 e0 02             	shl    $0x2,%eax
f010ce80:	01 d0                	add    %edx,%eax
f010ce82:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010ce89:	01 d0                	add    %edx,%eax
f010ce8b:	c1 e0 04             	shl    $0x4,%eax
f010ce8e:	05 80 61 32 f0       	add    $0xf0326180,%eax
f010ce93:	83 c0 04             	add    $0x4,%eax
f010ce96:	83 ec 08             	sub    $0x8,%esp
f010ce99:	50                   	push   %eax
f010ce9a:	ff 75 0c             	pushl  0xc(%ebp)
f010ce9d:	e8 ec ca 00 00       	call   f011998e <strcmp>
f010cea2:	83 c4 10             	add    $0x10,%esp
f010cea5:	85 c0                	test   %eax,%eax
f010cea7:	75 06                	jne    f010ceaf <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f010cea9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ceac:	eb 13                	jmp    f010cec1 <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010ceae:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f010ceaf:	ff 45 f4             	incl   -0xc(%ebp)
f010ceb2:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010ceb6:	0f 8e 61 ff ff ff    	jle    f010ce1d <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f010cebc:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010cec1:	c9                   	leave  
f010cec2:	c3                   	ret    

f010cec3 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f010cec3:	55                   	push   %ebp
f010cec4:	89 e5                	mov    %esp,%ebp
f010cec6:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010cec9:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010cecd:	76 0a                	jbe    f010ced9 <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f010cecf:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010ced4:	e9 93 00 00 00       	jmp    f010cf6c <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010ced9:	8b 55 08             	mov    0x8(%ebp),%edx
f010cedc:	89 d0                	mov    %edx,%eax
f010cede:	01 c0                	add    %eax,%eax
f010cee0:	01 d0                	add    %edx,%eax
f010cee2:	01 c0                	add    %eax,%eax
f010cee4:	01 d0                	add    %edx,%eax
f010cee6:	c1 e0 02             	shl    $0x2,%eax
f010cee9:	01 d0                	add    %edx,%eax
f010ceeb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cef2:	01 d0                	add    %edx,%eax
f010cef4:	c1 e0 04             	shl    $0x4,%eax
f010cef7:	83 c0 50             	add    $0x50,%eax
f010cefa:	05 80 61 32 f0       	add    $0xf0326180,%eax
f010ceff:	83 ec 0c             	sub    $0xc,%esp
f010cf02:	50                   	push   %eax
f010cf03:	e8 f8 7d ff ff       	call   f0104d00 <clear_frames_storage>
f010cf08:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f010cf0b:	8b 55 08             	mov    0x8(%ebp),%edx
f010cf0e:	89 d0                	mov    %edx,%eax
f010cf10:	01 c0                	add    %eax,%eax
f010cf12:	01 d0                	add    %edx,%eax
f010cf14:	01 c0                	add    %eax,%eax
f010cf16:	01 d0                	add    %edx,%eax
f010cf18:	c1 e0 02             	shl    $0x2,%eax
f010cf1b:	01 d0                	add    %edx,%eax
f010cf1d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cf24:	01 d0                	add    %edx,%eax
f010cf26:	c1 e0 04             	shl    $0x4,%eax
f010cf29:	05 80 61 32 f0       	add    $0xf0326180,%eax
f010cf2e:	83 ec 04             	sub    $0x4,%esp
f010cf31:	68 50 10 00 00       	push   $0x1050
f010cf36:	6a 00                	push   $0x0
f010cf38:	50                   	push   %eax
f010cf39:	e8 32 cb 00 00       	call   f0119a70 <memset>
f010cf3e:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010cf41:	8b 55 08             	mov    0x8(%ebp),%edx
f010cf44:	89 d0                	mov    %edx,%eax
f010cf46:	01 c0                	add    %eax,%eax
f010cf48:	01 d0                	add    %edx,%eax
f010cf4a:	01 c0                	add    %eax,%eax
f010cf4c:	01 d0                	add    %edx,%eax
f010cf4e:	c1 e0 02             	shl    $0x2,%eax
f010cf51:	01 d0                	add    %edx,%eax
f010cf53:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010cf5a:	01 d0                	add    %edx,%eax
f010cf5c:	c1 e0 04             	shl    $0x4,%eax
f010cf5f:	05 cd 61 32 f0       	add    $0xf03261cd,%eax
f010cf64:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f010cf67:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cf6c:	c9                   	leave  
f010cf6d:	c3                   	ret    

f010cf6e <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cf6e:	55                   	push   %ebp
f010cf6f:	89 e5                	mov    %esp,%ebp
f010cf71:	83 ec 18             	sub    $0x18,%esp
f010cf74:	8b 45 14             	mov    0x14(%ebp),%eax
f010cf77:	88 45 f4             	mov    %al,-0xc(%ebp)
	panic("this function is not required...!!");
f010cf7a:	83 ec 04             	sub    $0x4,%esp
f010cf7d:	68 d4 e1 11 f0       	push   $0xf011e1d4
f010cf82:	68 a5 00 00 00       	push   $0xa5
f010cf87:	68 b4 e1 11 f0       	push   $0xf011e1b4
f010cf8c:	e8 02 32 ff ff       	call   f0100193 <_panic>

f010cf91 <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010cf91:	55                   	push   %ebp
f010cf92:	89 e5                	mov    %esp,%ebp
f010cf94:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010cf97:	83 ec 04             	sub    $0x4,%esp
f010cf9a:	68 d4 e1 11 f0       	push   $0xf011e1d4
f010cf9f:	68 ae 00 00 00       	push   $0xae
f010cfa4:	68 b4 e1 11 f0       	push   $0xf011e1b4
f010cfa9:	e8 e5 31 ff ff       	call   f0100193 <_panic>

f010cfae <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cfae:	55                   	push   %ebp
f010cfaf:	89 e5                	mov    %esp,%ebp
f010cfb1:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010cfb4:	83 ec 04             	sub    $0x4,%esp
f010cfb7:	68 d4 e1 11 f0       	push   $0xf011e1d4
f010cfbc:	68 b7 00 00 00       	push   $0xb7
f010cfc1:	68 b4 e1 11 f0       	push   $0xf011e1b4
f010cfc6:	e8 c8 31 ff ff       	call   f0100193 <_panic>

f010cfcb <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cfcb:	55                   	push   %ebp
f010cfcc:	89 e5                	mov    %esp,%ebp
f010cfce:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010cfd1:	83 ec 04             	sub    $0x4,%esp
f010cfd4:	68 d4 e1 11 f0       	push   $0xf011e1d4
f010cfd9:	68 c4 00 00 00       	push   $0xc4
f010cfde:	68 b4 e1 11 f0       	push   $0xf011e1b4
f010cfe3:	e8 ab 31 ff ff       	call   f0100193 <_panic>

f010cfe8 <kmalloc>:
#include <kern/kheap.h>
#include <kern/memory_manager.h>


void* kmalloc(unsigned int size)
{
f010cfe8:	55                   	push   %ebp
f010cfe9:	89 e5                	mov    %esp,%ebp
f010cfeb:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010cfee:	83 ec 04             	sub    $0x4,%esp
f010cff1:	68 f8 e1 11 f0       	push   $0xf011e1f8
f010cff6:	6a 08                	push   $0x8
f010cff8:	68 1b e2 11 f0       	push   $0xf011e21b
f010cffd:	e8 91 31 ff ff       	call   f0100193 <_panic>

f010d002 <kfree>:
	return NULL;
}

void kfree(void* virtual_address)
{
f010d002:	55                   	push   %ebp
f010d003:	89 e5                	mov    %esp,%ebp
f010d005:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d008:	83 ec 04             	sub    $0x4,%esp
f010d00b:	68 f8 e1 11 f0       	push   $0xf011e1f8
f010d010:	6a 0e                	push   $0xe
f010d012:	68 1b e2 11 f0       	push   $0xf011e21b
f010d017:	e8 77 31 ff ff       	call   f0100193 <_panic>

f010d01c <kheap_virtual_address>:
}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f010d01c:	55                   	push   %ebp
f010d01d:	89 e5                	mov    %esp,%ebp
f010d01f:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d022:	83 ec 04             	sub    $0x4,%esp
f010d025:	68 f8 e1 11 f0       	push   $0xf011e1f8
f010d02a:	6a 13                	push   $0x13
f010d02c:	68 1b e2 11 f0       	push   $0xf011e21b
f010d031:	e8 5d 31 ff ff       	call   f0100193 <_panic>

f010d036 <kheap_physical_address>:
	return 0;
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f010d036:	55                   	push   %ebp
f010d037:	89 e5                	mov    %esp,%ebp
f010d039:	83 ec 08             	sub    $0x8,%esp
	panic("this function is not required...!!");
f010d03c:	83 ec 04             	sub    $0x4,%esp
f010d03f:	68 f8 e1 11 f0       	push   $0xf011e1f8
f010d044:	6a 19                	push   $0x19
f010d046:	68 1b e2 11 f0       	push   $0xf011e21b
f010d04b:	e8 43 31 ff ff       	call   f0100193 <_panic>

f010d050 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f010d050:	55                   	push   %ebp
f010d051:	89 e5                	mov    %esp,%ebp
f010d053:	57                   	push   %edi
f010d054:	53                   	push   %ebx
f010d055:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f010d05b:	83 ec 0c             	sub    $0xc,%esp
f010d05e:	68 28 e2 11 f0       	push   $0xf011e228
f010d063:	e8 3b a5 ff ff       	call   f01075a3 <cprintf>
f010d068:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010d06b:	83 ec 0c             	sub    $0xc,%esp
f010d06e:	68 58 e2 11 f0       	push   $0xf011e258
f010d073:	e8 2b a5 ff ff       	call   f01075a3 <cprintf>
f010d078:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010d07b:	83 ec 0c             	sub    $0xc,%esp
f010d07e:	68 28 e2 11 f0       	push   $0xf011e228
f010d083:	e8 1b a5 ff ff       	call   f01075a3 <cprintf>
f010d088:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f010d08b:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f010d08f:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f010d093:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f010d099:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f010d09f:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f010d0a6:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f010d0ad:	e8 08 d9 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d0b2:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f010d0b5:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f010d0bb:	b9 14 00 00 00       	mov    $0x14,%ecx
f010d0c0:	b8 00 00 00 00       	mov    $0x0,%eax
f010d0c5:	89 d7                	mov    %edx,%edi
f010d0c7:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f010d0c9:	e8 ec d8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d0ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f010d0d1:	e8 87 f5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d0d6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f010d0d9:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010d0e0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d0e5:	0f b6 d0             	movzbl %al,%edx
f010d0e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d0eb:	01 d0                	add    %edx,%eax
f010d0ed:	48                   	dec    %eax
f010d0ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010d0f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d0f4:	ba 00 00 00 00       	mov    $0x0,%edx
f010d0f9:	f7 75 d4             	divl   -0x2c(%ebp)
f010d0fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d0ff:	29 d0                	sub    %edx,%eax
f010d101:	89 c1                	mov    %eax,%ecx
f010d103:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010d10a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d10f:	0f b6 c0             	movzbl %al,%eax
f010d112:	c1 e0 04             	shl    $0x4,%eax
f010d115:	89 c2                	mov    %eax,%edx
f010d117:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d11a:	01 d0                	add    %edx,%eax
f010d11c:	48                   	dec    %eax
f010d11d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010d120:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d123:	ba 00 00 00 00       	mov    $0x0,%edx
f010d128:	f7 75 cc             	divl   -0x34(%ebp)
f010d12b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d12e:	29 d0                	sub    %edx,%eax
f010d130:	01 c8                	add    %ecx,%eax
f010d132:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f010d137:	29 c2                	sub    %eax,%edx
f010d139:	89 d0                	mov    %edx,%eax
f010d13b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f010d13e:	83 ec 0c             	sub    $0xc,%esp
f010d141:	ff 75 c4             	pushl  -0x3c(%ebp)
f010d144:	e8 9f fe ff ff       	call   f010cfe8 <kmalloc>
f010d149:	83 c4 10             	add    $0x10,%esp
f010d14c:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f010d152:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010d158:	85 c0                	test   %eax,%eax
f010d15a:	74 14                	je     f010d170 <test_kmalloc+0x120>
f010d15c:	83 ec 04             	sub    $0x4,%esp
f010d15f:	68 b4 e2 11 f0       	push   $0xf011e2b4
f010d164:	6a 3a                	push   $0x3a
f010d166:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d16b:	e8 23 30 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d170:	e8 e8 f4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d175:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d178:	74 14                	je     f010d18e <test_kmalloc+0x13e>
f010d17a:	83 ec 04             	sub    $0x4,%esp
f010d17d:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d182:	6a 3b                	push   $0x3b
f010d184:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d189:	e8 05 30 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d18e:	e8 27 d8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d193:	89 c2                	mov    %eax,%edx
f010d195:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d198:	39 c2                	cmp    %eax,%edx
f010d19a:	74 14                	je     f010d1b0 <test_kmalloc+0x160>
f010d19c:	83 ec 04             	sub    $0x4,%esp
f010d19f:	68 60 e3 11 f0       	push   $0xf011e360
f010d1a4:	6a 3c                	push   $0x3c
f010d1a6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d1ab:	e8 e3 2f ff ff       	call   f0100193 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f010d1b0:	83 ec 0c             	sub    $0xc,%esp
f010d1b3:	68 a0 e3 11 f0       	push   $0xf011e3a0
f010d1b8:	e8 e6 a3 ff ff       	call   f01075a3 <cprintf>
f010d1bd:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010d1c0:	e8 f5 d7 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d1c5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d1c8:	e8 90 f4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d1cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010d1d0:	83 ec 0c             	sub    $0xc,%esp
f010d1d3:	68 00 fc 1f 00       	push   $0x1ffc00
f010d1d8:	e8 0b fe ff ff       	call   f010cfe8 <kmalloc>
f010d1dd:	83 c4 10             	add    $0x10,%esp
f010d1e0:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d1e6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010d1ec:	89 c1                	mov    %eax,%ecx
f010d1ee:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010d1f5:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d1fa:	0f b6 d0             	movzbl %al,%edx
f010d1fd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d200:	01 d0                	add    %edx,%eax
f010d202:	48                   	dec    %eax
f010d203:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010d206:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d209:	ba 00 00 00 00       	mov    $0x0,%edx
f010d20e:	f7 75 c0             	divl   -0x40(%ebp)
f010d211:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d214:	29 d0                	sub    %edx,%eax
f010d216:	89 c3                	mov    %eax,%ebx
f010d218:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010d21f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d224:	0f b6 c0             	movzbl %al,%eax
f010d227:	c1 e0 04             	shl    $0x4,%eax
f010d22a:	89 c2                	mov    %eax,%edx
f010d22c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010d22f:	01 d0                	add    %edx,%eax
f010d231:	48                   	dec    %eax
f010d232:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010d235:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d238:	ba 00 00 00 00       	mov    $0x0,%edx
f010d23d:	f7 75 b8             	divl   -0x48(%ebp)
f010d240:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d243:	29 d0                	sub    %edx,%eax
f010d245:	01 d8                	add    %ebx,%eax
f010d247:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010d24c:	39 c1                	cmp    %eax,%ecx
f010d24e:	74 14                	je     f010d264 <test_kmalloc+0x214>
f010d250:	83 ec 04             	sub    $0x4,%esp
f010d253:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d258:	6a 43                	push   $0x43
f010d25a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d25f:	e8 2f 2f ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d264:	e8 f4 f3 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d269:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d26c:	74 14                	je     f010d282 <test_kmalloc+0x232>
f010d26e:	83 ec 04             	sub    $0x4,%esp
f010d271:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d276:	6a 44                	push   $0x44
f010d278:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d27d:	e8 11 2f ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d282:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d285:	e8 30 d7 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d28a:	29 c3                	sub    %eax,%ebx
f010d28c:	89 d8                	mov    %ebx,%eax
f010d28e:	3d 00 02 00 00       	cmp    $0x200,%eax
f010d293:	74 14                	je     f010d2a9 <test_kmalloc+0x259>
f010d295:	83 ec 04             	sub    $0x4,%esp
f010d298:	68 60 e3 11 f0       	push   $0xf011e360
f010d29d:	6a 45                	push   $0x45
f010d29f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d2a4:	e8 ea 2e ff ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010d2a9:	e8 0c d7 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d2ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d2b1:	e8 a7 f3 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d2b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010d2b9:	83 ec 0c             	sub    $0xc,%esp
f010d2bc:	68 00 fc 1f 00       	push   $0x1ffc00
f010d2c1:	e8 22 fd ff ff       	call   f010cfe8 <kmalloc>
f010d2c6:	83 c4 10             	add    $0x10,%esp
f010d2c9:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d2cf:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010d2d5:	89 c1                	mov    %eax,%ecx
f010d2d7:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010d2de:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d2e3:	0f b6 d0             	movzbl %al,%edx
f010d2e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010d2e9:	01 d0                	add    %edx,%eax
f010d2eb:	48                   	dec    %eax
f010d2ec:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010d2ef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d2f2:	ba 00 00 00 00       	mov    $0x0,%edx
f010d2f7:	f7 75 b0             	divl   -0x50(%ebp)
f010d2fa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d2fd:	29 d0                	sub    %edx,%eax
f010d2ff:	89 c3                	mov    %eax,%ebx
f010d301:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010d308:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d30d:	0f b6 c0             	movzbl %al,%eax
f010d310:	c1 e0 04             	shl    $0x4,%eax
f010d313:	89 c2                	mov    %eax,%edx
f010d315:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010d318:	01 d0                	add    %edx,%eax
f010d31a:	48                   	dec    %eax
f010d31b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010d31e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d321:	ba 00 00 00 00       	mov    $0x0,%edx
f010d326:	f7 75 a8             	divl   -0x58(%ebp)
f010d329:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d32c:	29 d0                	sub    %edx,%eax
f010d32e:	01 d8                	add    %ebx,%eax
f010d330:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f010d335:	39 c1                	cmp    %eax,%ecx
f010d337:	74 14                	je     f010d34d <test_kmalloc+0x2fd>
f010d339:	83 ec 04             	sub    $0x4,%esp
f010d33c:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d341:	6a 4b                	push   $0x4b
f010d343:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d348:	e8 46 2e ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d34d:	e8 0b f3 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d352:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d355:	74 14                	je     f010d36b <test_kmalloc+0x31b>
f010d357:	83 ec 04             	sub    $0x4,%esp
f010d35a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d35f:	6a 4c                	push   $0x4c
f010d361:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d366:	e8 28 2e ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d36b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d36e:	e8 47 d6 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d373:	29 c3                	sub    %eax,%ebx
f010d375:	89 d8                	mov    %ebx,%eax
f010d377:	3d 00 02 00 00       	cmp    $0x200,%eax
f010d37c:	74 14                	je     f010d392 <test_kmalloc+0x342>
f010d37e:	83 ec 04             	sub    $0x4,%esp
f010d381:	68 60 e3 11 f0       	push   $0xf011e360
f010d386:	6a 4d                	push   $0x4d
f010d388:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d38d:	e8 01 2e ff ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010d392:	e8 23 d6 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d397:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d39a:	e8 be f2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d39f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010d3a2:	83 ec 0c             	sub    $0xc,%esp
f010d3a5:	68 00 08 00 00       	push   $0x800
f010d3aa:	e8 39 fc ff ff       	call   f010cfe8 <kmalloc>
f010d3af:	83 c4 10             	add    $0x10,%esp
f010d3b2:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d3b8:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010d3be:	89 c1                	mov    %eax,%ecx
f010d3c0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010d3c7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d3cc:	0f b6 d0             	movzbl %al,%edx
f010d3cf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010d3d2:	01 d0                	add    %edx,%eax
f010d3d4:	48                   	dec    %eax
f010d3d5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010d3d8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d3db:	ba 00 00 00 00       	mov    $0x0,%edx
f010d3e0:	f7 75 a0             	divl   -0x60(%ebp)
f010d3e3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d3e6:	29 d0                	sub    %edx,%eax
f010d3e8:	89 c3                	mov    %eax,%ebx
f010d3ea:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010d3f1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d3f6:	0f b6 c0             	movzbl %al,%eax
f010d3f9:	c1 e0 04             	shl    $0x4,%eax
f010d3fc:	89 c2                	mov    %eax,%edx
f010d3fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f010d401:	01 d0                	add    %edx,%eax
f010d403:	48                   	dec    %eax
f010d404:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010d407:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d40a:	ba 00 00 00 00       	mov    $0x0,%edx
f010d40f:	f7 75 98             	divl   -0x68(%ebp)
f010d412:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d415:	29 d0                	sub    %edx,%eax
f010d417:	01 d8                	add    %ebx,%eax
f010d419:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010d41e:	39 c1                	cmp    %eax,%ecx
f010d420:	74 14                	je     f010d436 <test_kmalloc+0x3e6>
f010d422:	83 ec 04             	sub    $0x4,%esp
f010d425:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d42a:	6a 53                	push   $0x53
f010d42c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d431:	e8 5d 2d ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d436:	e8 22 f2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d43b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d43e:	74 14                	je     f010d454 <test_kmalloc+0x404>
f010d440:	83 ec 04             	sub    $0x4,%esp
f010d443:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d448:	6a 54                	push   $0x54
f010d44a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d44f:	e8 3f 2d ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d454:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d457:	e8 5e d5 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d45c:	29 c3                	sub    %eax,%ebx
f010d45e:	89 d8                	mov    %ebx,%eax
f010d460:	83 f8 01             	cmp    $0x1,%eax
f010d463:	74 14                	je     f010d479 <test_kmalloc+0x429>
f010d465:	83 ec 04             	sub    $0x4,%esp
f010d468:	68 60 e3 11 f0       	push   $0xf011e360
f010d46d:	6a 55                	push   $0x55
f010d46f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d474:	e8 1a 2d ff ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010d479:	e8 3c d5 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d47e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d481:	e8 d7 f1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d486:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010d489:	83 ec 0c             	sub    $0xc,%esp
f010d48c:	68 00 08 00 00       	push   $0x800
f010d491:	e8 52 fb ff ff       	call   f010cfe8 <kmalloc>
f010d496:	83 c4 10             	add    $0x10,%esp
f010d499:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d49f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f010d4a5:	89 c1                	mov    %eax,%ecx
f010d4a7:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010d4ae:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d4b3:	0f b6 d0             	movzbl %al,%edx
f010d4b6:	8b 45 90             	mov    -0x70(%ebp),%eax
f010d4b9:	01 d0                	add    %edx,%eax
f010d4bb:	48                   	dec    %eax
f010d4bc:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010d4bf:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d4c2:	ba 00 00 00 00       	mov    $0x0,%edx
f010d4c7:	f7 75 90             	divl   -0x70(%ebp)
f010d4ca:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d4cd:	29 d0                	sub    %edx,%eax
f010d4cf:	89 c3                	mov    %eax,%ebx
f010d4d1:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010d4d8:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d4dd:	0f b6 c0             	movzbl %al,%eax
f010d4e0:	c1 e0 04             	shl    $0x4,%eax
f010d4e3:	89 c2                	mov    %eax,%edx
f010d4e5:	8b 45 88             	mov    -0x78(%ebp),%eax
f010d4e8:	01 d0                	add    %edx,%eax
f010d4ea:	48                   	dec    %eax
f010d4eb:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010d4ee:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d4f1:	ba 00 00 00 00       	mov    $0x0,%edx
f010d4f6:	f7 75 88             	divl   -0x78(%ebp)
f010d4f9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d4fc:	29 d0                	sub    %edx,%eax
f010d4fe:	01 d8                	add    %ebx,%eax
f010d500:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f010d505:	39 c1                	cmp    %eax,%ecx
f010d507:	74 14                	je     f010d51d <test_kmalloc+0x4cd>
f010d509:	83 ec 04             	sub    $0x4,%esp
f010d50c:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d511:	6a 5b                	push   $0x5b
f010d513:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d518:	e8 76 2c ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d51d:	e8 3b f1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d522:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d525:	74 14                	je     f010d53b <test_kmalloc+0x4eb>
f010d527:	83 ec 04             	sub    $0x4,%esp
f010d52a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d52f:	6a 5c                	push   $0x5c
f010d531:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d536:	e8 58 2c ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d53b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d53e:	e8 77 d4 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d543:	29 c3                	sub    %eax,%ebx
f010d545:	89 d8                	mov    %ebx,%eax
f010d547:	83 f8 01             	cmp    $0x1,%eax
f010d54a:	74 14                	je     f010d560 <test_kmalloc+0x510>
f010d54c:	83 ec 04             	sub    $0x4,%esp
f010d54f:	68 60 e3 11 f0       	push   $0xf011e360
f010d554:	6a 5d                	push   $0x5d
f010d556:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d55b:	e8 33 2c ff ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010d560:	e8 55 d4 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d565:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d568:	e8 f0 f0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d56d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010d570:	83 ec 0c             	sub    $0xc,%esp
f010d573:	68 00 1c 00 00       	push   $0x1c00
f010d578:	e8 6b fa ff ff       	call   f010cfe8 <kmalloc>
f010d57d:	83 c4 10             	add    $0x10,%esp
f010d580:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d586:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010d58c:	89 c1                	mov    %eax,%ecx
f010d58e:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010d595:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d59a:	0f b6 d0             	movzbl %al,%edx
f010d59d:	8b 45 80             	mov    -0x80(%ebp),%eax
f010d5a0:	01 d0                	add    %edx,%eax
f010d5a2:	48                   	dec    %eax
f010d5a3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010d5a9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d5af:	ba 00 00 00 00       	mov    $0x0,%edx
f010d5b4:	f7 75 80             	divl   -0x80(%ebp)
f010d5b7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d5bd:	29 d0                	sub    %edx,%eax
f010d5bf:	89 c3                	mov    %eax,%ebx
f010d5c1:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010d5c8:	10 00 00 
f010d5cb:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d5d0:	0f b6 c0             	movzbl %al,%eax
f010d5d3:	c1 e0 04             	shl    $0x4,%eax
f010d5d6:	89 c2                	mov    %eax,%edx
f010d5d8:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010d5de:	01 d0                	add    %edx,%eax
f010d5e0:	48                   	dec    %eax
f010d5e1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010d5e7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d5ed:	ba 00 00 00 00       	mov    $0x0,%edx
f010d5f2:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010d5f8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d5fe:	29 d0                	sub    %edx,%eax
f010d600:	01 d8                	add    %ebx,%eax
f010d602:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f010d607:	39 c1                	cmp    %eax,%ecx
f010d609:	74 14                	je     f010d61f <test_kmalloc+0x5cf>
f010d60b:	83 ec 04             	sub    $0x4,%esp
f010d60e:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d613:	6a 63                	push   $0x63
f010d615:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d61a:	e8 74 2b ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d61f:	e8 39 f0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d624:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d627:	74 14                	je     f010d63d <test_kmalloc+0x5ed>
f010d629:	83 ec 04             	sub    $0x4,%esp
f010d62c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d631:	6a 64                	push   $0x64
f010d633:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d638:	e8 56 2b ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d63d:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d640:	e8 75 d3 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d645:	29 c3                	sub    %eax,%ebx
f010d647:	89 d8                	mov    %ebx,%eax
f010d649:	83 f8 02             	cmp    $0x2,%eax
f010d64c:	74 14                	je     f010d662 <test_kmalloc+0x612>
f010d64e:	83 ec 04             	sub    $0x4,%esp
f010d651:	68 60 e3 11 f0       	push   $0xf011e360
f010d656:	6a 65                	push   $0x65
f010d658:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d65d:	e8 31 2b ff ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010d662:	e8 53 d3 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d667:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d66a:	e8 ee ef ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d66f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010d672:	83 ec 0c             	sub    $0xc,%esp
f010d675:	68 00 fc 2f 00       	push   $0x2ffc00
f010d67a:	e8 69 f9 ff ff       	call   f010cfe8 <kmalloc>
f010d67f:	83 c4 10             	add    $0x10,%esp
f010d682:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d688:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010d68e:	89 c1                	mov    %eax,%ecx
f010d690:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010d697:	10 00 00 
f010d69a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d69f:	0f b6 d0             	movzbl %al,%edx
f010d6a2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010d6a8:	01 d0                	add    %edx,%eax
f010d6aa:	48                   	dec    %eax
f010d6ab:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010d6b1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d6b7:	ba 00 00 00 00       	mov    $0x0,%edx
f010d6bc:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010d6c2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d6c8:	29 d0                	sub    %edx,%eax
f010d6ca:	89 c3                	mov    %eax,%ebx
f010d6cc:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010d6d3:	10 00 00 
f010d6d6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d6db:	0f b6 c0             	movzbl %al,%eax
f010d6de:	c1 e0 04             	shl    $0x4,%eax
f010d6e1:	89 c2                	mov    %eax,%edx
f010d6e3:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010d6e9:	01 d0                	add    %edx,%eax
f010d6eb:	48                   	dec    %eax
f010d6ec:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010d6f2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d6f8:	ba 00 00 00 00       	mov    $0x0,%edx
f010d6fd:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010d703:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d709:	29 d0                	sub    %edx,%eax
f010d70b:	01 d8                	add    %ebx,%eax
f010d70d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f010d712:	39 c1                	cmp    %eax,%ecx
f010d714:	74 14                	je     f010d72a <test_kmalloc+0x6da>
f010d716:	83 ec 04             	sub    $0x4,%esp
f010d719:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d71e:	6a 6b                	push   $0x6b
f010d720:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d725:	e8 69 2a ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d72a:	e8 2e ef ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d72f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d732:	74 14                	je     f010d748 <test_kmalloc+0x6f8>
f010d734:	83 ec 04             	sub    $0x4,%esp
f010d737:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d73c:	6a 6c                	push   $0x6c
f010d73e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d743:	e8 4b 2a ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d748:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d74b:	e8 6a d2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d750:	29 c3                	sub    %eax,%ebx
f010d752:	89 d8                	mov    %ebx,%eax
f010d754:	3d 00 03 00 00       	cmp    $0x300,%eax
f010d759:	74 14                	je     f010d76f <test_kmalloc+0x71f>
f010d75b:	83 ec 04             	sub    $0x4,%esp
f010d75e:	68 60 e3 11 f0       	push   $0xf011e360
f010d763:	6a 6d                	push   $0x6d
f010d765:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d76a:	e8 24 2a ff ff       	call   f0100193 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f010d76f:	e8 46 d2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d774:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d777:	e8 e1 ee ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d77c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f010d77f:	83 ec 0c             	sub    $0xc,%esp
f010d782:	68 00 fc 5f 00       	push   $0x5ffc00
f010d787:	e8 5c f8 ff ff       	call   f010cfe8 <kmalloc>
f010d78c:	83 c4 10             	add    $0x10,%esp
f010d78f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d795:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010d79b:	89 c1                	mov    %eax,%ecx
f010d79d:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010d7a4:	10 00 00 
f010d7a7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d7ac:	0f b6 d0             	movzbl %al,%edx
f010d7af:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010d7b5:	01 d0                	add    %edx,%eax
f010d7b7:	48                   	dec    %eax
f010d7b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010d7be:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d7c4:	ba 00 00 00 00       	mov    $0x0,%edx
f010d7c9:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010d7cf:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d7d5:	29 d0                	sub    %edx,%eax
f010d7d7:	89 c3                	mov    %eax,%ebx
f010d7d9:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010d7e0:	10 00 00 
f010d7e3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d7e8:	0f b6 c0             	movzbl %al,%eax
f010d7eb:	c1 e0 04             	shl    $0x4,%eax
f010d7ee:	89 c2                	mov    %eax,%edx
f010d7f0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010d7f6:	01 d0                	add    %edx,%eax
f010d7f8:	48                   	dec    %eax
f010d7f9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010d7ff:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d805:	ba 00 00 00 00       	mov    $0x0,%edx
f010d80a:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010d810:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d816:	29 d0                	sub    %edx,%eax
f010d818:	01 d8                	add    %ebx,%eax
f010d81a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f010d81f:	39 c1                	cmp    %eax,%ecx
f010d821:	74 14                	je     f010d837 <test_kmalloc+0x7e7>
f010d823:	83 ec 04             	sub    $0x4,%esp
f010d826:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d82b:	6a 73                	push   $0x73
f010d82d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d832:	e8 5c 29 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d837:	e8 21 ee ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d83c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d83f:	74 14                	je     f010d855 <test_kmalloc+0x805>
f010d841:	83 ec 04             	sub    $0x4,%esp
f010d844:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d849:	6a 74                	push   $0x74
f010d84b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d850:	e8 3e 29 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d855:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d858:	e8 5d d1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d85d:	29 c3                	sub    %eax,%ebx
f010d85f:	89 d8                	mov    %ebx,%eax
f010d861:	3d 00 06 00 00       	cmp    $0x600,%eax
f010d866:	74 14                	je     f010d87c <test_kmalloc+0x82c>
f010d868:	83 ec 04             	sub    $0x4,%esp
f010d86b:	68 60 e3 11 f0       	push   $0xf011e360
f010d870:	6a 75                	push   $0x75
f010d872:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d877:	e8 17 29 ff ff       	call   f0100193 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f010d87c:	e8 39 d1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d881:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d884:	e8 d4 ed ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d889:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f010d88c:	83 ec 0c             	sub    $0xc,%esp
f010d88f:	68 00 38 00 00       	push   $0x3800
f010d894:	e8 4f f7 ff ff       	call   f010cfe8 <kmalloc>
f010d899:	83 c4 10             	add    $0x10,%esp
f010d89c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d8a2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010d8a8:	89 c1                	mov    %eax,%ecx
f010d8aa:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010d8b1:	10 00 00 
f010d8b4:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d8b9:	0f b6 d0             	movzbl %al,%edx
f010d8bc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010d8c2:	01 d0                	add    %edx,%eax
f010d8c4:	48                   	dec    %eax
f010d8c5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010d8cb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d8d1:	ba 00 00 00 00       	mov    $0x0,%edx
f010d8d6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010d8dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d8e2:	29 d0                	sub    %edx,%eax
f010d8e4:	89 c3                	mov    %eax,%ebx
f010d8e6:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010d8ed:	10 00 00 
f010d8f0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010d8f5:	0f b6 c0             	movzbl %al,%eax
f010d8f8:	c1 e0 04             	shl    $0x4,%eax
f010d8fb:	89 c2                	mov    %eax,%edx
f010d8fd:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010d903:	01 d0                	add    %edx,%eax
f010d905:	48                   	dec    %eax
f010d906:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010d90c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d912:	ba 00 00 00 00       	mov    $0x0,%edx
f010d917:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010d91d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d923:	29 d0                	sub    %edx,%eax
f010d925:	01 d8                	add    %ebx,%eax
f010d927:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f010d92c:	39 c1                	cmp    %eax,%ecx
f010d92e:	74 14                	je     f010d944 <test_kmalloc+0x8f4>
f010d930:	83 ec 04             	sub    $0x4,%esp
f010d933:	68 c4 e3 11 f0       	push   $0xf011e3c4
f010d938:	6a 7b                	push   $0x7b
f010d93a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d93f:	e8 4f 28 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d944:	e8 14 ed ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d949:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d94c:	74 14                	je     f010d962 <test_kmalloc+0x912>
f010d94e:	83 ec 04             	sub    $0x4,%esp
f010d951:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010d956:	6a 7c                	push   $0x7c
f010d958:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d95d:	e8 31 28 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d962:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d965:	e8 50 d0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d96a:	29 c3                	sub    %eax,%ebx
f010d96c:	89 d8                	mov    %ebx,%eax
f010d96e:	83 f8 04             	cmp    $0x4,%eax
f010d971:	74 14                	je     f010d987 <test_kmalloc+0x937>
f010d973:	83 ec 04             	sub    $0x4,%esp
f010d976:	68 60 e3 11 f0       	push   $0xf011e360
f010d97b:	6a 7d                	push   $0x7d
f010d97d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010d982:	e8 0c 28 ff ff       	call   f0100193 <_panic>

		cprintf("\b\b\b50%");
f010d987:	83 ec 0c             	sub    $0xc,%esp
f010d98a:	68 2a e4 11 f0       	push   $0xf011e42a
f010d98f:	e8 0f 9c ff ff       	call   f01075a3 <cprintf>
f010d994:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f010d997:	e8 1e d0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010d99c:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f010d99f:	e8 b9 ec ff ff       	call   f010c65d <pf_calculate_free_frames>
f010d9a4:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f010d9a7:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f010d9ae:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f010d9b1:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010d9b7:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f010d9bd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d9c3:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010d9c6:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f010d9c8:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010d9ce:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010d9d4:	01 c2                	add    %eax,%edx
f010d9d6:	8a 45 f2             	mov    -0xe(%ebp),%al
f010d9d9:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f010d9db:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010d9e1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f010d9e7:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f010d9ee:	fd 0f 00 
			shortArr[0] = minShort;
f010d9f1:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f010d9f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d9fa:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f010d9fd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010da03:	01 c0                	add    %eax,%eax
f010da05:	89 c2                	mov    %eax,%edx
f010da07:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010da0d:	01 c2                	add    %eax,%edx
f010da0f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010da13:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f010da16:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010da1c:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f010da22:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f010da29:	01 00 00 
			intArr[0] = minInt;
f010da2c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010da32:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010da35:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f010da37:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010da3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010da44:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010da4a:	01 c2                	add    %eax,%edx
f010da4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da4f:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f010da51:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010da57:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f010da5d:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f010da64:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f010da67:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010da6d:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010da70:	88 10                	mov    %dl,(%eax)
f010da72:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010da78:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da7b:	66 89 42 02          	mov    %ax,0x2(%edx)
f010da7f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010da85:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010da88:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f010da8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010da91:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010da98:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010da9e:	01 c2                	add    %eax,%edx
f010daa0:	8a 45 f2             	mov    -0xe(%ebp),%al
f010daa3:	88 02                	mov    %al,(%edx)
f010daa5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010daab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dab2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dab8:	01 c2                	add    %eax,%edx
f010daba:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010dabe:	66 89 42 02          	mov    %ax,0x2(%edx)
f010dac2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010dac8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dacf:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dad5:	01 c2                	add    %eax,%edx
f010dad7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dada:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f010dadd:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f010dae4:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f010dae7:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010daed:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f010daf3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010daf9:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010dafc:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f010dafe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010db04:	89 c2                	mov    %eax,%edx
f010db06:	c1 ea 1f             	shr    $0x1f,%edx
f010db09:	01 d0                	add    %edx,%eax
f010db0b:	d1 f8                	sar    %eax
f010db0d:	89 c2                	mov    %eax,%edx
f010db0f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010db15:	01 c2                	add    %eax,%edx
f010db17:	8a 45 f2             	mov    -0xe(%ebp),%al
f010db1a:	88 c1                	mov    %al,%cl
f010db1c:	c0 e9 07             	shr    $0x7,%cl
f010db1f:	01 c8                	add    %ecx,%eax
f010db21:	d0 f8                	sar    %al
f010db23:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f010db25:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010db2b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010db31:	01 c2                	add    %eax,%edx
f010db33:	8a 45 f2             	mov    -0xe(%ebp),%al
f010db36:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f010db38:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010db3e:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f010db44:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f010db4b:	1b 00 00 
			shortArr2[0] = minShort;
f010db4e:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010db54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db57:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f010db5a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010db60:	01 c0                	add    %eax,%eax
f010db62:	89 c2                	mov    %eax,%edx
f010db64:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010db6a:	01 c2                	add    %eax,%edx
f010db6c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010db70:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010db73:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010db79:	8a 00                	mov    (%eax),%al
f010db7b:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010db7e:	75 15                	jne    f010db95 <test_kmalloc+0xb45>
f010db80:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010db86:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010db8c:	01 d0                	add    %edx,%eax
f010db8e:	8a 00                	mov    (%eax),%al
f010db90:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010db93:	74 17                	je     f010dbac <test_kmalloc+0xb5c>
f010db95:	83 ec 04             	sub    $0x4,%esp
f010db98:	68 34 e4 11 f0       	push   $0xf011e434
f010db9d:	68 ac 00 00 00       	push   $0xac
f010dba2:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dba7:	e8 e7 25 ff ff       	call   f0100193 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010dbac:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dbb2:	66 8b 00             	mov    (%eax),%ax
f010dbb5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010dbb9:	75 1b                	jne    f010dbd6 <test_kmalloc+0xb86>
f010dbbb:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010dbc1:	01 c0                	add    %eax,%eax
f010dbc3:	89 c2                	mov    %eax,%edx
f010dbc5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dbcb:	01 d0                	add    %edx,%eax
f010dbcd:	66 8b 00             	mov    (%eax),%ax
f010dbd0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010dbd4:	74 17                	je     f010dbed <test_kmalloc+0xb9d>
f010dbd6:	83 ec 04             	sub    $0x4,%esp
f010dbd9:	68 34 e4 11 f0       	push   $0xf011e434
f010dbde:	68 ad 00 00 00       	push   $0xad
f010dbe3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dbe8:	e8 a6 25 ff ff       	call   f0100193 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f010dbed:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dbf3:	8b 00                	mov    (%eax),%eax
f010dbf5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010dbf8:	75 1c                	jne    f010dc16 <test_kmalloc+0xbc6>
f010dbfa:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010dc00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dc07:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dc0d:	01 d0                	add    %edx,%eax
f010dc0f:	8b 00                	mov    (%eax),%eax
f010dc11:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010dc14:	74 17                	je     f010dc2d <test_kmalloc+0xbdd>
f010dc16:	83 ec 04             	sub    $0x4,%esp
f010dc19:	68 34 e4 11 f0       	push   $0xf011e434
f010dc1e:	68 ae 00 00 00       	push   $0xae
f010dc23:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dc28:	e8 66 25 ff ff       	call   f0100193 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f010dc2d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dc33:	8a 00                	mov    (%eax),%al
f010dc35:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010dc38:	75 1c                	jne    f010dc56 <test_kmalloc+0xc06>
f010dc3a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010dc40:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dc47:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dc4d:	01 d0                	add    %edx,%eax
f010dc4f:	8a 00                	mov    (%eax),%al
f010dc51:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010dc54:	74 17                	je     f010dc6d <test_kmalloc+0xc1d>
f010dc56:	83 ec 04             	sub    $0x4,%esp
f010dc59:	68 34 e4 11 f0       	push   $0xf011e434
f010dc5e:	68 b0 00 00 00       	push   $0xb0
f010dc63:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dc68:	e8 26 25 ff ff       	call   f0100193 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f010dc6d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dc73:	66 8b 40 02          	mov    0x2(%eax),%ax
f010dc77:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010dc7b:	75 1f                	jne    f010dc9c <test_kmalloc+0xc4c>
f010dc7d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010dc83:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dc8a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dc90:	01 d0                	add    %edx,%eax
f010dc92:	66 8b 40 02          	mov    0x2(%eax),%ax
f010dc96:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010dc9a:	74 17                	je     f010dcb3 <test_kmalloc+0xc63>
f010dc9c:	83 ec 04             	sub    $0x4,%esp
f010dc9f:	68 34 e4 11 f0       	push   $0xf011e434
f010dca4:	68 b1 00 00 00       	push   $0xb1
f010dca9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dcae:	e8 e0 24 ff ff       	call   f0100193 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f010dcb3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dcb9:	8b 40 04             	mov    0x4(%eax),%eax
f010dcbc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010dcbf:	75 1d                	jne    f010dcde <test_kmalloc+0xc8e>
f010dcc1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010dcc7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dcce:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dcd4:	01 d0                	add    %edx,%eax
f010dcd6:	8b 40 04             	mov    0x4(%eax),%eax
f010dcd9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010dcdc:	74 17                	je     f010dcf5 <test_kmalloc+0xca5>
f010dcde:	83 ec 04             	sub    $0x4,%esp
f010dce1:	68 34 e4 11 f0       	push   $0xf011e434
f010dce6:	68 b2 00 00 00       	push   $0xb2
f010dceb:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dcf0:	e8 9e 24 ff ff       	call   f0100193 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010dcf5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010dcfb:	8a 00                	mov    (%eax),%al
f010dcfd:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010dd00:	75 40                	jne    f010dd42 <test_kmalloc+0xcf2>
f010dd02:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010dd08:	89 c2                	mov    %eax,%edx
f010dd0a:	c1 ea 1f             	shr    $0x1f,%edx
f010dd0d:	01 d0                	add    %edx,%eax
f010dd0f:	d1 f8                	sar    %eax
f010dd11:	89 c2                	mov    %eax,%edx
f010dd13:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010dd19:	01 d0                	add    %edx,%eax
f010dd1b:	8a 10                	mov    (%eax),%dl
f010dd1d:	8a 45 f2             	mov    -0xe(%ebp),%al
f010dd20:	88 c1                	mov    %al,%cl
f010dd22:	c0 e9 07             	shr    $0x7,%cl
f010dd25:	01 c8                	add    %ecx,%eax
f010dd27:	d0 f8                	sar    %al
f010dd29:	38 c2                	cmp    %al,%dl
f010dd2b:	75 15                	jne    f010dd42 <test_kmalloc+0xcf2>
f010dd2d:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010dd33:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010dd39:	01 d0                	add    %edx,%eax
f010dd3b:	8a 00                	mov    (%eax),%al
f010dd3d:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010dd40:	74 17                	je     f010dd59 <test_kmalloc+0xd09>
f010dd42:	83 ec 04             	sub    $0x4,%esp
f010dd45:	68 34 e4 11 f0       	push   $0xf011e434
f010dd4a:	68 b4 00 00 00       	push   $0xb4
f010dd4f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dd54:	e8 3a 24 ff ff       	call   f0100193 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010dd59:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010dd5f:	66 8b 00             	mov    (%eax),%ax
f010dd62:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010dd66:	75 1b                	jne    f010dd83 <test_kmalloc+0xd33>
f010dd68:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010dd6e:	01 c0                	add    %eax,%eax
f010dd70:	89 c2                	mov    %eax,%edx
f010dd72:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010dd78:	01 d0                	add    %edx,%eax
f010dd7a:	66 8b 00             	mov    (%eax),%ax
f010dd7d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010dd81:	74 17                	je     f010dd9a <test_kmalloc+0xd4a>
f010dd83:	83 ec 04             	sub    $0x4,%esp
f010dd86:	68 34 e4 11 f0       	push   $0xf011e434
f010dd8b:	68 b5 00 00 00       	push   $0xb5
f010dd90:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dd95:	e8 f9 23 ff ff       	call   f0100193 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010dd9a:	e8 1b cc ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010dd9f:	89 c2                	mov    %eax,%edx
f010dda1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dda4:	39 c2                	cmp    %eax,%edx
f010dda6:	74 17                	je     f010ddbf <test_kmalloc+0xd6f>
f010dda8:	83 ec 04             	sub    $0x4,%esp
f010ddab:	68 60 e3 11 f0       	push   $0xf011e360
f010ddb0:	68 b7 00 00 00       	push   $0xb7
f010ddb5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ddba:	e8 d4 23 ff ff       	call   f0100193 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ddbf:	e8 99 e8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ddc4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ddc7:	74 17                	je     f010dde0 <test_kmalloc+0xd90>
f010ddc9:	83 ec 04             	sub    $0x4,%esp
f010ddcc:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ddd1:	68 b8 00 00 00       	push   $0xb8
f010ddd6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dddb:	e8 b3 23 ff ff       	call   f0100193 <_panic>
		}

		cprintf("\b\b\b80%");
f010dde0:	83 ec 0c             	sub    $0xc,%esp
f010dde3:	68 69 e4 11 f0       	push   $0xf011e469
f010dde8:	e8 b6 97 ff ff       	call   f01075a3 <cprintf>
f010dded:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f010ddf0:	e8 c5 cb ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ddf5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ddf8:	e8 60 e8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ddfd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f010de00:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f010de07:	10 00 00 
f010de0a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010de0f:	0f b6 d0             	movzbl %al,%edx
f010de12:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010de18:	01 d0                	add    %edx,%eax
f010de1a:	48                   	dec    %eax
f010de1b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f010de21:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010de27:	ba 00 00 00 00       	mov    $0x0,%edx
f010de2c:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f010de32:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010de38:	29 d0                	sub    %edx,%eax
f010de3a:	89 c1                	mov    %eax,%ecx
f010de3c:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f010de43:	10 00 00 
f010de46:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010de4b:	0f b6 c0             	movzbl %al,%eax
f010de4e:	c1 e0 04             	shl    $0x4,%eax
f010de51:	89 c2                	mov    %eax,%edx
f010de53:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010de59:	01 d0                	add    %edx,%eax
f010de5b:	48                   	dec    %eax
f010de5c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f010de62:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010de68:	ba 00 00 00 00       	mov    $0x0,%edx
f010de6d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f010de73:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010de79:	29 d0                	sub    %edx,%eax
f010de7b:	01 c8                	add    %ecx,%eax
f010de7d:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f010de82:	29 c2                	sub    %eax,%edx
f010de84:	89 d0                	mov    %edx,%eax
f010de86:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f010de8c:	83 ec 0c             	sub    $0xc,%esp
f010de8f:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f010de95:	e8 4e f1 ff ff       	call   f010cfe8 <kmalloc>
f010de9a:	83 c4 10             	add    $0x10,%esp
f010de9d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f010dea3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010dea9:	85 c0                	test   %eax,%eax
f010deab:	74 17                	je     f010dec4 <test_kmalloc+0xe74>
f010dead:	83 ec 04             	sub    $0x4,%esp
f010deb0:	68 b4 e2 11 f0       	push   $0xf011e2b4
f010deb5:	68 c2 00 00 00       	push   $0xc2
f010deba:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010debf:	e8 cf 22 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010dec4:	e8 94 e7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010dec9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010decc:	74 17                	je     f010dee5 <test_kmalloc+0xe95>
f010dece:	83 ec 04             	sub    $0x4,%esp
f010ded1:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ded6:	68 c3 00 00 00       	push   $0xc3
f010dedb:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010dee0:	e8 ae 22 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010dee5:	e8 d0 ca ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010deea:	89 c2                	mov    %eax,%edx
f010deec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010deef:	39 c2                	cmp    %eax,%edx
f010def1:	74 17                	je     f010df0a <test_kmalloc+0xeba>
f010def3:	83 ec 04             	sub    $0x4,%esp
f010def6:	68 60 e3 11 f0       	push   $0xf011e360
f010defb:	68 c4 00 00 00       	push   $0xc4
f010df00:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010df05:	e8 89 22 ff ff       	call   f0100193 <_panic>

		cprintf("\b\b\b90%");
f010df0a:	83 ec 0c             	sub    $0xc,%esp
f010df0d:	68 70 e4 11 f0       	push   $0xf011e470
f010df12:	e8 8c 96 ff ff       	call   f01075a3 <cprintf>
f010df17:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f010df1a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010df20:	05 00 40 00 00       	add    $0x4000,%eax
f010df25:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010df2b:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f010df32:	10 00 00 
f010df35:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010df3a:	0f b6 d0             	movzbl %al,%edx
f010df3d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010df43:	01 d0                	add    %edx,%eax
f010df45:	48                   	dec    %eax
f010df46:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f010df4c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010df52:	ba 00 00 00 00       	mov    $0x0,%edx
f010df57:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f010df5d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010df63:	29 d0                	sub    %edx,%eax
f010df65:	89 c1                	mov    %eax,%ecx
f010df67:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f010df6e:	10 00 00 
f010df71:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010df76:	0f b6 c0             	movzbl %al,%eax
f010df79:	c1 e0 04             	shl    $0x4,%eax
f010df7c:	89 c2                	mov    %eax,%edx
f010df7e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010df84:	01 d0                	add    %edx,%eax
f010df86:	48                   	dec    %eax
f010df87:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f010df8d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010df93:	ba 00 00 00 00       	mov    $0x0,%edx
f010df98:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f010df9e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010dfa4:	29 d0                	sub    %edx,%eax
f010dfa6:	01 c8                	add    %ecx,%eax
f010dfa8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010dfad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010dfb0:	eb 6b                	jmp    f010e01d <test_kmalloc+0xfcd>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, (void*)va, &table);
f010dfb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dfb5:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f010dfba:	83 ec 04             	sub    $0x4,%esp
f010dfbd:	8d 8d 94 fe ff ff    	lea    -0x16c(%ebp),%ecx
f010dfc3:	51                   	push   %ecx
f010dfc4:	52                   	push   %edx
f010dfc5:	50                   	push   %eax
f010dfc6:	e8 a3 5e ff ff       	call   f0103e6e <get_page_table>
f010dfcb:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f010dfce:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f010dfd4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010dfd7:	c1 ea 0c             	shr    $0xc,%edx
f010dfda:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010dfe0:	c1 e2 02             	shl    $0x2,%edx
f010dfe3:	01 d0                	add    %edx,%eax
f010dfe5:	8b 00                	mov    (%eax),%eax
f010dfe7:	25 ff 0f 00 00       	and    $0xfff,%eax
f010dfec:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f010dff2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010dff8:	83 e0 04             	and    $0x4,%eax
f010dffb:	85 c0                	test   %eax,%eax
f010dffd:	74 17                	je     f010e016 <test_kmalloc+0xfc6>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f010dfff:	83 ec 04             	sub    $0x4,%esp
f010e002:	68 78 e4 11 f0       	push   $0xf011e478
f010e007:	68 d1 00 00 00       	push   $0xd1
f010e00c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e011:	e8 7d 21 ff ff       	call   f0100193 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010e016:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010e01d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e020:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f010e026:	72 8a                	jb     f010dfb2 <test_kmalloc+0xf62>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f010e028:	83 ec 0c             	sub    $0xc,%esp
f010e02b:	68 c2 e4 11 f0       	push   $0xf011e4c2
f010e030:	e8 6e 95 ff ff       	call   f01075a3 <cprintf>
f010e035:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f010e038:	83 ec 0c             	sub    $0xc,%esp
f010e03b:	68 cc e4 11 f0       	push   $0xf011e4cc
f010e040:	e8 5e 95 ff ff       	call   f01075a3 <cprintf>
f010e045:	83 c4 10             	add    $0x10,%esp

	return 1;
f010e048:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010e04d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e050:	5b                   	pop    %ebx
f010e051:	5f                   	pop    %edi
f010e052:	5d                   	pop    %ebp
f010e053:	c3                   	ret    

f010e054 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f010e054:	55                   	push   %ebp
f010e055:	89 e5                	mov    %esp,%ebp
f010e057:	57                   	push   %edi
f010e058:	53                   	push   %ebx
f010e059:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f010e05f:	83 ec 0c             	sub    $0xc,%esp
f010e062:	68 28 e2 11 f0       	push   $0xf011e228
f010e067:	e8 37 95 ff ff       	call   f01075a3 <cprintf>
f010e06c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010e06f:	83 ec 0c             	sub    $0xc,%esp
f010e072:	68 58 e2 11 f0       	push   $0xf011e258
f010e077:	e8 27 95 ff ff       	call   f01075a3 <cprintf>
f010e07c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010e07f:	83 ec 0c             	sub    $0xc,%esp
f010e082:	68 28 e2 11 f0       	push   $0xf011e228
f010e087:	e8 17 95 ff ff       	call   f01075a3 <cprintf>
f010e08c:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f010e08f:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f010e095:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f010e09a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e09f:	89 d7                	mov    %edx,%edi
f010e0a1:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f010e0a3:	83 ec 0c             	sub    $0xc,%esp
f010e0a6:	68 08 e5 11 f0       	push   $0xf011e508
f010e0ab:	e8 f3 94 ff ff       	call   f01075a3 <cprintf>
f010e0b0:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f010e0b3:	e8 02 c9 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e0b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f010e0bb:	e8 9d e5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e0c0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010e0c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e0ca:	eb 1f                	jmp    f010e0eb <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f010e0cc:	83 ec 0c             	sub    $0xc,%esp
f010e0cf:	68 00 00 20 00       	push   $0x200000
f010e0d4:	e8 0f ef ff ff       	call   f010cfe8 <kmalloc>
f010e0d9:	83 c4 10             	add    $0x10,%esp
f010e0dc:	89 c2                	mov    %eax,%edx
f010e0de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0e1:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010e0e8:	ff 45 f4             	incl   -0xc(%ebp)
f010e0eb:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f010e0ef:	7e db                	jle    f010e0cc <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);
f010e0f1:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010e0f8:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e0fd:	0f b6 d0             	movzbl %al,%edx
f010e100:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e103:	01 d0                	add    %edx,%eax
f010e105:	48                   	dec    %eax
f010e106:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010e109:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e10c:	ba 00 00 00 00       	mov    $0x0,%edx
f010e111:	f7 75 e8             	divl   -0x18(%ebp)
f010e114:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e117:	29 d0                	sub    %edx,%eax
f010e119:	89 c1                	mov    %eax,%ecx
f010e11b:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010e122:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e127:	0f b6 c0             	movzbl %al,%eax
f010e12a:	c1 e0 04             	shl    $0x4,%eax
f010e12d:	89 c2                	mov    %eax,%edx
f010e12f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e132:	01 d0                	add    %edx,%eax
f010e134:	48                   	dec    %eax
f010e135:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e138:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e13b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e140:	f7 75 e0             	divl   -0x20(%ebp)
f010e143:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e146:	29 d0                	sub    %edx,%eax
f010e148:	01 c8                	add    %ecx,%eax
f010e14a:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f010e14f:	29 c2                	sub    %eax,%edx
f010e151:	89 d0                	mov    %edx,%eax
f010e153:	83 ec 0c             	sub    $0xc,%esp
f010e156:	50                   	push   %eax
f010e157:	e8 8c ee ff ff       	call   f010cfe8 <kmalloc>
f010e15c:	83 c4 10             	add    $0x10,%esp
f010e15f:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010e165:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010e16b:	89 c1                	mov    %eax,%ecx
f010e16d:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010e174:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e179:	0f b6 d0             	movzbl %al,%edx
f010e17c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e17f:	01 d0                	add    %edx,%eax
f010e181:	48                   	dec    %eax
f010e182:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010e185:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e188:	ba 00 00 00 00       	mov    $0x0,%edx
f010e18d:	f7 75 d8             	divl   -0x28(%ebp)
f010e190:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e193:	29 d0                	sub    %edx,%eax
f010e195:	89 c3                	mov    %eax,%ebx
f010e197:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010e19e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e1a3:	0f b6 c0             	movzbl %al,%eax
f010e1a6:	c1 e0 04             	shl    $0x4,%eax
f010e1a9:	89 c2                	mov    %eax,%edx
f010e1ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e1ae:	01 d0                	add    %edx,%eax
f010e1b0:	48                   	dec    %eax
f010e1b1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010e1b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e1b7:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1bc:	f7 75 d0             	divl   -0x30(%ebp)
f010e1bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e1c2:	29 d0                	sub    %edx,%eax
f010e1c4:	01 d8                	add    %ebx,%eax
f010e1c6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010e1cb:	39 c1                	cmp    %eax,%ecx
f010e1cd:	0f 85 4f 03 00 00    	jne    f010e522 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010e1d3:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010e1d9:	89 c1                	mov    %eax,%ecx
f010e1db:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f010e1e2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e1e7:	0f b6 d0             	movzbl %al,%edx
f010e1ea:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e1ed:	01 d0                	add    %edx,%eax
f010e1ef:	48                   	dec    %eax
f010e1f0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010e1f3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e1f6:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1fb:	f7 75 c8             	divl   -0x38(%ebp)
f010e1fe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e201:	29 d0                	sub    %edx,%eax
f010e203:	89 c3                	mov    %eax,%ebx
f010e205:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010e20c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e211:	0f b6 c0             	movzbl %al,%eax
f010e214:	c1 e0 04             	shl    $0x4,%eax
f010e217:	89 c2                	mov    %eax,%edx
f010e219:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e21c:	01 d0                	add    %edx,%eax
f010e21e:	48                   	dec    %eax
f010e21f:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010e222:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e225:	ba 00 00 00 00       	mov    $0x0,%edx
f010e22a:	f7 75 c0             	divl   -0x40(%ebp)
f010e22d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e230:	29 d0                	sub    %edx,%eax
f010e232:	01 d8                	add    %ebx,%eax
f010e234:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010e239:	39 c1                	cmp    %eax,%ecx
f010e23b:	0f 85 e1 02 00 00    	jne    f010e522 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010e241:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f010e247:	89 c1                	mov    %eax,%ecx
f010e249:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010e250:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e255:	0f b6 d0             	movzbl %al,%edx
f010e258:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e25b:	01 d0                	add    %edx,%eax
f010e25d:	48                   	dec    %eax
f010e25e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010e261:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010e264:	ba 00 00 00 00       	mov    $0x0,%edx
f010e269:	f7 75 b8             	divl   -0x48(%ebp)
f010e26c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010e26f:	29 d0                	sub    %edx,%eax
f010e271:	89 c3                	mov    %eax,%ebx
f010e273:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010e27a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e27f:	0f b6 c0             	movzbl %al,%eax
f010e282:	c1 e0 04             	shl    $0x4,%eax
f010e285:	89 c2                	mov    %eax,%edx
f010e287:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e28a:	01 d0                	add    %edx,%eax
f010e28c:	48                   	dec    %eax
f010e28d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010e290:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e293:	ba 00 00 00 00       	mov    $0x0,%edx
f010e298:	f7 75 b0             	divl   -0x50(%ebp)
f010e29b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e29e:	29 d0                	sub    %edx,%eax
f010e2a0:	01 d8                	add    %ebx,%eax
f010e2a2:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010e2a7:	39 c1                	cmp    %eax,%ecx
f010e2a9:	0f 85 73 02 00 00    	jne    f010e522 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010e2af:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010e2b5:	89 c1                	mov    %eax,%ecx
f010e2b7:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010e2be:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e2c3:	0f b6 d0             	movzbl %al,%edx
f010e2c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e2c9:	01 d0                	add    %edx,%eax
f010e2cb:	48                   	dec    %eax
f010e2cc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010e2cf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010e2d2:	ba 00 00 00 00       	mov    $0x0,%edx
f010e2d7:	f7 75 a8             	divl   -0x58(%ebp)
f010e2da:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010e2dd:	29 d0                	sub    %edx,%eax
f010e2df:	89 c3                	mov    %eax,%ebx
f010e2e1:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010e2e8:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e2ed:	0f b6 c0             	movzbl %al,%eax
f010e2f0:	c1 e0 04             	shl    $0x4,%eax
f010e2f3:	89 c2                	mov    %eax,%edx
f010e2f5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e2f8:	01 d0                	add    %edx,%eax
f010e2fa:	48                   	dec    %eax
f010e2fb:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010e2fe:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010e301:	ba 00 00 00 00       	mov    $0x0,%edx
f010e306:	f7 75 a0             	divl   -0x60(%ebp)
f010e309:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010e30c:	29 d0                	sub    %edx,%eax
f010e30e:	01 d8                	add    %ebx,%eax
f010e310:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010e315:	39 c1                	cmp    %eax,%ecx
f010e317:	0f 85 05 02 00 00    	jne    f010e522 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010e31d:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010e323:	89 c1                	mov    %eax,%ecx
f010e325:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010e32c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e331:	0f b6 d0             	movzbl %al,%edx
f010e334:	8b 45 98             	mov    -0x68(%ebp),%eax
f010e337:	01 d0                	add    %edx,%eax
f010e339:	48                   	dec    %eax
f010e33a:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010e33d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e340:	ba 00 00 00 00       	mov    $0x0,%edx
f010e345:	f7 75 98             	divl   -0x68(%ebp)
f010e348:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e34b:	29 d0                	sub    %edx,%eax
f010e34d:	89 c3                	mov    %eax,%ebx
f010e34f:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010e356:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e35b:	0f b6 c0             	movzbl %al,%eax
f010e35e:	c1 e0 04             	shl    $0x4,%eax
f010e361:	89 c2                	mov    %eax,%edx
f010e363:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e366:	01 d0                	add    %edx,%eax
f010e368:	48                   	dec    %eax
f010e369:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010e36c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010e36f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e374:	f7 75 90             	divl   -0x70(%ebp)
f010e377:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010e37a:	29 d0                	sub    %edx,%eax
f010e37c:	01 d8                	add    %ebx,%eax
f010e37e:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010e383:	39 c1                	cmp    %eax,%ecx
f010e385:	0f 85 97 01 00 00    	jne    f010e522 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010e38b:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010e391:	89 c1                	mov    %eax,%ecx
f010e393:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010e39a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e39f:	0f b6 d0             	movzbl %al,%edx
f010e3a2:	8b 45 88             	mov    -0x78(%ebp),%eax
f010e3a5:	01 d0                	add    %edx,%eax
f010e3a7:	48                   	dec    %eax
f010e3a8:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010e3ab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010e3ae:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3b3:	f7 75 88             	divl   -0x78(%ebp)
f010e3b6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010e3b9:	29 d0                	sub    %edx,%eax
f010e3bb:	89 c3                	mov    %eax,%ebx
f010e3bd:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010e3c4:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e3c9:	0f b6 c0             	movzbl %al,%eax
f010e3cc:	c1 e0 04             	shl    $0x4,%eax
f010e3cf:	89 c2                	mov    %eax,%edx
f010e3d1:	8b 45 80             	mov    -0x80(%ebp),%eax
f010e3d4:	01 d0                	add    %edx,%eax
f010e3d6:	48                   	dec    %eax
f010e3d7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010e3dd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010e3e3:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3e8:	f7 75 80             	divl   -0x80(%ebp)
f010e3eb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010e3f1:	29 d0                	sub    %edx,%eax
f010e3f3:	01 d8                	add    %ebx,%eax
f010e3f5:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010e3fa:	39 c1                	cmp    %eax,%ecx
f010e3fc:	0f 85 20 01 00 00    	jne    f010e522 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010e402:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010e408:	89 c1                	mov    %eax,%ecx
f010e40a:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010e411:	10 00 00 
f010e414:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e419:	0f b6 d0             	movzbl %al,%edx
f010e41c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010e422:	01 d0                	add    %edx,%eax
f010e424:	48                   	dec    %eax
f010e425:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010e42b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010e431:	ba 00 00 00 00       	mov    $0x0,%edx
f010e436:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010e43c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010e442:	29 d0                	sub    %edx,%eax
f010e444:	89 c3                	mov    %eax,%ebx
f010e446:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010e44d:	10 00 00 
f010e450:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e455:	0f b6 c0             	movzbl %al,%eax
f010e458:	c1 e0 04             	shl    $0x4,%eax
f010e45b:	89 c2                	mov    %eax,%edx
f010e45d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010e463:	01 d0                	add    %edx,%eax
f010e465:	48                   	dec    %eax
f010e466:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010e46c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010e472:	ba 00 00 00 00       	mov    $0x0,%edx
f010e477:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010e47d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010e483:	29 d0                	sub    %edx,%eax
f010e485:	01 d8                	add    %ebx,%eax
f010e487:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010e48c:	39 c1                	cmp    %eax,%ecx
f010e48e:	0f 85 8e 00 00 00    	jne    f010e522 <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f010e494:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010e49a:	89 c1                	mov    %eax,%ecx
f010e49c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010e4a3:	10 00 00 
f010e4a6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e4ab:	0f b6 d0             	movzbl %al,%edx
f010e4ae:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010e4b4:	01 d0                	add    %edx,%eax
f010e4b6:	48                   	dec    %eax
f010e4b7:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010e4bd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010e4c3:	ba 00 00 00 00       	mov    $0x0,%edx
f010e4c8:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010e4ce:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010e4d4:	29 d0                	sub    %edx,%eax
f010e4d6:	89 c3                	mov    %eax,%ebx
f010e4d8:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010e4df:	10 00 00 
f010e4e2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e4e7:	0f b6 c0             	movzbl %al,%eax
f010e4ea:	c1 e0 04             	shl    $0x4,%eax
f010e4ed:	89 c2                	mov    %eax,%edx
f010e4ef:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010e4f5:	01 d0                	add    %edx,%eax
f010e4f7:	48                   	dec    %eax
f010e4f8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010e4fe:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010e504:	ba 00 00 00 00       	mov    $0x0,%edx
f010e509:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010e50f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010e515:	29 d0                	sub    %edx,%eax
f010e517:	01 d8                	add    %ebx,%eax
f010e519:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010e51e:	39 c1                	cmp    %eax,%ecx
f010e520:	74 17                	je     f010e539 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f010e522:	83 ec 04             	sub    $0x4,%esp
f010e525:	68 58 e5 11 f0       	push   $0xf011e558
f010e52a:	68 fd 00 00 00       	push   $0xfd
f010e52f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e534:	e8 5a 1c ff ff       	call   f0100193 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e539:	e8 1f e1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e53e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e541:	74 17                	je     f010e55a <test_kmalloc_nextfit+0x506>
f010e543:	83 ec 04             	sub    $0x4,%esp
f010e546:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010e54b:	68 ff 00 00 00       	push   $0xff
f010e550:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e555:	e8 39 1c ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f010e55a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e55d:	e8 58 c4 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e562:	29 c3                	sub    %eax,%ebx
f010e564:	89 d9                	mov    %ebx,%ecx
f010e566:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010e56d:	10 00 00 
f010e570:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e575:	0f b6 d0             	movzbl %al,%edx
f010e578:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010e57e:	01 d0                	add    %edx,%eax
f010e580:	48                   	dec    %eax
f010e581:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010e587:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010e58d:	ba 00 00 00 00       	mov    $0x0,%edx
f010e592:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010e598:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010e59e:	29 d0                	sub    %edx,%eax
f010e5a0:	89 c3                	mov    %eax,%ebx
f010e5a2:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010e5a9:	10 00 00 
f010e5ac:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e5b1:	0f b6 c0             	movzbl %al,%eax
f010e5b4:	c1 e0 04             	shl    $0x4,%eax
f010e5b7:	89 c2                	mov    %eax,%edx
f010e5b9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010e5bf:	01 d0                	add    %edx,%eax
f010e5c1:	48                   	dec    %eax
f010e5c2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010e5c8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010e5ce:	ba 00 00 00 00       	mov    $0x0,%edx
f010e5d3:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010e5d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010e5df:	29 d0                	sub    %edx,%eax
f010e5e1:	01 d8                	add    %ebx,%eax
f010e5e3:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f010e5e8:	29 c2                	sub    %eax,%edx
f010e5ea:	89 d0                	mov    %edx,%eax
f010e5ec:	c1 e8 0c             	shr    $0xc,%eax
f010e5ef:	39 c1                	cmp    %eax,%ecx
f010e5f1:	74 17                	je     f010e60a <test_kmalloc_nextfit+0x5b6>
f010e5f3:	83 ec 04             	sub    $0x4,%esp
f010e5f6:	68 9b e5 11 f0       	push   $0xf011e59b
f010e5fb:	68 00 01 00 00       	push   $0x100
f010e600:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e605:	e8 89 1b ff ff       	call   f0100193 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f010e60a:	e8 4e e0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e60f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e612:	e8 a3 c3 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e617:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f010e61a:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010e620:	83 ec 0c             	sub    $0xc,%esp
f010e623:	50                   	push   %eax
f010e624:	e8 d9 e9 ff ff       	call   f010d002 <kfree>
f010e629:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f010e62c:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010e632:	83 ec 0c             	sub    $0xc,%esp
f010e635:	50                   	push   %eax
f010e636:	e8 c7 e9 ff ff       	call   f010d002 <kfree>
f010e63b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f010e63e:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f010e644:	83 ec 0c             	sub    $0xc,%esp
f010e647:	50                   	push   %eax
f010e648:	e8 b5 e9 ff ff       	call   f010d002 <kfree>
f010e64d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f010e650:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f010e656:	83 ec 0c             	sub    $0xc,%esp
f010e659:	50                   	push   %eax
f010e65a:	e8 a3 e9 ff ff       	call   f010d002 <kfree>
f010e65f:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f010e662:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010e668:	83 ec 0c             	sub    $0xc,%esp
f010e66b:	50                   	push   %eax
f010e66c:	e8 91 e9 ff ff       	call   f010d002 <kfree>
f010e671:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f010e674:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f010e67a:	83 ec 0c             	sub    $0xc,%esp
f010e67d:	50                   	push   %eax
f010e67e:	e8 7f e9 ff ff       	call   f010d002 <kfree>
f010e683:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f010e686:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f010e68c:	83 ec 0c             	sub    $0xc,%esp
f010e68f:	50                   	push   %eax
f010e690:	e8 6d e9 ff ff       	call   f010d002 <kfree>
f010e695:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f010e698:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010e69e:	83 ec 0c             	sub    $0xc,%esp
f010e6a1:	50                   	push   %eax
f010e6a2:	e8 5b e9 ff ff       	call   f010d002 <kfree>
f010e6a7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f010e6aa:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010e6b0:	83 ec 0c             	sub    $0xc,%esp
f010e6b3:	50                   	push   %eax
f010e6b4:	e8 49 e9 ff ff       	call   f010d002 <kfree>
f010e6b9:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f010e6bc:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010e6c2:	83 ec 0c             	sub    $0xc,%esp
f010e6c5:	50                   	push   %eax
f010e6c6:	e8 37 e9 ff ff       	call   f010d002 <kfree>
f010e6cb:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e6ce:	e8 8a df ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e6d3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e6d6:	74 17                	je     f010e6ef <test_kmalloc_nextfit+0x69b>
f010e6d8:	83 ec 04             	sub    $0x4,%esp
f010e6db:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010e6e0:	68 11 01 00 00       	push   $0x111
f010e6e5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e6ea:	e8 a4 1a ff ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010e6ef:	e8 c6 c2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e6f4:	89 c2                	mov    %eax,%edx
f010e6f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e6f9:	89 d1                	mov    %edx,%ecx
f010e6fb:	29 c1                	sub    %eax,%ecx
f010e6fd:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010e704:	10 00 00 
f010e707:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e70c:	0f b6 d0             	movzbl %al,%edx
f010e70f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010e715:	01 d0                	add    %edx,%eax
f010e717:	48                   	dec    %eax
f010e718:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010e71e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010e724:	ba 00 00 00 00       	mov    $0x0,%edx
f010e729:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010e72f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010e735:	29 d0                	sub    %edx,%eax
f010e737:	89 c3                	mov    %eax,%ebx
f010e739:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f010e740:	10 00 00 
f010e743:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e748:	0f b6 c0             	movzbl %al,%eax
f010e74b:	c1 e0 04             	shl    $0x4,%eax
f010e74e:	89 c2                	mov    %eax,%edx
f010e750:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010e756:	01 d0                	add    %edx,%eax
f010e758:	48                   	dec    %eax
f010e759:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f010e75f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010e765:	ba 00 00 00 00       	mov    $0x0,%edx
f010e76a:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f010e770:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010e776:	29 d0                	sub    %edx,%eax
f010e778:	01 d8                	add    %ebx,%eax
f010e77a:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f010e77f:	29 c2                	sub    %eax,%edx
f010e781:	89 d0                	mov    %edx,%eax
f010e783:	c1 e8 0c             	shr    $0xc,%eax
f010e786:	39 c1                	cmp    %eax,%ecx
f010e788:	74 17                	je     f010e7a1 <test_kmalloc_nextfit+0x74d>
f010e78a:	83 ec 04             	sub    $0x4,%esp
f010e78d:	68 ac e5 11 f0       	push   $0xf011e5ac
f010e792:	68 12 01 00 00       	push   $0x112
f010e797:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e79c:	e8 f2 19 ff ff       	call   f0100193 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f010e7a1:	e8 b7 de ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e7a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e7a9:	e8 0c c2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e7ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f010e7b1:	83 ec 0c             	sub    $0xc,%esp
f010e7b4:	68 00 fc 0f 00       	push   $0xffc00
f010e7b9:	e8 2a e8 ff ff       	call   f010cfe8 <kmalloc>
f010e7be:	83 c4 10             	add    $0x10,%esp
f010e7c1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f010e7c7:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010e7ce:	10 00 00 
f010e7d1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e7d6:	0f b6 d0             	movzbl %al,%edx
f010e7d9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010e7df:	01 d0                	add    %edx,%eax
f010e7e1:	48                   	dec    %eax
f010e7e2:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010e7e8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010e7ee:	ba 00 00 00 00       	mov    $0x0,%edx
f010e7f3:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010e7f9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010e7ff:	29 d0                	sub    %edx,%eax
f010e801:	89 c1                	mov    %eax,%ecx
f010e803:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010e80a:	10 00 00 
f010e80d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e812:	0f b6 c0             	movzbl %al,%eax
f010e815:	c1 e0 04             	shl    $0x4,%eax
f010e818:	89 c2                	mov    %eax,%edx
f010e81a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010e820:	01 d0                	add    %edx,%eax
f010e822:	48                   	dec    %eax
f010e823:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010e829:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e82f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e834:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010e83a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e840:	29 d0                	sub    %edx,%eax
f010e842:	01 c8                	add    %ecx,%eax
f010e844:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f010e84a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e850:	39 c2                	cmp    %eax,%edx
f010e852:	74 17                	je     f010e86b <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f010e854:	83 ec 04             	sub    $0x4,%esp
f010e857:	68 ec e5 11 f0       	push   $0xf011e5ec
f010e85c:	68 19 01 00 00       	push   $0x119
f010e861:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e866:	e8 28 19 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e86b:	e8 ed dd ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e870:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e873:	74 17                	je     f010e88c <test_kmalloc_nextfit+0x838>
f010e875:	83 ec 04             	sub    $0x4,%esp
f010e878:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010e87d:	68 1a 01 00 00       	push   $0x11a
f010e882:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e887:	e8 07 19 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010e88c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e88f:	e8 26 c1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e894:	29 c3                	sub    %eax,%ebx
f010e896:	89 d8                	mov    %ebx,%eax
f010e898:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e89d:	74 17                	je     f010e8b6 <test_kmalloc_nextfit+0x862>
f010e89f:	83 ec 04             	sub    $0x4,%esp
f010e8a2:	68 9b e5 11 f0       	push   $0xf011e59b
f010e8a7:	68 1b 01 00 00       	push   $0x11b
f010e8ac:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e8b1:	e8 dd 18 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e8b6:	e8 a2 dd ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e8bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e8be:	e8 f7 c0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e8c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f010e8c6:	83 ec 0c             	sub    $0xc,%esp
f010e8c9:	68 00 04 00 00       	push   $0x400
f010e8ce:	e8 15 e7 ff ff       	call   f010cfe8 <kmalloc>
f010e8d3:	83 c4 10             	add    $0x10,%esp
f010e8d6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f010e8dc:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010e8e3:	10 00 00 
f010e8e6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e8eb:	0f b6 d0             	movzbl %al,%edx
f010e8ee:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010e8f4:	01 d0                	add    %edx,%eax
f010e8f6:	48                   	dec    %eax
f010e8f7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010e8fd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010e903:	ba 00 00 00 00       	mov    $0x0,%edx
f010e908:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010e90e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010e914:	29 d0                	sub    %edx,%eax
f010e916:	89 c1                	mov    %eax,%ecx
f010e918:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f010e91f:	10 00 00 
f010e922:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e927:	0f b6 c0             	movzbl %al,%eax
f010e92a:	c1 e0 04             	shl    $0x4,%eax
f010e92d:	89 c2                	mov    %eax,%edx
f010e92f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010e935:	01 d0                	add    %edx,%eax
f010e937:	48                   	dec    %eax
f010e938:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f010e93e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010e944:	ba 00 00 00 00       	mov    $0x0,%edx
f010e949:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f010e94f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010e955:	29 d0                	sub    %edx,%eax
f010e957:	01 c8                	add    %ecx,%eax
f010e959:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f010e95f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e965:	39 c2                	cmp    %eax,%edx
f010e967:	74 17                	je     f010e980 <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f010e969:	83 ec 04             	sub    $0x4,%esp
f010e96c:	68 ec e5 11 f0       	push   $0xf011e5ec
f010e971:	68 21 01 00 00       	push   $0x121
f010e976:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e97b:	e8 13 18 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e980:	e8 d8 dc ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e985:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e988:	74 17                	je     f010e9a1 <test_kmalloc_nextfit+0x94d>
f010e98a:	83 ec 04             	sub    $0x4,%esp
f010e98d:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010e992:	68 22 01 00 00       	push   $0x122
f010e997:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e99c:	e8 f2 17 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010e9a1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e9a4:	e8 11 c0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e9a9:	29 c3                	sub    %eax,%ebx
f010e9ab:	89 d8                	mov    %ebx,%eax
f010e9ad:	83 f8 01             	cmp    $0x1,%eax
f010e9b0:	74 17                	je     f010e9c9 <test_kmalloc_nextfit+0x975>
f010e9b2:	83 ec 04             	sub    $0x4,%esp
f010e9b5:	68 9b e5 11 f0       	push   $0xf011e59b
f010e9ba:	68 23 01 00 00       	push   $0x123
f010e9bf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010e9c4:	e8 ca 17 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e9c9:	e8 8f dc ff ff       	call   f010c65d <pf_calculate_free_frames>
f010e9ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e9d1:	e8 e4 bf ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010e9d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f010e9d9:	83 ec 0c             	sub    $0xc,%esp
f010e9dc:	68 00 00 50 00       	push   $0x500000
f010e9e1:	e8 02 e6 ff ff       	call   f010cfe8 <kmalloc>
f010e9e6:	83 c4 10             	add    $0x10,%esp
f010e9e9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f010e9ef:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f010e9f6:	10 00 00 
f010e9f9:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010e9fe:	0f b6 d0             	movzbl %al,%edx
f010ea01:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010ea07:	01 d0                	add    %edx,%eax
f010ea09:	48                   	dec    %eax
f010ea0a:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f010ea10:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ea16:	ba 00 00 00 00       	mov    $0x0,%edx
f010ea1b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f010ea21:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ea27:	29 d0                	sub    %edx,%eax
f010ea29:	89 c1                	mov    %eax,%ecx
f010ea2b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f010ea32:	10 00 00 
f010ea35:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010ea3a:	0f b6 c0             	movzbl %al,%eax
f010ea3d:	c1 e0 04             	shl    $0x4,%eax
f010ea40:	89 c2                	mov    %eax,%edx
f010ea42:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010ea48:	01 d0                	add    %edx,%eax
f010ea4a:	48                   	dec    %eax
f010ea4b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f010ea51:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010ea57:	ba 00 00 00 00       	mov    $0x0,%edx
f010ea5c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f010ea62:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010ea68:	29 d0                	sub    %edx,%eax
f010ea6a:	01 c8                	add    %ecx,%eax
f010ea6c:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f010ea72:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ea78:	39 c2                	cmp    %eax,%edx
f010ea7a:	74 17                	je     f010ea93 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f010ea7c:	83 ec 04             	sub    $0x4,%esp
f010ea7f:	68 ec e5 11 f0       	push   $0xf011e5ec
f010ea84:	68 29 01 00 00       	push   $0x129
f010ea89:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ea8e:	e8 00 17 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ea93:	e8 c5 db ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ea98:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ea9b:	74 17                	je     f010eab4 <test_kmalloc_nextfit+0xa60>
f010ea9d:	83 ec 04             	sub    $0x4,%esp
f010eaa0:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010eaa5:	68 2a 01 00 00       	push   $0x12a
f010eaaa:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010eaaf:	e8 df 16 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010eab4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010eab7:	e8 fe be ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010eabc:	29 c3                	sub    %eax,%ebx
f010eabe:	89 d8                	mov    %ebx,%eax
f010eac0:	3d 00 05 00 00       	cmp    $0x500,%eax
f010eac5:	74 17                	je     f010eade <test_kmalloc_nextfit+0xa8a>
f010eac7:	83 ec 04             	sub    $0x4,%esp
f010eaca:	68 9b e5 11 f0       	push   $0xf011e59b
f010eacf:	68 2b 01 00 00       	push   $0x12b
f010ead4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ead9:	e8 b5 16 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010eade:	e8 7a db ff ff       	call   f010c65d <pf_calculate_free_frames>
f010eae3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010eae6:	e8 cf be ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010eaeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f010eaee:	83 ec 0c             	sub    $0xc,%esp
f010eaf1:	68 00 00 10 00       	push   $0x100000
f010eaf6:	e8 ed e4 ff ff       	call   f010cfe8 <kmalloc>
f010eafb:	83 c4 10             	add    $0x10,%esp
f010eafe:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f010eb04:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f010eb0b:	10 00 00 
f010eb0e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010eb13:	0f b6 d0             	movzbl %al,%edx
f010eb16:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010eb1c:	01 d0                	add    %edx,%eax
f010eb1e:	48                   	dec    %eax
f010eb1f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f010eb25:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010eb2b:	ba 00 00 00 00       	mov    $0x0,%edx
f010eb30:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f010eb36:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010eb3c:	29 d0                	sub    %edx,%eax
f010eb3e:	89 c1                	mov    %eax,%ecx
f010eb40:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f010eb47:	10 00 00 
f010eb4a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010eb4f:	0f b6 c0             	movzbl %al,%eax
f010eb52:	c1 e0 04             	shl    $0x4,%eax
f010eb55:	89 c2                	mov    %eax,%edx
f010eb57:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010eb5d:	01 d0                	add    %edx,%eax
f010eb5f:	48                   	dec    %eax
f010eb60:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f010eb66:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010eb6c:	ba 00 00 00 00       	mov    $0x0,%edx
f010eb71:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f010eb77:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010eb7d:	29 d0                	sub    %edx,%eax
f010eb7f:	01 c8                	add    %ecx,%eax
f010eb81:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f010eb87:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010eb8d:	39 c2                	cmp    %eax,%edx
f010eb8f:	74 17                	je     f010eba8 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f010eb91:	83 ec 04             	sub    $0x4,%esp
f010eb94:	68 ec e5 11 f0       	push   $0xf011e5ec
f010eb99:	68 31 01 00 00       	push   $0x131
f010eb9e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010eba3:	e8 eb 15 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eba8:	e8 b0 da ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ebad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ebb0:	74 17                	je     f010ebc9 <test_kmalloc_nextfit+0xb75>
f010ebb2:	83 ec 04             	sub    $0x4,%esp
f010ebb5:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ebba:	68 32 01 00 00       	push   $0x132
f010ebbf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ebc4:	e8 ca 15 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010ebc9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ebcc:	e8 e9 bd ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ebd1:	29 c3                	sub    %eax,%ebx
f010ebd3:	89 d8                	mov    %ebx,%eax
f010ebd5:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ebda:	74 17                	je     f010ebf3 <test_kmalloc_nextfit+0xb9f>
f010ebdc:	83 ec 04             	sub    $0x4,%esp
f010ebdf:	68 9b e5 11 f0       	push   $0xf011e59b
f010ebe4:	68 33 01 00 00       	push   $0x133
f010ebe9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ebee:	e8 a0 15 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ebf3:	e8 65 da ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ebf8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ebfb:	e8 ba bd ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ec00:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f010ec03:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010ec09:	83 ec 0c             	sub    $0xc,%esp
f010ec0c:	50                   	push   %eax
f010ec0d:	e8 f0 e3 ff ff       	call   f010d002 <kfree>
f010ec12:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ec15:	e8 43 da ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ec1a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ec1d:	74 17                	je     f010ec36 <test_kmalloc_nextfit+0xbe2>
f010ec1f:	83 ec 04             	sub    $0x4,%esp
f010ec22:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ec27:	68 38 01 00 00       	push   $0x138
f010ec2c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ec31:	e8 5d 15 ff ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010ec36:	e8 7f bd ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ec3b:	89 c2                	mov    %eax,%edx
f010ec3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec40:	29 c2                	sub    %eax,%edx
f010ec42:	89 d0                	mov    %edx,%eax
f010ec44:	3d 00 02 00 00       	cmp    $0x200,%eax
f010ec49:	74 17                	je     f010ec62 <test_kmalloc_nextfit+0xc0e>
f010ec4b:	83 ec 04             	sub    $0x4,%esp
f010ec4e:	68 ac e5 11 f0       	push   $0xf011e5ac
f010ec53:	68 39 01 00 00       	push   $0x139
f010ec58:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ec5d:	e8 31 15 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ec62:	e8 f6 d9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ec67:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ec6a:	e8 4b bd ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ec6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f010ec72:	83 ec 0c             	sub    $0xc,%esp
f010ec75:	68 00 04 00 00       	push   $0x400
f010ec7a:	e8 69 e3 ff ff       	call   f010cfe8 <kmalloc>
f010ec7f:	83 c4 10             	add    $0x10,%esp
f010ec82:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f010ec88:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f010ec8f:	10 00 00 
f010ec92:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010ec97:	0f b6 d0             	movzbl %al,%edx
f010ec9a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010eca0:	01 d0                	add    %edx,%eax
f010eca2:	48                   	dec    %eax
f010eca3:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f010eca9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010ecaf:	ba 00 00 00 00       	mov    $0x0,%edx
f010ecb4:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f010ecba:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010ecc0:	29 d0                	sub    %edx,%eax
f010ecc2:	89 c1                	mov    %eax,%ecx
f010ecc4:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f010eccb:	10 00 00 
f010ecce:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010ecd3:	0f b6 c0             	movzbl %al,%eax
f010ecd6:	c1 e0 04             	shl    $0x4,%eax
f010ecd9:	89 c2                	mov    %eax,%edx
f010ecdb:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010ece1:	01 d0                	add    %edx,%eax
f010ece3:	48                   	dec    %eax
f010ece4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f010ecea:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010ecf0:	ba 00 00 00 00       	mov    $0x0,%edx
f010ecf5:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f010ecfb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010ed01:	29 d0                	sub    %edx,%eax
f010ed03:	01 c8                	add    %ecx,%eax
f010ed05:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f010ed0b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ed11:	39 c2                	cmp    %eax,%edx
f010ed13:	74 17                	je     f010ed2c <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f010ed15:	83 ec 04             	sub    $0x4,%esp
f010ed18:	68 ec e5 11 f0       	push   $0xf011e5ec
f010ed1d:	68 3f 01 00 00       	push   $0x13f
f010ed22:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ed27:	e8 67 14 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ed2c:	e8 2c d9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ed31:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ed34:	74 17                	je     f010ed4d <test_kmalloc_nextfit+0xcf9>
f010ed36:	83 ec 04             	sub    $0x4,%esp
f010ed39:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ed3e:	68 40 01 00 00       	push   $0x140
f010ed43:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ed48:	e8 46 14 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010ed4d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ed50:	e8 65 bc ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ed55:	29 c3                	sub    %eax,%ebx
f010ed57:	89 d8                	mov    %ebx,%eax
f010ed59:	83 f8 01             	cmp    $0x1,%eax
f010ed5c:	74 17                	je     f010ed75 <test_kmalloc_nextfit+0xd21>
f010ed5e:	83 ec 04             	sub    $0x4,%esp
f010ed61:	68 9b e5 11 f0       	push   $0xf011e59b
f010ed66:	68 41 01 00 00       	push   $0x141
f010ed6b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ed70:	e8 1e 14 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ed75:	e8 e3 d8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ed7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ed7d:	e8 38 bc ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ed82:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f010ed85:	83 ec 0c             	sub    $0xc,%esp
f010ed88:	68 00 e0 1f 00       	push   $0x1fe000
f010ed8d:	e8 56 e2 ff ff       	call   f010cfe8 <kmalloc>
f010ed92:	83 c4 10             	add    $0x10,%esp
f010ed95:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f010ed9b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f010eda2:	10 00 00 
f010eda5:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010edaa:	0f b6 d0             	movzbl %al,%edx
f010edad:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010edb3:	01 d0                	add    %edx,%eax
f010edb5:	48                   	dec    %eax
f010edb6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f010edbc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010edc2:	ba 00 00 00 00       	mov    $0x0,%edx
f010edc7:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f010edcd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010edd3:	29 d0                	sub    %edx,%eax
f010edd5:	89 c1                	mov    %eax,%ecx
f010edd7:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f010edde:	10 00 00 
f010ede1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010ede6:	0f b6 c0             	movzbl %al,%eax
f010ede9:	c1 e0 04             	shl    $0x4,%eax
f010edec:	89 c2                	mov    %eax,%edx
f010edee:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010edf4:	01 d0                	add    %edx,%eax
f010edf6:	48                   	dec    %eax
f010edf7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f010edfd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010ee03:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee08:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f010ee0e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010ee14:	29 d0                	sub    %edx,%eax
f010ee16:	01 c8                	add    %ecx,%eax
f010ee18:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f010ee1e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ee24:	39 c2                	cmp    %eax,%edx
f010ee26:	74 17                	je     f010ee3f <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f010ee28:	83 ec 04             	sub    $0x4,%esp
f010ee2b:	68 ec e5 11 f0       	push   $0xf011e5ec
f010ee30:	68 47 01 00 00       	push   $0x147
f010ee35:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ee3a:	e8 54 13 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ee3f:	e8 19 d8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ee44:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ee47:	74 17                	je     f010ee60 <test_kmalloc_nextfit+0xe0c>
f010ee49:	83 ec 04             	sub    $0x4,%esp
f010ee4c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ee51:	68 48 01 00 00       	push   $0x148
f010ee56:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ee5b:	e8 33 13 ff ff       	call   f0100193 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010ee60:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ee63:	e8 52 bb ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ee68:	29 c3                	sub    %eax,%ebx
f010ee6a:	89 d8                	mov    %ebx,%eax
f010ee6c:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f010ee71:	74 17                	je     f010ee8a <test_kmalloc_nextfit+0xe36>
f010ee73:	83 ec 04             	sub    $0x4,%esp
f010ee76:	68 9b e5 11 f0       	push   $0xf011e59b
f010ee7b:	68 4a 01 00 00       	push   $0x14a
f010ee80:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ee85:	e8 09 13 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ee8a:	e8 ce d7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ee8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ee92:	e8 23 bb ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ee97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f010ee9a:	83 ec 0c             	sub    $0xc,%esp
f010ee9d:	68 00 00 08 00       	push   $0x80000
f010eea2:	e8 41 e1 ff ff       	call   f010cfe8 <kmalloc>
f010eea7:	83 c4 10             	add    $0x10,%esp
f010eeaa:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f010eeb0:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f010eeb7:	10 00 00 
f010eeba:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010eebf:	0f b6 d0             	movzbl %al,%edx
f010eec2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010eec8:	01 d0                	add    %edx,%eax
f010eeca:	48                   	dec    %eax
f010eecb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f010eed1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010eed7:	ba 00 00 00 00       	mov    $0x0,%edx
f010eedc:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f010eee2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010eee8:	29 d0                	sub    %edx,%eax
f010eeea:	89 c1                	mov    %eax,%ecx
f010eeec:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f010eef3:	10 00 00 
f010eef6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010eefb:	0f b6 c0             	movzbl %al,%eax
f010eefe:	c1 e0 04             	shl    $0x4,%eax
f010ef01:	89 c2                	mov    %eax,%edx
f010ef03:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010ef09:	01 d0                	add    %edx,%eax
f010ef0b:	48                   	dec    %eax
f010ef0c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f010ef12:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010ef18:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef1d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f010ef23:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010ef29:	29 d0                	sub    %edx,%eax
f010ef2b:	01 c8                	add    %ecx,%eax
f010ef2d:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f010ef33:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ef39:	39 c2                	cmp    %eax,%edx
f010ef3b:	74 17                	je     f010ef54 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f010ef3d:	83 ec 04             	sub    $0x4,%esp
f010ef40:	68 ec e5 11 f0       	push   $0xf011e5ec
f010ef45:	68 50 01 00 00       	push   $0x150
f010ef4a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ef4f:	e8 3f 12 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ef54:	e8 04 d7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ef59:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ef5c:	74 17                	je     f010ef75 <test_kmalloc_nextfit+0xf21>
f010ef5e:	83 ec 04             	sub    $0x4,%esp
f010ef61:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ef66:	68 51 01 00 00       	push   $0x151
f010ef6b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ef70:	e8 1e 12 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010ef75:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ef78:	e8 3d ba ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ef7d:	29 c3                	sub    %eax,%ebx
f010ef7f:	89 d8                	mov    %ebx,%eax
f010ef81:	3d 80 00 00 00       	cmp    $0x80,%eax
f010ef86:	74 17                	je     f010ef9f <test_kmalloc_nextfit+0xf4b>
f010ef88:	83 ec 04             	sub    $0x4,%esp
f010ef8b:	68 9b e5 11 f0       	push   $0xf011e59b
f010ef90:	68 52 01 00 00       	push   $0x152
f010ef95:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ef9a:	e8 f4 11 ff ff       	call   f0100193 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f010ef9f:	83 ec 0c             	sub    $0xc,%esp
f010efa2:	68 0c e6 11 f0       	push   $0xf011e60c
f010efa7:	e8 f7 85 ff ff       	call   f01075a3 <cprintf>
f010efac:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f010efaf:	e8 a9 d6 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010efb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010efb7:	e8 fe b9 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010efbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f010efbf:	83 ec 0c             	sub    $0xc,%esp
f010efc2:	68 00 00 38 00       	push   $0x380000
f010efc7:	e8 1c e0 ff ff       	call   f010cfe8 <kmalloc>
f010efcc:	83 c4 10             	add    $0x10,%esp
f010efcf:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f010efd5:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f010efdc:	10 00 00 
f010efdf:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010efe4:	0f b6 d0             	movzbl %al,%edx
f010efe7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010efed:	01 d0                	add    %edx,%eax
f010efef:	48                   	dec    %eax
f010eff0:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f010eff6:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010effc:	ba 00 00 00 00       	mov    $0x0,%edx
f010f001:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f010f007:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f00d:	29 d0                	sub    %edx,%eax
f010f00f:	89 c1                	mov    %eax,%ecx
f010f011:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f010f018:	10 00 00 
f010f01b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f020:	0f b6 c0             	movzbl %al,%eax
f010f023:	c1 e0 04             	shl    $0x4,%eax
f010f026:	89 c2                	mov    %eax,%edx
f010f028:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f010f02e:	01 d0                	add    %edx,%eax
f010f030:	48                   	dec    %eax
f010f031:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f010f037:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010f03d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f042:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f010f048:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010f04e:	29 d0                	sub    %edx,%eax
f010f050:	01 c8                	add    %ecx,%eax
f010f052:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f010f058:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f05e:	39 c2                	cmp    %eax,%edx
f010f060:	74 17                	je     f010f079 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f010f062:	83 ec 04             	sub    $0x4,%esp
f010f065:	68 ec e5 11 f0       	push   $0xf011e5ec
f010f06a:	68 5c 01 00 00       	push   $0x15c
f010f06f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f074:	e8 1a 11 ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f079:	e8 df d5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f07e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f081:	74 17                	je     f010f09a <test_kmalloc_nextfit+0x1046>
f010f083:	83 ec 04             	sub    $0x4,%esp
f010f086:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f08b:	68 5d 01 00 00       	push   $0x15d
f010f090:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f095:	e8 f9 10 ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010f09a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010f09d:	e8 18 b9 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f0a2:	29 c3                	sub    %eax,%ebx
f010f0a4:	89 d8                	mov    %ebx,%eax
f010f0a6:	3d 80 03 00 00       	cmp    $0x380,%eax
f010f0ab:	74 17                	je     f010f0c4 <test_kmalloc_nextfit+0x1070>
f010f0ad:	83 ec 04             	sub    $0x4,%esp
f010f0b0:	68 9b e5 11 f0       	push   $0xf011e59b
f010f0b5:	68 5e 01 00 00       	push   $0x15e
f010f0ba:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f0bf:	e8 cf 10 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010f0c4:	e8 94 d5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f0c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010f0cc:	e8 e9 b8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f0d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f010f0d4:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f010f0da:	83 ec 0c             	sub    $0xc,%esp
f010f0dd:	50                   	push   %eax
f010f0de:	e8 1f df ff ff       	call   f010d002 <kfree>
f010f0e3:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f0e6:	e8 72 d5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f0eb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f0ee:	74 17                	je     f010f107 <test_kmalloc_nextfit+0x10b3>
f010f0f0:	83 ec 04             	sub    $0x4,%esp
f010f0f3:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f0f8:	68 63 01 00 00       	push   $0x163
f010f0fd:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f102:	e8 8c 10 ff ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010f107:	e8 ae b8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f10c:	89 c2                	mov    %eax,%edx
f010f10e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f111:	29 c2                	sub    %eax,%edx
f010f113:	89 d0                	mov    %edx,%eax
f010f115:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f11a:	74 17                	je     f010f133 <test_kmalloc_nextfit+0x10df>
f010f11c:	83 ec 04             	sub    $0x4,%esp
f010f11f:	68 ac e5 11 f0       	push   $0xf011e5ac
f010f124:	68 64 01 00 00       	push   $0x164
f010f129:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f12e:	e8 60 10 ff ff       	call   f0100193 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010f133:	e8 25 d5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f138:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010f13b:	e8 7a b8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f140:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f010f143:	83 ec 0c             	sub    $0xc,%esp
f010f146:	68 00 fc 3f 00       	push   $0x3ffc00
f010f14b:	e8 98 de ff ff       	call   f010cfe8 <kmalloc>
f010f150:	83 c4 10             	add    $0x10,%esp
f010f153:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f010f159:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f010f160:	10 00 00 
f010f163:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f168:	0f b6 d0             	movzbl %al,%edx
f010f16b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010f171:	01 d0                	add    %edx,%eax
f010f173:	48                   	dec    %eax
f010f174:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f010f17a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010f180:	ba 00 00 00 00       	mov    $0x0,%edx
f010f185:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f010f18b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010f191:	29 d0                	sub    %edx,%eax
f010f193:	89 c1                	mov    %eax,%ecx
f010f195:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f010f19c:	10 00 00 
f010f19f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f1a4:	0f b6 c0             	movzbl %al,%eax
f010f1a7:	c1 e0 04             	shl    $0x4,%eax
f010f1aa:	89 c2                	mov    %eax,%edx
f010f1ac:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010f1b2:	01 d0                	add    %edx,%eax
f010f1b4:	48                   	dec    %eax
f010f1b5:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f010f1bb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010f1c1:	ba 00 00 00 00       	mov    $0x0,%edx
f010f1c6:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f010f1cc:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010f1d2:	29 d0                	sub    %edx,%eax
f010f1d4:	01 c8                	add    %ecx,%eax
f010f1d6:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f010f1dc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f1e2:	39 c2                	cmp    %eax,%edx
f010f1e4:	74 17                	je     f010f1fd <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f010f1e6:	83 ec 04             	sub    $0x4,%esp
f010f1e9:	68 ec e5 11 f0       	push   $0xf011e5ec
f010f1ee:	68 6a 01 00 00       	push   $0x16a
f010f1f3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f1f8:	e8 96 0f ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f1fd:	e8 5b d4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f202:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f205:	74 17                	je     f010f21e <test_kmalloc_nextfit+0x11ca>
f010f207:	83 ec 04             	sub    $0x4,%esp
f010f20a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f20f:	68 6b 01 00 00       	push   $0x16b
f010f214:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f219:	e8 75 0f ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010f21e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010f221:	e8 94 b7 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f226:	29 c3                	sub    %eax,%ebx
f010f228:	89 d8                	mov    %ebx,%eax
f010f22a:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f22f:	74 17                	je     f010f248 <test_kmalloc_nextfit+0x11f4>
f010f231:	83 ec 04             	sub    $0x4,%esp
f010f234:	68 9b e5 11 f0       	push   $0xf011e59b
f010f239:	68 6c 01 00 00       	push   $0x16c
f010f23e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f243:	e8 4b 0f ff ff       	call   f0100193 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f010f248:	83 ec 0c             	sub    $0xc,%esp
f010f24b:	68 48 e6 11 f0       	push   $0xf011e648
f010f250:	e8 4e 83 ff ff       	call   f01075a3 <cprintf>
f010f255:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f010f258:	e8 00 d4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f25d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010f260:	e8 55 b7 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f265:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f010f268:	83 ec 0c             	sub    $0xc,%esp
f010f26b:	68 00 00 60 00       	push   $0x600000
f010f270:	e8 73 dd ff ff       	call   f010cfe8 <kmalloc>
f010f275:	83 c4 10             	add    $0x10,%esp
f010f278:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f010f27e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f284:	85 c0                	test   %eax,%eax
f010f286:	74 17                	je     f010f29f <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f010f288:	83 ec 04             	sub    $0x4,%esp
f010f28b:	68 ec e5 11 f0       	push   $0xf011e5ec
f010f290:	68 76 01 00 00       	push   $0x176
f010f295:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f29a:	e8 f4 0e ff ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f29f:	e8 b9 d3 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f2a4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f2a7:	74 17                	je     f010f2c0 <test_kmalloc_nextfit+0x126c>
f010f2a9:	83 ec 04             	sub    $0x4,%esp
f010f2ac:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f2b1:	68 77 01 00 00       	push   $0x177
f010f2b6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f2bb:	e8 d3 0e ff ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f010f2c0:	e8 f5 b6 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f2c5:	89 c2                	mov    %eax,%edx
f010f2c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f2ca:	39 c2                	cmp    %eax,%edx
f010f2cc:	74 17                	je     f010f2e5 <test_kmalloc_nextfit+0x1291>
f010f2ce:	83 ec 04             	sub    $0x4,%esp
f010f2d1:	68 9b e5 11 f0       	push   $0xf011e59b
f010f2d6:	68 78 01 00 00       	push   $0x178
f010f2db:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f2e0:	e8 ae 0e ff ff       	call   f0100193 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f010f2e5:	83 ec 0c             	sub    $0xc,%esp
f010f2e8:	68 80 e6 11 f0       	push   $0xf011e680
f010f2ed:	e8 b1 82 ff ff       	call   f01075a3 <cprintf>
f010f2f2:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f010f2f5:	83 ec 0c             	sub    $0xc,%esp
f010f2f8:	68 bc e6 11 f0       	push   $0xf011e6bc
f010f2fd:	e8 a1 82 ff ff       	call   f01075a3 <cprintf>
f010f302:	83 c4 10             	add    $0x10,%esp
	return 1;
f010f305:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010f30a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010f30d:	5b                   	pop    %ebx
f010f30e:	5f                   	pop    %edi
f010f30f:	5d                   	pop    %ebp
f010f310:	c3                   	ret    

f010f311 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f010f311:	55                   	push   %ebp
f010f312:	89 e5                	mov    %esp,%ebp
f010f314:	57                   	push   %edi
f010f315:	53                   	push   %ebx
f010f316:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f010f31c:	83 ec 0c             	sub    $0xc,%esp
f010f31f:	68 28 e2 11 f0       	push   $0xf011e228
f010f324:	e8 7a 82 ff ff       	call   f01075a3 <cprintf>
f010f329:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010f32c:	83 ec 0c             	sub    $0xc,%esp
f010f32f:	68 58 e2 11 f0       	push   $0xf011e258
f010f334:	e8 6a 82 ff ff       	call   f01075a3 <cprintf>
f010f339:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010f33c:	83 ec 0c             	sub    $0xc,%esp
f010f33f:	68 28 e2 11 f0       	push   $0xf011e228
f010f344:	e8 5a 82 ff ff       	call   f01075a3 <cprintf>
f010f349:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010f34c:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f010f352:	b9 14 00 00 00       	mov    $0x14,%ecx
f010f357:	b8 00 00 00 00       	mov    $0x0,%eax
f010f35c:	89 d7                	mov    %edx,%edi
f010f35e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010f360:	e8 55 b6 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f365:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f368:	e8 f0 d2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f36d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f010f370:	83 ec 0c             	sub    $0xc,%esp
f010f373:	68 00 fc 2f 00       	push   $0x2ffc00
f010f378:	e8 6b dc ff ff       	call   f010cfe8 <kmalloc>
f010f37d:	83 c4 10             	add    $0x10,%esp
f010f380:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010f386:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010f38c:	89 c1                	mov    %eax,%ecx
f010f38e:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010f395:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f39a:	0f b6 d0             	movzbl %al,%edx
f010f39d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f3a0:	01 d0                	add    %edx,%eax
f010f3a2:	48                   	dec    %eax
f010f3a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010f3a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f3a9:	ba 00 00 00 00       	mov    $0x0,%edx
f010f3ae:	f7 75 ec             	divl   -0x14(%ebp)
f010f3b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f3b4:	29 d0                	sub    %edx,%eax
f010f3b6:	89 c3                	mov    %eax,%ebx
f010f3b8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010f3bf:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f3c4:	0f b6 c0             	movzbl %al,%eax
f010f3c7:	c1 e0 04             	shl    $0x4,%eax
f010f3ca:	89 c2                	mov    %eax,%edx
f010f3cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f3cf:	01 d0                	add    %edx,%eax
f010f3d1:	48                   	dec    %eax
f010f3d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010f3d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f3d8:	ba 00 00 00 00       	mov    $0x0,%edx
f010f3dd:	f7 75 e4             	divl   -0x1c(%ebp)
f010f3e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f3e3:	29 d0                	sub    %edx,%eax
f010f3e5:	01 d8                	add    %ebx,%eax
f010f3e7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010f3ec:	39 c1                	cmp    %eax,%ecx
f010f3ee:	74 17                	je     f010f407 <test_kmalloc_bestfit1+0xf6>
f010f3f0:	83 ec 04             	sub    $0x4,%esp
f010f3f3:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010f3f8:	68 92 01 00 00       	push   $0x192
f010f3fd:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f402:	e8 8c 0d ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f407:	e8 51 d2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f40c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f40f:	74 17                	je     f010f428 <test_kmalloc_bestfit1+0x117>
f010f411:	83 ec 04             	sub    $0x4,%esp
f010f414:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f419:	68 93 01 00 00       	push   $0x193
f010f41e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f423:	e8 6b 0d ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f428:	e8 8d b5 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f42d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f430:	29 c2                	sub    %eax,%edx
f010f432:	89 d0                	mov    %edx,%eax
f010f434:	3d 00 03 00 00       	cmp    $0x300,%eax
f010f439:	74 17                	je     f010f452 <test_kmalloc_bestfit1+0x141>
f010f43b:	83 ec 04             	sub    $0x4,%esp
f010f43e:	68 28 e7 11 f0       	push   $0xf011e728
f010f443:	68 94 01 00 00       	push   $0x194
f010f448:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f44d:	e8 41 0d ff ff       	call   f0100193 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010f452:	e8 63 b5 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f457:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f45a:	e8 fe d1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f45f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f010f462:	83 ec 0c             	sub    $0xc,%esp
f010f465:	68 00 fc 2f 00       	push   $0x2ffc00
f010f46a:	e8 79 db ff ff       	call   f010cfe8 <kmalloc>
f010f46f:	83 c4 10             	add    $0x10,%esp
f010f472:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f010f478:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010f47e:	89 c1                	mov    %eax,%ecx
f010f480:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010f487:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f48c:	0f b6 d0             	movzbl %al,%edx
f010f48f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f492:	01 d0                	add    %edx,%eax
f010f494:	48                   	dec    %eax
f010f495:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010f498:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f49b:	ba 00 00 00 00       	mov    $0x0,%edx
f010f4a0:	f7 75 dc             	divl   -0x24(%ebp)
f010f4a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f4a6:	29 d0                	sub    %edx,%eax
f010f4a8:	89 c3                	mov    %eax,%ebx
f010f4aa:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010f4b1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f4b6:	0f b6 c0             	movzbl %al,%eax
f010f4b9:	c1 e0 04             	shl    $0x4,%eax
f010f4bc:	89 c2                	mov    %eax,%edx
f010f4be:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f4c1:	01 d0                	add    %edx,%eax
f010f4c3:	48                   	dec    %eax
f010f4c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010f4c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f4ca:	ba 00 00 00 00       	mov    $0x0,%edx
f010f4cf:	f7 75 d4             	divl   -0x2c(%ebp)
f010f4d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f4d5:	29 d0                	sub    %edx,%eax
f010f4d7:	01 d8                	add    %ebx,%eax
f010f4d9:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f010f4de:	39 c1                	cmp    %eax,%ecx
f010f4e0:	74 17                	je     f010f4f9 <test_kmalloc_bestfit1+0x1e8>
f010f4e2:	83 ec 04             	sub    $0x4,%esp
f010f4e5:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010f4ea:	68 9a 01 00 00       	push   $0x19a
f010f4ef:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f4f4:	e8 9a 0c ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f4f9:	e8 5f d1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f4fe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f501:	74 17                	je     f010f51a <test_kmalloc_bestfit1+0x209>
f010f503:	83 ec 04             	sub    $0x4,%esp
f010f506:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f50b:	68 9b 01 00 00       	push   $0x19b
f010f510:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f515:	e8 79 0c ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f51a:	e8 9b b4 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f51f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f522:	29 c2                	sub    %eax,%edx
f010f524:	89 d0                	mov    %edx,%eax
f010f526:	3d 00 03 00 00       	cmp    $0x300,%eax
f010f52b:	74 17                	je     f010f544 <test_kmalloc_bestfit1+0x233>
f010f52d:	83 ec 04             	sub    $0x4,%esp
f010f530:	68 28 e7 11 f0       	push   $0xf011e728
f010f535:	68 9c 01 00 00       	push   $0x19c
f010f53a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f53f:	e8 4f 0c ff ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f544:	e8 71 b4 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f549:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f54c:	e8 0c d1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f551:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f010f554:	83 ec 0c             	sub    $0xc,%esp
f010f557:	68 00 fc 1f 00       	push   $0x1ffc00
f010f55c:	e8 87 da ff ff       	call   f010cfe8 <kmalloc>
f010f561:	83 c4 10             	add    $0x10,%esp
f010f564:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f010f56a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010f570:	89 c1                	mov    %eax,%ecx
f010f572:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010f579:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f57e:	0f b6 d0             	movzbl %al,%edx
f010f581:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f584:	01 d0                	add    %edx,%eax
f010f586:	48                   	dec    %eax
f010f587:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010f58a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f58d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f592:	f7 75 cc             	divl   -0x34(%ebp)
f010f595:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f598:	29 d0                	sub    %edx,%eax
f010f59a:	89 c3                	mov    %eax,%ebx
f010f59c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010f5a3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f5a8:	0f b6 c0             	movzbl %al,%eax
f010f5ab:	c1 e0 04             	shl    $0x4,%eax
f010f5ae:	89 c2                	mov    %eax,%edx
f010f5b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f5b3:	01 d0                	add    %edx,%eax
f010f5b5:	48                   	dec    %eax
f010f5b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010f5b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f5bc:	ba 00 00 00 00       	mov    $0x0,%edx
f010f5c1:	f7 75 c4             	divl   -0x3c(%ebp)
f010f5c4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f5c7:	29 d0                	sub    %edx,%eax
f010f5c9:	01 d8                	add    %ebx,%eax
f010f5cb:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f010f5d0:	39 c1                	cmp    %eax,%ecx
f010f5d2:	74 17                	je     f010f5eb <test_kmalloc_bestfit1+0x2da>
f010f5d4:	83 ec 04             	sub    $0x4,%esp
f010f5d7:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010f5dc:	68 a2 01 00 00       	push   $0x1a2
f010f5e1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f5e6:	e8 a8 0b ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f5eb:	e8 6d d0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f5f0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f5f3:	74 17                	je     f010f60c <test_kmalloc_bestfit1+0x2fb>
f010f5f5:	83 ec 04             	sub    $0x4,%esp
f010f5f8:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f5fd:	68 a3 01 00 00       	push   $0x1a3
f010f602:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f607:	e8 87 0b ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f60c:	e8 a9 b3 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f611:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f614:	29 c2                	sub    %eax,%edx
f010f616:	89 d0                	mov    %edx,%eax
f010f618:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f61d:	74 17                	je     f010f636 <test_kmalloc_bestfit1+0x325>
f010f61f:	83 ec 04             	sub    $0x4,%esp
f010f622:	68 28 e7 11 f0       	push   $0xf011e728
f010f627:	68 a4 01 00 00       	push   $0x1a4
f010f62c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f631:	e8 5d 0b ff ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f636:	e8 7f b3 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f63b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f63e:	e8 1a d0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f643:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f010f646:	83 ec 0c             	sub    $0xc,%esp
f010f649:	68 00 fc 1f 00       	push   $0x1ffc00
f010f64e:	e8 95 d9 ff ff       	call   f010cfe8 <kmalloc>
f010f653:	83 c4 10             	add    $0x10,%esp
f010f656:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010f65c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010f662:	89 c1                	mov    %eax,%ecx
f010f664:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010f66b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f670:	0f b6 d0             	movzbl %al,%edx
f010f673:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f676:	01 d0                	add    %edx,%eax
f010f678:	48                   	dec    %eax
f010f679:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010f67c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f67f:	ba 00 00 00 00       	mov    $0x0,%edx
f010f684:	f7 75 bc             	divl   -0x44(%ebp)
f010f687:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f68a:	29 d0                	sub    %edx,%eax
f010f68c:	89 c3                	mov    %eax,%ebx
f010f68e:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010f695:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f69a:	0f b6 c0             	movzbl %al,%eax
f010f69d:	c1 e0 04             	shl    $0x4,%eax
f010f6a0:	89 c2                	mov    %eax,%edx
f010f6a2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010f6a5:	01 d0                	add    %edx,%eax
f010f6a7:	48                   	dec    %eax
f010f6a8:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010f6ab:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f6ae:	ba 00 00 00 00       	mov    $0x0,%edx
f010f6b3:	f7 75 b4             	divl   -0x4c(%ebp)
f010f6b6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f6b9:	29 d0                	sub    %edx,%eax
f010f6bb:	01 d8                	add    %ebx,%eax
f010f6bd:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f010f6c2:	39 c1                	cmp    %eax,%ecx
f010f6c4:	74 17                	je     f010f6dd <test_kmalloc_bestfit1+0x3cc>
f010f6c6:	83 ec 04             	sub    $0x4,%esp
f010f6c9:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010f6ce:	68 aa 01 00 00       	push   $0x1aa
f010f6d3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f6d8:	e8 b6 0a ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f6dd:	e8 7b cf ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f6e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f6e5:	74 17                	je     f010f6fe <test_kmalloc_bestfit1+0x3ed>
f010f6e7:	83 ec 04             	sub    $0x4,%esp
f010f6ea:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f6ef:	68 ab 01 00 00       	push   $0x1ab
f010f6f4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f6f9:	e8 95 0a ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f6fe:	e8 b7 b2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f706:	29 c2                	sub    %eax,%edx
f010f708:	89 d0                	mov    %edx,%eax
f010f70a:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f70f:	74 17                	je     f010f728 <test_kmalloc_bestfit1+0x417>
f010f711:	83 ec 04             	sub    $0x4,%esp
f010f714:	68 28 e7 11 f0       	push   $0xf011e728
f010f719:	68 ac 01 00 00       	push   $0x1ac
f010f71e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f723:	e8 6b 0a ff ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010f728:	e8 8d b2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f72d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f730:	e8 28 cf ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f735:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f010f738:	83 ec 0c             	sub    $0xc,%esp
f010f73b:	68 00 fc 0f 00       	push   $0xffc00
f010f740:	e8 a3 d8 ff ff       	call   f010cfe8 <kmalloc>
f010f745:	83 c4 10             	add    $0x10,%esp
f010f748:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f010f74e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010f754:	89 c1                	mov    %eax,%ecx
f010f756:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010f75d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f762:	0f b6 d0             	movzbl %al,%edx
f010f765:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f768:	01 d0                	add    %edx,%eax
f010f76a:	48                   	dec    %eax
f010f76b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010f76e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f771:	ba 00 00 00 00       	mov    $0x0,%edx
f010f776:	f7 75 ac             	divl   -0x54(%ebp)
f010f779:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f77c:	29 d0                	sub    %edx,%eax
f010f77e:	89 c3                	mov    %eax,%ebx
f010f780:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010f787:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f78c:	0f b6 c0             	movzbl %al,%eax
f010f78f:	c1 e0 04             	shl    $0x4,%eax
f010f792:	89 c2                	mov    %eax,%edx
f010f794:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f797:	01 d0                	add    %edx,%eax
f010f799:	48                   	dec    %eax
f010f79a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010f79d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f7a0:	ba 00 00 00 00       	mov    $0x0,%edx
f010f7a5:	f7 75 a4             	divl   -0x5c(%ebp)
f010f7a8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f7ab:	29 d0                	sub    %edx,%eax
f010f7ad:	01 d8                	add    %ebx,%eax
f010f7af:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f010f7b4:	39 c1                	cmp    %eax,%ecx
f010f7b6:	74 17                	je     f010f7cf <test_kmalloc_bestfit1+0x4be>
f010f7b8:	83 ec 04             	sub    $0x4,%esp
f010f7bb:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010f7c0:	68 b2 01 00 00       	push   $0x1b2
f010f7c5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f7ca:	e8 c4 09 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f7cf:	e8 89 ce ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f7d4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f7d7:	74 17                	je     f010f7f0 <test_kmalloc_bestfit1+0x4df>
f010f7d9:	83 ec 04             	sub    $0x4,%esp
f010f7dc:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f7e1:	68 b3 01 00 00       	push   $0x1b3
f010f7e6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f7eb:	e8 a3 09 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010f7f0:	e8 c5 b1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f7f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f7f8:	29 c2                	sub    %eax,%edx
f010f7fa:	89 d0                	mov    %edx,%eax
f010f7fc:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f801:	74 17                	je     f010f81a <test_kmalloc_bestfit1+0x509>
f010f803:	83 ec 04             	sub    $0x4,%esp
f010f806:	68 28 e7 11 f0       	push   $0xf011e728
f010f80b:	68 b4 01 00 00       	push   $0x1b4
f010f810:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f815:	e8 79 09 ff ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010f81a:	e8 9b b1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f81f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f822:	e8 36 ce ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f827:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f010f82a:	83 ec 0c             	sub    $0xc,%esp
f010f82d:	68 00 fc 0f 00       	push   $0xffc00
f010f832:	e8 b1 d7 ff ff       	call   f010cfe8 <kmalloc>
f010f837:	83 c4 10             	add    $0x10,%esp
f010f83a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010f840:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010f846:	89 c1                	mov    %eax,%ecx
f010f848:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010f84f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f854:	0f b6 d0             	movzbl %al,%edx
f010f857:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010f85a:	01 d0                	add    %edx,%eax
f010f85c:	48                   	dec    %eax
f010f85d:	89 45 98             	mov    %eax,-0x68(%ebp)
f010f860:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f863:	ba 00 00 00 00       	mov    $0x0,%edx
f010f868:	f7 75 9c             	divl   -0x64(%ebp)
f010f86b:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f86e:	29 d0                	sub    %edx,%eax
f010f870:	89 c3                	mov    %eax,%ebx
f010f872:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010f879:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f87e:	0f b6 c0             	movzbl %al,%eax
f010f881:	c1 e0 04             	shl    $0x4,%eax
f010f884:	89 c2                	mov    %eax,%edx
f010f886:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f889:	01 d0                	add    %edx,%eax
f010f88b:	48                   	dec    %eax
f010f88c:	89 45 90             	mov    %eax,-0x70(%ebp)
f010f88f:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f892:	ba 00 00 00 00       	mov    $0x0,%edx
f010f897:	f7 75 94             	divl   -0x6c(%ebp)
f010f89a:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f89d:	29 d0                	sub    %edx,%eax
f010f89f:	01 d8                	add    %ebx,%eax
f010f8a1:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f010f8a6:	39 c1                	cmp    %eax,%ecx
f010f8a8:	74 17                	je     f010f8c1 <test_kmalloc_bestfit1+0x5b0>
f010f8aa:	83 ec 04             	sub    $0x4,%esp
f010f8ad:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010f8b2:	68 ba 01 00 00       	push   $0x1ba
f010f8b7:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f8bc:	e8 d2 08 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f8c1:	e8 97 cd ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f8c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f8c9:	74 17                	je     f010f8e2 <test_kmalloc_bestfit1+0x5d1>
f010f8cb:	83 ec 04             	sub    $0x4,%esp
f010f8ce:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f8d3:	68 bb 01 00 00       	push   $0x1bb
f010f8d8:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f8dd:	e8 b1 08 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010f8e2:	e8 d3 b0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f8e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f8ea:	29 c2                	sub    %eax,%edx
f010f8ec:	89 d0                	mov    %edx,%eax
f010f8ee:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f8f3:	74 17                	je     f010f90c <test_kmalloc_bestfit1+0x5fb>
f010f8f5:	83 ec 04             	sub    $0x4,%esp
f010f8f8:	68 28 e7 11 f0       	push   $0xf011e728
f010f8fd:	68 bc 01 00 00       	push   $0x1bc
f010f902:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f907:	e8 87 08 ff ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010f90c:	e8 a9 b0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f911:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f914:	e8 44 cd ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f919:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f010f91c:	83 ec 0c             	sub    $0xc,%esp
f010f91f:	68 00 fc 0f 00       	push   $0xffc00
f010f924:	e8 bf d6 ff ff       	call   f010cfe8 <kmalloc>
f010f929:	83 c4 10             	add    $0x10,%esp
f010f92c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f010f932:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010f938:	89 c1                	mov    %eax,%ecx
f010f93a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010f941:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f946:	0f b6 d0             	movzbl %al,%edx
f010f949:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010f94c:	01 d0                	add    %edx,%eax
f010f94e:	48                   	dec    %eax
f010f94f:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f952:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f955:	ba 00 00 00 00       	mov    $0x0,%edx
f010f95a:	f7 75 8c             	divl   -0x74(%ebp)
f010f95d:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f960:	29 d0                	sub    %edx,%eax
f010f962:	89 c3                	mov    %eax,%ebx
f010f964:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010f96b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010f970:	0f b6 c0             	movzbl %al,%eax
f010f973:	c1 e0 04             	shl    $0x4,%eax
f010f976:	89 c2                	mov    %eax,%edx
f010f978:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010f97b:	01 d0                	add    %edx,%eax
f010f97d:	48                   	dec    %eax
f010f97e:	89 45 80             	mov    %eax,-0x80(%ebp)
f010f981:	8b 45 80             	mov    -0x80(%ebp),%eax
f010f984:	ba 00 00 00 00       	mov    $0x0,%edx
f010f989:	f7 75 84             	divl   -0x7c(%ebp)
f010f98c:	8b 45 80             	mov    -0x80(%ebp),%eax
f010f98f:	29 d0                	sub    %edx,%eax
f010f991:	01 d8                	add    %ebx,%eax
f010f993:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f010f998:	39 c1                	cmp    %eax,%ecx
f010f99a:	74 17                	je     f010f9b3 <test_kmalloc_bestfit1+0x6a2>
f010f99c:	83 ec 04             	sub    $0x4,%esp
f010f99f:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010f9a4:	68 c2 01 00 00       	push   $0x1c2
f010f9a9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f9ae:	e8 e0 07 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f9b3:	e8 a5 cc ff ff       	call   f010c65d <pf_calculate_free_frames>
f010f9b8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f9bb:	74 17                	je     f010f9d4 <test_kmalloc_bestfit1+0x6c3>
f010f9bd:	83 ec 04             	sub    $0x4,%esp
f010f9c0:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010f9c5:	68 c3 01 00 00       	push   $0x1c3
f010f9ca:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f9cf:	e8 bf 07 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010f9d4:	e8 e1 af ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010f9d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f9dc:	29 c2                	sub    %eax,%edx
f010f9de:	89 d0                	mov    %edx,%eax
f010f9e0:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f9e5:	74 17                	je     f010f9fe <test_kmalloc_bestfit1+0x6ed>
f010f9e7:	83 ec 04             	sub    $0x4,%esp
f010f9ea:	68 28 e7 11 f0       	push   $0xf011e728
f010f9ef:	68 c4 01 00 00       	push   $0x1c4
f010f9f4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010f9f9:	e8 95 07 ff ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010f9fe:	e8 b7 af ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fa03:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fa06:	e8 52 cc ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fa0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f010fa0e:	83 ec 0c             	sub    $0xc,%esp
f010fa11:	68 00 fc 0f 00       	push   $0xffc00
f010fa16:	e8 cd d5 ff ff       	call   f010cfe8 <kmalloc>
f010fa1b:	83 c4 10             	add    $0x10,%esp
f010fa1e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f010fa24:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010fa2a:	89 c1                	mov    %eax,%ecx
f010fa2c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010fa33:	10 00 00 
f010fa36:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010fa3b:	0f b6 d0             	movzbl %al,%edx
f010fa3e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010fa44:	01 d0                	add    %edx,%eax
f010fa46:	48                   	dec    %eax
f010fa47:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010fa4d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010fa53:	ba 00 00 00 00       	mov    $0x0,%edx
f010fa58:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010fa5e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010fa64:	29 d0                	sub    %edx,%eax
f010fa66:	89 c3                	mov    %eax,%ebx
f010fa68:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010fa6f:	10 00 00 
f010fa72:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010fa77:	0f b6 c0             	movzbl %al,%eax
f010fa7a:	c1 e0 04             	shl    $0x4,%eax
f010fa7d:	89 c2                	mov    %eax,%edx
f010fa7f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010fa85:	01 d0                	add    %edx,%eax
f010fa87:	48                   	dec    %eax
f010fa88:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010fa8e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010fa94:	ba 00 00 00 00       	mov    $0x0,%edx
f010fa99:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010fa9f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010faa5:	29 d0                	sub    %edx,%eax
f010faa7:	01 d8                	add    %ebx,%eax
f010faa9:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f010faae:	39 c1                	cmp    %eax,%ecx
f010fab0:	74 17                	je     f010fac9 <test_kmalloc_bestfit1+0x7b8>
f010fab2:	83 ec 04             	sub    $0x4,%esp
f010fab5:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010faba:	68 ca 01 00 00       	push   $0x1ca
f010fabf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fac4:	e8 ca 06 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fac9:	e8 8f cb ff ff       	call   f010c65d <pf_calculate_free_frames>
f010face:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fad1:	74 17                	je     f010faea <test_kmalloc_bestfit1+0x7d9>
f010fad3:	83 ec 04             	sub    $0x4,%esp
f010fad6:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010fadb:	68 cb 01 00 00       	push   $0x1cb
f010fae0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fae5:	e8 a9 06 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010faea:	e8 cb ae ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010faef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010faf2:	29 c2                	sub    %eax,%edx
f010faf4:	89 d0                	mov    %edx,%eax
f010faf6:	3d 00 01 00 00       	cmp    $0x100,%eax
f010fafb:	74 17                	je     f010fb14 <test_kmalloc_bestfit1+0x803>
f010fafd:	83 ec 04             	sub    $0x4,%esp
f010fb00:	68 28 e7 11 f0       	push   $0xf011e728
f010fb05:	68 cc 01 00 00       	push   $0x1cc
f010fb0a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fb0f:	e8 7f 06 ff ff       	call   f0100193 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fb14:	e8 a1 ae ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fb19:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fb1c:	e8 3c cb ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fb21:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f010fb24:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010fb2a:	83 ec 0c             	sub    $0xc,%esp
f010fb2d:	50                   	push   %eax
f010fb2e:	e8 cf d4 ff ff       	call   f010d002 <kfree>
f010fb33:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fb36:	e8 22 cb ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fb3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fb3e:	74 17                	je     f010fb57 <test_kmalloc_bestfit1+0x846>
f010fb40:	83 ec 04             	sub    $0x4,%esp
f010fb43:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010fb48:	68 d5 01 00 00       	push   $0x1d5
f010fb4d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fb52:	e8 3c 06 ff ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010fb57:	e8 5e ae ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fb5c:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fb5f:	3d 00 03 00 00       	cmp    $0x300,%eax
f010fb64:	74 17                	je     f010fb7d <test_kmalloc_bestfit1+0x86c>
f010fb66:	83 ec 04             	sub    $0x4,%esp
f010fb69:	68 3b e7 11 f0       	push   $0xf011e73b
f010fb6e:	68 d6 01 00 00       	push   $0x1d6
f010fb73:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fb78:	e8 16 06 ff ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fb7d:	e8 38 ae ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fb82:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fb85:	e8 d3 ca ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fb8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f010fb8d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010fb93:	83 ec 0c             	sub    $0xc,%esp
f010fb96:	50                   	push   %eax
f010fb97:	e8 66 d4 ff ff       	call   f010d002 <kfree>
f010fb9c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fb9f:	e8 b9 ca ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fba4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fba7:	74 17                	je     f010fbc0 <test_kmalloc_bestfit1+0x8af>
f010fba9:	83 ec 04             	sub    $0x4,%esp
f010fbac:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010fbb1:	68 dc 01 00 00       	push   $0x1dc
f010fbb6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fbbb:	e8 d3 05 ff ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010fbc0:	e8 f5 ad ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fbc5:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fbc8:	3d 00 02 00 00       	cmp    $0x200,%eax
f010fbcd:	74 17                	je     f010fbe6 <test_kmalloc_bestfit1+0x8d5>
f010fbcf:	83 ec 04             	sub    $0x4,%esp
f010fbd2:	68 3b e7 11 f0       	push   $0xf011e73b
f010fbd7:	68 dd 01 00 00       	push   $0x1dd
f010fbdc:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fbe1:	e8 ad 05 ff ff       	call   f0100193 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fbe6:	e8 cf ad ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fbeb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fbee:	e8 6a ca ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fbf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f010fbf6:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010fbfc:	83 ec 0c             	sub    $0xc,%esp
f010fbff:	50                   	push   %eax
f010fc00:	e8 fd d3 ff ff       	call   f010d002 <kfree>
f010fc05:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fc08:	e8 50 ca ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fc0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fc10:	74 17                	je     f010fc29 <test_kmalloc_bestfit1+0x918>
f010fc12:	83 ec 04             	sub    $0x4,%esp
f010fc15:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010fc1a:	68 e3 01 00 00       	push   $0x1e3
f010fc1f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fc24:	e8 6a 05 ff ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010fc29:	e8 8c ad ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fc2e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fc31:	3d 00 01 00 00       	cmp    $0x100,%eax
f010fc36:	74 17                	je     f010fc4f <test_kmalloc_bestfit1+0x93e>
f010fc38:	83 ec 04             	sub    $0x4,%esp
f010fc3b:	68 3b e7 11 f0       	push   $0xf011e73b
f010fc40:	68 e4 01 00 00       	push   $0x1e4
f010fc45:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fc4a:	e8 44 05 ff ff       	call   f0100193 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010fc4f:	e8 66 ad ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fc54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fc57:	e8 01 ca ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fc5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f010fc5f:	83 ec 0c             	sub    $0xc,%esp
f010fc62:	68 00 00 08 00       	push   $0x80000
f010fc67:	e8 7c d3 ff ff       	call   f010cfe8 <kmalloc>
f010fc6c:	83 c4 10             	add    $0x10,%esp
f010fc6f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010fc75:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010fc7b:	89 c1                	mov    %eax,%ecx
f010fc7d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f010fc84:	10 00 00 
f010fc87:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010fc8c:	0f b6 d0             	movzbl %al,%edx
f010fc8f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010fc95:	01 d0                	add    %edx,%eax
f010fc97:	48                   	dec    %eax
f010fc98:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f010fc9e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010fca4:	ba 00 00 00 00       	mov    $0x0,%edx
f010fca9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f010fcaf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010fcb5:	29 d0                	sub    %edx,%eax
f010fcb7:	89 c3                	mov    %eax,%ebx
f010fcb9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010fcc0:	10 00 00 
f010fcc3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010fcc8:	0f b6 c0             	movzbl %al,%eax
f010fccb:	c1 e0 04             	shl    $0x4,%eax
f010fcce:	89 c2                	mov    %eax,%edx
f010fcd0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010fcd6:	01 d0                	add    %edx,%eax
f010fcd8:	48                   	dec    %eax
f010fcd9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010fcdf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010fce5:	ba 00 00 00 00       	mov    $0x0,%edx
f010fcea:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010fcf0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010fcf6:	29 d0                	sub    %edx,%eax
f010fcf8:	01 d8                	add    %ebx,%eax
f010fcfa:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f010fcff:	39 c1                	cmp    %eax,%ecx
f010fd01:	74 17                	je     f010fd1a <test_kmalloc_bestfit1+0xa09>
f010fd03:	83 ec 04             	sub    $0x4,%esp
f010fd06:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010fd0b:	68 ed 01 00 00       	push   $0x1ed
f010fd10:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fd15:	e8 79 04 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fd1a:	e8 3e c9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fd1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fd22:	74 17                	je     f010fd3b <test_kmalloc_bestfit1+0xa2a>
f010fd24:	83 ec 04             	sub    $0x4,%esp
f010fd27:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010fd2c:	68 ee 01 00 00       	push   $0x1ee
f010fd31:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fd36:	e8 58 04 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f010fd3b:	e8 7a ac ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fd40:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fd43:	29 c2                	sub    %eax,%edx
f010fd45:	89 d0                	mov    %edx,%eax
f010fd47:	3d 80 00 00 00       	cmp    $0x80,%eax
f010fd4c:	74 17                	je     f010fd65 <test_kmalloc_bestfit1+0xa54>
f010fd4e:	83 ec 04             	sub    $0x4,%esp
f010fd51:	68 28 e7 11 f0       	push   $0xf011e728
f010fd56:	68 ef 01 00 00       	push   $0x1ef
f010fd5b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fd60:	e8 2e 04 ff ff       	call   f0100193 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f010fd65:	e8 50 ac ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fd6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fd6d:	e8 eb c8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fd72:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f010fd75:	83 ec 0c             	sub    $0xc,%esp
f010fd78:	68 00 fc 0f 00       	push   $0xffc00
f010fd7d:	e8 66 d2 ff ff       	call   f010cfe8 <kmalloc>
f010fd82:	83 c4 10             	add    $0x10,%esp
f010fd85:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010fd8b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010fd91:	89 c1                	mov    %eax,%ecx
f010fd93:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010fd9a:	10 00 00 
f010fd9d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010fda2:	0f b6 d0             	movzbl %al,%edx
f010fda5:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010fdab:	01 d0                	add    %edx,%eax
f010fdad:	48                   	dec    %eax
f010fdae:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010fdb4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010fdba:	ba 00 00 00 00       	mov    $0x0,%edx
f010fdbf:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010fdc5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010fdcb:	29 d0                	sub    %edx,%eax
f010fdcd:	89 c3                	mov    %eax,%ebx
f010fdcf:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f010fdd6:	10 00 00 
f010fdd9:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010fdde:	0f b6 c0             	movzbl %al,%eax
f010fde1:	c1 e0 04             	shl    $0x4,%eax
f010fde4:	89 c2                	mov    %eax,%edx
f010fde6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010fdec:	01 d0                	add    %edx,%eax
f010fdee:	48                   	dec    %eax
f010fdef:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f010fdf5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010fdfb:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe00:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f010fe06:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010fe0c:	29 d0                	sub    %edx,%eax
f010fe0e:	01 d8                	add    %ebx,%eax
f010fe10:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f010fe15:	39 c1                	cmp    %eax,%ecx
f010fe17:	74 17                	je     f010fe30 <test_kmalloc_bestfit1+0xb1f>
f010fe19:	83 ec 04             	sub    $0x4,%esp
f010fe1c:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010fe21:	68 f5 01 00 00       	push   $0x1f5
f010fe26:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fe2b:	e8 63 03 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fe30:	e8 28 c8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fe35:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fe38:	74 17                	je     f010fe51 <test_kmalloc_bestfit1+0xb40>
f010fe3a:	83 ec 04             	sub    $0x4,%esp
f010fe3d:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010fe42:	68 f6 01 00 00       	push   $0x1f6
f010fe47:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fe4c:	e8 42 03 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010fe51:	e8 64 ab ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fe56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fe59:	29 c2                	sub    %eax,%edx
f010fe5b:	89 d0                	mov    %edx,%eax
f010fe5d:	3d 00 01 00 00       	cmp    $0x100,%eax
f010fe62:	74 17                	je     f010fe7b <test_kmalloc_bestfit1+0xb6a>
f010fe64:	83 ec 04             	sub    $0x4,%esp
f010fe67:	68 28 e7 11 f0       	push   $0xf011e728
f010fe6c:	68 f7 01 00 00       	push   $0x1f7
f010fe71:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010fe76:	e8 18 03 ff ff       	call   f0100193 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010fe7b:	e8 3a ab ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010fe80:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fe83:	e8 d5 c7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010fe88:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f010fe8b:	83 ec 0c             	sub    $0xc,%esp
f010fe8e:	68 00 fc 03 00       	push   $0x3fc00
f010fe93:	e8 50 d1 ff ff       	call   f010cfe8 <kmalloc>
f010fe98:	83 c4 10             	add    $0x10,%esp
f010fe9b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f010fea1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010fea7:	89 c1                	mov    %eax,%ecx
f010fea9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f010feb0:	10 00 00 
f010feb3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010feb8:	0f b6 d0             	movzbl %al,%edx
f010febb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010fec1:	01 d0                	add    %edx,%eax
f010fec3:	48                   	dec    %eax
f010fec4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f010feca:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010fed0:	ba 00 00 00 00       	mov    $0x0,%edx
f010fed5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f010fedb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010fee1:	29 d0                	sub    %edx,%eax
f010fee3:	89 c3                	mov    %eax,%ebx
f010fee5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f010feec:	10 00 00 
f010feef:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010fef4:	0f b6 c0             	movzbl %al,%eax
f010fef7:	c1 e0 04             	shl    $0x4,%eax
f010fefa:	89 c2                	mov    %eax,%edx
f010fefc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010ff02:	01 d0                	add    %edx,%eax
f010ff04:	48                   	dec    %eax
f010ff05:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f010ff0b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010ff11:	ba 00 00 00 00       	mov    $0x0,%edx
f010ff16:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f010ff1c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010ff22:	29 d0                	sub    %edx,%eax
f010ff24:	01 d8                	add    %ebx,%eax
f010ff26:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f010ff2b:	39 c1                	cmp    %eax,%ecx
f010ff2d:	74 17                	je     f010ff46 <test_kmalloc_bestfit1+0xc35>
f010ff2f:	83 ec 04             	sub    $0x4,%esp
f010ff32:	68 f8 e6 11 f0       	push   $0xf011e6f8
f010ff37:	68 fd 01 00 00       	push   $0x1fd
f010ff3c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ff41:	e8 4d 02 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ff46:	e8 12 c7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ff4b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ff4e:	74 17                	je     f010ff67 <test_kmalloc_bestfit1+0xc56>
f010ff50:	83 ec 04             	sub    $0x4,%esp
f010ff53:	68 f8 e2 11 f0       	push   $0xf011e2f8
f010ff58:	68 fe 01 00 00       	push   $0x1fe
f010ff5d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ff62:	e8 2c 02 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f010ff67:	e8 4e aa ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ff6c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ff6f:	29 c2                	sub    %eax,%edx
f010ff71:	89 d0                	mov    %edx,%eax
f010ff73:	83 f8 40             	cmp    $0x40,%eax
f010ff76:	74 17                	je     f010ff8f <test_kmalloc_bestfit1+0xc7e>
f010ff78:	83 ec 04             	sub    $0x4,%esp
f010ff7b:	68 28 e7 11 f0       	push   $0xf011e728
f010ff80:	68 ff 01 00 00       	push   $0x1ff
f010ff85:	68 e6 e2 11 f0       	push   $0xf011e2e6
f010ff8a:	e8 04 02 ff ff       	call   f0100193 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f010ff8f:	e8 26 aa ff ff       	call   f010a9ba <sys_calculate_free_frames>
f010ff94:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ff97:	e8 c1 c6 ff ff       	call   f010c65d <pf_calculate_free_frames>
f010ff9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f010ff9f:	83 ec 0c             	sub    $0xc,%esp
f010ffa2:	68 00 fc 3f 00       	push   $0x3ffc00
f010ffa7:	e8 3c d0 ff ff       	call   f010cfe8 <kmalloc>
f010ffac:	83 c4 10             	add    $0x10,%esp
f010ffaf:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f010ffb5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010ffbb:	89 c1                	mov    %eax,%ecx
f010ffbd:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f010ffc4:	10 00 00 
f010ffc7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f010ffcc:	0f b6 d0             	movzbl %al,%edx
f010ffcf:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010ffd5:	01 d0                	add    %edx,%eax
f010ffd7:	48                   	dec    %eax
f010ffd8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f010ffde:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ffe4:	ba 00 00 00 00       	mov    $0x0,%edx
f010ffe9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f010ffef:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010fff5:	29 d0                	sub    %edx,%eax
f010fff7:	89 c3                	mov    %eax,%ebx
f010fff9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0110000:	10 00 00 
f0110003:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110008:	0f b6 c0             	movzbl %al,%eax
f011000b:	c1 e0 04             	shl    $0x4,%eax
f011000e:	89 c2                	mov    %eax,%edx
f0110010:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0110016:	01 d0                	add    %edx,%eax
f0110018:	48                   	dec    %eax
f0110019:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011001f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110025:	ba 00 00 00 00       	mov    $0x0,%edx
f011002a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0110030:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0110036:	29 d0                	sub    %edx,%eax
f0110038:	01 d8                	add    %ebx,%eax
f011003a:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011003f:	39 c1                	cmp    %eax,%ecx
f0110041:	74 17                	je     f011005a <test_kmalloc_bestfit1+0xd49>
f0110043:	83 ec 04             	sub    $0x4,%esp
f0110046:	68 f8 e6 11 f0       	push   $0xf011e6f8
f011004b:	68 05 02 00 00       	push   $0x205
f0110050:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110055:	e8 39 01 ff ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011005a:	e8 fe c5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011005f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110062:	74 17                	je     f011007b <test_kmalloc_bestfit1+0xd6a>
f0110064:	83 ec 04             	sub    $0x4,%esp
f0110067:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011006c:	68 06 02 00 00       	push   $0x206
f0110071:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110076:	e8 18 01 ff ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011007b:	e8 3a a9 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110080:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110083:	29 c2                	sub    %eax,%edx
f0110085:	89 d0                	mov    %edx,%eax
f0110087:	3d 00 04 00 00       	cmp    $0x400,%eax
f011008c:	74 17                	je     f01100a5 <test_kmalloc_bestfit1+0xd94>
f011008e:	83 ec 04             	sub    $0x4,%esp
f0110091:	68 28 e7 11 f0       	push   $0xf011e728
f0110096:	68 07 02 00 00       	push   $0x207
f011009b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01100a0:	e8 ee 00 ff ff       	call   f0100193 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f01100a5:	e8 10 a9 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01100aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01100ad:	e8 ab c5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01100b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f01100b5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01100bb:	83 ec 0c             	sub    $0xc,%esp
f01100be:	50                   	push   %eax
f01100bf:	e8 3e cf ff ff       	call   f010d002 <kfree>
f01100c4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01100c7:	e8 91 c5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01100cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01100cf:	74 17                	je     f01100e8 <test_kmalloc_bestfit1+0xdd7>
f01100d1:	83 ec 04             	sub    $0x4,%esp
f01100d4:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01100d9:	68 10 02 00 00       	push   $0x210
f01100de:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01100e3:	e8 ab 00 ff ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f01100e8:	e8 cd a8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01100ed:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01100f0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01100f5:	74 17                	je     f011010e <test_kmalloc_bestfit1+0xdfd>
f01100f7:	83 ec 04             	sub    $0x4,%esp
f01100fa:	68 3b e7 11 f0       	push   $0xf011e73b
f01100ff:	68 11 02 00 00       	push   $0x211
f0110104:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110109:	e8 85 00 ff ff       	call   f0100193 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011010e:	e8 a7 a8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110113:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110116:	e8 42 c5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011011b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011011e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0110124:	83 ec 0c             	sub    $0xc,%esp
f0110127:	50                   	push   %eax
f0110128:	e8 d5 ce ff ff       	call   f010d002 <kfree>
f011012d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110130:	e8 28 c5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110135:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110138:	74 17                	je     f0110151 <test_kmalloc_bestfit1+0xe40>
f011013a:	83 ec 04             	sub    $0x4,%esp
f011013d:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110142:	68 17 02 00 00       	push   $0x217
f0110147:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011014c:	e8 42 00 ff ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f0110151:	e8 64 a8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110156:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0110159:	3d 80 00 00 00       	cmp    $0x80,%eax
f011015e:	74 17                	je     f0110177 <test_kmalloc_bestfit1+0xe66>
f0110160:	83 ec 04             	sub    $0x4,%esp
f0110163:	68 3b e7 11 f0       	push   $0xf011e73b
f0110168:	68 18 02 00 00       	push   $0x218
f011016d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110172:	e8 1c 00 ff ff       	call   f0100193 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f0110177:	e8 3e a8 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011017c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011017f:	e8 d9 c4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110184:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f0110187:	83 ec 0c             	sub    $0xc,%esp
f011018a:	68 00 fc 1f 00       	push   $0x1ffc00
f011018f:	e8 54 ce ff ff       	call   f010cfe8 <kmalloc>
f0110194:	83 c4 10             	add    $0x10,%esp
f0110197:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011019d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01101a3:	89 c1                	mov    %eax,%ecx
f01101a5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01101ac:	10 00 00 
f01101af:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01101b4:	0f b6 d0             	movzbl %al,%edx
f01101b7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01101bd:	01 d0                	add    %edx,%eax
f01101bf:	48                   	dec    %eax
f01101c0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01101c6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01101cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01101d1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01101d7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01101dd:	29 d0                	sub    %edx,%eax
f01101df:	89 c3                	mov    %eax,%ebx
f01101e1:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01101e8:	10 00 00 
f01101eb:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01101f0:	0f b6 c0             	movzbl %al,%eax
f01101f3:	c1 e0 04             	shl    $0x4,%eax
f01101f6:	89 c2                	mov    %eax,%edx
f01101f8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01101fe:	01 d0                	add    %edx,%eax
f0110200:	48                   	dec    %eax
f0110201:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0110207:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011020d:	ba 00 00 00 00       	mov    $0x0,%edx
f0110212:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0110218:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011021e:	29 d0                	sub    %edx,%eax
f0110220:	01 d8                	add    %ebx,%eax
f0110222:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f0110227:	39 c1                	cmp    %eax,%ecx
f0110229:	74 17                	je     f0110242 <test_kmalloc_bestfit1+0xf31>
f011022b:	83 ec 04             	sub    $0x4,%esp
f011022e:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110233:	68 21 02 00 00       	push   $0x221
f0110238:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011023d:	e8 51 ff fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110242:	e8 16 c4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110247:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011024a:	74 17                	je     f0110263 <test_kmalloc_bestfit1+0xf52>
f011024c:	83 ec 04             	sub    $0x4,%esp
f011024f:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110254:	68 22 02 00 00       	push   $0x222
f0110259:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011025e:	e8 30 ff fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0110263:	e8 52 a7 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110268:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011026b:	29 c2                	sub    %eax,%edx
f011026d:	89 d0                	mov    %edx,%eax
f011026f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110274:	74 17                	je     f011028d <test_kmalloc_bestfit1+0xf7c>
f0110276:	83 ec 04             	sub    $0x4,%esp
f0110279:	68 28 e7 11 f0       	push   $0xf011e728
f011027e:	68 23 02 00 00       	push   $0x223
f0110283:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110288:	e8 06 ff fe ff       	call   f0100193 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011028d:	83 ec 0c             	sub    $0xc,%esp
f0110290:	68 48 e7 11 f0       	push   $0xf011e748
f0110295:	e8 09 73 ff ff       	call   f01075a3 <cprintf>
f011029a:	83 c4 10             	add    $0x10,%esp

	return 1;
f011029d:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01102a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01102a5:	5b                   	pop    %ebx
f01102a6:	5f                   	pop    %edi
f01102a7:	5d                   	pop    %ebp
f01102a8:	c3                   	ret    

f01102a9 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f01102a9:	55                   	push   %ebp
f01102aa:	89 e5                	mov    %esp,%ebp
f01102ac:	57                   	push   %edi
f01102ad:	53                   	push   %ebx
f01102ae:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f01102b4:	83 ec 0c             	sub    $0xc,%esp
f01102b7:	68 28 e2 11 f0       	push   $0xf011e228
f01102bc:	e8 e2 72 ff ff       	call   f01075a3 <cprintf>
f01102c1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01102c4:	83 ec 0c             	sub    $0xc,%esp
f01102c7:	68 58 e2 11 f0       	push   $0xf011e258
f01102cc:	e8 d2 72 ff ff       	call   f01075a3 <cprintf>
f01102d1:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01102d4:	83 ec 0c             	sub    $0xc,%esp
f01102d7:	68 28 e2 11 f0       	push   $0xf011e228
f01102dc:	e8 c2 72 ff ff       	call   f01075a3 <cprintf>
f01102e1:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01102e4:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f01102ea:	b9 14 00 00 00       	mov    $0x14,%ecx
f01102ef:	b8 00 00 00 00       	mov    $0x0,%eax
f01102f4:	89 d7                	mov    %edx,%edi
f01102f6:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f01102f8:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01102ff:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110304:	0f b6 d0             	movzbl %al,%edx
f0110307:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011030a:	01 d0                	add    %edx,%eax
f011030c:	48                   	dec    %eax
f011030d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0110310:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0110313:	ba 00 00 00 00       	mov    $0x0,%edx
f0110318:	f7 75 f4             	divl   -0xc(%ebp)
f011031b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011031e:	29 d0                	sub    %edx,%eax
f0110320:	89 c1                	mov    %eax,%ecx
f0110322:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0110329:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011032e:	0f b6 c0             	movzbl %al,%eax
f0110331:	c1 e0 04             	shl    $0x4,%eax
f0110334:	89 c2                	mov    %eax,%edx
f0110336:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110339:	01 d0                	add    %edx,%eax
f011033b:	48                   	dec    %eax
f011033c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011033f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110342:	ba 00 00 00 00       	mov    $0x0,%edx
f0110347:	f7 75 ec             	divl   -0x14(%ebp)
f011034a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011034d:	29 d0                	sub    %edx,%eax
f011034f:	01 c8                	add    %ecx,%eax
f0110351:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0110356:	29 c2                	sub    %eax,%edx
f0110358:	89 d0                	mov    %edx,%eax
f011035a:	83 ec 0c             	sub    $0xc,%esp
f011035d:	50                   	push   %eax
f011035e:	e8 85 cc ff ff       	call   f010cfe8 <kmalloc>
f0110363:	83 c4 10             	add    $0x10,%esp
f0110366:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011036c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0110372:	85 c0                	test   %eax,%eax
f0110374:	74 17                	je     f011038d <test_kmalloc_bestfit2+0xe4>
f0110376:	83 ec 04             	sub    $0x4,%esp
f0110379:	68 90 e7 11 f0       	push   $0xf011e790
f011037e:	68 39 02 00 00       	push   $0x239
f0110383:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110388:	e8 06 fe fe ff       	call   f0100193 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011038d:	e8 28 a6 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110392:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110395:	e8 c3 c2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011039a:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011039d:	83 ec 0c             	sub    $0xc,%esp
f01103a0:	68 00 fc 1f 00       	push   $0x1ffc00
f01103a5:	e8 3e cc ff ff       	call   f010cfe8 <kmalloc>
f01103aa:	83 c4 10             	add    $0x10,%esp
f01103ad:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01103b3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01103b9:	89 c1                	mov    %eax,%ecx
f01103bb:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01103c2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01103c7:	0f b6 d0             	movzbl %al,%edx
f01103ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01103cd:	01 d0                	add    %edx,%eax
f01103cf:	48                   	dec    %eax
f01103d0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01103d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01103d6:	ba 00 00 00 00       	mov    $0x0,%edx
f01103db:	f7 75 dc             	divl   -0x24(%ebp)
f01103de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01103e1:	29 d0                	sub    %edx,%eax
f01103e3:	89 c3                	mov    %eax,%ebx
f01103e5:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01103ec:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01103f1:	0f b6 c0             	movzbl %al,%eax
f01103f4:	c1 e0 04             	shl    $0x4,%eax
f01103f7:	89 c2                	mov    %eax,%edx
f01103f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01103fc:	01 d0                	add    %edx,%eax
f01103fe:	48                   	dec    %eax
f01103ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0110402:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110405:	ba 00 00 00 00       	mov    $0x0,%edx
f011040a:	f7 75 d4             	divl   -0x2c(%ebp)
f011040d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110410:	29 d0                	sub    %edx,%eax
f0110412:	01 d8                	add    %ebx,%eax
f0110414:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0110419:	39 c1                	cmp    %eax,%ecx
f011041b:	74 17                	je     f0110434 <test_kmalloc_bestfit2+0x18b>
f011041d:	83 ec 04             	sub    $0x4,%esp
f0110420:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110425:	68 43 02 00 00       	push   $0x243
f011042a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011042f:	e8 5f fd fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110434:	e8 24 c2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110439:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011043c:	74 17                	je     f0110455 <test_kmalloc_bestfit2+0x1ac>
f011043e:	83 ec 04             	sub    $0x4,%esp
f0110441:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110446:	68 44 02 00 00       	push   $0x244
f011044b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110450:	e8 3e fd fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f0110455:	e8 60 a5 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011045a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011045d:	29 c2                	sub    %eax,%edx
f011045f:	89 d0                	mov    %edx,%eax
f0110461:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110466:	74 17                	je     f011047f <test_kmalloc_bestfit2+0x1d6>
f0110468:	83 ec 04             	sub    $0x4,%esp
f011046b:	68 28 e7 11 f0       	push   $0xf011e728
f0110470:	68 45 02 00 00       	push   $0x245
f0110475:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011047a:	e8 14 fd fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011047f:	e8 36 a5 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110484:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110487:	e8 d1 c1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011048c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011048f:	83 ec 0c             	sub    $0xc,%esp
f0110492:	68 00 fc 1f 00       	push   $0x1ffc00
f0110497:	e8 4c cb ff ff       	call   f010cfe8 <kmalloc>
f011049c:	83 c4 10             	add    $0x10,%esp
f011049f:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f01104a5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01104ab:	89 c1                	mov    %eax,%ecx
f01104ad:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01104b4:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01104b9:	0f b6 d0             	movzbl %al,%edx
f01104bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01104bf:	01 d0                	add    %edx,%eax
f01104c1:	48                   	dec    %eax
f01104c2:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01104c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01104c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01104cd:	f7 75 cc             	divl   -0x34(%ebp)
f01104d0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01104d3:	29 d0                	sub    %edx,%eax
f01104d5:	89 c3                	mov    %eax,%ebx
f01104d7:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01104de:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01104e3:	0f b6 c0             	movzbl %al,%eax
f01104e6:	c1 e0 04             	shl    $0x4,%eax
f01104e9:	89 c2                	mov    %eax,%edx
f01104eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01104ee:	01 d0                	add    %edx,%eax
f01104f0:	48                   	dec    %eax
f01104f1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01104f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01104f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01104fc:	f7 75 c4             	divl   -0x3c(%ebp)
f01104ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110502:	29 d0                	sub    %edx,%eax
f0110504:	01 d8                	add    %ebx,%eax
f0110506:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011050b:	39 c1                	cmp    %eax,%ecx
f011050d:	74 17                	je     f0110526 <test_kmalloc_bestfit2+0x27d>
f011050f:	83 ec 04             	sub    $0x4,%esp
f0110512:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110517:	68 4b 02 00 00       	push   $0x24b
f011051c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110521:	e8 6d fc fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110526:	e8 32 c1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011052b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011052e:	74 17                	je     f0110547 <test_kmalloc_bestfit2+0x29e>
f0110530:	83 ec 04             	sub    $0x4,%esp
f0110533:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110538:	68 4c 02 00 00       	push   $0x24c
f011053d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110542:	e8 4c fc fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f0110547:	e8 6e a4 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011054c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011054f:	29 c2                	sub    %eax,%edx
f0110551:	89 d0                	mov    %edx,%eax
f0110553:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110558:	74 17                	je     f0110571 <test_kmalloc_bestfit2+0x2c8>
f011055a:	83 ec 04             	sub    $0x4,%esp
f011055d:	68 28 e7 11 f0       	push   $0xf011e728
f0110562:	68 4d 02 00 00       	push   $0x24d
f0110567:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011056c:	e8 22 fc fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110571:	e8 44 a4 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110576:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110579:	e8 df c0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011057e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0110581:	83 ec 0c             	sub    $0xc,%esp
f0110584:	68 00 08 00 00       	push   $0x800
f0110589:	e8 5a ca ff ff       	call   f010cfe8 <kmalloc>
f011058e:	83 c4 10             	add    $0x10,%esp
f0110591:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0110597:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011059d:	89 c1                	mov    %eax,%ecx
f011059f:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01105a6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01105ab:	0f b6 d0             	movzbl %al,%edx
f01105ae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01105b1:	01 d0                	add    %edx,%eax
f01105b3:	48                   	dec    %eax
f01105b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01105b7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01105ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01105bf:	f7 75 bc             	divl   -0x44(%ebp)
f01105c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01105c5:	29 d0                	sub    %edx,%eax
f01105c7:	89 c3                	mov    %eax,%ebx
f01105c9:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01105d0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01105d5:	0f b6 c0             	movzbl %al,%eax
f01105d8:	c1 e0 04             	shl    $0x4,%eax
f01105db:	89 c2                	mov    %eax,%edx
f01105dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01105e0:	01 d0                	add    %edx,%eax
f01105e2:	48                   	dec    %eax
f01105e3:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01105e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01105e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01105ee:	f7 75 b4             	divl   -0x4c(%ebp)
f01105f1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01105f4:	29 d0                	sub    %edx,%eax
f01105f6:	01 d8                	add    %ebx,%eax
f01105f8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01105fd:	39 c1                	cmp    %eax,%ecx
f01105ff:	74 17                	je     f0110618 <test_kmalloc_bestfit2+0x36f>
f0110601:	83 ec 04             	sub    $0x4,%esp
f0110604:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110609:	68 53 02 00 00       	push   $0x253
f011060e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110613:	e8 7b fb fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110618:	e8 40 c0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011061d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110620:	74 17                	je     f0110639 <test_kmalloc_bestfit2+0x390>
f0110622:	83 ec 04             	sub    $0x4,%esp
f0110625:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011062a:	68 54 02 00 00       	push   $0x254
f011062f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110634:	e8 5a fb fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f0110639:	e8 7c a3 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011063e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110641:	29 c2                	sub    %eax,%edx
f0110643:	89 d0                	mov    %edx,%eax
f0110645:	83 f8 01             	cmp    $0x1,%eax
f0110648:	74 17                	je     f0110661 <test_kmalloc_bestfit2+0x3b8>
f011064a:	83 ec 04             	sub    $0x4,%esp
f011064d:	68 28 e7 11 f0       	push   $0xf011e728
f0110652:	68 55 02 00 00       	push   $0x255
f0110657:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011065c:	e8 32 fb fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0110661:	e8 54 a3 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110666:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110669:	e8 ef bf ff ff       	call   f010c65d <pf_calculate_free_frames>
f011066e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0110671:	83 ec 0c             	sub    $0xc,%esp
f0110674:	68 00 08 00 00       	push   $0x800
f0110679:	e8 6a c9 ff ff       	call   f010cfe8 <kmalloc>
f011067e:	83 c4 10             	add    $0x10,%esp
f0110681:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f0110687:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011068d:	89 c1                	mov    %eax,%ecx
f011068f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0110696:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011069b:	0f b6 d0             	movzbl %al,%edx
f011069e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01106a1:	01 d0                	add    %edx,%eax
f01106a3:	48                   	dec    %eax
f01106a4:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01106a7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01106aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01106af:	f7 75 ac             	divl   -0x54(%ebp)
f01106b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01106b5:	29 d0                	sub    %edx,%eax
f01106b7:	89 c3                	mov    %eax,%ebx
f01106b9:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01106c0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01106c5:	0f b6 c0             	movzbl %al,%eax
f01106c8:	c1 e0 04             	shl    $0x4,%eax
f01106cb:	89 c2                	mov    %eax,%edx
f01106cd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01106d0:	01 d0                	add    %edx,%eax
f01106d2:	48                   	dec    %eax
f01106d3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01106d6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01106d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01106de:	f7 75 a4             	divl   -0x5c(%ebp)
f01106e1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01106e4:	29 d0                	sub    %edx,%eax
f01106e6:	01 d8                	add    %ebx,%eax
f01106e8:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01106ed:	39 c1                	cmp    %eax,%ecx
f01106ef:	74 17                	je     f0110708 <test_kmalloc_bestfit2+0x45f>
f01106f1:	83 ec 04             	sub    $0x4,%esp
f01106f4:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01106f9:	68 5b 02 00 00       	push   $0x25b
f01106fe:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110703:	e8 8b fa fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110708:	e8 50 bf ff ff       	call   f010c65d <pf_calculate_free_frames>
f011070d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110710:	74 17                	je     f0110729 <test_kmalloc_bestfit2+0x480>
f0110712:	83 ec 04             	sub    $0x4,%esp
f0110715:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011071a:	68 5c 02 00 00       	push   $0x25c
f011071f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110724:	e8 6a fa fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f0110729:	e8 8c a2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011072e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110731:	29 c2                	sub    %eax,%edx
f0110733:	89 d0                	mov    %edx,%eax
f0110735:	83 f8 01             	cmp    $0x1,%eax
f0110738:	74 17                	je     f0110751 <test_kmalloc_bestfit2+0x4a8>
f011073a:	83 ec 04             	sub    $0x4,%esp
f011073d:	68 28 e7 11 f0       	push   $0xf011e728
f0110742:	68 5d 02 00 00       	push   $0x25d
f0110747:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011074c:	e8 42 fa fe ff       	call   f0100193 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110751:	e8 64 a2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110756:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110759:	e8 ff be ff ff       	call   f010c65d <pf_calculate_free_frames>
f011075e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f0110761:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0110767:	83 ec 0c             	sub    $0xc,%esp
f011076a:	50                   	push   %eax
f011076b:	e8 92 c8 ff ff       	call   f010d002 <kfree>
f0110770:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110773:	e8 e5 be ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110778:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011077b:	74 17                	je     f0110794 <test_kmalloc_bestfit2+0x4eb>
f011077d:	83 ec 04             	sub    $0x4,%esp
f0110780:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110785:	68 63 02 00 00       	push   $0x263
f011078a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011078f:	e8 ff f9 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f0110794:	e8 21 a2 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110799:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011079c:	83 f8 01             	cmp    $0x1,%eax
f011079f:	74 17                	je     f01107b8 <test_kmalloc_bestfit2+0x50f>
f01107a1:	83 ec 04             	sub    $0x4,%esp
f01107a4:	68 28 e7 11 f0       	push   $0xf011e728
f01107a9:	68 64 02 00 00       	push   $0x264
f01107ae:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01107b3:	e8 db f9 fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01107b8:	e8 fd a1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01107bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01107c0:	e8 98 be ff ff       	call   f010c65d <pf_calculate_free_frames>
f01107c5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01107c8:	83 ec 0c             	sub    $0xc,%esp
f01107cb:	68 00 1c 00 00       	push   $0x1c00
f01107d0:	e8 13 c8 ff ff       	call   f010cfe8 <kmalloc>
f01107d5:	83 c4 10             	add    $0x10,%esp
f01107d8:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f01107de:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01107e4:	89 c1                	mov    %eax,%ecx
f01107e6:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01107ed:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01107f2:	0f b6 d0             	movzbl %al,%edx
f01107f5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01107f8:	01 d0                	add    %edx,%eax
f01107fa:	48                   	dec    %eax
f01107fb:	89 45 98             	mov    %eax,-0x68(%ebp)
f01107fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110801:	ba 00 00 00 00       	mov    $0x0,%edx
f0110806:	f7 75 9c             	divl   -0x64(%ebp)
f0110809:	8b 45 98             	mov    -0x68(%ebp),%eax
f011080c:	29 d0                	sub    %edx,%eax
f011080e:	89 c3                	mov    %eax,%ebx
f0110810:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0110817:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011081c:	0f b6 c0             	movzbl %al,%eax
f011081f:	c1 e0 04             	shl    $0x4,%eax
f0110822:	89 c2                	mov    %eax,%edx
f0110824:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110827:	01 d0                	add    %edx,%eax
f0110829:	48                   	dec    %eax
f011082a:	89 45 90             	mov    %eax,-0x70(%ebp)
f011082d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110830:	ba 00 00 00 00       	mov    $0x0,%edx
f0110835:	f7 75 94             	divl   -0x6c(%ebp)
f0110838:	8b 45 90             	mov    -0x70(%ebp),%eax
f011083b:	29 d0                	sub    %edx,%eax
f011083d:	01 d8                	add    %ebx,%eax
f011083f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0110844:	39 c1                	cmp    %eax,%ecx
f0110846:	74 17                	je     f011085f <test_kmalloc_bestfit2+0x5b6>
f0110848:	83 ec 04             	sub    $0x4,%esp
f011084b:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110850:	68 6a 02 00 00       	push   $0x26a
f0110855:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011085a:	e8 34 f9 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011085f:	e8 f9 bd ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110864:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110867:	74 17                	je     f0110880 <test_kmalloc_bestfit2+0x5d7>
f0110869:	83 ec 04             	sub    $0x4,%esp
f011086c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110871:	68 6b 02 00 00       	push   $0x26b
f0110876:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011087b:	e8 13 f9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f0110880:	e8 35 a1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110885:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110888:	29 c2                	sub    %eax,%edx
f011088a:	89 d0                	mov    %edx,%eax
f011088c:	83 f8 02             	cmp    $0x2,%eax
f011088f:	74 17                	je     f01108a8 <test_kmalloc_bestfit2+0x5ff>
f0110891:	83 ec 04             	sub    $0x4,%esp
f0110894:	68 28 e7 11 f0       	push   $0xf011e728
f0110899:	68 6c 02 00 00       	push   $0x26c
f011089e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01108a3:	e8 eb f8 fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01108a8:	e8 0d a1 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01108ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01108b0:	e8 a8 bd ff ff       	call   f010c65d <pf_calculate_free_frames>
f01108b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f01108b8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01108be:	83 ec 0c             	sub    $0xc,%esp
f01108c1:	50                   	push   %eax
f01108c2:	e8 3b c7 ff ff       	call   f010d002 <kfree>
f01108c7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01108ca:	e8 8e bd ff ff       	call   f010c65d <pf_calculate_free_frames>
f01108cf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01108d2:	74 17                	je     f01108eb <test_kmalloc_bestfit2+0x642>
f01108d4:	83 ec 04             	sub    $0x4,%esp
f01108d7:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01108dc:	68 72 02 00 00       	push   $0x272
f01108e1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01108e6:	e8 a8 f8 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f01108eb:	e8 ca a0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01108f0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01108f3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01108f8:	74 17                	je     f0110911 <test_kmalloc_bestfit2+0x668>
f01108fa:	83 ec 04             	sub    $0x4,%esp
f01108fd:	68 ac e5 11 f0       	push   $0xf011e5ac
f0110902:	68 73 02 00 00       	push   $0x273
f0110907:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011090c:	e8 82 f8 fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0110911:	e8 a4 a0 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110916:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110919:	e8 3f bd ff ff       	call   f010c65d <pf_calculate_free_frames>
f011091e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0110921:	83 ec 0c             	sub    $0xc,%esp
f0110924:	68 00 fc 2f 00       	push   $0x2ffc00
f0110929:	e8 ba c6 ff ff       	call   f010cfe8 <kmalloc>
f011092e:	83 c4 10             	add    $0x10,%esp
f0110931:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110937:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011093d:	89 c1                	mov    %eax,%ecx
f011093f:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0110946:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011094b:	0f b6 d0             	movzbl %al,%edx
f011094e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110951:	01 d0                	add    %edx,%eax
f0110953:	48                   	dec    %eax
f0110954:	89 45 88             	mov    %eax,-0x78(%ebp)
f0110957:	8b 45 88             	mov    -0x78(%ebp),%eax
f011095a:	ba 00 00 00 00       	mov    $0x0,%edx
f011095f:	f7 75 8c             	divl   -0x74(%ebp)
f0110962:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110965:	29 d0                	sub    %edx,%eax
f0110967:	89 c3                	mov    %eax,%ebx
f0110969:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0110970:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110975:	0f b6 c0             	movzbl %al,%eax
f0110978:	c1 e0 04             	shl    $0x4,%eax
f011097b:	89 c2                	mov    %eax,%edx
f011097d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110980:	01 d0                	add    %edx,%eax
f0110982:	48                   	dec    %eax
f0110983:	89 45 80             	mov    %eax,-0x80(%ebp)
f0110986:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110989:	ba 00 00 00 00       	mov    $0x0,%edx
f011098e:	f7 75 84             	divl   -0x7c(%ebp)
f0110991:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110994:	29 d0                	sub    %edx,%eax
f0110996:	01 d8                	add    %ebx,%eax
f0110998:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011099d:	39 c1                	cmp    %eax,%ecx
f011099f:	74 17                	je     f01109b8 <test_kmalloc_bestfit2+0x70f>
f01109a1:	83 ec 04             	sub    $0x4,%esp
f01109a4:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01109a9:	68 79 02 00 00       	push   $0x279
f01109ae:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01109b3:	e8 db f7 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01109b8:	e8 a0 bc ff ff       	call   f010c65d <pf_calculate_free_frames>
f01109bd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01109c0:	74 17                	je     f01109d9 <test_kmalloc_bestfit2+0x730>
f01109c2:	83 ec 04             	sub    $0x4,%esp
f01109c5:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01109ca:	68 7a 02 00 00       	push   $0x27a
f01109cf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01109d4:	e8 ba f7 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f01109d9:	e8 dc 9f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01109de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01109e1:	29 c2                	sub    %eax,%edx
f01109e3:	89 d0                	mov    %edx,%eax
f01109e5:	3d 00 03 00 00       	cmp    $0x300,%eax
f01109ea:	74 17                	je     f0110a03 <test_kmalloc_bestfit2+0x75a>
f01109ec:	83 ec 04             	sub    $0x4,%esp
f01109ef:	68 28 e7 11 f0       	push   $0xf011e728
f01109f4:	68 7b 02 00 00       	push   $0x27b
f01109f9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01109fe:	e8 90 f7 fe ff       	call   f0100193 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f0110a03:	e8 b2 9f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110a08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110a0b:	e8 4d bc ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110a10:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f0110a13:	83 ec 0c             	sub    $0xc,%esp
f0110a16:	68 00 18 20 00       	push   $0x201800
f0110a1b:	e8 c8 c5 ff ff       	call   f010cfe8 <kmalloc>
f0110a20:	83 c4 10             	add    $0x10,%esp
f0110a23:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110a29:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110a2f:	89 c1                	mov    %eax,%ecx
f0110a31:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0110a38:	10 00 00 
f0110a3b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110a40:	0f b6 d0             	movzbl %al,%edx
f0110a43:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0110a49:	01 d0                	add    %edx,%eax
f0110a4b:	48                   	dec    %eax
f0110a4c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0110a52:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110a58:	ba 00 00 00 00       	mov    $0x0,%edx
f0110a5d:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0110a63:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110a69:	29 d0                	sub    %edx,%eax
f0110a6b:	89 c3                	mov    %eax,%ebx
f0110a6d:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0110a74:	10 00 00 
f0110a77:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110a7c:	0f b6 c0             	movzbl %al,%eax
f0110a7f:	c1 e0 04             	shl    $0x4,%eax
f0110a82:	89 c2                	mov    %eax,%edx
f0110a84:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110a8a:	01 d0                	add    %edx,%eax
f0110a8c:	48                   	dec    %eax
f0110a8d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0110a93:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110a99:	ba 00 00 00 00       	mov    $0x0,%edx
f0110a9e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0110aa4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110aaa:	29 d0                	sub    %edx,%eax
f0110aac:	01 d8                	add    %ebx,%eax
f0110aae:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0110ab3:	39 c1                	cmp    %eax,%ecx
f0110ab5:	74 17                	je     f0110ace <test_kmalloc_bestfit2+0x825>
f0110ab7:	83 ec 04             	sub    $0x4,%esp
f0110aba:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110abf:	68 81 02 00 00       	push   $0x281
f0110ac4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110ac9:	e8 c5 f6 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ace:	e8 8a bb ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110ad3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110ad6:	74 17                	je     f0110aef <test_kmalloc_bestfit2+0x846>
f0110ad8:	83 ec 04             	sub    $0x4,%esp
f0110adb:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110ae0:	68 82 02 00 00       	push   $0x282
f0110ae5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110aea:	e8 a4 f6 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f0110aef:	e8 c6 9e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110af4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110af7:	29 c2                	sub    %eax,%edx
f0110af9:	89 d0                	mov    %edx,%eax
f0110afb:	3d 02 02 00 00       	cmp    $0x202,%eax
f0110b00:	74 17                	je     f0110b19 <test_kmalloc_bestfit2+0x870>
f0110b02:	83 ec 04             	sub    $0x4,%esp
f0110b05:	68 28 e7 11 f0       	push   $0xf011e728
f0110b0a:	68 83 02 00 00       	push   $0x283
f0110b0f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110b14:	e8 7a f6 fe ff       	call   f0100193 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f0110b19:	e8 9c 9e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110b1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110b21:	e8 37 bb ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110b26:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f0110b29:	83 ec 0c             	sub    $0xc,%esp
f0110b2c:	68 00 fc 4f 00       	push   $0x4ffc00
f0110b31:	e8 b2 c4 ff ff       	call   f010cfe8 <kmalloc>
f0110b36:	83 c4 10             	add    $0x10,%esp
f0110b39:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f0110b3f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110b45:	89 c1                	mov    %eax,%ecx
f0110b47:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0110b4e:	10 00 00 
f0110b51:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110b56:	0f b6 d0             	movzbl %al,%edx
f0110b59:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110b5f:	01 d0                	add    %edx,%eax
f0110b61:	48                   	dec    %eax
f0110b62:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0110b68:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0110b73:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0110b79:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110b7f:	29 d0                	sub    %edx,%eax
f0110b81:	89 c3                	mov    %eax,%ebx
f0110b83:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0110b8a:	10 00 00 
f0110b8d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110b92:	0f b6 c0             	movzbl %al,%eax
f0110b95:	c1 e0 04             	shl    $0x4,%eax
f0110b98:	89 c2                	mov    %eax,%edx
f0110b9a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0110ba0:	01 d0                	add    %edx,%eax
f0110ba2:	48                   	dec    %eax
f0110ba3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0110ba9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110baf:	ba 00 00 00 00       	mov    $0x0,%edx
f0110bb4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0110bba:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110bc0:	29 d0                	sub    %edx,%eax
f0110bc2:	01 d8                	add    %ebx,%eax
f0110bc4:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0110bc9:	39 c1                	cmp    %eax,%ecx
f0110bcb:	74 17                	je     f0110be4 <test_kmalloc_bestfit2+0x93b>
f0110bcd:	83 ec 04             	sub    $0x4,%esp
f0110bd0:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110bd5:	68 89 02 00 00       	push   $0x289
f0110bda:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110bdf:	e8 af f5 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110be4:	e8 74 ba ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110be9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110bec:	74 17                	je     f0110c05 <test_kmalloc_bestfit2+0x95c>
f0110bee:	83 ec 04             	sub    $0x4,%esp
f0110bf1:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110bf6:	68 8a 02 00 00       	push   $0x28a
f0110bfb:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110c00:	e8 8e f5 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0110c05:	e8 b0 9d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110c0a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110c0d:	29 c2                	sub    %eax,%edx
f0110c0f:	89 d0                	mov    %edx,%eax
f0110c11:	3d 00 05 00 00       	cmp    $0x500,%eax
f0110c16:	74 17                	je     f0110c2f <test_kmalloc_bestfit2+0x986>
f0110c18:	83 ec 04             	sub    $0x4,%esp
f0110c1b:	68 28 e7 11 f0       	push   $0xf011e728
f0110c20:	68 8b 02 00 00       	push   $0x28b
f0110c25:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110c2a:	e8 64 f5 fe ff       	call   f0100193 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110c2f:	e8 86 9d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110c34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110c37:	e8 21 ba ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110c3c:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f0110c3f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110c45:	83 ec 0c             	sub    $0xc,%esp
f0110c48:	50                   	push   %eax
f0110c49:	e8 b4 c3 ff ff       	call   f010d002 <kfree>
f0110c4e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110c51:	e8 07 ba ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110c56:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110c59:	74 17                	je     f0110c72 <test_kmalloc_bestfit2+0x9c9>
f0110c5b:	83 ec 04             	sub    $0x4,%esp
f0110c5e:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110c63:	68 91 02 00 00       	push   $0x291
f0110c68:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110c6d:	e8 21 f5 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f0110c72:	e8 43 9d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110c77:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110c7a:	3d 02 02 00 00       	cmp    $0x202,%eax
f0110c7f:	74 17                	je     f0110c98 <test_kmalloc_bestfit2+0x9ef>
f0110c81:	83 ec 04             	sub    $0x4,%esp
f0110c84:	68 ac e5 11 f0       	push   $0xf011e5ac
f0110c89:	68 92 02 00 00       	push   $0x292
f0110c8e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110c93:	e8 fb f4 fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110c98:	e8 1d 9d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110c9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110ca0:	e8 b8 b9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110ca5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f0110ca8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0110cae:	83 ec 0c             	sub    $0xc,%esp
f0110cb1:	50                   	push   %eax
f0110cb2:	e8 4b c3 ff ff       	call   f010d002 <kfree>
f0110cb7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110cba:	e8 9e b9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110cbf:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110cc2:	74 17                	je     f0110cdb <test_kmalloc_bestfit2+0xa32>
f0110cc4:	83 ec 04             	sub    $0x4,%esp
f0110cc7:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110ccc:	68 98 02 00 00       	push   $0x298
f0110cd1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110cd6:	e8 b8 f4 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f0110cdb:	e8 da 9c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110ce0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110ce3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110ce8:	74 17                	je     f0110d01 <test_kmalloc_bestfit2+0xa58>
f0110cea:	83 ec 04             	sub    $0x4,%esp
f0110ced:	68 d8 e7 11 f0       	push   $0xf011e7d8
f0110cf2:	68 99 02 00 00       	push   $0x299
f0110cf7:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110cfc:	e8 92 f4 fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110d01:	e8 b4 9c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110d06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110d09:	e8 4f b9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110d0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f0110d11:	83 ec 0c             	sub    $0xc,%esp
f0110d14:	68 00 fc 1f 00       	push   $0x1ffc00
f0110d19:	e8 ca c2 ff ff       	call   f010cfe8 <kmalloc>
f0110d1e:	83 c4 10             	add    $0x10,%esp
f0110d21:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110d27:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110d2d:	89 c1                	mov    %eax,%ecx
f0110d2f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0110d36:	10 00 00 
f0110d39:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110d3e:	0f b6 d0             	movzbl %al,%edx
f0110d41:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0110d47:	01 d0                	add    %edx,%eax
f0110d49:	48                   	dec    %eax
f0110d4a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0110d50:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110d56:	ba 00 00 00 00       	mov    $0x0,%edx
f0110d5b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0110d61:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110d67:	29 d0                	sub    %edx,%eax
f0110d69:	89 c3                	mov    %eax,%ebx
f0110d6b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0110d72:	10 00 00 
f0110d75:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110d7a:	0f b6 c0             	movzbl %al,%eax
f0110d7d:	c1 e0 04             	shl    $0x4,%eax
f0110d80:	89 c2                	mov    %eax,%edx
f0110d82:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0110d88:	01 d0                	add    %edx,%eax
f0110d8a:	48                   	dec    %eax
f0110d8b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0110d91:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110d97:	ba 00 00 00 00       	mov    $0x0,%edx
f0110d9c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0110da2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110da8:	29 d0                	sub    %edx,%eax
f0110daa:	01 d8                	add    %ebx,%eax
f0110dac:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0110db1:	39 c1                	cmp    %eax,%ecx
f0110db3:	74 17                	je     f0110dcc <test_kmalloc_bestfit2+0xb23>
f0110db5:	83 ec 04             	sub    $0x4,%esp
f0110db8:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110dbd:	68 9f 02 00 00       	push   $0x29f
f0110dc2:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110dc7:	e8 c7 f3 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110dcc:	e8 8c b8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110dd1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110dd4:	74 17                	je     f0110ded <test_kmalloc_bestfit2+0xb44>
f0110dd6:	83 ec 04             	sub    $0x4,%esp
f0110dd9:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110dde:	68 a0 02 00 00       	push   $0x2a0
f0110de3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110de8:	e8 a6 f3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f0110ded:	e8 c8 9b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110df2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110df5:	29 c2                	sub    %eax,%edx
f0110df7:	89 d0                	mov    %edx,%eax
f0110df9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110dfe:	74 17                	je     f0110e17 <test_kmalloc_bestfit2+0xb6e>
f0110e00:	83 ec 04             	sub    $0x4,%esp
f0110e03:	68 16 e8 11 f0       	push   $0xf011e816
f0110e08:	68 a1 02 00 00       	push   $0x2a1
f0110e0d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110e12:	e8 7c f3 fe ff       	call   f0100193 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f0110e17:	e8 9e 9b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110e1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110e1f:	e8 39 b8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110e24:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f0110e27:	83 ec 0c             	sub    $0xc,%esp
f0110e2a:	68 00 18 00 00       	push   $0x1800
f0110e2f:	e8 b4 c1 ff ff       	call   f010cfe8 <kmalloc>
f0110e34:	83 c4 10             	add    $0x10,%esp
f0110e37:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110e3d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0110e43:	89 c1                	mov    %eax,%ecx
f0110e45:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0110e4c:	10 00 00 
f0110e4f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110e54:	0f b6 d0             	movzbl %al,%edx
f0110e57:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0110e5d:	01 d0                	add    %edx,%eax
f0110e5f:	48                   	dec    %eax
f0110e60:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0110e66:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110e6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e71:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0110e77:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110e7d:	29 d0                	sub    %edx,%eax
f0110e7f:	89 c3                	mov    %eax,%ebx
f0110e81:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0110e88:	10 00 00 
f0110e8b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110e90:	0f b6 c0             	movzbl %al,%eax
f0110e93:	c1 e0 04             	shl    $0x4,%eax
f0110e96:	89 c2                	mov    %eax,%edx
f0110e98:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0110e9e:	01 d0                	add    %edx,%eax
f0110ea0:	48                   	dec    %eax
f0110ea1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0110ea7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0110ead:	ba 00 00 00 00       	mov    $0x0,%edx
f0110eb2:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0110eb8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0110ebe:	29 d0                	sub    %edx,%eax
f0110ec0:	01 d8                	add    %ebx,%eax
f0110ec2:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0110ec7:	39 c1                	cmp    %eax,%ecx
f0110ec9:	74 17                	je     f0110ee2 <test_kmalloc_bestfit2+0xc39>
f0110ecb:	83 ec 04             	sub    $0x4,%esp
f0110ece:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0110ed3:	68 a7 02 00 00       	push   $0x2a7
f0110ed8:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110edd:	e8 b1 f2 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110ee2:	e8 76 b7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110ee7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110eea:	74 17                	je     f0110f03 <test_kmalloc_bestfit2+0xc5a>
f0110eec:	83 ec 04             	sub    $0x4,%esp
f0110eef:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110ef4:	68 a8 02 00 00       	push   $0x2a8
f0110ef9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110efe:	e8 90 f2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f0110f03:	e8 b2 9a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110f08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110f0b:	29 c2                	sub    %eax,%edx
f0110f0d:	89 d0                	mov    %edx,%eax
f0110f0f:	83 f8 02             	cmp    $0x2,%eax
f0110f12:	74 17                	je     f0110f2b <test_kmalloc_bestfit2+0xc82>
f0110f14:	83 ec 04             	sub    $0x4,%esp
f0110f17:	68 16 e8 11 f0       	push   $0xf011e816
f0110f1c:	68 a9 02 00 00       	push   $0x2a9
f0110f21:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110f26:	e8 68 f2 fe ff       	call   f0100193 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110f2b:	e8 8a 9a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110f30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110f33:	e8 25 b7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110f38:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0110f3b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0110f41:	83 ec 0c             	sub    $0xc,%esp
f0110f44:	50                   	push   %eax
f0110f45:	e8 b8 c0 ff ff       	call   f010d002 <kfree>
f0110f4a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110f4d:	e8 0b b7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110f52:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110f55:	74 17                	je     f0110f6e <test_kmalloc_bestfit2+0xcc5>
f0110f57:	83 ec 04             	sub    $0x4,%esp
f0110f5a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0110f5f:	68 af 02 00 00       	push   $0x2af
f0110f64:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110f69:	e8 25 f2 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f0110f6e:	e8 47 9a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110f73:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110f76:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110f7b:	74 17                	je     f0110f94 <test_kmalloc_bestfit2+0xceb>
f0110f7d:	83 ec 04             	sub    $0x4,%esp
f0110f80:	68 d8 e7 11 f0       	push   $0xf011e7d8
f0110f85:	68 b0 02 00 00       	push   $0x2b0
f0110f8a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0110f8f:	e8 ff f1 fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0110f94:	e8 21 9a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0110f99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110f9c:	e8 bc b6 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0110fa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f0110fa4:	83 ec 0c             	sub    $0xc,%esp
f0110fa7:	68 00 fc 2f 00       	push   $0x2ffc00
f0110fac:	e8 37 c0 ff ff       	call   f010cfe8 <kmalloc>
f0110fb1:	83 c4 10             	add    $0x10,%esp
f0110fb4:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110fba:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0110fc0:	89 c1                	mov    %eax,%ecx
f0110fc2:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0110fc9:	10 00 00 
f0110fcc:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0110fd1:	0f b6 d0             	movzbl %al,%edx
f0110fd4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0110fda:	01 d0                	add    %edx,%eax
f0110fdc:	48                   	dec    %eax
f0110fdd:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0110fe3:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110fe9:	ba 00 00 00 00       	mov    $0x0,%edx
f0110fee:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0110ff4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110ffa:	29 d0                	sub    %edx,%eax
f0110ffc:	89 c3                	mov    %eax,%ebx
f0110ffe:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0111005:	10 00 00 
f0111008:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011100d:	0f b6 c0             	movzbl %al,%eax
f0111010:	c1 e0 04             	shl    $0x4,%eax
f0111013:	89 c2                	mov    %eax,%edx
f0111015:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011101b:	01 d0                	add    %edx,%eax
f011101d:	48                   	dec    %eax
f011101e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0111024:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011102a:	ba 00 00 00 00       	mov    $0x0,%edx
f011102f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0111035:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011103b:	29 d0                	sub    %edx,%eax
f011103d:	01 d8                	add    %ebx,%eax
f011103f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0111044:	39 c1                	cmp    %eax,%ecx
f0111046:	74 17                	je     f011105f <test_kmalloc_bestfit2+0xdb6>
f0111048:	83 ec 04             	sub    $0x4,%esp
f011104b:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111050:	68 b6 02 00 00       	push   $0x2b6
f0111055:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011105a:	e8 34 f1 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011105f:	e8 f9 b5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111064:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0111067:	74 17                	je     f0111080 <test_kmalloc_bestfit2+0xdd7>
f0111069:	83 ec 04             	sub    $0x4,%esp
f011106c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111071:	68 b7 02 00 00       	push   $0x2b7
f0111076:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011107b:	e8 13 f1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f0111080:	e8 35 99 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111085:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0111088:	29 c2                	sub    %eax,%edx
f011108a:	89 d0                	mov    %edx,%eax
f011108c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111091:	74 17                	je     f01110aa <test_kmalloc_bestfit2+0xe01>
f0111093:	83 ec 04             	sub    $0x4,%esp
f0111096:	68 d8 e7 11 f0       	push   $0xf011e7d8
f011109b:	68 b8 02 00 00       	push   $0x2b8
f01110a0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01110a5:	e8 e9 f0 fe ff       	call   f0100193 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01110aa:	e8 0b 99 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01110af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01110b2:	e8 a6 b5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01110b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f01110ba:	83 ec 0c             	sub    $0xc,%esp
f01110bd:	68 00 fc 3f 00       	push   $0x3ffc00
f01110c2:	e8 21 bf ff ff       	call   f010cfe8 <kmalloc>
f01110c7:	83 c4 10             	add    $0x10,%esp
f01110ca:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01110d0:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01110d6:	89 c1                	mov    %eax,%ecx
f01110d8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01110df:	10 00 00 
f01110e2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01110e7:	0f b6 d0             	movzbl %al,%edx
f01110ea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01110f0:	01 d0                	add    %edx,%eax
f01110f2:	48                   	dec    %eax
f01110f3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01110f9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01110ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0111104:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011110a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0111110:	29 d0                	sub    %edx,%eax
f0111112:	89 c3                	mov    %eax,%ebx
f0111114:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011111b:	10 00 00 
f011111e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111123:	0f b6 c0             	movzbl %al,%eax
f0111126:	c1 e0 04             	shl    $0x4,%eax
f0111129:	89 c2                	mov    %eax,%edx
f011112b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0111131:	01 d0                	add    %edx,%eax
f0111133:	48                   	dec    %eax
f0111134:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011113a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0111140:	ba 00 00 00 00       	mov    $0x0,%edx
f0111145:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011114b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0111151:	29 d0                	sub    %edx,%eax
f0111153:	01 d8                	add    %ebx,%eax
f0111155:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011115a:	39 c1                	cmp    %eax,%ecx
f011115c:	74 17                	je     f0111175 <test_kmalloc_bestfit2+0xecc>
f011115e:	83 ec 04             	sub    $0x4,%esp
f0111161:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111166:	68 be 02 00 00       	push   $0x2be
f011116b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111170:	e8 1e f0 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111175:	e8 e3 b4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011117a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011117d:	74 17                	je     f0111196 <test_kmalloc_bestfit2+0xeed>
f011117f:	83 ec 04             	sub    $0x4,%esp
f0111182:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111187:	68 bf 02 00 00       	push   $0x2bf
f011118c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111191:	e8 fd ef fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f0111196:	e8 1f 98 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011119b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011119e:	29 c2                	sub    %eax,%edx
f01111a0:	89 d0                	mov    %edx,%eax
f01111a2:	3d 00 04 00 00       	cmp    $0x400,%eax
f01111a7:	74 17                	je     f01111c0 <test_kmalloc_bestfit2+0xf17>
f01111a9:	83 ec 04             	sub    $0x4,%esp
f01111ac:	68 d8 e7 11 f0       	push   $0xf011e7d8
f01111b1:	68 c0 02 00 00       	push   $0x2c0
f01111b6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01111bb:	e8 d3 ef fe ff       	call   f0100193 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f01111c0:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01111c7:	10 00 00 
f01111ca:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01111cf:	0f b6 d0             	movzbl %al,%edx
f01111d2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01111d8:	01 d0                	add    %edx,%eax
f01111da:	48                   	dec    %eax
f01111db:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01111e1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01111e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01111ec:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01111f2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01111f8:	29 d0                	sub    %edx,%eax
f01111fa:	89 c1                	mov    %eax,%ecx
f01111fc:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0111203:	10 00 00 
f0111206:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011120b:	0f b6 c0             	movzbl %al,%eax
f011120e:	c1 e0 04             	shl    $0x4,%eax
f0111211:	89 c2                	mov    %eax,%edx
f0111213:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0111219:	01 d0                	add    %edx,%eax
f011121b:	48                   	dec    %eax
f011121c:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0111222:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0111228:	ba 00 00 00 00       	mov    $0x0,%edx
f011122d:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0111233:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0111239:	29 d0                	sub    %edx,%eax
f011123b:	01 c8                	add    %ecx,%eax
f011123d:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f0111242:	29 c2                	sub    %eax,%edx
f0111244:	89 d0                	mov    %edx,%eax
f0111246:	83 ec 0c             	sub    $0xc,%esp
f0111249:	50                   	push   %eax
f011124a:	e8 99 bd ff ff       	call   f010cfe8 <kmalloc>
f011124f:	83 c4 10             	add    $0x10,%esp
f0111252:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f0111258:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011125e:	85 c0                	test   %eax,%eax
f0111260:	74 17                	je     f0111279 <test_kmalloc_bestfit2+0xfd0>
f0111262:	83 ec 04             	sub    $0x4,%esp
f0111265:	68 28 e8 11 f0       	push   $0xf011e828
f011126a:	68 c8 02 00 00       	push   $0x2c8
f011126f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111274:	e8 1a ef fe ff       	call   f0100193 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f0111279:	83 ec 0c             	sub    $0xc,%esp
f011127c:	68 8c e8 11 f0       	push   $0xf011e88c
f0111281:	e8 1d 63 ff ff       	call   f01075a3 <cprintf>
f0111286:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f0111289:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011128e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0111291:	5b                   	pop    %ebx
f0111292:	5f                   	pop    %edi
f0111293:	5d                   	pop    %ebp
f0111294:	c3                   	ret    

f0111295 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f0111295:	55                   	push   %ebp
f0111296:	89 e5                	mov    %esp,%ebp
f0111298:	57                   	push   %edi
f0111299:	53                   	push   %ebx
f011129a:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f01112a0:	83 ec 0c             	sub    $0xc,%esp
f01112a3:	68 28 e2 11 f0       	push   $0xf011e228
f01112a8:	e8 f6 62 ff ff       	call   f01075a3 <cprintf>
f01112ad:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01112b0:	83 ec 0c             	sub    $0xc,%esp
f01112b3:	68 58 e2 11 f0       	push   $0xf011e258
f01112b8:	e8 e6 62 ff ff       	call   f01075a3 <cprintf>
f01112bd:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01112c0:	83 ec 0c             	sub    $0xc,%esp
f01112c3:	68 28 e2 11 f0       	push   $0xf011e228
f01112c8:	e8 d6 62 ff ff       	call   f01075a3 <cprintf>
f01112cd:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01112d0:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f01112d6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01112db:	b8 00 00 00 00       	mov    $0x0,%eax
f01112e0:	89 d7                	mov    %edx,%edi
f01112e2:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01112e4:	e8 d1 96 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01112e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01112ec:	e8 6c b3 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01112f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f01112f4:	83 ec 0c             	sub    $0xc,%esp
f01112f7:	68 00 fc 0f 00       	push   $0xffc00
f01112fc:	e8 e7 bc ff ff       	call   f010cfe8 <kmalloc>
f0111301:	83 c4 10             	add    $0x10,%esp
f0111304:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011130a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0111310:	89 c1                	mov    %eax,%ecx
f0111312:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0111319:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011131e:	0f b6 d0             	movzbl %al,%edx
f0111321:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111324:	01 d0                	add    %edx,%eax
f0111326:	48                   	dec    %eax
f0111327:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011132a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011132d:	ba 00 00 00 00       	mov    $0x0,%edx
f0111332:	f7 75 ec             	divl   -0x14(%ebp)
f0111335:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111338:	29 d0                	sub    %edx,%eax
f011133a:	89 c3                	mov    %eax,%ebx
f011133c:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0111343:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111348:	0f b6 c0             	movzbl %al,%eax
f011134b:	c1 e0 04             	shl    $0x4,%eax
f011134e:	89 c2                	mov    %eax,%edx
f0111350:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111353:	01 d0                	add    %edx,%eax
f0111355:	48                   	dec    %eax
f0111356:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0111359:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011135c:	ba 00 00 00 00       	mov    $0x0,%edx
f0111361:	f7 75 e4             	divl   -0x1c(%ebp)
f0111364:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111367:	29 d0                	sub    %edx,%eax
f0111369:	01 d8                	add    %ebx,%eax
f011136b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0111370:	39 c1                	cmp    %eax,%ecx
f0111372:	74 17                	je     f011138b <test_kmalloc_firstfit1+0xf6>
f0111374:	83 ec 04             	sub    $0x4,%esp
f0111377:	68 f8 e6 11 f0       	push   $0xf011e6f8
f011137c:	68 e0 02 00 00       	push   $0x2e0
f0111381:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111386:	e8 08 ee fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011138b:	e8 cd b2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111390:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111393:	74 17                	je     f01113ac <test_kmalloc_firstfit1+0x117>
f0111395:	83 ec 04             	sub    $0x4,%esp
f0111398:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011139d:	68 e1 02 00 00       	push   $0x2e1
f01113a2:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01113a7:	e8 e7 ed fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f01113ac:	e8 09 96 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01113b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01113b4:	29 c2                	sub    %eax,%edx
f01113b6:	89 d0                	mov    %edx,%eax
f01113b8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01113bd:	74 17                	je     f01113d6 <test_kmalloc_firstfit1+0x141>
f01113bf:	83 ec 04             	sub    $0x4,%esp
f01113c2:	68 28 e7 11 f0       	push   $0xf011e728
f01113c7:	68 e2 02 00 00       	push   $0x2e2
f01113cc:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01113d1:	e8 bd ed fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01113d6:	e8 df 95 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01113db:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01113de:	e8 7a b2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01113e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f01113e6:	83 ec 0c             	sub    $0xc,%esp
f01113e9:	68 00 fc 0f 00       	push   $0xffc00
f01113ee:	e8 f5 bb ff ff       	call   f010cfe8 <kmalloc>
f01113f3:	83 c4 10             	add    $0x10,%esp
f01113f6:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f01113fc:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0111402:	89 c1                	mov    %eax,%ecx
f0111404:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011140b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111410:	0f b6 d0             	movzbl %al,%edx
f0111413:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111416:	01 d0                	add    %edx,%eax
f0111418:	48                   	dec    %eax
f0111419:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011141c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011141f:	ba 00 00 00 00       	mov    $0x0,%edx
f0111424:	f7 75 dc             	divl   -0x24(%ebp)
f0111427:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011142a:	29 d0                	sub    %edx,%eax
f011142c:	89 c3                	mov    %eax,%ebx
f011142e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0111435:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011143a:	0f b6 c0             	movzbl %al,%eax
f011143d:	c1 e0 04             	shl    $0x4,%eax
f0111440:	89 c2                	mov    %eax,%edx
f0111442:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111445:	01 d0                	add    %edx,%eax
f0111447:	48                   	dec    %eax
f0111448:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011144b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011144e:	ba 00 00 00 00       	mov    $0x0,%edx
f0111453:	f7 75 d4             	divl   -0x2c(%ebp)
f0111456:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111459:	29 d0                	sub    %edx,%eax
f011145b:	01 d8                	add    %ebx,%eax
f011145d:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0111462:	39 c1                	cmp    %eax,%ecx
f0111464:	74 17                	je     f011147d <test_kmalloc_firstfit1+0x1e8>
f0111466:	83 ec 04             	sub    $0x4,%esp
f0111469:	68 f8 e6 11 f0       	push   $0xf011e6f8
f011146e:	68 e8 02 00 00       	push   $0x2e8
f0111473:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111478:	e8 16 ed fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011147d:	e8 db b1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111482:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111485:	74 17                	je     f011149e <test_kmalloc_firstfit1+0x209>
f0111487:	83 ec 04             	sub    $0x4,%esp
f011148a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011148f:	68 e9 02 00 00       	push   $0x2e9
f0111494:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111499:	e8 f5 ec fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011149e:	e8 17 95 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01114a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01114a6:	29 c2                	sub    %eax,%edx
f01114a8:	89 d0                	mov    %edx,%eax
f01114aa:	3d 00 01 00 00       	cmp    $0x100,%eax
f01114af:	74 17                	je     f01114c8 <test_kmalloc_firstfit1+0x233>
f01114b1:	83 ec 04             	sub    $0x4,%esp
f01114b4:	68 28 e7 11 f0       	push   $0xf011e728
f01114b9:	68 ea 02 00 00       	push   $0x2ea
f01114be:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01114c3:	e8 cb ec fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01114c8:	e8 ed 94 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01114cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01114d0:	e8 88 b1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01114d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f01114d8:	83 ec 0c             	sub    $0xc,%esp
f01114db:	68 00 fc 0f 00       	push   $0xffc00
f01114e0:	e8 03 bb ff ff       	call   f010cfe8 <kmalloc>
f01114e5:	83 c4 10             	add    $0x10,%esp
f01114e8:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f01114ee:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01114f4:	89 c1                	mov    %eax,%ecx
f01114f6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01114fd:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111502:	0f b6 d0             	movzbl %al,%edx
f0111505:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0111508:	01 d0                	add    %edx,%eax
f011150a:	48                   	dec    %eax
f011150b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011150e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111511:	ba 00 00 00 00       	mov    $0x0,%edx
f0111516:	f7 75 cc             	divl   -0x34(%ebp)
f0111519:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011151c:	29 d0                	sub    %edx,%eax
f011151e:	89 c3                	mov    %eax,%ebx
f0111520:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0111527:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011152c:	0f b6 c0             	movzbl %al,%eax
f011152f:	c1 e0 04             	shl    $0x4,%eax
f0111532:	89 c2                	mov    %eax,%edx
f0111534:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0111537:	01 d0                	add    %edx,%eax
f0111539:	48                   	dec    %eax
f011153a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011153d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111540:	ba 00 00 00 00       	mov    $0x0,%edx
f0111545:	f7 75 c4             	divl   -0x3c(%ebp)
f0111548:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011154b:	29 d0                	sub    %edx,%eax
f011154d:	01 d8                	add    %ebx,%eax
f011154f:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0111554:	39 c1                	cmp    %eax,%ecx
f0111556:	74 17                	je     f011156f <test_kmalloc_firstfit1+0x2da>
f0111558:	83 ec 04             	sub    $0x4,%esp
f011155b:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111560:	68 f0 02 00 00       	push   $0x2f0
f0111565:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011156a:	e8 24 ec fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011156f:	e8 e9 b0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111574:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111577:	74 17                	je     f0111590 <test_kmalloc_firstfit1+0x2fb>
f0111579:	83 ec 04             	sub    $0x4,%esp
f011157c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111581:	68 f1 02 00 00       	push   $0x2f1
f0111586:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011158b:	e8 03 ec fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0111590:	e8 25 94 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111595:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111598:	29 c2                	sub    %eax,%edx
f011159a:	89 d0                	mov    %edx,%eax
f011159c:	3d 00 01 00 00       	cmp    $0x100,%eax
f01115a1:	74 17                	je     f01115ba <test_kmalloc_firstfit1+0x325>
f01115a3:	83 ec 04             	sub    $0x4,%esp
f01115a6:	68 28 e7 11 f0       	push   $0xf011e728
f01115ab:	68 f2 02 00 00       	push   $0x2f2
f01115b0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01115b5:	e8 d9 eb fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01115ba:	e8 fb 93 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01115bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01115c2:	e8 96 b0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01115c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f01115ca:	83 ec 0c             	sub    $0xc,%esp
f01115cd:	68 00 fc 0f 00       	push   $0xffc00
f01115d2:	e8 11 ba ff ff       	call   f010cfe8 <kmalloc>
f01115d7:	83 c4 10             	add    $0x10,%esp
f01115da:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f01115e0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01115e6:	89 c1                	mov    %eax,%ecx
f01115e8:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01115ef:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01115f4:	0f b6 d0             	movzbl %al,%edx
f01115f7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01115fa:	01 d0                	add    %edx,%eax
f01115fc:	48                   	dec    %eax
f01115fd:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0111600:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111603:	ba 00 00 00 00       	mov    $0x0,%edx
f0111608:	f7 75 bc             	divl   -0x44(%ebp)
f011160b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011160e:	29 d0                	sub    %edx,%eax
f0111610:	89 c3                	mov    %eax,%ebx
f0111612:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0111619:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011161e:	0f b6 c0             	movzbl %al,%eax
f0111621:	c1 e0 04             	shl    $0x4,%eax
f0111624:	89 c2                	mov    %eax,%edx
f0111626:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111629:	01 d0                	add    %edx,%eax
f011162b:	48                   	dec    %eax
f011162c:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011162f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111632:	ba 00 00 00 00       	mov    $0x0,%edx
f0111637:	f7 75 b4             	divl   -0x4c(%ebp)
f011163a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011163d:	29 d0                	sub    %edx,%eax
f011163f:	01 d8                	add    %ebx,%eax
f0111641:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0111646:	39 c1                	cmp    %eax,%ecx
f0111648:	74 17                	je     f0111661 <test_kmalloc_firstfit1+0x3cc>
f011164a:	83 ec 04             	sub    $0x4,%esp
f011164d:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111652:	68 f8 02 00 00       	push   $0x2f8
f0111657:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011165c:	e8 32 eb fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111661:	e8 f7 af ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111666:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111669:	74 17                	je     f0111682 <test_kmalloc_firstfit1+0x3ed>
f011166b:	83 ec 04             	sub    $0x4,%esp
f011166e:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111673:	68 f9 02 00 00       	push   $0x2f9
f0111678:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011167d:	e8 11 eb fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0111682:	e8 33 93 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111687:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011168a:	29 c2                	sub    %eax,%edx
f011168c:	89 d0                	mov    %edx,%eax
f011168e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111693:	74 17                	je     f01116ac <test_kmalloc_firstfit1+0x417>
f0111695:	83 ec 04             	sub    $0x4,%esp
f0111698:	68 28 e7 11 f0       	push   $0xf011e728
f011169d:	68 fa 02 00 00       	push   $0x2fa
f01116a2:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01116a7:	e8 e7 ea fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01116ac:	e8 09 93 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01116b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01116b4:	e8 a4 af ff ff       	call   f010c65d <pf_calculate_free_frames>
f01116b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f01116bc:	83 ec 0c             	sub    $0xc,%esp
f01116bf:	68 00 fc 1f 00       	push   $0x1ffc00
f01116c4:	e8 1f b9 ff ff       	call   f010cfe8 <kmalloc>
f01116c9:	83 c4 10             	add    $0x10,%esp
f01116cc:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f01116d2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01116d8:	89 c1                	mov    %eax,%ecx
f01116da:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01116e1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01116e6:	0f b6 d0             	movzbl %al,%edx
f01116e9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01116ec:	01 d0                	add    %edx,%eax
f01116ee:	48                   	dec    %eax
f01116ef:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01116f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01116f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01116fa:	f7 75 ac             	divl   -0x54(%ebp)
f01116fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111700:	29 d0                	sub    %edx,%eax
f0111702:	89 c3                	mov    %eax,%ebx
f0111704:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011170b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111710:	0f b6 c0             	movzbl %al,%eax
f0111713:	c1 e0 04             	shl    $0x4,%eax
f0111716:	89 c2                	mov    %eax,%edx
f0111718:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011171b:	01 d0                	add    %edx,%eax
f011171d:	48                   	dec    %eax
f011171e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0111721:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111724:	ba 00 00 00 00       	mov    $0x0,%edx
f0111729:	f7 75 a4             	divl   -0x5c(%ebp)
f011172c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011172f:	29 d0                	sub    %edx,%eax
f0111731:	01 d8                	add    %ebx,%eax
f0111733:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0111738:	39 c1                	cmp    %eax,%ecx
f011173a:	74 17                	je     f0111753 <test_kmalloc_firstfit1+0x4be>
f011173c:	83 ec 04             	sub    $0x4,%esp
f011173f:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111744:	68 00 03 00 00       	push   $0x300
f0111749:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011174e:	e8 40 ea fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111753:	e8 05 af ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111758:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011175b:	74 17                	je     f0111774 <test_kmalloc_firstfit1+0x4df>
f011175d:	83 ec 04             	sub    $0x4,%esp
f0111760:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111765:	68 01 03 00 00       	push   $0x301
f011176a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011176f:	e8 1f ea fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0111774:	e8 41 92 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111779:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011177c:	29 c2                	sub    %eax,%edx
f011177e:	89 d0                	mov    %edx,%eax
f0111780:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111785:	74 17                	je     f011179e <test_kmalloc_firstfit1+0x509>
f0111787:	83 ec 04             	sub    $0x4,%esp
f011178a:	68 28 e7 11 f0       	push   $0xf011e728
f011178f:	68 02 03 00 00       	push   $0x302
f0111794:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111799:	e8 f5 e9 fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011179e:	e8 17 92 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01117a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01117a6:	e8 b2 ae ff ff       	call   f010c65d <pf_calculate_free_frames>
f01117ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f01117ae:	83 ec 0c             	sub    $0xc,%esp
f01117b1:	68 00 fc 1f 00       	push   $0x1ffc00
f01117b6:	e8 2d b8 ff ff       	call   f010cfe8 <kmalloc>
f01117bb:	83 c4 10             	add    $0x10,%esp
f01117be:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f01117c4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01117ca:	89 c1                	mov    %eax,%ecx
f01117cc:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01117d3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01117d8:	0f b6 d0             	movzbl %al,%edx
f01117db:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01117de:	01 d0                	add    %edx,%eax
f01117e0:	48                   	dec    %eax
f01117e1:	89 45 98             	mov    %eax,-0x68(%ebp)
f01117e4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01117e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01117ec:	f7 75 9c             	divl   -0x64(%ebp)
f01117ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01117f2:	29 d0                	sub    %edx,%eax
f01117f4:	89 c3                	mov    %eax,%ebx
f01117f6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01117fd:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111802:	0f b6 c0             	movzbl %al,%eax
f0111805:	c1 e0 04             	shl    $0x4,%eax
f0111808:	89 c2                	mov    %eax,%edx
f011180a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011180d:	01 d0                	add    %edx,%eax
f011180f:	48                   	dec    %eax
f0111810:	89 45 90             	mov    %eax,-0x70(%ebp)
f0111813:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111816:	ba 00 00 00 00       	mov    $0x0,%edx
f011181b:	f7 75 94             	divl   -0x6c(%ebp)
f011181e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111821:	29 d0                	sub    %edx,%eax
f0111823:	01 d8                	add    %ebx,%eax
f0111825:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011182a:	39 c1                	cmp    %eax,%ecx
f011182c:	74 17                	je     f0111845 <test_kmalloc_firstfit1+0x5b0>
f011182e:	83 ec 04             	sub    $0x4,%esp
f0111831:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111836:	68 08 03 00 00       	push   $0x308
f011183b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111840:	e8 4e e9 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111845:	e8 13 ae ff ff       	call   f010c65d <pf_calculate_free_frames>
f011184a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011184d:	74 17                	je     f0111866 <test_kmalloc_firstfit1+0x5d1>
f011184f:	83 ec 04             	sub    $0x4,%esp
f0111852:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111857:	68 09 03 00 00       	push   $0x309
f011185c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111861:	e8 2d e9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0111866:	e8 4f 91 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011186b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011186e:	29 c2                	sub    %eax,%edx
f0111870:	89 d0                	mov    %edx,%eax
f0111872:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111877:	74 17                	je     f0111890 <test_kmalloc_firstfit1+0x5fb>
f0111879:	83 ec 04             	sub    $0x4,%esp
f011187c:	68 28 e7 11 f0       	push   $0xf011e728
f0111881:	68 0a 03 00 00       	push   $0x30a
f0111886:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011188b:	e8 03 e9 fe ff       	call   f0100193 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0111890:	e8 25 91 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111895:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111898:	e8 c0 ad ff ff       	call   f010c65d <pf_calculate_free_frames>
f011189d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f01118a0:	83 ec 0c             	sub    $0xc,%esp
f01118a3:	68 00 fc 2f 00       	push   $0x2ffc00
f01118a8:	e8 3b b7 ff ff       	call   f010cfe8 <kmalloc>
f01118ad:	83 c4 10             	add    $0x10,%esp
f01118b0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f01118b6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01118bc:	89 c1                	mov    %eax,%ecx
f01118be:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01118c5:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01118ca:	0f b6 d0             	movzbl %al,%edx
f01118cd:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01118d0:	01 d0                	add    %edx,%eax
f01118d2:	48                   	dec    %eax
f01118d3:	89 45 88             	mov    %eax,-0x78(%ebp)
f01118d6:	8b 45 88             	mov    -0x78(%ebp),%eax
f01118d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01118de:	f7 75 8c             	divl   -0x74(%ebp)
f01118e1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01118e4:	29 d0                	sub    %edx,%eax
f01118e6:	89 c3                	mov    %eax,%ebx
f01118e8:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01118ef:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01118f4:	0f b6 c0             	movzbl %al,%eax
f01118f7:	c1 e0 04             	shl    $0x4,%eax
f01118fa:	89 c2                	mov    %eax,%edx
f01118fc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01118ff:	01 d0                	add    %edx,%eax
f0111901:	48                   	dec    %eax
f0111902:	89 45 80             	mov    %eax,-0x80(%ebp)
f0111905:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111908:	ba 00 00 00 00       	mov    $0x0,%edx
f011190d:	f7 75 84             	divl   -0x7c(%ebp)
f0111910:	8b 45 80             	mov    -0x80(%ebp),%eax
f0111913:	29 d0                	sub    %edx,%eax
f0111915:	01 d8                	add    %ebx,%eax
f0111917:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011191c:	39 c1                	cmp    %eax,%ecx
f011191e:	74 17                	je     f0111937 <test_kmalloc_firstfit1+0x6a2>
f0111920:	83 ec 04             	sub    $0x4,%esp
f0111923:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111928:	68 10 03 00 00       	push   $0x310
f011192d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111932:	e8 5c e8 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111937:	e8 21 ad ff ff       	call   f010c65d <pf_calculate_free_frames>
f011193c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011193f:	74 17                	je     f0111958 <test_kmalloc_firstfit1+0x6c3>
f0111941:	83 ec 04             	sub    $0x4,%esp
f0111944:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111949:	68 11 03 00 00       	push   $0x311
f011194e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111953:	e8 3b e8 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f0111958:	e8 5d 90 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011195d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111960:	29 c2                	sub    %eax,%edx
f0111962:	89 d0                	mov    %edx,%eax
f0111964:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111969:	74 17                	je     f0111982 <test_kmalloc_firstfit1+0x6ed>
f011196b:	83 ec 04             	sub    $0x4,%esp
f011196e:	68 28 e7 11 f0       	push   $0xf011e728
f0111973:	68 12 03 00 00       	push   $0x312
f0111978:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011197d:	e8 11 e8 fe ff       	call   f0100193 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0111982:	e8 33 90 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111987:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011198a:	e8 ce ac ff ff       	call   f010c65d <pf_calculate_free_frames>
f011198f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f0111992:	83 ec 0c             	sub    $0xc,%esp
f0111995:	68 00 fc 2f 00       	push   $0x2ffc00
f011199a:	e8 49 b6 ff ff       	call   f010cfe8 <kmalloc>
f011199f:	83 c4 10             	add    $0x10,%esp
f01119a2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f01119a8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01119ae:	89 c1                	mov    %eax,%ecx
f01119b0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01119b7:	10 00 00 
f01119ba:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01119bf:	0f b6 d0             	movzbl %al,%edx
f01119c2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01119c8:	01 d0                	add    %edx,%eax
f01119ca:	48                   	dec    %eax
f01119cb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01119d1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01119d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01119dc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01119e2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01119e8:	29 d0                	sub    %edx,%eax
f01119ea:	89 c3                	mov    %eax,%ebx
f01119ec:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01119f3:	10 00 00 
f01119f6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01119fb:	0f b6 c0             	movzbl %al,%eax
f01119fe:	c1 e0 04             	shl    $0x4,%eax
f0111a01:	89 c2                	mov    %eax,%edx
f0111a03:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111a09:	01 d0                	add    %edx,%eax
f0111a0b:	48                   	dec    %eax
f0111a0c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0111a12:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0111a18:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a1d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0111a23:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0111a29:	29 d0                	sub    %edx,%eax
f0111a2b:	01 d8                	add    %ebx,%eax
f0111a2d:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0111a32:	39 c1                	cmp    %eax,%ecx
f0111a34:	74 17                	je     f0111a4d <test_kmalloc_firstfit1+0x7b8>
f0111a36:	83 ec 04             	sub    $0x4,%esp
f0111a39:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111a3e:	68 18 03 00 00       	push   $0x318
f0111a43:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111a48:	e8 46 e7 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111a4d:	e8 0b ac ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111a52:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111a55:	74 17                	je     f0111a6e <test_kmalloc_firstfit1+0x7d9>
f0111a57:	83 ec 04             	sub    $0x4,%esp
f0111a5a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111a5f:	68 19 03 00 00       	push   $0x319
f0111a64:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111a69:	e8 25 e7 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f0111a6e:	e8 47 8f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111a73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111a76:	29 c2                	sub    %eax,%edx
f0111a78:	89 d0                	mov    %edx,%eax
f0111a7a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111a7f:	74 17                	je     f0111a98 <test_kmalloc_firstfit1+0x803>
f0111a81:	83 ec 04             	sub    $0x4,%esp
f0111a84:	68 28 e7 11 f0       	push   $0xf011e728
f0111a89:	68 1a 03 00 00       	push   $0x31a
f0111a8e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111a93:	e8 fb e6 fe ff       	call   f0100193 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111a98:	e8 1d 8f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111a9d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111aa0:	e8 b8 ab ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111aa5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0111aa8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0111aae:	83 ec 0c             	sub    $0xc,%esp
f0111ab1:	50                   	push   %eax
f0111ab2:	e8 4b b5 ff ff       	call   f010d002 <kfree>
f0111ab7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111aba:	e8 9e ab ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111abf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111ac2:	74 17                	je     f0111adb <test_kmalloc_firstfit1+0x846>
f0111ac4:	83 ec 04             	sub    $0x4,%esp
f0111ac7:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111acc:	68 23 03 00 00       	push   $0x323
f0111ad1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111ad6:	e8 b8 e6 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0111adb:	e8 da 8e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111ae0:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111ae3:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111ae8:	74 17                	je     f0111b01 <test_kmalloc_firstfit1+0x86c>
f0111aea:	83 ec 04             	sub    $0x4,%esp
f0111aed:	68 3b e7 11 f0       	push   $0xf011e73b
f0111af2:	68 24 03 00 00       	push   $0x324
f0111af7:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111afc:	e8 92 e6 fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111b01:	e8 b4 8e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111b06:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111b09:	e8 4f ab ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111b0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f0111b11:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0111b17:	83 ec 0c             	sub    $0xc,%esp
f0111b1a:	50                   	push   %eax
f0111b1b:	e8 e2 b4 ff ff       	call   f010d002 <kfree>
f0111b20:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111b23:	e8 35 ab ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111b28:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111b2b:	74 17                	je     f0111b44 <test_kmalloc_firstfit1+0x8af>
f0111b2d:	83 ec 04             	sub    $0x4,%esp
f0111b30:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111b35:	68 2a 03 00 00       	push   $0x32a
f0111b3a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111b3f:	e8 4f e6 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0111b44:	e8 71 8e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111b49:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111b4c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111b51:	74 17                	je     f0111b6a <test_kmalloc_firstfit1+0x8d5>
f0111b53:	83 ec 04             	sub    $0x4,%esp
f0111b56:	68 3b e7 11 f0       	push   $0xf011e73b
f0111b5b:	68 2b 03 00 00       	push   $0x32b
f0111b60:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111b65:	e8 29 e6 fe ff       	call   f0100193 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111b6a:	e8 4b 8e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111b6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111b72:	e8 e6 aa ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111b77:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f0111b7a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111b80:	83 ec 0c             	sub    $0xc,%esp
f0111b83:	50                   	push   %eax
f0111b84:	e8 79 b4 ff ff       	call   f010d002 <kfree>
f0111b89:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111b8c:	e8 cc aa ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111b91:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111b94:	74 17                	je     f0111bad <test_kmalloc_firstfit1+0x918>
f0111b96:	83 ec 04             	sub    $0x4,%esp
f0111b99:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111b9e:	68 31 03 00 00       	push   $0x331
f0111ba3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111ba8:	e8 e6 e5 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f0111bad:	e8 08 8e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111bb2:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111bb5:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111bba:	74 17                	je     f0111bd3 <test_kmalloc_firstfit1+0x93e>
f0111bbc:	83 ec 04             	sub    $0x4,%esp
f0111bbf:	68 3b e7 11 f0       	push   $0xf011e73b
f0111bc4:	68 32 03 00 00       	push   $0x332
f0111bc9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111bce:	e8 c0 e5 fe ff       	call   f0100193 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0111bd3:	e8 e2 8d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111bd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111bdb:	e8 7d aa ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111be0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f0111be3:	83 ec 0c             	sub    $0xc,%esp
f0111be6:	68 00 fc 07 00       	push   $0x7fc00
f0111beb:	e8 f8 b3 ff ff       	call   f010cfe8 <kmalloc>
f0111bf0:	83 c4 10             	add    $0x10,%esp
f0111bf3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f0111bf9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111bff:	89 c1                	mov    %eax,%ecx
f0111c01:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0111c08:	10 00 00 
f0111c0b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111c10:	0f b6 d0             	movzbl %al,%edx
f0111c13:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0111c19:	01 d0                	add    %edx,%eax
f0111c1b:	48                   	dec    %eax
f0111c1c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0111c22:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0111c28:	ba 00 00 00 00       	mov    $0x0,%edx
f0111c2d:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0111c33:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0111c39:	29 d0                	sub    %edx,%eax
f0111c3b:	89 c3                	mov    %eax,%ebx
f0111c3d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0111c44:	10 00 00 
f0111c47:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111c4c:	0f b6 c0             	movzbl %al,%eax
f0111c4f:	c1 e0 04             	shl    $0x4,%eax
f0111c52:	89 c2                	mov    %eax,%edx
f0111c54:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0111c5a:	01 d0                	add    %edx,%eax
f0111c5c:	48                   	dec    %eax
f0111c5d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0111c63:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111c69:	ba 00 00 00 00       	mov    $0x0,%edx
f0111c6e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0111c74:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111c7a:	29 d0                	sub    %edx,%eax
f0111c7c:	01 d8                	add    %ebx,%eax
f0111c7e:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0111c83:	39 c1                	cmp    %eax,%ecx
f0111c85:	74 17                	je     f0111c9e <test_kmalloc_firstfit1+0xa09>
f0111c87:	83 ec 04             	sub    $0x4,%esp
f0111c8a:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111c8f:	68 3b 03 00 00       	push   $0x33b
f0111c94:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111c99:	e8 f5 e4 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111c9e:	e8 ba a9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111ca3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111ca6:	74 17                	je     f0111cbf <test_kmalloc_firstfit1+0xa2a>
f0111ca8:	83 ec 04             	sub    $0x4,%esp
f0111cab:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111cb0:	68 3c 03 00 00       	push   $0x33c
f0111cb5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111cba:	e8 d4 e4 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f0111cbf:	e8 f6 8c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111cc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111cc7:	29 c2                	sub    %eax,%edx
f0111cc9:	89 d0                	mov    %edx,%eax
f0111ccb:	3d 80 00 00 00       	cmp    $0x80,%eax
f0111cd0:	74 17                	je     f0111ce9 <test_kmalloc_firstfit1+0xa54>
f0111cd2:	83 ec 04             	sub    $0x4,%esp
f0111cd5:	68 28 e7 11 f0       	push   $0xf011e728
f0111cda:	68 3d 03 00 00       	push   $0x33d
f0111cdf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111ce4:	e8 aa e4 fe ff       	call   f0100193 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0111ce9:	e8 cc 8c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111cee:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111cf1:	e8 67 a9 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111cf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0111cf9:	83 ec 0c             	sub    $0xc,%esp
f0111cfc:	68 00 fc 0f 00       	push   $0xffc00
f0111d01:	e8 e2 b2 ff ff       	call   f010cfe8 <kmalloc>
f0111d06:	83 c4 10             	add    $0x10,%esp
f0111d09:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0111d0f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0111d15:	89 c1                	mov    %eax,%ecx
f0111d17:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0111d1e:	10 00 00 
f0111d21:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111d26:	0f b6 d0             	movzbl %al,%edx
f0111d29:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0111d2f:	01 d0                	add    %edx,%eax
f0111d31:	48                   	dec    %eax
f0111d32:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0111d38:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0111d3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d43:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0111d49:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0111d4f:	29 d0                	sub    %edx,%eax
f0111d51:	89 c3                	mov    %eax,%ebx
f0111d53:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0111d5a:	10 00 00 
f0111d5d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111d62:	0f b6 c0             	movzbl %al,%eax
f0111d65:	c1 e0 04             	shl    $0x4,%eax
f0111d68:	89 c2                	mov    %eax,%edx
f0111d6a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0111d70:	01 d0                	add    %edx,%eax
f0111d72:	48                   	dec    %eax
f0111d73:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0111d79:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111d7f:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d84:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0111d8a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111d90:	29 d0                	sub    %edx,%eax
f0111d92:	01 d8                	add    %ebx,%eax
f0111d94:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0111d99:	39 c1                	cmp    %eax,%ecx
f0111d9b:	74 17                	je     f0111db4 <test_kmalloc_firstfit1+0xb1f>
f0111d9d:	83 ec 04             	sub    $0x4,%esp
f0111da0:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111da5:	68 43 03 00 00       	push   $0x343
f0111daa:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111daf:	e8 df e3 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111db4:	e8 a4 a8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111db9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111dbc:	74 17                	je     f0111dd5 <test_kmalloc_firstfit1+0xb40>
f0111dbe:	83 ec 04             	sub    $0x4,%esp
f0111dc1:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111dc6:	68 44 03 00 00       	push   $0x344
f0111dcb:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111dd0:	e8 be e3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0111dd5:	e8 e0 8b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111dda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111ddd:	29 c2                	sub    %eax,%edx
f0111ddf:	89 d0                	mov    %edx,%eax
f0111de1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111de6:	74 17                	je     f0111dff <test_kmalloc_firstfit1+0xb6a>
f0111de8:	83 ec 04             	sub    $0x4,%esp
f0111deb:	68 28 e7 11 f0       	push   $0xf011e728
f0111df0:	68 45 03 00 00       	push   $0x345
f0111df5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111dfa:	e8 94 e3 fe ff       	call   f0100193 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0111dff:	e8 b6 8b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111e04:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111e07:	e8 51 a8 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111e0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f0111e0f:	83 ec 0c             	sub    $0xc,%esp
f0111e12:	68 00 fc 03 00       	push   $0x3fc00
f0111e17:	e8 cc b1 ff ff       	call   f010cfe8 <kmalloc>
f0111e1c:	83 c4 10             	add    $0x10,%esp
f0111e1f:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f0111e25:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0111e2b:	89 c1                	mov    %eax,%ecx
f0111e2d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0111e34:	10 00 00 
f0111e37:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111e3c:	0f b6 d0             	movzbl %al,%edx
f0111e3f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0111e45:	01 d0                	add    %edx,%eax
f0111e47:	48                   	dec    %eax
f0111e48:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0111e4e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0111e54:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e59:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0111e5f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0111e65:	29 d0                	sub    %edx,%eax
f0111e67:	89 c3                	mov    %eax,%ebx
f0111e69:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0111e70:	10 00 00 
f0111e73:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111e78:	0f b6 c0             	movzbl %al,%eax
f0111e7b:	c1 e0 04             	shl    $0x4,%eax
f0111e7e:	89 c2                	mov    %eax,%edx
f0111e80:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0111e86:	01 d0                	add    %edx,%eax
f0111e88:	48                   	dec    %eax
f0111e89:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0111e8f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0111e95:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e9a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0111ea0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0111ea6:	29 d0                	sub    %edx,%eax
f0111ea8:	01 d8                	add    %ebx,%eax
f0111eaa:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f0111eaf:	39 c1                	cmp    %eax,%ecx
f0111eb1:	74 17                	je     f0111eca <test_kmalloc_firstfit1+0xc35>
f0111eb3:	83 ec 04             	sub    $0x4,%esp
f0111eb6:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111ebb:	68 4c 03 00 00       	push   $0x34c
f0111ec0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111ec5:	e8 c9 e2 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111eca:	e8 8e a7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111ecf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111ed2:	74 17                	je     f0111eeb <test_kmalloc_firstfit1+0xc56>
f0111ed4:	83 ec 04             	sub    $0x4,%esp
f0111ed7:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0111edc:	68 4d 03 00 00       	push   $0x34d
f0111ee1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111ee6:	e8 a8 e2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f0111eeb:	e8 ca 8a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111ef0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111ef3:	29 c2                	sub    %eax,%edx
f0111ef5:	89 d0                	mov    %edx,%eax
f0111ef7:	83 f8 40             	cmp    $0x40,%eax
f0111efa:	74 17                	je     f0111f13 <test_kmalloc_firstfit1+0xc7e>
f0111efc:	83 ec 04             	sub    $0x4,%esp
f0111eff:	68 28 e7 11 f0       	push   $0xf011e728
f0111f04:	68 4e 03 00 00       	push   $0x34e
f0111f09:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111f0e:	e8 80 e2 fe ff       	call   f0100193 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0111f13:	e8 a2 8a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111f18:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111f1b:	e8 3d a7 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0111f20:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f0111f23:	83 ec 0c             	sub    $0xc,%esp
f0111f26:	68 00 00 20 00       	push   $0x200000
f0111f2b:	e8 b8 b0 ff ff       	call   f010cfe8 <kmalloc>
f0111f30:	83 c4 10             	add    $0x10,%esp
f0111f33:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0111f39:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0111f3f:	89 c1                	mov    %eax,%ecx
f0111f41:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0111f48:	10 00 00 
f0111f4b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111f50:	0f b6 d0             	movzbl %al,%edx
f0111f53:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111f59:	01 d0                	add    %edx,%eax
f0111f5b:	48                   	dec    %eax
f0111f5c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0111f62:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111f68:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f6d:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0111f73:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111f79:	29 d0                	sub    %edx,%eax
f0111f7b:	89 c3                	mov    %eax,%ebx
f0111f7d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0111f84:	10 00 00 
f0111f87:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0111f8c:	0f b6 c0             	movzbl %al,%eax
f0111f8f:	c1 e0 04             	shl    $0x4,%eax
f0111f92:	89 c2                	mov    %eax,%edx
f0111f94:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0111f9a:	01 d0                	add    %edx,%eax
f0111f9c:	48                   	dec    %eax
f0111f9d:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0111fa3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0111fa9:	ba 00 00 00 00       	mov    $0x0,%edx
f0111fae:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0111fb4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0111fba:	29 d0                	sub    %edx,%eax
f0111fbc:	01 d8                	add    %ebx,%eax
f0111fbe:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0111fc3:	39 c1                	cmp    %eax,%ecx
f0111fc5:	74 17                	je     f0111fde <test_kmalloc_firstfit1+0xd49>
f0111fc7:	83 ec 04             	sub    $0x4,%esp
f0111fca:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0111fcf:	68 54 03 00 00       	push   $0x354
f0111fd4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0111fd9:	e8 b5 e1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0111fde:	e8 d7 89 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0111fe3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111fe6:	29 c2                	sub    %eax,%edx
f0111fe8:	89 d0                	mov    %edx,%eax
f0111fea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111fef:	74 17                	je     f0112008 <test_kmalloc_firstfit1+0xd73>
f0111ff1:	83 ec 04             	sub    $0x4,%esp
f0111ff4:	68 28 e7 11 f0       	push   $0xf011e728
f0111ff9:	68 55 03 00 00       	push   $0x355
f0111ffe:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112003:	e8 8b e1 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112008:	e8 50 a6 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011200d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112010:	74 17                	je     f0112029 <test_kmalloc_firstfit1+0xd94>
f0112012:	83 ec 04             	sub    $0x4,%esp
f0112015:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011201a:	68 56 03 00 00       	push   $0x356
f011201f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112024:	e8 6a e1 fe ff       	call   f0100193 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f0112029:	e8 8c 89 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011202e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112031:	e8 27 a6 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112036:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f0112039:	83 ec 0c             	sub    $0xc,%esp
f011203c:	68 00 fc 3f 00       	push   $0x3ffc00
f0112041:	e8 a2 af ff ff       	call   f010cfe8 <kmalloc>
f0112046:	83 c4 10             	add    $0x10,%esp
f0112049:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011204f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0112055:	89 c1                	mov    %eax,%ecx
f0112057:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011205e:	10 00 00 
f0112061:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112066:	0f b6 d0             	movzbl %al,%edx
f0112069:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011206f:	01 d0                	add    %edx,%eax
f0112071:	48                   	dec    %eax
f0112072:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0112078:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011207e:	ba 00 00 00 00       	mov    $0x0,%edx
f0112083:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0112089:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011208f:	29 d0                	sub    %edx,%eax
f0112091:	89 c3                	mov    %eax,%ebx
f0112093:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011209a:	10 00 00 
f011209d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01120a2:	0f b6 c0             	movzbl %al,%eax
f01120a5:	c1 e0 04             	shl    $0x4,%eax
f01120a8:	89 c2                	mov    %eax,%edx
f01120aa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01120b0:	01 d0                	add    %edx,%eax
f01120b2:	48                   	dec    %eax
f01120b3:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01120b9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01120bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01120c4:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01120ca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01120d0:	29 d0                	sub    %edx,%eax
f01120d2:	01 d8                	add    %ebx,%eax
f01120d4:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f01120d9:	39 c1                	cmp    %eax,%ecx
f01120db:	74 17                	je     f01120f4 <test_kmalloc_firstfit1+0xe5f>
f01120dd:	83 ec 04             	sub    $0x4,%esp
f01120e0:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01120e5:	68 5d 03 00 00       	push   $0x35d
f01120ea:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01120ef:	e8 9f e0 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01120f4:	e8 64 a5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01120f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01120fc:	74 17                	je     f0112115 <test_kmalloc_firstfit1+0xe80>
f01120fe:	83 ec 04             	sub    $0x4,%esp
f0112101:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112106:	68 5e 03 00 00       	push   $0x35e
f011210b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112110:	e8 7e e0 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f0112115:	e8 a0 88 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011211a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011211d:	29 c2                	sub    %eax,%edx
f011211f:	89 d0                	mov    %edx,%eax
f0112121:	3d 00 04 00 00       	cmp    $0x400,%eax
f0112126:	74 17                	je     f011213f <test_kmalloc_firstfit1+0xeaa>
f0112128:	83 ec 04             	sub    $0x4,%esp
f011212b:	68 28 e7 11 f0       	push   $0xf011e728
f0112130:	68 5f 03 00 00       	push   $0x35f
f0112135:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011213a:	e8 54 e0 fe ff       	call   f0100193 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011213f:	e8 76 88 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112144:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112147:	e8 11 a5 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011214c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011214f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0112155:	83 ec 0c             	sub    $0xc,%esp
f0112158:	50                   	push   %eax
f0112159:	e8 a4 ae ff ff       	call   f010d002 <kfree>
f011215e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112161:	e8 f7 a4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112166:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112169:	74 17                	je     f0112182 <test_kmalloc_firstfit1+0xeed>
f011216b:	83 ec 04             	sub    $0x4,%esp
f011216e:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112173:	68 68 03 00 00       	push   $0x368
f0112178:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011217d:	e8 11 e0 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0112182:	e8 33 88 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112187:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011218a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011218f:	74 17                	je     f01121a8 <test_kmalloc_firstfit1+0xf13>
f0112191:	83 ec 04             	sub    $0x4,%esp
f0112194:	68 3b e7 11 f0       	push   $0xf011e73b
f0112199:	68 69 03 00 00       	push   $0x369
f011219e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01121a3:	e8 eb df fe ff       	call   f0100193 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f01121a8:	e8 0d 88 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01121ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01121b0:	e8 a8 a4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01121b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f01121b8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01121be:	83 ec 0c             	sub    $0xc,%esp
f01121c1:	50                   	push   %eax
f01121c2:	e8 3b ae ff ff       	call   f010d002 <kfree>
f01121c7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01121ca:	e8 8e a4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01121cf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01121d2:	74 17                	je     f01121eb <test_kmalloc_firstfit1+0xf56>
f01121d4:	83 ec 04             	sub    $0x4,%esp
f01121d7:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01121dc:	68 6f 03 00 00       	push   $0x36f
f01121e1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01121e6:	e8 a8 df fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f01121eb:	e8 ca 87 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01121f0:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01121f3:	3d 00 01 00 00       	cmp    $0x100,%eax
f01121f8:	74 17                	je     f0112211 <test_kmalloc_firstfit1+0xf7c>
f01121fa:	83 ec 04             	sub    $0x4,%esp
f01121fd:	68 3b e7 11 f0       	push   $0xf011e73b
f0112202:	68 70 03 00 00       	push   $0x370
f0112207:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011220c:	e8 82 df fe ff       	call   f0100193 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f0112211:	e8 a4 87 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112216:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112219:	e8 3f a4 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011221e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f0112221:	83 ec 0c             	sub    $0xc,%esp
f0112224:	68 00 00 10 00       	push   $0x100000
f0112229:	e8 ba ad ff ff       	call   f010cfe8 <kmalloc>
f011222e:	83 c4 10             	add    $0x10,%esp
f0112231:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f0112237:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011223d:	89 c1                	mov    %eax,%ecx
f011223f:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0112246:	10 00 00 
f0112249:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011224e:	0f b6 d0             	movzbl %al,%edx
f0112251:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0112257:	01 d0                	add    %edx,%eax
f0112259:	48                   	dec    %eax
f011225a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0112260:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0112266:	ba 00 00 00 00       	mov    $0x0,%edx
f011226b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0112271:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0112277:	29 d0                	sub    %edx,%eax
f0112279:	89 c3                	mov    %eax,%ebx
f011227b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0112282:	10 00 00 
f0112285:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011228a:	0f b6 c0             	movzbl %al,%eax
f011228d:	c1 e0 04             	shl    $0x4,%eax
f0112290:	89 c2                	mov    %eax,%edx
f0112292:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0112298:	01 d0                	add    %edx,%eax
f011229a:	48                   	dec    %eax
f011229b:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01122a1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01122a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01122ac:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01122b2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01122b8:	29 d0                	sub    %edx,%eax
f01122ba:	01 d8                	add    %ebx,%eax
f01122bc:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f01122c1:	39 c1                	cmp    %eax,%ecx
f01122c3:	74 17                	je     f01122dc <test_kmalloc_firstfit1+0x1047>
f01122c5:	83 ec 04             	sub    $0x4,%esp
f01122c8:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01122cd:	68 7a 03 00 00       	push   $0x37a
f01122d2:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01122d7:	e8 b7 de fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01122dc:	e8 7c a3 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01122e1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01122e4:	74 17                	je     f01122fd <test_kmalloc_firstfit1+0x1068>
f01122e6:	83 ec 04             	sub    $0x4,%esp
f01122e9:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01122ee:	68 7b 03 00 00       	push   $0x37b
f01122f3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01122f8:	e8 96 de fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f01122fd:	e8 b8 86 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112302:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112305:	29 c2                	sub    %eax,%edx
f0112307:	89 d0                	mov    %edx,%eax
f0112309:	3d 00 01 00 00       	cmp    $0x100,%eax
f011230e:	74 17                	je     f0112327 <test_kmalloc_firstfit1+0x1092>
f0112310:	83 ec 04             	sub    $0x4,%esp
f0112313:	68 28 e7 11 f0       	push   $0xf011e728
f0112318:	68 7c 03 00 00       	push   $0x37c
f011231d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112322:	e8 6c de fe ff       	call   f0100193 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f0112327:	83 ec 0c             	sub    $0xc,%esp
f011232a:	68 d4 e8 11 f0       	push   $0xf011e8d4
f011232f:	e8 6f 52 ff ff       	call   f01075a3 <cprintf>
f0112334:	83 c4 10             	add    $0x10,%esp

	return 1;
f0112337:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011233c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011233f:	5b                   	pop    %ebx
f0112340:	5f                   	pop    %edi
f0112341:	5d                   	pop    %ebp
f0112342:	c3                   	ret    

f0112343 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f0112343:	55                   	push   %ebp
f0112344:	89 e5                	mov    %esp,%ebp
f0112346:	57                   	push   %edi
f0112347:	53                   	push   %ebx
f0112348:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f011234e:	83 ec 0c             	sub    $0xc,%esp
f0112351:	68 28 e2 11 f0       	push   $0xf011e228
f0112356:	e8 48 52 ff ff       	call   f01075a3 <cprintf>
f011235b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011235e:	83 ec 0c             	sub    $0xc,%esp
f0112361:	68 58 e2 11 f0       	push   $0xf011e258
f0112366:	e8 38 52 ff ff       	call   f01075a3 <cprintf>
f011236b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011236e:	83 ec 0c             	sub    $0xc,%esp
f0112371:	68 28 e2 11 f0       	push   $0xf011e228
f0112376:	e8 28 52 ff ff       	call   f01075a3 <cprintf>
f011237b:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011237e:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f0112384:	b9 14 00 00 00       	mov    $0x14,%ecx
f0112389:	b8 00 00 00 00       	mov    $0x0,%eax
f011238e:	89 d7                	mov    %edx,%edi
f0112390:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0112392:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0112399:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011239e:	0f b6 d0             	movzbl %al,%edx
f01123a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01123a4:	01 d0                	add    %edx,%eax
f01123a6:	48                   	dec    %eax
f01123a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01123aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01123ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01123b2:	f7 75 f4             	divl   -0xc(%ebp)
f01123b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01123b8:	29 d0                	sub    %edx,%eax
f01123ba:	89 c1                	mov    %eax,%ecx
f01123bc:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01123c3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01123c8:	0f b6 c0             	movzbl %al,%eax
f01123cb:	c1 e0 04             	shl    $0x4,%eax
f01123ce:	89 c2                	mov    %eax,%edx
f01123d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01123d3:	01 d0                	add    %edx,%eax
f01123d5:	48                   	dec    %eax
f01123d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01123d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01123dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01123e1:	f7 75 ec             	divl   -0x14(%ebp)
f01123e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01123e7:	29 d0                	sub    %edx,%eax
f01123e9:	01 c8                	add    %ecx,%eax
f01123eb:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01123f0:	29 c2                	sub    %eax,%edx
f01123f2:	89 d0                	mov    %edx,%eax
f01123f4:	83 ec 0c             	sub    $0xc,%esp
f01123f7:	50                   	push   %eax
f01123f8:	e8 eb ab ff ff       	call   f010cfe8 <kmalloc>
f01123fd:	83 c4 10             	add    $0x10,%esp
f0112400:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f0112406:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011240c:	85 c0                	test   %eax,%eax
f011240e:	74 17                	je     f0112427 <test_kmalloc_firstfit2+0xe4>
f0112410:	83 ec 04             	sub    $0x4,%esp
f0112413:	68 20 e9 11 f0       	push   $0xf011e920
f0112418:	68 91 03 00 00       	push   $0x391
f011241d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112422:	e8 6c dd fe ff       	call   f0100193 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0112427:	e8 8e 85 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011242c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011242f:	e8 29 a2 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112434:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0112437:	83 ec 0c             	sub    $0xc,%esp
f011243a:	68 00 fc 1f 00       	push   $0x1ffc00
f011243f:	e8 a4 ab ff ff       	call   f010cfe8 <kmalloc>
f0112444:	83 c4 10             	add    $0x10,%esp
f0112447:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011244d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0112453:	89 c1                	mov    %eax,%ecx
f0112455:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011245c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112461:	0f b6 d0             	movzbl %al,%edx
f0112464:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112467:	01 d0                	add    %edx,%eax
f0112469:	48                   	dec    %eax
f011246a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011246d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112470:	ba 00 00 00 00       	mov    $0x0,%edx
f0112475:	f7 75 dc             	divl   -0x24(%ebp)
f0112478:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011247b:	29 d0                	sub    %edx,%eax
f011247d:	89 c3                	mov    %eax,%ebx
f011247f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0112486:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011248b:	0f b6 c0             	movzbl %al,%eax
f011248e:	c1 e0 04             	shl    $0x4,%eax
f0112491:	89 c2                	mov    %eax,%edx
f0112493:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112496:	01 d0                	add    %edx,%eax
f0112498:	48                   	dec    %eax
f0112499:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011249c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011249f:	ba 00 00 00 00       	mov    $0x0,%edx
f01124a4:	f7 75 d4             	divl   -0x2c(%ebp)
f01124a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01124aa:	29 d0                	sub    %edx,%eax
f01124ac:	01 d8                	add    %ebx,%eax
f01124ae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01124b3:	39 c1                	cmp    %eax,%ecx
f01124b5:	74 17                	je     f01124ce <test_kmalloc_firstfit2+0x18b>
f01124b7:	83 ec 04             	sub    $0x4,%esp
f01124ba:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01124bf:	68 9b 03 00 00       	push   $0x39b
f01124c4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01124c9:	e8 c5 dc fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01124ce:	e8 8a a1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01124d3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01124d6:	74 17                	je     f01124ef <test_kmalloc_firstfit2+0x1ac>
f01124d8:	83 ec 04             	sub    $0x4,%esp
f01124db:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01124e0:	68 9c 03 00 00       	push   $0x39c
f01124e5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01124ea:	e8 a4 dc fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f01124ef:	e8 c6 84 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01124f4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01124f7:	29 c2                	sub    %eax,%edx
f01124f9:	89 d0                	mov    %edx,%eax
f01124fb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112500:	74 17                	je     f0112519 <test_kmalloc_firstfit2+0x1d6>
f0112502:	83 ec 04             	sub    $0x4,%esp
f0112505:	68 28 e7 11 f0       	push   $0xf011e728
f011250a:	68 9d 03 00 00       	push   $0x39d
f011250f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112514:	e8 7a dc fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0112519:	e8 9c 84 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011251e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112521:	e8 37 a1 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112526:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0112529:	83 ec 0c             	sub    $0xc,%esp
f011252c:	68 00 fc 1f 00       	push   $0x1ffc00
f0112531:	e8 b2 aa ff ff       	call   f010cfe8 <kmalloc>
f0112536:	83 c4 10             	add    $0x10,%esp
f0112539:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011253f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0112545:	89 c1                	mov    %eax,%ecx
f0112547:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011254e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112553:	0f b6 d0             	movzbl %al,%edx
f0112556:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112559:	01 d0                	add    %edx,%eax
f011255b:	48                   	dec    %eax
f011255c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011255f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112562:	ba 00 00 00 00       	mov    $0x0,%edx
f0112567:	f7 75 cc             	divl   -0x34(%ebp)
f011256a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011256d:	29 d0                	sub    %edx,%eax
f011256f:	89 c3                	mov    %eax,%ebx
f0112571:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0112578:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011257d:	0f b6 c0             	movzbl %al,%eax
f0112580:	c1 e0 04             	shl    $0x4,%eax
f0112583:	89 c2                	mov    %eax,%edx
f0112585:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112588:	01 d0                	add    %edx,%eax
f011258a:	48                   	dec    %eax
f011258b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011258e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112591:	ba 00 00 00 00       	mov    $0x0,%edx
f0112596:	f7 75 c4             	divl   -0x3c(%ebp)
f0112599:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011259c:	29 d0                	sub    %edx,%eax
f011259e:	01 d8                	add    %ebx,%eax
f01125a0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01125a5:	39 c1                	cmp    %eax,%ecx
f01125a7:	74 17                	je     f01125c0 <test_kmalloc_firstfit2+0x27d>
f01125a9:	83 ec 04             	sub    $0x4,%esp
f01125ac:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01125b1:	68 a3 03 00 00       	push   $0x3a3
f01125b6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01125bb:	e8 d3 db fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01125c0:	e8 98 a0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01125c5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01125c8:	74 17                	je     f01125e1 <test_kmalloc_firstfit2+0x29e>
f01125ca:	83 ec 04             	sub    $0x4,%esp
f01125cd:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01125d2:	68 a4 03 00 00       	push   $0x3a4
f01125d7:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01125dc:	e8 b2 db fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f01125e1:	e8 d4 83 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01125e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01125e9:	29 c2                	sub    %eax,%edx
f01125eb:	89 d0                	mov    %edx,%eax
f01125ed:	3d 00 02 00 00       	cmp    $0x200,%eax
f01125f2:	74 17                	je     f011260b <test_kmalloc_firstfit2+0x2c8>
f01125f4:	83 ec 04             	sub    $0x4,%esp
f01125f7:	68 28 e7 11 f0       	push   $0xf011e728
f01125fc:	68 a5 03 00 00       	push   $0x3a5
f0112601:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112606:	e8 88 db fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011260b:	e8 aa 83 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112610:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112613:	e8 45 a0 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112618:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011261b:	83 ec 0c             	sub    $0xc,%esp
f011261e:	68 00 08 00 00       	push   $0x800
f0112623:	e8 c0 a9 ff ff       	call   f010cfe8 <kmalloc>
f0112628:	83 c4 10             	add    $0x10,%esp
f011262b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0112631:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0112637:	89 c1                	mov    %eax,%ecx
f0112639:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0112640:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112645:	0f b6 d0             	movzbl %al,%edx
f0112648:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011264b:	01 d0                	add    %edx,%eax
f011264d:	48                   	dec    %eax
f011264e:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0112651:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112654:	ba 00 00 00 00       	mov    $0x0,%edx
f0112659:	f7 75 bc             	divl   -0x44(%ebp)
f011265c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011265f:	29 d0                	sub    %edx,%eax
f0112661:	89 c3                	mov    %eax,%ebx
f0112663:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011266a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011266f:	0f b6 c0             	movzbl %al,%eax
f0112672:	c1 e0 04             	shl    $0x4,%eax
f0112675:	89 c2                	mov    %eax,%edx
f0112677:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011267a:	01 d0                	add    %edx,%eax
f011267c:	48                   	dec    %eax
f011267d:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0112680:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112683:	ba 00 00 00 00       	mov    $0x0,%edx
f0112688:	f7 75 b4             	divl   -0x4c(%ebp)
f011268b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011268e:	29 d0                	sub    %edx,%eax
f0112690:	01 d8                	add    %ebx,%eax
f0112692:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0112697:	39 c1                	cmp    %eax,%ecx
f0112699:	73 17                	jae    f01126b2 <test_kmalloc_firstfit2+0x36f>
f011269b:	83 ec 04             	sub    $0x4,%esp
f011269e:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01126a3:	68 ab 03 00 00       	push   $0x3ab
f01126a8:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01126ad:	e8 e1 da fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01126b2:	e8 a6 9f ff ff       	call   f010c65d <pf_calculate_free_frames>
f01126b7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01126ba:	74 17                	je     f01126d3 <test_kmalloc_firstfit2+0x390>
f01126bc:	83 ec 04             	sub    $0x4,%esp
f01126bf:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01126c4:	68 ac 03 00 00       	push   $0x3ac
f01126c9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01126ce:	e8 c0 da fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f01126d3:	e8 e2 82 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01126d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01126db:	29 c2                	sub    %eax,%edx
f01126dd:	89 d0                	mov    %edx,%eax
f01126df:	83 f8 01             	cmp    $0x1,%eax
f01126e2:	74 17                	je     f01126fb <test_kmalloc_firstfit2+0x3b8>
f01126e4:	83 ec 04             	sub    $0x4,%esp
f01126e7:	68 28 e7 11 f0       	push   $0xf011e728
f01126ec:	68 ad 03 00 00       	push   $0x3ad
f01126f1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01126f6:	e8 98 da fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01126fb:	e8 ba 82 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112700:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112703:	e8 55 9f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112708:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011270b:	83 ec 0c             	sub    $0xc,%esp
f011270e:	68 00 08 00 00       	push   $0x800
f0112713:	e8 d0 a8 ff ff       	call   f010cfe8 <kmalloc>
f0112718:	83 c4 10             	add    $0x10,%esp
f011271b:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f0112721:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0112727:	89 c1                	mov    %eax,%ecx
f0112729:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0112730:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112735:	0f b6 d0             	movzbl %al,%edx
f0112738:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011273b:	01 d0                	add    %edx,%eax
f011273d:	48                   	dec    %eax
f011273e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0112741:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112744:	ba 00 00 00 00       	mov    $0x0,%edx
f0112749:	f7 75 ac             	divl   -0x54(%ebp)
f011274c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011274f:	29 d0                	sub    %edx,%eax
f0112751:	89 c3                	mov    %eax,%ebx
f0112753:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011275a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011275f:	0f b6 c0             	movzbl %al,%eax
f0112762:	c1 e0 04             	shl    $0x4,%eax
f0112765:	89 c2                	mov    %eax,%edx
f0112767:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011276a:	01 d0                	add    %edx,%eax
f011276c:	48                   	dec    %eax
f011276d:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0112770:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112773:	ba 00 00 00 00       	mov    $0x0,%edx
f0112778:	f7 75 a4             	divl   -0x5c(%ebp)
f011277b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011277e:	29 d0                	sub    %edx,%eax
f0112780:	01 d8                	add    %ebx,%eax
f0112782:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0112787:	39 c1                	cmp    %eax,%ecx
f0112789:	74 17                	je     f01127a2 <test_kmalloc_firstfit2+0x45f>
f011278b:	83 ec 04             	sub    $0x4,%esp
f011278e:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0112793:	68 b3 03 00 00       	push   $0x3b3
f0112798:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011279d:	e8 f1 d9 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01127a2:	e8 b6 9e ff ff       	call   f010c65d <pf_calculate_free_frames>
f01127a7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01127aa:	74 17                	je     f01127c3 <test_kmalloc_firstfit2+0x480>
f01127ac:	83 ec 04             	sub    $0x4,%esp
f01127af:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01127b4:	68 b4 03 00 00       	push   $0x3b4
f01127b9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01127be:	e8 d0 d9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f01127c3:	e8 f2 81 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01127c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01127cb:	29 c2                	sub    %eax,%edx
f01127cd:	89 d0                	mov    %edx,%eax
f01127cf:	83 f8 01             	cmp    $0x1,%eax
f01127d2:	74 17                	je     f01127eb <test_kmalloc_firstfit2+0x4a8>
f01127d4:	83 ec 04             	sub    $0x4,%esp
f01127d7:	68 28 e7 11 f0       	push   $0xf011e728
f01127dc:	68 b5 03 00 00       	push   $0x3b5
f01127e1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01127e6:	e8 a8 d9 fe ff       	call   f0100193 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f01127eb:	e8 ca 81 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01127f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01127f3:	e8 65 9e ff ff       	call   f010c65d <pf_calculate_free_frames>
f01127f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f01127fb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0112801:	83 ec 0c             	sub    $0xc,%esp
f0112804:	50                   	push   %eax
f0112805:	e8 f8 a7 ff ff       	call   f010d002 <kfree>
f011280a:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011280d:	e8 4b 9e ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112812:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112815:	74 17                	je     f011282e <test_kmalloc_firstfit2+0x4eb>
f0112817:	83 ec 04             	sub    $0x4,%esp
f011281a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011281f:	68 bb 03 00 00       	push   $0x3bb
f0112824:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112829:	e8 65 d9 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011282e:	e8 87 81 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112833:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112836:	83 f8 01             	cmp    $0x1,%eax
f0112839:	74 17                	je     f0112852 <test_kmalloc_firstfit2+0x50f>
f011283b:	83 ec 04             	sub    $0x4,%esp
f011283e:	68 3b e7 11 f0       	push   $0xf011e73b
f0112843:	68 bc 03 00 00       	push   $0x3bc
f0112848:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011284d:	e8 41 d9 fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0112852:	e8 63 81 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112857:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011285a:	e8 fe 9d ff ff       	call   f010c65d <pf_calculate_free_frames>
f011285f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0112862:	83 ec 0c             	sub    $0xc,%esp
f0112865:	68 00 1c 00 00       	push   $0x1c00
f011286a:	e8 79 a7 ff ff       	call   f010cfe8 <kmalloc>
f011286f:	83 c4 10             	add    $0x10,%esp
f0112872:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f0112878:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011287e:	89 c1                	mov    %eax,%ecx
f0112880:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0112887:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011288c:	0f b6 d0             	movzbl %al,%edx
f011288f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112892:	01 d0                	add    %edx,%eax
f0112894:	48                   	dec    %eax
f0112895:	89 45 98             	mov    %eax,-0x68(%ebp)
f0112898:	8b 45 98             	mov    -0x68(%ebp),%eax
f011289b:	ba 00 00 00 00       	mov    $0x0,%edx
f01128a0:	f7 75 9c             	divl   -0x64(%ebp)
f01128a3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01128a6:	29 d0                	sub    %edx,%eax
f01128a8:	89 c3                	mov    %eax,%ebx
f01128aa:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01128b1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01128b6:	0f b6 c0             	movzbl %al,%eax
f01128b9:	c1 e0 04             	shl    $0x4,%eax
f01128bc:	89 c2                	mov    %eax,%edx
f01128be:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01128c1:	01 d0                	add    %edx,%eax
f01128c3:	48                   	dec    %eax
f01128c4:	89 45 90             	mov    %eax,-0x70(%ebp)
f01128c7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01128ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01128cf:	f7 75 94             	divl   -0x6c(%ebp)
f01128d2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01128d5:	29 d0                	sub    %edx,%eax
f01128d7:	01 d8                	add    %ebx,%eax
f01128d9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01128de:	39 c1                	cmp    %eax,%ecx
f01128e0:	74 17                	je     f01128f9 <test_kmalloc_firstfit2+0x5b6>
f01128e2:	83 ec 04             	sub    $0x4,%esp
f01128e5:	68 f8 e6 11 f0       	push   $0xf011e6f8
f01128ea:	68 c2 03 00 00       	push   $0x3c2
f01128ef:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01128f4:	e8 9a d8 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01128f9:	e8 5f 9d ff ff       	call   f010c65d <pf_calculate_free_frames>
f01128fe:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112901:	74 17                	je     f011291a <test_kmalloc_firstfit2+0x5d7>
f0112903:	83 ec 04             	sub    $0x4,%esp
f0112906:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011290b:	68 c3 03 00 00       	push   $0x3c3
f0112910:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112915:	e8 79 d8 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011291a:	e8 9b 80 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011291f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112922:	29 c2                	sub    %eax,%edx
f0112924:	89 d0                	mov    %edx,%eax
f0112926:	83 f8 02             	cmp    $0x2,%eax
f0112929:	74 17                	je     f0112942 <test_kmalloc_firstfit2+0x5ff>
f011292b:	83 ec 04             	sub    $0x4,%esp
f011292e:	68 28 e7 11 f0       	push   $0xf011e728
f0112933:	68 c4 03 00 00       	push   $0x3c4
f0112938:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011293d:	e8 51 d8 fe ff       	call   f0100193 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0112942:	e8 73 80 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112947:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011294a:	e8 0e 9d ff ff       	call   f010c65d <pf_calculate_free_frames>
f011294f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f0112952:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0112958:	83 ec 0c             	sub    $0xc,%esp
f011295b:	50                   	push   %eax
f011295c:	e8 a1 a6 ff ff       	call   f010d002 <kfree>
f0112961:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112964:	e8 f4 9c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112969:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011296c:	74 17                	je     f0112985 <test_kmalloc_firstfit2+0x642>
f011296e:	83 ec 04             	sub    $0x4,%esp
f0112971:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112976:	68 ca 03 00 00       	push   $0x3ca
f011297b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112980:	e8 0e d8 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0112985:	e8 30 80 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011298a:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f011298d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112992:	74 17                	je     f01129ab <test_kmalloc_firstfit2+0x668>
f0112994:	83 ec 04             	sub    $0x4,%esp
f0112997:	68 3b e7 11 f0       	push   $0xf011e73b
f011299c:	68 cb 03 00 00       	push   $0x3cb
f01129a1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01129a6:	e8 e8 d7 fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01129ab:	e8 0a 80 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01129b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01129b3:	e8 a5 9c ff ff       	call   f010c65d <pf_calculate_free_frames>
f01129b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01129bb:	83 ec 0c             	sub    $0xc,%esp
f01129be:	68 00 fc 2f 00       	push   $0x2ffc00
f01129c3:	e8 20 a6 ff ff       	call   f010cfe8 <kmalloc>
f01129c8:	83 c4 10             	add    $0x10,%esp
f01129cb:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f01129d1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01129d7:	89 c1                	mov    %eax,%ecx
f01129d9:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01129e0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01129e5:	0f b6 d0             	movzbl %al,%edx
f01129e8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01129eb:	01 d0                	add    %edx,%eax
f01129ed:	48                   	dec    %eax
f01129ee:	89 45 88             	mov    %eax,-0x78(%ebp)
f01129f1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01129f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01129f9:	f7 75 8c             	divl   -0x74(%ebp)
f01129fc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01129ff:	29 d0                	sub    %edx,%eax
f0112a01:	89 c3                	mov    %eax,%ebx
f0112a03:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0112a0a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112a0f:	0f b6 c0             	movzbl %al,%eax
f0112a12:	c1 e0 04             	shl    $0x4,%eax
f0112a15:	89 c2                	mov    %eax,%edx
f0112a17:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112a1a:	01 d0                	add    %edx,%eax
f0112a1c:	48                   	dec    %eax
f0112a1d:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112a20:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112a23:	ba 00 00 00 00       	mov    $0x0,%edx
f0112a28:	f7 75 84             	divl   -0x7c(%ebp)
f0112a2b:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112a2e:	29 d0                	sub    %edx,%eax
f0112a30:	01 d8                	add    %ebx,%eax
f0112a32:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0112a37:	39 c1                	cmp    %eax,%ecx
f0112a39:	74 17                	je     f0112a52 <test_kmalloc_firstfit2+0x70f>
f0112a3b:	83 ec 04             	sub    $0x4,%esp
f0112a3e:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0112a43:	68 d1 03 00 00       	push   $0x3d1
f0112a48:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112a4d:	e8 41 d7 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112a52:	e8 06 9c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112a57:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112a5a:	74 17                	je     f0112a73 <test_kmalloc_firstfit2+0x730>
f0112a5c:	83 ec 04             	sub    $0x4,%esp
f0112a5f:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112a64:	68 d2 03 00 00       	push   $0x3d2
f0112a69:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112a6e:	e8 20 d7 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f0112a73:	e8 42 7f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112a78:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112a7b:	29 c2                	sub    %eax,%edx
f0112a7d:	89 d0                	mov    %edx,%eax
f0112a7f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112a84:	74 17                	je     f0112a9d <test_kmalloc_firstfit2+0x75a>
f0112a86:	83 ec 04             	sub    $0x4,%esp
f0112a89:	68 28 e7 11 f0       	push   $0xf011e728
f0112a8e:	68 d3 03 00 00       	push   $0x3d3
f0112a93:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112a98:	e8 f6 d6 fe ff       	call   f0100193 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f0112a9d:	e8 18 7f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112aa2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112aa5:	e8 b3 9b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112aaa:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f0112aad:	83 ec 0c             	sub    $0xc,%esp
f0112ab0:	68 00 18 20 00       	push   $0x201800
f0112ab5:	e8 2e a5 ff ff       	call   f010cfe8 <kmalloc>
f0112aba:	83 c4 10             	add    $0x10,%esp
f0112abd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0112ac3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0112ac9:	89 c1                	mov    %eax,%ecx
f0112acb:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0112ad2:	10 00 00 
f0112ad5:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112ada:	0f b6 d0             	movzbl %al,%edx
f0112add:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112ae3:	01 d0                	add    %edx,%eax
f0112ae5:	48                   	dec    %eax
f0112ae6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0112aec:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112af2:	ba 00 00 00 00       	mov    $0x0,%edx
f0112af7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0112afd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112b03:	29 d0                	sub    %edx,%eax
f0112b05:	89 c3                	mov    %eax,%ebx
f0112b07:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0112b0e:	10 00 00 
f0112b11:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112b16:	0f b6 c0             	movzbl %al,%eax
f0112b19:	c1 e0 04             	shl    $0x4,%eax
f0112b1c:	89 c2                	mov    %eax,%edx
f0112b1e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112b24:	01 d0                	add    %edx,%eax
f0112b26:	48                   	dec    %eax
f0112b27:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0112b2d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112b33:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b38:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0112b3e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112b44:	29 d0                	sub    %edx,%eax
f0112b46:	01 d8                	add    %ebx,%eax
f0112b48:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0112b4d:	39 c1                	cmp    %eax,%ecx
f0112b4f:	74 17                	je     f0112b68 <test_kmalloc_firstfit2+0x825>
f0112b51:	83 ec 04             	sub    $0x4,%esp
f0112b54:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0112b59:	68 d9 03 00 00       	push   $0x3d9
f0112b5e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112b63:	e8 2b d6 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112b68:	e8 f0 9a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112b6d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112b70:	74 17                	je     f0112b89 <test_kmalloc_firstfit2+0x846>
f0112b72:	83 ec 04             	sub    $0x4,%esp
f0112b75:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112b7a:	68 da 03 00 00       	push   $0x3da
f0112b7f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112b84:	e8 0a d6 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f0112b89:	e8 2c 7e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112b8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112b91:	29 c2                	sub    %eax,%edx
f0112b93:	89 d0                	mov    %edx,%eax
f0112b95:	3d 02 02 00 00       	cmp    $0x202,%eax
f0112b9a:	74 17                	je     f0112bb3 <test_kmalloc_firstfit2+0x870>
f0112b9c:	83 ec 04             	sub    $0x4,%esp
f0112b9f:	68 28 e7 11 f0       	push   $0xf011e728
f0112ba4:	68 db 03 00 00       	push   $0x3db
f0112ba9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112bae:	e8 e0 d5 fe ff       	call   f0100193 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0112bb3:	e8 02 7e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112bb8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112bbb:	e8 9d 9a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112bc0:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0112bc3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0112bc9:	83 ec 0c             	sub    $0xc,%esp
f0112bcc:	50                   	push   %eax
f0112bcd:	e8 30 a4 ff ff       	call   f010d002 <kfree>
f0112bd2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112bd5:	e8 83 9a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112bda:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112bdd:	74 17                	je     f0112bf6 <test_kmalloc_firstfit2+0x8b3>
f0112bdf:	83 ec 04             	sub    $0x4,%esp
f0112be2:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112be7:	68 e1 03 00 00       	push   $0x3e1
f0112bec:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112bf1:	e8 9d d5 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f0112bf6:	e8 bf 7d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112bfb:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112bfe:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112c03:	74 17                	je     f0112c1c <test_kmalloc_firstfit2+0x8d9>
f0112c05:	83 ec 04             	sub    $0x4,%esp
f0112c08:	68 3b e7 11 f0       	push   $0xf011e73b
f0112c0d:	68 e2 03 00 00       	push   $0x3e2
f0112c12:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112c17:	e8 77 d5 fe ff       	call   f0100193 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f0112c1c:	e8 99 7d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112c21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112c24:	e8 34 9a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112c29:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f0112c2c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0112c32:	83 ec 0c             	sub    $0xc,%esp
f0112c35:	50                   	push   %eax
f0112c36:	e8 c7 a3 ff ff       	call   f010d002 <kfree>
f0112c3b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0112c3e:	e8 77 7d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112c43:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112c46:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112c4b:	74 17                	je     f0112c64 <test_kmalloc_firstfit2+0x921>
f0112c4d:	83 ec 04             	sub    $0x4,%esp
f0112c50:	68 3b e7 11 f0       	push   $0xf011e73b
f0112c55:	68 e8 03 00 00       	push   $0x3e8
f0112c5a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112c5f:	e8 2f d5 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112c64:	e8 f4 99 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112c69:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112c6c:	74 17                	je     f0112c85 <test_kmalloc_firstfit2+0x942>
f0112c6e:	83 ec 04             	sub    $0x4,%esp
f0112c71:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112c76:	68 e9 03 00 00       	push   $0x3e9
f0112c7b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112c80:	e8 0e d5 fe ff       	call   f0100193 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f0112c85:	e8 30 7d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112c8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112c8d:	e8 cb 99 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112c92:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f0112c95:	83 ec 0c             	sub    $0xc,%esp
f0112c98:	68 00 fc 4f 00       	push   $0x4ffc00
f0112c9d:	e8 46 a3 ff ff       	call   f010cfe8 <kmalloc>
f0112ca2:	83 c4 10             	add    $0x10,%esp
f0112ca5:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f0112cab:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0112cb1:	89 c1                	mov    %eax,%ecx
f0112cb3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0112cba:	10 00 00 
f0112cbd:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112cc2:	0f b6 d0             	movzbl %al,%edx
f0112cc5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0112ccb:	01 d0                	add    %edx,%eax
f0112ccd:	48                   	dec    %eax
f0112cce:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0112cd4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0112cda:	ba 00 00 00 00       	mov    $0x0,%edx
f0112cdf:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0112ce5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0112ceb:	29 d0                	sub    %edx,%eax
f0112ced:	89 c3                	mov    %eax,%ebx
f0112cef:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0112cf6:	10 00 00 
f0112cf9:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112cfe:	0f b6 c0             	movzbl %al,%eax
f0112d01:	c1 e0 04             	shl    $0x4,%eax
f0112d04:	89 c2                	mov    %eax,%edx
f0112d06:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0112d0c:	01 d0                	add    %edx,%eax
f0112d0e:	48                   	dec    %eax
f0112d0f:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0112d15:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0112d1b:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d20:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0112d26:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0112d2c:	29 d0                	sub    %edx,%eax
f0112d2e:	01 d8                	add    %ebx,%eax
f0112d30:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0112d35:	39 c1                	cmp    %eax,%ecx
f0112d37:	74 17                	je     f0112d50 <test_kmalloc_firstfit2+0xa0d>
f0112d39:	83 ec 04             	sub    $0x4,%esp
f0112d3c:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0112d41:	68 ef 03 00 00       	push   $0x3ef
f0112d46:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112d4b:	e8 43 d4 fe ff       	call   f0100193 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112d50:	e8 08 99 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112d55:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112d58:	74 17                	je     f0112d71 <test_kmalloc_firstfit2+0xa2e>
f0112d5a:	83 ec 04             	sub    $0x4,%esp
f0112d5d:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112d62:	68 f0 03 00 00       	push   $0x3f0
f0112d67:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112d6c:	e8 22 d4 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f0112d71:	e8 44 7c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112d76:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112d79:	29 c2                	sub    %eax,%edx
f0112d7b:	89 d0                	mov    %edx,%eax
f0112d7d:	3d 00 05 00 00       	cmp    $0x500,%eax
f0112d82:	74 17                	je     f0112d9b <test_kmalloc_firstfit2+0xa58>
f0112d84:	83 ec 04             	sub    $0x4,%esp
f0112d87:	68 28 e7 11 f0       	push   $0xf011e728
f0112d8c:	68 f1 03 00 00       	push   $0x3f1
f0112d91:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112d96:	e8 f8 d3 fe ff       	call   f0100193 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112d9b:	e8 1a 7c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112da3:	e8 b5 98 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112da8:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f0112dab:	83 ec 0c             	sub    $0xc,%esp
f0112dae:	68 00 fc 2f 00       	push   $0x2ffc00
f0112db3:	e8 30 a2 ff ff       	call   f010cfe8 <kmalloc>
f0112db8:	83 c4 10             	add    $0x10,%esp
f0112dbb:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0112dc1:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0112dc7:	89 c1                	mov    %eax,%ecx
f0112dc9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0112dd0:	10 00 00 
f0112dd3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112dd8:	0f b6 d0             	movzbl %al,%edx
f0112ddb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0112de1:	01 d0                	add    %edx,%eax
f0112de3:	48                   	dec    %eax
f0112de4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0112dea:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0112df0:	ba 00 00 00 00       	mov    $0x0,%edx
f0112df5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0112dfb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0112e01:	29 d0                	sub    %edx,%eax
f0112e03:	89 c3                	mov    %eax,%ebx
f0112e05:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0112e0c:	10 00 00 
f0112e0f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112e14:	0f b6 c0             	movzbl %al,%eax
f0112e17:	c1 e0 04             	shl    $0x4,%eax
f0112e1a:	89 c2                	mov    %eax,%edx
f0112e1c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0112e22:	01 d0                	add    %edx,%eax
f0112e24:	48                   	dec    %eax
f0112e25:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0112e2b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0112e31:	ba 00 00 00 00       	mov    $0x0,%edx
f0112e36:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0112e3c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0112e42:	29 d0                	sub    %edx,%eax
f0112e44:	01 d8                	add    %ebx,%eax
f0112e46:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0112e4b:	39 c1                	cmp    %eax,%ecx
f0112e4d:	74 17                	je     f0112e66 <test_kmalloc_firstfit2+0xb23>
f0112e4f:	83 ec 04             	sub    $0x4,%esp
f0112e52:	68 f8 e6 11 f0       	push   $0xf011e6f8
f0112e57:	68 ff 03 00 00       	push   $0x3ff
f0112e5c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112e61:	e8 2d d3 fe ff       	call   f0100193 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112e66:	e8 f2 97 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112e6b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112e6e:	74 17                	je     f0112e87 <test_kmalloc_firstfit2+0xb44>
f0112e70:	83 ec 04             	sub    $0x4,%esp
f0112e73:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0112e78:	68 00 04 00 00       	push   $0x400
f0112e7d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112e82:	e8 0c d3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f0112e87:	e8 2e 7b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112e8c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112e8f:	29 c2                	sub    %eax,%edx
f0112e91:	89 d0                	mov    %edx,%eax
f0112e93:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112e98:	74 17                	je     f0112eb1 <test_kmalloc_firstfit2+0xb6e>
f0112e9a:	83 ec 04             	sub    $0x4,%esp
f0112e9d:	68 28 e7 11 f0       	push   $0xf011e728
f0112ea2:	68 01 04 00 00       	push   $0x401
f0112ea7:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112eac:	e8 e2 d2 fe ff       	call   f0100193 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f0112eb1:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0112eb8:	10 00 00 
f0112ebb:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112ec0:	0f b6 d0             	movzbl %al,%edx
f0112ec3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0112ec9:	01 d0                	add    %edx,%eax
f0112ecb:	48                   	dec    %eax
f0112ecc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0112ed2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112ed8:	ba 00 00 00 00       	mov    $0x0,%edx
f0112edd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0112ee3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112ee9:	29 d0                	sub    %edx,%eax
f0112eeb:	89 c1                	mov    %eax,%ecx
f0112eed:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0112ef4:	10 00 00 
f0112ef7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0112efc:	0f b6 c0             	movzbl %al,%eax
f0112eff:	c1 e0 04             	shl    $0x4,%eax
f0112f02:	89 c2                	mov    %eax,%edx
f0112f04:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0112f0a:	01 d0                	add    %edx,%eax
f0112f0c:	48                   	dec    %eax
f0112f0d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0112f13:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0112f19:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f1e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0112f24:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0112f2a:	29 d0                	sub    %edx,%eax
f0112f2c:	01 c8                	add    %ecx,%eax
f0112f2e:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f0112f33:	29 c2                	sub    %eax,%edx
f0112f35:	89 d0                	mov    %edx,%eax
f0112f37:	83 ec 0c             	sub    $0xc,%esp
f0112f3a:	50                   	push   %eax
f0112f3b:	e8 a8 a0 ff ff       	call   f010cfe8 <kmalloc>
f0112f40:	83 c4 10             	add    $0x10,%esp
f0112f43:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f0112f49:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0112f4f:	85 c0                	test   %eax,%eax
f0112f51:	74 17                	je     f0112f6a <test_kmalloc_firstfit2+0xc27>
f0112f53:	83 ec 04             	sub    $0x4,%esp
f0112f56:	68 28 e8 11 f0       	push   $0xf011e828
f0112f5b:	68 07 04 00 00       	push   $0x407
f0112f60:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0112f65:	e8 29 d2 fe ff       	call   f0100193 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f0112f6a:	83 ec 0c             	sub    $0xc,%esp
f0112f6d:	68 68 e9 11 f0       	push   $0xf011e968
f0112f72:	e8 2c 46 ff ff       	call   f01075a3 <cprintf>
f0112f77:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f0112f7a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0112f7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0112f82:	5b                   	pop    %ebx
f0112f83:	5f                   	pop    %edi
f0112f84:	5d                   	pop    %ebp
f0112f85:	c3                   	ret    

f0112f86 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f0112f86:	55                   	push   %ebp
f0112f87:	89 e5                	mov    %esp,%ebp
f0112f89:	57                   	push   %edi
f0112f8a:	53                   	push   %ebx
f0112f8b:	81 ec c0 03 00 00    	sub    $0x3c0,%esp
	cprintf("==============================================\n");
f0112f91:	83 ec 0c             	sub    $0xc,%esp
f0112f94:	68 28 e2 11 f0       	push   $0xf011e228
f0112f99:	e8 05 46 ff ff       	call   f01075a3 <cprintf>
f0112f9e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0112fa1:	83 ec 0c             	sub    $0xc,%esp
f0112fa4:	68 58 e2 11 f0       	push   $0xf011e258
f0112fa9:	e8 f5 45 ff ff       	call   f01075a3 <cprintf>
f0112fae:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0112fb1:	83 ec 0c             	sub    $0xc,%esp
f0112fb4:	68 28 e2 11 f0       	push   $0xf011e228
f0112fb9:	e8 e5 45 ff ff       	call   f01075a3 <cprintf>
f0112fbe:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0112fc1:	8d 95 44 fc ff ff    	lea    -0x3bc(%ebp),%edx
f0112fc7:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0112fcc:	b8 00 00 00 00       	mov    $0x0,%eax
f0112fd1:	89 d7                	mov    %edx,%edi
f0112fd3:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0112fd5:	e8 e0 79 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0112fda:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0112fdd:	e8 7b 96 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0112fe2:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f0112fe5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f0112fec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0112ff3:	eb 1f                	jmp    f0113014 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0112ff5:	83 ec 0c             	sub    $0xc,%esp
f0112ff8:	68 00 00 20 00       	push   $0x200000
f0112ffd:	e8 e6 9f ff ff       	call   f010cfe8 <kmalloc>
f0113002:	83 c4 10             	add    $0x10,%esp
f0113005:	89 c2                	mov    %eax,%edx
f0113007:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011300a:	89 94 85 44 fc ff ff 	mov    %edx,-0x3bc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f0113011:	ff 45 f4             	incl   -0xc(%ebp)
f0113014:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0113018:	7e db                	jle    f0112ff5 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011301a:	83 ec 0c             	sub    $0xc,%esp
f011301d:	68 00 b0 1f 00       	push   $0x1fb000
f0113022:	e8 c1 9f ff ff       	call   f010cfe8 <kmalloc>
f0113027:	83 c4 10             	add    $0x10,%esp
f011302a:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0113030:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f0113036:	89 c1                	mov    %eax,%ecx
f0113038:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011303f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113044:	0f b6 d0             	movzbl %al,%edx
f0113047:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011304a:	01 d0                	add    %edx,%eax
f011304c:	48                   	dec    %eax
f011304d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0113050:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113053:	ba 00 00 00 00       	mov    $0x0,%edx
f0113058:	f7 75 e4             	divl   -0x1c(%ebp)
f011305b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011305e:	29 d0                	sub    %edx,%eax
f0113060:	89 c3                	mov    %eax,%ebx
f0113062:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0113069:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011306e:	0f b6 c0             	movzbl %al,%eax
f0113071:	c1 e0 04             	shl    $0x4,%eax
f0113074:	89 c2                	mov    %eax,%edx
f0113076:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113079:	01 d0                	add    %edx,%eax
f011307b:	48                   	dec    %eax
f011307c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011307f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113082:	ba 00 00 00 00       	mov    $0x0,%edx
f0113087:	f7 75 dc             	divl   -0x24(%ebp)
f011308a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011308d:	29 d0                	sub    %edx,%eax
f011308f:	01 d8                	add    %ebx,%eax
f0113091:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0113096:	39 c1                	cmp    %eax,%ecx
f0113098:	0f 85 34 03 00 00    	jne    f01133d2 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011309e:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f01130a4:	89 c1                	mov    %eax,%ecx
f01130a6:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01130ad:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01130b2:	0f b6 d0             	movzbl %al,%edx
f01130b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01130b8:	01 d0                	add    %edx,%eax
f01130ba:	48                   	dec    %eax
f01130bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01130be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01130c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01130c6:	f7 75 d4             	divl   -0x2c(%ebp)
f01130c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01130cc:	29 d0                	sub    %edx,%eax
f01130ce:	89 c3                	mov    %eax,%ebx
f01130d0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01130d7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01130dc:	0f b6 c0             	movzbl %al,%eax
f01130df:	c1 e0 04             	shl    $0x4,%eax
f01130e2:	89 c2                	mov    %eax,%edx
f01130e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01130e7:	01 d0                	add    %edx,%eax
f01130e9:	48                   	dec    %eax
f01130ea:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01130ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01130f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01130f5:	f7 75 cc             	divl   -0x34(%ebp)
f01130f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01130fb:	29 d0                	sub    %edx,%eax
f01130fd:	01 d8                	add    %ebx,%eax
f01130ff:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0113104:	39 c1                	cmp    %eax,%ecx
f0113106:	0f 85 c6 02 00 00    	jne    f01133d2 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011310c:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f0113112:	89 c1                	mov    %eax,%ecx
f0113114:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011311b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113120:	0f b6 d0             	movzbl %al,%edx
f0113123:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113126:	01 d0                	add    %edx,%eax
f0113128:	48                   	dec    %eax
f0113129:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011312c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011312f:	ba 00 00 00 00       	mov    $0x0,%edx
f0113134:	f7 75 c4             	divl   -0x3c(%ebp)
f0113137:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011313a:	29 d0                	sub    %edx,%eax
f011313c:	89 c3                	mov    %eax,%ebx
f011313e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0113145:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011314a:	0f b6 c0             	movzbl %al,%eax
f011314d:	c1 e0 04             	shl    $0x4,%eax
f0113150:	89 c2                	mov    %eax,%edx
f0113152:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113155:	01 d0                	add    %edx,%eax
f0113157:	48                   	dec    %eax
f0113158:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011315b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011315e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113163:	f7 75 bc             	divl   -0x44(%ebp)
f0113166:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113169:	29 d0                	sub    %edx,%eax
f011316b:	01 d8                	add    %ebx,%eax
f011316d:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0113172:	39 c1                	cmp    %eax,%ecx
f0113174:	0f 85 58 02 00 00    	jne    f01133d2 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011317a:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f0113180:	89 c1                	mov    %eax,%ecx
f0113182:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0113189:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011318e:	0f b6 d0             	movzbl %al,%edx
f0113191:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113194:	01 d0                	add    %edx,%eax
f0113196:	48                   	dec    %eax
f0113197:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011319a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011319d:	ba 00 00 00 00       	mov    $0x0,%edx
f01131a2:	f7 75 b4             	divl   -0x4c(%ebp)
f01131a5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01131a8:	29 d0                	sub    %edx,%eax
f01131aa:	89 c3                	mov    %eax,%ebx
f01131ac:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01131b3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01131b8:	0f b6 c0             	movzbl %al,%eax
f01131bb:	c1 e0 04             	shl    $0x4,%eax
f01131be:	89 c2                	mov    %eax,%edx
f01131c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01131c3:	01 d0                	add    %edx,%eax
f01131c5:	48                   	dec    %eax
f01131c6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01131c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01131cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01131d1:	f7 75 ac             	divl   -0x54(%ebp)
f01131d4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01131d7:	29 d0                	sub    %edx,%eax
f01131d9:	01 d8                	add    %ebx,%eax
f01131db:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01131e0:	39 c1                	cmp    %eax,%ecx
f01131e2:	0f 85 ea 01 00 00    	jne    f01133d2 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01131e8:	8b 85 80 fc ff ff    	mov    -0x380(%ebp),%eax
f01131ee:	89 c1                	mov    %eax,%ecx
f01131f0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01131f7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01131fc:	0f b6 d0             	movzbl %al,%edx
f01131ff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113202:	01 d0                	add    %edx,%eax
f0113204:	48                   	dec    %eax
f0113205:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0113208:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011320b:	ba 00 00 00 00       	mov    $0x0,%edx
f0113210:	f7 75 a4             	divl   -0x5c(%ebp)
f0113213:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113216:	29 d0                	sub    %edx,%eax
f0113218:	89 c3                	mov    %eax,%ebx
f011321a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0113221:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113226:	0f b6 c0             	movzbl %al,%eax
f0113229:	c1 e0 04             	shl    $0x4,%eax
f011322c:	89 c2                	mov    %eax,%edx
f011322e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113231:	01 d0                	add    %edx,%eax
f0113233:	48                   	dec    %eax
f0113234:	89 45 98             	mov    %eax,-0x68(%ebp)
f0113237:	8b 45 98             	mov    -0x68(%ebp),%eax
f011323a:	ba 00 00 00 00       	mov    $0x0,%edx
f011323f:	f7 75 9c             	divl   -0x64(%ebp)
f0113242:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113245:	29 d0                	sub    %edx,%eax
f0113247:	01 d8                	add    %ebx,%eax
f0113249:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011324e:	39 c1                	cmp    %eax,%ecx
f0113250:	0f 85 7c 01 00 00    	jne    f01133d2 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0113256:	8b 85 94 fc ff ff    	mov    -0x36c(%ebp),%eax
f011325c:	89 c1                	mov    %eax,%ecx
f011325e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0113265:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011326a:	0f b6 d0             	movzbl %al,%edx
f011326d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113270:	01 d0                	add    %edx,%eax
f0113272:	48                   	dec    %eax
f0113273:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113276:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113279:	ba 00 00 00 00       	mov    $0x0,%edx
f011327e:	f7 75 94             	divl   -0x6c(%ebp)
f0113281:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113284:	29 d0                	sub    %edx,%eax
f0113286:	89 c3                	mov    %eax,%ebx
f0113288:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011328f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113294:	0f b6 c0             	movzbl %al,%eax
f0113297:	c1 e0 04             	shl    $0x4,%eax
f011329a:	89 c2                	mov    %eax,%edx
f011329c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011329f:	01 d0                	add    %edx,%eax
f01132a1:	48                   	dec    %eax
f01132a2:	89 45 88             	mov    %eax,-0x78(%ebp)
f01132a5:	8b 45 88             	mov    -0x78(%ebp),%eax
f01132a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01132ad:	f7 75 8c             	divl   -0x74(%ebp)
f01132b0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01132b3:	29 d0                	sub    %edx,%eax
f01132b5:	01 d8                	add    %ebx,%eax
f01132b7:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01132bc:	39 c1                	cmp    %eax,%ecx
f01132be:	0f 85 0e 01 00 00    	jne    f01133d2 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f01132c4:	8b 85 0c fd ff ff    	mov    -0x2f4(%ebp),%eax
f01132ca:	89 c1                	mov    %eax,%ecx
f01132cc:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01132d3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01132d8:	0f b6 d0             	movzbl %al,%edx
f01132db:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01132de:	01 d0                	add    %edx,%eax
f01132e0:	48                   	dec    %eax
f01132e1:	89 45 80             	mov    %eax,-0x80(%ebp)
f01132e4:	8b 45 80             	mov    -0x80(%ebp),%eax
f01132e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01132ec:	f7 75 84             	divl   -0x7c(%ebp)
f01132ef:	8b 45 80             	mov    -0x80(%ebp),%eax
f01132f2:	29 d0                	sub    %edx,%eax
f01132f4:	89 c3                	mov    %eax,%ebx
f01132f6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01132fd:	10 00 00 
f0113300:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113305:	0f b6 c0             	movzbl %al,%eax
f0113308:	c1 e0 04             	shl    $0x4,%eax
f011330b:	89 c2                	mov    %eax,%edx
f011330d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0113313:	01 d0                	add    %edx,%eax
f0113315:	48                   	dec    %eax
f0113316:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011331c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113322:	ba 00 00 00 00       	mov    $0x0,%edx
f0113327:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011332d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0113333:	29 d0                	sub    %edx,%eax
f0113335:	01 d8                	add    %ebx,%eax
f0113337:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011333c:	39 c1                	cmp    %eax,%ecx
f011333e:	0f 85 8e 00 00 00    	jne    f01133d2 <test_kmalloc_worstfit+0x44c>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f0113344:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f011334a:	89 c1                	mov    %eax,%ecx
f011334c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0113353:	10 00 00 
f0113356:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011335b:	0f b6 d0             	movzbl %al,%edx
f011335e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0113364:	01 d0                	add    %edx,%eax
f0113366:	48                   	dec    %eax
f0113367:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011336d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113373:	ba 00 00 00 00       	mov    $0x0,%edx
f0113378:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011337e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113384:	29 d0                	sub    %edx,%eax
f0113386:	89 c3                	mov    %eax,%ebx
f0113388:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011338f:	10 00 00 
f0113392:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113397:	0f b6 c0             	movzbl %al,%eax
f011339a:	c1 e0 04             	shl    $0x4,%eax
f011339d:	89 c2                	mov    %eax,%edx
f011339f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01133a5:	01 d0                	add    %edx,%eax
f01133a7:	48                   	dec    %eax
f01133a8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01133ae:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01133b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01133b9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01133bf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01133c5:	29 d0                	sub    %edx,%eax
f01133c7:	01 d8                	add    %ebx,%eax
f01133c9:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f01133ce:	39 c1                	cmp    %eax,%ecx
f01133d0:	74 17                	je     f01133e9 <test_kmalloc_worstfit+0x463>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f01133d2:	83 ec 04             	sub    $0x4,%esp
f01133d5:	68 58 e5 11 f0       	push   $0xf011e558
f01133da:	68 2b 04 00 00       	push   $0x42b
f01133df:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01133e4:	e8 aa cd fe ff       	call   f0100193 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01133e9:	e8 6f 92 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01133ee:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01133f1:	74 17                	je     f011340a <test_kmalloc_worstfit+0x484>
f01133f3:	83 ec 04             	sub    $0x4,%esp
f01133f6:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01133fb:	68 2d 04 00 00       	push   $0x42d
f0113400:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113405:	e8 89 cd fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011340a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011340d:	e8 a8 75 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113412:	29 c3                	sub    %eax,%ebx
f0113414:	89 d8                	mov    %ebx,%eax
f0113416:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011341b:	74 17                	je     f0113434 <test_kmalloc_worstfit+0x4ae>
f011341d:	83 ec 04             	sub    $0x4,%esp
f0113420:	68 9b e5 11 f0       	push   $0xf011e59b
f0113425:	68 2e 04 00 00       	push   $0x42e
f011342a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011342f:	e8 5f cd fe ff       	call   f0100193 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f0113434:	e8 81 75 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113439:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011343c:	e8 1c 92 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113441:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f0113444:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011344a:	83 ec 0c             	sub    $0xc,%esp
f011344d:	50                   	push   %eax
f011344e:	e8 af 9b ff ff       	call   f010d002 <kfree>
f0113453:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f0113456:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011345c:	83 ec 0c             	sub    $0xc,%esp
f011345f:	50                   	push   %eax
f0113460:	e8 9d 9b ff ff       	call   f010d002 <kfree>
f0113465:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0113468:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f011346e:	83 ec 0c             	sub    $0xc,%esp
f0113471:	50                   	push   %eax
f0113472:	e8 8b 9b ff ff       	call   f010d002 <kfree>
f0113477:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011347a:	8b 85 6c fc ff ff    	mov    -0x394(%ebp),%eax
f0113480:	83 ec 0c             	sub    $0xc,%esp
f0113483:	50                   	push   %eax
f0113484:	e8 79 9b ff ff       	call   f010d002 <kfree>
f0113489:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011348c:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f0113492:	83 ec 0c             	sub    $0xc,%esp
f0113495:	50                   	push   %eax
f0113496:	e8 67 9b ff ff       	call   f010d002 <kfree>
f011349b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011349e:	8b 85 70 fc ff ff    	mov    -0x390(%ebp),%eax
f01134a4:	83 ec 0c             	sub    $0xc,%esp
f01134a7:	50                   	push   %eax
f01134a8:	e8 55 9b ff ff       	call   f010d002 <kfree>
f01134ad:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f01134b0:	8b 85 bc fc ff ff    	mov    -0x344(%ebp),%eax
f01134b6:	83 ec 0c             	sub    $0xc,%esp
f01134b9:	50                   	push   %eax
f01134ba:	e8 43 9b ff ff       	call   f010d002 <kfree>
f01134bf:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f01134c2:	8b 85 c0 fc ff ff    	mov    -0x340(%ebp),%eax
f01134c8:	83 ec 0c             	sub    $0xc,%esp
f01134cb:	50                   	push   %eax
f01134cc:	e8 31 9b ff ff       	call   f010d002 <kfree>
f01134d1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f01134d4:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01134da:	83 ec 0c             	sub    $0xc,%esp
f01134dd:	50                   	push   %eax
f01134de:	e8 1f 9b ff ff       	call   f010d002 <kfree>
f01134e3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f01134e6:	8b 85 c8 fc ff ff    	mov    -0x338(%ebp),%eax
f01134ec:	83 ec 0c             	sub    $0xc,%esp
f01134ef:	50                   	push   %eax
f01134f0:	e8 0d 9b ff ff       	call   f010d002 <kfree>
f01134f5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f01134f8:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f01134fe:	83 ec 0c             	sub    $0xc,%esp
f0113501:	50                   	push   %eax
f0113502:	e8 fb 9a ff ff       	call   f010d002 <kfree>
f0113507:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011350a:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0113510:	83 ec 0c             	sub    $0xc,%esp
f0113513:	50                   	push   %eax
f0113514:	e8 e9 9a ff ff       	call   f010d002 <kfree>
f0113519:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011351c:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0113522:	83 ec 0c             	sub    $0xc,%esp
f0113525:	50                   	push   %eax
f0113526:	e8 d7 9a ff ff       	call   f010d002 <kfree>
f011352b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011352e:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0113534:	83 ec 0c             	sub    $0xc,%esp
f0113537:	50                   	push   %eax
f0113538:	e8 c5 9a ff ff       	call   f010d002 <kfree>
f011353d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f0113540:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0113546:	83 ec 0c             	sub    $0xc,%esp
f0113549:	50                   	push   %eax
f011354a:	e8 b3 9a ff ff       	call   f010d002 <kfree>
f011354f:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113552:	e8 06 91 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113557:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011355a:	74 17                	je     f0113573 <test_kmalloc_worstfit+0x5ed>
f011355c:	83 ec 04             	sub    $0x4,%esp
f011355f:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0113564:	68 44 04 00 00       	push   $0x444
f0113569:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011356e:	e8 20 cc fe ff       	call   f0100193 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0113573:	e8 42 74 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113578:	89 c2                	mov    %eax,%edx
f011357a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011357d:	29 c2                	sub    %eax,%edx
f011357f:	89 d0                	mov    %edx,%eax
f0113581:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f0113586:	74 17                	je     f011359f <test_kmalloc_worstfit+0x619>
f0113588:	83 ec 04             	sub    $0x4,%esp
f011358b:	68 ac e5 11 f0       	push   $0xf011e5ac
f0113590:	68 45 04 00 00       	push   $0x445
f0113595:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011359a:	e8 f4 cb fe ff       	call   f0100193 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011359f:	e8 16 74 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01135a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01135a7:	e8 b1 90 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01135ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f01135af:	83 ec 0c             	sub    $0xc,%esp
f01135b2:	68 00 00 10 00       	push   $0x100000
f01135b7:	e8 2c 9a ff ff       	call   f010cfe8 <kmalloc>
f01135bc:	83 c4 10             	add    $0x10,%esp
f01135bf:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f01135c5:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01135cc:	10 00 00 
f01135cf:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01135d4:	0f b6 d0             	movzbl %al,%edx
f01135d7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01135dd:	01 d0                	add    %edx,%eax
f01135df:	48                   	dec    %eax
f01135e0:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01135e6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01135ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01135f1:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01135f7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01135fd:	29 d0                	sub    %edx,%eax
f01135ff:	89 c1                	mov    %eax,%ecx
f0113601:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0113608:	10 00 00 
f011360b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113610:	0f b6 c0             	movzbl %al,%eax
f0113613:	c1 e0 04             	shl    $0x4,%eax
f0113616:	89 c2                	mov    %eax,%edx
f0113618:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011361e:	01 d0                	add    %edx,%eax
f0113620:	48                   	dec    %eax
f0113621:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0113627:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011362d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113632:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0113638:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011363e:	29 d0                	sub    %edx,%eax
f0113640:	01 c8                	add    %ecx,%eax
f0113642:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f0113648:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011364e:	39 c2                	cmp    %eax,%edx
f0113650:	74 17                	je     f0113669 <test_kmalloc_worstfit+0x6e3>
		panic("Worst Fit not working correctly");
f0113652:	83 ec 04             	sub    $0x4,%esp
f0113655:	68 b4 e9 11 f0       	push   $0xf011e9b4
f011365a:	68 4c 04 00 00       	push   $0x44c
f011365f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113664:	e8 2a cb fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113669:	e8 ef 8f ff ff       	call   f010c65d <pf_calculate_free_frames>
f011366e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113671:	74 17                	je     f011368a <test_kmalloc_worstfit+0x704>
f0113673:	83 ec 04             	sub    $0x4,%esp
f0113676:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011367b:	68 4d 04 00 00       	push   $0x44d
f0113680:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113685:	e8 09 cb fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011368a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011368d:	e8 28 73 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113692:	29 c3                	sub    %eax,%ebx
f0113694:	89 d8                	mov    %ebx,%eax
f0113696:	3d 00 01 00 00       	cmp    $0x100,%eax
f011369b:	74 17                	je     f01136b4 <test_kmalloc_worstfit+0x72e>
f011369d:	83 ec 04             	sub    $0x4,%esp
f01136a0:	68 16 e8 11 f0       	push   $0xf011e816
f01136a5:	68 4e 04 00 00       	push   $0x44e
f01136aa:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01136af:	e8 df ca fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01136b4:	ff 45 e8             	incl   -0x18(%ebp)
f01136b7:	83 ec 08             	sub    $0x8,%esp
f01136ba:	ff 75 e8             	pushl  -0x18(%ebp)
f01136bd:	68 d4 e9 11 f0       	push   $0xf011e9d4
f01136c2:	e8 dc 3e ff ff       	call   f01075a3 <cprintf>
f01136c7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01136ca:	e8 eb 72 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01136cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01136d2:	e8 86 8f ff ff       	call   f010c65d <pf_calculate_free_frames>
f01136d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f01136da:	83 ec 0c             	sub    $0xc,%esp
f01136dd:	68 00 00 40 00       	push   $0x400000
f01136e2:	e8 01 99 ff ff       	call   f010cfe8 <kmalloc>
f01136e7:	83 c4 10             	add    $0x10,%esp
f01136ea:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f01136f0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01136f7:	10 00 00 
f01136fa:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01136ff:	0f b6 d0             	movzbl %al,%edx
f0113702:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0113708:	01 d0                	add    %edx,%eax
f011370a:	48                   	dec    %eax
f011370b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0113711:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0113717:	ba 00 00 00 00       	mov    $0x0,%edx
f011371c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0113722:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0113728:	29 d0                	sub    %edx,%eax
f011372a:	89 c1                	mov    %eax,%ecx
f011372c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0113733:	10 00 00 
f0113736:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011373b:	0f b6 c0             	movzbl %al,%eax
f011373e:	c1 e0 04             	shl    $0x4,%eax
f0113741:	89 c2                	mov    %eax,%edx
f0113743:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0113749:	01 d0                	add    %edx,%eax
f011374b:	48                   	dec    %eax
f011374c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0113752:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113758:	ba 00 00 00 00       	mov    $0x0,%edx
f011375d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0113763:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113769:	29 d0                	sub    %edx,%eax
f011376b:	01 c8                	add    %ecx,%eax
f011376d:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f0113773:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113779:	39 c2                	cmp    %eax,%edx
f011377b:	74 17                	je     f0113794 <test_kmalloc_worstfit+0x80e>
		panic("Worst Fit not working correctly");
f011377d:	83 ec 04             	sub    $0x4,%esp
f0113780:	68 b4 e9 11 f0       	push   $0xf011e9b4
f0113785:	68 55 04 00 00       	push   $0x455
f011378a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011378f:	e8 ff c9 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113794:	e8 c4 8e ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113799:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011379c:	74 17                	je     f01137b5 <test_kmalloc_worstfit+0x82f>
f011379e:	83 ec 04             	sub    $0x4,%esp
f01137a1:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01137a6:	68 56 04 00 00       	push   $0x456
f01137ab:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01137b0:	e8 de c9 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f01137b5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01137b8:	e8 fd 71 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01137bd:	29 c3                	sub    %eax,%ebx
f01137bf:	89 d8                	mov    %ebx,%eax
f01137c1:	3d 00 04 00 00       	cmp    $0x400,%eax
f01137c6:	74 17                	je     f01137df <test_kmalloc_worstfit+0x859>
f01137c8:	83 ec 04             	sub    $0x4,%esp
f01137cb:	68 16 e8 11 f0       	push   $0xf011e816
f01137d0:	68 57 04 00 00       	push   $0x457
f01137d5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01137da:	e8 b4 c9 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01137df:	ff 45 e8             	incl   -0x18(%ebp)
f01137e2:	83 ec 08             	sub    $0x8,%esp
f01137e5:	ff 75 e8             	pushl  -0x18(%ebp)
f01137e8:	68 d4 e9 11 f0       	push   $0xf011e9d4
f01137ed:	e8 b1 3d ff ff       	call   f01075a3 <cprintf>
f01137f2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01137f5:	e8 c0 71 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01137fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01137fd:	e8 5b 8e ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113802:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f0113805:	83 ec 0c             	sub    $0xc,%esp
f0113808:	68 00 00 60 00       	push   $0x600000
f011380d:	e8 d6 97 ff ff       	call   f010cfe8 <kmalloc>
f0113812:	83 c4 10             	add    $0x10,%esp
f0113815:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011381b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0113822:	10 00 00 
f0113825:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011382a:	0f b6 d0             	movzbl %al,%edx
f011382d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0113833:	01 d0                	add    %edx,%eax
f0113835:	48                   	dec    %eax
f0113836:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011383c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113842:	ba 00 00 00 00       	mov    $0x0,%edx
f0113847:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011384d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113853:	29 d0                	sub    %edx,%eax
f0113855:	89 c1                	mov    %eax,%ecx
f0113857:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011385e:	10 00 00 
f0113861:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113866:	0f b6 c0             	movzbl %al,%eax
f0113869:	c1 e0 04             	shl    $0x4,%eax
f011386c:	89 c2                	mov    %eax,%edx
f011386e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0113874:	01 d0                	add    %edx,%eax
f0113876:	48                   	dec    %eax
f0113877:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011387d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0113883:	ba 00 00 00 00       	mov    $0x0,%edx
f0113888:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011388e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0113894:	29 d0                	sub    %edx,%eax
f0113896:	01 c8                	add    %ecx,%eax
f0113898:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011389e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01138a4:	39 c2                	cmp    %eax,%edx
f01138a6:	74 17                	je     f01138bf <test_kmalloc_worstfit+0x939>
		panic("Worst Fit not working correctly");
f01138a8:	83 ec 04             	sub    $0x4,%esp
f01138ab:	68 b4 e9 11 f0       	push   $0xf011e9b4
f01138b0:	68 5e 04 00 00       	push   $0x45e
f01138b5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01138ba:	e8 d4 c8 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01138bf:	e8 99 8d ff ff       	call   f010c65d <pf_calculate_free_frames>
f01138c4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01138c7:	74 17                	je     f01138e0 <test_kmalloc_worstfit+0x95a>
f01138c9:	83 ec 04             	sub    $0x4,%esp
f01138cc:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01138d1:	68 5f 04 00 00       	push   $0x45f
f01138d6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01138db:	e8 b3 c8 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f01138e0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01138e3:	e8 d2 70 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01138e8:	29 c3                	sub    %eax,%ebx
f01138ea:	89 d8                	mov    %ebx,%eax
f01138ec:	3d 00 06 00 00       	cmp    $0x600,%eax
f01138f1:	74 17                	je     f011390a <test_kmalloc_worstfit+0x984>
f01138f3:	83 ec 04             	sub    $0x4,%esp
f01138f6:	68 16 e8 11 f0       	push   $0xf011e816
f01138fb:	68 60 04 00 00       	push   $0x460
f0113900:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113905:	e8 89 c8 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011390a:	ff 45 e8             	incl   -0x18(%ebp)
f011390d:	83 ec 08             	sub    $0x8,%esp
f0113910:	ff 75 e8             	pushl  -0x18(%ebp)
f0113913:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0113918:	e8 86 3c ff ff       	call   f01075a3 <cprintf>
f011391d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113920:	e8 95 70 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113925:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113928:	e8 30 8d ff ff       	call   f010c65d <pf_calculate_free_frames>
f011392d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f0113930:	83 ec 0c             	sub    $0xc,%esp
f0113933:	68 00 00 50 00       	push   $0x500000
f0113938:	e8 ab 96 ff ff       	call   f010cfe8 <kmalloc>
f011393d:	83 c4 10             	add    $0x10,%esp
f0113940:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0113946:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011394d:	10 00 00 
f0113950:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113955:	0f b6 d0             	movzbl %al,%edx
f0113958:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011395e:	01 d0                	add    %edx,%eax
f0113960:	48                   	dec    %eax
f0113961:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0113967:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011396d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113972:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0113978:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011397e:	29 d0                	sub    %edx,%eax
f0113980:	89 c1                	mov    %eax,%ecx
f0113982:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0113989:	10 00 00 
f011398c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113991:	0f b6 c0             	movzbl %al,%eax
f0113994:	c1 e0 04             	shl    $0x4,%eax
f0113997:	89 c2                	mov    %eax,%edx
f0113999:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011399f:	01 d0                	add    %edx,%eax
f01139a1:	48                   	dec    %eax
f01139a2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01139a8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01139ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01139b3:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01139b9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01139bf:	29 d0                	sub    %edx,%eax
f01139c1:	01 c8                	add    %ecx,%eax
f01139c3:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f01139c9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01139cf:	39 c2                	cmp    %eax,%edx
f01139d1:	74 17                	je     f01139ea <test_kmalloc_worstfit+0xa64>
		panic("Worst Fit not working correctly");
f01139d3:	83 ec 04             	sub    $0x4,%esp
f01139d6:	68 b4 e9 11 f0       	push   $0xf011e9b4
f01139db:	68 67 04 00 00       	push   $0x467
f01139e0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01139e5:	e8 a9 c7 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01139ea:	e8 6e 8c ff ff       	call   f010c65d <pf_calculate_free_frames>
f01139ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01139f2:	74 17                	je     f0113a0b <test_kmalloc_worstfit+0xa85>
f01139f4:	83 ec 04             	sub    $0x4,%esp
f01139f7:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01139fc:	68 68 04 00 00       	push   $0x468
f0113a01:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113a06:	e8 88 c7 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0113a0b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113a0e:	e8 a7 6f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113a13:	29 c3                	sub    %eax,%ebx
f0113a15:	89 d8                	mov    %ebx,%eax
f0113a17:	3d 00 05 00 00       	cmp    $0x500,%eax
f0113a1c:	74 17                	je     f0113a35 <test_kmalloc_worstfit+0xaaf>
f0113a1e:	83 ec 04             	sub    $0x4,%esp
f0113a21:	68 16 e8 11 f0       	push   $0xf011e816
f0113a26:	68 69 04 00 00       	push   $0x469
f0113a2b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113a30:	e8 5e c7 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113a35:	ff 45 e8             	incl   -0x18(%ebp)
f0113a38:	83 ec 08             	sub    $0x8,%esp
f0113a3b:	ff 75 e8             	pushl  -0x18(%ebp)
f0113a3e:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0113a43:	e8 5b 3b ff ff       	call   f01075a3 <cprintf>
f0113a48:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113a4b:	e8 6a 6f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113a50:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113a53:	e8 05 8c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113a58:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0113a5b:	83 ec 0c             	sub    $0xc,%esp
f0113a5e:	68 00 00 40 00       	push   $0x400000
f0113a63:	e8 80 95 ff ff       	call   f010cfe8 <kmalloc>
f0113a68:	83 c4 10             	add    $0x10,%esp
f0113a6b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f0113a71:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0113a78:	10 00 00 
f0113a7b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113a80:	0f b6 d0             	movzbl %al,%edx
f0113a83:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0113a89:	01 d0                	add    %edx,%eax
f0113a8b:	48                   	dec    %eax
f0113a8c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0113a92:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113a98:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a9d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0113aa3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0113aa9:	29 d0                	sub    %edx,%eax
f0113aab:	89 c1                	mov    %eax,%ecx
f0113aad:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0113ab4:	10 00 00 
f0113ab7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113abc:	0f b6 c0             	movzbl %al,%eax
f0113abf:	c1 e0 04             	shl    $0x4,%eax
f0113ac2:	89 c2                	mov    %eax,%edx
f0113ac4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0113aca:	01 d0                	add    %edx,%eax
f0113acc:	48                   	dec    %eax
f0113acd:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0113ad3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0113ad9:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ade:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0113ae4:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0113aea:	29 d0                	sub    %edx,%eax
f0113aec:	01 c8                	add    %ecx,%eax
f0113aee:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f0113af4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113afa:	39 c2                	cmp    %eax,%edx
f0113afc:	74 17                	je     f0113b15 <test_kmalloc_worstfit+0xb8f>
		panic("Worst Fit not working correctly");
f0113afe:	83 ec 04             	sub    $0x4,%esp
f0113b01:	68 b4 e9 11 f0       	push   $0xf011e9b4
f0113b06:	68 70 04 00 00       	push   $0x470
f0113b0b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113b10:	e8 7e c6 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113b15:	e8 43 8b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113b1a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113b1d:	74 17                	je     f0113b36 <test_kmalloc_worstfit+0xbb0>
f0113b1f:	83 ec 04             	sub    $0x4,%esp
f0113b22:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0113b27:	68 71 04 00 00       	push   $0x471
f0113b2c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113b31:	e8 5d c6 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0113b36:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113b39:	e8 7c 6e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113b3e:	29 c3                	sub    %eax,%ebx
f0113b40:	89 d8                	mov    %ebx,%eax
f0113b42:	3d 00 04 00 00       	cmp    $0x400,%eax
f0113b47:	74 17                	je     f0113b60 <test_kmalloc_worstfit+0xbda>
f0113b49:	83 ec 04             	sub    $0x4,%esp
f0113b4c:	68 16 e8 11 f0       	push   $0xf011e816
f0113b51:	68 72 04 00 00       	push   $0x472
f0113b56:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113b5b:	e8 33 c6 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113b60:	ff 45 e8             	incl   -0x18(%ebp)
f0113b63:	83 ec 08             	sub    $0x8,%esp
f0113b66:	ff 75 e8             	pushl  -0x18(%ebp)
f0113b69:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0113b6e:	e8 30 3a ff ff       	call   f01075a3 <cprintf>
f0113b73:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113b76:	e8 3f 6e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113b7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113b7e:	e8 da 8a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113b83:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f0113b86:	83 ec 0c             	sub    $0xc,%esp
f0113b89:	68 00 00 20 00       	push   $0x200000
f0113b8e:	e8 55 94 ff ff       	call   f010cfe8 <kmalloc>
f0113b93:	83 c4 10             	add    $0x10,%esp
f0113b96:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0113b9c:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0113ba3:	10 00 00 
f0113ba6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113bab:	0f b6 d0             	movzbl %al,%edx
f0113bae:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0113bb4:	01 d0                	add    %edx,%eax
f0113bb6:	48                   	dec    %eax
f0113bb7:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0113bbd:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0113bc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0113bc8:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0113bce:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0113bd4:	29 d0                	sub    %edx,%eax
f0113bd6:	89 c1                	mov    %eax,%ecx
f0113bd8:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0113bdf:	10 00 00 
f0113be2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113be7:	0f b6 c0             	movzbl %al,%eax
f0113bea:	c1 e0 04             	shl    $0x4,%eax
f0113bed:	89 c2                	mov    %eax,%edx
f0113bef:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0113bf5:	01 d0                	add    %edx,%eax
f0113bf7:	48                   	dec    %eax
f0113bf8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0113bfe:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0113c04:	ba 00 00 00 00       	mov    $0x0,%edx
f0113c09:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0113c0f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0113c15:	29 d0                	sub    %edx,%eax
f0113c17:	01 c8                	add    %ecx,%eax
f0113c19:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0113c1f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113c25:	39 c2                	cmp    %eax,%edx
f0113c27:	74 17                	je     f0113c40 <test_kmalloc_worstfit+0xcba>
		panic("Worst Fit not working correctly");
f0113c29:	83 ec 04             	sub    $0x4,%esp
f0113c2c:	68 b4 e9 11 f0       	push   $0xf011e9b4
f0113c31:	68 79 04 00 00       	push   $0x479
f0113c36:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113c3b:	e8 53 c5 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113c40:	e8 18 8a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113c45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113c48:	74 17                	je     f0113c61 <test_kmalloc_worstfit+0xcdb>
f0113c4a:	83 ec 04             	sub    $0x4,%esp
f0113c4d:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0113c52:	68 7a 04 00 00       	push   $0x47a
f0113c57:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113c5c:	e8 32 c5 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0113c61:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113c64:	e8 51 6d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113c69:	29 c3                	sub    %eax,%ebx
f0113c6b:	89 d8                	mov    %ebx,%eax
f0113c6d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113c72:	74 17                	je     f0113c8b <test_kmalloc_worstfit+0xd05>
f0113c74:	83 ec 04             	sub    $0x4,%esp
f0113c77:	68 16 e8 11 f0       	push   $0xf011e816
f0113c7c:	68 7b 04 00 00       	push   $0x47b
f0113c81:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113c86:	e8 08 c5 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113c8b:	ff 45 e8             	incl   -0x18(%ebp)
f0113c8e:	83 ec 08             	sub    $0x8,%esp
f0113c91:	ff 75 e8             	pushl  -0x18(%ebp)
f0113c94:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0113c99:	e8 05 39 ff ff       	call   f01075a3 <cprintf>
f0113c9e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113ca1:	e8 14 6d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113ca6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113ca9:	e8 af 89 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113cae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f0113cb1:	83 ec 0c             	sub    $0xc,%esp
f0113cb4:	68 00 00 18 00       	push   $0x180000
f0113cb9:	e8 2a 93 ff ff       	call   f010cfe8 <kmalloc>
f0113cbe:	83 c4 10             	add    $0x10,%esp
f0113cc1:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0113cc7:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0113cce:	10 00 00 
f0113cd1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113cd6:	0f b6 d0             	movzbl %al,%edx
f0113cd9:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0113cdf:	01 d0                	add    %edx,%eax
f0113ce1:	48                   	dec    %eax
f0113ce2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0113ce8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0113cee:	ba 00 00 00 00       	mov    $0x0,%edx
f0113cf3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0113cf9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0113cff:	29 d0                	sub    %edx,%eax
f0113d01:	89 c1                	mov    %eax,%ecx
f0113d03:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0113d0a:	10 00 00 
f0113d0d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113d12:	0f b6 c0             	movzbl %al,%eax
f0113d15:	c1 e0 04             	shl    $0x4,%eax
f0113d18:	89 c2                	mov    %eax,%edx
f0113d1a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0113d20:	01 d0                	add    %edx,%eax
f0113d22:	48                   	dec    %eax
f0113d23:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0113d29:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0113d2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0113d34:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0113d3a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0113d40:	29 d0                	sub    %edx,%eax
f0113d42:	01 c8                	add    %ecx,%eax
f0113d44:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0113d4a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113d50:	39 c2                	cmp    %eax,%edx
f0113d52:	74 17                	je     f0113d6b <test_kmalloc_worstfit+0xde5>
		panic("Worst Fit not working correctly");
f0113d54:	83 ec 04             	sub    $0x4,%esp
f0113d57:	68 b4 e9 11 f0       	push   $0xf011e9b4
f0113d5c:	68 82 04 00 00       	push   $0x482
f0113d61:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113d66:	e8 28 c4 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113d6b:	e8 ed 88 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113d70:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113d73:	74 17                	je     f0113d8c <test_kmalloc_worstfit+0xe06>
f0113d75:	83 ec 04             	sub    $0x4,%esp
f0113d78:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0113d7d:	68 83 04 00 00       	push   $0x483
f0113d82:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113d87:	e8 07 c4 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0113d8c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113d8f:	e8 26 6c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113d94:	29 c3                	sub    %eax,%ebx
f0113d96:	89 d8                	mov    %ebx,%eax
f0113d98:	3d 80 01 00 00       	cmp    $0x180,%eax
f0113d9d:	74 17                	je     f0113db6 <test_kmalloc_worstfit+0xe30>
f0113d9f:	83 ec 04             	sub    $0x4,%esp
f0113da2:	68 16 e8 11 f0       	push   $0xf011e816
f0113da7:	68 84 04 00 00       	push   $0x484
f0113dac:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113db1:	e8 dd c3 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113db6:	ff 45 e8             	incl   -0x18(%ebp)
f0113db9:	83 ec 08             	sub    $0x8,%esp
f0113dbc:	ff 75 e8             	pushl  -0x18(%ebp)
f0113dbf:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0113dc4:	e8 da 37 ff ff       	call   f01075a3 <cprintf>
f0113dc9:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113dcc:	e8 e9 6b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113dd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113dd4:	e8 84 88 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113dd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0113ddc:	83 ec 0c             	sub    $0xc,%esp
f0113ddf:	68 00 00 08 00       	push   $0x80000
f0113de4:	e8 ff 91 ff ff       	call   f010cfe8 <kmalloc>
f0113de9:	83 c4 10             	add    $0x10,%esp
f0113dec:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f0113df2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0113df9:	10 00 00 
f0113dfc:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113e01:	0f b6 d0             	movzbl %al,%edx
f0113e04:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113e0a:	01 d0                	add    %edx,%eax
f0113e0c:	48                   	dec    %eax
f0113e0d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0113e13:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0113e19:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e1e:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0113e24:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0113e2a:	29 d0                	sub    %edx,%eax
f0113e2c:	89 c1                	mov    %eax,%ecx
f0113e2e:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0113e35:	10 00 00 
f0113e38:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113e3d:	0f b6 c0             	movzbl %al,%eax
f0113e40:	c1 e0 04             	shl    $0x4,%eax
f0113e43:	89 c2                	mov    %eax,%edx
f0113e45:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0113e4b:	01 d0                	add    %edx,%eax
f0113e4d:	48                   	dec    %eax
f0113e4e:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0113e54:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113e5a:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e5f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0113e65:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113e6b:	29 d0                	sub    %edx,%eax
f0113e6d:	01 c8                	add    %ecx,%eax
f0113e6f:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f0113e75:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113e7b:	39 c2                	cmp    %eax,%edx
f0113e7d:	74 17                	je     f0113e96 <test_kmalloc_worstfit+0xf10>
		panic("Worst Fit not working correctly");
f0113e7f:	83 ec 04             	sub    $0x4,%esp
f0113e82:	68 b4 e9 11 f0       	push   $0xf011e9b4
f0113e87:	68 8b 04 00 00       	push   $0x48b
f0113e8c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113e91:	e8 fd c2 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113e96:	e8 c2 87 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113e9b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113e9e:	74 17                	je     f0113eb7 <test_kmalloc_worstfit+0xf31>
f0113ea0:	83 ec 04             	sub    $0x4,%esp
f0113ea3:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0113ea8:	68 8c 04 00 00       	push   $0x48c
f0113ead:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113eb2:	e8 dc c2 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0113eb7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113eba:	e8 fb 6a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113ebf:	29 c3                	sub    %eax,%ebx
f0113ec1:	89 d8                	mov    %ebx,%eax
f0113ec3:	3d 80 00 00 00       	cmp    $0x80,%eax
f0113ec8:	74 17                	je     f0113ee1 <test_kmalloc_worstfit+0xf5b>
f0113eca:	83 ec 04             	sub    $0x4,%esp
f0113ecd:	68 16 e8 11 f0       	push   $0xf011e816
f0113ed2:	68 8d 04 00 00       	push   $0x48d
f0113ed7:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113edc:	e8 b2 c2 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113ee1:	ff 45 e8             	incl   -0x18(%ebp)
f0113ee4:	83 ec 08             	sub    $0x8,%esp
f0113ee7:	ff 75 e8             	pushl  -0x18(%ebp)
f0113eea:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0113eef:	e8 af 36 ff ff       	call   f01075a3 <cprintf>
f0113ef4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113ef7:	e8 be 6a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113efc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113eff:	e8 59 87 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113f04:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f0113f07:	83 ec 0c             	sub    $0xc,%esp
f0113f0a:	68 00 04 00 00       	push   $0x400
f0113f0f:	e8 d4 90 ff ff       	call   f010cfe8 <kmalloc>
f0113f14:	83 c4 10             	add    $0x10,%esp
f0113f17:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f0113f1d:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0113f24:	10 00 00 
f0113f27:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113f2c:	0f b6 d0             	movzbl %al,%edx
f0113f2f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0113f35:	01 d0                	add    %edx,%eax
f0113f37:	48                   	dec    %eax
f0113f38:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0113f3e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0113f44:	ba 00 00 00 00       	mov    $0x0,%edx
f0113f49:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0113f4f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0113f55:	29 d0                	sub    %edx,%eax
f0113f57:	89 c1                	mov    %eax,%ecx
f0113f59:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0113f60:	10 00 00 
f0113f63:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0113f68:	0f b6 c0             	movzbl %al,%eax
f0113f6b:	c1 e0 04             	shl    $0x4,%eax
f0113f6e:	89 c2                	mov    %eax,%edx
f0113f70:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0113f76:	01 d0                	add    %edx,%eax
f0113f78:	48                   	dec    %eax
f0113f79:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0113f7f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0113f85:	ba 00 00 00 00       	mov    $0x0,%edx
f0113f8a:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0113f90:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0113f96:	29 d0                	sub    %edx,%eax
f0113f98:	01 c8                	add    %ecx,%eax
f0113f9a:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f0113fa0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113fa6:	39 c2                	cmp    %eax,%edx
f0113fa8:	74 17                	je     f0113fc1 <test_kmalloc_worstfit+0x103b>
		panic("Worst Fit not working correctly");
f0113faa:	83 ec 04             	sub    $0x4,%esp
f0113fad:	68 b4 e9 11 f0       	push   $0xf011e9b4
f0113fb2:	68 94 04 00 00       	push   $0x494
f0113fb7:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113fbc:	e8 d2 c1 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113fc1:	e8 97 86 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0113fc6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113fc9:	74 17                	je     f0113fe2 <test_kmalloc_worstfit+0x105c>
f0113fcb:	83 ec 04             	sub    $0x4,%esp
f0113fce:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0113fd3:	68 95 04 00 00       	push   $0x495
f0113fd8:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0113fdd:	e8 b1 c1 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0113fe2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113fe5:	e8 d0 69 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0113fea:	29 c3                	sub    %eax,%ebx
f0113fec:	89 d8                	mov    %ebx,%eax
f0113fee:	83 f8 01             	cmp    $0x1,%eax
f0113ff1:	74 17                	je     f011400a <test_kmalloc_worstfit+0x1084>
f0113ff3:	83 ec 04             	sub    $0x4,%esp
f0113ff6:	68 16 e8 11 f0       	push   $0xf011e816
f0113ffb:	68 96 04 00 00       	push   $0x496
f0114000:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114005:	e8 89 c1 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011400a:	ff 45 e8             	incl   -0x18(%ebp)
f011400d:	83 ec 08             	sub    $0x8,%esp
f0114010:	ff 75 e8             	pushl  -0x18(%ebp)
f0114013:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0114018:	e8 86 35 ff ff       	call   f01075a3 <cprintf>
f011401d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0114020:	e8 95 69 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114025:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0114028:	e8 30 86 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011402d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f0114030:	83 ec 0c             	sub    $0xc,%esp
f0114033:	68 00 f0 1f 00       	push   $0x1ff000
f0114038:	e8 ab 8f ff ff       	call   f010cfe8 <kmalloc>
f011403d:	83 c4 10             	add    $0x10,%esp
f0114040:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f0114046:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011404d:	10 00 00 
f0114050:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114055:	0f b6 d0             	movzbl %al,%edx
f0114058:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011405e:	01 d0                	add    %edx,%eax
f0114060:	48                   	dec    %eax
f0114061:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0114067:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011406d:	ba 00 00 00 00       	mov    $0x0,%edx
f0114072:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0114078:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011407e:	29 d0                	sub    %edx,%eax
f0114080:	89 c1                	mov    %eax,%ecx
f0114082:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0114089:	10 00 00 
f011408c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114091:	0f b6 c0             	movzbl %al,%eax
f0114094:	c1 e0 04             	shl    $0x4,%eax
f0114097:	89 c2                	mov    %eax,%edx
f0114099:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011409f:	01 d0                	add    %edx,%eax
f01140a1:	48                   	dec    %eax
f01140a2:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f01140a8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01140ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01140b3:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f01140b9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01140bf:	29 d0                	sub    %edx,%eax
f01140c1:	01 c8                	add    %ecx,%eax
f01140c3:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f01140c9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01140cf:	39 c2                	cmp    %eax,%edx
f01140d1:	74 17                	je     f01140ea <test_kmalloc_worstfit+0x1164>
		panic("Worst Fit not working correctly");
f01140d3:	83 ec 04             	sub    $0x4,%esp
f01140d6:	68 b4 e9 11 f0       	push   $0xf011e9b4
f01140db:	68 9d 04 00 00       	push   $0x49d
f01140e0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01140e5:	e8 a9 c0 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01140ea:	e8 6e 85 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01140ef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01140f2:	74 17                	je     f011410b <test_kmalloc_worstfit+0x1185>
f01140f4:	83 ec 04             	sub    $0x4,%esp
f01140f7:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01140fc:	68 9e 04 00 00       	push   $0x49e
f0114101:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114106:	e8 88 c0 fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011410b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011410e:	e8 a7 68 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114113:	29 c3                	sub    %eax,%ebx
f0114115:	89 d8                	mov    %ebx,%eax
f0114117:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011411c:	74 17                	je     f0114135 <test_kmalloc_worstfit+0x11af>
f011411e:	83 ec 04             	sub    $0x4,%esp
f0114121:	68 16 e8 11 f0       	push   $0xf011e816
f0114126:	68 9f 04 00 00       	push   $0x49f
f011412b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114130:	e8 5e c0 fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f0114135:	ff 45 e8             	incl   -0x18(%ebp)
f0114138:	83 ec 08             	sub    $0x8,%esp
f011413b:	ff 75 e8             	pushl  -0x18(%ebp)
f011413e:	68 d4 e9 11 f0       	push   $0xf011e9d4
f0114143:	e8 5b 34 ff ff       	call   f01075a3 <cprintf>
f0114148:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011414b:	e8 6a 68 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114150:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0114153:	e8 05 85 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114158:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011415b:	83 ec 0c             	sub    $0xc,%esp
f011415e:	68 00 00 40 00       	push   $0x400000
f0114163:	e8 80 8e ff ff       	call   f010cfe8 <kmalloc>
f0114168:	83 c4 10             	add    $0x10,%esp
f011416b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
	if((uint32)tempAddress != 0x0)
f0114171:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0114177:	85 c0                	test   %eax,%eax
f0114179:	74 17                	je     f0114192 <test_kmalloc_worstfit+0x120c>
		panic("Worst Fit not working correctly");
f011417b:	83 ec 04             	sub    $0x4,%esp
f011417e:	68 b4 e9 11 f0       	push   $0xf011e9b4
f0114183:	68 a7 04 00 00       	push   $0x4a7
f0114188:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011418d:	e8 01 c0 fe ff       	call   f0100193 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114192:	e8 c6 84 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114197:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011419a:	74 17                	je     f01141b3 <test_kmalloc_worstfit+0x122d>
f011419c:	83 ec 04             	sub    $0x4,%esp
f011419f:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01141a4:	68 a8 04 00 00       	push   $0x4a8
f01141a9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01141ae:	e8 e0 bf fe ff       	call   f0100193 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f01141b3:	e8 02 68 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01141b8:	89 c2                	mov    %eax,%edx
f01141ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01141bd:	39 c2                	cmp    %eax,%edx
f01141bf:	74 17                	je     f01141d8 <test_kmalloc_worstfit+0x1252>
f01141c1:	83 ec 04             	sub    $0x4,%esp
f01141c4:	68 16 e8 11 f0       	push   $0xf011e816
f01141c9:	68 a9 04 00 00       	push   $0x4a9
f01141ce:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01141d3:	e8 bb bf fe ff       	call   f0100193 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01141d8:	ff 45 e8             	incl   -0x18(%ebp)
f01141db:	83 ec 08             	sub    $0x8,%esp
f01141de:	ff 75 e8             	pushl  -0x18(%ebp)
f01141e1:	68 d4 e9 11 f0       	push   $0xf011e9d4
f01141e6:	e8 b8 33 ff ff       	call   f01075a3 <cprintf>
f01141eb:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f01141ee:	83 ec 0c             	sub    $0xc,%esp
f01141f1:	68 e8 e9 11 f0       	push   $0xf011e9e8
f01141f6:	e8 a8 33 ff ff       	call   f01075a3 <cprintf>
f01141fb:	83 c4 10             	add    $0x10,%esp


	return 1;
f01141fe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0114203:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0114206:	5b                   	pop    %ebx
f0114207:	5f                   	pop    %edi
f0114208:	5d                   	pop    %ebp
f0114209:	c3                   	ret    

f011420a <test_kfree>:

int test_kfree()
{
f011420a:	55                   	push   %ebp
f011420b:	89 e5                	mov    %esp,%ebp
f011420d:	57                   	push   %edi
f011420e:	53                   	push   %ebx
f011420f:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f0114215:	83 ec 0c             	sub    $0xc,%esp
f0114218:	68 28 e2 11 f0       	push   $0xf011e228
f011421d:	e8 81 33 ff ff       	call   f01075a3 <cprintf>
f0114222:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0114225:	83 ec 0c             	sub    $0xc,%esp
f0114228:	68 58 e2 11 f0       	push   $0xf011e258
f011422d:	e8 71 33 ff ff       	call   f01075a3 <cprintf>
f0114232:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0114235:	83 ec 0c             	sub    $0xc,%esp
f0114238:	68 28 e2 11 f0       	push   $0xf011e228
f011423d:	e8 61 33 ff ff       	call   f01075a3 <cprintf>
f0114242:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0114245:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0114249:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011424d:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0114253:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0114259:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0114260:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0114267:	e8 4e 67 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011426c:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011426f:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0114275:	b9 14 00 00 00       	mov    $0x14,%ecx
f011427a:	b8 00 00 00 00       	mov    $0x0,%eax
f011427f:	89 d7                	mov    %edx,%edi
f0114281:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0114283:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f0114289:	b9 14 00 00 00       	mov    $0x14,%ecx
f011428e:	b8 00 00 00 00       	mov    $0x0,%eax
f0114293:	89 d7                	mov    %edx,%edi
f0114295:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0114297:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f011429d:	b9 14 00 00 00       	mov    $0x14,%ecx
f01142a2:	b8 00 00 00 00       	mov    $0x0,%eax
f01142a7:	89 d7                	mov    %edx,%edi
f01142a9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01142ab:	e8 0a 67 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01142b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01142b3:	e8 a5 83 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01142b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01142bb:	83 ec 0c             	sub    $0xc,%esp
f01142be:	68 00 fc 1f 00       	push   $0x1ffc00
f01142c3:	e8 20 8d ff ff       	call   f010cfe8 <kmalloc>
f01142c8:	83 c4 10             	add    $0x10,%esp
f01142cb:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01142d1:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01142d7:	89 c1                	mov    %eax,%ecx
f01142d9:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01142e0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01142e5:	0f b6 d0             	movzbl %al,%edx
f01142e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01142eb:	01 d0                	add    %edx,%eax
f01142ed:	48                   	dec    %eax
f01142ee:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01142f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01142f9:	f7 75 c8             	divl   -0x38(%ebp)
f01142fc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01142ff:	29 d0                	sub    %edx,%eax
f0114301:	89 c3                	mov    %eax,%ebx
f0114303:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011430a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011430f:	0f b6 c0             	movzbl %al,%eax
f0114312:	c1 e0 04             	shl    $0x4,%eax
f0114315:	89 c2                	mov    %eax,%edx
f0114317:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011431a:	01 d0                	add    %edx,%eax
f011431c:	48                   	dec    %eax
f011431d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114320:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114323:	ba 00 00 00 00       	mov    $0x0,%edx
f0114328:	f7 75 c0             	divl   -0x40(%ebp)
f011432b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011432e:	29 d0                	sub    %edx,%eax
f0114330:	01 d8                	add    %ebx,%eax
f0114332:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0114337:	39 c1                	cmp    %eax,%ecx
f0114339:	74 17                	je     f0114352 <test_kfree+0x148>
f011433b:	83 ec 04             	sub    $0x4,%esp
f011433e:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0114343:	68 d1 04 00 00       	push   $0x4d1
f0114348:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011434d:	e8 41 be fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114352:	e8 06 83 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114357:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011435a:	74 17                	je     f0114373 <test_kfree+0x169>
f011435c:	83 ec 04             	sub    $0x4,%esp
f011435f:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114364:	68 d2 04 00 00       	push   $0x4d2
f0114369:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011436e:	e8 20 be fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114373:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114376:	e8 3f 66 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011437b:	29 c3                	sub    %eax,%ebx
f011437d:	89 d8                	mov    %ebx,%eax
f011437f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114384:	74 17                	je     f011439d <test_kfree+0x193>
f0114386:	83 ec 04             	sub    $0x4,%esp
f0114389:	68 60 e3 11 f0       	push   $0xf011e360
f011438e:	68 d3 04 00 00       	push   $0x4d3
f0114393:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114398:	e8 f6 bd fe ff       	call   f0100193 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011439d:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f01143a4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01143a7:	e8 0e 66 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01143ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01143af:	e8 a9 82 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01143b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01143b7:	83 ec 0c             	sub    $0xc,%esp
f01143ba:	68 00 fc 1f 00       	push   $0x1ffc00
f01143bf:	e8 24 8c ff ff       	call   f010cfe8 <kmalloc>
f01143c4:	83 c4 10             	add    $0x10,%esp
f01143c7:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01143cd:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01143d3:	89 c1                	mov    %eax,%ecx
f01143d5:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01143dc:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01143e1:	0f b6 d0             	movzbl %al,%edx
f01143e4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01143e7:	01 d0                	add    %edx,%eax
f01143e9:	48                   	dec    %eax
f01143ea:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01143ed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01143f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01143f5:	f7 75 b8             	divl   -0x48(%ebp)
f01143f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01143fb:	29 d0                	sub    %edx,%eax
f01143fd:	89 c3                	mov    %eax,%ebx
f01143ff:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0114406:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011440b:	0f b6 c0             	movzbl %al,%eax
f011440e:	c1 e0 04             	shl    $0x4,%eax
f0114411:	89 c2                	mov    %eax,%edx
f0114413:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114416:	01 d0                	add    %edx,%eax
f0114418:	48                   	dec    %eax
f0114419:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011441c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011441f:	ba 00 00 00 00       	mov    $0x0,%edx
f0114424:	f7 75 b0             	divl   -0x50(%ebp)
f0114427:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011442a:	29 d0                	sub    %edx,%eax
f011442c:	01 d8                	add    %ebx,%eax
f011442e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0114433:	39 c1                	cmp    %eax,%ecx
f0114435:	74 17                	je     f011444e <test_kfree+0x244>
f0114437:	83 ec 04             	sub    $0x4,%esp
f011443a:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011443f:	68 da 04 00 00       	push   $0x4da
f0114444:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114449:	e8 45 bd fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011444e:	e8 0a 82 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114453:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114456:	74 17                	je     f011446f <test_kfree+0x265>
f0114458:	83 ec 04             	sub    $0x4,%esp
f011445b:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114460:	68 db 04 00 00       	push   $0x4db
f0114465:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011446a:	e8 24 bd fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011446f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114472:	e8 43 65 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114477:	29 c3                	sub    %eax,%ebx
f0114479:	89 d8                	mov    %ebx,%eax
f011447b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114480:	74 17                	je     f0114499 <test_kfree+0x28f>
f0114482:	83 ec 04             	sub    $0x4,%esp
f0114485:	68 60 e3 11 f0       	push   $0xf011e360
f011448a:	68 dc 04 00 00       	push   $0x4dc
f011448f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114494:	e8 fa bc fe ff       	call   f0100193 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0114499:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f01144a0:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01144a3:	e8 12 65 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01144a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01144ab:	e8 ad 81 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01144b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01144b3:	83 ec 0c             	sub    $0xc,%esp
f01144b6:	68 00 08 00 00       	push   $0x800
f01144bb:	e8 28 8b ff ff       	call   f010cfe8 <kmalloc>
f01144c0:	83 c4 10             	add    $0x10,%esp
f01144c3:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01144c9:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01144cf:	89 c1                	mov    %eax,%ecx
f01144d1:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01144d8:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01144dd:	0f b6 d0             	movzbl %al,%edx
f01144e0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01144e3:	01 d0                	add    %edx,%eax
f01144e5:	48                   	dec    %eax
f01144e6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01144e9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01144ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01144f1:	f7 75 a8             	divl   -0x58(%ebp)
f01144f4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01144f7:	29 d0                	sub    %edx,%eax
f01144f9:	89 c3                	mov    %eax,%ebx
f01144fb:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0114502:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114507:	0f b6 c0             	movzbl %al,%eax
f011450a:	c1 e0 04             	shl    $0x4,%eax
f011450d:	89 c2                	mov    %eax,%edx
f011450f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114512:	01 d0                	add    %edx,%eax
f0114514:	48                   	dec    %eax
f0114515:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0114518:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011451b:	ba 00 00 00 00       	mov    $0x0,%edx
f0114520:	f7 75 a0             	divl   -0x60(%ebp)
f0114523:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114526:	29 d0                	sub    %edx,%eax
f0114528:	01 d8                	add    %ebx,%eax
f011452a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011452f:	39 c1                	cmp    %eax,%ecx
f0114531:	74 17                	je     f011454a <test_kfree+0x340>
f0114533:	83 ec 04             	sub    $0x4,%esp
f0114536:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011453b:	68 e3 04 00 00       	push   $0x4e3
f0114540:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114545:	e8 49 bc fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011454a:	e8 0e 81 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011454f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114552:	74 17                	je     f011456b <test_kfree+0x361>
f0114554:	83 ec 04             	sub    $0x4,%esp
f0114557:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011455c:	68 e4 04 00 00       	push   $0x4e4
f0114561:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114566:	e8 28 bc fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011456b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011456e:	e8 47 64 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114573:	29 c3                	sub    %eax,%ebx
f0114575:	89 d8                	mov    %ebx,%eax
f0114577:	83 f8 01             	cmp    $0x1,%eax
f011457a:	74 17                	je     f0114593 <test_kfree+0x389>
f011457c:	83 ec 04             	sub    $0x4,%esp
f011457f:	68 60 e3 11 f0       	push   $0xf011e360
f0114584:	68 e5 04 00 00       	push   $0x4e5
f0114589:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011458e:	e8 00 bc fe ff       	call   f0100193 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0114593:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f011459a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011459d:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01145a3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01145a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01145ad:	eb 0e                	jmp    f01145bd <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f01145af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01145b2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01145b5:	01 d0                	add    %edx,%eax
f01145b7:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01145ba:	ff 45 f4             	incl   -0xc(%ebp)
f01145bd:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01145c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01145c6:	7f e7                	jg     f01145af <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01145c8:	e8 ed 63 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01145cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01145d0:	e8 88 80 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01145d5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01145d8:	83 ec 0c             	sub    $0xc,%esp
f01145db:	68 00 08 00 00       	push   $0x800
f01145e0:	e8 03 8a ff ff       	call   f010cfe8 <kmalloc>
f01145e5:	83 c4 10             	add    $0x10,%esp
f01145e8:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01145ee:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01145f4:	89 c1                	mov    %eax,%ecx
f01145f6:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01145fd:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114602:	0f b6 d0             	movzbl %al,%edx
f0114605:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114608:	01 d0                	add    %edx,%eax
f011460a:	48                   	dec    %eax
f011460b:	89 45 90             	mov    %eax,-0x70(%ebp)
f011460e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114611:	ba 00 00 00 00       	mov    $0x0,%edx
f0114616:	f7 75 94             	divl   -0x6c(%ebp)
f0114619:	8b 45 90             	mov    -0x70(%ebp),%eax
f011461c:	29 d0                	sub    %edx,%eax
f011461e:	89 c3                	mov    %eax,%ebx
f0114620:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0114627:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011462c:	0f b6 c0             	movzbl %al,%eax
f011462f:	c1 e0 04             	shl    $0x4,%eax
f0114632:	89 c2                	mov    %eax,%edx
f0114634:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114637:	01 d0                	add    %edx,%eax
f0114639:	48                   	dec    %eax
f011463a:	89 45 88             	mov    %eax,-0x78(%ebp)
f011463d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114640:	ba 00 00 00 00       	mov    $0x0,%edx
f0114645:	f7 75 8c             	divl   -0x74(%ebp)
f0114648:	8b 45 88             	mov    -0x78(%ebp),%eax
f011464b:	29 d0                	sub    %edx,%eax
f011464d:	01 d8                	add    %ebx,%eax
f011464f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0114654:	39 c1                	cmp    %eax,%ecx
f0114656:	74 17                	je     f011466f <test_kfree+0x465>
f0114658:	83 ec 04             	sub    $0x4,%esp
f011465b:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0114660:	68 f1 04 00 00       	push   $0x4f1
f0114665:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011466a:	e8 24 bb fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011466f:	e8 e9 7f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114674:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114677:	74 17                	je     f0114690 <test_kfree+0x486>
f0114679:	83 ec 04             	sub    $0x4,%esp
f011467c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114681:	68 f2 04 00 00       	push   $0x4f2
f0114686:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011468b:	e8 03 bb fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114690:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114693:	e8 22 63 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114698:	29 c3                	sub    %eax,%ebx
f011469a:	89 d8                	mov    %ebx,%eax
f011469c:	83 f8 01             	cmp    $0x1,%eax
f011469f:	74 17                	je     f01146b8 <test_kfree+0x4ae>
f01146a1:	83 ec 04             	sub    $0x4,%esp
f01146a4:	68 60 e3 11 f0       	push   $0xf011e360
f01146a9:	68 f3 04 00 00       	push   $0x4f3
f01146ae:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01146b3:	e8 db ba fe ff       	call   f0100193 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01146b8:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f01146bf:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01146c2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01146c8:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01146cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01146d2:	eb 0e                	jmp    f01146e2 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f01146d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01146d7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01146da:	01 d0                	add    %edx,%eax
f01146dc:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01146df:	ff 45 f4             	incl   -0xc(%ebp)
f01146e2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01146e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01146eb:	7f e7                	jg     f01146d4 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01146ed:	e8 c8 62 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01146f2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01146f5:	e8 63 7f ff ff       	call   f010c65d <pf_calculate_free_frames>
f01146fa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01146fd:	83 ec 0c             	sub    $0xc,%esp
f0114700:	68 00 1c 00 00       	push   $0x1c00
f0114705:	e8 de 88 ff ff       	call   f010cfe8 <kmalloc>
f011470a:	83 c4 10             	add    $0x10,%esp
f011470d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114713:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0114719:	89 c1                	mov    %eax,%ecx
f011471b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0114722:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114727:	0f b6 d0             	movzbl %al,%edx
f011472a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011472d:	01 d0                	add    %edx,%eax
f011472f:	48                   	dec    %eax
f0114730:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114733:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114736:	ba 00 00 00 00       	mov    $0x0,%edx
f011473b:	f7 75 84             	divl   -0x7c(%ebp)
f011473e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114741:	29 d0                	sub    %edx,%eax
f0114743:	89 c3                	mov    %eax,%ebx
f0114745:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011474c:	10 00 00 
f011474f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114754:	0f b6 c0             	movzbl %al,%eax
f0114757:	c1 e0 04             	shl    $0x4,%eax
f011475a:	89 c2                	mov    %eax,%edx
f011475c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0114762:	01 d0                	add    %edx,%eax
f0114764:	48                   	dec    %eax
f0114765:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011476b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114771:	ba 00 00 00 00       	mov    $0x0,%edx
f0114776:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011477c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114782:	29 d0                	sub    %edx,%eax
f0114784:	01 d8                	add    %ebx,%eax
f0114786:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011478b:	39 c1                	cmp    %eax,%ecx
f011478d:	74 17                	je     f01147a6 <test_kfree+0x59c>
f011478f:	83 ec 04             	sub    $0x4,%esp
f0114792:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0114797:	68 ff 04 00 00       	push   $0x4ff
f011479c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01147a1:	e8 ed b9 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01147a6:	e8 b2 7e ff ff       	call   f010c65d <pf_calculate_free_frames>
f01147ab:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01147ae:	74 17                	je     f01147c7 <test_kfree+0x5bd>
f01147b0:	83 ec 04             	sub    $0x4,%esp
f01147b3:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01147b8:	68 00 05 00 00       	push   $0x500
f01147bd:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01147c2:	e8 cc b9 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01147c7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01147ca:	e8 eb 61 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01147cf:	29 c3                	sub    %eax,%ebx
f01147d1:	89 d8                	mov    %ebx,%eax
f01147d3:	83 f8 02             	cmp    $0x2,%eax
f01147d6:	74 17                	je     f01147ef <test_kfree+0x5e5>
f01147d8:	83 ec 04             	sub    $0x4,%esp
f01147db:	68 60 e3 11 f0       	push   $0xf011e360
f01147e0:	68 01 05 00 00       	push   $0x501
f01147e5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01147ea:	e8 a4 b9 fe ff       	call   f0100193 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01147ef:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f01147f6:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01147f9:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01147ff:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0114802:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114809:	eb 0e                	jmp    f0114819 <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f011480b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011480e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114811:	01 d0                	add    %edx,%eax
f0114813:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0114816:	ff 45 f4             	incl   -0xc(%ebp)
f0114819:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011481f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114822:	7f e7                	jg     f011480b <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0114824:	e8 91 61 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114829:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011482c:	e8 2c 7e ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114831:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0114834:	83 ec 0c             	sub    $0xc,%esp
f0114837:	68 00 fc 2f 00       	push   $0x2ffc00
f011483c:	e8 a7 87 ff ff       	call   f010cfe8 <kmalloc>
f0114841:	83 c4 10             	add    $0x10,%esp
f0114844:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011484a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0114850:	89 c1                	mov    %eax,%ecx
f0114852:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0114859:	10 00 00 
f011485c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114861:	0f b6 d0             	movzbl %al,%edx
f0114864:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011486a:	01 d0                	add    %edx,%eax
f011486c:	48                   	dec    %eax
f011486d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0114873:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114879:	ba 00 00 00 00       	mov    $0x0,%edx
f011487e:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0114884:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011488a:	29 d0                	sub    %edx,%eax
f011488c:	89 c3                	mov    %eax,%ebx
f011488e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0114895:	10 00 00 
f0114898:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011489d:	0f b6 c0             	movzbl %al,%eax
f01148a0:	c1 e0 04             	shl    $0x4,%eax
f01148a3:	89 c2                	mov    %eax,%edx
f01148a5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01148ab:	01 d0                	add    %edx,%eax
f01148ad:	48                   	dec    %eax
f01148ae:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01148b4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01148ba:	ba 00 00 00 00       	mov    $0x0,%edx
f01148bf:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01148c5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01148cb:	29 d0                	sub    %edx,%eax
f01148cd:	01 d8                	add    %ebx,%eax
f01148cf:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01148d4:	39 c1                	cmp    %eax,%ecx
f01148d6:	74 17                	je     f01148ef <test_kfree+0x6e5>
f01148d8:	83 ec 04             	sub    $0x4,%esp
f01148db:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01148e0:	68 0d 05 00 00       	push   $0x50d
f01148e5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01148ea:	e8 a4 b8 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01148ef:	e8 69 7d ff ff       	call   f010c65d <pf_calculate_free_frames>
f01148f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01148f7:	74 17                	je     f0114910 <test_kfree+0x706>
f01148f9:	83 ec 04             	sub    $0x4,%esp
f01148fc:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114901:	68 0e 05 00 00       	push   $0x50e
f0114906:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011490b:	e8 83 b8 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114910:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114913:	e8 a2 60 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114918:	29 c3                	sub    %eax,%ebx
f011491a:	89 d8                	mov    %ebx,%eax
f011491c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0114921:	74 17                	je     f011493a <test_kfree+0x730>
f0114923:	83 ec 04             	sub    $0x4,%esp
f0114926:	68 60 e3 11 f0       	push   $0xf011e360
f011492b:	68 0f 05 00 00       	push   $0x50f
f0114930:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114935:	e8 59 b8 fe ff       	call   f0100193 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011493a:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0114941:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0114944:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011494a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011494d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114954:	eb 0e                	jmp    f0114964 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f0114956:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114959:	8b 45 98             	mov    -0x68(%ebp),%eax
f011495c:	01 d0                	add    %edx,%eax
f011495e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0114961:	ff 45 f4             	incl   -0xc(%ebp)
f0114964:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011496a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011496d:	7f e7                	jg     f0114956 <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011496f:	e8 46 60 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114974:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114977:	e8 e1 7c ff ff       	call   f010c65d <pf_calculate_free_frames>
f011497c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011497f:	83 ec 0c             	sub    $0xc,%esp
f0114982:	68 00 fc 5f 00       	push   $0x5ffc00
f0114987:	e8 5c 86 ff ff       	call   f010cfe8 <kmalloc>
f011498c:	83 c4 10             	add    $0x10,%esp
f011498f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114995:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011499b:	89 c1                	mov    %eax,%ecx
f011499d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01149a4:	10 00 00 
f01149a7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01149ac:	0f b6 d0             	movzbl %al,%edx
f01149af:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01149b5:	01 d0                	add    %edx,%eax
f01149b7:	48                   	dec    %eax
f01149b8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01149be:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01149c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01149c9:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01149cf:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01149d5:	29 d0                	sub    %edx,%eax
f01149d7:	89 c3                	mov    %eax,%ebx
f01149d9:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01149e0:	10 00 00 
f01149e3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01149e8:	0f b6 c0             	movzbl %al,%eax
f01149eb:	c1 e0 04             	shl    $0x4,%eax
f01149ee:	89 c2                	mov    %eax,%edx
f01149f0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01149f6:	01 d0                	add    %edx,%eax
f01149f8:	48                   	dec    %eax
f01149f9:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01149ff:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114a05:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a0a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0114a10:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114a16:	29 d0                	sub    %edx,%eax
f0114a18:	01 d8                	add    %ebx,%eax
f0114a1a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0114a1f:	39 c1                	cmp    %eax,%ecx
f0114a21:	74 17                	je     f0114a3a <test_kfree+0x830>
f0114a23:	83 ec 04             	sub    $0x4,%esp
f0114a26:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0114a2b:	68 1b 05 00 00       	push   $0x51b
f0114a30:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114a35:	e8 59 b7 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114a3a:	e8 1e 7c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114a3f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114a42:	74 17                	je     f0114a5b <test_kfree+0x851>
f0114a44:	83 ec 04             	sub    $0x4,%esp
f0114a47:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114a4c:	68 1c 05 00 00       	push   $0x51c
f0114a51:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114a56:	e8 38 b7 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114a5b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114a5e:	e8 57 5f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114a63:	29 c3                	sub    %eax,%ebx
f0114a65:	89 d8                	mov    %ebx,%eax
f0114a67:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114a6c:	74 17                	je     f0114a85 <test_kfree+0x87b>
f0114a6e:	83 ec 04             	sub    $0x4,%esp
f0114a71:	68 60 e3 11 f0       	push   $0xf011e360
f0114a76:	68 1d 05 00 00       	push   $0x51d
f0114a7b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114a80:	e8 0e b7 fe ff       	call   f0100193 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0114a85:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f0114a8c:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0114a8f:	e8 26 5f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114a94:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114a97:	e8 c1 7b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114a9c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0114a9f:	83 ec 0c             	sub    $0xc,%esp
f0114aa2:	68 00 38 00 00       	push   $0x3800
f0114aa7:	e8 3c 85 ff ff       	call   f010cfe8 <kmalloc>
f0114aac:	83 c4 10             	add    $0x10,%esp
f0114aaf:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114ab5:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0114abb:	89 c1                	mov    %eax,%ecx
f0114abd:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0114ac4:	10 00 00 
f0114ac7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114acc:	0f b6 d0             	movzbl %al,%edx
f0114acf:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0114ad5:	01 d0                	add    %edx,%eax
f0114ad7:	48                   	dec    %eax
f0114ad8:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0114ade:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114ae4:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ae9:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0114aef:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114af5:	29 d0                	sub    %edx,%eax
f0114af7:	89 c3                	mov    %eax,%ebx
f0114af9:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0114b00:	10 00 00 
f0114b03:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114b08:	0f b6 c0             	movzbl %al,%eax
f0114b0b:	c1 e0 04             	shl    $0x4,%eax
f0114b0e:	89 c2                	mov    %eax,%edx
f0114b10:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0114b16:	01 d0                	add    %edx,%eax
f0114b18:	48                   	dec    %eax
f0114b19:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0114b1f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114b25:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b2a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0114b30:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114b36:	29 d0                	sub    %edx,%eax
f0114b38:	01 d8                	add    %ebx,%eax
f0114b3a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0114b3f:	39 c1                	cmp    %eax,%ecx
f0114b41:	74 17                	je     f0114b5a <test_kfree+0x950>
f0114b43:	83 ec 04             	sub    $0x4,%esp
f0114b46:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0114b4b:	68 24 05 00 00       	push   $0x524
f0114b50:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114b55:	e8 39 b6 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114b5a:	e8 fe 7a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114b5f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114b62:	74 17                	je     f0114b7b <test_kfree+0x971>
f0114b64:	83 ec 04             	sub    $0x4,%esp
f0114b67:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114b6c:	68 25 05 00 00       	push   $0x525
f0114b71:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114b76:	e8 18 b6 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114b7b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114b7e:	e8 37 5e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114b83:	29 c3                	sub    %eax,%ebx
f0114b85:	89 d8                	mov    %ebx,%eax
f0114b87:	83 f8 04             	cmp    $0x4,%eax
f0114b8a:	74 17                	je     f0114ba3 <test_kfree+0x999>
f0114b8c:	83 ec 04             	sub    $0x4,%esp
f0114b8f:	68 60 e3 11 f0       	push   $0xf011e360
f0114b94:	68 26 05 00 00       	push   $0x526
f0114b99:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114b9e:	e8 f0 b5 fe ff       	call   f0100193 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0114ba3:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f0114baa:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0114bad:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0114bb3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0114bb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114bbd:	eb 0e                	jmp    f0114bcd <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f0114bbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114bc2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114bc5:	01 d0                	add    %edx,%eax
f0114bc7:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0114bca:	ff 45 f4             	incl   -0xc(%ebp)
f0114bcd:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0114bd3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114bd6:	7f e7                	jg     f0114bbf <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0114bd8:	e8 dd 5d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114bdd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0114be3:	e8 75 7a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114be8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0114bee:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0114bf4:	83 ec 0c             	sub    $0xc,%esp
f0114bf7:	50                   	push   %eax
f0114bf8:	e8 05 84 ff ff       	call   f010d002 <kfree>
f0114bfd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114c00:	e8 58 7a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114c05:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0114c0b:	74 17                	je     f0114c24 <test_kfree+0xa1a>
f0114c0d:	83 ec 04             	sub    $0x4,%esp
f0114c10:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114c15:	68 35 05 00 00       	push   $0x535
f0114c1a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114c1f:	e8 6f b5 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0114c24:	e8 91 5d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114c29:	89 c2                	mov    %eax,%edx
f0114c2b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114c31:	29 c2                	sub    %eax,%edx
f0114c33:	89 d0                	mov    %edx,%eax
f0114c35:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114c3a:	74 17                	je     f0114c53 <test_kfree+0xa49>
f0114c3c:	83 ec 04             	sub    $0x4,%esp
f0114c3f:	68 24 ea 11 f0       	push   $0xf011ea24
f0114c44:	68 36 05 00 00       	push   $0x536
f0114c49:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114c4e:	e8 40 b5 fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114c53:	e8 62 5d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114c58:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114c5e:	e8 fa 79 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114c63:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0114c69:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0114c6f:	83 ec 0c             	sub    $0xc,%esp
f0114c72:	50                   	push   %eax
f0114c73:	e8 8a 83 ff ff       	call   f010d002 <kfree>
f0114c78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114c7b:	e8 dd 79 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114c80:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0114c86:	74 17                	je     f0114c9f <test_kfree+0xa95>
f0114c88:	83 ec 04             	sub    $0x4,%esp
f0114c8b:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114c90:	68 3c 05 00 00       	push   $0x53c
f0114c95:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114c9a:	e8 f4 b4 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0114c9f:	e8 16 5d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114ca4:	89 c2                	mov    %eax,%edx
f0114ca6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114cac:	29 c2                	sub    %eax,%edx
f0114cae:	89 d0                	mov    %edx,%eax
f0114cb0:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114cb5:	74 17                	je     f0114cce <test_kfree+0xac4>
f0114cb7:	83 ec 04             	sub    $0x4,%esp
f0114cba:	68 24 ea 11 f0       	push   $0xf011ea24
f0114cbf:	68 3d 05 00 00       	push   $0x53d
f0114cc4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114cc9:	e8 c5 b4 fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114cce:	e8 e7 5c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114cd3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114cd9:	e8 7f 79 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114cde:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0114ce4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0114cea:	83 ec 0c             	sub    $0xc,%esp
f0114ced:	50                   	push   %eax
f0114cee:	e8 0f 83 ff ff       	call   f010d002 <kfree>
f0114cf3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114cf6:	e8 62 79 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114cfb:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0114d01:	74 17                	je     f0114d1a <test_kfree+0xb10>
f0114d03:	83 ec 04             	sub    $0x4,%esp
f0114d06:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0114d0b:	68 43 05 00 00       	push   $0x543
f0114d10:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114d15:	e8 79 b4 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0114d1a:	e8 9b 5c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114d1f:	89 c2                	mov    %eax,%edx
f0114d21:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114d27:	29 c2                	sub    %eax,%edx
f0114d29:	89 d0                	mov    %edx,%eax
f0114d2b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114d30:	74 17                	je     f0114d49 <test_kfree+0xb3f>
f0114d32:	83 ec 04             	sub    $0x4,%esp
f0114d35:	68 24 ea 11 f0       	push   $0xf011ea24
f0114d3a:	68 44 05 00 00       	push   $0x544
f0114d3f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114d44:	e8 4a b4 fe ff       	call   f0100193 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0114d49:	83 ec 0c             	sub    $0xc,%esp
f0114d4c:	68 5c ea 11 f0       	push   $0xf011ea5c
f0114d51:	e8 4d 28 ff ff       	call   f01075a3 <cprintf>
f0114d56:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0114d59:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0114d5f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0114d62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114d69:	eb 1e                	jmp    f0114d89 <test_kfree+0xb7f>
		{
			sums[2] += ptr[i] ;
f0114d6b:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0114d71:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114d74:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114d77:	01 c8                	add    %ecx,%eax
f0114d79:	8a 00                	mov    (%eax),%al
f0114d7b:	0f be c0             	movsbl %al,%eax
f0114d7e:	01 d0                	add    %edx,%eax
f0114d80:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0114d86:	ff 45 f4             	incl   -0xc(%ebp)
f0114d89:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0114d8f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114d92:	7f d7                	jg     f0114d6b <test_kfree+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0114d94:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0114d9a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0114da0:	01 c0                	add    %eax,%eax
f0114da2:	39 c2                	cmp    %eax,%edx
f0114da4:	74 17                	je     f0114dbd <test_kfree+0xbb3>
f0114da6:	83 ec 04             	sub    $0x4,%esp
f0114da9:	68 80 ea 11 f0       	push   $0xf011ea80
f0114dae:	68 51 05 00 00       	push   $0x551
f0114db3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114db8:	e8 d6 b3 fe ff       	call   f0100193 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0114dbd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0114dc3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0114dc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114dcd:	eb 1e                	jmp    f0114ded <test_kfree+0xbe3>
		{
			sums[3] += ptr[i] ;
f0114dcf:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0114dd5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114dd8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114ddb:	01 c8                	add    %ecx,%eax
f0114ddd:	8a 00                	mov    (%eax),%al
f0114ddf:	0f be c0             	movsbl %al,%eax
f0114de2:	01 d0                	add    %edx,%eax
f0114de4:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0114dea:	ff 45 f4             	incl   -0xc(%ebp)
f0114ded:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114df3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114df6:	7f d7                	jg     f0114dcf <test_kfree+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0114df8:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0114dfe:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114e04:	89 c1                	mov    %eax,%ecx
f0114e06:	01 c9                	add    %ecx,%ecx
f0114e08:	01 c8                	add    %ecx,%eax
f0114e0a:	39 c2                	cmp    %eax,%edx
f0114e0c:	74 17                	je     f0114e25 <test_kfree+0xc1b>
f0114e0e:	83 ec 04             	sub    $0x4,%esp
f0114e11:	68 80 ea 11 f0       	push   $0xf011ea80
f0114e16:	68 59 05 00 00       	push   $0x559
f0114e1b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114e20:	e8 6e b3 fe ff       	call   f0100193 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0114e25:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0114e2b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0114e2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114e35:	eb 1e                	jmp    f0114e55 <test_kfree+0xc4b>
		{
			sums[4] += ptr[i] ;
f0114e37:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0114e3d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114e40:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114e43:	01 c8                	add    %ecx,%eax
f0114e45:	8a 00                	mov    (%eax),%al
f0114e47:	0f be c0             	movsbl %al,%eax
f0114e4a:	01 d0                	add    %edx,%eax
f0114e4c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0114e52:	ff 45 f4             	incl   -0xc(%ebp)
f0114e55:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0114e5b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114e5e:	7f d7                	jg     f0114e37 <test_kfree+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0114e60:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0114e66:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0114e6c:	c1 e2 02             	shl    $0x2,%edx
f0114e6f:	39 d0                	cmp    %edx,%eax
f0114e71:	74 17                	je     f0114e8a <test_kfree+0xc80>
f0114e73:	83 ec 04             	sub    $0x4,%esp
f0114e76:	68 80 ea 11 f0       	push   $0xf011ea80
f0114e7b:	68 61 05 00 00       	push   $0x561
f0114e80:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114e85:	e8 09 b3 fe ff       	call   f0100193 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0114e8a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0114e90:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0114e93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114e9a:	eb 1e                	jmp    f0114eba <test_kfree+0xcb0>
		{
			sums[5] += ptr[i] ;
f0114e9c:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0114ea2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114ea5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114ea8:	01 c8                	add    %ecx,%eax
f0114eaa:	8a 00                	mov    (%eax),%al
f0114eac:	0f be c0             	movsbl %al,%eax
f0114eaf:	01 d0                	add    %edx,%eax
f0114eb1:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0114eb7:	ff 45 f4             	incl   -0xc(%ebp)
f0114eba:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0114ec0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114ec3:	7f d7                	jg     f0114e9c <test_kfree+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0114ec5:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0114ecb:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f0114ed1:	89 d0                	mov    %edx,%eax
f0114ed3:	c1 e0 02             	shl    $0x2,%eax
f0114ed6:	01 d0                	add    %edx,%eax
f0114ed8:	39 c1                	cmp    %eax,%ecx
f0114eda:	74 17                	je     f0114ef3 <test_kfree+0xce9>
f0114edc:	83 ec 04             	sub    $0x4,%esp
f0114edf:	68 80 ea 11 f0       	push   $0xf011ea80
f0114ee4:	68 69 05 00 00       	push   $0x569
f0114ee9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114eee:	e8 a0 b2 fe ff       	call   f0100193 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0114ef3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0114ef9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0114efc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114f03:	eb 1e                	jmp    f0114f23 <test_kfree+0xd19>
		{
			sums[7] += ptr[i] ;
f0114f05:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0114f0b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114f0e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114f11:	01 c8                	add    %ecx,%eax
f0114f13:	8a 00                	mov    (%eax),%al
f0114f15:	0f be c0             	movsbl %al,%eax
f0114f18:	01 d0                	add    %edx,%eax
f0114f1a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0114f20:	ff 45 f4             	incl   -0xc(%ebp)
f0114f23:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0114f29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114f2c:	7f d7                	jg     f0114f05 <test_kfree+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0114f2e:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0114f34:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0114f3a:	89 d0                	mov    %edx,%eax
f0114f3c:	01 c0                	add    %eax,%eax
f0114f3e:	01 d0                	add    %edx,%eax
f0114f40:	01 c0                	add    %eax,%eax
f0114f42:	01 d0                	add    %edx,%eax
f0114f44:	39 c1                	cmp    %eax,%ecx
f0114f46:	74 17                	je     f0114f5f <test_kfree+0xd55>
f0114f48:	83 ec 04             	sub    $0x4,%esp
f0114f4b:	68 80 ea 11 f0       	push   $0xf011ea80
f0114f50:	68 71 05 00 00       	push   $0x571
f0114f55:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0114f5a:	e8 34 b2 fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b30%");
f0114f5f:	83 ec 0c             	sub    $0xc,%esp
f0114f62:	68 b3 ea 11 f0       	push   $0xf011eab3
f0114f67:	e8 37 26 ff ff       	call   f01075a3 <cprintf>
f0114f6c:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0114f6f:	e8 46 5a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0114f74:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114f77:	e8 e1 76 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0114f7c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0114f7f:	83 ec 0c             	sub    $0xc,%esp
f0114f82:	68 00 50 00 00       	push   $0x5000
f0114f87:	e8 5c 80 ff ff       	call   f010cfe8 <kmalloc>
f0114f8c:	83 c4 10             	add    $0x10,%esp
f0114f8f:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114f95:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0114f9b:	89 c1                	mov    %eax,%ecx
f0114f9d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0114fa4:	10 00 00 
f0114fa7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114fac:	0f b6 d0             	movzbl %al,%edx
f0114faf:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0114fb5:	01 d0                	add    %edx,%eax
f0114fb7:	48                   	dec    %eax
f0114fb8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0114fbe:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114fc4:	ba 00 00 00 00       	mov    $0x0,%edx
f0114fc9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0114fcf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0114fd5:	29 d0                	sub    %edx,%eax
f0114fd7:	89 c3                	mov    %eax,%ebx
f0114fd9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0114fe0:	10 00 00 
f0114fe3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0114fe8:	0f b6 c0             	movzbl %al,%eax
f0114feb:	c1 e0 04             	shl    $0x4,%eax
f0114fee:	89 c2                	mov    %eax,%edx
f0114ff0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0114ff6:	01 d0                	add    %edx,%eax
f0114ff8:	48                   	dec    %eax
f0114ff9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0114fff:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0115005:	ba 00 00 00 00       	mov    $0x0,%edx
f011500a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0115010:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0115016:	29 d0                	sub    %edx,%eax
f0115018:	01 d8                	add    %ebx,%eax
f011501a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011501f:	39 c1                	cmp    %eax,%ecx
f0115021:	74 17                	je     f011503a <test_kfree+0xe30>
f0115023:	83 ec 04             	sub    $0x4,%esp
f0115026:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011502b:	68 7b 05 00 00       	push   $0x57b
f0115030:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115035:	e8 59 b1 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011503a:	e8 1e 76 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011503f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115042:	74 17                	je     f011505b <test_kfree+0xe51>
f0115044:	83 ec 04             	sub    $0x4,%esp
f0115047:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011504c:	68 7c 05 00 00       	push   $0x57c
f0115051:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115056:	e8 38 b1 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f011505b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011505e:	e8 57 59 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115063:	29 c3                	sub    %eax,%ebx
f0115065:	89 d8                	mov    %ebx,%eax
f0115067:	83 f8 05             	cmp    $0x5,%eax
f011506a:	74 17                	je     f0115083 <test_kfree+0xe79>
f011506c:	83 ec 04             	sub    $0x4,%esp
f011506f:	68 60 e3 11 f0       	push   $0xf011e360
f0115074:	68 7d 05 00 00       	push   $0x57d
f0115079:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011507e:	e8 10 b1 fe ff       	call   f0100193 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0115083:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f011508a:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f011508d:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0115093:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0115096:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011509d:	eb 0e                	jmp    f01150ad <test_kfree+0xea3>
		{
			ptr[i] = 8 ;
f011509f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01150a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01150a5:	01 d0                	add    %edx,%eax
f01150a7:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01150aa:	ff 45 f4             	incl   -0xc(%ebp)
f01150ad:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01150b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01150b6:	7f e7                	jg     f011509f <test_kfree+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01150b8:	e8 fd 58 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01150bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01150c0:	e8 98 75 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01150c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01150c8:	83 ec 0c             	sub    $0xc,%esp
f01150cb:	68 00 00 10 00       	push   $0x100000
f01150d0:	e8 13 7f ff ff       	call   f010cfe8 <kmalloc>
f01150d5:	83 c4 10             	add    $0x10,%esp
f01150d8:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01150de:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01150e4:	89 c1                	mov    %eax,%ecx
f01150e6:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01150ed:	10 00 00 
f01150f0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01150f5:	0f b6 d0             	movzbl %al,%edx
f01150f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01150fe:	01 d0                	add    %edx,%eax
f0115100:	48                   	dec    %eax
f0115101:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0115107:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011510d:	ba 00 00 00 00       	mov    $0x0,%edx
f0115112:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0115118:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011511e:	29 d0                	sub    %edx,%eax
f0115120:	89 c3                	mov    %eax,%ebx
f0115122:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0115129:	10 00 00 
f011512c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115131:	0f b6 c0             	movzbl %al,%eax
f0115134:	c1 e0 04             	shl    $0x4,%eax
f0115137:	89 c2                	mov    %eax,%edx
f0115139:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011513f:	01 d0                	add    %edx,%eax
f0115141:	48                   	dec    %eax
f0115142:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0115148:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011514e:	ba 00 00 00 00       	mov    $0x0,%edx
f0115153:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0115159:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011515f:	29 d0                	sub    %edx,%eax
f0115161:	01 d8                	add    %ebx,%eax
f0115163:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0115168:	39 c1                	cmp    %eax,%ecx
f011516a:	74 17                	je     f0115183 <test_kfree+0xf79>
f011516c:	83 ec 04             	sub    $0x4,%esp
f011516f:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0115174:	68 89 05 00 00       	push   $0x589
f0115179:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011517e:	e8 10 b0 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115183:	e8 d5 74 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115188:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011518b:	74 17                	je     f01151a4 <test_kfree+0xf9a>
f011518d:	83 ec 04             	sub    $0x4,%esp
f0115190:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115195:	68 8a 05 00 00       	push   $0x58a
f011519a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011519f:	e8 ef af fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01151a4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01151a7:	e8 0e 58 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01151ac:	29 c3                	sub    %eax,%ebx
f01151ae:	89 d8                	mov    %ebx,%eax
f01151b0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01151b5:	74 17                	je     f01151ce <test_kfree+0xfc4>
f01151b7:	83 ec 04             	sub    $0x4,%esp
f01151ba:	68 60 e3 11 f0       	push   $0xf011e360
f01151bf:	68 8b 05 00 00       	push   $0x58b
f01151c4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01151c9:	e8 c5 af fe ff       	call   f0100193 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01151ce:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f01151d5:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01151d8:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01151de:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01151e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01151e8:	eb 0e                	jmp    f01151f8 <test_kfree+0xfee>
		{
			ptr[i] = 9 ;
f01151ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01151ed:	8b 45 98             	mov    -0x68(%ebp),%eax
f01151f0:	01 d0                	add    %edx,%eax
f01151f2:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01151f5:	ff 45 f4             	incl   -0xc(%ebp)
f01151f8:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01151fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115201:	7f e7                	jg     f01151ea <test_kfree+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0115203:	83 ec 0c             	sub    $0xc,%esp
f0115206:	68 ba ea 11 f0       	push   $0xf011eaba
f011520b:	e8 93 23 ff ff       	call   f01075a3 <cprintf>
f0115210:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0115213:	e8 a2 57 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115218:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011521b:	e8 3d 74 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115220:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0115223:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0115229:	83 ec 0c             	sub    $0xc,%esp
f011522c:	50                   	push   %eax
f011522d:	e8 d0 7d ff ff       	call   f010d002 <kfree>
f0115232:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115235:	e8 23 74 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011523a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011523d:	74 17                	je     f0115256 <test_kfree+0x104c>
f011523f:	83 ec 04             	sub    $0x4,%esp
f0115242:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115247:	68 9b 05 00 00       	push   $0x59b
f011524c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115251:	e8 3d af fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0115256:	e8 5f 57 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011525b:	89 c2                	mov    %eax,%edx
f011525d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115260:	29 c2                	sub    %eax,%edx
f0115262:	89 d0                	mov    %edx,%eax
f0115264:	83 f8 02             	cmp    $0x2,%eax
f0115267:	74 17                	je     f0115280 <test_kfree+0x1076>
f0115269:	83 ec 04             	sub    $0x4,%esp
f011526c:	68 24 ea 11 f0       	push   $0xf011ea24
f0115271:	68 9c 05 00 00       	push   $0x59c
f0115276:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011527b:	e8 13 af fe ff       	call   f0100193 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0115280:	e8 35 57 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115285:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115288:	e8 d0 73 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011528d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0115290:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0115296:	83 ec 0c             	sub    $0xc,%esp
f0115299:	50                   	push   %eax
f011529a:	e8 63 7d ff ff       	call   f010d002 <kfree>
f011529f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01152a2:	e8 b6 73 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01152a7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01152aa:	74 17                	je     f01152c3 <test_kfree+0x10b9>
f01152ac:	83 ec 04             	sub    $0x4,%esp
f01152af:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01152b4:	68 a2 05 00 00       	push   $0x5a2
f01152b9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01152be:	e8 d0 ae fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01152c3:	e8 f2 56 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01152c8:	89 c2                	mov    %eax,%edx
f01152ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01152cd:	29 c2                	sub    %eax,%edx
f01152cf:	89 d0                	mov    %edx,%eax
f01152d1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01152d6:	74 17                	je     f01152ef <test_kfree+0x10e5>
f01152d8:	83 ec 04             	sub    $0x4,%esp
f01152db:	68 24 ea 11 f0       	push   $0xf011ea24
f01152e0:	68 a3 05 00 00       	push   $0x5a3
f01152e5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01152ea:	e8 a4 ae fe ff       	call   f0100193 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01152ef:	e8 c6 56 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01152f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01152f7:	e8 61 73 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01152fc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01152ff:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115305:	83 ec 0c             	sub    $0xc,%esp
f0115308:	50                   	push   %eax
f0115309:	e8 f4 7c ff ff       	call   f010d002 <kfree>
f011530e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115311:	e8 47 73 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115316:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115319:	74 17                	je     f0115332 <test_kfree+0x1128>
f011531b:	83 ec 04             	sub    $0x4,%esp
f011531e:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115323:	68 a9 05 00 00       	push   $0x5a9
f0115328:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011532d:	e8 61 ae fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0115332:	e8 83 56 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115337:	89 c2                	mov    %eax,%edx
f0115339:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011533c:	29 c2                	sub    %eax,%edx
f011533e:	89 d0                	mov    %edx,%eax
f0115340:	83 f8 01             	cmp    $0x1,%eax
f0115343:	74 17                	je     f011535c <test_kfree+0x1152>
f0115345:	83 ec 04             	sub    $0x4,%esp
f0115348:	68 24 ea 11 f0       	push   $0xf011ea24
f011534d:	68 aa 05 00 00       	push   $0x5aa
f0115352:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115357:	e8 37 ae fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011535c:	e8 59 56 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115361:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115364:	e8 f4 72 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115369:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f011536c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0115372:	83 ec 0c             	sub    $0xc,%esp
f0115375:	50                   	push   %eax
f0115376:	e8 87 7c ff ff       	call   f010d002 <kfree>
f011537b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011537e:	e8 da 72 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115383:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115386:	74 17                	je     f011539f <test_kfree+0x1195>
f0115388:	83 ec 04             	sub    $0x4,%esp
f011538b:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115390:	68 b0 05 00 00       	push   $0x5b0
f0115395:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011539a:	e8 f4 ad fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011539f:	e8 16 56 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01153a4:	89 c2                	mov    %eax,%edx
f01153a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01153a9:	29 c2                	sub    %eax,%edx
f01153ab:	89 d0                	mov    %edx,%eax
f01153ad:	83 f8 01             	cmp    $0x1,%eax
f01153b0:	74 17                	je     f01153c9 <test_kfree+0x11bf>
f01153b2:	83 ec 04             	sub    $0x4,%esp
f01153b5:	68 24 ea 11 f0       	push   $0xf011ea24
f01153ba:	68 b1 05 00 00       	push   $0x5b1
f01153bf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01153c4:	e8 ca ad fe ff       	call   f0100193 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01153c9:	e8 ec 55 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01153ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01153d1:	e8 87 72 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01153d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01153d9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01153df:	83 ec 0c             	sub    $0xc,%esp
f01153e2:	50                   	push   %eax
f01153e3:	e8 1a 7c ff ff       	call   f010d002 <kfree>
f01153e8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01153eb:	e8 6d 72 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01153f0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01153f3:	74 17                	je     f011540c <test_kfree+0x1202>
f01153f5:	83 ec 04             	sub    $0x4,%esp
f01153f8:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01153fd:	68 b7 05 00 00       	push   $0x5b7
f0115402:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115407:	e8 87 ad fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f011540c:	e8 a9 55 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115411:	89 c2                	mov    %eax,%edx
f0115413:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115416:	29 c2                	sub    %eax,%edx
f0115418:	89 d0                	mov    %edx,%eax
f011541a:	83 f8 04             	cmp    $0x4,%eax
f011541d:	74 17                	je     f0115436 <test_kfree+0x122c>
f011541f:	83 ec 04             	sub    $0x4,%esp
f0115422:	68 24 ea 11 f0       	push   $0xf011ea24
f0115427:	68 b8 05 00 00       	push   $0x5b8
f011542c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115431:	e8 5d ad fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0115436:	e8 7f 55 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011543b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011543e:	e8 1a 72 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115443:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0115446:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011544c:	83 ec 0c             	sub    $0xc,%esp
f011544f:	50                   	push   %eax
f0115450:	e8 ad 7b ff ff       	call   f010d002 <kfree>
f0115455:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115458:	e8 00 72 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011545d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115460:	74 17                	je     f0115479 <test_kfree+0x126f>
f0115462:	83 ec 04             	sub    $0x4,%esp
f0115465:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011546a:	68 be 05 00 00       	push   $0x5be
f011546f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115474:	e8 1a ad fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0115479:	e8 3c 55 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011547e:	89 c2                	mov    %eax,%edx
f0115480:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115483:	29 c2                	sub    %eax,%edx
f0115485:	89 d0                	mov    %edx,%eax
f0115487:	83 f8 05             	cmp    $0x5,%eax
f011548a:	74 17                	je     f01154a3 <test_kfree+0x1299>
f011548c:	83 ec 04             	sub    $0x4,%esp
f011548f:	68 24 ea 11 f0       	push   $0xf011ea24
f0115494:	68 bf 05 00 00       	push   $0x5bf
f0115499:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011549e:	e8 f0 ac fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01154a3:	e8 12 55 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01154a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01154ab:	e8 ad 71 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01154b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01154b3:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01154b9:	83 ec 0c             	sub    $0xc,%esp
f01154bc:	50                   	push   %eax
f01154bd:	e8 40 7b ff ff       	call   f010d002 <kfree>
f01154c2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01154c5:	e8 93 71 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01154ca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01154cd:	74 17                	je     f01154e6 <test_kfree+0x12dc>
f01154cf:	83 ec 04             	sub    $0x4,%esp
f01154d2:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01154d7:	68 c5 05 00 00       	push   $0x5c5
f01154dc:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01154e1:	e8 ad ac fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01154e6:	e8 cf 54 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01154eb:	89 c2                	mov    %eax,%edx
f01154ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154f0:	29 c2                	sub    %eax,%edx
f01154f2:	89 d0                	mov    %edx,%eax
f01154f4:	3d 00 01 00 00       	cmp    $0x100,%eax
f01154f9:	74 17                	je     f0115512 <test_kfree+0x1308>
f01154fb:	83 ec 04             	sub    $0x4,%esp
f01154fe:	68 24 ea 11 f0       	push   $0xf011ea24
f0115503:	68 c6 05 00 00       	push   $0x5c6
f0115508:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011550d:	e8 81 ac fe ff       	call   f0100193 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0115512:	e8 a3 54 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115517:	89 c2                	mov    %eax,%edx
f0115519:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011551c:	39 c2                	cmp    %eax,%edx
f011551e:	74 17                	je     f0115537 <test_kfree+0x132d>
f0115520:	83 ec 04             	sub    $0x4,%esp
f0115523:	68 c4 ea 11 f0       	push   $0xf011eac4
f0115528:	68 c8 05 00 00       	push   $0x5c8
f011552d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115532:	e8 5c ac fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b60%");
f0115537:	83 ec 0c             	sub    $0xc,%esp
f011553a:	68 f8 ea 11 f0       	push   $0xf011eaf8
f011553f:	e8 5f 20 ff ff       	call   f01075a3 <cprintf>
f0115544:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0115547:	83 ec 0c             	sub    $0xc,%esp
f011554a:	6a 03                	push   $0x3
f011554c:	e8 f2 57 ff ff       	call   f010ad43 <sys_bypassPageFault>
f0115551:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0115554:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011555b:	e9 82 00 00 00       	jmp    f01155e2 <test_kfree+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0115560:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115563:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f011556a:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f011556d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115570:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0115573:	e8 b9 57 ff ff       	call   f010ad31 <sys_rcr2>
f0115578:	89 c2                	mov    %eax,%edx
f011557a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011557d:	39 c2                	cmp    %eax,%edx
f011557f:	74 17                	je     f0115598 <test_kfree+0x138e>
f0115581:	83 ec 04             	sub    $0x4,%esp
f0115584:	68 00 eb 11 f0       	push   $0xf011eb00
f0115589:	68 d7 05 00 00       	push   $0x5d7
f011558e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115593:	e8 fb ab fe ff       	call   f0100193 <_panic>
			ptr[lastIndices[i]] = 10;
f0115598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011559b:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f01155a2:	89 c2                	mov    %eax,%edx
f01155a4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01155a7:	01 d0                	add    %edx,%eax
f01155a9:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01155ac:	e8 80 57 ff ff       	call   f010ad31 <sys_rcr2>
f01155b1:	89 c2                	mov    %eax,%edx
f01155b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01155b6:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f01155bd:	89 c1                	mov    %eax,%ecx
f01155bf:	8b 45 98             	mov    -0x68(%ebp),%eax
f01155c2:	01 c8                	add    %ecx,%eax
f01155c4:	39 c2                	cmp    %eax,%edx
f01155c6:	74 17                	je     f01155df <test_kfree+0x13d5>
f01155c8:	83 ec 04             	sub    $0x4,%esp
f01155cb:	68 00 eb 11 f0       	push   $0xf011eb00
f01155d0:	68 d9 05 00 00       	push   $0x5d9
f01155d5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01155da:	e8 b4 ab fe ff       	call   f0100193 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01155df:	ff 45 f4             	incl   -0xc(%ebp)
f01155e2:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01155e6:	0f 8e 74 ff ff ff    	jle    f0115560 <test_kfree+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01155ec:	83 ec 0c             	sub    $0xc,%esp
f01155ef:	6a 00                	push   $0x0
f01155f1:	e8 4d 57 ff ff       	call   f010ad43 <sys_bypassPageFault>
f01155f6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01155f9:	83 ec 0c             	sub    $0xc,%esp
f01155fc:	68 45 eb 11 f0       	push   $0xf011eb45
f0115601:	e8 9d 1f ff ff       	call   f01075a3 <cprintf>
f0115606:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115609:	e8 ac 53 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011560e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115611:	e8 47 70 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115616:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0115619:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011561f:	83 ec 0c             	sub    $0xc,%esp
f0115622:	50                   	push   %eax
f0115623:	e8 da 79 ff ff       	call   f010d002 <kfree>
f0115628:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011562b:	e8 2d 70 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115630:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115633:	74 17                	je     f011564c <test_kfree+0x1442>
f0115635:	83 ec 04             	sub    $0x4,%esp
f0115638:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011563d:	68 e7 05 00 00       	push   $0x5e7
f0115642:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115647:	e8 47 ab fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011564c:	e8 69 53 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115651:	89 c2                	mov    %eax,%edx
f0115653:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115656:	39 c2                	cmp    %eax,%edx
f0115658:	74 17                	je     f0115671 <test_kfree+0x1467>
f011565a:	83 ec 04             	sub    $0x4,%esp
f011565d:	68 4c eb 11 f0       	push   $0xf011eb4c
f0115662:	68 e8 05 00 00       	push   $0x5e8
f0115667:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011566c:	e8 22 ab fe ff       	call   f0100193 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0115671:	e8 44 53 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115676:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115679:	e8 df 6f ff ff       	call   f010c65d <pf_calculate_free_frames>
f011567e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0115681:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115687:	83 ec 0c             	sub    $0xc,%esp
f011568a:	50                   	push   %eax
f011568b:	e8 72 79 ff ff       	call   f010d002 <kfree>
f0115690:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115693:	e8 c5 6f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115698:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011569b:	74 17                	je     f01156b4 <test_kfree+0x14aa>
f011569d:	83 ec 04             	sub    $0x4,%esp
f01156a0:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01156a5:	68 ee 05 00 00       	push   $0x5ee
f01156aa:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01156af:	e8 df aa fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01156b4:	e8 01 53 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01156b9:	89 c2                	mov    %eax,%edx
f01156bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156be:	39 c2                	cmp    %eax,%edx
f01156c0:	74 17                	je     f01156d9 <test_kfree+0x14cf>
f01156c2:	83 ec 04             	sub    $0x4,%esp
f01156c5:	68 4c eb 11 f0       	push   $0xf011eb4c
f01156ca:	68 ef 05 00 00       	push   $0x5ef
f01156cf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01156d4:	e8 ba aa fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01156d9:	e8 dc 52 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01156de:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01156e1:	e8 77 6f ff ff       	call   f010c65d <pf_calculate_free_frames>
f01156e6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01156e9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01156ef:	83 ec 0c             	sub    $0xc,%esp
f01156f2:	50                   	push   %eax
f01156f3:	e8 0a 79 ff ff       	call   f010d002 <kfree>
f01156f8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01156fb:	e8 5d 6f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115700:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115703:	74 17                	je     f011571c <test_kfree+0x1512>
f0115705:	83 ec 04             	sub    $0x4,%esp
f0115708:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011570d:	68 f5 05 00 00       	push   $0x5f5
f0115712:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115717:	e8 77 aa fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011571c:	e8 99 52 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115721:	89 c2                	mov    %eax,%edx
f0115723:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115726:	39 c2                	cmp    %eax,%edx
f0115728:	74 17                	je     f0115741 <test_kfree+0x1537>
f011572a:	83 ec 04             	sub    $0x4,%esp
f011572d:	68 4c eb 11 f0       	push   $0xf011eb4c
f0115732:	68 f6 05 00 00       	push   $0x5f6
f0115737:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011573c:	e8 52 aa fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0115741:	e8 74 52 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115746:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115749:	e8 0f 6f ff ff       	call   f010c65d <pf_calculate_free_frames>
f011574e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0115751:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0115757:	83 ec 0c             	sub    $0xc,%esp
f011575a:	50                   	push   %eax
f011575b:	e8 a2 78 ff ff       	call   f010d002 <kfree>
f0115760:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115763:	e8 f5 6e ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115768:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011576b:	74 17                	je     f0115784 <test_kfree+0x157a>
f011576d:	83 ec 04             	sub    $0x4,%esp
f0115770:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115775:	68 fc 05 00 00       	push   $0x5fc
f011577a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011577f:	e8 0f aa fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0115784:	e8 31 52 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115789:	89 c2                	mov    %eax,%edx
f011578b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011578e:	39 c2                	cmp    %eax,%edx
f0115790:	74 17                	je     f01157a9 <test_kfree+0x159f>
f0115792:	83 ec 04             	sub    $0x4,%esp
f0115795:	68 4c eb 11 f0       	push   $0xf011eb4c
f011579a:	68 fd 05 00 00       	push   $0x5fd
f011579f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01157a4:	e8 ea a9 fe ff       	call   f0100193 <_panic>

	}
	cprintf("\b\b\b85%");
f01157a9:	83 ec 0c             	sub    $0xc,%esp
f01157ac:	68 93 eb 11 f0       	push   $0xf011eb93
f01157b1:	e8 ed 1d ff ff       	call   f01075a3 <cprintf>
f01157b6:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01157b9:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01157c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01157c7:	eb 4a                	jmp    f0115813 <test_kfree+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f01157c9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01157cc:	89 c1                	mov    %eax,%ecx
f01157ce:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f01157d3:	83 ec 04             	sub    $0x4,%esp
f01157d6:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f01157dc:	52                   	push   %edx
f01157dd:	51                   	push   %ecx
f01157de:	50                   	push   %eax
f01157df:	e8 8a e6 fe ff       	call   f0103e6e <get_page_table>
f01157e4:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01157e7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01157ed:	85 c0                	test   %eax,%eax
f01157ef:	75 17                	jne    f0115808 <test_kfree+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01157f1:	83 ec 04             	sub    $0x4,%esp
f01157f4:	68 9c eb 11 f0       	push   $0xf011eb9c
f01157f9:	68 0b 06 00 00       	push   $0x60b
f01157fe:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115803:	e8 8b a9 fe ff       	call   f0100193 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0115808:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f011580f:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0115813:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115817:	78 b0                	js     f01157c9 <test_kfree+0x15bf>
f0115819:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011581d:	7f 09                	jg     f0115828 <test_kfree+0x161e>
f011581f:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0115826:	76 a1                	jbe    f01157c9 <test_kfree+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0115828:	83 ec 0c             	sub    $0xc,%esp
f011582b:	68 c2 e4 11 f0       	push   $0xf011e4c2
f0115830:	e8 6e 1d ff ff       	call   f01075a3 <cprintf>
f0115835:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0115838:	83 ec 0c             	sub    $0xc,%esp
f011583b:	68 04 ec 11 f0       	push   $0xf011ec04
f0115840:	e8 5e 1d ff ff       	call   f01075a3 <cprintf>
f0115845:	83 c4 10             	add    $0x10,%esp

	return 1;
f0115848:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011584d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0115850:	5b                   	pop    %ebx
f0115851:	5f                   	pop    %edi
f0115852:	5d                   	pop    %ebp
f0115853:	c3                   	ret    

f0115854 <test_kfree_bestfit>:

int test_kfree_bestfit()
{
f0115854:	55                   	push   %ebp
f0115855:	89 e5                	mov    %esp,%ebp
f0115857:	57                   	push   %edi
f0115858:	53                   	push   %ebx
f0115859:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f011585f:	83 ec 0c             	sub    $0xc,%esp
f0115862:	68 28 e2 11 f0       	push   $0xf011e228
f0115867:	e8 37 1d ff ff       	call   f01075a3 <cprintf>
f011586c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011586f:	83 ec 0c             	sub    $0xc,%esp
f0115872:	68 58 e2 11 f0       	push   $0xf011e258
f0115877:	e8 27 1d ff ff       	call   f01075a3 <cprintf>
f011587c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011587f:	83 ec 0c             	sub    $0xc,%esp
f0115882:	68 28 e2 11 f0       	push   $0xf011e228
f0115887:	e8 17 1d ff ff       	call   f01075a3 <cprintf>
f011588c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011588f:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0115893:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0115897:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011589d:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01158a3:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01158aa:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01158b1:	e8 04 51 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01158b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01158b9:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f01158bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f01158c4:	b8 00 00 00 00       	mov    $0x0,%eax
f01158c9:	89 d7                	mov    %edx,%edi
f01158cb:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01158cd:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f01158d3:	b9 14 00 00 00       	mov    $0x14,%ecx
f01158d8:	b8 00 00 00 00       	mov    $0x0,%eax
f01158dd:	89 d7                	mov    %edx,%edi
f01158df:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01158e1:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f01158e7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01158ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01158f1:	89 d7                	mov    %edx,%edi
f01158f3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01158f5:	e8 c0 50 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01158fa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01158fd:	e8 5b 6d ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115902:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0115905:	83 ec 0c             	sub    $0xc,%esp
f0115908:	68 00 fc 1f 00       	push   $0x1ffc00
f011590d:	e8 d6 76 ff ff       	call   f010cfe8 <kmalloc>
f0115912:	83 c4 10             	add    $0x10,%esp
f0115915:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011591b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0115921:	89 c1                	mov    %eax,%ecx
f0115923:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011592a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011592f:	0f b6 d0             	movzbl %al,%edx
f0115932:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115935:	01 d0                	add    %edx,%eax
f0115937:	48                   	dec    %eax
f0115938:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011593b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011593e:	ba 00 00 00 00       	mov    $0x0,%edx
f0115943:	f7 75 c8             	divl   -0x38(%ebp)
f0115946:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115949:	29 d0                	sub    %edx,%eax
f011594b:	89 c3                	mov    %eax,%ebx
f011594d:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0115954:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115959:	0f b6 c0             	movzbl %al,%eax
f011595c:	c1 e0 04             	shl    $0x4,%eax
f011595f:	89 c2                	mov    %eax,%edx
f0115961:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115964:	01 d0                	add    %edx,%eax
f0115966:	48                   	dec    %eax
f0115967:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011596a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011596d:	ba 00 00 00 00       	mov    $0x0,%edx
f0115972:	f7 75 c0             	divl   -0x40(%ebp)
f0115975:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115978:	29 d0                	sub    %edx,%eax
f011597a:	01 d8                	add    %ebx,%eax
f011597c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0115981:	39 c1                	cmp    %eax,%ecx
f0115983:	74 17                	je     f011599c <test_kfree_bestfit+0x148>
f0115985:	83 ec 04             	sub    $0x4,%esp
f0115988:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011598d:	68 38 06 00 00       	push   $0x638
f0115992:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115997:	e8 f7 a7 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011599c:	e8 bc 6c ff ff       	call   f010c65d <pf_calculate_free_frames>
f01159a1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01159a4:	74 17                	je     f01159bd <test_kfree_bestfit+0x169>
f01159a6:	83 ec 04             	sub    $0x4,%esp
f01159a9:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01159ae:	68 39 06 00 00       	push   $0x639
f01159b3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01159b8:	e8 d6 a7 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01159bd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01159c0:	e8 f5 4f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01159c5:	29 c3                	sub    %eax,%ebx
f01159c7:	89 d8                	mov    %ebx,%eax
f01159c9:	3d 00 02 00 00       	cmp    $0x200,%eax
f01159ce:	74 17                	je     f01159e7 <test_kfree_bestfit+0x193>
f01159d0:	83 ec 04             	sub    $0x4,%esp
f01159d3:	68 60 e3 11 f0       	push   $0xf011e360
f01159d8:	68 3a 06 00 00       	push   $0x63a
f01159dd:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01159e2:	e8 ac a7 fe ff       	call   f0100193 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01159e7:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f01159ee:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01159f1:	e8 c4 4f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01159f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01159f9:	e8 5f 6c ff ff       	call   f010c65d <pf_calculate_free_frames>
f01159fe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0115a01:	83 ec 0c             	sub    $0xc,%esp
f0115a04:	68 00 fc 1f 00       	push   $0x1ffc00
f0115a09:	e8 da 75 ff ff       	call   f010cfe8 <kmalloc>
f0115a0e:	83 c4 10             	add    $0x10,%esp
f0115a11:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115a17:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0115a1d:	89 c1                	mov    %eax,%ecx
f0115a1f:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0115a26:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115a2b:	0f b6 d0             	movzbl %al,%edx
f0115a2e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115a31:	01 d0                	add    %edx,%eax
f0115a33:	48                   	dec    %eax
f0115a34:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0115a37:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115a3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0115a3f:	f7 75 b8             	divl   -0x48(%ebp)
f0115a42:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115a45:	29 d0                	sub    %edx,%eax
f0115a47:	89 c3                	mov    %eax,%ebx
f0115a49:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0115a50:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115a55:	0f b6 c0             	movzbl %al,%eax
f0115a58:	c1 e0 04             	shl    $0x4,%eax
f0115a5b:	89 c2                	mov    %eax,%edx
f0115a5d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115a60:	01 d0                	add    %edx,%eax
f0115a62:	48                   	dec    %eax
f0115a63:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0115a66:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a69:	ba 00 00 00 00       	mov    $0x0,%edx
f0115a6e:	f7 75 b0             	divl   -0x50(%ebp)
f0115a71:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a74:	29 d0                	sub    %edx,%eax
f0115a76:	01 d8                	add    %ebx,%eax
f0115a78:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0115a7d:	39 c1                	cmp    %eax,%ecx
f0115a7f:	74 17                	je     f0115a98 <test_kfree_bestfit+0x244>
f0115a81:	83 ec 04             	sub    $0x4,%esp
f0115a84:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0115a89:	68 41 06 00 00       	push   $0x641
f0115a8e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115a93:	e8 fb a6 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115a98:	e8 c0 6b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115a9d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115aa0:	74 17                	je     f0115ab9 <test_kfree_bestfit+0x265>
f0115aa2:	83 ec 04             	sub    $0x4,%esp
f0115aa5:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115aaa:	68 42 06 00 00       	push   $0x642
f0115aaf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115ab4:	e8 da a6 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115ab9:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115abc:	e8 f9 4e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115ac1:	29 c3                	sub    %eax,%ebx
f0115ac3:	89 d8                	mov    %ebx,%eax
f0115ac5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115aca:	74 17                	je     f0115ae3 <test_kfree_bestfit+0x28f>
f0115acc:	83 ec 04             	sub    $0x4,%esp
f0115acf:	68 60 e3 11 f0       	push   $0xf011e360
f0115ad4:	68 43 06 00 00       	push   $0x643
f0115ad9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115ade:	e8 b0 a6 fe ff       	call   f0100193 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0115ae3:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0115aea:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0115aed:	e8 c8 4e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115af2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115af5:	e8 63 6b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115afa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0115afd:	83 ec 0c             	sub    $0xc,%esp
f0115b00:	68 00 08 00 00       	push   $0x800
f0115b05:	e8 de 74 ff ff       	call   f010cfe8 <kmalloc>
f0115b0a:	83 c4 10             	add    $0x10,%esp
f0115b0d:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115b13:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115b19:	89 c1                	mov    %eax,%ecx
f0115b1b:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0115b22:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115b27:	0f b6 d0             	movzbl %al,%edx
f0115b2a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b2d:	01 d0                	add    %edx,%eax
f0115b2f:	48                   	dec    %eax
f0115b30:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0115b33:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0115b3b:	f7 75 a8             	divl   -0x58(%ebp)
f0115b3e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b41:	29 d0                	sub    %edx,%eax
f0115b43:	89 c3                	mov    %eax,%ebx
f0115b45:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0115b4c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115b51:	0f b6 c0             	movzbl %al,%eax
f0115b54:	c1 e0 04             	shl    $0x4,%eax
f0115b57:	89 c2                	mov    %eax,%edx
f0115b59:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115b5c:	01 d0                	add    %edx,%eax
f0115b5e:	48                   	dec    %eax
f0115b5f:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0115b62:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0115b6a:	f7 75 a0             	divl   -0x60(%ebp)
f0115b6d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115b70:	29 d0                	sub    %edx,%eax
f0115b72:	01 d8                	add    %ebx,%eax
f0115b74:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0115b79:	39 c1                	cmp    %eax,%ecx
f0115b7b:	74 17                	je     f0115b94 <test_kfree_bestfit+0x340>
f0115b7d:	83 ec 04             	sub    $0x4,%esp
f0115b80:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0115b85:	68 4a 06 00 00       	push   $0x64a
f0115b8a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115b8f:	e8 ff a5 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115b94:	e8 c4 6a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115b99:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115b9c:	74 17                	je     f0115bb5 <test_kfree_bestfit+0x361>
f0115b9e:	83 ec 04             	sub    $0x4,%esp
f0115ba1:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115ba6:	68 4b 06 00 00       	push   $0x64b
f0115bab:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115bb0:	e8 de a5 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115bb5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115bb8:	e8 fd 4d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115bbd:	29 c3                	sub    %eax,%ebx
f0115bbf:	89 d8                	mov    %ebx,%eax
f0115bc1:	83 f8 01             	cmp    $0x1,%eax
f0115bc4:	74 17                	je     f0115bdd <test_kfree_bestfit+0x389>
f0115bc6:	83 ec 04             	sub    $0x4,%esp
f0115bc9:	68 60 e3 11 f0       	push   $0xf011e360
f0115bce:	68 4c 06 00 00       	push   $0x64c
f0115bd3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115bd8:	e8 b6 a5 fe ff       	call   f0100193 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0115bdd:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0115be4:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0115be7:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115bed:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0115bf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115bf7:	eb 0e                	jmp    f0115c07 <test_kfree_bestfit+0x3b3>
		{
			ptr[i] = 2 ;
f0115bf9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115bfc:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115bff:	01 d0                	add    %edx,%eax
f0115c01:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0115c04:	ff 45 f4             	incl   -0xc(%ebp)
f0115c07:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0115c0d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115c10:	7f e7                	jg     f0115bf9 <test_kfree_bestfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0115c12:	e8 a3 4d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115c17:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115c1a:	e8 3e 6a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115c1f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0115c22:	83 ec 0c             	sub    $0xc,%esp
f0115c25:	68 00 08 00 00       	push   $0x800
f0115c2a:	e8 b9 73 ff ff       	call   f010cfe8 <kmalloc>
f0115c2f:	83 c4 10             	add    $0x10,%esp
f0115c32:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115c38:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0115c3e:	89 c1                	mov    %eax,%ecx
f0115c40:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0115c47:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115c4c:	0f b6 d0             	movzbl %al,%edx
f0115c4f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0115c52:	01 d0                	add    %edx,%eax
f0115c54:	48                   	dec    %eax
f0115c55:	89 45 90             	mov    %eax,-0x70(%ebp)
f0115c58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115c5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0115c60:	f7 75 94             	divl   -0x6c(%ebp)
f0115c63:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115c66:	29 d0                	sub    %edx,%eax
f0115c68:	89 c3                	mov    %eax,%ebx
f0115c6a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0115c71:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115c76:	0f b6 c0             	movzbl %al,%eax
f0115c79:	c1 e0 04             	shl    $0x4,%eax
f0115c7c:	89 c2                	mov    %eax,%edx
f0115c7e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115c81:	01 d0                	add    %edx,%eax
f0115c83:	48                   	dec    %eax
f0115c84:	89 45 88             	mov    %eax,-0x78(%ebp)
f0115c87:	8b 45 88             	mov    -0x78(%ebp),%eax
f0115c8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0115c8f:	f7 75 8c             	divl   -0x74(%ebp)
f0115c92:	8b 45 88             	mov    -0x78(%ebp),%eax
f0115c95:	29 d0                	sub    %edx,%eax
f0115c97:	01 d8                	add    %ebx,%eax
f0115c99:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0115c9e:	39 c1                	cmp    %eax,%ecx
f0115ca0:	74 17                	je     f0115cb9 <test_kfree_bestfit+0x465>
f0115ca2:	83 ec 04             	sub    $0x4,%esp
f0115ca5:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0115caa:	68 58 06 00 00       	push   $0x658
f0115caf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115cb4:	e8 da a4 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115cb9:	e8 9f 69 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115cbe:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115cc1:	74 17                	je     f0115cda <test_kfree_bestfit+0x486>
f0115cc3:	83 ec 04             	sub    $0x4,%esp
f0115cc6:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115ccb:	68 59 06 00 00       	push   $0x659
f0115cd0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115cd5:	e8 b9 a4 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115cda:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115cdd:	e8 d8 4c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115ce2:	29 c3                	sub    %eax,%ebx
f0115ce4:	89 d8                	mov    %ebx,%eax
f0115ce6:	83 f8 01             	cmp    $0x1,%eax
f0115ce9:	74 17                	je     f0115d02 <test_kfree_bestfit+0x4ae>
f0115ceb:	83 ec 04             	sub    $0x4,%esp
f0115cee:	68 60 e3 11 f0       	push   $0xf011e360
f0115cf3:	68 5a 06 00 00       	push   $0x65a
f0115cf8:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115cfd:	e8 91 a4 fe ff       	call   f0100193 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0115d02:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f0115d09:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0115d0c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0115d12:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0115d15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115d1c:	eb 0e                	jmp    f0115d2c <test_kfree_bestfit+0x4d8>
		{
			ptr[i] = 3 ;
f0115d1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115d21:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115d24:	01 d0                	add    %edx,%eax
f0115d26:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0115d29:	ff 45 f4             	incl   -0xc(%ebp)
f0115d2c:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0115d32:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115d35:	7f e7                	jg     f0115d1e <test_kfree_bestfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0115d37:	e8 7e 4c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115d3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115d3f:	e8 19 69 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115d44:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0115d47:	83 ec 0c             	sub    $0xc,%esp
f0115d4a:	68 00 1c 00 00       	push   $0x1c00
f0115d4f:	e8 94 72 ff ff       	call   f010cfe8 <kmalloc>
f0115d54:	83 c4 10             	add    $0x10,%esp
f0115d57:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115d5d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0115d63:	89 c1                	mov    %eax,%ecx
f0115d65:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0115d6c:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115d71:	0f b6 d0             	movzbl %al,%edx
f0115d74:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0115d77:	01 d0                	add    %edx,%eax
f0115d79:	48                   	dec    %eax
f0115d7a:	89 45 80             	mov    %eax,-0x80(%ebp)
f0115d7d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115d80:	ba 00 00 00 00       	mov    $0x0,%edx
f0115d85:	f7 75 84             	divl   -0x7c(%ebp)
f0115d88:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115d8b:	29 d0                	sub    %edx,%eax
f0115d8d:	89 c3                	mov    %eax,%ebx
f0115d8f:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0115d96:	10 00 00 
f0115d99:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115d9e:	0f b6 c0             	movzbl %al,%eax
f0115da1:	c1 e0 04             	shl    $0x4,%eax
f0115da4:	89 c2                	mov    %eax,%edx
f0115da6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0115dac:	01 d0                	add    %edx,%eax
f0115dae:	48                   	dec    %eax
f0115daf:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0115db5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0115dbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0115dc0:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0115dc6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0115dcc:	29 d0                	sub    %edx,%eax
f0115dce:	01 d8                	add    %ebx,%eax
f0115dd0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0115dd5:	39 c1                	cmp    %eax,%ecx
f0115dd7:	74 17                	je     f0115df0 <test_kfree_bestfit+0x59c>
f0115dd9:	83 ec 04             	sub    $0x4,%esp
f0115ddc:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0115de1:	68 66 06 00 00       	push   $0x666
f0115de6:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115deb:	e8 a3 a3 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115df0:	e8 68 68 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115df5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115df8:	74 17                	je     f0115e11 <test_kfree_bestfit+0x5bd>
f0115dfa:	83 ec 04             	sub    $0x4,%esp
f0115dfd:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115e02:	68 67 06 00 00       	push   $0x667
f0115e07:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115e0c:	e8 82 a3 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115e11:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115e14:	e8 a1 4b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115e19:	29 c3                	sub    %eax,%ebx
f0115e1b:	89 d8                	mov    %ebx,%eax
f0115e1d:	83 f8 02             	cmp    $0x2,%eax
f0115e20:	74 17                	je     f0115e39 <test_kfree_bestfit+0x5e5>
f0115e22:	83 ec 04             	sub    $0x4,%esp
f0115e25:	68 60 e3 11 f0       	push   $0xf011e360
f0115e2a:	68 68 06 00 00       	push   $0x668
f0115e2f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115e34:	e8 5a a3 fe ff       	call   f0100193 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0115e39:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f0115e40:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0115e43:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0115e49:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0115e4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115e53:	eb 0e                	jmp    f0115e63 <test_kfree_bestfit+0x60f>
		{
			ptr[i] = 4 ;
f0115e55:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115e58:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115e5b:	01 d0                	add    %edx,%eax
f0115e5d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0115e60:	ff 45 f4             	incl   -0xc(%ebp)
f0115e63:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0115e69:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115e6c:	7f e7                	jg     f0115e55 <test_kfree_bestfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0115e6e:	e8 47 4b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115e73:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115e76:	e8 e2 67 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115e7b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0115e7e:	83 ec 0c             	sub    $0xc,%esp
f0115e81:	68 00 fc 2f 00       	push   $0x2ffc00
f0115e86:	e8 5d 71 ff ff       	call   f010cfe8 <kmalloc>
f0115e8b:	83 c4 10             	add    $0x10,%esp
f0115e8e:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115e94:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0115e9a:	89 c1                	mov    %eax,%ecx
f0115e9c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0115ea3:	10 00 00 
f0115ea6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115eab:	0f b6 d0             	movzbl %al,%edx
f0115eae:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0115eb4:	01 d0                	add    %edx,%eax
f0115eb6:	48                   	dec    %eax
f0115eb7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0115ebd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0115ec3:	ba 00 00 00 00       	mov    $0x0,%edx
f0115ec8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0115ece:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0115ed4:	29 d0                	sub    %edx,%eax
f0115ed6:	89 c3                	mov    %eax,%ebx
f0115ed8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0115edf:	10 00 00 
f0115ee2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115ee7:	0f b6 c0             	movzbl %al,%eax
f0115eea:	c1 e0 04             	shl    $0x4,%eax
f0115eed:	89 c2                	mov    %eax,%edx
f0115eef:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0115ef5:	01 d0                	add    %edx,%eax
f0115ef7:	48                   	dec    %eax
f0115ef8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0115efe:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0115f04:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f09:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0115f0f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0115f15:	29 d0                	sub    %edx,%eax
f0115f17:	01 d8                	add    %ebx,%eax
f0115f19:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0115f1e:	39 c1                	cmp    %eax,%ecx
f0115f20:	74 17                	je     f0115f39 <test_kfree_bestfit+0x6e5>
f0115f22:	83 ec 04             	sub    $0x4,%esp
f0115f25:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0115f2a:	68 74 06 00 00       	push   $0x674
f0115f2f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115f34:	e8 5a a2 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115f39:	e8 1f 67 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115f3e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115f41:	74 17                	je     f0115f5a <test_kfree_bestfit+0x706>
f0115f43:	83 ec 04             	sub    $0x4,%esp
f0115f46:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0115f4b:	68 75 06 00 00       	push   $0x675
f0115f50:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115f55:	e8 39 a2 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115f5a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115f5d:	e8 58 4a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115f62:	29 c3                	sub    %eax,%ebx
f0115f64:	89 d8                	mov    %ebx,%eax
f0115f66:	3d 00 03 00 00       	cmp    $0x300,%eax
f0115f6b:	74 17                	je     f0115f84 <test_kfree_bestfit+0x730>
f0115f6d:	83 ec 04             	sub    $0x4,%esp
f0115f70:	68 60 e3 11 f0       	push   $0xf011e360
f0115f75:	68 76 06 00 00       	push   $0x676
f0115f7a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0115f7f:	e8 0f a2 fe ff       	call   f0100193 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0115f84:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0115f8b:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0115f8e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0115f94:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0115f97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115f9e:	eb 0e                	jmp    f0115fae <test_kfree_bestfit+0x75a>
		{
			ptr[i] = 5 ;
f0115fa0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115fa3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115fa6:	01 d0                	add    %edx,%eax
f0115fa8:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0115fab:	ff 45 f4             	incl   -0xc(%ebp)
f0115fae:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0115fb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115fb7:	7f e7                	jg     f0115fa0 <test_kfree_bestfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0115fb9:	e8 fc 49 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0115fbe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115fc1:	e8 97 66 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0115fc6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0115fc9:	83 ec 0c             	sub    $0xc,%esp
f0115fcc:	68 00 fc 5f 00       	push   $0x5ffc00
f0115fd1:	e8 12 70 ff ff       	call   f010cfe8 <kmalloc>
f0115fd6:	83 c4 10             	add    $0x10,%esp
f0115fd9:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115fdf:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0115fe5:	89 c1                	mov    %eax,%ecx
f0115fe7:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0115fee:	10 00 00 
f0115ff1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0115ff6:	0f b6 d0             	movzbl %al,%edx
f0115ff9:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0115fff:	01 d0                	add    %edx,%eax
f0116001:	48                   	dec    %eax
f0116002:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0116008:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011600e:	ba 00 00 00 00       	mov    $0x0,%edx
f0116013:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0116019:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011601f:	29 d0                	sub    %edx,%eax
f0116021:	89 c3                	mov    %eax,%ebx
f0116023:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011602a:	10 00 00 
f011602d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0116032:	0f b6 c0             	movzbl %al,%eax
f0116035:	c1 e0 04             	shl    $0x4,%eax
f0116038:	89 c2                	mov    %eax,%edx
f011603a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0116040:	01 d0                	add    %edx,%eax
f0116042:	48                   	dec    %eax
f0116043:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0116049:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011604f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116054:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011605a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0116060:	29 d0                	sub    %edx,%eax
f0116062:	01 d8                	add    %ebx,%eax
f0116064:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0116069:	39 c1                	cmp    %eax,%ecx
f011606b:	74 17                	je     f0116084 <test_kfree_bestfit+0x830>
f011606d:	83 ec 04             	sub    $0x4,%esp
f0116070:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0116075:	68 82 06 00 00       	push   $0x682
f011607a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011607f:	e8 0f a1 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116084:	e8 d4 65 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116089:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011608c:	74 17                	je     f01160a5 <test_kfree_bestfit+0x851>
f011608e:	83 ec 04             	sub    $0x4,%esp
f0116091:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116096:	68 83 06 00 00       	push   $0x683
f011609b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01160a0:	e8 ee a0 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01160a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01160a8:	e8 0d 49 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01160ad:	29 c3                	sub    %eax,%ebx
f01160af:	89 d8                	mov    %ebx,%eax
f01160b1:	3d 00 06 00 00       	cmp    $0x600,%eax
f01160b6:	74 17                	je     f01160cf <test_kfree_bestfit+0x87b>
f01160b8:	83 ec 04             	sub    $0x4,%esp
f01160bb:	68 60 e3 11 f0       	push   $0xf011e360
f01160c0:	68 84 06 00 00       	push   $0x684
f01160c5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01160ca:	e8 c4 a0 fe ff       	call   f0100193 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01160cf:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f01160d6:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01160d9:	e8 dc 48 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01160de:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01160e1:	e8 77 65 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01160e6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01160e9:	83 ec 0c             	sub    $0xc,%esp
f01160ec:	68 00 38 00 00       	push   $0x3800
f01160f1:	e8 f2 6e ff ff       	call   f010cfe8 <kmalloc>
f01160f6:	83 c4 10             	add    $0x10,%esp
f01160f9:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01160ff:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116105:	89 c1                	mov    %eax,%ecx
f0116107:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011610e:	10 00 00 
f0116111:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0116116:	0f b6 d0             	movzbl %al,%edx
f0116119:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011611f:	01 d0                	add    %edx,%eax
f0116121:	48                   	dec    %eax
f0116122:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0116128:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011612e:	ba 00 00 00 00       	mov    $0x0,%edx
f0116133:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0116139:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011613f:	29 d0                	sub    %edx,%eax
f0116141:	89 c3                	mov    %eax,%ebx
f0116143:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011614a:	10 00 00 
f011614d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0116152:	0f b6 c0             	movzbl %al,%eax
f0116155:	c1 e0 04             	shl    $0x4,%eax
f0116158:	89 c2                	mov    %eax,%edx
f011615a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0116160:	01 d0                	add    %edx,%eax
f0116162:	48                   	dec    %eax
f0116163:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0116169:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011616f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116174:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011617a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0116180:	29 d0                	sub    %edx,%eax
f0116182:	01 d8                	add    %ebx,%eax
f0116184:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0116189:	39 c1                	cmp    %eax,%ecx
f011618b:	74 17                	je     f01161a4 <test_kfree_bestfit+0x950>
f011618d:	83 ec 04             	sub    $0x4,%esp
f0116190:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0116195:	68 8b 06 00 00       	push   $0x68b
f011619a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011619f:	e8 ef 9f fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01161a4:	e8 b4 64 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01161a9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01161ac:	74 17                	je     f01161c5 <test_kfree_bestfit+0x971>
f01161ae:	83 ec 04             	sub    $0x4,%esp
f01161b1:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01161b6:	68 8c 06 00 00       	push   $0x68c
f01161bb:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01161c0:	e8 ce 9f fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01161c5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01161c8:	e8 ed 47 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01161cd:	29 c3                	sub    %eax,%ebx
f01161cf:	89 d8                	mov    %ebx,%eax
f01161d1:	83 f8 04             	cmp    $0x4,%eax
f01161d4:	74 17                	je     f01161ed <test_kfree_bestfit+0x999>
f01161d6:	83 ec 04             	sub    $0x4,%esp
f01161d9:	68 60 e3 11 f0       	push   $0xf011e360
f01161de:	68 8d 06 00 00       	push   $0x68d
f01161e3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01161e8:	e8 a6 9f fe ff       	call   f0100193 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01161ed:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f01161f4:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01161f7:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01161fd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0116200:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116207:	eb 0e                	jmp    f0116217 <test_kfree_bestfit+0x9c3>
		{
			ptr[i] = 7 ;
f0116209:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011620c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011620f:	01 d0                	add    %edx,%eax
f0116211:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0116214:	ff 45 f4             	incl   -0xc(%ebp)
f0116217:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011621d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116220:	7f e7                	jg     f0116209 <test_kfree_bestfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0116222:	e8 93 47 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116227:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011622d:	e8 2b 64 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116232:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0116238:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011623e:	83 ec 0c             	sub    $0xc,%esp
f0116241:	50                   	push   %eax
f0116242:	e8 bb 6d ff ff       	call   f010d002 <kfree>
f0116247:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011624a:	e8 0e 64 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011624f:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0116255:	74 17                	je     f011626e <test_kfree_bestfit+0xa1a>
f0116257:	83 ec 04             	sub    $0x4,%esp
f011625a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011625f:	68 9c 06 00 00       	push   $0x69c
f0116264:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116269:	e8 25 9f fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011626e:	e8 47 47 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116273:	89 c2                	mov    %eax,%edx
f0116275:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011627b:	29 c2                	sub    %eax,%edx
f011627d:	89 d0                	mov    %edx,%eax
f011627f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116284:	74 17                	je     f011629d <test_kfree_bestfit+0xa49>
f0116286:	83 ec 04             	sub    $0x4,%esp
f0116289:	68 24 ea 11 f0       	push   $0xf011ea24
f011628e:	68 9d 06 00 00       	push   $0x69d
f0116293:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116298:	e8 f6 9e fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011629d:	e8 18 47 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01162a2:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01162a8:	e8 b0 63 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01162ad:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f01162b3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01162b9:	83 ec 0c             	sub    $0xc,%esp
f01162bc:	50                   	push   %eax
f01162bd:	e8 40 6d ff ff       	call   f010d002 <kfree>
f01162c2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01162c5:	e8 93 63 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01162ca:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f01162d0:	74 17                	je     f01162e9 <test_kfree_bestfit+0xa95>
f01162d2:	83 ec 04             	sub    $0x4,%esp
f01162d5:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01162da:	68 a3 06 00 00       	push   $0x6a3
f01162df:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01162e4:	e8 aa 9e fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01162e9:	e8 cc 46 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01162ee:	89 c2                	mov    %eax,%edx
f01162f0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01162f6:	29 c2                	sub    %eax,%edx
f01162f8:	89 d0                	mov    %edx,%eax
f01162fa:	3d 00 02 00 00       	cmp    $0x200,%eax
f01162ff:	74 17                	je     f0116318 <test_kfree_bestfit+0xac4>
f0116301:	83 ec 04             	sub    $0x4,%esp
f0116304:	68 24 ea 11 f0       	push   $0xf011ea24
f0116309:	68 a4 06 00 00       	push   $0x6a4
f011630e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116313:	e8 7b 9e fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0116318:	e8 9d 46 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011631d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116323:	e8 35 63 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116328:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f011632e:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0116334:	83 ec 0c             	sub    $0xc,%esp
f0116337:	50                   	push   %eax
f0116338:	e8 c5 6c ff ff       	call   f010d002 <kfree>
f011633d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116340:	e8 18 63 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116345:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011634b:	74 17                	je     f0116364 <test_kfree_bestfit+0xb10>
f011634d:	83 ec 04             	sub    $0x4,%esp
f0116350:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116355:	68 aa 06 00 00       	push   $0x6aa
f011635a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011635f:	e8 2f 9e fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0116364:	e8 51 46 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116369:	89 c2                	mov    %eax,%edx
f011636b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116371:	29 c2                	sub    %eax,%edx
f0116373:	89 d0                	mov    %edx,%eax
f0116375:	3d 00 06 00 00       	cmp    $0x600,%eax
f011637a:	74 17                	je     f0116393 <test_kfree_bestfit+0xb3f>
f011637c:	83 ec 04             	sub    $0x4,%esp
f011637f:	68 24 ea 11 f0       	push   $0xf011ea24
f0116384:	68 ab 06 00 00       	push   $0x6ab
f0116389:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011638e:	e8 00 9e fe ff       	call   f0100193 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0116393:	83 ec 0c             	sub    $0xc,%esp
f0116396:	68 5c ea 11 f0       	push   $0xf011ea5c
f011639b:	e8 03 12 ff ff       	call   f01075a3 <cprintf>
f01163a0:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01163a3:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01163a9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01163ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01163b3:	eb 1e                	jmp    f01163d3 <test_kfree_bestfit+0xb7f>
		{
			sums[2] += ptr[i] ;
f01163b5:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f01163bb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01163be:	8b 45 98             	mov    -0x68(%ebp),%eax
f01163c1:	01 c8                	add    %ecx,%eax
f01163c3:	8a 00                	mov    (%eax),%al
f01163c5:	0f be c0             	movsbl %al,%eax
f01163c8:	01 d0                	add    %edx,%eax
f01163ca:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01163d0:	ff 45 f4             	incl   -0xc(%ebp)
f01163d3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01163d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01163dc:	7f d7                	jg     f01163b5 <test_kfree_bestfit+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01163de:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f01163e4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01163ea:	01 c0                	add    %eax,%eax
f01163ec:	39 c2                	cmp    %eax,%edx
f01163ee:	74 17                	je     f0116407 <test_kfree_bestfit+0xbb3>
f01163f0:	83 ec 04             	sub    $0x4,%esp
f01163f3:	68 80 ea 11 f0       	push   $0xf011ea80
f01163f8:	68 b8 06 00 00       	push   $0x6b8
f01163fd:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116402:	e8 8c 9d fe ff       	call   f0100193 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0116407:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011640d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0116410:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116417:	eb 1e                	jmp    f0116437 <test_kfree_bestfit+0xbe3>
		{
			sums[3] += ptr[i] ;
f0116419:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f011641f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116422:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116425:	01 c8                	add    %ecx,%eax
f0116427:	8a 00                	mov    (%eax),%al
f0116429:	0f be c0             	movsbl %al,%eax
f011642c:	01 d0                	add    %edx,%eax
f011642e:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0116434:	ff 45 f4             	incl   -0xc(%ebp)
f0116437:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011643d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116440:	7f d7                	jg     f0116419 <test_kfree_bestfit+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0116442:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0116448:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011644e:	89 c1                	mov    %eax,%ecx
f0116450:	01 c9                	add    %ecx,%ecx
f0116452:	01 c8                	add    %ecx,%eax
f0116454:	39 c2                	cmp    %eax,%edx
f0116456:	74 17                	je     f011646f <test_kfree_bestfit+0xc1b>
f0116458:	83 ec 04             	sub    $0x4,%esp
f011645b:	68 80 ea 11 f0       	push   $0xf011ea80
f0116460:	68 c0 06 00 00       	push   $0x6c0
f0116465:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011646a:	e8 24 9d fe ff       	call   f0100193 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011646f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116475:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0116478:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011647f:	eb 1e                	jmp    f011649f <test_kfree_bestfit+0xc4b>
		{
			sums[4] += ptr[i] ;
f0116481:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0116487:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011648a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011648d:	01 c8                	add    %ecx,%eax
f011648f:	8a 00                	mov    (%eax),%al
f0116491:	0f be c0             	movsbl %al,%eax
f0116494:	01 d0                	add    %edx,%eax
f0116496:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011649c:	ff 45 f4             	incl   -0xc(%ebp)
f011649f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01164a5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01164a8:	7f d7                	jg     f0116481 <test_kfree_bestfit+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01164aa:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01164b0:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f01164b6:	c1 e2 02             	shl    $0x2,%edx
f01164b9:	39 d0                	cmp    %edx,%eax
f01164bb:	74 17                	je     f01164d4 <test_kfree_bestfit+0xc80>
f01164bd:	83 ec 04             	sub    $0x4,%esp
f01164c0:	68 80 ea 11 f0       	push   $0xf011ea80
f01164c5:	68 c8 06 00 00       	push   $0x6c8
f01164ca:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01164cf:	e8 bf 9c fe ff       	call   f0100193 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01164d4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01164da:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01164dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01164e4:	eb 1e                	jmp    f0116504 <test_kfree_bestfit+0xcb0>
		{
			sums[5] += ptr[i] ;
f01164e6:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f01164ec:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01164ef:	8b 45 98             	mov    -0x68(%ebp),%eax
f01164f2:	01 c8                	add    %ecx,%eax
f01164f4:	8a 00                	mov    (%eax),%al
f01164f6:	0f be c0             	movsbl %al,%eax
f01164f9:	01 d0                	add    %edx,%eax
f01164fb:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0116501:	ff 45 f4             	incl   -0xc(%ebp)
f0116504:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011650a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011650d:	7f d7                	jg     f01164e6 <test_kfree_bestfit+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011650f:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0116515:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f011651b:	89 d0                	mov    %edx,%eax
f011651d:	c1 e0 02             	shl    $0x2,%eax
f0116520:	01 d0                	add    %edx,%eax
f0116522:	39 c1                	cmp    %eax,%ecx
f0116524:	74 17                	je     f011653d <test_kfree_bestfit+0xce9>
f0116526:	83 ec 04             	sub    $0x4,%esp
f0116529:	68 80 ea 11 f0       	push   $0xf011ea80
f011652e:	68 d0 06 00 00       	push   $0x6d0
f0116533:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116538:	e8 56 9c fe ff       	call   f0100193 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011653d:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116543:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0116546:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011654d:	eb 1e                	jmp    f011656d <test_kfree_bestfit+0xd19>
		{
			sums[7] += ptr[i] ;
f011654f:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0116555:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116558:	8b 45 98             	mov    -0x68(%ebp),%eax
f011655b:	01 c8                	add    %ecx,%eax
f011655d:	8a 00                	mov    (%eax),%al
f011655f:	0f be c0             	movsbl %al,%eax
f0116562:	01 d0                	add    %edx,%eax
f0116564:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011656a:	ff 45 f4             	incl   -0xc(%ebp)
f011656d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0116573:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116576:	7f d7                	jg     f011654f <test_kfree_bestfit+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0116578:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f011657e:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0116584:	89 d0                	mov    %edx,%eax
f0116586:	01 c0                	add    %eax,%eax
f0116588:	01 d0                	add    %edx,%eax
f011658a:	01 c0                	add    %eax,%eax
f011658c:	01 d0                	add    %edx,%eax
f011658e:	39 c1                	cmp    %eax,%ecx
f0116590:	74 17                	je     f01165a9 <test_kfree_bestfit+0xd55>
f0116592:	83 ec 04             	sub    $0x4,%esp
f0116595:	68 80 ea 11 f0       	push   $0xf011ea80
f011659a:	68 d8 06 00 00       	push   $0x6d8
f011659f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01165a4:	e8 ea 9b fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b30%");
f01165a9:	83 ec 0c             	sub    $0xc,%esp
f01165ac:	68 b3 ea 11 f0       	push   $0xf011eab3
f01165b1:	e8 ed 0f ff ff       	call   f01075a3 <cprintf>
f01165b6:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f01165b9:	e8 fc 43 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01165be:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01165c1:	e8 97 60 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01165c6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f01165c9:	83 ec 0c             	sub    $0xc,%esp
f01165cc:	68 00 50 00 00       	push   $0x5000
f01165d1:	e8 12 6a ff ff       	call   f010cfe8 <kmalloc>
f01165d6:	83 c4 10             	add    $0x10,%esp
f01165d9:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01165df:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01165e5:	89 c1                	mov    %eax,%ecx
f01165e7:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01165ee:	10 00 00 
f01165f1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01165f6:	0f b6 d0             	movzbl %al,%edx
f01165f9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01165ff:	01 d0                	add    %edx,%eax
f0116601:	48                   	dec    %eax
f0116602:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0116608:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011660e:	ba 00 00 00 00       	mov    $0x0,%edx
f0116613:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0116619:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011661f:	29 d0                	sub    %edx,%eax
f0116621:	89 c3                	mov    %eax,%ebx
f0116623:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011662a:	10 00 00 
f011662d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0116632:	0f b6 c0             	movzbl %al,%eax
f0116635:	c1 e0 04             	shl    $0x4,%eax
f0116638:	89 c2                	mov    %eax,%edx
f011663a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0116640:	01 d0                	add    %edx,%eax
f0116642:	48                   	dec    %eax
f0116643:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0116649:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011664f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116654:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011665a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0116660:	29 d0                	sub    %edx,%eax
f0116662:	01 d8                	add    %ebx,%eax
f0116664:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0116669:	39 c1                	cmp    %eax,%ecx
f011666b:	74 17                	je     f0116684 <test_kfree_bestfit+0xe30>
f011666d:	83 ec 04             	sub    $0x4,%esp
f0116670:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0116675:	68 e2 06 00 00       	push   $0x6e2
f011667a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011667f:	e8 0f 9b fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116684:	e8 d4 5f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116689:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011668c:	74 17                	je     f01166a5 <test_kfree_bestfit+0xe51>
f011668e:	83 ec 04             	sub    $0x4,%esp
f0116691:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116696:	68 e3 06 00 00       	push   $0x6e3
f011669b:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01166a0:	e8 ee 9a fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01166a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01166a8:	e8 0d 43 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01166ad:	29 c3                	sub    %eax,%ebx
f01166af:	89 d8                	mov    %ebx,%eax
f01166b1:	83 f8 05             	cmp    $0x5,%eax
f01166b4:	74 17                	je     f01166cd <test_kfree_bestfit+0xe79>
f01166b6:	83 ec 04             	sub    $0x4,%esp
f01166b9:	68 60 e3 11 f0       	push   $0xf011e360
f01166be:	68 e4 06 00 00       	push   $0x6e4
f01166c3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01166c8:	e8 c6 9a fe ff       	call   f0100193 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01166cd:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f01166d4:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01166d7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01166dd:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01166e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01166e7:	eb 0e                	jmp    f01166f7 <test_kfree_bestfit+0xea3>
		{
			ptr[i] = 8 ;
f01166e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01166ec:	8b 45 98             	mov    -0x68(%ebp),%eax
f01166ef:	01 d0                	add    %edx,%eax
f01166f1:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01166f4:	ff 45 f4             	incl   -0xc(%ebp)
f01166f7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01166fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116700:	7f e7                	jg     f01166e9 <test_kfree_bestfit+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0116702:	e8 b3 42 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116707:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011670a:	e8 4e 5f ff ff       	call   f010c65d <pf_calculate_free_frames>
f011670f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0116712:	83 ec 0c             	sub    $0xc,%esp
f0116715:	68 00 00 10 00       	push   $0x100000
f011671a:	e8 c9 68 ff ff       	call   f010cfe8 <kmalloc>
f011671f:	83 c4 10             	add    $0x10,%esp
f0116722:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116728:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011672e:	89 c1                	mov    %eax,%ecx
f0116730:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0116737:	10 00 00 
f011673a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011673f:	0f b6 d0             	movzbl %al,%edx
f0116742:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0116748:	01 d0                	add    %edx,%eax
f011674a:	48                   	dec    %eax
f011674b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0116751:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0116757:	ba 00 00 00 00       	mov    $0x0,%edx
f011675c:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0116762:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0116768:	29 d0                	sub    %edx,%eax
f011676a:	89 c3                	mov    %eax,%ebx
f011676c:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0116773:	10 00 00 
f0116776:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011677b:	0f b6 c0             	movzbl %al,%eax
f011677e:	c1 e0 04             	shl    $0x4,%eax
f0116781:	89 c2                	mov    %eax,%edx
f0116783:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116789:	01 d0                	add    %edx,%eax
f011678b:	48                   	dec    %eax
f011678c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0116792:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116798:	ba 00 00 00 00       	mov    $0x0,%edx
f011679d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01167a3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01167a9:	29 d0                	sub    %edx,%eax
f01167ab:	01 d8                	add    %ebx,%eax
f01167ad:	2d 00 70 ff 09       	sub    $0x9ff7000,%eax
f01167b2:	39 c1                	cmp    %eax,%ecx
f01167b4:	74 17                	je     f01167cd <test_kfree_bestfit+0xf79>
f01167b6:	83 ec 04             	sub    $0x4,%esp
f01167b9:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01167be:	68 f0 06 00 00       	push   $0x6f0
f01167c3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01167c8:	e8 c6 99 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01167cd:	e8 8b 5e ff ff       	call   f010c65d <pf_calculate_free_frames>
f01167d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01167d5:	74 17                	je     f01167ee <test_kfree_bestfit+0xf9a>
f01167d7:	83 ec 04             	sub    $0x4,%esp
f01167da:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01167df:	68 f1 06 00 00       	push   $0x6f1
f01167e4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01167e9:	e8 a5 99 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01167ee:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01167f1:	e8 c4 41 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01167f6:	29 c3                	sub    %eax,%ebx
f01167f8:	89 d8                	mov    %ebx,%eax
f01167fa:	3d 00 01 00 00       	cmp    $0x100,%eax
f01167ff:	74 17                	je     f0116818 <test_kfree_bestfit+0xfc4>
f0116801:	83 ec 04             	sub    $0x4,%esp
f0116804:	68 60 e3 11 f0       	push   $0xf011e360
f0116809:	68 f2 06 00 00       	push   $0x6f2
f011680e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116813:	e8 7b 99 fe ff       	call   f0100193 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0116818:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f011681f:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0116822:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116828:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011682b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116832:	eb 0e                	jmp    f0116842 <test_kfree_bestfit+0xfee>
		{
			ptr[i] = 9 ;
f0116834:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116837:	8b 45 98             	mov    -0x68(%ebp),%eax
f011683a:	01 d0                	add    %edx,%eax
f011683c:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011683f:	ff 45 f4             	incl   -0xc(%ebp)
f0116842:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0116848:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011684b:	7f e7                	jg     f0116834 <test_kfree_bestfit+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f011684d:	83 ec 0c             	sub    $0xc,%esp
f0116850:	68 ba ea 11 f0       	push   $0xf011eaba
f0116855:	e8 49 0d ff ff       	call   f01075a3 <cprintf>
f011685a:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f011685d:	e8 58 41 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116862:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116865:	e8 f3 5d ff ff       	call   f010c65d <pf_calculate_free_frames>
f011686a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f011686d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116873:	83 ec 0c             	sub    $0xc,%esp
f0116876:	50                   	push   %eax
f0116877:	e8 86 67 ff ff       	call   f010d002 <kfree>
f011687c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011687f:	e8 d9 5d ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116884:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116887:	74 17                	je     f01168a0 <test_kfree_bestfit+0x104c>
f0116889:	83 ec 04             	sub    $0x4,%esp
f011688c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116891:	68 02 07 00 00       	push   $0x702
f0116896:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011689b:	e8 f3 98 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01168a0:	e8 15 41 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01168a5:	89 c2                	mov    %eax,%edx
f01168a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01168aa:	29 c2                	sub    %eax,%edx
f01168ac:	89 d0                	mov    %edx,%eax
f01168ae:	83 f8 02             	cmp    $0x2,%eax
f01168b1:	74 17                	je     f01168ca <test_kfree_bestfit+0x1076>
f01168b3:	83 ec 04             	sub    $0x4,%esp
f01168b6:	68 24 ea 11 f0       	push   $0xf011ea24
f01168bb:	68 03 07 00 00       	push   $0x703
f01168c0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01168c5:	e8 c9 98 fe ff       	call   f0100193 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01168ca:	e8 eb 40 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01168cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01168d2:	e8 86 5d ff ff       	call   f010c65d <pf_calculate_free_frames>
f01168d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01168da:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01168e0:	83 ec 0c             	sub    $0xc,%esp
f01168e3:	50                   	push   %eax
f01168e4:	e8 19 67 ff ff       	call   f010d002 <kfree>
f01168e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01168ec:	e8 6c 5d ff ff       	call   f010c65d <pf_calculate_free_frames>
f01168f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01168f4:	74 17                	je     f011690d <test_kfree_bestfit+0x10b9>
f01168f6:	83 ec 04             	sub    $0x4,%esp
f01168f9:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01168fe:	68 09 07 00 00       	push   $0x709
f0116903:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116908:	e8 86 98 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011690d:	e8 a8 40 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116912:	89 c2                	mov    %eax,%edx
f0116914:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116917:	29 c2                	sub    %eax,%edx
f0116919:	89 d0                	mov    %edx,%eax
f011691b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0116920:	74 17                	je     f0116939 <test_kfree_bestfit+0x10e5>
f0116922:	83 ec 04             	sub    $0x4,%esp
f0116925:	68 24 ea 11 f0       	push   $0xf011ea24
f011692a:	68 0a 07 00 00       	push   $0x70a
f011692f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116934:	e8 5a 98 fe ff       	call   f0100193 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116939:	e8 7c 40 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011693e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116941:	e8 17 5d ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116946:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0116949:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011694f:	83 ec 0c             	sub    $0xc,%esp
f0116952:	50                   	push   %eax
f0116953:	e8 aa 66 ff ff       	call   f010d002 <kfree>
f0116958:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011695b:	e8 fd 5c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116960:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116963:	74 17                	je     f011697c <test_kfree_bestfit+0x1128>
f0116965:	83 ec 04             	sub    $0x4,%esp
f0116968:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011696d:	68 10 07 00 00       	push   $0x710
f0116972:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116977:	e8 17 98 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011697c:	e8 39 40 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116981:	89 c2                	mov    %eax,%edx
f0116983:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116986:	29 c2                	sub    %eax,%edx
f0116988:	89 d0                	mov    %edx,%eax
f011698a:	83 f8 01             	cmp    $0x1,%eax
f011698d:	74 17                	je     f01169a6 <test_kfree_bestfit+0x1152>
f011698f:	83 ec 04             	sub    $0x4,%esp
f0116992:	68 24 ea 11 f0       	push   $0xf011ea24
f0116997:	68 11 07 00 00       	push   $0x711
f011699c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01169a1:	e8 ed 97 fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01169a6:	e8 0f 40 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01169ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01169ae:	e8 aa 5c ff ff       	call   f010c65d <pf_calculate_free_frames>
f01169b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01169b6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01169bc:	83 ec 0c             	sub    $0xc,%esp
f01169bf:	50                   	push   %eax
f01169c0:	e8 3d 66 ff ff       	call   f010d002 <kfree>
f01169c5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01169c8:	e8 90 5c ff ff       	call   f010c65d <pf_calculate_free_frames>
f01169cd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01169d0:	74 17                	je     f01169e9 <test_kfree_bestfit+0x1195>
f01169d2:	83 ec 04             	sub    $0x4,%esp
f01169d5:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01169da:	68 17 07 00 00       	push   $0x717
f01169df:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01169e4:	e8 aa 97 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01169e9:	e8 cc 3f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f01169ee:	89 c2                	mov    %eax,%edx
f01169f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01169f3:	29 c2                	sub    %eax,%edx
f01169f5:	89 d0                	mov    %edx,%eax
f01169f7:	83 f8 01             	cmp    $0x1,%eax
f01169fa:	74 17                	je     f0116a13 <test_kfree_bestfit+0x11bf>
f01169fc:	83 ec 04             	sub    $0x4,%esp
f01169ff:	68 24 ea 11 f0       	push   $0xf011ea24
f0116a04:	68 18 07 00 00       	push   $0x718
f0116a09:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116a0e:	e8 80 97 fe ff       	call   f0100193 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0116a13:	e8 a2 3f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116a18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a1b:	e8 3d 5c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116a20:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0116a23:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116a29:	83 ec 0c             	sub    $0xc,%esp
f0116a2c:	50                   	push   %eax
f0116a2d:	e8 d0 65 ff ff       	call   f010d002 <kfree>
f0116a32:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116a35:	e8 23 5c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116a3a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116a3d:	74 17                	je     f0116a56 <test_kfree_bestfit+0x1202>
f0116a3f:	83 ec 04             	sub    $0x4,%esp
f0116a42:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116a47:	68 1e 07 00 00       	push   $0x71e
f0116a4c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116a51:	e8 3d 97 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0116a56:	e8 5f 3f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116a5b:	89 c2                	mov    %eax,%edx
f0116a5d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116a60:	29 c2                	sub    %eax,%edx
f0116a62:	89 d0                	mov    %edx,%eax
f0116a64:	83 f8 04             	cmp    $0x4,%eax
f0116a67:	74 17                	je     f0116a80 <test_kfree_bestfit+0x122c>
f0116a69:	83 ec 04             	sub    $0x4,%esp
f0116a6c:	68 24 ea 11 f0       	push   $0xf011ea24
f0116a71:	68 1f 07 00 00       	push   $0x71f
f0116a76:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116a7b:	e8 13 97 fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0116a80:	e8 35 3f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116a85:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a88:	e8 d0 5b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116a8d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0116a90:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116a96:	83 ec 0c             	sub    $0xc,%esp
f0116a99:	50                   	push   %eax
f0116a9a:	e8 63 65 ff ff       	call   f010d002 <kfree>
f0116a9f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116aa2:	e8 b6 5b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116aa7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116aaa:	74 17                	je     f0116ac3 <test_kfree_bestfit+0x126f>
f0116aac:	83 ec 04             	sub    $0x4,%esp
f0116aaf:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116ab4:	68 25 07 00 00       	push   $0x725
f0116ab9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116abe:	e8 d0 96 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0116ac3:	e8 f2 3e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116ac8:	89 c2                	mov    %eax,%edx
f0116aca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116acd:	29 c2                	sub    %eax,%edx
f0116acf:	89 d0                	mov    %edx,%eax
f0116ad1:	83 f8 05             	cmp    $0x5,%eax
f0116ad4:	74 17                	je     f0116aed <test_kfree_bestfit+0x1299>
f0116ad6:	83 ec 04             	sub    $0x4,%esp
f0116ad9:	68 24 ea 11 f0       	push   $0xf011ea24
f0116ade:	68 26 07 00 00       	push   $0x726
f0116ae3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116ae8:	e8 a6 96 fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0116aed:	e8 c8 3e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116af2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116af5:	e8 63 5b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116afa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0116afd:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116b03:	83 ec 0c             	sub    $0xc,%esp
f0116b06:	50                   	push   %eax
f0116b07:	e8 f6 64 ff ff       	call   f010d002 <kfree>
f0116b0c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116b0f:	e8 49 5b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116b14:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116b17:	74 17                	je     f0116b30 <test_kfree_bestfit+0x12dc>
f0116b19:	83 ec 04             	sub    $0x4,%esp
f0116b1c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116b21:	68 2c 07 00 00       	push   $0x72c
f0116b26:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116b2b:	e8 63 96 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0116b30:	e8 85 3e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116b35:	89 c2                	mov    %eax,%edx
f0116b37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116b3a:	29 c2                	sub    %eax,%edx
f0116b3c:	89 d0                	mov    %edx,%eax
f0116b3e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116b43:	74 17                	je     f0116b5c <test_kfree_bestfit+0x1308>
f0116b45:	83 ec 04             	sub    $0x4,%esp
f0116b48:	68 24 ea 11 f0       	push   $0xf011ea24
f0116b4d:	68 2d 07 00 00       	push   $0x72d
f0116b52:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116b57:	e8 37 96 fe ff       	call   f0100193 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0116b5c:	e8 59 3e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116b61:	89 c2                	mov    %eax,%edx
f0116b63:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116b66:	39 c2                	cmp    %eax,%edx
f0116b68:	74 17                	je     f0116b81 <test_kfree_bestfit+0x132d>
f0116b6a:	83 ec 04             	sub    $0x4,%esp
f0116b6d:	68 c4 ea 11 f0       	push   $0xf011eac4
f0116b72:	68 2f 07 00 00       	push   $0x72f
f0116b77:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116b7c:	e8 12 96 fe ff       	call   f0100193 <_panic>
	}
	cprintf("\b\b\b60%");
f0116b81:	83 ec 0c             	sub    $0xc,%esp
f0116b84:	68 f8 ea 11 f0       	push   $0xf011eaf8
f0116b89:	e8 15 0a ff ff       	call   f01075a3 <cprintf>
f0116b8e:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0116b91:	83 ec 0c             	sub    $0xc,%esp
f0116b94:	6a 03                	push   $0x3
f0116b96:	e8 a8 41 ff ff       	call   f010ad43 <sys_bypassPageFault>
f0116b9b:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0116b9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116ba5:	e9 82 00 00 00       	jmp    f0116c2c <test_kfree_bestfit+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0116baa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116bad:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0116bb4:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0116bb7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116bba:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0116bbd:	e8 6f 41 ff ff       	call   f010ad31 <sys_rcr2>
f0116bc2:	89 c2                	mov    %eax,%edx
f0116bc4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116bc7:	39 c2                	cmp    %eax,%edx
f0116bc9:	74 17                	je     f0116be2 <test_kfree_bestfit+0x138e>
f0116bcb:	83 ec 04             	sub    $0x4,%esp
f0116bce:	68 00 eb 11 f0       	push   $0xf011eb00
f0116bd3:	68 3e 07 00 00       	push   $0x73e
f0116bd8:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116bdd:	e8 b1 95 fe ff       	call   f0100193 <_panic>
			ptr[lastIndices[i]] = 10;
f0116be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116be5:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0116bec:	89 c2                	mov    %eax,%edx
f0116bee:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116bf1:	01 d0                	add    %edx,%eax
f0116bf3:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0116bf6:	e8 36 41 ff ff       	call   f010ad31 <sys_rcr2>
f0116bfb:	89 c2                	mov    %eax,%edx
f0116bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c00:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0116c07:	89 c1                	mov    %eax,%ecx
f0116c09:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116c0c:	01 c8                	add    %ecx,%eax
f0116c0e:	39 c2                	cmp    %eax,%edx
f0116c10:	74 17                	je     f0116c29 <test_kfree_bestfit+0x13d5>
f0116c12:	83 ec 04             	sub    $0x4,%esp
f0116c15:	68 00 eb 11 f0       	push   $0xf011eb00
f0116c1a:	68 40 07 00 00       	push   $0x740
f0116c1f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116c24:	e8 6a 95 fe ff       	call   f0100193 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0116c29:	ff 45 f4             	incl   -0xc(%ebp)
f0116c2c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0116c30:	0f 8e 74 ff ff ff    	jle    f0116baa <test_kfree_bestfit+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0116c36:	83 ec 0c             	sub    $0xc,%esp
f0116c39:	6a 00                	push   $0x0
f0116c3b:	e8 03 41 ff ff       	call   f010ad43 <sys_bypassPageFault>
f0116c40:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0116c43:	83 ec 0c             	sub    $0xc,%esp
f0116c46:	68 45 eb 11 f0       	push   $0xf011eb45
f0116c4b:	e8 53 09 ff ff       	call   f01075a3 <cprintf>
f0116c50:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116c53:	e8 62 3d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116c58:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c5b:	e8 fd 59 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116c60:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0116c63:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0116c69:	83 ec 0c             	sub    $0xc,%esp
f0116c6c:	50                   	push   %eax
f0116c6d:	e8 90 63 ff ff       	call   f010d002 <kfree>
f0116c72:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c75:	e8 e3 59 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116c7a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116c7d:	74 17                	je     f0116c96 <test_kfree_bestfit+0x1442>
f0116c7f:	83 ec 04             	sub    $0x4,%esp
f0116c82:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116c87:	68 4e 07 00 00       	push   $0x74e
f0116c8c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116c91:	e8 fd 94 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116c96:	e8 1f 3d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116c9b:	89 c2                	mov    %eax,%edx
f0116c9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116ca0:	39 c2                	cmp    %eax,%edx
f0116ca2:	74 17                	je     f0116cbb <test_kfree_bestfit+0x1467>
f0116ca4:	83 ec 04             	sub    $0x4,%esp
f0116ca7:	68 4c eb 11 f0       	push   $0xf011eb4c
f0116cac:	68 4f 07 00 00       	push   $0x74f
f0116cb1:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116cb6:	e8 d8 94 fe ff       	call   f0100193 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116cbb:	e8 fa 3c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116cc0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116cc3:	e8 95 59 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116cc8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0116ccb:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0116cd1:	83 ec 0c             	sub    $0xc,%esp
f0116cd4:	50                   	push   %eax
f0116cd5:	e8 28 63 ff ff       	call   f010d002 <kfree>
f0116cda:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116cdd:	e8 7b 59 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116ce2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116ce5:	74 17                	je     f0116cfe <test_kfree_bestfit+0x14aa>
f0116ce7:	83 ec 04             	sub    $0x4,%esp
f0116cea:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116cef:	68 55 07 00 00       	push   $0x755
f0116cf4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116cf9:	e8 95 94 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116cfe:	e8 b7 3c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116d03:	89 c2                	mov    %eax,%edx
f0116d05:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116d08:	39 c2                	cmp    %eax,%edx
f0116d0a:	74 17                	je     f0116d23 <test_kfree_bestfit+0x14cf>
f0116d0c:	83 ec 04             	sub    $0x4,%esp
f0116d0f:	68 4c eb 11 f0       	push   $0xf011eb4c
f0116d14:	68 56 07 00 00       	push   $0x756
f0116d19:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116d1e:	e8 70 94 fe ff       	call   f0100193 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0116d23:	e8 92 3c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116d28:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d2b:	e8 2d 59 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116d30:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0116d33:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116d39:	83 ec 0c             	sub    $0xc,%esp
f0116d3c:	50                   	push   %eax
f0116d3d:	e8 c0 62 ff ff       	call   f010d002 <kfree>
f0116d42:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116d45:	e8 13 59 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116d4a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116d4d:	74 17                	je     f0116d66 <test_kfree_bestfit+0x1512>
f0116d4f:	83 ec 04             	sub    $0x4,%esp
f0116d52:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116d57:	68 5c 07 00 00       	push   $0x75c
f0116d5c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116d61:	e8 2d 94 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116d66:	e8 4f 3c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116d6b:	89 c2                	mov    %eax,%edx
f0116d6d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116d70:	39 c2                	cmp    %eax,%edx
f0116d72:	74 17                	je     f0116d8b <test_kfree_bestfit+0x1537>
f0116d74:	83 ec 04             	sub    $0x4,%esp
f0116d77:	68 4c eb 11 f0       	push   $0xf011eb4c
f0116d7c:	68 5d 07 00 00       	push   $0x75d
f0116d81:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116d86:	e8 08 94 fe ff       	call   f0100193 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0116d8b:	e8 2a 3c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116d90:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116d93:	e8 c5 58 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116d98:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0116d9b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116da1:	83 ec 0c             	sub    $0xc,%esp
f0116da4:	50                   	push   %eax
f0116da5:	e8 58 62 ff ff       	call   f010d002 <kfree>
f0116daa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116dad:	e8 ab 58 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116db2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116db5:	74 17                	je     f0116dce <test_kfree_bestfit+0x157a>
f0116db7:	83 ec 04             	sub    $0x4,%esp
f0116dba:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116dbf:	68 63 07 00 00       	push   $0x763
f0116dc4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116dc9:	e8 c5 93 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116dce:	e8 e7 3b ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116dd3:	89 c2                	mov    %eax,%edx
f0116dd5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116dd8:	39 c2                	cmp    %eax,%edx
f0116dda:	74 17                	je     f0116df3 <test_kfree_bestfit+0x159f>
f0116ddc:	83 ec 04             	sub    $0x4,%esp
f0116ddf:	68 4c eb 11 f0       	push   $0xf011eb4c
f0116de4:	68 64 07 00 00       	push   $0x764
f0116de9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116dee:	e8 a0 93 fe ff       	call   f0100193 <_panic>

	}
	cprintf("\b\b\b85%");
f0116df3:	83 ec 0c             	sub    $0xc,%esp
f0116df6:	68 93 eb 11 f0       	push   $0xf011eb93
f0116dfb:	e8 a3 07 ff ff       	call   f01075a3 <cprintf>
f0116e00:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0116e03:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0116e0a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116e11:	eb 4a                	jmp    f0116e5d <test_kfree_bestfit+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0116e13:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116e16:	89 c1                	mov    %eax,%ecx
f0116e18:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0116e1d:	83 ec 04             	sub    $0x4,%esp
f0116e20:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0116e26:	52                   	push   %edx
f0116e27:	51                   	push   %ecx
f0116e28:	50                   	push   %eax
f0116e29:	e8 40 d0 fe ff       	call   f0103e6e <get_page_table>
f0116e2e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0116e31:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0116e37:	85 c0                	test   %eax,%eax
f0116e39:	75 17                	jne    f0116e52 <test_kfree_bestfit+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0116e3b:	83 ec 04             	sub    $0x4,%esp
f0116e3e:	68 9c eb 11 f0       	push   $0xf011eb9c
f0116e43:	68 72 07 00 00       	push   $0x772
f0116e48:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116e4d:	e8 41 93 fe ff       	call   f0100193 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0116e52:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0116e59:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0116e5d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e61:	78 b0                	js     f0116e13 <test_kfree_bestfit+0x15bf>
f0116e63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116e67:	7f 09                	jg     f0116e72 <test_kfree_bestfit+0x161e>
f0116e69:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0116e70:	76 a1                	jbe    f0116e13 <test_kfree_bestfit+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0116e72:	83 ec 0c             	sub    $0xc,%esp
f0116e75:	68 c2 e4 11 f0       	push   $0xf011e4c2
f0116e7a:	e8 24 07 ff ff       	call   f01075a3 <cprintf>
f0116e7f:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0116e82:	83 ec 0c             	sub    $0xc,%esp
f0116e85:	68 04 ec 11 f0       	push   $0xf011ec04
f0116e8a:	e8 14 07 ff ff       	call   f01075a3 <cprintf>
f0116e8f:	83 c4 10             	add    $0x10,%esp

	return 1;
f0116e92:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0116e97:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0116e9a:	5b                   	pop    %ebx
f0116e9b:	5f                   	pop    %edi
f0116e9c:	5d                   	pop    %ebp
f0116e9d:	c3                   	ret    

f0116e9e <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0116e9e:	55                   	push   %ebp
f0116e9f:	89 e5                	mov    %esp,%ebp
f0116ea1:	57                   	push   %edi
f0116ea2:	56                   	push   %esi
f0116ea3:	53                   	push   %ebx
f0116ea4:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f0116eaa:	83 ec 0c             	sub    $0xc,%esp
f0116ead:	68 28 e2 11 f0       	push   $0xf011e228
f0116eb2:	e8 ec 06 ff ff       	call   f01075a3 <cprintf>
f0116eb7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0116eba:	83 ec 0c             	sub    $0xc,%esp
f0116ebd:	68 58 e2 11 f0       	push   $0xf011e258
f0116ec2:	e8 dc 06 ff ff       	call   f01075a3 <cprintf>
f0116ec7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0116eca:	83 ec 0c             	sub    $0xc,%esp
f0116ecd:	68 28 e2 11 f0       	push   $0xf011e228
f0116ed2:	e8 cc 06 ff ff       	call   f01075a3 <cprintf>
f0116ed7:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0116eda:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0116ede:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0116ee2:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0116ee8:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0116eee:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0116ef5:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0116efc:	e8 b9 3a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116f01:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0116f04:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0116f0a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116f0f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f14:	89 d7                	mov    %edx,%edi
f0116f16:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0116f18:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0116f1e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116f23:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f28:	89 d7                	mov    %edx,%edi
f0116f2a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0116f2c:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0116f32:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116f37:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f3c:	89 d7                	mov    %edx,%edi
f0116f3e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116f40:	e8 75 3a ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0116f45:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f48:	e8 10 57 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116f4d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116f50:	83 ec 0c             	sub    $0xc,%esp
f0116f53:	68 00 fc 1f 00       	push   $0x1ffc00
f0116f58:	e8 8b 60 ff ff       	call   f010cfe8 <kmalloc>
f0116f5d:	83 c4 10             	add    $0x10,%esp
f0116f60:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116f66:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0116f6c:	89 c1                	mov    %eax,%ecx
f0116f6e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0116f75:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0116f7a:	0f b6 d0             	movzbl %al,%edx
f0116f7d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0116f80:	01 d0                	add    %edx,%eax
f0116f82:	48                   	dec    %eax
f0116f83:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0116f86:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116f89:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f8e:	f7 75 a0             	divl   -0x60(%ebp)
f0116f91:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116f94:	29 d0                	sub    %edx,%eax
f0116f96:	89 c3                	mov    %eax,%ebx
f0116f98:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0116f9f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0116fa4:	0f b6 c0             	movzbl %al,%eax
f0116fa7:	c1 e0 04             	shl    $0x4,%eax
f0116faa:	89 c2                	mov    %eax,%edx
f0116fac:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116faf:	01 d0                	add    %edx,%eax
f0116fb1:	48                   	dec    %eax
f0116fb2:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0116fb5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116fb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0116fbd:	f7 75 98             	divl   -0x68(%ebp)
f0116fc0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116fc3:	29 d0                	sub    %edx,%eax
f0116fc5:	01 d8                	add    %ebx,%eax
f0116fc7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0116fcc:	39 c1                	cmp    %eax,%ecx
f0116fce:	74 17                	je     f0116fe7 <test_kheap_phys_addr+0x149>
f0116fd0:	83 ec 04             	sub    $0x4,%esp
f0116fd3:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0116fd8:	68 9f 07 00 00       	push   $0x79f
f0116fdd:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0116fe2:	e8 ac 91 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116fe7:	e8 71 56 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0116fec:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0116fef:	74 17                	je     f0117008 <test_kheap_phys_addr+0x16a>
f0116ff1:	83 ec 04             	sub    $0x4,%esp
f0116ff4:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0116ff9:	68 a0 07 00 00       	push   $0x7a0
f0116ffe:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117003:	e8 8b 91 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117008:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011700b:	e8 aa 39 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117010:	29 c3                	sub    %eax,%ebx
f0117012:	89 d8                	mov    %ebx,%eax
f0117014:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117019:	74 17                	je     f0117032 <test_kheap_phys_addr+0x194>
f011701b:	83 ec 04             	sub    $0x4,%esp
f011701e:	68 60 e3 11 f0       	push   $0xf011e360
f0117023:	68 a1 07 00 00       	push   $0x7a1
f0117028:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011702d:	e8 61 91 fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117032:	e8 83 39 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117037:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011703a:	e8 1e 56 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011703f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117042:	83 ec 0c             	sub    $0xc,%esp
f0117045:	68 00 fc 1f 00       	push   $0x1ffc00
f011704a:	e8 99 5f ff ff       	call   f010cfe8 <kmalloc>
f011704f:	83 c4 10             	add    $0x10,%esp
f0117052:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117058:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f011705e:	89 c1                	mov    %eax,%ecx
f0117060:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0117067:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011706c:	0f b6 d0             	movzbl %al,%edx
f011706f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117072:	01 d0                	add    %edx,%eax
f0117074:	48                   	dec    %eax
f0117075:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0117078:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011707b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117080:	f7 75 90             	divl   -0x70(%ebp)
f0117083:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117086:	29 d0                	sub    %edx,%eax
f0117088:	89 c3                	mov    %eax,%ebx
f011708a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0117091:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117096:	0f b6 c0             	movzbl %al,%eax
f0117099:	c1 e0 04             	shl    $0x4,%eax
f011709c:	89 c2                	mov    %eax,%edx
f011709e:	8b 45 88             	mov    -0x78(%ebp),%eax
f01170a1:	01 d0                	add    %edx,%eax
f01170a3:	48                   	dec    %eax
f01170a4:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01170a7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01170aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01170af:	f7 75 88             	divl   -0x78(%ebp)
f01170b2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01170b5:	29 d0                	sub    %edx,%eax
f01170b7:	01 d8                	add    %ebx,%eax
f01170b9:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01170be:	39 c1                	cmp    %eax,%ecx
f01170c0:	74 17                	je     f01170d9 <test_kheap_phys_addr+0x23b>
f01170c2:	83 ec 04             	sub    $0x4,%esp
f01170c5:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01170ca:	68 a7 07 00 00       	push   $0x7a7
f01170cf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01170d4:	e8 ba 90 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01170d9:	e8 7f 55 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01170de:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01170e1:	74 17                	je     f01170fa <test_kheap_phys_addr+0x25c>
f01170e3:	83 ec 04             	sub    $0x4,%esp
f01170e6:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01170eb:	68 a8 07 00 00       	push   $0x7a8
f01170f0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01170f5:	e8 99 90 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01170fa:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01170fd:	e8 b8 38 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117102:	29 c3                	sub    %eax,%ebx
f0117104:	89 d8                	mov    %ebx,%eax
f0117106:	3d 00 02 00 00       	cmp    $0x200,%eax
f011710b:	74 17                	je     f0117124 <test_kheap_phys_addr+0x286>
f011710d:	83 ec 04             	sub    $0x4,%esp
f0117110:	68 60 e3 11 f0       	push   $0xf011e360
f0117115:	68 a9 07 00 00       	push   $0x7a9
f011711a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011711f:	e8 6f 90 fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117124:	e8 91 38 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117129:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011712c:	e8 2c 55 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117131:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117134:	83 ec 0c             	sub    $0xc,%esp
f0117137:	68 00 08 00 00       	push   $0x800
f011713c:	e8 a7 5e ff ff       	call   f010cfe8 <kmalloc>
f0117141:	83 c4 10             	add    $0x10,%esp
f0117144:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011714a:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0117150:	89 c1                	mov    %eax,%ecx
f0117152:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0117159:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011715e:	0f b6 d0             	movzbl %al,%edx
f0117161:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117164:	01 d0                	add    %edx,%eax
f0117166:	48                   	dec    %eax
f0117167:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011716d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117173:	ba 00 00 00 00       	mov    $0x0,%edx
f0117178:	f7 75 80             	divl   -0x80(%ebp)
f011717b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0117181:	29 d0                	sub    %edx,%eax
f0117183:	89 c3                	mov    %eax,%ebx
f0117185:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011718c:	10 00 00 
f011718f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117194:	0f b6 c0             	movzbl %al,%eax
f0117197:	c1 e0 04             	shl    $0x4,%eax
f011719a:	89 c2                	mov    %eax,%edx
f011719c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01171a2:	01 d0                	add    %edx,%eax
f01171a4:	48                   	dec    %eax
f01171a5:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01171ab:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01171b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01171b6:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01171bc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01171c2:	29 d0                	sub    %edx,%eax
f01171c4:	01 d8                	add    %ebx,%eax
f01171c6:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01171cb:	39 c1                	cmp    %eax,%ecx
f01171cd:	74 17                	je     f01171e6 <test_kheap_phys_addr+0x348>
f01171cf:	83 ec 04             	sub    $0x4,%esp
f01171d2:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01171d7:	68 af 07 00 00       	push   $0x7af
f01171dc:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01171e1:	e8 ad 8f fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01171e6:	e8 72 54 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01171eb:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01171ee:	74 17                	je     f0117207 <test_kheap_phys_addr+0x369>
f01171f0:	83 ec 04             	sub    $0x4,%esp
f01171f3:	68 f8 e2 11 f0       	push   $0xf011e2f8
f01171f8:	68 b0 07 00 00       	push   $0x7b0
f01171fd:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117202:	e8 8c 8f fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117207:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011720a:	e8 ab 37 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011720f:	29 c3                	sub    %eax,%ebx
f0117211:	89 d8                	mov    %ebx,%eax
f0117213:	83 f8 01             	cmp    $0x1,%eax
f0117216:	74 17                	je     f011722f <test_kheap_phys_addr+0x391>
f0117218:	83 ec 04             	sub    $0x4,%esp
f011721b:	68 60 e3 11 f0       	push   $0xf011e360
f0117220:	68 b1 07 00 00       	push   $0x7b1
f0117225:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011722a:	e8 64 8f fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011722f:	e8 86 37 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117234:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117237:	e8 21 54 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011723c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011723f:	83 ec 0c             	sub    $0xc,%esp
f0117242:	68 00 08 00 00       	push   $0x800
f0117247:	e8 9c 5d ff ff       	call   f010cfe8 <kmalloc>
f011724c:	83 c4 10             	add    $0x10,%esp
f011724f:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117255:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f011725b:	89 c1                	mov    %eax,%ecx
f011725d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117264:	10 00 00 
f0117267:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011726c:	0f b6 d0             	movzbl %al,%edx
f011726f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0117275:	01 d0                	add    %edx,%eax
f0117277:	48                   	dec    %eax
f0117278:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011727e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117284:	ba 00 00 00 00       	mov    $0x0,%edx
f0117289:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011728f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0117295:	29 d0                	sub    %edx,%eax
f0117297:	89 c3                	mov    %eax,%ebx
f0117299:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01172a0:	10 00 00 
f01172a3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01172a8:	0f b6 c0             	movzbl %al,%eax
f01172ab:	c1 e0 04             	shl    $0x4,%eax
f01172ae:	89 c2                	mov    %eax,%edx
f01172b0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01172b6:	01 d0                	add    %edx,%eax
f01172b8:	48                   	dec    %eax
f01172b9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01172bf:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01172c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01172ca:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01172d0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01172d6:	29 d0                	sub    %edx,%eax
f01172d8:	01 d8                	add    %ebx,%eax
f01172da:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01172df:	39 c1                	cmp    %eax,%ecx
f01172e1:	74 17                	je     f01172fa <test_kheap_phys_addr+0x45c>
f01172e3:	83 ec 04             	sub    $0x4,%esp
f01172e6:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01172eb:	68 b7 07 00 00       	push   $0x7b7
f01172f0:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01172f5:	e8 99 8e fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01172fa:	e8 5e 53 ff ff       	call   f010c65d <pf_calculate_free_frames>
f01172ff:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0117302:	74 17                	je     f011731b <test_kheap_phys_addr+0x47d>
f0117304:	83 ec 04             	sub    $0x4,%esp
f0117307:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011730c:	68 b8 07 00 00       	push   $0x7b8
f0117311:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117316:	e8 78 8e fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011731b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011731e:	e8 97 36 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117323:	29 c3                	sub    %eax,%ebx
f0117325:	89 d8                	mov    %ebx,%eax
f0117327:	83 f8 01             	cmp    $0x1,%eax
f011732a:	74 17                	je     f0117343 <test_kheap_phys_addr+0x4a5>
f011732c:	83 ec 04             	sub    $0x4,%esp
f011732f:	68 60 e3 11 f0       	push   $0xf011e360
f0117334:	68 b9 07 00 00       	push   $0x7b9
f0117339:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011733e:	e8 50 8e fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0117343:	e8 72 36 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117348:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011734b:	e8 0d 53 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117350:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0117353:	83 ec 0c             	sub    $0xc,%esp
f0117356:	68 00 1c 00 00       	push   $0x1c00
f011735b:	e8 88 5c ff ff       	call   f010cfe8 <kmalloc>
f0117360:	83 c4 10             	add    $0x10,%esp
f0117363:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117369:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f011736f:	89 c1                	mov    %eax,%ecx
f0117371:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0117378:	10 00 00 
f011737b:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117380:	0f b6 d0             	movzbl %al,%edx
f0117383:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117389:	01 d0                	add    %edx,%eax
f011738b:	48                   	dec    %eax
f011738c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0117392:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117398:	ba 00 00 00 00       	mov    $0x0,%edx
f011739d:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01173a3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01173a9:	29 d0                	sub    %edx,%eax
f01173ab:	89 c3                	mov    %eax,%ebx
f01173ad:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01173b4:	10 00 00 
f01173b7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01173bc:	0f b6 c0             	movzbl %al,%eax
f01173bf:	c1 e0 04             	shl    $0x4,%eax
f01173c2:	89 c2                	mov    %eax,%edx
f01173c4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01173ca:	01 d0                	add    %edx,%eax
f01173cc:	48                   	dec    %eax
f01173cd:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01173d3:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01173d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01173de:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01173e4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01173ea:	29 d0                	sub    %edx,%eax
f01173ec:	01 d8                	add    %ebx,%eax
f01173ee:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01173f3:	39 c1                	cmp    %eax,%ecx
f01173f5:	74 17                	je     f011740e <test_kheap_phys_addr+0x570>
f01173f7:	83 ec 04             	sub    $0x4,%esp
f01173fa:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01173ff:	68 bf 07 00 00       	push   $0x7bf
f0117404:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117409:	e8 85 8d fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011740e:	e8 4a 52 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117413:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0117416:	74 17                	je     f011742f <test_kheap_phys_addr+0x591>
f0117418:	83 ec 04             	sub    $0x4,%esp
f011741b:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0117420:	68 c0 07 00 00       	push   $0x7c0
f0117425:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011742a:	e8 64 8d fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011742f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117432:	e8 83 35 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117437:	29 c3                	sub    %eax,%ebx
f0117439:	89 d8                	mov    %ebx,%eax
f011743b:	83 f8 02             	cmp    $0x2,%eax
f011743e:	74 17                	je     f0117457 <test_kheap_phys_addr+0x5b9>
f0117440:	83 ec 04             	sub    $0x4,%esp
f0117443:	68 60 e3 11 f0       	push   $0xf011e360
f0117448:	68 c1 07 00 00       	push   $0x7c1
f011744d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117452:	e8 3c 8d fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117457:	e8 5e 35 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011745c:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011745f:	e8 f9 51 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117464:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117467:	83 ec 0c             	sub    $0xc,%esp
f011746a:	68 00 fc 2f 00       	push   $0x2ffc00
f011746f:	e8 74 5b ff ff       	call   f010cfe8 <kmalloc>
f0117474:	83 c4 10             	add    $0x10,%esp
f0117477:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011747d:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0117483:	89 c1                	mov    %eax,%ecx
f0117485:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011748c:	10 00 00 
f011748f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117494:	0f b6 d0             	movzbl %al,%edx
f0117497:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011749d:	01 d0                	add    %edx,%eax
f011749f:	48                   	dec    %eax
f01174a0:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01174a6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01174ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01174b1:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01174b7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01174bd:	29 d0                	sub    %edx,%eax
f01174bf:	89 c3                	mov    %eax,%ebx
f01174c1:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01174c8:	10 00 00 
f01174cb:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01174d0:	0f b6 c0             	movzbl %al,%eax
f01174d3:	c1 e0 04             	shl    $0x4,%eax
f01174d6:	89 c2                	mov    %eax,%edx
f01174d8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01174de:	01 d0                	add    %edx,%eax
f01174e0:	48                   	dec    %eax
f01174e1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01174e7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01174ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01174f2:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01174f8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01174fe:	29 d0                	sub    %edx,%eax
f0117500:	01 d8                	add    %ebx,%eax
f0117502:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117507:	39 c1                	cmp    %eax,%ecx
f0117509:	74 17                	je     f0117522 <test_kheap_phys_addr+0x684>
f011750b:	83 ec 04             	sub    $0x4,%esp
f011750e:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0117513:	68 c7 07 00 00       	push   $0x7c7
f0117518:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011751d:	e8 71 8c fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117522:	e8 36 51 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117527:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011752a:	74 17                	je     f0117543 <test_kheap_phys_addr+0x6a5>
f011752c:	83 ec 04             	sub    $0x4,%esp
f011752f:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0117534:	68 c8 07 00 00       	push   $0x7c8
f0117539:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011753e:	e8 50 8c fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117543:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117546:	e8 6f 34 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011754b:	29 c3                	sub    %eax,%ebx
f011754d:	89 d8                	mov    %ebx,%eax
f011754f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117554:	74 17                	je     f011756d <test_kheap_phys_addr+0x6cf>
f0117556:	83 ec 04             	sub    $0x4,%esp
f0117559:	68 60 e3 11 f0       	push   $0xf011e360
f011755e:	68 c9 07 00 00       	push   $0x7c9
f0117563:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117568:	e8 26 8c fe ff       	call   f0100193 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011756d:	e8 48 34 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117572:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117575:	e8 e3 50 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011757a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011757d:	83 ec 0c             	sub    $0xc,%esp
f0117580:	68 00 fc 5f 00       	push   $0x5ffc00
f0117585:	e8 5e 5a ff ff       	call   f010cfe8 <kmalloc>
f011758a:	83 c4 10             	add    $0x10,%esp
f011758d:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117593:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0117599:	89 c1                	mov    %eax,%ecx
f011759b:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01175a2:	10 00 00 
f01175a5:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01175aa:	0f b6 d0             	movzbl %al,%edx
f01175ad:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01175b3:	01 d0                	add    %edx,%eax
f01175b5:	48                   	dec    %eax
f01175b6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01175bc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01175c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01175c7:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01175cd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01175d3:	29 d0                	sub    %edx,%eax
f01175d5:	89 c3                	mov    %eax,%ebx
f01175d7:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01175de:	10 00 00 
f01175e1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01175e6:	0f b6 c0             	movzbl %al,%eax
f01175e9:	c1 e0 04             	shl    $0x4,%eax
f01175ec:	89 c2                	mov    %eax,%edx
f01175ee:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01175f4:	01 d0                	add    %edx,%eax
f01175f6:	48                   	dec    %eax
f01175f7:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01175fd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117603:	ba 00 00 00 00       	mov    $0x0,%edx
f0117608:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011760e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117614:	29 d0                	sub    %edx,%eax
f0117616:	01 d8                	add    %ebx,%eax
f0117618:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011761d:	39 c1                	cmp    %eax,%ecx
f011761f:	74 17                	je     f0117638 <test_kheap_phys_addr+0x79a>
f0117621:	83 ec 04             	sub    $0x4,%esp
f0117624:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0117629:	68 cf 07 00 00       	push   $0x7cf
f011762e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117633:	e8 5b 8b fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117638:	e8 20 50 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011763d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0117640:	74 17                	je     f0117659 <test_kheap_phys_addr+0x7bb>
f0117642:	83 ec 04             	sub    $0x4,%esp
f0117645:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011764a:	68 d0 07 00 00       	push   $0x7d0
f011764f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117654:	e8 3a 8b fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117659:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011765c:	e8 59 33 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117661:	29 c3                	sub    %eax,%ebx
f0117663:	89 d8                	mov    %ebx,%eax
f0117665:	3d 00 06 00 00       	cmp    $0x600,%eax
f011766a:	74 17                	je     f0117683 <test_kheap_phys_addr+0x7e5>
f011766c:	83 ec 04             	sub    $0x4,%esp
f011766f:	68 60 e3 11 f0       	push   $0xf011e360
f0117674:	68 d1 07 00 00       	push   $0x7d1
f0117679:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011767e:	e8 10 8b fe ff       	call   f0100193 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117683:	e8 32 33 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117688:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011768b:	e8 cd 4f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117690:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117693:	83 ec 0c             	sub    $0xc,%esp
f0117696:	68 00 38 00 00       	push   $0x3800
f011769b:	e8 48 59 ff ff       	call   f010cfe8 <kmalloc>
f01176a0:	83 c4 10             	add    $0x10,%esp
f01176a3:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01176a9:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01176af:	89 c1                	mov    %eax,%ecx
f01176b1:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01176b8:	10 00 00 
f01176bb:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01176c0:	0f b6 d0             	movzbl %al,%edx
f01176c3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01176c9:	01 d0                	add    %edx,%eax
f01176cb:	48                   	dec    %eax
f01176cc:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01176d2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01176d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01176dd:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01176e3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01176e9:	29 d0                	sub    %edx,%eax
f01176eb:	89 c3                	mov    %eax,%ebx
f01176ed:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01176f4:	10 00 00 
f01176f7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01176fc:	0f b6 c0             	movzbl %al,%eax
f01176ff:	c1 e0 04             	shl    $0x4,%eax
f0117702:	89 c2                	mov    %eax,%edx
f0117704:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011770a:	01 d0                	add    %edx,%eax
f011770c:	48                   	dec    %eax
f011770d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0117713:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117719:	ba 00 00 00 00       	mov    $0x0,%edx
f011771e:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0117724:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011772a:	29 d0                	sub    %edx,%eax
f011772c:	01 d8                	add    %ebx,%eax
f011772e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0117733:	39 c1                	cmp    %eax,%ecx
f0117735:	74 17                	je     f011774e <test_kheap_phys_addr+0x8b0>
f0117737:	83 ec 04             	sub    $0x4,%esp
f011773a:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011773f:	68 d7 07 00 00       	push   $0x7d7
f0117744:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117749:	e8 45 8a fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011774e:	e8 0a 4f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117753:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0117756:	74 17                	je     f011776f <test_kheap_phys_addr+0x8d1>
f0117758:	83 ec 04             	sub    $0x4,%esp
f011775b:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0117760:	68 d8 07 00 00       	push   $0x7d8
f0117765:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011776a:	e8 24 8a fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011776f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0117772:	e8 43 32 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117777:	29 c3                	sub    %eax,%ebx
f0117779:	89 d8                	mov    %ebx,%eax
f011777b:	83 f8 04             	cmp    $0x4,%eax
f011777e:	74 17                	je     f0117797 <test_kheap_phys_addr+0x8f9>
f0117780:	83 ec 04             	sub    $0x4,%esp
f0117783:	68 60 e3 11 f0       	push   $0xf011e360
f0117788:	68 d9 07 00 00       	push   $0x7d9
f011778d:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117792:	e8 fc 89 fe ff       	call   f0100193 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0117797:	89 e0                	mov    %esp,%eax
f0117799:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011779b:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01177a2:	10 00 00 
f01177a5:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01177aa:	0f b6 d0             	movzbl %al,%edx
f01177ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01177b3:	01 d0                	add    %edx,%eax
f01177b5:	48                   	dec    %eax
f01177b6:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01177bc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01177c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01177c7:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01177cd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01177d3:	29 d0                	sub    %edx,%eax
f01177d5:	89 c1                	mov    %eax,%ecx
f01177d7:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01177de:	10 00 00 
f01177e1:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01177e6:	0f b6 c0             	movzbl %al,%eax
f01177e9:	c1 e0 04             	shl    $0x4,%eax
f01177ec:	89 c2                	mov    %eax,%edx
f01177ee:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01177f4:	01 d0                	add    %edx,%eax
f01177f6:	48                   	dec    %eax
f01177f7:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01177fd:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117803:	ba 00 00 00 00       	mov    $0x0,%edx
f0117808:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011780e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0117814:	29 d0                	sub    %edx,%eax
f0117816:	01 c8                	add    %ecx,%eax
f0117818:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011781d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f0117823:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011782a:	10 00 00 
f011782d:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117832:	0f b6 d0             	movzbl %al,%edx
f0117835:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011783b:	01 d0                	add    %edx,%eax
f011783d:	48                   	dec    %eax
f011783e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0117844:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011784a:	ba 00 00 00 00       	mov    $0x0,%edx
f011784f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0117855:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011785b:	29 d0                	sub    %edx,%eax
f011785d:	89 c1                	mov    %eax,%ecx
f011785f:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0117866:	10 00 00 
f0117869:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011786e:	0f b6 c0             	movzbl %al,%eax
f0117871:	c1 e0 04             	shl    $0x4,%eax
f0117874:	89 c2                	mov    %eax,%edx
f0117876:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011787c:	01 d0                	add    %edx,%eax
f011787e:	48                   	dec    %eax
f011787f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0117885:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011788b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117890:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0117896:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011789c:	29 d0                	sub    %edx,%eax
f011789e:	01 c8                	add    %ecx,%eax
f01178a0:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01178a5:	c1 e8 0c             	shr    $0xc,%eax
f01178a8:	89 c2                	mov    %eax,%edx
f01178aa:	4a                   	dec    %edx
f01178ab:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f01178b1:	c1 e0 02             	shl    $0x2,%eax
f01178b4:	8d 50 03             	lea    0x3(%eax),%edx
f01178b7:	b8 10 00 00 00       	mov    $0x10,%eax
f01178bc:	48                   	dec    %eax
f01178bd:	01 d0                	add    %edx,%eax
f01178bf:	bf 10 00 00 00       	mov    $0x10,%edi
f01178c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01178c9:	f7 f7                	div    %edi
f01178cb:	6b c0 10             	imul   $0x10,%eax,%eax
f01178ce:	29 c4                	sub    %eax,%esp
f01178d0:	89 e0                	mov    %esp,%eax
f01178d2:	83 c0 03             	add    $0x3,%eax
f01178d5:	c1 e8 02             	shr    $0x2,%eax
f01178d8:	c1 e0 02             	shl    $0x2,%eax
f01178db:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f01178e1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f01178e8:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01178ef:	eb 29                	jmp    f011791a <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f01178f1:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01178f4:	8d 43 01             	lea    0x1(%ebx),%eax
f01178f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01178fa:	83 ec 0c             	sub    $0xc,%esp
f01178fd:	ff 75 e0             	pushl  -0x20(%ebp)
f0117900:	e8 31 57 ff ff       	call   f010d036 <kheap_physical_address>
f0117905:	83 c4 10             	add    $0x10,%esp
f0117908:	89 c2                	mov    %eax,%edx
f011790a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0117910:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0117913:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f011791a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011791d:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0117923:	72 cc                	jb     f01178f1 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0117925:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117928:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f011792e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0117935:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011793c:	e9 a5 00 00 00       	jmp    f01179e6 <test_kheap_phys_addr+0xb48>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0117941:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117944:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0117949:	83 ec 04             	sub    $0x4,%esp
f011794c:	8d 8d a8 fd ff ff    	lea    -0x258(%ebp),%ecx
f0117952:	51                   	push   %ecx
f0117953:	52                   	push   %edx
f0117954:	50                   	push   %eax
f0117955:	e8 14 c5 fe ff       	call   f0103e6e <get_page_table>
f011795a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011795d:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0117963:	85 c0                	test   %eax,%eax
f0117965:	75 17                	jne    f011797e <test_kheap_phys_addr+0xae0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0117967:	83 ec 04             	sub    $0x4,%esp
f011796a:	68 3c ec 11 f0       	push   $0xf011ec3c
f011796f:	68 ee 07 00 00       	push   $0x7ee
f0117974:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117979:	e8 15 88 fe ff       	call   f0100193 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011797e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117985:	eb 44                	jmp    f01179cb <test_kheap_phys_addr+0xb2d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0117987:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f011798d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117990:	c1 e2 02             	shl    $0x2,%edx
f0117993:	01 d0                	add    %edx,%eax
f0117995:	8b 00                	mov    (%eax),%eax
f0117997:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011799c:	89 c1                	mov    %eax,%ecx
f011799e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01179a4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01179a7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01179aa:	39 c1                	cmp    %eax,%ecx
f01179ac:	74 17                	je     f01179c5 <test_kheap_phys_addr+0xb27>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01179ae:	83 ec 04             	sub    $0x4,%esp
f01179b1:	68 95 ec 11 f0       	push   $0xf011ec95
f01179b6:	68 f5 07 00 00       	push   $0x7f5
f01179bb:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01179c0:	e8 ce 87 fe ff       	call   f0100193 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01179c5:	ff 45 dc             	incl   -0x24(%ebp)
f01179c8:	ff 45 e4             	incl   -0x1c(%ebp)
f01179cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01179ce:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f01179d4:	7d 09                	jge    f01179df <test_kheap_phys_addr+0xb41>
f01179d6:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01179dd:	7e a8                	jle    f0117987 <test_kheap_phys_addr+0xae9>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01179df:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f01179e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01179e9:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01179ef:	0f 82 4c ff ff ff    	jb     f0117941 <test_kheap_phys_addr+0xaa3>
f01179f5:	89 f4                	mov    %esi,%esp
					panic("Wrong kheap_physical_address");
				}
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01179f7:	83 ec 0c             	sub    $0xc,%esp
f01179fa:	68 b4 ec 11 f0       	push   $0xf011ecb4
f01179ff:	e8 9f fb fe ff       	call   f01075a3 <cprintf>
f0117a04:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0117a07:	e8 ae 2f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117a0c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117a12:	e8 46 4c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117a17:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0117a1d:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0117a23:	83 ec 0c             	sub    $0xc,%esp
f0117a26:	50                   	push   %eax
f0117a27:	e8 d6 55 ff ff       	call   f010d002 <kfree>
f0117a2c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a2f:	e8 29 4c ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117a34:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0117a3a:	74 17                	je     f0117a53 <test_kheap_phys_addr+0xbb5>
f0117a3c:	83 ec 04             	sub    $0x4,%esp
f0117a3f:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0117a44:	68 02 08 00 00       	push   $0x802
f0117a49:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117a4e:	e8 40 87 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0117a53:	e8 62 2f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117a58:	89 c2                	mov    %eax,%edx
f0117a5a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117a60:	29 c2                	sub    %eax,%edx
f0117a62:	89 d0                	mov    %edx,%eax
f0117a64:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117a69:	74 17                	je     f0117a82 <test_kheap_phys_addr+0xbe4>
f0117a6b:	83 ec 04             	sub    $0x4,%esp
f0117a6e:	68 24 ea 11 f0       	push   $0xf011ea24
f0117a73:	68 03 08 00 00       	push   $0x803
f0117a78:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117a7d:	e8 11 87 fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117a82:	e8 33 2f ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117a87:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117a8d:	e8 cb 4b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117a92:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0117a98:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0117a9e:	83 ec 0c             	sub    $0xc,%esp
f0117aa1:	50                   	push   %eax
f0117aa2:	e8 5b 55 ff ff       	call   f010d002 <kfree>
f0117aa7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117aaa:	e8 ae 4b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117aaf:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0117ab5:	74 17                	je     f0117ace <test_kheap_phys_addr+0xc30>
f0117ab7:	83 ec 04             	sub    $0x4,%esp
f0117aba:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0117abf:	68 09 08 00 00       	push   $0x809
f0117ac4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117ac9:	e8 c5 86 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0117ace:	e8 e7 2e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117ad3:	89 c2                	mov    %eax,%edx
f0117ad5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117adb:	29 c2                	sub    %eax,%edx
f0117add:	89 d0                	mov    %edx,%eax
f0117adf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117ae4:	74 17                	je     f0117afd <test_kheap_phys_addr+0xc5f>
f0117ae6:	83 ec 04             	sub    $0x4,%esp
f0117ae9:	68 24 ea 11 f0       	push   $0xf011ea24
f0117aee:	68 0a 08 00 00       	push   $0x80a
f0117af3:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117af8:	e8 96 86 fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117afd:	e8 b8 2e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117b02:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b08:	e8 50 4b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117b0d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0117b13:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0117b19:	83 ec 0c             	sub    $0xc,%esp
f0117b1c:	50                   	push   %eax
f0117b1d:	e8 e0 54 ff ff       	call   f010d002 <kfree>
f0117b22:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117b25:	e8 33 4b ff ff       	call   f010c65d <pf_calculate_free_frames>
f0117b2a:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0117b30:	74 17                	je     f0117b49 <test_kheap_phys_addr+0xcab>
f0117b32:	83 ec 04             	sub    $0x4,%esp
f0117b35:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0117b3a:	68 10 08 00 00       	push   $0x810
f0117b3f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117b44:	e8 4a 86 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0117b49:	e8 6c 2e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0117b4e:	89 c2                	mov    %eax,%edx
f0117b50:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117b56:	29 c2                	sub    %eax,%edx
f0117b58:	89 d0                	mov    %edx,%eax
f0117b5a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117b5f:	74 17                	je     f0117b78 <test_kheap_phys_addr+0xcda>
f0117b61:	83 ec 04             	sub    $0x4,%esp
f0117b64:	68 24 ea 11 f0       	push   $0xf011ea24
f0117b69:	68 11 08 00 00       	push   $0x811
f0117b6e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117b73:	e8 1b 86 fe ff       	call   f0100193 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0117b78:	89 e0                	mov    %esp,%eax
f0117b7a:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0117b7c:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0117b83:	10 00 00 
f0117b86:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117b8b:	0f b6 d0             	movzbl %al,%edx
f0117b8e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117b94:	01 d0                	add    %edx,%eax
f0117b96:	48                   	dec    %eax
f0117b97:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0117b9d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117ba3:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ba8:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0117bae:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117bb4:	29 d0                	sub    %edx,%eax
f0117bb6:	89 c1                	mov    %eax,%ecx
f0117bb8:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0117bbf:	10 00 00 
f0117bc2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117bc7:	0f b6 c0             	movzbl %al,%eax
f0117bca:	c1 e0 04             	shl    $0x4,%eax
f0117bcd:	89 c2                	mov    %eax,%edx
f0117bcf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117bd5:	01 d0                	add    %edx,%eax
f0117bd7:	48                   	dec    %eax
f0117bd8:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0117bde:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117be4:	ba 00 00 00 00       	mov    $0x0,%edx
f0117be9:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0117bef:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117bf5:	29 d0                	sub    %edx,%eax
f0117bf7:	01 c8                	add    %ecx,%eax
f0117bf9:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0117bfe:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f0117c04:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0117c0b:	10 00 00 
f0117c0e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117c13:	0f b6 d0             	movzbl %al,%edx
f0117c16:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117c1c:	01 d0                	add    %edx,%eax
f0117c1e:	48                   	dec    %eax
f0117c1f:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0117c25:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117c2b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c30:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0117c36:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117c3c:	29 d0                	sub    %edx,%eax
f0117c3e:	89 c1                	mov    %eax,%ecx
f0117c40:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0117c47:	10 00 00 
f0117c4a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117c4f:	0f b6 c0             	movzbl %al,%eax
f0117c52:	c1 e0 04             	shl    $0x4,%eax
f0117c55:	89 c2                	mov    %eax,%edx
f0117c57:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117c5d:	01 d0                	add    %edx,%eax
f0117c5f:	48                   	dec    %eax
f0117c60:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0117c66:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117c6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c71:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0117c77:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117c7d:	29 d0                	sub    %edx,%eax
f0117c7f:	01 c8                	add    %ecx,%eax
f0117c81:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0117c86:	c1 e8 0c             	shr    $0xc,%eax
f0117c89:	89 c2                	mov    %eax,%edx
f0117c8b:	4a                   	dec    %edx
f0117c8c:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0117c92:	c1 e0 02             	shl    $0x2,%eax
f0117c95:	8d 50 03             	lea    0x3(%eax),%edx
f0117c98:	b8 10 00 00 00       	mov    $0x10,%eax
f0117c9d:	48                   	dec    %eax
f0117c9e:	01 d0                	add    %edx,%eax
f0117ca0:	bf 10 00 00 00       	mov    $0x10,%edi
f0117ca5:	ba 00 00 00 00       	mov    $0x0,%edx
f0117caa:	f7 f7                	div    %edi
f0117cac:	6b c0 10             	imul   $0x10,%eax,%eax
f0117caf:	29 c4                	sub    %eax,%esp
f0117cb1:	89 e0                	mov    %esp,%eax
f0117cb3:	83 c0 03             	add    $0x3,%eax
f0117cb6:	c1 e8 02             	shr    $0x2,%eax
f0117cb9:	c1 e0 02             	shl    $0x2,%eax
f0117cbc:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f0117cc2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0117cc9:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0117cd0:	eb 29                	jmp    f0117cfb <test_kheap_phys_addr+0xe5d>
		{
			allPAs[i++] = kheap_physical_address(va);
f0117cd2:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0117cd5:	8d 43 01             	lea    0x1(%ebx),%eax
f0117cd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0117cdb:	83 ec 0c             	sub    $0xc,%esp
f0117cde:	ff 75 d8             	pushl  -0x28(%ebp)
f0117ce1:	e8 50 53 ff ff       	call   f010d036 <kheap_physical_address>
f0117ce6:	83 c4 10             	add    $0x10,%esp
f0117ce9:	89 c2                	mov    %eax,%edx
f0117ceb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0117cf1:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0117cf4:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0117cfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117cfe:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0117d04:	72 cc                	jb     f0117cd2 <test_kheap_phys_addr+0xe34>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0117d06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117d09:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0117d0f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0117d16:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0117d1d:	e9 a5 00 00 00       	jmp    f0117dc7 <test_kheap_phys_addr+0xf29>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0117d22:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117d25:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0117d2a:	83 ec 04             	sub    $0x4,%esp
f0117d2d:	8d 8d a4 fd ff ff    	lea    -0x25c(%ebp),%ecx
f0117d33:	51                   	push   %ecx
f0117d34:	52                   	push   %edx
f0117d35:	50                   	push   %eax
f0117d36:	e8 33 c1 fe ff       	call   f0103e6e <get_page_table>
f0117d3b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0117d3e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0117d44:	85 c0                	test   %eax,%eax
f0117d46:	75 17                	jne    f0117d5f <test_kheap_phys_addr+0xec1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0117d48:	83 ec 04             	sub    $0x4,%esp
f0117d4b:	68 3c ec 11 f0       	push   $0xf011ec3c
f0117d50:	68 27 08 00 00       	push   $0x827
f0117d55:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117d5a:	e8 34 84 fe ff       	call   f0100193 <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0117d5f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117d66:	eb 44                	jmp    f0117dac <test_kheap_phys_addr+0xf0e>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0117d68:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0117d6e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117d71:	c1 e2 02             	shl    $0x2,%edx
f0117d74:	01 d0                	add    %edx,%eax
f0117d76:	8b 00                	mov    (%eax),%eax
f0117d78:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0117d7d:	89 c1                	mov    %eax,%ecx
f0117d7f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0117d85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117d88:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0117d8b:	39 c1                	cmp    %eax,%ecx
f0117d8d:	74 17                	je     f0117da6 <test_kheap_phys_addr+0xf08>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0117d8f:	83 ec 04             	sub    $0x4,%esp
f0117d92:	68 95 ec 11 f0       	push   $0xf011ec95
f0117d97:	68 2e 08 00 00       	push   $0x82e
f0117d9c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117da1:	e8 ed 83 fe ff       	call   f0100193 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0117da6:	ff 45 d4             	incl   -0x2c(%ebp)
f0117da9:	ff 45 e4             	incl   -0x1c(%ebp)
f0117dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117daf:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0117db5:	7d 09                	jge    f0117dc0 <test_kheap_phys_addr+0xf22>
f0117db7:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0117dbe:	7e a8                	jle    f0117d68 <test_kheap_phys_addr+0xeca>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0117dc0:	81 45 d8 00 00 40 00 	addl   $0x400000,-0x28(%ebp)
f0117dc7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117dca:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f0117dd0:	0f 82 4c ff ff ff    	jb     f0117d22 <test_kheap_phys_addr+0xe84>
f0117dd6:	89 f4                	mov    %esi,%esp
				}
			}
		}
	}

	cprintf("\b\b\b80%");
f0117dd8:	83 ec 0c             	sub    $0xc,%esp
f0117ddb:	68 69 e4 11 f0       	push   $0xf011e469
f0117de0:	e8 be f7 fe ff       	call   f01075a3 <cprintf>
f0117de5:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0117de8:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0117def:	10 00 00 
f0117df2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117df7:	0f b6 d0             	movzbl %al,%edx
f0117dfa:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0117e00:	01 d0                	add    %edx,%eax
f0117e02:	48                   	dec    %eax
f0117e03:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0117e09:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117e0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e14:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0117e1a:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117e20:	29 d0                	sub    %edx,%eax
f0117e22:	89 c1                	mov    %eax,%ecx
f0117e24:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0117e2b:	10 00 00 
f0117e2e:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0117e33:	0f b6 c0             	movzbl %al,%eax
f0117e36:	c1 e0 04             	shl    $0x4,%eax
f0117e39:	89 c2                	mov    %eax,%edx
f0117e3b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0117e41:	01 d0                	add    %edx,%eax
f0117e43:	48                   	dec    %eax
f0117e44:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0117e4a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0117e50:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e55:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0117e5b:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0117e61:	29 d0                	sub    %edx,%eax
f0117e63:	01 c8                	add    %ecx,%eax
f0117e65:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0117e6a:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0117e70:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0117e77:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0117e7d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117e80:	eb 0a                	jmp    f0117e8c <test_kheap_phys_addr+0xfee>
		{
			i++;
f0117e82:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f0117e85:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0117e8c:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0117e93:	76 ed                	jbe    f0117e82 <test_kheap_phys_addr+0xfe4>
		{
			i++;
		}
		int ii = i ;
f0117e95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e98:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f0117e9e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0117ea5:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0117eab:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117eae:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117eb5:	e9 ce 00 00 00       	jmp    f0117f88 <test_kheap_phys_addr+0x10ea>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
f0117eba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117ebd:	89 c1                	mov    %eax,%ecx
f0117ebf:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0117ec4:	83 ec 04             	sub    $0x4,%esp
f0117ec7:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f0117ecd:	52                   	push   %edx
f0117ece:	51                   	push   %ecx
f0117ecf:	50                   	push   %eax
f0117ed0:	e8 99 bf fe ff       	call   f0103e6e <get_page_table>
f0117ed5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0117ed8:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0117ede:	85 c0                	test   %eax,%eax
f0117ee0:	75 17                	jne    f0117ef9 <test_kheap_phys_addr+0x105b>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0117ee2:	83 ec 04             	sub    $0x4,%esp
f0117ee5:	68 3c ec 11 f0       	push   $0xf011ec3c
f0117eea:	68 49 08 00 00       	push   $0x849
f0117eef:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117ef4:	e8 9a 82 fe ff       	call   f0100193 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0117ef9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117f00:	eb 67                	jmp    f0117f69 <test_kheap_phys_addr+0x10cb>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0117f02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117f05:	c1 e0 0c             	shl    $0xc,%eax
f0117f08:	89 c2                	mov    %eax,%edx
f0117f0a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0117f10:	01 d0                	add    %edx,%eax
f0117f12:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0117f18:	83 ec 0c             	sub    $0xc,%esp
f0117f1b:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0117f21:	e8 10 51 ff ff       	call   f010d036 <kheap_physical_address>
f0117f26:	83 c4 10             	add    $0x10,%esp
f0117f29:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0117f2f:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0117f35:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117f38:	c1 e2 02             	shl    $0x2,%edx
f0117f3b:	01 d0                	add    %edx,%eax
f0117f3d:	8b 00                	mov    (%eax),%eax
f0117f3f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0117f44:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0117f4a:	74 17                	je     f0117f63 <test_kheap_phys_addr+0x10c5>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0117f4c:	83 ec 04             	sub    $0x4,%esp
f0117f4f:	68 95 ec 11 f0       	push   $0xf011ec95
f0117f54:	68 53 08 00 00       	push   $0x853
f0117f59:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0117f5e:	e8 30 82 fe ff       	call   f0100193 <_panic>
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0117f63:	ff 45 cc             	incl   -0x34(%ebp)
f0117f66:	ff 45 e4             	incl   -0x1c(%ebp)
f0117f69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117f6c:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0117f72:	7d 09                	jge    f0117f7d <test_kheap_phys_addr+0x10df>
f0117f74:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0117f7b:	7e 85                	jle    f0117f02 <test_kheap_phys_addr+0x1064>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0117f7d:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0117f84:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f0117f88:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0117f8c:	0f 88 28 ff ff ff    	js     f0117eba <test_kheap_phys_addr+0x101c>
f0117f92:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0117f96:	7f 0d                	jg     f0117fa5 <test_kheap_phys_addr+0x1107>
f0117f98:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0117f9f:	0f 86 15 ff ff ff    	jbe    f0117eba <test_kheap_phys_addr+0x101c>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0117fa5:	83 ec 0c             	sub    $0xc,%esp
f0117fa8:	68 c2 e4 11 f0       	push   $0xf011e4c2
f0117fad:	e8 f1 f5 fe ff       	call   f01075a3 <cprintf>
f0117fb2:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0117fb5:	83 ec 0c             	sub    $0xc,%esp
f0117fb8:	68 e8 ec 11 f0       	push   $0xf011ece8
f0117fbd:	e8 e1 f5 fe ff       	call   f01075a3 <cprintf>
f0117fc2:	83 c4 10             	add    $0x10,%esp

	return 1;
f0117fc5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0117fca:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117fcd:	5b                   	pop    %ebx
f0117fce:	5e                   	pop    %esi
f0117fcf:	5f                   	pop    %edi
f0117fd0:	5d                   	pop    %ebp
f0117fd1:	c3                   	ret    

f0117fd2 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0117fd2:	55                   	push   %ebp
f0117fd3:	89 e5                	mov    %esp,%ebp
f0117fd5:	57                   	push   %edi
f0117fd6:	56                   	push   %esi
f0117fd7:	53                   	push   %ebx
f0117fd8:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f0117fde:	89 e0                	mov    %esp,%eax
f0117fe0:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0117fe2:	83 ec 0c             	sub    $0xc,%esp
f0117fe5:	68 28 e2 11 f0       	push   $0xf011e228
f0117fea:	e8 b4 f5 fe ff       	call   f01075a3 <cprintf>
f0117fef:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117ff2:	83 ec 0c             	sub    $0xc,%esp
f0117ff5:	68 58 e2 11 f0       	push   $0xf011e258
f0117ffa:	e8 a4 f5 fe ff       	call   f01075a3 <cprintf>
f0117fff:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0118002:	83 ec 0c             	sub    $0xc,%esp
f0118005:	68 28 e2 11 f0       	push   $0xf011e228
f011800a:	e8 94 f5 fe ff       	call   f01075a3 <cprintf>
f011800f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0118012:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0118016:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f011801a:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0118020:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0118026:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f011802d:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118034:	e8 81 29 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118039:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011803c:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0118042:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118047:	b8 00 00 00 00       	mov    $0x0,%eax
f011804c:	89 d7                	mov    %edx,%edi
f011804e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0118050:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f0118056:	b9 14 00 00 00       	mov    $0x14,%ecx
f011805b:	b8 00 00 00 00       	mov    $0x0,%eax
f0118060:	89 d7                	mov    %edx,%edi
f0118062:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0118064:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f011806a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011806f:	b8 00 00 00 00       	mov    $0x0,%eax
f0118074:	89 d7                	mov    %edx,%edi
f0118076:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118078:	e8 3d 29 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011807d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118080:	e8 d8 45 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118085:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118088:	83 ec 0c             	sub    $0xc,%esp
f011808b:	68 00 fc 1f 00       	push   $0x1ffc00
f0118090:	e8 53 4f ff ff       	call   f010cfe8 <kmalloc>
f0118095:	83 c4 10             	add    $0x10,%esp
f0118098:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011809e:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f01180a4:	89 c1                	mov    %eax,%ecx
f01180a6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01180ad:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01180b2:	0f b6 d0             	movzbl %al,%edx
f01180b5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180b8:	01 d0                	add    %edx,%eax
f01180ba:	48                   	dec    %eax
f01180bb:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01180be:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01180c6:	f7 75 b4             	divl   -0x4c(%ebp)
f01180c9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180cc:	29 d0                	sub    %edx,%eax
f01180ce:	89 c3                	mov    %eax,%ebx
f01180d0:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01180d7:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01180dc:	0f b6 c0             	movzbl %al,%eax
f01180df:	c1 e0 04             	shl    $0x4,%eax
f01180e2:	89 c2                	mov    %eax,%edx
f01180e4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01180e7:	01 d0                	add    %edx,%eax
f01180e9:	48                   	dec    %eax
f01180ea:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01180ed:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01180f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01180f5:	f7 75 ac             	divl   -0x54(%ebp)
f01180f8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01180fb:	29 d0                	sub    %edx,%eax
f01180fd:	01 d8                	add    %ebx,%eax
f01180ff:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118104:	39 c1                	cmp    %eax,%ecx
f0118106:	74 17                	je     f011811f <test_kheap_virt_addr+0x14d>
f0118108:	83 ec 04             	sub    $0x4,%esp
f011810b:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0118110:	68 80 08 00 00       	push   $0x880
f0118115:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011811a:	e8 74 80 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011811f:	e8 39 45 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118124:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0118127:	74 17                	je     f0118140 <test_kheap_virt_addr+0x16e>
f0118129:	83 ec 04             	sub    $0x4,%esp
f011812c:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118131:	68 81 08 00 00       	push   $0x881
f0118136:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011813b:	e8 53 80 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118140:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0118143:	e8 72 28 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118148:	29 c3                	sub    %eax,%ebx
f011814a:	89 d8                	mov    %ebx,%eax
f011814c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118151:	74 17                	je     f011816a <test_kheap_virt_addr+0x198>
f0118153:	83 ec 04             	sub    $0x4,%esp
f0118156:	68 60 e3 11 f0       	push   $0xf011e360
f011815b:	68 82 08 00 00       	push   $0x882
f0118160:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118165:	e8 29 80 fe ff       	call   f0100193 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011816a:	e8 4b 28 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011816f:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118172:	e8 e6 44 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118177:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011817a:	83 ec 0c             	sub    $0xc,%esp
f011817d:	68 00 fc 1f 00       	push   $0x1ffc00
f0118182:	e8 61 4e ff ff       	call   f010cfe8 <kmalloc>
f0118187:	83 c4 10             	add    $0x10,%esp
f011818a:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118190:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0118196:	89 c1                	mov    %eax,%ecx
f0118198:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011819f:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01181a4:	0f b6 d0             	movzbl %al,%edx
f01181a7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01181aa:	01 d0                	add    %edx,%eax
f01181ac:	48                   	dec    %eax
f01181ad:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01181b0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01181b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01181b8:	f7 75 a4             	divl   -0x5c(%ebp)
f01181bb:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01181be:	29 d0                	sub    %edx,%eax
f01181c0:	89 c3                	mov    %eax,%ebx
f01181c2:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01181c9:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01181ce:	0f b6 c0             	movzbl %al,%eax
f01181d1:	c1 e0 04             	shl    $0x4,%eax
f01181d4:	89 c2                	mov    %eax,%edx
f01181d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01181d9:	01 d0                	add    %edx,%eax
f01181db:	48                   	dec    %eax
f01181dc:	89 45 98             	mov    %eax,-0x68(%ebp)
f01181df:	8b 45 98             	mov    -0x68(%ebp),%eax
f01181e2:	ba 00 00 00 00       	mov    $0x0,%edx
f01181e7:	f7 75 9c             	divl   -0x64(%ebp)
f01181ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f01181ed:	29 d0                	sub    %edx,%eax
f01181ef:	01 d8                	add    %ebx,%eax
f01181f1:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01181f6:	39 c1                	cmp    %eax,%ecx
f01181f8:	74 17                	je     f0118211 <test_kheap_virt_addr+0x23f>
f01181fa:	83 ec 04             	sub    $0x4,%esp
f01181fd:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0118202:	68 88 08 00 00       	push   $0x888
f0118207:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011820c:	e8 82 7f fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118211:	e8 47 44 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118216:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0118219:	74 17                	je     f0118232 <test_kheap_virt_addr+0x260>
f011821b:	83 ec 04             	sub    $0x4,%esp
f011821e:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118223:	68 89 08 00 00       	push   $0x889
f0118228:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011822d:	e8 61 7f fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118232:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0118235:	e8 80 27 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011823a:	29 c3                	sub    %eax,%ebx
f011823c:	89 d8                	mov    %ebx,%eax
f011823e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118243:	74 17                	je     f011825c <test_kheap_virt_addr+0x28a>
f0118245:	83 ec 04             	sub    $0x4,%esp
f0118248:	68 60 e3 11 f0       	push   $0xf011e360
f011824d:	68 8a 08 00 00       	push   $0x88a
f0118252:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118257:	e8 37 7f fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011825c:	e8 59 27 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118261:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118264:	e8 f4 43 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118269:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011826c:	83 ec 0c             	sub    $0xc,%esp
f011826f:	68 00 08 00 00       	push   $0x800
f0118274:	e8 6f 4d ff ff       	call   f010cfe8 <kmalloc>
f0118279:	83 c4 10             	add    $0x10,%esp
f011827c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118282:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0118288:	89 c1                	mov    %eax,%ecx
f011828a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0118291:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118296:	0f b6 d0             	movzbl %al,%edx
f0118299:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011829c:	01 d0                	add    %edx,%eax
f011829e:	48                   	dec    %eax
f011829f:	89 45 90             	mov    %eax,-0x70(%ebp)
f01182a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01182a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01182aa:	f7 75 94             	divl   -0x6c(%ebp)
f01182ad:	8b 45 90             	mov    -0x70(%ebp),%eax
f01182b0:	29 d0                	sub    %edx,%eax
f01182b2:	89 c3                	mov    %eax,%ebx
f01182b4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01182bb:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01182c0:	0f b6 c0             	movzbl %al,%eax
f01182c3:	c1 e0 04             	shl    $0x4,%eax
f01182c6:	89 c2                	mov    %eax,%edx
f01182c8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01182cb:	01 d0                	add    %edx,%eax
f01182cd:	48                   	dec    %eax
f01182ce:	89 45 88             	mov    %eax,-0x78(%ebp)
f01182d1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01182d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01182d9:	f7 75 8c             	divl   -0x74(%ebp)
f01182dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01182df:	29 d0                	sub    %edx,%eax
f01182e1:	01 d8                	add    %ebx,%eax
f01182e3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01182e8:	39 c1                	cmp    %eax,%ecx
f01182ea:	74 17                	je     f0118303 <test_kheap_virt_addr+0x331>
f01182ec:	83 ec 04             	sub    $0x4,%esp
f01182ef:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01182f4:	68 90 08 00 00       	push   $0x890
f01182f9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f01182fe:	e8 90 7e fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118303:	e8 55 43 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118308:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011830b:	74 17                	je     f0118324 <test_kheap_virt_addr+0x352>
f011830d:	83 ec 04             	sub    $0x4,%esp
f0118310:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118315:	68 91 08 00 00       	push   $0x891
f011831a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011831f:	e8 6f 7e fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118324:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0118327:	e8 8e 26 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011832c:	29 c3                	sub    %eax,%ebx
f011832e:	89 d8                	mov    %ebx,%eax
f0118330:	83 f8 01             	cmp    $0x1,%eax
f0118333:	74 17                	je     f011834c <test_kheap_virt_addr+0x37a>
f0118335:	83 ec 04             	sub    $0x4,%esp
f0118338:	68 60 e3 11 f0       	push   $0xf011e360
f011833d:	68 92 08 00 00       	push   $0x892
f0118342:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118347:	e8 47 7e fe ff       	call   f0100193 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011834c:	e8 69 26 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118351:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118354:	e8 04 43 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118359:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011835c:	83 ec 0c             	sub    $0xc,%esp
f011835f:	68 00 08 00 00       	push   $0x800
f0118364:	e8 7f 4c ff ff       	call   f010cfe8 <kmalloc>
f0118369:	83 c4 10             	add    $0x10,%esp
f011836c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118372:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0118378:	89 c1                	mov    %eax,%ecx
f011837a:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0118381:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118386:	0f b6 d0             	movzbl %al,%edx
f0118389:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011838c:	01 d0                	add    %edx,%eax
f011838e:	48                   	dec    %eax
f011838f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0118392:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118395:	ba 00 00 00 00       	mov    $0x0,%edx
f011839a:	f7 75 84             	divl   -0x7c(%ebp)
f011839d:	8b 45 80             	mov    -0x80(%ebp),%eax
f01183a0:	29 d0                	sub    %edx,%eax
f01183a2:	89 c3                	mov    %eax,%ebx
f01183a4:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01183ab:	10 00 00 
f01183ae:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01183b3:	0f b6 c0             	movzbl %al,%eax
f01183b6:	c1 e0 04             	shl    $0x4,%eax
f01183b9:	89 c2                	mov    %eax,%edx
f01183bb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01183c1:	01 d0                	add    %edx,%eax
f01183c3:	48                   	dec    %eax
f01183c4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01183ca:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01183d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01183d5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01183db:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01183e1:	29 d0                	sub    %edx,%eax
f01183e3:	01 d8                	add    %ebx,%eax
f01183e5:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01183ea:	39 c1                	cmp    %eax,%ecx
f01183ec:	74 17                	je     f0118405 <test_kheap_virt_addr+0x433>
f01183ee:	83 ec 04             	sub    $0x4,%esp
f01183f1:	68 c4 e3 11 f0       	push   $0xf011e3c4
f01183f6:	68 98 08 00 00       	push   $0x898
f01183fb:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118400:	e8 8e 7d fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118405:	e8 53 42 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011840a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011840d:	74 17                	je     f0118426 <test_kheap_virt_addr+0x454>
f011840f:	83 ec 04             	sub    $0x4,%esp
f0118412:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118417:	68 99 08 00 00       	push   $0x899
f011841c:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118421:	e8 6d 7d fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118426:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0118429:	e8 8c 25 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011842e:	29 c3                	sub    %eax,%ebx
f0118430:	89 d8                	mov    %ebx,%eax
f0118432:	83 f8 01             	cmp    $0x1,%eax
f0118435:	74 17                	je     f011844e <test_kheap_virt_addr+0x47c>
f0118437:	83 ec 04             	sub    $0x4,%esp
f011843a:	68 60 e3 11 f0       	push   $0xf011e360
f011843f:	68 9a 08 00 00       	push   $0x89a
f0118444:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118449:	e8 45 7d fe ff       	call   f0100193 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011844e:	e8 67 25 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118453:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118456:	e8 02 42 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011845b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011845e:	83 ec 0c             	sub    $0xc,%esp
f0118461:	68 00 1c 00 00       	push   $0x1c00
f0118466:	e8 7d 4b ff ff       	call   f010cfe8 <kmalloc>
f011846b:	83 c4 10             	add    $0x10,%esp
f011846e:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118474:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f011847a:	89 c1                	mov    %eax,%ecx
f011847c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0118483:	10 00 00 
f0118486:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011848b:	0f b6 d0             	movzbl %al,%edx
f011848e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118494:	01 d0                	add    %edx,%eax
f0118496:	48                   	dec    %eax
f0118497:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011849d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01184a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01184a8:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01184ae:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01184b4:	29 d0                	sub    %edx,%eax
f01184b6:	89 c3                	mov    %eax,%ebx
f01184b8:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01184bf:	10 00 00 
f01184c2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01184c7:	0f b6 c0             	movzbl %al,%eax
f01184ca:	c1 e0 04             	shl    $0x4,%eax
f01184cd:	89 c2                	mov    %eax,%edx
f01184cf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01184d5:	01 d0                	add    %edx,%eax
f01184d7:	48                   	dec    %eax
f01184d8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01184de:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01184e4:	ba 00 00 00 00       	mov    $0x0,%edx
f01184e9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01184ef:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01184f5:	29 d0                	sub    %edx,%eax
f01184f7:	01 d8                	add    %ebx,%eax
f01184f9:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01184fe:	39 c1                	cmp    %eax,%ecx
f0118500:	74 17                	je     f0118519 <test_kheap_virt_addr+0x547>
f0118502:	83 ec 04             	sub    $0x4,%esp
f0118505:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011850a:	68 a0 08 00 00       	push   $0x8a0
f011850f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118514:	e8 7a 7c fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118519:	e8 3f 41 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011851e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0118521:	74 17                	je     f011853a <test_kheap_virt_addr+0x568>
f0118523:	83 ec 04             	sub    $0x4,%esp
f0118526:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011852b:	68 a1 08 00 00       	push   $0x8a1
f0118530:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118535:	e8 59 7c fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011853a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011853d:	e8 78 24 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118542:	29 c3                	sub    %eax,%ebx
f0118544:	89 d8                	mov    %ebx,%eax
f0118546:	83 f8 02             	cmp    $0x2,%eax
f0118549:	74 17                	je     f0118562 <test_kheap_virt_addr+0x590>
f011854b:	83 ec 04             	sub    $0x4,%esp
f011854e:	68 60 e3 11 f0       	push   $0xf011e360
f0118553:	68 a2 08 00 00       	push   $0x8a2
f0118558:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011855d:	e8 31 7c fe ff       	call   f0100193 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118562:	e8 53 24 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118567:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011856a:	e8 ee 40 ff ff       	call   f010c65d <pf_calculate_free_frames>
f011856f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118572:	83 ec 0c             	sub    $0xc,%esp
f0118575:	68 00 fc 2f 00       	push   $0x2ffc00
f011857a:	e8 69 4a ff ff       	call   f010cfe8 <kmalloc>
f011857f:	83 c4 10             	add    $0x10,%esp
f0118582:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118588:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f011858e:	89 c1                	mov    %eax,%ecx
f0118590:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0118597:	10 00 00 
f011859a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011859f:	0f b6 d0             	movzbl %al,%edx
f01185a2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01185a8:	01 d0                	add    %edx,%eax
f01185aa:	48                   	dec    %eax
f01185ab:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01185b1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01185b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01185bc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01185c2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01185c8:	29 d0                	sub    %edx,%eax
f01185ca:	89 c3                	mov    %eax,%ebx
f01185cc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01185d3:	10 00 00 
f01185d6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01185db:	0f b6 c0             	movzbl %al,%eax
f01185de:	c1 e0 04             	shl    $0x4,%eax
f01185e1:	89 c2                	mov    %eax,%edx
f01185e3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01185e9:	01 d0                	add    %edx,%eax
f01185eb:	48                   	dec    %eax
f01185ec:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01185f2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01185f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01185fd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0118603:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118609:	29 d0                	sub    %edx,%eax
f011860b:	01 d8                	add    %ebx,%eax
f011860d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118612:	39 c1                	cmp    %eax,%ecx
f0118614:	74 17                	je     f011862d <test_kheap_virt_addr+0x65b>
f0118616:	83 ec 04             	sub    $0x4,%esp
f0118619:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011861e:	68 a8 08 00 00       	push   $0x8a8
f0118623:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118628:	e8 66 7b fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011862d:	e8 2b 40 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118632:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0118635:	74 17                	je     f011864e <test_kheap_virt_addr+0x67c>
f0118637:	83 ec 04             	sub    $0x4,%esp
f011863a:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011863f:	68 a9 08 00 00       	push   $0x8a9
f0118644:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118649:	e8 45 7b fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011864e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0118651:	e8 64 23 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118656:	29 c3                	sub    %eax,%ebx
f0118658:	89 d8                	mov    %ebx,%eax
f011865a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011865f:	74 17                	je     f0118678 <test_kheap_virt_addr+0x6a6>
f0118661:	83 ec 04             	sub    $0x4,%esp
f0118664:	68 60 e3 11 f0       	push   $0xf011e360
f0118669:	68 aa 08 00 00       	push   $0x8aa
f011866e:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118673:	e8 1b 7b fe ff       	call   f0100193 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118678:	e8 3d 23 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011867d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118680:	e8 d8 3f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118685:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118688:	83 ec 0c             	sub    $0xc,%esp
f011868b:	68 00 fc 5f 00       	push   $0x5ffc00
f0118690:	e8 53 49 ff ff       	call   f010cfe8 <kmalloc>
f0118695:	83 c4 10             	add    $0x10,%esp
f0118698:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011869e:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01186a4:	89 c1                	mov    %eax,%ecx
f01186a6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01186ad:	10 00 00 
f01186b0:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01186b5:	0f b6 d0             	movzbl %al,%edx
f01186b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01186be:	01 d0                	add    %edx,%eax
f01186c0:	48                   	dec    %eax
f01186c1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01186c7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01186cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01186d2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01186d8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01186de:	29 d0                	sub    %edx,%eax
f01186e0:	89 c3                	mov    %eax,%ebx
f01186e2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01186e9:	10 00 00 
f01186ec:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01186f1:	0f b6 c0             	movzbl %al,%eax
f01186f4:	c1 e0 04             	shl    $0x4,%eax
f01186f7:	89 c2                	mov    %eax,%edx
f01186f9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01186ff:	01 d0                	add    %edx,%eax
f0118701:	48                   	dec    %eax
f0118702:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0118708:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011870e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118713:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0118719:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011871f:	29 d0                	sub    %edx,%eax
f0118721:	01 d8                	add    %ebx,%eax
f0118723:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118728:	39 c1                	cmp    %eax,%ecx
f011872a:	74 17                	je     f0118743 <test_kheap_virt_addr+0x771>
f011872c:	83 ec 04             	sub    $0x4,%esp
f011872f:	68 c4 e3 11 f0       	push   $0xf011e3c4
f0118734:	68 b0 08 00 00       	push   $0x8b0
f0118739:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011873e:	e8 50 7a fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118743:	e8 15 3f ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118748:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011874b:	74 17                	je     f0118764 <test_kheap_virt_addr+0x792>
f011874d:	83 ec 04             	sub    $0x4,%esp
f0118750:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118755:	68 b1 08 00 00       	push   $0x8b1
f011875a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011875f:	e8 2f 7a fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118764:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0118767:	e8 4e 22 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f011876c:	29 c3                	sub    %eax,%ebx
f011876e:	89 d8                	mov    %ebx,%eax
f0118770:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118775:	74 17                	je     f011878e <test_kheap_virt_addr+0x7bc>
f0118777:	83 ec 04             	sub    $0x4,%esp
f011877a:	68 60 e3 11 f0       	push   $0xf011e360
f011877f:	68 b2 08 00 00       	push   $0x8b2
f0118784:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118789:	e8 05 7a fe ff       	call   f0100193 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011878e:	e8 27 22 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118793:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118796:	e8 c2 3e ff ff       	call   f010c65d <pf_calculate_free_frames>
f011879b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011879e:	83 ec 0c             	sub    $0xc,%esp
f01187a1:	68 00 38 00 00       	push   $0x3800
f01187a6:	e8 3d 48 ff ff       	call   f010cfe8 <kmalloc>
f01187ab:	83 c4 10             	add    $0x10,%esp
f01187ae:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01187b4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01187ba:	89 c1                	mov    %eax,%ecx
f01187bc:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01187c3:	10 00 00 
f01187c6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01187cb:	0f b6 d0             	movzbl %al,%edx
f01187ce:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01187d4:	01 d0                	add    %edx,%eax
f01187d6:	48                   	dec    %eax
f01187d7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01187dd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01187e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01187e8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01187ee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01187f4:	29 d0                	sub    %edx,%eax
f01187f6:	89 c3                	mov    %eax,%ebx
f01187f8:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01187ff:	10 00 00 
f0118802:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118807:	0f b6 c0             	movzbl %al,%eax
f011880a:	c1 e0 04             	shl    $0x4,%eax
f011880d:	89 c2                	mov    %eax,%edx
f011880f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118815:	01 d0                	add    %edx,%eax
f0118817:	48                   	dec    %eax
f0118818:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011881e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118824:	ba 00 00 00 00       	mov    $0x0,%edx
f0118829:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011882f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118835:	29 d0                	sub    %edx,%eax
f0118837:	01 d8                	add    %ebx,%eax
f0118839:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011883e:	39 c1                	cmp    %eax,%ecx
f0118840:	74 17                	je     f0118859 <test_kheap_virt_addr+0x887>
f0118842:	83 ec 04             	sub    $0x4,%esp
f0118845:	68 c4 e3 11 f0       	push   $0xf011e3c4
f011884a:	68 b8 08 00 00       	push   $0x8b8
f011884f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118854:	e8 3a 79 fe ff       	call   f0100193 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118859:	e8 ff 3d ff ff       	call   f010c65d <pf_calculate_free_frames>
f011885e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0118861:	74 17                	je     f011887a <test_kheap_virt_addr+0x8a8>
f0118863:	83 ec 04             	sub    $0x4,%esp
f0118866:	68 f8 e2 11 f0       	push   $0xf011e2f8
f011886b:	68 b9 08 00 00       	push   $0x8b9
f0118870:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118875:	e8 19 79 fe ff       	call   f0100193 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011887a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011887d:	e8 38 21 ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118882:	29 c3                	sub    %eax,%ebx
f0118884:	89 d8                	mov    %ebx,%eax
f0118886:	83 f8 04             	cmp    $0x4,%eax
f0118889:	74 17                	je     f01188a2 <test_kheap_virt_addr+0x8d0>
f011888b:	83 ec 04             	sub    $0x4,%esp
f011888e:	68 60 e3 11 f0       	push   $0xf011e360
f0118893:	68 ba 08 00 00       	push   $0x8ba
f0118898:	68 e6 e2 11 f0       	push   $0xf011e2e6
f011889d:	e8 f1 78 fe ff       	call   f0100193 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f01188a2:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01188a9:	10 00 00 
f01188ac:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01188b1:	0f b6 d0             	movzbl %al,%edx
f01188b4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01188ba:	01 d0                	add    %edx,%eax
f01188bc:	48                   	dec    %eax
f01188bd:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01188c3:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01188c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01188ce:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01188d4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01188da:	29 d0                	sub    %edx,%eax
f01188dc:	89 c1                	mov    %eax,%ecx
f01188de:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01188e5:	10 00 00 
f01188e8:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01188ed:	0f b6 c0             	movzbl %al,%eax
f01188f0:	c1 e0 04             	shl    $0x4,%eax
f01188f3:	89 c2                	mov    %eax,%edx
f01188f5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01188fb:	01 d0                	add    %edx,%eax
f01188fd:	48                   	dec    %eax
f01188fe:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0118904:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011890a:	ba 00 00 00 00       	mov    $0x0,%edx
f011890f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0118915:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011891b:	29 d0                	sub    %edx,%eax
f011891d:	01 c8                	add    %ecx,%eax
f011891f:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0118924:	c1 e8 0c             	shr    $0xc,%eax
f0118927:	89 c2                	mov    %eax,%edx
f0118929:	4a                   	dec    %edx
f011892a:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f0118930:	c1 e0 02             	shl    $0x2,%eax
f0118933:	8d 50 03             	lea    0x3(%eax),%edx
f0118936:	b8 10 00 00 00       	mov    $0x10,%eax
f011893b:	48                   	dec    %eax
f011893c:	01 d0                	add    %edx,%eax
f011893e:	bf 10 00 00 00       	mov    $0x10,%edi
f0118943:	ba 00 00 00 00       	mov    $0x0,%edx
f0118948:	f7 f7                	div    %edi
f011894a:	6b c0 10             	imul   $0x10,%eax,%eax
f011894d:	29 c4                	sub    %eax,%esp
f011894f:	89 e0                	mov    %esp,%eax
f0118951:	83 c0 03             	add    $0x3,%eax
f0118954:	c1 e8 02             	shr    $0x2,%eax
f0118957:	c1 e0 02             	shl    $0x2,%eax
f011895a:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE ;
f0118960:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0118967:	10 00 00 
f011896a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011896f:	0f b6 d0             	movzbl %al,%edx
f0118972:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118978:	01 d0                	add    %edx,%eax
f011897a:	48                   	dec    %eax
f011897b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0118981:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118987:	ba 00 00 00 00       	mov    $0x0,%edx
f011898c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0118992:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118998:	29 d0                	sub    %edx,%eax
f011899a:	89 c1                	mov    %eax,%ecx
f011899c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01189a3:	10 00 00 
f01189a6:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01189ab:	0f b6 c0             	movzbl %al,%eax
f01189ae:	c1 e0 04             	shl    $0x4,%eax
f01189b1:	89 c2                	mov    %eax,%edx
f01189b3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01189b9:	01 d0                	add    %edx,%eax
f01189bb:	48                   	dec    %eax
f01189bc:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01189c2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01189c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01189cd:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01189d3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01189d9:	29 d0                	sub    %edx,%eax
f01189db:	01 c8                	add    %ecx,%eax
f01189dd:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01189e2:	c1 e8 0c             	shr    $0xc,%eax
f01189e5:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01189eb:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01189f2:	10 00 00 
f01189f5:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f01189fa:	0f b6 d0             	movzbl %al,%edx
f01189fd:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0118a03:	01 d0                	add    %edx,%eax
f0118a05:	48                   	dec    %eax
f0118a06:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118a0c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118a12:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a17:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118a1d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0118a23:	29 d0                	sub    %edx,%eax
f0118a25:	89 c1                	mov    %eax,%ecx
f0118a27:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118a2e:	10 00 00 
f0118a31:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118a36:	0f b6 c0             	movzbl %al,%eax
f0118a39:	c1 e0 04             	shl    $0x4,%eax
f0118a3c:	89 c2                	mov    %eax,%edx
f0118a3e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0118a44:	01 d0                	add    %edx,%eax
f0118a46:	48                   	dec    %eax
f0118a47:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118a4d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118a53:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a58:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118a5e:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0118a64:	29 d0                	sub    %edx,%eax
f0118a66:	01 c8                	add    %ecx,%eax
f0118a68:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0118a6d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f0118a73:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0118a7a:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f0118a81:	e9 d8 00 00 00       	jmp    f0118b5e <test_kheap_virt_addr+0xb8c>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0118a86:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118a89:	a1 50 11 3b f0       	mov    0xf03b1150,%eax
f0118a8e:	83 ec 04             	sub    $0x4,%esp
f0118a91:	8d 8d bc fd ff ff    	lea    -0x244(%ebp),%ecx
f0118a97:	51                   	push   %ecx
f0118a98:	52                   	push   %edx
f0118a99:	50                   	push   %eax
f0118a9a:	e8 cf b3 fe ff       	call   f0103e6e <get_page_table>
f0118a9f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0118aa2:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0118aa8:	85 c0                	test   %eax,%eax
f0118aaa:	75 17                	jne    f0118ac3 <test_kheap_virt_addr+0xaf1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0118aac:	83 ec 04             	sub    $0x4,%esp
f0118aaf:	68 3c ec 11 f0       	push   $0xf011ec3c
f0118ab4:	68 cb 08 00 00       	push   $0x8cb
f0118ab9:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118abe:	e8 d0 76 fe ff       	call   f0100193 <_panic>

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f0118ac3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0118aca:	eb 73                	jmp    f0118b3f <test_kheap_virt_addr+0xb6d>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0118acc:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0118ad2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0118ad5:	c1 e2 02             	shl    $0x2,%edx
f0118ad8:	01 d0                	add    %edx,%eax
f0118ada:	8b 00                	mov    (%eax),%eax
f0118adc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118ae1:	89 c1                	mov    %eax,%ecx
f0118ae3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118ae9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118aec:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0118aef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118af5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118af8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0118afb:	83 ec 0c             	sub    $0xc,%esp
f0118afe:	50                   	push   %eax
f0118aff:	e8 18 45 ff ff       	call   f010d01c <kheap_virtual_address>
f0118b04:	83 c4 10             	add    $0x10,%esp
f0118b07:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)

				if (retrievedVA != (va + j*PAGE_SIZE))
f0118b0d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118b10:	c1 e0 0c             	shl    $0xc,%eax
f0118b13:	89 c2                	mov    %eax,%edx
f0118b15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118b18:	01 d0                	add    %edx,%eax
f0118b1a:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f0118b20:	74 17                	je     f0118b39 <test_kheap_virt_addr+0xb67>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_virtual_address");
f0118b22:	83 ec 04             	sub    $0x4,%esp
f0118b25:	68 30 ed 11 f0       	push   $0xf011ed30
f0118b2a:	68 d5 08 00 00       	push   $0x8d5
f0118b2f:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118b34:	e8 5a 76 fe ff       	call   f0100193 <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f0118b39:	ff 45 dc             	incl   -0x24(%ebp)
f0118b3c:	ff 45 e0             	incl   -0x20(%ebp)
f0118b3f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118b42:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f0118b48:	7d 0d                	jge    f0118b57 <test_kheap_virt_addr+0xb85>
f0118b4a:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0118b51:	0f 8e 75 ff ff ff    	jle    f0118acc <test_kheap_virt_addr+0xafa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f0118b57:	81 45 e4 00 00 40 00 	addl   $0x400000,-0x1c(%ebp)
f0118b5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118b61:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f0118b67:	0f 82 19 ff ff ff    	jb     f0118a86 <test_kheap_virt_addr+0xab4>
					panic("Wrong kheap_virtual_address");
				}
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0118b6d:	83 ec 0c             	sub    $0xc,%esp
f0118b70:	68 4c ed 11 f0       	push   $0xf011ed4c
f0118b75:	e8 29 ea fe ff       	call   f01075a3 <cprintf>
f0118b7a:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0118b7d:	e8 38 1e ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118b82:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0118b88:	e8 d0 3a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118b8d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0118b93:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0118b99:	83 ec 0c             	sub    $0xc,%esp
f0118b9c:	50                   	push   %eax
f0118b9d:	e8 60 44 ff ff       	call   f010d002 <kfree>
f0118ba2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ba5:	e8 b3 3a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118baa:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0118bb0:	74 17                	je     f0118bc9 <test_kheap_virt_addr+0xbf7>
f0118bb2:	83 ec 04             	sub    $0x4,%esp
f0118bb5:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118bba:	68 e2 08 00 00       	push   $0x8e2
f0118bbf:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118bc4:	e8 ca 75 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0118bc9:	e8 ec 1d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118bce:	89 c2                	mov    %eax,%edx
f0118bd0:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118bd6:	29 c2                	sub    %eax,%edx
f0118bd8:	89 d0                	mov    %edx,%eax
f0118bda:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118bdf:	74 17                	je     f0118bf8 <test_kheap_virt_addr+0xc26>
f0118be1:	83 ec 04             	sub    $0x4,%esp
f0118be4:	68 24 ea 11 f0       	push   $0xf011ea24
f0118be9:	68 e3 08 00 00       	push   $0x8e3
f0118bee:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118bf3:	e8 9b 75 fe ff       	call   f0100193 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118bf8:	e8 bd 1d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118bfd:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c03:	e8 55 3a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118c08:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f0118c0e:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0118c14:	83 ec 0c             	sub    $0xc,%esp
f0118c17:	50                   	push   %eax
f0118c18:	e8 e5 43 ff ff       	call   f010d002 <kfree>
f0118c1d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c20:	e8 38 3a ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118c25:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0118c2b:	74 17                	je     f0118c44 <test_kheap_virt_addr+0xc72>
f0118c2d:	83 ec 04             	sub    $0x4,%esp
f0118c30:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118c35:	68 e9 08 00 00       	push   $0x8e9
f0118c3a:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118c3f:	e8 4f 75 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0118c44:	e8 71 1d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118c49:	89 c2                	mov    %eax,%edx
f0118c4b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c51:	29 c2                	sub    %eax,%edx
f0118c53:	89 d0                	mov    %edx,%eax
f0118c55:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118c5a:	74 17                	je     f0118c73 <test_kheap_virt_addr+0xca1>
f0118c5c:	83 ec 04             	sub    $0x4,%esp
f0118c5f:	68 24 ea 11 f0       	push   $0xf011ea24
f0118c64:	68 ea 08 00 00       	push   $0x8ea
f0118c69:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118c6e:	e8 20 75 fe ff       	call   f0100193 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118c73:	e8 42 1d ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118c78:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c7e:	e8 da 39 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118c83:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0118c89:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0118c8f:	83 ec 0c             	sub    $0xc,%esp
f0118c92:	50                   	push   %eax
f0118c93:	e8 6a 43 ff ff       	call   f010d002 <kfree>
f0118c98:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c9b:	e8 bd 39 ff ff       	call   f010c65d <pf_calculate_free_frames>
f0118ca0:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0118ca6:	74 17                	je     f0118cbf <test_kheap_virt_addr+0xced>
f0118ca8:	83 ec 04             	sub    $0x4,%esp
f0118cab:	68 f8 e2 11 f0       	push   $0xf011e2f8
f0118cb0:	68 f0 08 00 00       	push   $0x8f0
f0118cb5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118cba:	e8 d4 74 fe ff       	call   f0100193 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0118cbf:	e8 f6 1c ff ff       	call   f010a9ba <sys_calculate_free_frames>
f0118cc4:	89 c2                	mov    %eax,%edx
f0118cc6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118ccc:	29 c2                	sub    %eax,%edx
f0118cce:	89 d0                	mov    %edx,%eax
f0118cd0:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118cd5:	74 17                	je     f0118cee <test_kheap_virt_addr+0xd1c>
f0118cd7:	83 ec 04             	sub    $0x4,%esp
f0118cda:	68 24 ea 11 f0       	push   $0xf011ea24
f0118cdf:	68 f1 08 00 00       	push   $0x8f1
f0118ce4:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118ce9:	e8 a5 74 fe ff       	call   f0100193 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0118cee:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0118cf5:	10 00 00 
f0118cf8:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118cfd:	0f b6 d0             	movzbl %al,%edx
f0118d00:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118d06:	01 d0                	add    %edx,%eax
f0118d08:	48                   	dec    %eax
f0118d09:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118d0f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118d15:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d1a:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118d20:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118d26:	29 d0                	sub    %edx,%eax
f0118d28:	89 c1                	mov    %eax,%ecx
f0118d2a:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0118d31:	10 00 00 
f0118d34:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118d39:	0f b6 c0             	movzbl %al,%eax
f0118d3c:	c1 e0 04             	shl    $0x4,%eax
f0118d3f:	89 c2                	mov    %eax,%edx
f0118d41:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d47:	01 d0                	add    %edx,%eax
f0118d49:	48                   	dec    %eax
f0118d4a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0118d50:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d56:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d5b:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0118d61:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d67:	29 d0                	sub    %edx,%eax
f0118d69:	01 c8                	add    %ecx,%eax
f0118d6b:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0118d70:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f0118d76:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAB_ALLOCATIONS) / PAGE_SIZE;
f0118d7d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0118d84:	10 00 00 
f0118d87:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118d8c:	0f b6 d0             	movzbl %al,%edx
f0118d8f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d95:	01 d0                	add    %edx,%eax
f0118d97:	48                   	dec    %eax
f0118d98:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0118d9e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118da4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118da9:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0118daf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118db5:	29 d0                	sub    %edx,%eax
f0118db7:	89 c1                	mov    %eax,%ecx
f0118db9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0118dc0:	10 00 00 
f0118dc3:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f0118dc8:	0f b6 c0             	movzbl %al,%eax
f0118dcb:	c1 e0 04             	shl    $0x4,%eax
f0118dce:	89 c2                	mov    %eax,%edx
f0118dd0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118dd6:	01 d0                	add    %edx,%eax
f0118dd8:	48                   	dec    %eax
f0118dd9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118ddf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118de5:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dea:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118df0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118df6:	29 d0                	sub    %edx,%eax
f0118df8:	01 c8                	add    %ecx,%eax
f0118dfa:	05 00 40 00 00       	add    $0x4000,%eax
f0118dff:	c1 e8 0c             	shr    $0xc,%eax
f0118e02:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0118e08:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e0e:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0118e11:	eb 41                	jmp    f0118e54 <test_kheap_virt_addr+0xe82>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0118e13:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118e19:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118e1c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0118e1f:	83 ec 0c             	sub    $0xc,%esp
f0118e22:	50                   	push   %eax
f0118e23:	e8 f4 41 ff ff       	call   f010d01c <kheap_virtual_address>
f0118e28:	83 c4 10             	add    $0x10,%esp
f0118e2b:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f0118e31:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f0118e38:	74 17                	je     f0118e51 <test_kheap_virt_addr+0xe7f>
			{
				panic("Wrong kheap_virtual_address");
f0118e3a:	83 ec 04             	sub    $0x4,%esp
f0118e3d:	68 30 ed 11 f0       	push   $0xf011ed30
f0118e42:	68 02 09 00 00       	push   $0x902
f0118e47:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118e4c:	e8 42 73 fe ff       	call   f0100193 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAB_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0118e51:	ff 45 d8             	incl   -0x28(%ebp)
f0118e54:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e5a:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0118e60:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118e63:	39 c2                	cmp    %eax,%edx
f0118e65:	77 ac                	ja     f0118e13 <test_kheap_virt_addr+0xe41>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0118e67:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118e6d:	05 00 04 00 00       	add    $0x400,%eax
f0118e72:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0118e75:	eb 4b                	jmp    f0118ec2 <test_kheap_virt_addr+0xef0>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0118e77:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118e7d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118e80:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0118e83:	83 ec 0c             	sub    $0xc,%esp
f0118e86:	50                   	push   %eax
f0118e87:	e8 90 41 ff ff       	call   f010d01c <kheap_virtual_address>
f0118e8c:	83 c4 10             	add    $0x10,%esp
f0118e8f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f0118e95:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118e98:	c1 e0 0c             	shl    $0xc,%eax
f0118e9b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0118ea0:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f0118ea6:	74 17                	je     f0118ebf <test_kheap_virt_addr+0xeed>
			{
				panic("Wrong kheap_virtual_address");
f0118ea8:	83 ec 04             	sub    $0x4,%esp
f0118eab:	68 30 ed 11 f0       	push   $0xf011ed30
f0118eb0:	68 0c 09 00 00       	push   $0x90c
f0118eb5:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118eba:	e8 d4 72 fe ff       	call   f0100193 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0118ebf:	ff 45 d8             	incl   -0x28(%ebp)
f0118ec2:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118ec8:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0118ece:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118ed1:	39 c2                	cmp    %eax,%edx
f0118ed3:	77 a2                	ja     f0118e77 <test_kheap_virt_addr+0xea5>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0118ed5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118edb:	05 04 07 00 00       	add    $0x704,%eax
f0118ee0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0118ee3:	eb 41                	jmp    f0118f26 <test_kheap_virt_addr+0xf54>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0118ee5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118eeb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118eee:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0118ef1:	83 ec 0c             	sub    $0xc,%esp
f0118ef4:	50                   	push   %eax
f0118ef5:	e8 22 41 ff ff       	call   f010d01c <kheap_virtual_address>
f0118efa:	83 c4 10             	add    $0x10,%esp
f0118efd:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f0118f03:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f0118f0a:	74 17                	je     f0118f23 <test_kheap_virt_addr+0xf51>
			{
				panic("Wrong kheap_virtual_address");
f0118f0c:	83 ec 04             	sub    $0x4,%esp
f0118f0f:	68 30 ed 11 f0       	push   $0xf011ed30
f0118f14:	68 15 09 00 00       	push   $0x915
f0118f19:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118f1e:	e8 70 72 fe ff       	call   f0100193 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0118f23:	ff 45 d8             	incl   -0x28(%ebp)
f0118f26:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118f2c:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f0118f32:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118f35:	39 c2                	cmp    %eax,%edx
f0118f37:	77 ac                	ja     f0118ee5 <test_kheap_virt_addr+0xf13>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0118f39:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118f3f:	05 04 0d 00 00       	add    $0xd04,%eax
f0118f44:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0118f47:	eb 4b                	jmp    f0118f94 <test_kheap_virt_addr+0xfc2>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0118f49:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118f4f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118f52:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0118f55:	83 ec 0c             	sub    $0xc,%esp
f0118f58:	50                   	push   %eax
f0118f59:	e8 be 40 ff ff       	call   f010d01c <kheap_virtual_address>
f0118f5e:	83 c4 10             	add    $0x10,%esp
f0118f61:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f0118f67:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118f6a:	c1 e0 0c             	shl    $0xc,%eax
f0118f6d:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0118f72:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f0118f78:	74 17                	je     f0118f91 <test_kheap_virt_addr+0xfbf>
			{
				panic("Wrong kheap_virtual_address");
f0118f7a:	83 ec 04             	sub    $0x4,%esp
f0118f7d:	68 30 ed 11 f0       	push   $0xf011ed30
f0118f82:	68 1e 09 00 00       	push   $0x91e
f0118f87:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0118f8c:	e8 02 72 fe ff       	call   f0100193 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0118f91:	ff 45 d8             	incl   -0x28(%ebp)
f0118f94:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118f9a:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0118fa0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118fa3:	39 c2                	cmp    %eax,%edx
f0118fa5:	77 a2                	ja     f0118f49 <test_kheap_virt_addr+0xf77>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0118fa7:	83 ec 0c             	sub    $0xc,%esp
f0118faa:	68 69 e4 11 f0       	push   $0xf011e469
f0118faf:	e8 ef e5 fe ff       	call   f01075a3 <cprintf>
f0118fb4:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0118fb7:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0118fbe:	eb 54                	jmp    f0119014 <test_kheap_virt_addr+0x1042>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0118fc0:	83 ec 0c             	sub    $0xc,%esp
f0118fc3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0118fc6:	e8 51 40 ff ff       	call   f010d01c <kheap_virtual_address>
f0118fcb:	83 c4 10             	add    $0x10,%esp
f0118fce:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f0118fd4:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f0118fdb:	74 30                	je     f011900d <test_kheap_virt_addr+0x103b>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0118fdd:	83 ec 04             	sub    $0x4,%esp
f0118fe0:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118fe6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0118fe9:	68 7d ed 11 f0       	push   $0xf011ed7d
f0118fee:	e8 b0 e5 fe ff       	call   f01075a3 <cprintf>
f0118ff3:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0118ff6:	83 ec 04             	sub    $0x4,%esp
f0118ff9:	68 30 ed 11 f0       	push   $0xf011ed30
f0118ffe:	68 2e 09 00 00       	push   $0x92e
f0119003:	68 e6 e2 11 f0       	push   $0xf011e2e6
f0119008:	e8 86 71 fe ff       	call   f0100193 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011900d:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0119014:	b8 50 12 3b 00       	mov    $0x3b1250,%eax
f0119019:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f011901c:	72 a2                	jb     f0118fc0 <test_kheap_virt_addr+0xfee>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f011901e:	83 ec 0c             	sub    $0xc,%esp
f0119021:	68 c2 e4 11 f0       	push   $0xf011e4c2
f0119026:	e8 78 e5 fe ff       	call   f01075a3 <cprintf>
f011902b:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f011902e:	83 ec 0c             	sub    $0xc,%esp
f0119031:	68 9c ed 11 f0       	push   $0xf011ed9c
f0119036:	e8 68 e5 fe ff       	call   f01075a3 <cprintf>
f011903b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011903e:	b8 01 00 00 00       	mov    $0x1,%eax
f0119043:	89 f4                	mov    %esi,%esp

}
f0119045:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119048:	5b                   	pop    %ebx
f0119049:	5e                   	pop    %esi
f011904a:	5f                   	pop    %edi
f011904b:	5d                   	pop    %ebp
f011904c:	c3                   	ret    

f011904d <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011904d:	55                   	push   %ebp
f011904e:	89 e5                	mov    %esp,%ebp
//		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
//	}
//
//	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");

	return 1;
f0119050:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0119055:	5d                   	pop    %ebp
f0119056:	c3                   	ret    

f0119057 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0119057:	55                   	push   %ebp
f0119058:	89 e5                	mov    %esp,%ebp
f011905a:	53                   	push   %ebx
f011905b:	83 ec 14             	sub    $0x14,%esp
f011905e:	8b 45 10             	mov    0x10(%ebp),%eax
f0119061:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0119064:	8b 45 14             	mov    0x14(%ebp),%eax
f0119067:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f011906a:	8b 45 18             	mov    0x18(%ebp),%eax
f011906d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119072:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0119075:	77 55                	ja     f01190cc <printnum+0x75>
f0119077:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f011907a:	72 05                	jb     f0119081 <printnum+0x2a>
f011907c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011907f:	77 4b                	ja     f01190cc <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0119081:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0119084:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0119087:	8b 45 18             	mov    0x18(%ebp),%eax
f011908a:	ba 00 00 00 00       	mov    $0x0,%edx
f011908f:	52                   	push   %edx
f0119090:	50                   	push   %eax
f0119091:	ff 75 f4             	pushl  -0xc(%ebp)
f0119094:	ff 75 f0             	pushl  -0x10(%ebp)
f0119097:	e8 88 19 00 00       	call   f011aa24 <__udivdi3>
f011909c:	83 c4 10             	add    $0x10,%esp
f011909f:	83 ec 04             	sub    $0x4,%esp
f01190a2:	ff 75 20             	pushl  0x20(%ebp)
f01190a5:	53                   	push   %ebx
f01190a6:	ff 75 18             	pushl  0x18(%ebp)
f01190a9:	52                   	push   %edx
f01190aa:	50                   	push   %eax
f01190ab:	ff 75 0c             	pushl  0xc(%ebp)
f01190ae:	ff 75 08             	pushl  0x8(%ebp)
f01190b1:	e8 a1 ff ff ff       	call   f0119057 <printnum>
f01190b6:	83 c4 20             	add    $0x20,%esp
f01190b9:	eb 1a                	jmp    f01190d5 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f01190bb:	83 ec 08             	sub    $0x8,%esp
f01190be:	ff 75 0c             	pushl  0xc(%ebp)
f01190c1:	ff 75 20             	pushl  0x20(%ebp)
f01190c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01190c7:	ff d0                	call   *%eax
f01190c9:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f01190cc:	ff 4d 1c             	decl   0x1c(%ebp)
f01190cf:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f01190d3:	7f e6                	jg     f01190bb <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f01190d5:	8b 4d 18             	mov    0x18(%ebp),%ecx
f01190d8:	bb 00 00 00 00       	mov    $0x0,%ebx
f01190dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01190e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01190e3:	53                   	push   %ebx
f01190e4:	51                   	push   %ecx
f01190e5:	52                   	push   %edx
f01190e6:	50                   	push   %eax
f01190e7:	e8 48 1a 00 00       	call   f011ab34 <__umoddi3>
f01190ec:	83 c4 10             	add    $0x10,%esp
f01190ef:	05 14 f0 11 f0       	add    $0xf011f014,%eax
f01190f4:	8a 00                	mov    (%eax),%al
f01190f6:	0f be c0             	movsbl %al,%eax
f01190f9:	83 ec 08             	sub    $0x8,%esp
f01190fc:	ff 75 0c             	pushl  0xc(%ebp)
f01190ff:	50                   	push   %eax
f0119100:	8b 45 08             	mov    0x8(%ebp),%eax
f0119103:	ff d0                	call   *%eax
f0119105:	83 c4 10             	add    $0x10,%esp
}
f0119108:	90                   	nop
f0119109:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011910c:	c9                   	leave  
f011910d:	c3                   	ret    

f011910e <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f011910e:	55                   	push   %ebp
f011910f:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0119111:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0119115:	7e 1c                	jle    f0119133 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0119117:	8b 45 08             	mov    0x8(%ebp),%eax
f011911a:	8b 00                	mov    (%eax),%eax
f011911c:	8d 50 08             	lea    0x8(%eax),%edx
f011911f:	8b 45 08             	mov    0x8(%ebp),%eax
f0119122:	89 10                	mov    %edx,(%eax)
f0119124:	8b 45 08             	mov    0x8(%ebp),%eax
f0119127:	8b 00                	mov    (%eax),%eax
f0119129:	83 e8 08             	sub    $0x8,%eax
f011912c:	8b 50 04             	mov    0x4(%eax),%edx
f011912f:	8b 00                	mov    (%eax),%eax
f0119131:	eb 40                	jmp    f0119173 <getuint+0x65>
	else if (lflag)
f0119133:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0119137:	74 1e                	je     f0119157 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0119139:	8b 45 08             	mov    0x8(%ebp),%eax
f011913c:	8b 00                	mov    (%eax),%eax
f011913e:	8d 50 04             	lea    0x4(%eax),%edx
f0119141:	8b 45 08             	mov    0x8(%ebp),%eax
f0119144:	89 10                	mov    %edx,(%eax)
f0119146:	8b 45 08             	mov    0x8(%ebp),%eax
f0119149:	8b 00                	mov    (%eax),%eax
f011914b:	83 e8 04             	sub    $0x4,%eax
f011914e:	8b 00                	mov    (%eax),%eax
f0119150:	ba 00 00 00 00       	mov    $0x0,%edx
f0119155:	eb 1c                	jmp    f0119173 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0119157:	8b 45 08             	mov    0x8(%ebp),%eax
f011915a:	8b 00                	mov    (%eax),%eax
f011915c:	8d 50 04             	lea    0x4(%eax),%edx
f011915f:	8b 45 08             	mov    0x8(%ebp),%eax
f0119162:	89 10                	mov    %edx,(%eax)
f0119164:	8b 45 08             	mov    0x8(%ebp),%eax
f0119167:	8b 00                	mov    (%eax),%eax
f0119169:	83 e8 04             	sub    $0x4,%eax
f011916c:	8b 00                	mov    (%eax),%eax
f011916e:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0119173:	5d                   	pop    %ebp
f0119174:	c3                   	ret    

f0119175 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0119175:	55                   	push   %ebp
f0119176:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0119178:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f011917c:	7e 1c                	jle    f011919a <getint+0x25>
		return va_arg(*ap, long long);
f011917e:	8b 45 08             	mov    0x8(%ebp),%eax
f0119181:	8b 00                	mov    (%eax),%eax
f0119183:	8d 50 08             	lea    0x8(%eax),%edx
f0119186:	8b 45 08             	mov    0x8(%ebp),%eax
f0119189:	89 10                	mov    %edx,(%eax)
f011918b:	8b 45 08             	mov    0x8(%ebp),%eax
f011918e:	8b 00                	mov    (%eax),%eax
f0119190:	83 e8 08             	sub    $0x8,%eax
f0119193:	8b 50 04             	mov    0x4(%eax),%edx
f0119196:	8b 00                	mov    (%eax),%eax
f0119198:	eb 38                	jmp    f01191d2 <getint+0x5d>
	else if (lflag)
f011919a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011919e:	74 1a                	je     f01191ba <getint+0x45>
		return va_arg(*ap, long);
f01191a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01191a3:	8b 00                	mov    (%eax),%eax
f01191a5:	8d 50 04             	lea    0x4(%eax),%edx
f01191a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01191ab:	89 10                	mov    %edx,(%eax)
f01191ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01191b0:	8b 00                	mov    (%eax),%eax
f01191b2:	83 e8 04             	sub    $0x4,%eax
f01191b5:	8b 00                	mov    (%eax),%eax
f01191b7:	99                   	cltd   
f01191b8:	eb 18                	jmp    f01191d2 <getint+0x5d>
	else
		return va_arg(*ap, int);
f01191ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01191bd:	8b 00                	mov    (%eax),%eax
f01191bf:	8d 50 04             	lea    0x4(%eax),%edx
f01191c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01191c5:	89 10                	mov    %edx,(%eax)
f01191c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01191ca:	8b 00                	mov    (%eax),%eax
f01191cc:	83 e8 04             	sub    $0x4,%eax
f01191cf:	8b 00                	mov    (%eax),%eax
f01191d1:	99                   	cltd   
}
f01191d2:	5d                   	pop    %ebp
f01191d3:	c3                   	ret    

f01191d4 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f01191d4:	55                   	push   %ebp
f01191d5:	89 e5                	mov    %esp,%ebp
f01191d7:	56                   	push   %esi
f01191d8:	53                   	push   %ebx
f01191d9:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01191dc:	eb 17                	jmp    f01191f5 <vprintfmt+0x21>
			if (ch == '\0')
f01191de:	85 db                	test   %ebx,%ebx
f01191e0:	0f 84 af 03 00 00    	je     f0119595 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f01191e6:	83 ec 08             	sub    $0x8,%esp
f01191e9:	ff 75 0c             	pushl  0xc(%ebp)
f01191ec:	53                   	push   %ebx
f01191ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01191f0:	ff d0                	call   *%eax
f01191f2:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01191f5:	8b 45 10             	mov    0x10(%ebp),%eax
f01191f8:	8d 50 01             	lea    0x1(%eax),%edx
f01191fb:	89 55 10             	mov    %edx,0x10(%ebp)
f01191fe:	8a 00                	mov    (%eax),%al
f0119200:	0f b6 d8             	movzbl %al,%ebx
f0119203:	83 fb 25             	cmp    $0x25,%ebx
f0119206:	75 d6                	jne    f01191de <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0119208:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f011920c:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0119213:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f011921a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0119221:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0119228:	8b 45 10             	mov    0x10(%ebp),%eax
f011922b:	8d 50 01             	lea    0x1(%eax),%edx
f011922e:	89 55 10             	mov    %edx,0x10(%ebp)
f0119231:	8a 00                	mov    (%eax),%al
f0119233:	0f b6 d8             	movzbl %al,%ebx
f0119236:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0119239:	83 f8 55             	cmp    $0x55,%eax
f011923c:	0f 87 2b 03 00 00    	ja     f011956d <vprintfmt+0x399>
f0119242:	8b 04 85 38 f0 11 f0 	mov    -0xfee0fc8(,%eax,4),%eax
f0119249:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f011924b:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f011924f:	eb d7                	jmp    f0119228 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0119251:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0119255:	eb d1                	jmp    f0119228 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0119257:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f011925e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0119261:	89 d0                	mov    %edx,%eax
f0119263:	c1 e0 02             	shl    $0x2,%eax
f0119266:	01 d0                	add    %edx,%eax
f0119268:	01 c0                	add    %eax,%eax
f011926a:	01 d8                	add    %ebx,%eax
f011926c:	83 e8 30             	sub    $0x30,%eax
f011926f:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0119272:	8b 45 10             	mov    0x10(%ebp),%eax
f0119275:	8a 00                	mov    (%eax),%al
f0119277:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f011927a:	83 fb 2f             	cmp    $0x2f,%ebx
f011927d:	7e 3e                	jle    f01192bd <vprintfmt+0xe9>
f011927f:	83 fb 39             	cmp    $0x39,%ebx
f0119282:	7f 39                	jg     f01192bd <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0119284:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0119287:	eb d5                	jmp    f011925e <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0119289:	8b 45 14             	mov    0x14(%ebp),%eax
f011928c:	83 c0 04             	add    $0x4,%eax
f011928f:	89 45 14             	mov    %eax,0x14(%ebp)
f0119292:	8b 45 14             	mov    0x14(%ebp),%eax
f0119295:	83 e8 04             	sub    $0x4,%eax
f0119298:	8b 00                	mov    (%eax),%eax
f011929a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f011929d:	eb 1f                	jmp    f01192be <vprintfmt+0xea>

		case '.':
			if (width < 0)
f011929f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01192a3:	79 83                	jns    f0119228 <vprintfmt+0x54>
				width = 0;
f01192a5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01192ac:	e9 77 ff ff ff       	jmp    f0119228 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f01192b1:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f01192b8:	e9 6b ff ff ff       	jmp    f0119228 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f01192bd:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f01192be:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01192c2:	0f 89 60 ff ff ff    	jns    f0119228 <vprintfmt+0x54>
				width = precision, precision = -1;
f01192c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01192cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01192ce:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f01192d5:	e9 4e ff ff ff       	jmp    f0119228 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f01192da:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f01192dd:	e9 46 ff ff ff       	jmp    f0119228 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f01192e2:	8b 45 14             	mov    0x14(%ebp),%eax
f01192e5:	83 c0 04             	add    $0x4,%eax
f01192e8:	89 45 14             	mov    %eax,0x14(%ebp)
f01192eb:	8b 45 14             	mov    0x14(%ebp),%eax
f01192ee:	83 e8 04             	sub    $0x4,%eax
f01192f1:	8b 00                	mov    (%eax),%eax
f01192f3:	83 ec 08             	sub    $0x8,%esp
f01192f6:	ff 75 0c             	pushl  0xc(%ebp)
f01192f9:	50                   	push   %eax
f01192fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01192fd:	ff d0                	call   *%eax
f01192ff:	83 c4 10             	add    $0x10,%esp
			break;
f0119302:	e9 89 02 00 00       	jmp    f0119590 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0119307:	8b 45 14             	mov    0x14(%ebp),%eax
f011930a:	83 c0 04             	add    $0x4,%eax
f011930d:	89 45 14             	mov    %eax,0x14(%ebp)
f0119310:	8b 45 14             	mov    0x14(%ebp),%eax
f0119313:	83 e8 04             	sub    $0x4,%eax
f0119316:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0119318:	85 db                	test   %ebx,%ebx
f011931a:	79 02                	jns    f011931e <vprintfmt+0x14a>
				err = -err;
f011931c:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f011931e:	83 fb 64             	cmp    $0x64,%ebx
f0119321:	7f 0b                	jg     f011932e <vprintfmt+0x15a>
f0119323:	8b 34 9d 80 ee 11 f0 	mov    -0xfee1180(,%ebx,4),%esi
f011932a:	85 f6                	test   %esi,%esi
f011932c:	75 19                	jne    f0119347 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f011932e:	53                   	push   %ebx
f011932f:	68 25 f0 11 f0       	push   $0xf011f025
f0119334:	ff 75 0c             	pushl  0xc(%ebp)
f0119337:	ff 75 08             	pushl  0x8(%ebp)
f011933a:	e8 5e 02 00 00       	call   f011959d <printfmt>
f011933f:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0119342:	e9 49 02 00 00       	jmp    f0119590 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0119347:	56                   	push   %esi
f0119348:	68 2e f0 11 f0       	push   $0xf011f02e
f011934d:	ff 75 0c             	pushl  0xc(%ebp)
f0119350:	ff 75 08             	pushl  0x8(%ebp)
f0119353:	e8 45 02 00 00       	call   f011959d <printfmt>
f0119358:	83 c4 10             	add    $0x10,%esp
			break;
f011935b:	e9 30 02 00 00       	jmp    f0119590 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0119360:	8b 45 14             	mov    0x14(%ebp),%eax
f0119363:	83 c0 04             	add    $0x4,%eax
f0119366:	89 45 14             	mov    %eax,0x14(%ebp)
f0119369:	8b 45 14             	mov    0x14(%ebp),%eax
f011936c:	83 e8 04             	sub    $0x4,%eax
f011936f:	8b 30                	mov    (%eax),%esi
f0119371:	85 f6                	test   %esi,%esi
f0119373:	75 05                	jne    f011937a <vprintfmt+0x1a6>
				p = "(null)";
f0119375:	be 31 f0 11 f0       	mov    $0xf011f031,%esi
			if (width > 0 && padc != '-')
f011937a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011937e:	7e 6d                	jle    f01193ed <vprintfmt+0x219>
f0119380:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0119384:	74 67                	je     f01193ed <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0119386:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119389:	83 ec 08             	sub    $0x8,%esp
f011938c:	50                   	push   %eax
f011938d:	56                   	push   %esi
f011938e:	e8 12 05 00 00       	call   f01198a5 <strnlen>
f0119393:	83 c4 10             	add    $0x10,%esp
f0119396:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0119399:	eb 16                	jmp    f01193b1 <vprintfmt+0x1dd>
					putch(padc, putdat);
f011939b:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f011939f:	83 ec 08             	sub    $0x8,%esp
f01193a2:	ff 75 0c             	pushl  0xc(%ebp)
f01193a5:	50                   	push   %eax
f01193a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01193a9:	ff d0                	call   *%eax
f01193ab:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01193ae:	ff 4d e4             	decl   -0x1c(%ebp)
f01193b1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01193b5:	7f e4                	jg     f011939b <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01193b7:	eb 34                	jmp    f01193ed <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01193b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01193bd:	74 1c                	je     f01193db <vprintfmt+0x207>
f01193bf:	83 fb 1f             	cmp    $0x1f,%ebx
f01193c2:	7e 05                	jle    f01193c9 <vprintfmt+0x1f5>
f01193c4:	83 fb 7e             	cmp    $0x7e,%ebx
f01193c7:	7e 12                	jle    f01193db <vprintfmt+0x207>
					putch('?', putdat);
f01193c9:	83 ec 08             	sub    $0x8,%esp
f01193cc:	ff 75 0c             	pushl  0xc(%ebp)
f01193cf:	6a 3f                	push   $0x3f
f01193d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01193d4:	ff d0                	call   *%eax
f01193d6:	83 c4 10             	add    $0x10,%esp
f01193d9:	eb 0f                	jmp    f01193ea <vprintfmt+0x216>
				else
					putch(ch, putdat);
f01193db:	83 ec 08             	sub    $0x8,%esp
f01193de:	ff 75 0c             	pushl  0xc(%ebp)
f01193e1:	53                   	push   %ebx
f01193e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01193e5:	ff d0                	call   *%eax
f01193e7:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01193ea:	ff 4d e4             	decl   -0x1c(%ebp)
f01193ed:	89 f0                	mov    %esi,%eax
f01193ef:	8d 70 01             	lea    0x1(%eax),%esi
f01193f2:	8a 00                	mov    (%eax),%al
f01193f4:	0f be d8             	movsbl %al,%ebx
f01193f7:	85 db                	test   %ebx,%ebx
f01193f9:	74 24                	je     f011941f <vprintfmt+0x24b>
f01193fb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01193ff:	78 b8                	js     f01193b9 <vprintfmt+0x1e5>
f0119401:	ff 4d e0             	decl   -0x20(%ebp)
f0119404:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0119408:	79 af                	jns    f01193b9 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f011940a:	eb 13                	jmp    f011941f <vprintfmt+0x24b>
				putch(' ', putdat);
f011940c:	83 ec 08             	sub    $0x8,%esp
f011940f:	ff 75 0c             	pushl  0xc(%ebp)
f0119412:	6a 20                	push   $0x20
f0119414:	8b 45 08             	mov    0x8(%ebp),%eax
f0119417:	ff d0                	call   *%eax
f0119419:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f011941c:	ff 4d e4             	decl   -0x1c(%ebp)
f011941f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0119423:	7f e7                	jg     f011940c <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0119425:	e9 66 01 00 00       	jmp    f0119590 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f011942a:	83 ec 08             	sub    $0x8,%esp
f011942d:	ff 75 e8             	pushl  -0x18(%ebp)
f0119430:	8d 45 14             	lea    0x14(%ebp),%eax
f0119433:	50                   	push   %eax
f0119434:	e8 3c fd ff ff       	call   f0119175 <getint>
f0119439:	83 c4 10             	add    $0x10,%esp
f011943c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011943f:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0119442:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119445:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119448:	85 d2                	test   %edx,%edx
f011944a:	79 23                	jns    f011946f <vprintfmt+0x29b>
				putch('-', putdat);
f011944c:	83 ec 08             	sub    $0x8,%esp
f011944f:	ff 75 0c             	pushl  0xc(%ebp)
f0119452:	6a 2d                	push   $0x2d
f0119454:	8b 45 08             	mov    0x8(%ebp),%eax
f0119457:	ff d0                	call   *%eax
f0119459:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f011945c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011945f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119462:	f7 d8                	neg    %eax
f0119464:	83 d2 00             	adc    $0x0,%edx
f0119467:	f7 da                	neg    %edx
f0119469:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011946c:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f011946f:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0119476:	e9 bc 00 00 00       	jmp    f0119537 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f011947b:	83 ec 08             	sub    $0x8,%esp
f011947e:	ff 75 e8             	pushl  -0x18(%ebp)
f0119481:	8d 45 14             	lea    0x14(%ebp),%eax
f0119484:	50                   	push   %eax
f0119485:	e8 84 fc ff ff       	call   f011910e <getuint>
f011948a:	83 c4 10             	add    $0x10,%esp
f011948d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0119490:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0119493:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f011949a:	e9 98 00 00 00       	jmp    f0119537 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f011949f:	83 ec 08             	sub    $0x8,%esp
f01194a2:	ff 75 0c             	pushl  0xc(%ebp)
f01194a5:	6a 58                	push   $0x58
f01194a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01194aa:	ff d0                	call   *%eax
f01194ac:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01194af:	83 ec 08             	sub    $0x8,%esp
f01194b2:	ff 75 0c             	pushl  0xc(%ebp)
f01194b5:	6a 58                	push   $0x58
f01194b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01194ba:	ff d0                	call   *%eax
f01194bc:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01194bf:	83 ec 08             	sub    $0x8,%esp
f01194c2:	ff 75 0c             	pushl  0xc(%ebp)
f01194c5:	6a 58                	push   $0x58
f01194c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01194ca:	ff d0                	call   *%eax
f01194cc:	83 c4 10             	add    $0x10,%esp
			break;
f01194cf:	e9 bc 00 00 00       	jmp    f0119590 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f01194d4:	83 ec 08             	sub    $0x8,%esp
f01194d7:	ff 75 0c             	pushl  0xc(%ebp)
f01194da:	6a 30                	push   $0x30
f01194dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01194df:	ff d0                	call   *%eax
f01194e1:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f01194e4:	83 ec 08             	sub    $0x8,%esp
f01194e7:	ff 75 0c             	pushl  0xc(%ebp)
f01194ea:	6a 78                	push   $0x78
f01194ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01194ef:	ff d0                	call   *%eax
f01194f1:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01194f4:	8b 45 14             	mov    0x14(%ebp),%eax
f01194f7:	83 c0 04             	add    $0x4,%eax
f01194fa:	89 45 14             	mov    %eax,0x14(%ebp)
f01194fd:	8b 45 14             	mov    0x14(%ebp),%eax
f0119500:	83 e8 04             	sub    $0x4,%eax
f0119503:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0119505:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0119508:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f011950f:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0119516:	eb 1f                	jmp    f0119537 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f0119518:	83 ec 08             	sub    $0x8,%esp
f011951b:	ff 75 e8             	pushl  -0x18(%ebp)
f011951e:	8d 45 14             	lea    0x14(%ebp),%eax
f0119521:	50                   	push   %eax
f0119522:	e8 e7 fb ff ff       	call   f011910e <getuint>
f0119527:	83 c4 10             	add    $0x10,%esp
f011952a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011952d:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0119530:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f0119537:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f011953b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011953e:	83 ec 04             	sub    $0x4,%esp
f0119541:	52                   	push   %edx
f0119542:	ff 75 e4             	pushl  -0x1c(%ebp)
f0119545:	50                   	push   %eax
f0119546:	ff 75 f4             	pushl  -0xc(%ebp)
f0119549:	ff 75 f0             	pushl  -0x10(%ebp)
f011954c:	ff 75 0c             	pushl  0xc(%ebp)
f011954f:	ff 75 08             	pushl  0x8(%ebp)
f0119552:	e8 00 fb ff ff       	call   f0119057 <printnum>
f0119557:	83 c4 20             	add    $0x20,%esp
			break;
f011955a:	eb 34                	jmp    f0119590 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f011955c:	83 ec 08             	sub    $0x8,%esp
f011955f:	ff 75 0c             	pushl  0xc(%ebp)
f0119562:	53                   	push   %ebx
f0119563:	8b 45 08             	mov    0x8(%ebp),%eax
f0119566:	ff d0                	call   *%eax
f0119568:	83 c4 10             	add    $0x10,%esp
			break;
f011956b:	eb 23                	jmp    f0119590 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f011956d:	83 ec 08             	sub    $0x8,%esp
f0119570:	ff 75 0c             	pushl  0xc(%ebp)
f0119573:	6a 25                	push   $0x25
f0119575:	8b 45 08             	mov    0x8(%ebp),%eax
f0119578:	ff d0                	call   *%eax
f011957a:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f011957d:	ff 4d 10             	decl   0x10(%ebp)
f0119580:	eb 03                	jmp    f0119585 <vprintfmt+0x3b1>
f0119582:	ff 4d 10             	decl   0x10(%ebp)
f0119585:	8b 45 10             	mov    0x10(%ebp),%eax
f0119588:	48                   	dec    %eax
f0119589:	8a 00                	mov    (%eax),%al
f011958b:	3c 25                	cmp    $0x25,%al
f011958d:	75 f3                	jne    f0119582 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f011958f:	90                   	nop
		}
	}
f0119590:	e9 47 fc ff ff       	jmp    f01191dc <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0119595:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0119596:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119599:	5b                   	pop    %ebx
f011959a:	5e                   	pop    %esi
f011959b:	5d                   	pop    %ebp
f011959c:	c3                   	ret    

f011959d <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f011959d:	55                   	push   %ebp
f011959e:	89 e5                	mov    %esp,%ebp
f01195a0:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01195a3:	8d 45 10             	lea    0x10(%ebp),%eax
f01195a6:	83 c0 04             	add    $0x4,%eax
f01195a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01195ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01195af:	ff 75 f4             	pushl  -0xc(%ebp)
f01195b2:	50                   	push   %eax
f01195b3:	ff 75 0c             	pushl  0xc(%ebp)
f01195b6:	ff 75 08             	pushl  0x8(%ebp)
f01195b9:	e8 16 fc ff ff       	call   f01191d4 <vprintfmt>
f01195be:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01195c1:	90                   	nop
f01195c2:	c9                   	leave  
f01195c3:	c3                   	ret    

f01195c4 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01195c4:	55                   	push   %ebp
f01195c5:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01195c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01195ca:	8b 40 08             	mov    0x8(%eax),%eax
f01195cd:	8d 50 01             	lea    0x1(%eax),%edx
f01195d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01195d3:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f01195d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01195d9:	8b 10                	mov    (%eax),%edx
f01195db:	8b 45 0c             	mov    0xc(%ebp),%eax
f01195de:	8b 40 04             	mov    0x4(%eax),%eax
f01195e1:	39 c2                	cmp    %eax,%edx
f01195e3:	73 12                	jae    f01195f7 <sprintputch+0x33>
		*b->buf++ = ch;
f01195e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01195e8:	8b 00                	mov    (%eax),%eax
f01195ea:	8d 48 01             	lea    0x1(%eax),%ecx
f01195ed:	8b 55 0c             	mov    0xc(%ebp),%edx
f01195f0:	89 0a                	mov    %ecx,(%edx)
f01195f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01195f5:	88 10                	mov    %dl,(%eax)
}
f01195f7:	90                   	nop
f01195f8:	5d                   	pop    %ebp
f01195f9:	c3                   	ret    

f01195fa <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01195fa:	55                   	push   %ebp
f01195fb:	89 e5                	mov    %esp,%ebp
f01195fd:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0119600:	8b 45 08             	mov    0x8(%ebp),%eax
f0119603:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0119606:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119609:	8d 50 ff             	lea    -0x1(%eax),%edx
f011960c:	8b 45 08             	mov    0x8(%ebp),%eax
f011960f:	01 d0                	add    %edx,%eax
f0119611:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0119614:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f011961b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011961f:	74 06                	je     f0119627 <vsnprintf+0x2d>
f0119621:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0119625:	7f 07                	jg     f011962e <vsnprintf+0x34>
		return -E_INVAL;
f0119627:	b8 03 00 00 00       	mov    $0x3,%eax
f011962c:	eb 20                	jmp    f011964e <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f011962e:	ff 75 14             	pushl  0x14(%ebp)
f0119631:	ff 75 10             	pushl  0x10(%ebp)
f0119634:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0119637:	50                   	push   %eax
f0119638:	68 c4 95 11 f0       	push   $0xf01195c4
f011963d:	e8 92 fb ff ff       	call   f01191d4 <vprintfmt>
f0119642:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0119645:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119648:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f011964b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f011964e:	c9                   	leave  
f011964f:	c3                   	ret    

f0119650 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0119650:	55                   	push   %ebp
f0119651:	89 e5                	mov    %esp,%ebp
f0119653:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0119656:	8d 45 10             	lea    0x10(%ebp),%eax
f0119659:	83 c0 04             	add    $0x4,%eax
f011965c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f011965f:	8b 45 10             	mov    0x10(%ebp),%eax
f0119662:	ff 75 f4             	pushl  -0xc(%ebp)
f0119665:	50                   	push   %eax
f0119666:	ff 75 0c             	pushl  0xc(%ebp)
f0119669:	ff 75 08             	pushl  0x8(%ebp)
f011966c:	e8 89 ff ff ff       	call   f01195fa <vsnprintf>
f0119671:	83 c4 10             	add    $0x10,%esp
f0119674:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0119677:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f011967a:	c9                   	leave  
f011967b:	c3                   	ret    

f011967c <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f011967c:	55                   	push   %ebp
f011967d:	89 e5                	mov    %esp,%ebp
f011967f:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0119682:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0119686:	74 13                	je     f011969b <readline+0x1f>
		cprintf("%s", prompt);
f0119688:	83 ec 08             	sub    $0x8,%esp
f011968b:	ff 75 08             	pushl  0x8(%ebp)
f011968e:	68 90 f1 11 f0       	push   $0xf011f190
f0119693:	e8 0b df fe ff       	call   f01075a3 <cprintf>
f0119698:	83 c4 10             	add    $0x10,%esp

	i = 0;
f011969b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01196a2:	83 ec 0c             	sub    $0xc,%esp
f01196a5:	6a 00                	push   $0x0
f01196a7:	e8 8f 76 fe ff       	call   f0100d3b <iscons>
f01196ac:	83 c4 10             	add    $0x10,%esp
f01196af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01196b2:	e8 6b 76 fe ff       	call   f0100d22 <getchar>
f01196b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01196ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01196be:	79 22                	jns    f01196e2 <readline+0x66>
			if (c != -E_EOF)
f01196c0:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01196c4:	0f 84 ad 00 00 00    	je     f0119777 <readline+0xfb>
				cprintf("read error: %e\n", c);
f01196ca:	83 ec 08             	sub    $0x8,%esp
f01196cd:	ff 75 ec             	pushl  -0x14(%ebp)
f01196d0:	68 93 f1 11 f0       	push   $0xf011f193
f01196d5:	e8 c9 de fe ff       	call   f01075a3 <cprintf>
f01196da:	83 c4 10             	add    $0x10,%esp
			return;
f01196dd:	e9 95 00 00 00       	jmp    f0119777 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01196e2:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01196e6:	7e 34                	jle    f011971c <readline+0xa0>
f01196e8:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01196ef:	7f 2b                	jg     f011971c <readline+0xa0>
			if (echoing)
f01196f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01196f5:	74 0e                	je     f0119705 <readline+0x89>
				cputchar(c);
f01196f7:	83 ec 0c             	sub    $0xc,%esp
f01196fa:	ff 75 ec             	pushl  -0x14(%ebp)
f01196fd:	e8 09 76 fe ff       	call   f0100d0b <cputchar>
f0119702:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0119705:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119708:	8d 50 01             	lea    0x1(%eax),%edx
f011970b:	89 55 f4             	mov    %edx,-0xc(%ebp)
f011970e:	89 c2                	mov    %eax,%edx
f0119710:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119713:	01 d0                	add    %edx,%eax
f0119715:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119718:	88 10                	mov    %dl,(%eax)
f011971a:	eb 56                	jmp    f0119772 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f011971c:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0119720:	75 1f                	jne    f0119741 <readline+0xc5>
f0119722:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0119726:	7e 19                	jle    f0119741 <readline+0xc5>
			if (echoing)
f0119728:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011972c:	74 0e                	je     f011973c <readline+0xc0>
				cputchar(c);
f011972e:	83 ec 0c             	sub    $0xc,%esp
f0119731:	ff 75 ec             	pushl  -0x14(%ebp)
f0119734:	e8 d2 75 fe ff       	call   f0100d0b <cputchar>
f0119739:	83 c4 10             	add    $0x10,%esp

			i--;
f011973c:	ff 4d f4             	decl   -0xc(%ebp)
f011973f:	eb 31                	jmp    f0119772 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0119741:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0119745:	74 0a                	je     f0119751 <readline+0xd5>
f0119747:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f011974b:	0f 85 61 ff ff ff    	jne    f01196b2 <readline+0x36>
			if (echoing)
f0119751:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119755:	74 0e                	je     f0119765 <readline+0xe9>
				cputchar(c);
f0119757:	83 ec 0c             	sub    $0xc,%esp
f011975a:	ff 75 ec             	pushl  -0x14(%ebp)
f011975d:	e8 a9 75 fe ff       	call   f0100d0b <cputchar>
f0119762:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0119765:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119768:	8b 45 0c             	mov    0xc(%ebp),%eax
f011976b:	01 d0                	add    %edx,%eax
f011976d:	c6 00 00             	movb   $0x0,(%eax)
			return;
f0119770:	eb 06                	jmp    f0119778 <readline+0xfc>
		}
	}
f0119772:	e9 3b ff ff ff       	jmp    f01196b2 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0119777:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0119778:	c9                   	leave  
f0119779:	c3                   	ret    

f011977a <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f011977a:	55                   	push   %ebp
f011977b:	89 e5                	mov    %esp,%ebp
f011977d:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0119780:	e8 47 13 ff ff       	call   f010aacc <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0119785:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0119789:	74 13                	je     f011979e <atomic_readline+0x24>
		cprintf("%s", prompt);
f011978b:	83 ec 08             	sub    $0x8,%esp
f011978e:	ff 75 08             	pushl  0x8(%ebp)
f0119791:	68 90 f1 11 f0       	push   $0xf011f190
f0119796:	e8 08 de fe ff       	call   f01075a3 <cprintf>
f011979b:	83 c4 10             	add    $0x10,%esp

	i = 0;
f011979e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01197a5:	83 ec 0c             	sub    $0xc,%esp
f01197a8:	6a 00                	push   $0x0
f01197aa:	e8 8c 75 fe ff       	call   f0100d3b <iscons>
f01197af:	83 c4 10             	add    $0x10,%esp
f01197b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01197b5:	e8 68 75 fe ff       	call   f0100d22 <getchar>
f01197ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01197bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01197c1:	79 23                	jns    f01197e6 <atomic_readline+0x6c>
			if (c != -E_EOF)
f01197c3:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01197c7:	74 13                	je     f01197dc <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f01197c9:	83 ec 08             	sub    $0x8,%esp
f01197cc:	ff 75 ec             	pushl  -0x14(%ebp)
f01197cf:	68 93 f1 11 f0       	push   $0xf011f193
f01197d4:	e8 ca dd fe ff       	call   f01075a3 <cprintf>
f01197d9:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f01197dc:	e8 05 13 ff ff       	call   f010aae6 <sys_enable_interrupt>
			return;
f01197e1:	e9 9a 00 00 00       	jmp    f0119880 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01197e6:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01197ea:	7e 34                	jle    f0119820 <atomic_readline+0xa6>
f01197ec:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01197f3:	7f 2b                	jg     f0119820 <atomic_readline+0xa6>
			if (echoing)
f01197f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01197f9:	74 0e                	je     f0119809 <atomic_readline+0x8f>
				cputchar(c);
f01197fb:	83 ec 0c             	sub    $0xc,%esp
f01197fe:	ff 75 ec             	pushl  -0x14(%ebp)
f0119801:	e8 05 75 fe ff       	call   f0100d0b <cputchar>
f0119806:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0119809:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011980c:	8d 50 01             	lea    0x1(%eax),%edx
f011980f:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0119812:	89 c2                	mov    %eax,%edx
f0119814:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119817:	01 d0                	add    %edx,%eax
f0119819:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011981c:	88 10                	mov    %dl,(%eax)
f011981e:	eb 5b                	jmp    f011987b <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f0119820:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0119824:	75 1f                	jne    f0119845 <atomic_readline+0xcb>
f0119826:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011982a:	7e 19                	jle    f0119845 <atomic_readline+0xcb>
			if (echoing)
f011982c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119830:	74 0e                	je     f0119840 <atomic_readline+0xc6>
				cputchar(c);
f0119832:	83 ec 0c             	sub    $0xc,%esp
f0119835:	ff 75 ec             	pushl  -0x14(%ebp)
f0119838:	e8 ce 74 fe ff       	call   f0100d0b <cputchar>
f011983d:	83 c4 10             	add    $0x10,%esp
			i--;
f0119840:	ff 4d f4             	decl   -0xc(%ebp)
f0119843:	eb 36                	jmp    f011987b <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0119845:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0119849:	74 0a                	je     f0119855 <atomic_readline+0xdb>
f011984b:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f011984f:	0f 85 60 ff ff ff    	jne    f01197b5 <atomic_readline+0x3b>
			if (echoing)
f0119855:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119859:	74 0e                	je     f0119869 <atomic_readline+0xef>
				cputchar(c);
f011985b:	83 ec 0c             	sub    $0xc,%esp
f011985e:	ff 75 ec             	pushl  -0x14(%ebp)
f0119861:	e8 a5 74 fe ff       	call   f0100d0b <cputchar>
f0119866:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0119869:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011986c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011986f:	01 d0                	add    %edx,%eax
f0119871:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f0119874:	e8 6d 12 ff ff       	call   f010aae6 <sys_enable_interrupt>
			return;
f0119879:	eb 05                	jmp    f0119880 <atomic_readline+0x106>
		}
	}
f011987b:	e9 35 ff ff ff       	jmp    f01197b5 <atomic_readline+0x3b>
}
f0119880:	c9                   	leave  
f0119881:	c3                   	ret    

f0119882 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0119882:	55                   	push   %ebp
f0119883:	89 e5                	mov    %esp,%ebp
f0119885:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0119888:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011988f:	eb 06                	jmp    f0119897 <strlen+0x15>
		n++;
f0119891:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0119894:	ff 45 08             	incl   0x8(%ebp)
f0119897:	8b 45 08             	mov    0x8(%ebp),%eax
f011989a:	8a 00                	mov    (%eax),%al
f011989c:	84 c0                	test   %al,%al
f011989e:	75 f1                	jne    f0119891 <strlen+0xf>
		n++;
	return n;
f01198a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01198a3:	c9                   	leave  
f01198a4:	c3                   	ret    

f01198a5 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01198a5:	55                   	push   %ebp
f01198a6:	89 e5                	mov    %esp,%ebp
f01198a8:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01198ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01198b2:	eb 09                	jmp    f01198bd <strnlen+0x18>
		n++;
f01198b4:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01198b7:	ff 45 08             	incl   0x8(%ebp)
f01198ba:	ff 4d 0c             	decl   0xc(%ebp)
f01198bd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01198c1:	74 09                	je     f01198cc <strnlen+0x27>
f01198c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01198c6:	8a 00                	mov    (%eax),%al
f01198c8:	84 c0                	test   %al,%al
f01198ca:	75 e8                	jne    f01198b4 <strnlen+0xf>
		n++;
	return n;
f01198cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01198cf:	c9                   	leave  
f01198d0:	c3                   	ret    

f01198d1 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01198d1:	55                   	push   %ebp
f01198d2:	89 e5                	mov    %esp,%ebp
f01198d4:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01198d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01198da:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01198dd:	90                   	nop
f01198de:	8b 45 08             	mov    0x8(%ebp),%eax
f01198e1:	8d 50 01             	lea    0x1(%eax),%edx
f01198e4:	89 55 08             	mov    %edx,0x8(%ebp)
f01198e7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01198ea:	8d 4a 01             	lea    0x1(%edx),%ecx
f01198ed:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01198f0:	8a 12                	mov    (%edx),%dl
f01198f2:	88 10                	mov    %dl,(%eax)
f01198f4:	8a 00                	mov    (%eax),%al
f01198f6:	84 c0                	test   %al,%al
f01198f8:	75 e4                	jne    f01198de <strcpy+0xd>
		/* do nothing */;
	return ret;
f01198fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01198fd:	c9                   	leave  
f01198fe:	c3                   	ret    

f01198ff <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01198ff:	55                   	push   %ebp
f0119900:	89 e5                	mov    %esp,%ebp
f0119902:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0119905:	8b 45 08             	mov    0x8(%ebp),%eax
f0119908:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f011990b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0119912:	eb 1f                	jmp    f0119933 <strncpy+0x34>
		*dst++ = *src;
f0119914:	8b 45 08             	mov    0x8(%ebp),%eax
f0119917:	8d 50 01             	lea    0x1(%eax),%edx
f011991a:	89 55 08             	mov    %edx,0x8(%ebp)
f011991d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0119920:	8a 12                	mov    (%edx),%dl
f0119922:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0119924:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119927:	8a 00                	mov    (%eax),%al
f0119929:	84 c0                	test   %al,%al
f011992b:	74 03                	je     f0119930 <strncpy+0x31>
			src++;
f011992d:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0119930:	ff 45 fc             	incl   -0x4(%ebp)
f0119933:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119936:	3b 45 10             	cmp    0x10(%ebp),%eax
f0119939:	72 d9                	jb     f0119914 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f011993b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f011993e:	c9                   	leave  
f011993f:	c3                   	ret    

f0119940 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0119940:	55                   	push   %ebp
f0119941:	89 e5                	mov    %esp,%ebp
f0119943:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0119946:	8b 45 08             	mov    0x8(%ebp),%eax
f0119949:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f011994c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0119950:	74 30                	je     f0119982 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0119952:	eb 16                	jmp    f011996a <strlcpy+0x2a>
			*dst++ = *src++;
f0119954:	8b 45 08             	mov    0x8(%ebp),%eax
f0119957:	8d 50 01             	lea    0x1(%eax),%edx
f011995a:	89 55 08             	mov    %edx,0x8(%ebp)
f011995d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0119960:	8d 4a 01             	lea    0x1(%edx),%ecx
f0119963:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0119966:	8a 12                	mov    (%edx),%dl
f0119968:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f011996a:	ff 4d 10             	decl   0x10(%ebp)
f011996d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0119971:	74 09                	je     f011997c <strlcpy+0x3c>
f0119973:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119976:	8a 00                	mov    (%eax),%al
f0119978:	84 c0                	test   %al,%al
f011997a:	75 d8                	jne    f0119954 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f011997c:	8b 45 08             	mov    0x8(%ebp),%eax
f011997f:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0119982:	8b 55 08             	mov    0x8(%ebp),%edx
f0119985:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119988:	29 c2                	sub    %eax,%edx
f011998a:	89 d0                	mov    %edx,%eax
}
f011998c:	c9                   	leave  
f011998d:	c3                   	ret    

f011998e <strcmp>:

int
strcmp(const char *p, const char *q)
{
f011998e:	55                   	push   %ebp
f011998f:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0119991:	eb 06                	jmp    f0119999 <strcmp+0xb>
		p++, q++;
f0119993:	ff 45 08             	incl   0x8(%ebp)
f0119996:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0119999:	8b 45 08             	mov    0x8(%ebp),%eax
f011999c:	8a 00                	mov    (%eax),%al
f011999e:	84 c0                	test   %al,%al
f01199a0:	74 0e                	je     f01199b0 <strcmp+0x22>
f01199a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01199a5:	8a 10                	mov    (%eax),%dl
f01199a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01199aa:	8a 00                	mov    (%eax),%al
f01199ac:	38 c2                	cmp    %al,%dl
f01199ae:	74 e3                	je     f0119993 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01199b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01199b3:	8a 00                	mov    (%eax),%al
f01199b5:	0f b6 d0             	movzbl %al,%edx
f01199b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01199bb:	8a 00                	mov    (%eax),%al
f01199bd:	0f b6 c0             	movzbl %al,%eax
f01199c0:	29 c2                	sub    %eax,%edx
f01199c2:	89 d0                	mov    %edx,%eax
}
f01199c4:	5d                   	pop    %ebp
f01199c5:	c3                   	ret    

f01199c6 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01199c6:	55                   	push   %ebp
f01199c7:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01199c9:	eb 09                	jmp    f01199d4 <strncmp+0xe>
		n--, p++, q++;
f01199cb:	ff 4d 10             	decl   0x10(%ebp)
f01199ce:	ff 45 08             	incl   0x8(%ebp)
f01199d1:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01199d4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01199d8:	74 17                	je     f01199f1 <strncmp+0x2b>
f01199da:	8b 45 08             	mov    0x8(%ebp),%eax
f01199dd:	8a 00                	mov    (%eax),%al
f01199df:	84 c0                	test   %al,%al
f01199e1:	74 0e                	je     f01199f1 <strncmp+0x2b>
f01199e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01199e6:	8a 10                	mov    (%eax),%dl
f01199e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01199eb:	8a 00                	mov    (%eax),%al
f01199ed:	38 c2                	cmp    %al,%dl
f01199ef:	74 da                	je     f01199cb <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01199f1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01199f5:	75 07                	jne    f01199fe <strncmp+0x38>
		return 0;
f01199f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01199fc:	eb 14                	jmp    f0119a12 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01199fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0119a01:	8a 00                	mov    (%eax),%al
f0119a03:	0f b6 d0             	movzbl %al,%edx
f0119a06:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119a09:	8a 00                	mov    (%eax),%al
f0119a0b:	0f b6 c0             	movzbl %al,%eax
f0119a0e:	29 c2                	sub    %eax,%edx
f0119a10:	89 d0                	mov    %edx,%eax
}
f0119a12:	5d                   	pop    %ebp
f0119a13:	c3                   	ret    

f0119a14 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0119a14:	55                   	push   %ebp
f0119a15:	89 e5                	mov    %esp,%ebp
f0119a17:	83 ec 04             	sub    $0x4,%esp
f0119a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119a1d:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0119a20:	eb 12                	jmp    f0119a34 <strchr+0x20>
		if (*s == c)
f0119a22:	8b 45 08             	mov    0x8(%ebp),%eax
f0119a25:	8a 00                	mov    (%eax),%al
f0119a27:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0119a2a:	75 05                	jne    f0119a31 <strchr+0x1d>
			return (char *) s;
f0119a2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0119a2f:	eb 11                	jmp    f0119a42 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0119a31:	ff 45 08             	incl   0x8(%ebp)
f0119a34:	8b 45 08             	mov    0x8(%ebp),%eax
f0119a37:	8a 00                	mov    (%eax),%al
f0119a39:	84 c0                	test   %al,%al
f0119a3b:	75 e5                	jne    f0119a22 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0119a3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0119a42:	c9                   	leave  
f0119a43:	c3                   	ret    

f0119a44 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0119a44:	55                   	push   %ebp
f0119a45:	89 e5                	mov    %esp,%ebp
f0119a47:	83 ec 04             	sub    $0x4,%esp
f0119a4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119a4d:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0119a50:	eb 0d                	jmp    f0119a5f <strfind+0x1b>
		if (*s == c)
f0119a52:	8b 45 08             	mov    0x8(%ebp),%eax
f0119a55:	8a 00                	mov    (%eax),%al
f0119a57:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0119a5a:	74 0e                	je     f0119a6a <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0119a5c:	ff 45 08             	incl   0x8(%ebp)
f0119a5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0119a62:	8a 00                	mov    (%eax),%al
f0119a64:	84 c0                	test   %al,%al
f0119a66:	75 ea                	jne    f0119a52 <strfind+0xe>
f0119a68:	eb 01                	jmp    f0119a6b <strfind+0x27>
		if (*s == c)
			break;
f0119a6a:	90                   	nop
	return (char *) s;
f0119a6b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0119a6e:	c9                   	leave  
f0119a6f:	c3                   	ret    

f0119a70 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0119a70:	55                   	push   %ebp
f0119a71:	89 e5                	mov    %esp,%ebp
f0119a73:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0119a76:	8b 45 08             	mov    0x8(%ebp),%eax
f0119a79:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0119a7c:	8b 45 10             	mov    0x10(%ebp),%eax
f0119a7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0119a82:	eb 0e                	jmp    f0119a92 <memset+0x22>
		*p++ = c;
f0119a84:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119a87:	8d 50 01             	lea    0x1(%eax),%edx
f0119a8a:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0119a8d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0119a90:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0119a92:	ff 4d f8             	decl   -0x8(%ebp)
f0119a95:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0119a99:	79 e9                	jns    f0119a84 <memset+0x14>
		*p++ = c;

	return v;
f0119a9b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0119a9e:	c9                   	leave  
f0119a9f:	c3                   	ret    

f0119aa0 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0119aa0:	55                   	push   %ebp
f0119aa1:	89 e5                	mov    %esp,%ebp
f0119aa3:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0119aa6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119aa9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0119aac:	8b 45 08             	mov    0x8(%ebp),%eax
f0119aaf:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0119ab2:	eb 16                	jmp    f0119aca <memcpy+0x2a>
		*d++ = *s++;
f0119ab4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119ab7:	8d 50 01             	lea    0x1(%eax),%edx
f0119aba:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0119abd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0119ac0:	8d 4a 01             	lea    0x1(%edx),%ecx
f0119ac3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0119ac6:	8a 12                	mov    (%edx),%dl
f0119ac8:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0119aca:	8b 45 10             	mov    0x10(%ebp),%eax
f0119acd:	8d 50 ff             	lea    -0x1(%eax),%edx
f0119ad0:	89 55 10             	mov    %edx,0x10(%ebp)
f0119ad3:	85 c0                	test   %eax,%eax
f0119ad5:	75 dd                	jne    f0119ab4 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0119ad7:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0119ada:	c9                   	leave  
f0119adb:	c3                   	ret    

f0119adc <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0119adc:	55                   	push   %ebp
f0119add:	89 e5                	mov    %esp,%ebp
f0119adf:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0119ae2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119ae5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0119ae8:	8b 45 08             	mov    0x8(%ebp),%eax
f0119aeb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0119aee:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119af1:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0119af4:	73 50                	jae    f0119b46 <memmove+0x6a>
f0119af6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0119af9:	8b 45 10             	mov    0x10(%ebp),%eax
f0119afc:	01 d0                	add    %edx,%eax
f0119afe:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0119b01:	76 43                	jbe    f0119b46 <memmove+0x6a>
		s += n;
f0119b03:	8b 45 10             	mov    0x10(%ebp),%eax
f0119b06:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0119b09:	8b 45 10             	mov    0x10(%ebp),%eax
f0119b0c:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0119b0f:	eb 10                	jmp    f0119b21 <memmove+0x45>
			*--d = *--s;
f0119b11:	ff 4d f8             	decl   -0x8(%ebp)
f0119b14:	ff 4d fc             	decl   -0x4(%ebp)
f0119b17:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119b1a:	8a 10                	mov    (%eax),%dl
f0119b1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119b1f:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0119b21:	8b 45 10             	mov    0x10(%ebp),%eax
f0119b24:	8d 50 ff             	lea    -0x1(%eax),%edx
f0119b27:	89 55 10             	mov    %edx,0x10(%ebp)
f0119b2a:	85 c0                	test   %eax,%eax
f0119b2c:	75 e3                	jne    f0119b11 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0119b2e:	eb 23                	jmp    f0119b53 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0119b30:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119b33:	8d 50 01             	lea    0x1(%eax),%edx
f0119b36:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0119b39:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0119b3c:	8d 4a 01             	lea    0x1(%edx),%ecx
f0119b3f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0119b42:	8a 12                	mov    (%edx),%dl
f0119b44:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0119b46:	8b 45 10             	mov    0x10(%ebp),%eax
f0119b49:	8d 50 ff             	lea    -0x1(%eax),%edx
f0119b4c:	89 55 10             	mov    %edx,0x10(%ebp)
f0119b4f:	85 c0                	test   %eax,%eax
f0119b51:	75 dd                	jne    f0119b30 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0119b53:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0119b56:	c9                   	leave  
f0119b57:	c3                   	ret    

f0119b58 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0119b58:	55                   	push   %ebp
f0119b59:	89 e5                	mov    %esp,%ebp
f0119b5b:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0119b5e:	8b 45 08             	mov    0x8(%ebp),%eax
f0119b61:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0119b64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119b67:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0119b6a:	eb 2a                	jmp    f0119b96 <memcmp+0x3e>
		if (*s1 != *s2)
f0119b6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119b6f:	8a 10                	mov    (%eax),%dl
f0119b71:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119b74:	8a 00                	mov    (%eax),%al
f0119b76:	38 c2                	cmp    %al,%dl
f0119b78:	74 16                	je     f0119b90 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0119b7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119b7d:	8a 00                	mov    (%eax),%al
f0119b7f:	0f b6 d0             	movzbl %al,%edx
f0119b82:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119b85:	8a 00                	mov    (%eax),%al
f0119b87:	0f b6 c0             	movzbl %al,%eax
f0119b8a:	29 c2                	sub    %eax,%edx
f0119b8c:	89 d0                	mov    %edx,%eax
f0119b8e:	eb 18                	jmp    f0119ba8 <memcmp+0x50>
		s1++, s2++;
f0119b90:	ff 45 fc             	incl   -0x4(%ebp)
f0119b93:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0119b96:	8b 45 10             	mov    0x10(%ebp),%eax
f0119b99:	8d 50 ff             	lea    -0x1(%eax),%edx
f0119b9c:	89 55 10             	mov    %edx,0x10(%ebp)
f0119b9f:	85 c0                	test   %eax,%eax
f0119ba1:	75 c9                	jne    f0119b6c <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0119ba3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0119ba8:	c9                   	leave  
f0119ba9:	c3                   	ret    

f0119baa <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0119baa:	55                   	push   %ebp
f0119bab:	89 e5                	mov    %esp,%ebp
f0119bad:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0119bb0:	8b 55 08             	mov    0x8(%ebp),%edx
f0119bb3:	8b 45 10             	mov    0x10(%ebp),%eax
f0119bb6:	01 d0                	add    %edx,%eax
f0119bb8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0119bbb:	eb 15                	jmp    f0119bd2 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0119bbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0119bc0:	8a 00                	mov    (%eax),%al
f0119bc2:	0f b6 d0             	movzbl %al,%edx
f0119bc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119bc8:	0f b6 c0             	movzbl %al,%eax
f0119bcb:	39 c2                	cmp    %eax,%edx
f0119bcd:	74 0d                	je     f0119bdc <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0119bcf:	ff 45 08             	incl   0x8(%ebp)
f0119bd2:	8b 45 08             	mov    0x8(%ebp),%eax
f0119bd5:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0119bd8:	72 e3                	jb     f0119bbd <memfind+0x13>
f0119bda:	eb 01                	jmp    f0119bdd <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0119bdc:	90                   	nop
	return (void *) s;
f0119bdd:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0119be0:	c9                   	leave  
f0119be1:	c3                   	ret    

f0119be2 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0119be2:	55                   	push   %ebp
f0119be3:	89 e5                	mov    %esp,%ebp
f0119be5:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0119be8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0119bef:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0119bf6:	eb 03                	jmp    f0119bfb <strtol+0x19>
		s++;
f0119bf8:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0119bfb:	8b 45 08             	mov    0x8(%ebp),%eax
f0119bfe:	8a 00                	mov    (%eax),%al
f0119c00:	3c 20                	cmp    $0x20,%al
f0119c02:	74 f4                	je     f0119bf8 <strtol+0x16>
f0119c04:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c07:	8a 00                	mov    (%eax),%al
f0119c09:	3c 09                	cmp    $0x9,%al
f0119c0b:	74 eb                	je     f0119bf8 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0119c0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c10:	8a 00                	mov    (%eax),%al
f0119c12:	3c 2b                	cmp    $0x2b,%al
f0119c14:	75 05                	jne    f0119c1b <strtol+0x39>
		s++;
f0119c16:	ff 45 08             	incl   0x8(%ebp)
f0119c19:	eb 13                	jmp    f0119c2e <strtol+0x4c>
	else if (*s == '-')
f0119c1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c1e:	8a 00                	mov    (%eax),%al
f0119c20:	3c 2d                	cmp    $0x2d,%al
f0119c22:	75 0a                	jne    f0119c2e <strtol+0x4c>
		s++, neg = 1;
f0119c24:	ff 45 08             	incl   0x8(%ebp)
f0119c27:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0119c2e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0119c32:	74 06                	je     f0119c3a <strtol+0x58>
f0119c34:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0119c38:	75 20                	jne    f0119c5a <strtol+0x78>
f0119c3a:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c3d:	8a 00                	mov    (%eax),%al
f0119c3f:	3c 30                	cmp    $0x30,%al
f0119c41:	75 17                	jne    f0119c5a <strtol+0x78>
f0119c43:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c46:	40                   	inc    %eax
f0119c47:	8a 00                	mov    (%eax),%al
f0119c49:	3c 78                	cmp    $0x78,%al
f0119c4b:	75 0d                	jne    f0119c5a <strtol+0x78>
		s += 2, base = 16;
f0119c4d:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0119c51:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0119c58:	eb 28                	jmp    f0119c82 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0119c5a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0119c5e:	75 15                	jne    f0119c75 <strtol+0x93>
f0119c60:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c63:	8a 00                	mov    (%eax),%al
f0119c65:	3c 30                	cmp    $0x30,%al
f0119c67:	75 0c                	jne    f0119c75 <strtol+0x93>
		s++, base = 8;
f0119c69:	ff 45 08             	incl   0x8(%ebp)
f0119c6c:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0119c73:	eb 0d                	jmp    f0119c82 <strtol+0xa0>
	else if (base == 0)
f0119c75:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0119c79:	75 07                	jne    f0119c82 <strtol+0xa0>
		base = 10;
f0119c7b:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0119c82:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c85:	8a 00                	mov    (%eax),%al
f0119c87:	3c 2f                	cmp    $0x2f,%al
f0119c89:	7e 19                	jle    f0119ca4 <strtol+0xc2>
f0119c8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c8e:	8a 00                	mov    (%eax),%al
f0119c90:	3c 39                	cmp    $0x39,%al
f0119c92:	7f 10                	jg     f0119ca4 <strtol+0xc2>
			dig = *s - '0';
f0119c94:	8b 45 08             	mov    0x8(%ebp),%eax
f0119c97:	8a 00                	mov    (%eax),%al
f0119c99:	0f be c0             	movsbl %al,%eax
f0119c9c:	83 e8 30             	sub    $0x30,%eax
f0119c9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119ca2:	eb 42                	jmp    f0119ce6 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0119ca4:	8b 45 08             	mov    0x8(%ebp),%eax
f0119ca7:	8a 00                	mov    (%eax),%al
f0119ca9:	3c 60                	cmp    $0x60,%al
f0119cab:	7e 19                	jle    f0119cc6 <strtol+0xe4>
f0119cad:	8b 45 08             	mov    0x8(%ebp),%eax
f0119cb0:	8a 00                	mov    (%eax),%al
f0119cb2:	3c 7a                	cmp    $0x7a,%al
f0119cb4:	7f 10                	jg     f0119cc6 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0119cb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0119cb9:	8a 00                	mov    (%eax),%al
f0119cbb:	0f be c0             	movsbl %al,%eax
f0119cbe:	83 e8 57             	sub    $0x57,%eax
f0119cc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0119cc4:	eb 20                	jmp    f0119ce6 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0119cc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0119cc9:	8a 00                	mov    (%eax),%al
f0119ccb:	3c 40                	cmp    $0x40,%al
f0119ccd:	7e 39                	jle    f0119d08 <strtol+0x126>
f0119ccf:	8b 45 08             	mov    0x8(%ebp),%eax
f0119cd2:	8a 00                	mov    (%eax),%al
f0119cd4:	3c 5a                	cmp    $0x5a,%al
f0119cd6:	7f 30                	jg     f0119d08 <strtol+0x126>
			dig = *s - 'A' + 10;
f0119cd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0119cdb:	8a 00                	mov    (%eax),%al
f0119cdd:	0f be c0             	movsbl %al,%eax
f0119ce0:	83 e8 37             	sub    $0x37,%eax
f0119ce3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0119ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119ce9:	3b 45 10             	cmp    0x10(%ebp),%eax
f0119cec:	7d 19                	jge    f0119d07 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0119cee:	ff 45 08             	incl   0x8(%ebp)
f0119cf1:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119cf4:	0f af 45 10          	imul   0x10(%ebp),%eax
f0119cf8:	89 c2                	mov    %eax,%edx
f0119cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119cfd:	01 d0                	add    %edx,%eax
f0119cff:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0119d02:	e9 7b ff ff ff       	jmp    f0119c82 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0119d07:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0119d08:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0119d0c:	74 08                	je     f0119d16 <strtol+0x134>
		*endptr = (char *) s;
f0119d0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119d11:	8b 55 08             	mov    0x8(%ebp),%edx
f0119d14:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0119d16:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0119d1a:	74 07                	je     f0119d23 <strtol+0x141>
f0119d1c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119d1f:	f7 d8                	neg    %eax
f0119d21:	eb 03                	jmp    f0119d26 <strtol+0x144>
f0119d23:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0119d26:	c9                   	leave  
f0119d27:	c3                   	ret    

f0119d28 <ltostr>:

void
ltostr(long value, char *str)
{
f0119d28:	55                   	push   %ebp
f0119d29:	89 e5                	mov    %esp,%ebp
f0119d2b:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0119d2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0119d35:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0119d3c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0119d40:	79 13                	jns    f0119d55 <ltostr+0x2d>
	{
		neg = 1;
f0119d42:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0119d49:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119d4c:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0119d4f:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0119d52:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0119d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0119d58:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0119d5d:	99                   	cltd   
f0119d5e:	f7 f9                	idiv   %ecx
f0119d60:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0119d63:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119d66:	8d 50 01             	lea    0x1(%eax),%edx
f0119d69:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0119d6c:	89 c2                	mov    %eax,%edx
f0119d6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119d71:	01 d0                	add    %edx,%eax
f0119d73:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119d76:	83 c2 30             	add    $0x30,%edx
f0119d79:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0119d7b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0119d7e:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0119d83:	f7 e9                	imul   %ecx
f0119d85:	c1 fa 02             	sar    $0x2,%edx
f0119d88:	89 c8                	mov    %ecx,%eax
f0119d8a:	c1 f8 1f             	sar    $0x1f,%eax
f0119d8d:	29 c2                	sub    %eax,%edx
f0119d8f:	89 d0                	mov    %edx,%eax
f0119d91:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0119d94:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0119d97:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0119d9c:	f7 e9                	imul   %ecx
f0119d9e:	c1 fa 02             	sar    $0x2,%edx
f0119da1:	89 c8                	mov    %ecx,%eax
f0119da3:	c1 f8 1f             	sar    $0x1f,%eax
f0119da6:	29 c2                	sub    %eax,%edx
f0119da8:	89 d0                	mov    %edx,%eax
f0119daa:	c1 e0 02             	shl    $0x2,%eax
f0119dad:	01 d0                	add    %edx,%eax
f0119daf:	01 c0                	add    %eax,%eax
f0119db1:	29 c1                	sub    %eax,%ecx
f0119db3:	89 ca                	mov    %ecx,%edx
f0119db5:	85 d2                	test   %edx,%edx
f0119db7:	75 9c                	jne    f0119d55 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0119db9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0119dc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119dc3:	48                   	dec    %eax
f0119dc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0119dc7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0119dcb:	74 3d                	je     f0119e0a <ltostr+0xe2>
		start = 1 ;
f0119dcd:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0119dd4:	eb 34                	jmp    f0119e0a <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0119dd6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119dd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119ddc:	01 d0                	add    %edx,%eax
f0119dde:	8a 00                	mov    (%eax),%al
f0119de0:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0119de3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119de6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119de9:	01 c2                	add    %eax,%edx
f0119deb:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0119dee:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119df1:	01 c8                	add    %ecx,%eax
f0119df3:	8a 00                	mov    (%eax),%al
f0119df5:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0119df7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0119dfa:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119dfd:	01 c2                	add    %eax,%edx
f0119dff:	8a 45 eb             	mov    -0x15(%ebp),%al
f0119e02:	88 02                	mov    %al,(%edx)
		start++ ;
f0119e04:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0119e07:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0119e0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0119e0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e10:	7c c4                	jl     f0119dd6 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0119e12:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0119e15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119e18:	01 d0                	add    %edx,%eax
f0119e1a:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0119e1d:	90                   	nop
f0119e1e:	c9                   	leave  
f0119e1f:	c3                   	ret    

f0119e20 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0119e20:	55                   	push   %ebp
f0119e21:	89 e5                	mov    %esp,%ebp
f0119e23:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0119e26:	ff 75 08             	pushl  0x8(%ebp)
f0119e29:	e8 54 fa ff ff       	call   f0119882 <strlen>
f0119e2e:	83 c4 04             	add    $0x4,%esp
f0119e31:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0119e34:	ff 75 0c             	pushl  0xc(%ebp)
f0119e37:	e8 46 fa ff ff       	call   f0119882 <strlen>
f0119e3c:	83 c4 04             	add    $0x4,%esp
f0119e3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0119e42:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0119e49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0119e50:	eb 17                	jmp    f0119e69 <strcconcat+0x49>
		final[s] = str1[s] ;
f0119e52:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0119e55:	8b 45 10             	mov    0x10(%ebp),%eax
f0119e58:	01 c2                	add    %eax,%edx
f0119e5a:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0119e5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0119e60:	01 c8                	add    %ecx,%eax
f0119e62:	8a 00                	mov    (%eax),%al
f0119e64:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0119e66:	ff 45 fc             	incl   -0x4(%ebp)
f0119e69:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119e6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0119e6f:	7c e1                	jl     f0119e52 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0119e71:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0119e78:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0119e7f:	eb 1f                	jmp    f0119ea0 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0119e81:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119e84:	8d 50 01             	lea    0x1(%eax),%edx
f0119e87:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0119e8a:	89 c2                	mov    %eax,%edx
f0119e8c:	8b 45 10             	mov    0x10(%ebp),%eax
f0119e8f:	01 c2                	add    %eax,%edx
f0119e91:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0119e94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0119e97:	01 c8                	add    %ecx,%eax
f0119e99:	8a 00                	mov    (%eax),%al
f0119e9b:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0119e9d:	ff 45 f8             	incl   -0x8(%ebp)
f0119ea0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119ea3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ea6:	7c d9                	jl     f0119e81 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0119ea8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0119eab:	8b 45 10             	mov    0x10(%ebp),%eax
f0119eae:	01 d0                	add    %edx,%eax
f0119eb0:	c6 00 00             	movb   $0x0,(%eax)
}
f0119eb3:	90                   	nop
f0119eb4:	c9                   	leave  
f0119eb5:	c3                   	ret    

f0119eb6 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0119eb6:	55                   	push   %ebp
f0119eb7:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0119eb9:	8b 45 14             	mov    0x14(%ebp),%eax
f0119ebc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0119ec2:	8b 45 14             	mov    0x14(%ebp),%eax
f0119ec5:	8b 00                	mov    (%eax),%eax
f0119ec7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0119ece:	8b 45 10             	mov    0x10(%ebp),%eax
f0119ed1:	01 d0                	add    %edx,%eax
f0119ed3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0119ed9:	eb 0c                	jmp    f0119ee7 <strsplit+0x31>
			*string++ = 0;
f0119edb:	8b 45 08             	mov    0x8(%ebp),%eax
f0119ede:	8d 50 01             	lea    0x1(%eax),%edx
f0119ee1:	89 55 08             	mov    %edx,0x8(%ebp)
f0119ee4:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0119ee7:	8b 45 08             	mov    0x8(%ebp),%eax
f0119eea:	8a 00                	mov    (%eax),%al
f0119eec:	84 c0                	test   %al,%al
f0119eee:	74 18                	je     f0119f08 <strsplit+0x52>
f0119ef0:	8b 45 08             	mov    0x8(%ebp),%eax
f0119ef3:	8a 00                	mov    (%eax),%al
f0119ef5:	0f be c0             	movsbl %al,%eax
f0119ef8:	50                   	push   %eax
f0119ef9:	ff 75 0c             	pushl  0xc(%ebp)
f0119efc:	e8 13 fb ff ff       	call   f0119a14 <strchr>
f0119f01:	83 c4 08             	add    $0x8,%esp
f0119f04:	85 c0                	test   %eax,%eax
f0119f06:	75 d3                	jne    f0119edb <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0119f08:	8b 45 08             	mov    0x8(%ebp),%eax
f0119f0b:	8a 00                	mov    (%eax),%al
f0119f0d:	84 c0                	test   %al,%al
f0119f0f:	74 5a                	je     f0119f6b <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0119f11:	8b 45 14             	mov    0x14(%ebp),%eax
f0119f14:	8b 00                	mov    (%eax),%eax
f0119f16:	83 f8 0f             	cmp    $0xf,%eax
f0119f19:	75 07                	jne    f0119f22 <strsplit+0x6c>
		{
			return 0;
f0119f1b:	b8 00 00 00 00       	mov    $0x0,%eax
f0119f20:	eb 66                	jmp    f0119f88 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0119f22:	8b 45 14             	mov    0x14(%ebp),%eax
f0119f25:	8b 00                	mov    (%eax),%eax
f0119f27:	8d 48 01             	lea    0x1(%eax),%ecx
f0119f2a:	8b 55 14             	mov    0x14(%ebp),%edx
f0119f2d:	89 0a                	mov    %ecx,(%edx)
f0119f2f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0119f36:	8b 45 10             	mov    0x10(%ebp),%eax
f0119f39:	01 c2                	add    %eax,%edx
f0119f3b:	8b 45 08             	mov    0x8(%ebp),%eax
f0119f3e:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0119f40:	eb 03                	jmp    f0119f45 <strsplit+0x8f>
			string++;
f0119f42:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0119f45:	8b 45 08             	mov    0x8(%ebp),%eax
f0119f48:	8a 00                	mov    (%eax),%al
f0119f4a:	84 c0                	test   %al,%al
f0119f4c:	74 8b                	je     f0119ed9 <strsplit+0x23>
f0119f4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0119f51:	8a 00                	mov    (%eax),%al
f0119f53:	0f be c0             	movsbl %al,%eax
f0119f56:	50                   	push   %eax
f0119f57:	ff 75 0c             	pushl  0xc(%ebp)
f0119f5a:	e8 b5 fa ff ff       	call   f0119a14 <strchr>
f0119f5f:	83 c4 08             	add    $0x8,%esp
f0119f62:	85 c0                	test   %eax,%eax
f0119f64:	74 dc                	je     f0119f42 <strsplit+0x8c>
			string++;
	}
f0119f66:	e9 6e ff ff ff       	jmp    f0119ed9 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0119f6b:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0119f6c:	8b 45 14             	mov    0x14(%ebp),%eax
f0119f6f:	8b 00                	mov    (%eax),%eax
f0119f71:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0119f78:	8b 45 10             	mov    0x10(%ebp),%eax
f0119f7b:	01 d0                	add    %edx,%eax
f0119f7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0119f83:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0119f88:	c9                   	leave  
f0119f89:	c3                   	ret    

f0119f8a <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0119f8a:	55                   	push   %ebp
f0119f8b:	89 e5                	mov    %esp,%ebp
f0119f8d:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0119f90:	90                   	nop
f0119f91:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0119f98:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0119f9b:	89 c2                	mov    %eax,%edx
f0119f9d:	ec                   	in     (%dx),%al
f0119f9e:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0119fa1:	8a 45 f7             	mov    -0x9(%ebp),%al
f0119fa4:	0f b6 c0             	movzbl %al,%eax
f0119fa7:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0119faa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119fad:	25 c0 00 00 00       	and    $0xc0,%eax
f0119fb2:	83 f8 40             	cmp    $0x40,%eax
f0119fb5:	75 da                	jne    f0119f91 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0119fb7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0119fbb:	74 11                	je     f0119fce <ide_wait_ready+0x44>
f0119fbd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0119fc0:	83 e0 21             	and    $0x21,%eax
f0119fc3:	85 c0                	test   %eax,%eax
f0119fc5:	74 07                	je     f0119fce <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0119fc7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0119fcc:	eb 05                	jmp    f0119fd3 <ide_wait_ready+0x49>
	}
	return 0;
f0119fce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0119fd3:	c9                   	leave  
f0119fd4:	c3                   	ret    

f0119fd5 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0119fd5:	55                   	push   %ebp
f0119fd6:	89 e5                	mov    %esp,%ebp
f0119fd8:	57                   	push   %edi
f0119fd9:	53                   	push   %ebx
f0119fda:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0119fdd:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0119fe4:	76 16                	jbe    f0119ffc <ide_read+0x27>
f0119fe6:	68 a3 f1 11 f0       	push   $0xf011f1a3
f0119feb:	68 b0 f1 11 f0       	push   $0xf011f1b0
f0119ff0:	6a 25                	push   $0x25
f0119ff2:	68 c5 f1 11 f0       	push   $0xf011f1c5
f0119ff7:	e8 97 61 fe ff       	call   f0100193 <_panic>

	ide_wait_ready(0);
f0119ffc:	83 ec 0c             	sub    $0xc,%esp
f0119fff:	6a 00                	push   $0x0
f011a001:	e8 84 ff ff ff       	call   f0119f8a <ide_wait_ready>
f011a006:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f011a009:	8b 45 10             	mov    0x10(%ebp),%eax
f011a00c:	0f b6 c0             	movzbl %al,%eax
f011a00f:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f011a016:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f011a019:	8a 45 d2             	mov    -0x2e(%ebp),%al
f011a01c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011a01f:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f011a020:	8b 45 08             	mov    0x8(%ebp),%eax
f011a023:	0f b6 c0             	movzbl %al,%eax
f011a026:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f011a02d:	88 45 d3             	mov    %al,-0x2d(%ebp)
f011a030:	8a 45 d3             	mov    -0x2d(%ebp),%al
f011a033:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011a036:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f011a037:	8b 45 08             	mov    0x8(%ebp),%eax
f011a03a:	c1 e8 08             	shr    $0x8,%eax
f011a03d:	0f b6 c0             	movzbl %al,%eax
f011a040:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f011a047:	88 45 d4             	mov    %al,-0x2c(%ebp)
f011a04a:	8a 45 d4             	mov    -0x2c(%ebp),%al
f011a04d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011a050:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f011a051:	8b 45 08             	mov    0x8(%ebp),%eax
f011a054:	c1 e8 10             	shr    $0x10,%eax
f011a057:	0f b6 c0             	movzbl %al,%eax
f011a05a:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f011a061:	88 45 d5             	mov    %al,-0x2b(%ebp)
f011a064:	8a 45 d5             	mov    -0x2b(%ebp),%al
f011a067:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011a06a:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f011a06b:	a1 e8 60 32 f0       	mov    0xf03260e8,%eax
f011a070:	83 e0 01             	and    $0x1,%eax
f011a073:	c1 e0 04             	shl    $0x4,%eax
f011a076:	88 c2                	mov    %al,%dl
f011a078:	8b 45 08             	mov    0x8(%ebp),%eax
f011a07b:	c1 e8 18             	shr    $0x18,%eax
f011a07e:	83 e0 0f             	and    $0xf,%eax
f011a081:	09 d0                	or     %edx,%eax
f011a083:	83 c8 e0             	or     $0xffffffe0,%eax
f011a086:	0f b6 c0             	movzbl %al,%eax
f011a089:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f011a090:	88 45 d6             	mov    %al,-0x2a(%ebp)
f011a093:	8a 45 d6             	mov    -0x2a(%ebp),%al
f011a096:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a099:	ee                   	out    %al,(%dx)
f011a09a:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f011a0a1:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f011a0a5:	8a 45 d7             	mov    -0x29(%ebp),%al
f011a0a8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a0ab:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f011a0ac:	eb 55                	jmp    f011a103 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f011a0ae:	83 ec 0c             	sub    $0xc,%esp
f011a0b1:	6a 01                	push   $0x1
f011a0b3:	e8 d2 fe ff ff       	call   f0119f8a <ide_wait_ready>
f011a0b8:	83 c4 10             	add    $0x10,%esp
f011a0bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011a0be:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011a0c2:	79 05                	jns    f011a0c9 <ide_read+0xf4>
			return r;
f011a0c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a0c7:	eb 45                	jmp    f011a10e <ide_read+0x139>
f011a0c9:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f011a0d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f011a0d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011a0d6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f011a0dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a0e0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011a0e3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a0e6:	89 cb                	mov    %ecx,%ebx
f011a0e8:	89 df                	mov    %ebx,%edi
f011a0ea:	89 c1                	mov    %eax,%ecx
f011a0ec:	fc                   	cld    
f011a0ed:	f2 6d                	repnz insl (%dx),%es:(%edi)
f011a0ef:	89 c8                	mov    %ecx,%eax
f011a0f1:	89 fb                	mov    %edi,%ebx
f011a0f3:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011a0f6:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f011a0f9:	ff 4d 10             	decl   0x10(%ebp)
f011a0fc:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011a103:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011a107:	75 a5                	jne    f011a0ae <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f011a109:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011a10e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a111:	5b                   	pop    %ebx
f011a112:	5f                   	pop    %edi
f011a113:	5d                   	pop    %ebp
f011a114:	c3                   	ret    

f011a115 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f011a115:	55                   	push   %ebp
f011a116:	89 e5                	mov    %esp,%ebp
f011a118:	56                   	push   %esi
f011a119:	53                   	push   %ebx
f011a11a:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f011a11d:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f011a124:	76 16                	jbe    f011a13c <ide_write+0x27>
f011a126:	68 a3 f1 11 f0       	push   $0xf011f1a3
f011a12b:	68 b0 f1 11 f0       	push   $0xf011f1b0
f011a130:	6a 3e                	push   $0x3e
f011a132:	68 c5 f1 11 f0       	push   $0xf011f1c5
f011a137:	e8 57 60 fe ff       	call   f0100193 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f011a13c:	83 ec 0c             	sub    $0xc,%esp
f011a13f:	6a 00                	push   $0x0
f011a141:	e8 44 fe ff ff       	call   f0119f8a <ide_wait_ready>
f011a146:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f011a149:	8b 45 10             	mov    0x10(%ebp),%eax
f011a14c:	0f b6 c0             	movzbl %al,%eax
f011a14f:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f011a156:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f011a159:	8a 45 d2             	mov    -0x2e(%ebp),%al
f011a15c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011a15f:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f011a160:	8b 45 08             	mov    0x8(%ebp),%eax
f011a163:	0f b6 c0             	movzbl %al,%eax
f011a166:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f011a16d:	88 45 d3             	mov    %al,-0x2d(%ebp)
f011a170:	8a 45 d3             	mov    -0x2d(%ebp),%al
f011a173:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011a176:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f011a177:	8b 45 08             	mov    0x8(%ebp),%eax
f011a17a:	c1 e8 08             	shr    $0x8,%eax
f011a17d:	0f b6 c0             	movzbl %al,%eax
f011a180:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f011a187:	88 45 d4             	mov    %al,-0x2c(%ebp)
f011a18a:	8a 45 d4             	mov    -0x2c(%ebp),%al
f011a18d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011a190:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f011a191:	8b 45 08             	mov    0x8(%ebp),%eax
f011a194:	c1 e8 10             	shr    $0x10,%eax
f011a197:	0f b6 c0             	movzbl %al,%eax
f011a19a:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f011a1a1:	88 45 d5             	mov    %al,-0x2b(%ebp)
f011a1a4:	8a 45 d5             	mov    -0x2b(%ebp),%al
f011a1a7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011a1aa:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f011a1ab:	a1 e8 60 32 f0       	mov    0xf03260e8,%eax
f011a1b0:	83 e0 01             	and    $0x1,%eax
f011a1b3:	c1 e0 04             	shl    $0x4,%eax
f011a1b6:	88 c2                	mov    %al,%dl
f011a1b8:	8b 45 08             	mov    0x8(%ebp),%eax
f011a1bb:	c1 e8 18             	shr    $0x18,%eax
f011a1be:	83 e0 0f             	and    $0xf,%eax
f011a1c1:	09 d0                	or     %edx,%eax
f011a1c3:	83 c8 e0             	or     $0xffffffe0,%eax
f011a1c6:	0f b6 c0             	movzbl %al,%eax
f011a1c9:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f011a1d0:	88 45 d6             	mov    %al,-0x2a(%ebp)
f011a1d3:	8a 45 d6             	mov    -0x2a(%ebp),%al
f011a1d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a1d9:	ee                   	out    %al,(%dx)
f011a1da:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f011a1e1:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f011a1e5:	8a 45 d7             	mov    -0x29(%ebp),%al
f011a1e8:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a1eb:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011a1ec:	eb 55                	jmp    f011a243 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f011a1ee:	83 ec 0c             	sub    $0xc,%esp
f011a1f1:	6a 01                	push   $0x1
f011a1f3:	e8 92 fd ff ff       	call   f0119f8a <ide_wait_ready>
f011a1f8:	83 c4 10             	add    $0x10,%esp
f011a1fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011a1fe:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011a202:	79 05                	jns    f011a209 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f011a204:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a207:	eb 45                	jmp    f011a24e <ide_write+0x139>
f011a209:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f011a210:	8b 45 0c             	mov    0xc(%ebp),%eax
f011a213:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011a216:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f011a21d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a220:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011a223:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a226:	89 cb                	mov    %ecx,%ebx
f011a228:	89 de                	mov    %ebx,%esi
f011a22a:	89 c1                	mov    %eax,%ecx
f011a22c:	fc                   	cld    
f011a22d:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f011a22f:	89 c8                	mov    %ecx,%eax
f011a231:	89 f3                	mov    %esi,%ebx
f011a233:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011a236:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011a239:	ff 4d 10             	decl   0x10(%ebp)
f011a23c:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011a243:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011a247:	75 a5                	jne    f011a1ee <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f011a249:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011a24e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a251:	5b                   	pop    %ebx
f011a252:	5e                   	pop    %esi
f011a253:	5d                   	pop    %ebp
f011a254:	c3                   	ret    

f011a255 <scarce_memory>:
#include <kern/sched.h>
#include <kern/kclock.h>
#include <kern/utilities.h>

void scarce_memory()
{
f011a255:	55                   	push   %ebp
f011a256:	89 e5                	mov    %esp,%ebp
f011a258:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f011a25b:	a1 c0 c0 38 f0       	mov    0xf038c0c0,%eax
f011a260:	ba 64 00 00 00       	mov    $0x64,%edx
f011a265:	29 c2                	sub    %eax,%edx
f011a267:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f011a26c:	0f af c2             	imul   %edx,%eax
f011a26f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011a274:	f7 e2                	mul    %edx
f011a276:	89 d0                	mov    %edx,%eax
f011a278:	c1 e8 05             	shr    $0x5,%eax
f011a27b:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f011a27e:	a1 c0 c0 38 f0       	mov    0xf038c0c0,%eax
f011a283:	ba 64 00 00 00       	mov    $0x64,%edx
f011a288:	29 c2                	sub    %eax,%edx
f011a28a:	a1 b0 2c 39 f0       	mov    0xf0392cb0,%eax
f011a28f:	89 d1                	mov    %edx,%ecx
f011a291:	0f af c8             	imul   %eax,%ecx
f011a294:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011a299:	f7 e1                	mul    %ecx
f011a29b:	c1 ea 05             	shr    $0x5,%edx
f011a29e:	89 d0                	mov    %edx,%eax
f011a2a0:	c1 e0 02             	shl    $0x2,%eax
f011a2a3:	01 d0                	add    %edx,%eax
f011a2a5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a2ac:	01 d0                	add    %edx,%eax
f011a2ae:	c1 e0 02             	shl    $0x2,%eax
f011a2b1:	29 c1                	sub    %eax,%ecx
f011a2b3:	89 ca                	mov    %ecx,%edx
f011a2b5:	85 d2                	test   %edx,%edx
f011a2b7:	74 03                	je     f011a2bc <scarce_memory+0x67>
		total_size_tobe_allocated++;
f011a2b9:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f011a2bc:	8b 15 b0 2c 39 f0    	mov    0xf0392cb0,%edx
f011a2c2:	a1 40 11 3b f0       	mov    0xf03b1140,%eax
f011a2c7:	29 c2                	sub    %eax,%edx
f011a2c9:	89 d0                	mov    %edx,%eax
f011a2cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f011a2ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a2d1:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011a2d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f011a2d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f011a2de:	eb 12                	jmp    f011a2f2 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f011a2e0:	83 ec 0c             	sub    $0xc,%esp
f011a2e3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f011a2e6:	50                   	push   %eax
f011a2e7:	e8 03 9a fe ff       	call   f0103cef <allocate_frame>
f011a2ec:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f011a2ef:	ff 45 f0             	incl   -0x10(%ebp)
f011a2f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a2f5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a2f8:	76 e6                	jbe    f011a2e0 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f011a2fa:	90                   	nop
f011a2fb:	c9                   	leave  
f011a2fc:	c3                   	ret    

f011a2fd <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f011a2fd:	55                   	push   %ebp
f011a2fe:	89 e5                	mov    %esp,%ebp
f011a300:	83 ec 60             	sub    $0x60,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f011a303:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f011a30a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f011a311:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f011a318:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f011a31c:	0f 85 77 02 00 00    	jne    f011a599 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x29c>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f011a322:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a329:	e9 14 01 00 00       	jmp    f011a442 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x145>
		{
			struct Env * ptr_ready_env = NULL;
f011a32e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f011a335:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a338:	c1 e0 04             	shl    $0x4,%eax
f011a33b:	05 20 61 32 f0       	add    $0xf0326120,%eax
f011a340:	8b 00                	mov    (%eax),%eax
f011a342:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011a345:	e9 b5 00 00 00       	jmp    f011a3ff <calc_no_pages_tobe_removed_from_ready_exit_queues+0x102>
			{
				int j=0, counter=0;
f011a34a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011a351:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				for(;j<ptr_ready_env->page_WS_max_size; j++) if(ptr_ready_env->ptr_pageWorkingSet[j].empty == 0) counter++;
f011a358:	eb 21                	jmp    f011a37b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x7e>
f011a35a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f011a35d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011a360:	89 d0                	mov    %edx,%eax
f011a362:	c1 e0 02             	shl    $0x2,%eax
f011a365:	01 d0                	add    %edx,%eax
f011a367:	c1 e0 02             	shl    $0x2,%eax
f011a36a:	01 c8                	add    %ecx,%eax
f011a36c:	83 c0 7c             	add    $0x7c,%eax
f011a36f:	8a 00                	mov    (%eax),%al
f011a371:	84 c0                	test   %al,%al
f011a373:	75 03                	jne    f011a378 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x7b>
f011a375:	ff 45 e4             	incl   -0x1c(%ebp)
f011a378:	ff 45 e8             	incl   -0x18(%ebp)
f011a37b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a37e:	8b 50 74             	mov    0x74(%eax),%edx
f011a381:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a384:	39 c2                	cmp    %eax,%edx
f011a386:	77 d2                	ja     f011a35a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x5d>
				int num_of_pages_in_WS = counter;
f011a388:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a38b:	89 45 b8             	mov    %eax,-0x48(%ebp)

				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011a38e:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a393:	8b 90 34 ef 00 00    	mov    0xef34(%eax),%edx
f011a399:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a39c:	0f af c2             	imul   %edx,%eax
f011a39f:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011a3a4:	f7 e2                	mul    %edx
f011a3a6:	89 d0                	mov    %edx,%eax
f011a3a8:	c1 e8 05             	shr    $0x5,%eax
f011a3ab:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011a3ae:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a3b3:	8b 90 34 ef 00 00    	mov    0xef34(%eax),%edx
f011a3b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a3bc:	89 d1                	mov    %edx,%ecx
f011a3be:	0f af c8             	imul   %eax,%ecx
f011a3c1:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011a3c6:	f7 e1                	mul    %ecx
f011a3c8:	c1 ea 05             	shr    $0x5,%edx
f011a3cb:	89 d0                	mov    %edx,%eax
f011a3cd:	c1 e0 02             	shl    $0x2,%eax
f011a3d0:	01 d0                	add    %edx,%eax
f011a3d2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a3d9:	01 d0                	add    %edx,%eax
f011a3db:	c1 e0 02             	shl    $0x2,%eax
f011a3de:	29 c1                	sub    %eax,%ecx
f011a3e0:	89 ca                	mov    %ecx,%edx
f011a3e2:	85 d2                	test   %edx,%edx
f011a3e4:	74 03                	je     f011a3e9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xec>
					num_of_pages_to_be_removed++;
f011a3e6:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f011a3e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a3ec:	01 45 fc             	add    %eax,-0x4(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f011a3ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a3f2:	c1 e0 04             	shl    $0x4,%eax
f011a3f5:	05 28 61 32 f0       	add    $0xf0326128,%eax
f011a3fa:	8b 00                	mov    (%eax),%eax
f011a3fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011a3ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011a403:	74 08                	je     f011a40d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x110>
f011a405:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a408:	8b 40 44             	mov    0x44(%eax),%eax
f011a40b:	eb 05                	jmp    f011a412 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x115>
f011a40d:	b8 00 00 00 00       	mov    $0x0,%eax
f011a412:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011a415:	c1 e2 04             	shl    $0x4,%edx
f011a418:	81 c2 28 61 32 f0    	add    $0xf0326128,%edx
f011a41e:	89 02                	mov    %eax,(%edx)
f011a420:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a423:	c1 e0 04             	shl    $0x4,%eax
f011a426:	05 28 61 32 f0       	add    $0xf0326128,%eax
f011a42b:	8b 00                	mov    (%eax),%eax
f011a42d:	85 c0                	test   %eax,%eax
f011a42f:	0f 85 15 ff ff ff    	jne    f011a34a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f011a435:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011a439:	0f 85 0b ff ff ff    	jne    f011a34a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f011a43f:	ff 45 f0             	incl   -0x10(%ebp)
f011a442:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011a447:	0f b6 c0             	movzbl %al,%eax
f011a44a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a44d:	0f 8f db fe ff ff    	jg     f011a32e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f011a453:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f011a45a:	a1 c4 c0 38 f0       	mov    0xf038c0c4,%eax
f011a45f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011a462:	eb 52                	jmp    f011a4b6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1b9>
		{
			int j=0, counter=0;
f011a464:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011a46b:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
			for(;j<ptr_exit_env->page_WS_max_size; j++) if(ptr_exit_env->ptr_pageWorkingSet[j].empty == 0) counter++;
f011a472:	eb 21                	jmp    f011a495 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x198>
f011a474:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f011a477:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a47a:	89 d0                	mov    %edx,%eax
f011a47c:	c1 e0 02             	shl    $0x2,%eax
f011a47f:	01 d0                	add    %edx,%eax
f011a481:	c1 e0 02             	shl    $0x2,%eax
f011a484:	01 c8                	add    %ecx,%eax
f011a486:	83 c0 7c             	add    $0x7c,%eax
f011a489:	8a 00                	mov    (%eax),%al
f011a48b:	84 c0                	test   %al,%al
f011a48d:	75 03                	jne    f011a492 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x195>
f011a48f:	ff 45 d4             	incl   -0x2c(%ebp)
f011a492:	ff 45 d8             	incl   -0x28(%ebp)
f011a495:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a498:	8b 50 74             	mov    0x74(%eax),%edx
f011a49b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a49e:	39 c2                	cmp    %eax,%edx
f011a4a0:	77 d2                	ja     f011a474 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x177>
			int num_of_pages_in_WS = counter;
f011a4a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a4a5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

			no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
f011a4a8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a4ab:	01 45 f8             	add    %eax,-0x8(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f011a4ae:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f011a4b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011a4b6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011a4ba:	74 08                	je     f011a4c4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1c7>
f011a4bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a4bf:	8b 40 44             	mov    0x44(%eax),%eax
f011a4c2:	eb 05                	jmp    f011a4c9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1cc>
f011a4c4:	b8 00 00 00 00       	mov    $0x0,%eax
f011a4c9:	a3 cc c0 38 f0       	mov    %eax,0xf038c0cc
f011a4ce:	a1 cc c0 38 f0       	mov    0xf038c0cc,%eax
f011a4d3:	85 c0                	test   %eax,%eax
f011a4d5:	75 8d                	jne    f011a464 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x167>
f011a4d7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011a4db:	75 87                	jne    f011a464 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x167>
			int num_of_pages_in_WS = counter;

			no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
		}

		if(curenv != NULL)
f011a4dd:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a4e2:	85 c0                	test   %eax,%eax
f011a4e4:	0f 84 59 01 00 00    	je     f011a643 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x346>
		{
			int j=0, counter=0;
f011a4ea:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011a4f1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
			for(;j<curenv->page_WS_max_size; j++) if(curenv->ptr_pageWorkingSet[j].empty == 0) counter++;
f011a4f8:	eb 24                	jmp    f011a51e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x221>
f011a4fa:	8b 0d 30 58 32 f0    	mov    0xf0325830,%ecx
f011a500:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011a503:	89 d0                	mov    %edx,%eax
f011a505:	c1 e0 02             	shl    $0x2,%eax
f011a508:	01 d0                	add    %edx,%eax
f011a50a:	c1 e0 02             	shl    $0x2,%eax
f011a50d:	01 c8                	add    %ecx,%eax
f011a50f:	83 c0 7c             	add    $0x7c,%eax
f011a512:	8a 00                	mov    (%eax),%al
f011a514:	84 c0                	test   %al,%al
f011a516:	75 03                	jne    f011a51b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x21e>
f011a518:	ff 45 cc             	incl   -0x34(%ebp)
f011a51b:	ff 45 d0             	incl   -0x30(%ebp)
f011a51e:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a523:	8b 50 74             	mov    0x74(%eax),%edx
f011a526:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a529:	39 c2                	cmp    %eax,%edx
f011a52b:	77 cd                	ja     f011a4fa <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1fd>
			int num_of_pages_in_WS = counter;
f011a52d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a530:	89 45 b0             	mov    %eax,-0x50(%ebp)

			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011a533:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a538:	8b 90 34 ef 00 00    	mov    0xef34(%eax),%edx
f011a53e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a541:	0f af c2             	imul   %edx,%eax
f011a544:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011a549:	f7 e2                	mul    %edx
f011a54b:	89 d0                	mov    %edx,%eax
f011a54d:	c1 e8 05             	shr    $0x5,%eax
f011a550:	89 45 c8             	mov    %eax,-0x38(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011a553:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a558:	8b 90 34 ef 00 00    	mov    0xef34(%eax),%edx
f011a55e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a561:	89 d1                	mov    %edx,%ecx
f011a563:	0f af c8             	imul   %eax,%ecx
f011a566:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011a56b:	f7 e1                	mul    %ecx
f011a56d:	c1 ea 05             	shr    $0x5,%edx
f011a570:	89 d0                	mov    %edx,%eax
f011a572:	c1 e0 02             	shl    $0x2,%eax
f011a575:	01 d0                	add    %edx,%eax
f011a577:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a57e:	01 d0                	add    %edx,%eax
f011a580:	c1 e0 02             	shl    $0x2,%eax
f011a583:	29 c1                	sub    %eax,%ecx
f011a585:	89 ca                	mov    %ecx,%edx
f011a587:	85 d2                	test   %edx,%edx
f011a589:	74 03                	je     f011a58e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x291>
				num_of_pages_to_be_removed++;
f011a58b:	ff 45 c8             	incl   -0x38(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011a58e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a591:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011a594:	e9 aa 00 00 00       	jmp    f011a643 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x346>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int j=0, counter=0;
f011a599:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011a5a0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
		for(;j<curenv->page_WS_max_size; j++) if(curenv->ptr_pageWorkingSet[j].empty == 0) counter++;
f011a5a7:	eb 24                	jmp    f011a5cd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2d0>
f011a5a9:	8b 0d 30 58 32 f0    	mov    0xf0325830,%ecx
f011a5af:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011a5b2:	89 d0                	mov    %edx,%eax
f011a5b4:	c1 e0 02             	shl    $0x2,%eax
f011a5b7:	01 d0                	add    %edx,%eax
f011a5b9:	c1 e0 02             	shl    $0x2,%eax
f011a5bc:	01 c8                	add    %ecx,%eax
f011a5be:	83 c0 7c             	add    $0x7c,%eax
f011a5c1:	8a 00                	mov    (%eax),%al
f011a5c3:	84 c0                	test   %al,%al
f011a5c5:	75 03                	jne    f011a5ca <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2cd>
f011a5c7:	ff 45 c0             	incl   -0x40(%ebp)
f011a5ca:	ff 45 c4             	incl   -0x3c(%ebp)
f011a5cd:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a5d2:	8b 50 74             	mov    0x74(%eax),%edx
f011a5d5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a5d8:	39 c2                	cmp    %eax,%edx
f011a5da:	77 cd                	ja     f011a5a9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2ac>
		int num_of_pages_in_WS = counter;
f011a5dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a5df:	89 45 ac             	mov    %eax,-0x54(%ebp)

		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011a5e2:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a5e7:	8b 90 34 ef 00 00    	mov    0xef34(%eax),%edx
f011a5ed:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a5f0:	0f af c2             	imul   %edx,%eax
f011a5f3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011a5f8:	f7 e2                	mul    %edx
f011a5fa:	89 d0                	mov    %edx,%eax
f011a5fc:	c1 e8 05             	shr    $0x5,%eax
f011a5ff:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011a602:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a607:	8b 90 34 ef 00 00    	mov    0xef34(%eax),%edx
f011a60d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a610:	89 d1                	mov    %edx,%ecx
f011a612:	0f af c8             	imul   %eax,%ecx
f011a615:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011a61a:	f7 e1                	mul    %ecx
f011a61c:	c1 ea 05             	shr    $0x5,%edx
f011a61f:	89 d0                	mov    %edx,%eax
f011a621:	c1 e0 02             	shl    $0x2,%eax
f011a624:	01 d0                	add    %edx,%eax
f011a626:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a62d:	01 d0                	add    %edx,%eax
f011a62f:	c1 e0 02             	shl    $0x2,%eax
f011a632:	29 c1                	sub    %eax,%ecx
f011a634:	89 ca                	mov    %ecx,%edx
f011a636:	85 d2                	test   %edx,%edx
f011a638:	74 03                	je     f011a63d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x340>
			num_of_pages_to_be_removed++;
f011a63a:	ff 45 bc             	incl   -0x44(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011a63d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a640:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f011a643:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a646:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011a649:	01 c2                	add    %eax,%edx
f011a64b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011a64e:	01 d0                	add    %edx,%eax
}
f011a650:	c9                   	leave  
f011a651:	c3                   	ret    

f011a652 <schenv>:


void schenv()
{
f011a652:	55                   	push   %ebp
f011a653:	89 e5                	mov    %esp,%ebp
f011a655:	83 ec 10             	sub    $0x10,%esp
	__nl = 0;
f011a658:	c6 05 f8 2c 39 f0 00 	movb   $0x0,0xf0392cf8
	__ne = NULL;
f011a65f:	c7 05 c4 2c 39 f0 00 	movl   $0x0,0xf0392cc4
f011a666:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f011a669:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011a670:	eb 30                	jmp    f011a6a2 <schenv+0x50>
	{
		if (LIST_SIZE(&(env_ready_queues[i])))
f011a672:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011a675:	c1 e0 04             	shl    $0x4,%eax
f011a678:	05 2c 61 32 f0       	add    $0xf032612c,%eax
f011a67d:	8b 00                	mov    (%eax),%eax
f011a67f:	85 c0                	test   %eax,%eax
f011a681:	74 1c                	je     f011a69f <schenv+0x4d>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f011a683:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011a686:	c1 e0 04             	shl    $0x4,%eax
f011a689:	05 24 61 32 f0       	add    $0xf0326124,%eax
f011a68e:	8b 00                	mov    (%eax),%eax
f011a690:	a3 c4 2c 39 f0       	mov    %eax,0xf0392cc4
			__nl = i;
f011a695:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011a698:	a2 f8 2c 39 f0       	mov    %al,0xf0392cf8
			break;
f011a69d:	eb 10                	jmp    f011a6af <schenv+0x5d>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f011a69f:	ff 45 fc             	incl   -0x4(%ebp)
f011a6a2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011a6a7:	0f b6 c0             	movzbl %al,%eax
f011a6aa:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f011a6ad:	7f c3                	jg     f011a672 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f011a6af:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a6b4:	85 c0                	test   %eax,%eax
f011a6b6:	0f 84 86 00 00 00    	je     f011a742 <schenv+0xf0>
	{
		if (__ne != NULL)
f011a6bc:	a1 c4 2c 39 f0       	mov    0xf0392cc4,%eax
f011a6c1:	85 c0                	test   %eax,%eax
f011a6c3:	74 4b                	je     f011a710 <schenv+0xbe>
		{
			if ((__pl + 1) < __nl)
f011a6c5:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a6ca:	0f b6 c0             	movzbl %al,%eax
f011a6cd:	8d 50 01             	lea    0x1(%eax),%edx
f011a6d0:	a0 f8 2c 39 f0       	mov    0xf0392cf8,%al
f011a6d5:	0f b6 c0             	movzbl %al,%eax
f011a6d8:	39 c2                	cmp    %eax,%edx
f011a6da:	7d 66                	jge    f011a742 <schenv+0xf0>
			{
				__ne = curenv;
f011a6dc:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a6e1:	a3 c4 2c 39 f0       	mov    %eax,0xf0392cc4
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011a6e6:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a6eb:	0f b6 c0             	movzbl %al,%eax
f011a6ee:	8a 15 e8 2c 39 f0    	mov    0xf0392ce8,%dl
f011a6f4:	0f b6 d2             	movzbl %dl,%edx
f011a6f7:	4a                   	dec    %edx
f011a6f8:	39 d0                	cmp    %edx,%eax
f011a6fa:	7d 08                	jge    f011a704 <schenv+0xb2>
f011a6fc:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a701:	40                   	inc    %eax
f011a702:	eb 05                	jmp    f011a709 <schenv+0xb7>
f011a704:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a709:	a2 f8 2c 39 f0       	mov    %al,0xf0392cf8
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f011a70e:	eb 32                	jmp    f011a742 <schenv+0xf0>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f011a710:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a715:	a3 c4 2c 39 f0       	mov    %eax,0xf0392cc4
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011a71a:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a71f:	0f b6 c0             	movzbl %al,%eax
f011a722:	8a 15 e8 2c 39 f0    	mov    0xf0392ce8,%dl
f011a728:	0f b6 d2             	movzbl %dl,%edx
f011a72b:	4a                   	dec    %edx
f011a72c:	39 d0                	cmp    %edx,%eax
f011a72e:	7d 08                	jge    f011a738 <schenv+0xe6>
f011a730:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a735:	40                   	inc    %eax
f011a736:	eb 05                	jmp    f011a73d <schenv+0xeb>
f011a738:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a73d:	a2 f8 2c 39 f0       	mov    %al,0xf0392cf8
		}
	}
}
f011a742:	90                   	nop
f011a743:	c9                   	leave  
f011a744:	c3                   	ret    

f011a745 <chksch>:

void chksch(uint8 onoff)
{
f011a745:	55                   	push   %ebp
f011a746:	89 e5                	mov    %esp,%ebp
f011a748:	83 ec 04             	sub    $0x4,%esp
f011a74b:	8b 45 08             	mov    0x8(%ebp),%eax
f011a74e:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f011a751:	c7 05 f4 2c 39 f0 00 	movl   $0x0,0xf0392cf4
f011a758:	00 00 00 
	__ne = NULL;
f011a75b:	c7 05 c4 2c 39 f0 00 	movl   $0x0,0xf0392cc4
f011a762:	00 00 00 
	__pl = 0 ;
f011a765:	c6 05 00 61 32 f0 00 	movb   $0x0,0xf0326100
	__nl = 0 ;
f011a76c:	c6 05 f8 2c 39 f0 00 	movb   $0x0,0xf0392cf8
	__chkstatus = onoff;
f011a773:	8a 45 fc             	mov    -0x4(%ebp),%al
f011a776:	a2 c0 2c 39 f0       	mov    %al,0xf0392cc0
}
f011a77b:	90                   	nop
f011a77c:	c9                   	leave  
f011a77d:	c3                   	ret    

f011a77e <chk1>:
void chk1()
{
f011a77e:	55                   	push   %ebp
f011a77f:	89 e5                	mov    %esp,%ebp
	if (__chkstatus == 0)
f011a781:	a0 c0 2c 39 f0       	mov    0xf0392cc0,%al
f011a786:	84 c0                	test   %al,%al
f011a788:	74 2b                	je     f011a7b5 <chk1+0x37>
		return ;
	__pe = curenv;
f011a78a:	a1 30 58 32 f0       	mov    0xf0325830,%eax
f011a78f:	a3 f4 2c 39 f0       	mov    %eax,0xf0392cf4
	__pl = __nl ;
f011a794:	a0 f8 2c 39 f0       	mov    0xf0392cf8,%al
f011a799:	a2 00 61 32 f0       	mov    %al,0xf0326100
	if (__pe == NULL)
f011a79e:	a1 f4 2c 39 f0       	mov    0xf0392cf4,%eax
f011a7a3:	85 c0                	test   %eax,%eax
f011a7a5:	75 07                	jne    f011a7ae <chk1+0x30>
	{
		__pl = 0;
f011a7a7:	c6 05 00 61 32 f0 00 	movb   $0x0,0xf0326100
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f011a7ae:	e8 9f fe ff ff       	call   f011a652 <schenv>
f011a7b3:	eb 01                	jmp    f011a7b6 <chk1+0x38>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f011a7b5:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f011a7b6:	5d                   	pop    %ebp
f011a7b7:	c3                   	ret    

f011a7b8 <chk2>:
void chk2(struct Env* __se)
{
f011a7b8:	55                   	push   %ebp
f011a7b9:	89 e5                	mov    %esp,%ebp
f011a7bb:	53                   	push   %ebx
f011a7bc:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f011a7bf:	a0 c0 2c 39 f0       	mov    0xf0392cc0,%al
f011a7c4:	84 c0                	test   %al,%al
f011a7c6:	0f 84 35 02 00 00    	je     f011aa01 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f011a7cc:	a1 c4 2c 39 f0       	mov    0xf0392cc4,%eax
f011a7d1:	39 45 08             	cmp    %eax,0x8(%ebp)
f011a7d4:	74 19                	je     f011a7ef <chk2+0x37>
f011a7d6:	68 d0 f1 11 f0       	push   $0xf011f1d0
f011a7db:	68 dd f1 11 f0       	push   $0xf011f1dd
f011a7e0:	68 9b 00 00 00       	push   $0x9b
f011a7e5:	68 f2 f1 11 f0       	push   $0xf011f1f2
f011a7ea:	e8 13 5a fe ff       	call   f0100202 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f011a7ef:	a1 c4 2c 39 f0       	mov    0xf0392cc4,%eax
f011a7f4:	85 c0                	test   %eax,%eax
f011a7f6:	0f 84 1b 01 00 00    	je     f011a917 <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f011a7fc:	a0 f8 2c 39 f0       	mov    0xf0392cf8,%al
f011a801:	0f b6 c0             	movzbl %al,%eax
f011a804:	8a 80 b4 2c 39 f0    	mov    -0xfc6d34c(%eax),%al
f011a80a:	0f b6 d8             	movzbl %al,%ebx
f011a80d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f011a812:	99                   	cltd   
f011a813:	f7 fb                	idiv   %ebx
f011a815:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f011a81b:	a0 f8 2c 39 f0       	mov    0xf0392cf8,%al
f011a820:	0f b6 c0             	movzbl %al,%eax
f011a823:	8a 80 b4 2c 39 f0    	mov    -0xfc6d34c(%eax),%al
f011a829:	0f b6 d8             	movzbl %al,%ebx
f011a82c:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f011a831:	99                   	cltd   
f011a832:	f7 fb                	idiv   %ebx
f011a834:	89 c3                	mov    %eax,%ebx
f011a836:	89 c8                	mov    %ecx,%eax
f011a838:	99                   	cltd   
f011a839:	f7 fb                	idiv   %ebx
f011a83b:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f011a83f:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011a843:	83 e0 01             	and    $0x1,%eax
f011a846:	66 85 c0             	test   %ax,%ax
f011a849:	74 07                	je     f011a852 <chk2+0x9a>
f011a84b:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011a84f:	40                   	inc    %eax
f011a850:	eb 04                	jmp    f011a856 <chk2+0x9e>
f011a852:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011a856:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f011a85a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f011a85e:	89 d0                	mov    %edx,%eax
f011a860:	c1 e0 02             	shl    $0x2,%eax
f011a863:	01 d0                	add    %edx,%eax
f011a865:	01 c0                	add    %eax,%eax
f011a867:	01 d0                	add    %edx,%eax
f011a869:	c1 e0 02             	shl    $0x2,%eax
f011a86c:	01 d0                	add    %edx,%eax
f011a86e:	01 c0                	add    %eax,%eax
f011a870:	89 c1                	mov    %eax,%ecx
f011a872:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011a877:	f7 e9                	imul   %ecx
f011a879:	c1 fa 05             	sar    $0x5,%edx
f011a87c:	89 c8                	mov    %ecx,%eax
f011a87e:	c1 f8 1f             	sar    $0x1f,%eax
f011a881:	29 c2                	sub    %eax,%edx
f011a883:	89 d0                	mov    %edx,%eax
f011a885:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f011a889:	e8 75 ca fe ff       	call   f0107303 <kclock_read_cnt0>
f011a88e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f011a892:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011a896:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f011a89a:	76 0a                	jbe    f011a8a6 <chk2+0xee>
f011a89c:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011a8a0:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011a8a4:	76 19                	jbe    f011a8bf <chk2+0x107>
f011a8a6:	68 04 f2 11 f0       	push   $0xf011f204
f011a8ab:	68 dd f1 11 f0       	push   $0xf011f1dd
f011a8b0:	68 a5 00 00 00       	push   $0xa5
f011a8b5:	68 f2 f1 11 f0       	push   $0xf011f1f2
f011a8ba:	e8 43 59 fe ff       	call   f0100202 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f011a8bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a8c6:	eb 42                	jmp    f011a90a <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f011a8c8:	a1 c4 2c 39 f0       	mov    0xf0392cc4,%eax
f011a8cd:	8b 40 4c             	mov    0x4c(%eax),%eax
f011a8d0:	89 c2                	mov    %eax,%edx
f011a8d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a8d5:	c1 e0 04             	shl    $0x4,%eax
f011a8d8:	05 20 61 32 f0       	add    $0xf0326120,%eax
f011a8dd:	83 ec 08             	sub    $0x8,%esp
f011a8e0:	52                   	push   %edx
f011a8e1:	50                   	push   %eax
f011a8e2:	e8 86 e8 fe ff       	call   f010916d <find_env_in_queue>
f011a8e7:	83 c4 10             	add    $0x10,%esp
f011a8ea:	85 c0                	test   %eax,%eax
f011a8ec:	74 19                	je     f011a907 <chk2+0x14f>
f011a8ee:	68 28 f2 11 f0       	push   $0xf011f228
f011a8f3:	68 dd f1 11 f0       	push   $0xf011f1dd
f011a8f8:	68 a9 00 00 00       	push   $0xa9
f011a8fd:	68 f2 f1 11 f0       	push   $0xf011f1f2
f011a902:	e8 fb 58 fe ff       	call   f0100202 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f011a907:	ff 45 f4             	incl   -0xc(%ebp)
f011a90a:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011a90f:	0f b6 c0             	movzbl %al,%eax
f011a912:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a915:	7f b1                	jg     f011a8c8 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f011a917:	a1 f4 2c 39 f0       	mov    0xf0392cf4,%eax
f011a91c:	85 c0                	test   %eax,%eax
f011a91e:	0f 84 de 00 00 00    	je     f011aa02 <chk2+0x24a>
f011a924:	8b 15 f4 2c 39 f0    	mov    0xf0392cf4,%edx
f011a92a:	a1 c4 2c 39 f0       	mov    0xf0392cc4,%eax
f011a92f:	39 c2                	cmp    %eax,%edx
f011a931:	0f 84 cb 00 00 00    	je     f011aa02 <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f011a937:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a93c:	0f b6 c0             	movzbl %al,%eax
f011a93f:	8a 15 e8 2c 39 f0    	mov    0xf0392ce8,%dl
f011a945:	0f b6 d2             	movzbl %dl,%edx
f011a948:	4a                   	dec    %edx
f011a949:	39 d0                	cmp    %edx,%eax
f011a94b:	74 08                	je     f011a955 <chk2+0x19d>
f011a94d:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a952:	40                   	inc    %eax
f011a953:	eb 05                	jmp    f011a95a <chk2+0x1a2>
f011a955:	a0 00 61 32 f0       	mov    0xf0326100,%al
f011a95a:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f011a95d:	a1 f4 2c 39 f0       	mov    0xf0392cf4,%eax
f011a962:	8b 40 4c             	mov    0x4c(%eax),%eax
f011a965:	89 c2                	mov    %eax,%edx
f011a967:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f011a96b:	c1 e0 04             	shl    $0x4,%eax
f011a96e:	05 20 61 32 f0       	add    $0xf0326120,%eax
f011a973:	83 ec 08             	sub    $0x8,%esp
f011a976:	52                   	push   %edx
f011a977:	50                   	push   %eax
f011a978:	e8 f0 e7 fe ff       	call   f010916d <find_env_in_queue>
f011a97d:	83 c4 10             	add    $0x10,%esp
f011a980:	85 c0                	test   %eax,%eax
f011a982:	75 19                	jne    f011a99d <chk2+0x1e5>
f011a984:	68 68 f2 11 f0       	push   $0xf011f268
f011a989:	68 dd f1 11 f0       	push   $0xf011f1dd
f011a98e:	68 af 00 00 00       	push   $0xaf
f011a993:	68 f2 f1 11 f0       	push   $0xf011f1f2
f011a998:	e8 65 58 fe ff       	call   f0100202 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f011a99d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a9a4:	eb 4c                	jmp    f011a9f2 <chk2+0x23a>
		{
			if (i == __tl) continue;
f011a9a6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f011a9aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9ad:	74 3f                	je     f011a9ee <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f011a9af:	a1 f4 2c 39 f0       	mov    0xf0392cf4,%eax
f011a9b4:	8b 40 4c             	mov    0x4c(%eax),%eax
f011a9b7:	89 c2                	mov    %eax,%edx
f011a9b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a9bc:	c1 e0 04             	shl    $0x4,%eax
f011a9bf:	05 20 61 32 f0       	add    $0xf0326120,%eax
f011a9c4:	83 ec 08             	sub    $0x8,%esp
f011a9c7:	52                   	push   %edx
f011a9c8:	50                   	push   %eax
f011a9c9:	e8 9f e7 fe ff       	call   f010916d <find_env_in_queue>
f011a9ce:	83 c4 10             	add    $0x10,%esp
f011a9d1:	85 c0                	test   %eax,%eax
f011a9d3:	74 1a                	je     f011a9ef <chk2+0x237>
f011a9d5:	68 ac f2 11 f0       	push   $0xf011f2ac
f011a9da:	68 dd f1 11 f0       	push   $0xf011f1dd
f011a9df:	68 b3 00 00 00       	push   $0xb3
f011a9e4:	68 f2 f1 11 f0       	push   $0xf011f1f2
f011a9e9:	e8 14 58 fe ff       	call   f0100202 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f011a9ee:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f011a9ef:	ff 45 f0             	incl   -0x10(%ebp)
f011a9f2:	a0 e8 2c 39 f0       	mov    0xf0392ce8,%al
f011a9f7:	0f b6 c0             	movzbl %al,%eax
f011a9fa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a9fd:	7f a7                	jg     f011a9a6 <chk2+0x1ee>
f011a9ff:	eb 01                	jmp    f011aa02 <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f011aa01:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f011aa02:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011aa05:	c9                   	leave  
f011aa06:	c3                   	ret    

f011aa07 <set_program_priority>:
#include <kern/memory_manager.h>
#include <kern/kheap.h>
#include <kern/file_manager.h>

void set_program_priority(struct Env* env, int priority)
{
f011aa07:	55                   	push   %ebp
f011aa08:	89 e5                	mov    %esp,%ebp
f011aa0a:	83 ec 08             	sub    $0x8,%esp
	panic("set_program_priority() is not implemented yet...!!");
f011aa0d:	83 ec 04             	sub    $0x4,%esp
f011aa10:	68 ec f2 11 f0       	push   $0xf011f2ec
f011aa15:	6a 0b                	push   $0xb
f011aa17:	68 1f f3 11 f0       	push   $0xf011f31f
f011aa1c:	e8 72 57 fe ff       	call   f0100193 <_panic>
f011aa21:	66 90                	xchg   %ax,%ax
f011aa23:	90                   	nop

f011aa24 <__udivdi3>:
f011aa24:	55                   	push   %ebp
f011aa25:	57                   	push   %edi
f011aa26:	56                   	push   %esi
f011aa27:	53                   	push   %ebx
f011aa28:	83 ec 1c             	sub    $0x1c,%esp
f011aa2b:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f011aa2f:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f011aa33:	8b 7c 24 38          	mov    0x38(%esp),%edi
f011aa37:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f011aa3b:	89 ca                	mov    %ecx,%edx
f011aa3d:	89 f8                	mov    %edi,%eax
f011aa3f:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f011aa43:	85 f6                	test   %esi,%esi
f011aa45:	75 2d                	jne    f011aa74 <__udivdi3+0x50>
f011aa47:	39 cf                	cmp    %ecx,%edi
f011aa49:	77 65                	ja     f011aab0 <__udivdi3+0x8c>
f011aa4b:	89 fd                	mov    %edi,%ebp
f011aa4d:	85 ff                	test   %edi,%edi
f011aa4f:	75 0b                	jne    f011aa5c <__udivdi3+0x38>
f011aa51:	b8 01 00 00 00       	mov    $0x1,%eax
f011aa56:	31 d2                	xor    %edx,%edx
f011aa58:	f7 f7                	div    %edi
f011aa5a:	89 c5                	mov    %eax,%ebp
f011aa5c:	31 d2                	xor    %edx,%edx
f011aa5e:	89 c8                	mov    %ecx,%eax
f011aa60:	f7 f5                	div    %ebp
f011aa62:	89 c1                	mov    %eax,%ecx
f011aa64:	89 d8                	mov    %ebx,%eax
f011aa66:	f7 f5                	div    %ebp
f011aa68:	89 cf                	mov    %ecx,%edi
f011aa6a:	89 fa                	mov    %edi,%edx
f011aa6c:	83 c4 1c             	add    $0x1c,%esp
f011aa6f:	5b                   	pop    %ebx
f011aa70:	5e                   	pop    %esi
f011aa71:	5f                   	pop    %edi
f011aa72:	5d                   	pop    %ebp
f011aa73:	c3                   	ret    
f011aa74:	39 ce                	cmp    %ecx,%esi
f011aa76:	77 28                	ja     f011aaa0 <__udivdi3+0x7c>
f011aa78:	0f bd fe             	bsr    %esi,%edi
f011aa7b:	83 f7 1f             	xor    $0x1f,%edi
f011aa7e:	75 40                	jne    f011aac0 <__udivdi3+0x9c>
f011aa80:	39 ce                	cmp    %ecx,%esi
f011aa82:	72 0a                	jb     f011aa8e <__udivdi3+0x6a>
f011aa84:	3b 44 24 08          	cmp    0x8(%esp),%eax
f011aa88:	0f 87 9e 00 00 00    	ja     f011ab2c <__udivdi3+0x108>
f011aa8e:	b8 01 00 00 00       	mov    $0x1,%eax
f011aa93:	89 fa                	mov    %edi,%edx
f011aa95:	83 c4 1c             	add    $0x1c,%esp
f011aa98:	5b                   	pop    %ebx
f011aa99:	5e                   	pop    %esi
f011aa9a:	5f                   	pop    %edi
f011aa9b:	5d                   	pop    %ebp
f011aa9c:	c3                   	ret    
f011aa9d:	8d 76 00             	lea    0x0(%esi),%esi
f011aaa0:	31 ff                	xor    %edi,%edi
f011aaa2:	31 c0                	xor    %eax,%eax
f011aaa4:	89 fa                	mov    %edi,%edx
f011aaa6:	83 c4 1c             	add    $0x1c,%esp
f011aaa9:	5b                   	pop    %ebx
f011aaaa:	5e                   	pop    %esi
f011aaab:	5f                   	pop    %edi
f011aaac:	5d                   	pop    %ebp
f011aaad:	c3                   	ret    
f011aaae:	66 90                	xchg   %ax,%ax
f011aab0:	89 d8                	mov    %ebx,%eax
f011aab2:	f7 f7                	div    %edi
f011aab4:	31 ff                	xor    %edi,%edi
f011aab6:	89 fa                	mov    %edi,%edx
f011aab8:	83 c4 1c             	add    $0x1c,%esp
f011aabb:	5b                   	pop    %ebx
f011aabc:	5e                   	pop    %esi
f011aabd:	5f                   	pop    %edi
f011aabe:	5d                   	pop    %ebp
f011aabf:	c3                   	ret    
f011aac0:	bd 20 00 00 00       	mov    $0x20,%ebp
f011aac5:	89 eb                	mov    %ebp,%ebx
f011aac7:	29 fb                	sub    %edi,%ebx
f011aac9:	89 f9                	mov    %edi,%ecx
f011aacb:	d3 e6                	shl    %cl,%esi
f011aacd:	89 c5                	mov    %eax,%ebp
f011aacf:	88 d9                	mov    %bl,%cl
f011aad1:	d3 ed                	shr    %cl,%ebp
f011aad3:	89 e9                	mov    %ebp,%ecx
f011aad5:	09 f1                	or     %esi,%ecx
f011aad7:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f011aadb:	89 f9                	mov    %edi,%ecx
f011aadd:	d3 e0                	shl    %cl,%eax
f011aadf:	89 c5                	mov    %eax,%ebp
f011aae1:	89 d6                	mov    %edx,%esi
f011aae3:	88 d9                	mov    %bl,%cl
f011aae5:	d3 ee                	shr    %cl,%esi
f011aae7:	89 f9                	mov    %edi,%ecx
f011aae9:	d3 e2                	shl    %cl,%edx
f011aaeb:	8b 44 24 08          	mov    0x8(%esp),%eax
f011aaef:	88 d9                	mov    %bl,%cl
f011aaf1:	d3 e8                	shr    %cl,%eax
f011aaf3:	09 c2                	or     %eax,%edx
f011aaf5:	89 d0                	mov    %edx,%eax
f011aaf7:	89 f2                	mov    %esi,%edx
f011aaf9:	f7 74 24 0c          	divl   0xc(%esp)
f011aafd:	89 d6                	mov    %edx,%esi
f011aaff:	89 c3                	mov    %eax,%ebx
f011ab01:	f7 e5                	mul    %ebp
f011ab03:	39 d6                	cmp    %edx,%esi
f011ab05:	72 19                	jb     f011ab20 <__udivdi3+0xfc>
f011ab07:	74 0b                	je     f011ab14 <__udivdi3+0xf0>
f011ab09:	89 d8                	mov    %ebx,%eax
f011ab0b:	31 ff                	xor    %edi,%edi
f011ab0d:	e9 58 ff ff ff       	jmp    f011aa6a <__udivdi3+0x46>
f011ab12:	66 90                	xchg   %ax,%ax
f011ab14:	8b 54 24 08          	mov    0x8(%esp),%edx
f011ab18:	89 f9                	mov    %edi,%ecx
f011ab1a:	d3 e2                	shl    %cl,%edx
f011ab1c:	39 c2                	cmp    %eax,%edx
f011ab1e:	73 e9                	jae    f011ab09 <__udivdi3+0xe5>
f011ab20:	8d 43 ff             	lea    -0x1(%ebx),%eax
f011ab23:	31 ff                	xor    %edi,%edi
f011ab25:	e9 40 ff ff ff       	jmp    f011aa6a <__udivdi3+0x46>
f011ab2a:	66 90                	xchg   %ax,%ax
f011ab2c:	31 c0                	xor    %eax,%eax
f011ab2e:	e9 37 ff ff ff       	jmp    f011aa6a <__udivdi3+0x46>
f011ab33:	90                   	nop

f011ab34 <__umoddi3>:
f011ab34:	55                   	push   %ebp
f011ab35:	57                   	push   %edi
f011ab36:	56                   	push   %esi
f011ab37:	53                   	push   %ebx
f011ab38:	83 ec 1c             	sub    $0x1c,%esp
f011ab3b:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f011ab3f:	8b 74 24 34          	mov    0x34(%esp),%esi
f011ab43:	8b 7c 24 38          	mov    0x38(%esp),%edi
f011ab47:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f011ab4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
f011ab4f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f011ab53:	89 f3                	mov    %esi,%ebx
f011ab55:	89 fa                	mov    %edi,%edx
f011ab57:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f011ab5b:	89 34 24             	mov    %esi,(%esp)
f011ab5e:	85 c0                	test   %eax,%eax
f011ab60:	75 1a                	jne    f011ab7c <__umoddi3+0x48>
f011ab62:	39 f7                	cmp    %esi,%edi
f011ab64:	0f 86 a2 00 00 00    	jbe    f011ac0c <__umoddi3+0xd8>
f011ab6a:	89 c8                	mov    %ecx,%eax
f011ab6c:	89 f2                	mov    %esi,%edx
f011ab6e:	f7 f7                	div    %edi
f011ab70:	89 d0                	mov    %edx,%eax
f011ab72:	31 d2                	xor    %edx,%edx
f011ab74:	83 c4 1c             	add    $0x1c,%esp
f011ab77:	5b                   	pop    %ebx
f011ab78:	5e                   	pop    %esi
f011ab79:	5f                   	pop    %edi
f011ab7a:	5d                   	pop    %ebp
f011ab7b:	c3                   	ret    
f011ab7c:	39 f0                	cmp    %esi,%eax
f011ab7e:	0f 87 ac 00 00 00    	ja     f011ac30 <__umoddi3+0xfc>
f011ab84:	0f bd e8             	bsr    %eax,%ebp
f011ab87:	83 f5 1f             	xor    $0x1f,%ebp
f011ab8a:	0f 84 ac 00 00 00    	je     f011ac3c <__umoddi3+0x108>
f011ab90:	bf 20 00 00 00       	mov    $0x20,%edi
f011ab95:	29 ef                	sub    %ebp,%edi
f011ab97:	89 fe                	mov    %edi,%esi
f011ab99:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f011ab9d:	89 e9                	mov    %ebp,%ecx
f011ab9f:	d3 e0                	shl    %cl,%eax
f011aba1:	89 d7                	mov    %edx,%edi
f011aba3:	89 f1                	mov    %esi,%ecx
f011aba5:	d3 ef                	shr    %cl,%edi
f011aba7:	09 c7                	or     %eax,%edi
f011aba9:	89 e9                	mov    %ebp,%ecx
f011abab:	d3 e2                	shl    %cl,%edx
f011abad:	89 14 24             	mov    %edx,(%esp)
f011abb0:	89 d8                	mov    %ebx,%eax
f011abb2:	d3 e0                	shl    %cl,%eax
f011abb4:	89 c2                	mov    %eax,%edx
f011abb6:	8b 44 24 08          	mov    0x8(%esp),%eax
f011abba:	d3 e0                	shl    %cl,%eax
f011abbc:	89 44 24 04          	mov    %eax,0x4(%esp)
f011abc0:	8b 44 24 08          	mov    0x8(%esp),%eax
f011abc4:	89 f1                	mov    %esi,%ecx
f011abc6:	d3 e8                	shr    %cl,%eax
f011abc8:	09 d0                	or     %edx,%eax
f011abca:	d3 eb                	shr    %cl,%ebx
f011abcc:	89 da                	mov    %ebx,%edx
f011abce:	f7 f7                	div    %edi
f011abd0:	89 d3                	mov    %edx,%ebx
f011abd2:	f7 24 24             	mull   (%esp)
f011abd5:	89 c6                	mov    %eax,%esi
f011abd7:	89 d1                	mov    %edx,%ecx
f011abd9:	39 d3                	cmp    %edx,%ebx
f011abdb:	0f 82 87 00 00 00    	jb     f011ac68 <__umoddi3+0x134>
f011abe1:	0f 84 91 00 00 00    	je     f011ac78 <__umoddi3+0x144>
f011abe7:	8b 54 24 04          	mov    0x4(%esp),%edx
f011abeb:	29 f2                	sub    %esi,%edx
f011abed:	19 cb                	sbb    %ecx,%ebx
f011abef:	89 d8                	mov    %ebx,%eax
f011abf1:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f011abf5:	d3 e0                	shl    %cl,%eax
f011abf7:	89 e9                	mov    %ebp,%ecx
f011abf9:	d3 ea                	shr    %cl,%edx
f011abfb:	09 d0                	or     %edx,%eax
f011abfd:	89 e9                	mov    %ebp,%ecx
f011abff:	d3 eb                	shr    %cl,%ebx
f011ac01:	89 da                	mov    %ebx,%edx
f011ac03:	83 c4 1c             	add    $0x1c,%esp
f011ac06:	5b                   	pop    %ebx
f011ac07:	5e                   	pop    %esi
f011ac08:	5f                   	pop    %edi
f011ac09:	5d                   	pop    %ebp
f011ac0a:	c3                   	ret    
f011ac0b:	90                   	nop
f011ac0c:	89 fd                	mov    %edi,%ebp
f011ac0e:	85 ff                	test   %edi,%edi
f011ac10:	75 0b                	jne    f011ac1d <__umoddi3+0xe9>
f011ac12:	b8 01 00 00 00       	mov    $0x1,%eax
f011ac17:	31 d2                	xor    %edx,%edx
f011ac19:	f7 f7                	div    %edi
f011ac1b:	89 c5                	mov    %eax,%ebp
f011ac1d:	89 f0                	mov    %esi,%eax
f011ac1f:	31 d2                	xor    %edx,%edx
f011ac21:	f7 f5                	div    %ebp
f011ac23:	89 c8                	mov    %ecx,%eax
f011ac25:	f7 f5                	div    %ebp
f011ac27:	89 d0                	mov    %edx,%eax
f011ac29:	e9 44 ff ff ff       	jmp    f011ab72 <__umoddi3+0x3e>
f011ac2e:	66 90                	xchg   %ax,%ax
f011ac30:	89 c8                	mov    %ecx,%eax
f011ac32:	89 f2                	mov    %esi,%edx
f011ac34:	83 c4 1c             	add    $0x1c,%esp
f011ac37:	5b                   	pop    %ebx
f011ac38:	5e                   	pop    %esi
f011ac39:	5f                   	pop    %edi
f011ac3a:	5d                   	pop    %ebp
f011ac3b:	c3                   	ret    
f011ac3c:	3b 04 24             	cmp    (%esp),%eax
f011ac3f:	72 06                	jb     f011ac47 <__umoddi3+0x113>
f011ac41:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f011ac45:	77 0f                	ja     f011ac56 <__umoddi3+0x122>
f011ac47:	89 f2                	mov    %esi,%edx
f011ac49:	29 f9                	sub    %edi,%ecx
f011ac4b:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f011ac4f:	89 14 24             	mov    %edx,(%esp)
f011ac52:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f011ac56:	8b 44 24 04          	mov    0x4(%esp),%eax
f011ac5a:	8b 14 24             	mov    (%esp),%edx
f011ac5d:	83 c4 1c             	add    $0x1c,%esp
f011ac60:	5b                   	pop    %ebx
f011ac61:	5e                   	pop    %esi
f011ac62:	5f                   	pop    %edi
f011ac63:	5d                   	pop    %ebp
f011ac64:	c3                   	ret    
f011ac65:	8d 76 00             	lea    0x0(%esi),%esi
f011ac68:	2b 04 24             	sub    (%esp),%eax
f011ac6b:	19 fa                	sbb    %edi,%edx
f011ac6d:	89 d1                	mov    %edx,%ecx
f011ac6f:	89 c6                	mov    %eax,%esi
f011ac71:	e9 71 ff ff ff       	jmp    f011abe7 <__umoddi3+0xb3>
f011ac76:	66 90                	xchg   %ax,%ax
f011ac78:	39 44 24 04          	cmp    %eax,0x4(%esp)
f011ac7c:	72 ea                	jb     f011ac68 <__umoddi3+0x134>
f011ac7e:	89 d9                	mov    %ebx,%ecx
f011ac80:	e9 62 ff ff ff       	jmp    f011abe7 <__umoddi3+0xb3>
